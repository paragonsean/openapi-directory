/*
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Definition of the DSC Meta Configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:04:06.196812-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DscMetaConfiguration {
  public static final String SERIALIZED_NAME_ACTION_AFTER_REBOOT = "actionAfterReboot";
  @SerializedName(SERIALIZED_NAME_ACTION_AFTER_REBOOT)
  private String actionAfterReboot;

  public static final String SERIALIZED_NAME_ALLOW_MODULE_OVERWRITE = "allowModuleOverwrite";
  @SerializedName(SERIALIZED_NAME_ALLOW_MODULE_OVERWRITE)
  private Boolean allowModuleOverwrite;

  public static final String SERIALIZED_NAME_CERTIFICATE_ID = "certificateId";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_ID)
  private String certificateId;

  public static final String SERIALIZED_NAME_CONFIGURATION_MODE = "configurationMode";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_MODE)
  private String configurationMode;

  public static final String SERIALIZED_NAME_CONFIGURATION_MODE_FREQUENCY_MINS = "configurationModeFrequencyMins";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_MODE_FREQUENCY_MINS)
  private Integer configurationModeFrequencyMins;

  public static final String SERIALIZED_NAME_REBOOT_NODE_IF_NEEDED = "rebootNodeIfNeeded";
  @SerializedName(SERIALIZED_NAME_REBOOT_NODE_IF_NEEDED)
  private Boolean rebootNodeIfNeeded;

  public static final String SERIALIZED_NAME_REFRESH_FREQUENCY_MINS = "refreshFrequencyMins";
  @SerializedName(SERIALIZED_NAME_REFRESH_FREQUENCY_MINS)
  private Integer refreshFrequencyMins;

  public DscMetaConfiguration() {
  }

  public DscMetaConfiguration actionAfterReboot(String actionAfterReboot) {
    this.actionAfterReboot = actionAfterReboot;
    return this;
  }

  /**
   * Gets or sets the ActionAfterReboot value of the meta configuration.
   * @return actionAfterReboot
   */
  @javax.annotation.Nullable
  public String getActionAfterReboot() {
    return actionAfterReboot;
  }

  public void setActionAfterReboot(String actionAfterReboot) {
    this.actionAfterReboot = actionAfterReboot;
  }


  public DscMetaConfiguration allowModuleOverwrite(Boolean allowModuleOverwrite) {
    this.allowModuleOverwrite = allowModuleOverwrite;
    return this;
  }

  /**
   * Gets or sets the AllowModuleOverwrite value of the meta configuration.
   * @return allowModuleOverwrite
   */
  @javax.annotation.Nullable
  public Boolean getAllowModuleOverwrite() {
    return allowModuleOverwrite;
  }

  public void setAllowModuleOverwrite(Boolean allowModuleOverwrite) {
    this.allowModuleOverwrite = allowModuleOverwrite;
  }


  public DscMetaConfiguration certificateId(String certificateId) {
    this.certificateId = certificateId;
    return this;
  }

  /**
   * Gets or sets the CertificateId value of the meta configuration.
   * @return certificateId
   */
  @javax.annotation.Nullable
  public String getCertificateId() {
    return certificateId;
  }

  public void setCertificateId(String certificateId) {
    this.certificateId = certificateId;
  }


  public DscMetaConfiguration configurationMode(String configurationMode) {
    this.configurationMode = configurationMode;
    return this;
  }

  /**
   * Gets or sets the ConfigurationMode value of the meta configuration.
   * @return configurationMode
   */
  @javax.annotation.Nullable
  public String getConfigurationMode() {
    return configurationMode;
  }

  public void setConfigurationMode(String configurationMode) {
    this.configurationMode = configurationMode;
  }


  public DscMetaConfiguration configurationModeFrequencyMins(Integer configurationModeFrequencyMins) {
    this.configurationModeFrequencyMins = configurationModeFrequencyMins;
    return this;
  }

  /**
   * Gets or sets the ConfigurationModeFrequencyMins value of the meta configuration.
   * @return configurationModeFrequencyMins
   */
  @javax.annotation.Nullable
  public Integer getConfigurationModeFrequencyMins() {
    return configurationModeFrequencyMins;
  }

  public void setConfigurationModeFrequencyMins(Integer configurationModeFrequencyMins) {
    this.configurationModeFrequencyMins = configurationModeFrequencyMins;
  }


  public DscMetaConfiguration rebootNodeIfNeeded(Boolean rebootNodeIfNeeded) {
    this.rebootNodeIfNeeded = rebootNodeIfNeeded;
    return this;
  }

  /**
   * Gets or sets the RebootNodeIfNeeded value of the meta configuration.
   * @return rebootNodeIfNeeded
   */
  @javax.annotation.Nullable
  public Boolean getRebootNodeIfNeeded() {
    return rebootNodeIfNeeded;
  }

  public void setRebootNodeIfNeeded(Boolean rebootNodeIfNeeded) {
    this.rebootNodeIfNeeded = rebootNodeIfNeeded;
  }


  public DscMetaConfiguration refreshFrequencyMins(Integer refreshFrequencyMins) {
    this.refreshFrequencyMins = refreshFrequencyMins;
    return this;
  }

  /**
   * Gets or sets the RefreshFrequencyMins value of the meta configuration.
   * @return refreshFrequencyMins
   */
  @javax.annotation.Nullable
  public Integer getRefreshFrequencyMins() {
    return refreshFrequencyMins;
  }

  public void setRefreshFrequencyMins(Integer refreshFrequencyMins) {
    this.refreshFrequencyMins = refreshFrequencyMins;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DscMetaConfiguration dscMetaConfiguration = (DscMetaConfiguration) o;
    return Objects.equals(this.actionAfterReboot, dscMetaConfiguration.actionAfterReboot) &&
        Objects.equals(this.allowModuleOverwrite, dscMetaConfiguration.allowModuleOverwrite) &&
        Objects.equals(this.certificateId, dscMetaConfiguration.certificateId) &&
        Objects.equals(this.configurationMode, dscMetaConfiguration.configurationMode) &&
        Objects.equals(this.configurationModeFrequencyMins, dscMetaConfiguration.configurationModeFrequencyMins) &&
        Objects.equals(this.rebootNodeIfNeeded, dscMetaConfiguration.rebootNodeIfNeeded) &&
        Objects.equals(this.refreshFrequencyMins, dscMetaConfiguration.refreshFrequencyMins);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionAfterReboot, allowModuleOverwrite, certificateId, configurationMode, configurationModeFrequencyMins, rebootNodeIfNeeded, refreshFrequencyMins);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DscMetaConfiguration {\n");
    sb.append("    actionAfterReboot: ").append(toIndentedString(actionAfterReboot)).append("\n");
    sb.append("    allowModuleOverwrite: ").append(toIndentedString(allowModuleOverwrite)).append("\n");
    sb.append("    certificateId: ").append(toIndentedString(certificateId)).append("\n");
    sb.append("    configurationMode: ").append(toIndentedString(configurationMode)).append("\n");
    sb.append("    configurationModeFrequencyMins: ").append(toIndentedString(configurationModeFrequencyMins)).append("\n");
    sb.append("    rebootNodeIfNeeded: ").append(toIndentedString(rebootNodeIfNeeded)).append("\n");
    sb.append("    refreshFrequencyMins: ").append(toIndentedString(refreshFrequencyMins)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionAfterReboot");
    openapiFields.add("allowModuleOverwrite");
    openapiFields.add("certificateId");
    openapiFields.add("configurationMode");
    openapiFields.add("configurationModeFrequencyMins");
    openapiFields.add("rebootNodeIfNeeded");
    openapiFields.add("refreshFrequencyMins");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DscMetaConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DscMetaConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DscMetaConfiguration is not found in the empty JSON string", DscMetaConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DscMetaConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DscMetaConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("actionAfterReboot") != null && !jsonObj.get("actionAfterReboot").isJsonNull()) && !jsonObj.get("actionAfterReboot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionAfterReboot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionAfterReboot").toString()));
      }
      if ((jsonObj.get("certificateId") != null && !jsonObj.get("certificateId").isJsonNull()) && !jsonObj.get("certificateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificateId").toString()));
      }
      if ((jsonObj.get("configurationMode") != null && !jsonObj.get("configurationMode").isJsonNull()) && !jsonObj.get("configurationMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configurationMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configurationMode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DscMetaConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DscMetaConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DscMetaConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DscMetaConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<DscMetaConfiguration>() {
           @Override
           public void write(JsonWriter out, DscMetaConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DscMetaConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DscMetaConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DscMetaConfiguration
   * @throws IOException if the JSON string is invalid with respect to DscMetaConfiguration
   */
  public static DscMetaConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DscMetaConfiguration.class);
  }

  /**
   * Convert an instance of DscMetaConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

