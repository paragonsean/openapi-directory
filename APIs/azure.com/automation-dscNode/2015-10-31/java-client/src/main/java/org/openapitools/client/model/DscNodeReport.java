/*
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DscMetaConfiguration;
import org.openapitools.client.model.DscReportError;
import org.openapitools.client.model.DscReportResource;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Definition of the dsc node report type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:04:06.196812-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DscNodeReport {
  public static final String SERIALIZED_NAME_CONFIGURATION_VERSION = "configurationVersion";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_VERSION)
  private String configurationVersion;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<DscReportError> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOST_NAME = "hostName";
  @SerializedName(SERIALIZED_NAME_HOST_NAME)
  private String hostName;

  public static final String SERIALIZED_NAME_I_P_V4_ADDRESSES = "iPV4Addresses";
  @SerializedName(SERIALIZED_NAME_I_P_V4_ADDRESSES)
  private List<String> iPV4Addresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_I_P_V6_ADDRESSES = "iPV6Addresses";
  @SerializedName(SERIALIZED_NAME_I_P_V6_ADDRESSES)
  private List<String> iPV6Addresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "lastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private OffsetDateTime lastModifiedTime;

  public static final String SERIALIZED_NAME_META_CONFIGURATION = "metaConfiguration";
  @SerializedName(SERIALIZED_NAME_META_CONFIGURATION)
  private DscMetaConfiguration metaConfiguration;

  public static final String SERIALIZED_NAME_NUMBER_OF_RESOURCES = "numberOfResources";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_RESOURCES)
  private Integer numberOfResources;

  public static final String SERIALIZED_NAME_RAW_ERRORS = "rawErrors";
  @SerializedName(SERIALIZED_NAME_RAW_ERRORS)
  private String rawErrors;

  public static final String SERIALIZED_NAME_REBOOT_REQUESTED = "rebootRequested";
  @SerializedName(SERIALIZED_NAME_REBOOT_REQUESTED)
  private String rebootRequested;

  public static final String SERIALIZED_NAME_REFRESH_MODE = "refreshMode";
  @SerializedName(SERIALIZED_NAME_REFRESH_MODE)
  private String refreshMode;

  public static final String SERIALIZED_NAME_REPORT_FORMAT_VERSION = "reportFormatVersion";
  @SerializedName(SERIALIZED_NAME_REPORT_FORMAT_VERSION)
  private String reportFormatVersion;

  public static final String SERIALIZED_NAME_REPORT_ID = "reportId";
  @SerializedName(SERIALIZED_NAME_REPORT_ID)
  private String reportId;

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private List<DscReportResource> resources = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public DscNodeReport() {
  }

  public DscNodeReport configurationVersion(String configurationVersion) {
    this.configurationVersion = configurationVersion;
    return this;
  }

  /**
   * Gets or sets the configurationVersion of the node report.
   * @return configurationVersion
   */
  @javax.annotation.Nullable
  public String getConfigurationVersion() {
    return configurationVersion;
  }

  public void setConfigurationVersion(String configurationVersion) {
    this.configurationVersion = configurationVersion;
  }


  public DscNodeReport endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Gets or sets the end time of the node report.
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public DscNodeReport errors(List<DscReportError> errors) {
    this.errors = errors;
    return this;
  }

  public DscNodeReport addErrorsItem(DscReportError errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * Gets or sets the errors for the node report.
   * @return errors
   */
  @javax.annotation.Nullable
  public List<DscReportError> getErrors() {
    return errors;
  }

  public void setErrors(List<DscReportError> errors) {
    this.errors = errors;
  }


  public DscNodeReport hostName(String hostName) {
    this.hostName = hostName;
    return this;
  }

  /**
   * Gets or sets the hostname of the node that sent the report.
   * @return hostName
   */
  @javax.annotation.Nullable
  public String getHostName() {
    return hostName;
  }

  public void setHostName(String hostName) {
    this.hostName = hostName;
  }


  public DscNodeReport iPV4Addresses(List<String> iPV4Addresses) {
    this.iPV4Addresses = iPV4Addresses;
    return this;
  }

  public DscNodeReport addIPV4AddressesItem(String iPV4AddressesItem) {
    if (this.iPV4Addresses == null) {
      this.iPV4Addresses = new ArrayList<>();
    }
    this.iPV4Addresses.add(iPV4AddressesItem);
    return this;
  }

  /**
   * Gets or sets the IPv4 address of the node that sent the report.
   * @return iPV4Addresses
   */
  @javax.annotation.Nullable
  public List<String> getiPV4Addresses() {
    return iPV4Addresses;
  }

  public void setiPV4Addresses(List<String> iPV4Addresses) {
    this.iPV4Addresses = iPV4Addresses;
  }


  public DscNodeReport iPV6Addresses(List<String> iPV6Addresses) {
    this.iPV6Addresses = iPV6Addresses;
    return this;
  }

  public DscNodeReport addIPV6AddressesItem(String iPV6AddressesItem) {
    if (this.iPV6Addresses == null) {
      this.iPV6Addresses = new ArrayList<>();
    }
    this.iPV6Addresses.add(iPV6AddressesItem);
    return this;
  }

  /**
   * Gets or sets the IPv6 address of the node that sent the report.
   * @return iPV6Addresses
   */
  @javax.annotation.Nullable
  public List<String> getiPV6Addresses() {
    return iPV6Addresses;
  }

  public void setiPV6Addresses(List<String> iPV6Addresses) {
    this.iPV6Addresses = iPV6Addresses;
  }


  public DscNodeReport id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Gets or sets the id.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public DscNodeReport lastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
    return this;
  }

  /**
   * Gets or sets the lastModifiedTime of the node report.
   * @return lastModifiedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedTime() {
    return lastModifiedTime;
  }

  public void setLastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
  }


  public DscNodeReport metaConfiguration(DscMetaConfiguration metaConfiguration) {
    this.metaConfiguration = metaConfiguration;
    return this;
  }

  /**
   * Get metaConfiguration
   * @return metaConfiguration
   */
  @javax.annotation.Nullable
  public DscMetaConfiguration getMetaConfiguration() {
    return metaConfiguration;
  }

  public void setMetaConfiguration(DscMetaConfiguration metaConfiguration) {
    this.metaConfiguration = metaConfiguration;
  }


  public DscNodeReport numberOfResources(Integer numberOfResources) {
    this.numberOfResources = numberOfResources;
    return this;
  }

  /**
   * Gets or sets the number of resource in the node report.
   * @return numberOfResources
   */
  @javax.annotation.Nullable
  public Integer getNumberOfResources() {
    return numberOfResources;
  }

  public void setNumberOfResources(Integer numberOfResources) {
    this.numberOfResources = numberOfResources;
  }


  public DscNodeReport rawErrors(String rawErrors) {
    this.rawErrors = rawErrors;
    return this;
  }

  /**
   * Gets or sets the unparsed errors for the node report.
   * @return rawErrors
   */
  @javax.annotation.Nullable
  public String getRawErrors() {
    return rawErrors;
  }

  public void setRawErrors(String rawErrors) {
    this.rawErrors = rawErrors;
  }


  public DscNodeReport rebootRequested(String rebootRequested) {
    this.rebootRequested = rebootRequested;
    return this;
  }

  /**
   * Gets or sets the rebootRequested of the node report.
   * @return rebootRequested
   */
  @javax.annotation.Nullable
  public String getRebootRequested() {
    return rebootRequested;
  }

  public void setRebootRequested(String rebootRequested) {
    this.rebootRequested = rebootRequested;
  }


  public DscNodeReport refreshMode(String refreshMode) {
    this.refreshMode = refreshMode;
    return this;
  }

  /**
   * Gets or sets the refreshMode of the node report.
   * @return refreshMode
   */
  @javax.annotation.Nullable
  public String getRefreshMode() {
    return refreshMode;
  }

  public void setRefreshMode(String refreshMode) {
    this.refreshMode = refreshMode;
  }


  public DscNodeReport reportFormatVersion(String reportFormatVersion) {
    this.reportFormatVersion = reportFormatVersion;
    return this;
  }

  /**
   * Gets or sets the reportFormatVersion of the node report.
   * @return reportFormatVersion
   */
  @javax.annotation.Nullable
  public String getReportFormatVersion() {
    return reportFormatVersion;
  }

  public void setReportFormatVersion(String reportFormatVersion) {
    this.reportFormatVersion = reportFormatVersion;
  }


  public DscNodeReport reportId(String reportId) {
    this.reportId = reportId;
    return this;
  }

  /**
   * Gets or sets the id of the node report.
   * @return reportId
   */
  @javax.annotation.Nullable
  public String getReportId() {
    return reportId;
  }

  public void setReportId(String reportId) {
    this.reportId = reportId;
  }


  public DscNodeReport resources(List<DscReportResource> resources) {
    this.resources = resources;
    return this;
  }

  public DscNodeReport addResourcesItem(DscReportResource resourcesItem) {
    if (this.resources == null) {
      this.resources = new ArrayList<>();
    }
    this.resources.add(resourcesItem);
    return this;
  }

  /**
   * Gets or sets the resource for the node report.
   * @return resources
   */
  @javax.annotation.Nullable
  public List<DscReportResource> getResources() {
    return resources;
  }

  public void setResources(List<DscReportResource> resources) {
    this.resources = resources;
  }


  public DscNodeReport startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Gets or sets the start time of the node report.
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public DscNodeReport status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Gets or sets the status of the node report.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public DscNodeReport type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Gets or sets the type of the node report.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DscNodeReport dscNodeReport = (DscNodeReport) o;
    return Objects.equals(this.configurationVersion, dscNodeReport.configurationVersion) &&
        Objects.equals(this.endTime, dscNodeReport.endTime) &&
        Objects.equals(this.errors, dscNodeReport.errors) &&
        Objects.equals(this.hostName, dscNodeReport.hostName) &&
        Objects.equals(this.iPV4Addresses, dscNodeReport.iPV4Addresses) &&
        Objects.equals(this.iPV6Addresses, dscNodeReport.iPV6Addresses) &&
        Objects.equals(this.id, dscNodeReport.id) &&
        Objects.equals(this.lastModifiedTime, dscNodeReport.lastModifiedTime) &&
        Objects.equals(this.metaConfiguration, dscNodeReport.metaConfiguration) &&
        Objects.equals(this.numberOfResources, dscNodeReport.numberOfResources) &&
        Objects.equals(this.rawErrors, dscNodeReport.rawErrors) &&
        Objects.equals(this.rebootRequested, dscNodeReport.rebootRequested) &&
        Objects.equals(this.refreshMode, dscNodeReport.refreshMode) &&
        Objects.equals(this.reportFormatVersion, dscNodeReport.reportFormatVersion) &&
        Objects.equals(this.reportId, dscNodeReport.reportId) &&
        Objects.equals(this.resources, dscNodeReport.resources) &&
        Objects.equals(this.startTime, dscNodeReport.startTime) &&
        Objects.equals(this.status, dscNodeReport.status) &&
        Objects.equals(this.type, dscNodeReport.type);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(configurationVersion, endTime, errors, hostName, iPV4Addresses, iPV6Addresses, id, lastModifiedTime, metaConfiguration, numberOfResources, rawErrors, rebootRequested, refreshMode, reportFormatVersion, reportId, resources, startTime, status, type);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DscNodeReport {\n");
    sb.append("    configurationVersion: ").append(toIndentedString(configurationVersion)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    hostName: ").append(toIndentedString(hostName)).append("\n");
    sb.append("    iPV4Addresses: ").append(toIndentedString(iPV4Addresses)).append("\n");
    sb.append("    iPV6Addresses: ").append(toIndentedString(iPV6Addresses)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    metaConfiguration: ").append(toIndentedString(metaConfiguration)).append("\n");
    sb.append("    numberOfResources: ").append(toIndentedString(numberOfResources)).append("\n");
    sb.append("    rawErrors: ").append(toIndentedString(rawErrors)).append("\n");
    sb.append("    rebootRequested: ").append(toIndentedString(rebootRequested)).append("\n");
    sb.append("    refreshMode: ").append(toIndentedString(refreshMode)).append("\n");
    sb.append("    reportFormatVersion: ").append(toIndentedString(reportFormatVersion)).append("\n");
    sb.append("    reportId: ").append(toIndentedString(reportId)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("configurationVersion");
    openapiFields.add("endTime");
    openapiFields.add("errors");
    openapiFields.add("hostName");
    openapiFields.add("iPV4Addresses");
    openapiFields.add("iPV6Addresses");
    openapiFields.add("id");
    openapiFields.add("lastModifiedTime");
    openapiFields.add("metaConfiguration");
    openapiFields.add("numberOfResources");
    openapiFields.add("rawErrors");
    openapiFields.add("rebootRequested");
    openapiFields.add("refreshMode");
    openapiFields.add("reportFormatVersion");
    openapiFields.add("reportId");
    openapiFields.add("resources");
    openapiFields.add("startTime");
    openapiFields.add("status");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DscNodeReport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DscNodeReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DscNodeReport is not found in the empty JSON string", DscNodeReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DscNodeReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DscNodeReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("configurationVersion") != null && !jsonObj.get("configurationVersion").isJsonNull()) && !jsonObj.get("configurationVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configurationVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configurationVersion").toString()));
      }
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            DscReportError.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      if ((jsonObj.get("hostName") != null && !jsonObj.get("hostName").isJsonNull()) && !jsonObj.get("hostName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("iPV4Addresses") != null && !jsonObj.get("iPV4Addresses").isJsonNull() && !jsonObj.get("iPV4Addresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `iPV4Addresses` to be an array in the JSON string but got `%s`", jsonObj.get("iPV4Addresses").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("iPV6Addresses") != null && !jsonObj.get("iPV6Addresses").isJsonNull() && !jsonObj.get("iPV6Addresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `iPV6Addresses` to be an array in the JSON string but got `%s`", jsonObj.get("iPV6Addresses").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `metaConfiguration`
      if (jsonObj.get("metaConfiguration") != null && !jsonObj.get("metaConfiguration").isJsonNull()) {
        DscMetaConfiguration.validateJsonElement(jsonObj.get("metaConfiguration"));
      }
      if ((jsonObj.get("rawErrors") != null && !jsonObj.get("rawErrors").isJsonNull()) && !jsonObj.get("rawErrors").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rawErrors` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rawErrors").toString()));
      }
      if ((jsonObj.get("rebootRequested") != null && !jsonObj.get("rebootRequested").isJsonNull()) && !jsonObj.get("rebootRequested").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rebootRequested` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rebootRequested").toString()));
      }
      if ((jsonObj.get("refreshMode") != null && !jsonObj.get("refreshMode").isJsonNull()) && !jsonObj.get("refreshMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refreshMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refreshMode").toString()));
      }
      if ((jsonObj.get("reportFormatVersion") != null && !jsonObj.get("reportFormatVersion").isJsonNull()) && !jsonObj.get("reportFormatVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportFormatVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportFormatVersion").toString()));
      }
      if ((jsonObj.get("reportId") != null && !jsonObj.get("reportId").isJsonNull()) && !jsonObj.get("reportId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportId").toString()));
      }
      if (jsonObj.get("resources") != null && !jsonObj.get("resources").isJsonNull()) {
        JsonArray jsonArrayresources = jsonObj.getAsJsonArray("resources");
        if (jsonArrayresources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resources` to be an array in the JSON string but got `%s`", jsonObj.get("resources").toString()));
          }

          // validate the optional field `resources` (array)
          for (int i = 0; i < jsonArrayresources.size(); i++) {
            DscReportResource.validateJsonElement(jsonArrayresources.get(i));
          };
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DscNodeReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DscNodeReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DscNodeReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DscNodeReport.class));

       return (TypeAdapter<T>) new TypeAdapter<DscNodeReport>() {
           @Override
           public void write(JsonWriter out, DscNodeReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DscNodeReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DscNodeReport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DscNodeReport
   * @throws IOException if the JSON string is invalid with respect to DscNodeReport
   */
  public static DscNodeReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DscNodeReport.class);
  }

  /**
   * Convert an instance of DscNodeReport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

