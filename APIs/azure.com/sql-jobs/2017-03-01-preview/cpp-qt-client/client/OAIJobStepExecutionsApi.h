/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIJobStepExecutionsApi_H
#define OAI_OAIJobStepExecutionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIJobExecution.h"
#include "OAIJobExecutionListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIJobStepExecutionsApi : public QObject {
    Q_OBJECT

public:
    OAIJobStepExecutionsApi(const int timeOut = 0);
    ~OAIJobStepExecutionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  job_agent_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  job_execution_id QString [required]
    * @param[in]  step_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jobStepExecutionsGet(const QString &resource_group_name, const QString &server_name, const QString &job_agent_name, const QString &job_name, const QString &job_execution_id, const QString &step_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  job_agent_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  job_execution_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  create_time_min QDateTime [optional]
    * @param[in]  create_time_max QDateTime [optional]
    * @param[in]  end_time_min QDateTime [optional]
    * @param[in]  end_time_max QDateTime [optional]
    * @param[in]  is_active bool [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void jobStepExecutionsListByJobExecution(const QString &resource_group_name, const QString &server_name, const QString &job_agent_name, const QString &job_name, const QString &job_execution_id, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QDateTime> &create_time_min = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &create_time_max = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time_min = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time_max = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &is_active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void jobStepExecutionsGetCallback(OAIHttpRequestWorker *worker);
    void jobStepExecutionsListByJobExecutionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void jobStepExecutionsGetSignal(OAIJobExecution summary);
    void jobStepExecutionsListByJobExecutionSignal(OAIJobExecutionListResult summary);


    void jobStepExecutionsGetSignalFull(OAIHttpRequestWorker *worker, OAIJobExecution summary);
    void jobStepExecutionsListByJobExecutionSignalFull(OAIHttpRequestWorker *worker, OAIJobExecutionListResult summary);

    Q_DECL_DEPRECATED_X("Use jobStepExecutionsGetSignalError() instead")
    void jobStepExecutionsGetSignalE(OAIJobExecution summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobStepExecutionsGetSignalError(OAIJobExecution summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobStepExecutionsListByJobExecutionSignalError() instead")
    void jobStepExecutionsListByJobExecutionSignalE(OAIJobExecutionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobStepExecutionsListByJobExecutionSignalError(OAIJobExecutionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use jobStepExecutionsGetSignalErrorFull() instead")
    void jobStepExecutionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobStepExecutionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobStepExecutionsListByJobExecutionSignalErrorFull() instead")
    void jobStepExecutionsListByJobExecutionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobStepExecutionsListByJobExecutionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
