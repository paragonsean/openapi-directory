/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobStepOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobStepOutput::OAIJobStepOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobStepOutput::OAIJobStepOutput() {
    this->initializeModel();
}

OAIJobStepOutput::~OAIJobStepOutput() {}

void OAIJobStepOutput::initializeModel() {

    m_credential_isSet = false;
    m_credential_isValid = false;

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_resource_group_name_isSet = false;
    m_resource_group_name_isValid = false;

    m_schema_name_isSet = false;
    m_schema_name_isValid = false;

    m_server_name_isSet = false;
    m_server_name_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIJobStepOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobStepOutput::fromJsonObject(QJsonObject json) {

    m_credential_isValid = ::OpenAPI::fromJsonValue(m_credential, json[QString("credential")]);
    m_credential_isSet = !json[QString("credential")].isNull() && m_credential_isValid;

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("databaseName")]);
    m_database_name_isSet = !json[QString("databaseName")].isNull() && m_database_name_isValid;

    m_resource_group_name_isValid = ::OpenAPI::fromJsonValue(m_resource_group_name, json[QString("resourceGroupName")]);
    m_resource_group_name_isSet = !json[QString("resourceGroupName")].isNull() && m_resource_group_name_isValid;

    m_schema_name_isValid = ::OpenAPI::fromJsonValue(m_schema_name, json[QString("schemaName")]);
    m_schema_name_isSet = !json[QString("schemaName")].isNull() && m_schema_name_isValid;

    m_server_name_isValid = ::OpenAPI::fromJsonValue(m_server_name, json[QString("serverName")]);
    m_server_name_isSet = !json[QString("serverName")].isNull() && m_server_name_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("tableName")]);
    m_table_name_isSet = !json[QString("tableName")].isNull() && m_table_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIJobStepOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobStepOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_credential_isSet) {
        obj.insert(QString("credential"), ::OpenAPI::toJsonValue(m_credential));
    }
    if (m_database_name_isSet) {
        obj.insert(QString("databaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_resource_group_name_isSet) {
        obj.insert(QString("resourceGroupName"), ::OpenAPI::toJsonValue(m_resource_group_name));
    }
    if (m_schema_name_isSet) {
        obj.insert(QString("schemaName"), ::OpenAPI::toJsonValue(m_schema_name));
    }
    if (m_server_name_isSet) {
        obj.insert(QString("serverName"), ::OpenAPI::toJsonValue(m_server_name));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    if (m_table_name_isSet) {
        obj.insert(QString("tableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIJobStepOutput::getCredential() const {
    return m_credential;
}
void OAIJobStepOutput::setCredential(const QString &credential) {
    m_credential = credential;
    m_credential_isSet = true;
}

bool OAIJobStepOutput::is_credential_Set() const{
    return m_credential_isSet;
}

bool OAIJobStepOutput::is_credential_Valid() const{
    return m_credential_isValid;
}

QString OAIJobStepOutput::getDatabaseName() const {
    return m_database_name;
}
void OAIJobStepOutput::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAIJobStepOutput::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAIJobStepOutput::is_database_name_Valid() const{
    return m_database_name_isValid;
}

QString OAIJobStepOutput::getResourceGroupName() const {
    return m_resource_group_name;
}
void OAIJobStepOutput::setResourceGroupName(const QString &resource_group_name) {
    m_resource_group_name = resource_group_name;
    m_resource_group_name_isSet = true;
}

bool OAIJobStepOutput::is_resource_group_name_Set() const{
    return m_resource_group_name_isSet;
}

bool OAIJobStepOutput::is_resource_group_name_Valid() const{
    return m_resource_group_name_isValid;
}

QString OAIJobStepOutput::getSchemaName() const {
    return m_schema_name;
}
void OAIJobStepOutput::setSchemaName(const QString &schema_name) {
    m_schema_name = schema_name;
    m_schema_name_isSet = true;
}

bool OAIJobStepOutput::is_schema_name_Set() const{
    return m_schema_name_isSet;
}

bool OAIJobStepOutput::is_schema_name_Valid() const{
    return m_schema_name_isValid;
}

QString OAIJobStepOutput::getServerName() const {
    return m_server_name;
}
void OAIJobStepOutput::setServerName(const QString &server_name) {
    m_server_name = server_name;
    m_server_name_isSet = true;
}

bool OAIJobStepOutput::is_server_name_Set() const{
    return m_server_name_isSet;
}

bool OAIJobStepOutput::is_server_name_Valid() const{
    return m_server_name_isValid;
}

QString OAIJobStepOutput::getSubscriptionId() const {
    return m_subscription_id;
}
void OAIJobStepOutput::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAIJobStepOutput::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIJobStepOutput::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

QString OAIJobStepOutput::getTableName() const {
    return m_table_name;
}
void OAIJobStepOutput::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIJobStepOutput::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIJobStepOutput::is_table_name_Valid() const{
    return m_table_name_isValid;
}

QString OAIJobStepOutput::getType() const {
    return m_type;
}
void OAIJobStepOutput::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIJobStepOutput::is_type_Set() const{
    return m_type_isSet;
}

bool OAIJobStepOutput::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIJobStepOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_credential_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobStepOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_credential_isValid && m_database_name_isValid && m_server_name_isValid && m_table_name_isValid && true;
}

} // namespace OpenAPI
