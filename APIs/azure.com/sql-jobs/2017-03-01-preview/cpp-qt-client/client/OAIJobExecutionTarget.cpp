/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobExecutionTarget.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobExecutionTarget::OAIJobExecutionTarget(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobExecutionTarget::OAIJobExecutionTarget() {
    this->initializeModel();
}

OAIJobExecutionTarget::~OAIJobExecutionTarget() {}

void OAIJobExecutionTarget::initializeModel() {

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_server_name_isSet = false;
    m_server_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIJobExecutionTarget::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobExecutionTarget::fromJsonObject(QJsonObject json) {

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("databaseName")]);
    m_database_name_isSet = !json[QString("databaseName")].isNull() && m_database_name_isValid;

    m_server_name_isValid = ::OpenAPI::fromJsonValue(m_server_name, json[QString("serverName")]);
    m_server_name_isSet = !json[QString("serverName")].isNull() && m_server_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIJobExecutionTarget::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobExecutionTarget::asJsonObject() const {
    QJsonObject obj;
    if (m_database_name_isSet) {
        obj.insert(QString("databaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_server_name_isSet) {
        obj.insert(QString("serverName"), ::OpenAPI::toJsonValue(m_server_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIJobExecutionTarget::getDatabaseName() const {
    return m_database_name;
}
void OAIJobExecutionTarget::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAIJobExecutionTarget::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAIJobExecutionTarget::is_database_name_Valid() const{
    return m_database_name_isValid;
}

QString OAIJobExecutionTarget::getServerName() const {
    return m_server_name;
}
void OAIJobExecutionTarget::setServerName(const QString &server_name) {
    m_server_name = server_name;
    m_server_name_isSet = true;
}

bool OAIJobExecutionTarget::is_server_name_Set() const{
    return m_server_name_isSet;
}

bool OAIJobExecutionTarget::is_server_name_Valid() const{
    return m_server_name_isValid;
}

QString OAIJobExecutionTarget::getType() const {
    return m_type;
}
void OAIJobExecutionTarget::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIJobExecutionTarget::is_type_Set() const{
    return m_type_isSet;
}

bool OAIJobExecutionTarget::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIJobExecutionTarget::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobExecutionTarget::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
