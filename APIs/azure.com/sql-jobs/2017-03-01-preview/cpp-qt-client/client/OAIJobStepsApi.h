/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIJobStepsApi_H
#define OAI_OAIJobStepsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIJobStep.h"
#include "OAIJobStepListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIJobStepsApi : public QObject {
    Q_OBJECT

public:
    OAIJobStepsApi(const int timeOut = 0);
    ~OAIJobStepsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  job_agent_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  step_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIJobStep [required]
    */
    virtual void jobStepsCreateOrUpdate(const QString &resource_group_name, const QString &server_name, const QString &job_agent_name, const QString &job_name, const QString &step_name, const QString &subscription_id, const QString &api_version, const OAIJobStep &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  job_agent_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  step_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jobStepsDelete(const QString &resource_group_name, const QString &server_name, const QString &job_agent_name, const QString &job_name, const QString &step_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  job_agent_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  step_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jobStepsGet(const QString &resource_group_name, const QString &server_name, const QString &job_agent_name, const QString &job_name, const QString &step_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  job_agent_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  job_version qint32 [required]
    * @param[in]  step_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jobStepsGetByVersion(const QString &resource_group_name, const QString &server_name, const QString &job_agent_name, const QString &job_name, const qint32 &job_version, const QString &step_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  job_agent_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jobStepsListByJob(const QString &resource_group_name, const QString &server_name, const QString &job_agent_name, const QString &job_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  job_agent_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  job_version qint32 [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jobStepsListByVersion(const QString &resource_group_name, const QString &server_name, const QString &job_agent_name, const QString &job_name, const qint32 &job_version, const QString &subscription_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void jobStepsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void jobStepsDeleteCallback(OAIHttpRequestWorker *worker);
    void jobStepsGetCallback(OAIHttpRequestWorker *worker);
    void jobStepsGetByVersionCallback(OAIHttpRequestWorker *worker);
    void jobStepsListByJobCallback(OAIHttpRequestWorker *worker);
    void jobStepsListByVersionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void jobStepsCreateOrUpdateSignal(OAIJobStep summary);
    void jobStepsDeleteSignal();
    void jobStepsGetSignal(OAIJobStep summary);
    void jobStepsGetByVersionSignal(OAIJobStep summary);
    void jobStepsListByJobSignal(OAIJobStepListResult summary);
    void jobStepsListByVersionSignal(OAIJobStepListResult summary);


    void jobStepsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIJobStep summary);
    void jobStepsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void jobStepsGetSignalFull(OAIHttpRequestWorker *worker, OAIJobStep summary);
    void jobStepsGetByVersionSignalFull(OAIHttpRequestWorker *worker, OAIJobStep summary);
    void jobStepsListByJobSignalFull(OAIHttpRequestWorker *worker, OAIJobStepListResult summary);
    void jobStepsListByVersionSignalFull(OAIHttpRequestWorker *worker, OAIJobStepListResult summary);

    Q_DECL_DEPRECATED_X("Use jobStepsCreateOrUpdateSignalError() instead")
    void jobStepsCreateOrUpdateSignalE(OAIJobStep summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobStepsCreateOrUpdateSignalError(OAIJobStep summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobStepsDeleteSignalError() instead")
    void jobStepsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jobStepsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobStepsGetSignalError() instead")
    void jobStepsGetSignalE(OAIJobStep summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobStepsGetSignalError(OAIJobStep summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobStepsGetByVersionSignalError() instead")
    void jobStepsGetByVersionSignalE(OAIJobStep summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobStepsGetByVersionSignalError(OAIJobStep summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobStepsListByJobSignalError() instead")
    void jobStepsListByJobSignalE(OAIJobStepListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobStepsListByJobSignalError(OAIJobStepListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobStepsListByVersionSignalError() instead")
    void jobStepsListByVersionSignalE(OAIJobStepListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobStepsListByVersionSignalError(OAIJobStepListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use jobStepsCreateOrUpdateSignalErrorFull() instead")
    void jobStepsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobStepsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobStepsDeleteSignalErrorFull() instead")
    void jobStepsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobStepsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobStepsGetSignalErrorFull() instead")
    void jobStepsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobStepsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobStepsGetByVersionSignalErrorFull() instead")
    void jobStepsGetByVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobStepsGetByVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobStepsListByJobSignalErrorFull() instead")
    void jobStepsListByJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobStepsListByJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobStepsListByVersionSignalErrorFull() instead")
    void jobStepsListByVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobStepsListByVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
