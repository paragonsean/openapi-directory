/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIJobCredentialsApi_H
#define OAI_OAIJobCredentialsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIJobCredential.h"
#include "OAIJobCredentialListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIJobCredentialsApi : public QObject {
    Q_OBJECT

public:
    OAIJobCredentialsApi(const int timeOut = 0);
    ~OAIJobCredentialsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  job_agent_name QString [required]
    * @param[in]  credential_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIJobCredential [required]
    */
    virtual void jobCredentialsCreateOrUpdate(const QString &resource_group_name, const QString &server_name, const QString &job_agent_name, const QString &credential_name, const QString &subscription_id, const QString &api_version, const OAIJobCredential &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  job_agent_name QString [required]
    * @param[in]  credential_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jobCredentialsDelete(const QString &resource_group_name, const QString &server_name, const QString &job_agent_name, const QString &credential_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  job_agent_name QString [required]
    * @param[in]  credential_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jobCredentialsGet(const QString &resource_group_name, const QString &server_name, const QString &job_agent_name, const QString &credential_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  job_agent_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jobCredentialsListByAgent(const QString &resource_group_name, const QString &server_name, const QString &job_agent_name, const QString &subscription_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void jobCredentialsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void jobCredentialsDeleteCallback(OAIHttpRequestWorker *worker);
    void jobCredentialsGetCallback(OAIHttpRequestWorker *worker);
    void jobCredentialsListByAgentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void jobCredentialsCreateOrUpdateSignal(OAIJobCredential summary);
    void jobCredentialsDeleteSignal();
    void jobCredentialsGetSignal(OAIJobCredential summary);
    void jobCredentialsListByAgentSignal(OAIJobCredentialListResult summary);


    void jobCredentialsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIJobCredential summary);
    void jobCredentialsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void jobCredentialsGetSignalFull(OAIHttpRequestWorker *worker, OAIJobCredential summary);
    void jobCredentialsListByAgentSignalFull(OAIHttpRequestWorker *worker, OAIJobCredentialListResult summary);

    Q_DECL_DEPRECATED_X("Use jobCredentialsCreateOrUpdateSignalError() instead")
    void jobCredentialsCreateOrUpdateSignalE(OAIJobCredential summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobCredentialsCreateOrUpdateSignalError(OAIJobCredential summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobCredentialsDeleteSignalError() instead")
    void jobCredentialsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jobCredentialsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobCredentialsGetSignalError() instead")
    void jobCredentialsGetSignalE(OAIJobCredential summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobCredentialsGetSignalError(OAIJobCredential summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobCredentialsListByAgentSignalError() instead")
    void jobCredentialsListByAgentSignalE(OAIJobCredentialListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobCredentialsListByAgentSignalError(OAIJobCredentialListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use jobCredentialsCreateOrUpdateSignalErrorFull() instead")
    void jobCredentialsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobCredentialsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobCredentialsDeleteSignalErrorFull() instead")
    void jobCredentialsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobCredentialsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobCredentialsGetSignalErrorFull() instead")
    void jobCredentialsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobCredentialsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobCredentialsListByAgentSignalErrorFull() instead")
    void jobCredentialsListByAgentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobCredentialsListByAgentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
