/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobExecutionProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobExecutionProperties::OAIJobExecutionProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobExecutionProperties::OAIJobExecutionProperties() {
    this->initializeModel();
}

OAIJobExecutionProperties::~OAIJobExecutionProperties() {}

void OAIJobExecutionProperties::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_current_attempt_start_time_isSet = false;
    m_current_attempt_start_time_isValid = false;

    m_current_attempts_isSet = false;
    m_current_attempts_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_job_execution_id_isSet = false;
    m_job_execution_id_isValid = false;

    m_job_version_isSet = false;
    m_job_version_isValid = false;

    m_last_message_isSet = false;
    m_last_message_isValid = false;

    m_lifecycle_isSet = false;
    m_lifecycle_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_step_id_isSet = false;
    m_step_id_isValid = false;

    m_step_name_isSet = false;
    m_step_name_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;
}

void OAIJobExecutionProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobExecutionProperties::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_current_attempt_start_time_isValid = ::OpenAPI::fromJsonValue(m_current_attempt_start_time, json[QString("currentAttemptStartTime")]);
    m_current_attempt_start_time_isSet = !json[QString("currentAttemptStartTime")].isNull() && m_current_attempt_start_time_isValid;

    m_current_attempts_isValid = ::OpenAPI::fromJsonValue(m_current_attempts, json[QString("currentAttempts")]);
    m_current_attempts_isSet = !json[QString("currentAttempts")].isNull() && m_current_attempts_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_job_execution_id_isValid = ::OpenAPI::fromJsonValue(m_job_execution_id, json[QString("jobExecutionId")]);
    m_job_execution_id_isSet = !json[QString("jobExecutionId")].isNull() && m_job_execution_id_isValid;

    m_job_version_isValid = ::OpenAPI::fromJsonValue(m_job_version, json[QString("jobVersion")]);
    m_job_version_isSet = !json[QString("jobVersion")].isNull() && m_job_version_isValid;

    m_last_message_isValid = ::OpenAPI::fromJsonValue(m_last_message, json[QString("lastMessage")]);
    m_last_message_isSet = !json[QString("lastMessage")].isNull() && m_last_message_isValid;

    m_lifecycle_isValid = ::OpenAPI::fromJsonValue(m_lifecycle, json[QString("lifecycle")]);
    m_lifecycle_isSet = !json[QString("lifecycle")].isNull() && m_lifecycle_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_step_id_isValid = ::OpenAPI::fromJsonValue(m_step_id, json[QString("stepId")]);
    m_step_id_isSet = !json[QString("stepId")].isNull() && m_step_id_isValid;

    m_step_name_isValid = ::OpenAPI::fromJsonValue(m_step_name, json[QString("stepName")]);
    m_step_name_isSet = !json[QString("stepName")].isNull() && m_step_name_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;
}

QString OAIJobExecutionProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobExecutionProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_current_attempt_start_time_isSet) {
        obj.insert(QString("currentAttemptStartTime"), ::OpenAPI::toJsonValue(m_current_attempt_start_time));
    }
    if (m_current_attempts_isSet) {
        obj.insert(QString("currentAttempts"), ::OpenAPI::toJsonValue(m_current_attempts));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_job_execution_id_isSet) {
        obj.insert(QString("jobExecutionId"), ::OpenAPI::toJsonValue(m_job_execution_id));
    }
    if (m_job_version_isSet) {
        obj.insert(QString("jobVersion"), ::OpenAPI::toJsonValue(m_job_version));
    }
    if (m_last_message_isSet) {
        obj.insert(QString("lastMessage"), ::OpenAPI::toJsonValue(m_last_message));
    }
    if (m_lifecycle_isSet) {
        obj.insert(QString("lifecycle"), ::OpenAPI::toJsonValue(m_lifecycle));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_step_id_isSet) {
        obj.insert(QString("stepId"), ::OpenAPI::toJsonValue(m_step_id));
    }
    if (m_step_name_isSet) {
        obj.insert(QString("stepName"), ::OpenAPI::toJsonValue(m_step_name));
    }
    if (m_target.isSet()) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    return obj;
}

QDateTime OAIJobExecutionProperties::getCreateTime() const {
    return m_create_time;
}
void OAIJobExecutionProperties::setCreateTime(const QDateTime &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIJobExecutionProperties::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIJobExecutionProperties::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QDateTime OAIJobExecutionProperties::getCurrentAttemptStartTime() const {
    return m_current_attempt_start_time;
}
void OAIJobExecutionProperties::setCurrentAttemptStartTime(const QDateTime &current_attempt_start_time) {
    m_current_attempt_start_time = current_attempt_start_time;
    m_current_attempt_start_time_isSet = true;
}

bool OAIJobExecutionProperties::is_current_attempt_start_time_Set() const{
    return m_current_attempt_start_time_isSet;
}

bool OAIJobExecutionProperties::is_current_attempt_start_time_Valid() const{
    return m_current_attempt_start_time_isValid;
}

qint32 OAIJobExecutionProperties::getCurrentAttempts() const {
    return m_current_attempts;
}
void OAIJobExecutionProperties::setCurrentAttempts(const qint32 &current_attempts) {
    m_current_attempts = current_attempts;
    m_current_attempts_isSet = true;
}

bool OAIJobExecutionProperties::is_current_attempts_Set() const{
    return m_current_attempts_isSet;
}

bool OAIJobExecutionProperties::is_current_attempts_Valid() const{
    return m_current_attempts_isValid;
}

QDateTime OAIJobExecutionProperties::getEndTime() const {
    return m_end_time;
}
void OAIJobExecutionProperties::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIJobExecutionProperties::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIJobExecutionProperties::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIJobExecutionProperties::getJobExecutionId() const {
    return m_job_execution_id;
}
void OAIJobExecutionProperties::setJobExecutionId(const QString &job_execution_id) {
    m_job_execution_id = job_execution_id;
    m_job_execution_id_isSet = true;
}

bool OAIJobExecutionProperties::is_job_execution_id_Set() const{
    return m_job_execution_id_isSet;
}

bool OAIJobExecutionProperties::is_job_execution_id_Valid() const{
    return m_job_execution_id_isValid;
}

qint32 OAIJobExecutionProperties::getJobVersion() const {
    return m_job_version;
}
void OAIJobExecutionProperties::setJobVersion(const qint32 &job_version) {
    m_job_version = job_version;
    m_job_version_isSet = true;
}

bool OAIJobExecutionProperties::is_job_version_Set() const{
    return m_job_version_isSet;
}

bool OAIJobExecutionProperties::is_job_version_Valid() const{
    return m_job_version_isValid;
}

QString OAIJobExecutionProperties::getLastMessage() const {
    return m_last_message;
}
void OAIJobExecutionProperties::setLastMessage(const QString &last_message) {
    m_last_message = last_message;
    m_last_message_isSet = true;
}

bool OAIJobExecutionProperties::is_last_message_Set() const{
    return m_last_message_isSet;
}

bool OAIJobExecutionProperties::is_last_message_Valid() const{
    return m_last_message_isValid;
}

QString OAIJobExecutionProperties::getLifecycle() const {
    return m_lifecycle;
}
void OAIJobExecutionProperties::setLifecycle(const QString &lifecycle) {
    m_lifecycle = lifecycle;
    m_lifecycle_isSet = true;
}

bool OAIJobExecutionProperties::is_lifecycle_Set() const{
    return m_lifecycle_isSet;
}

bool OAIJobExecutionProperties::is_lifecycle_Valid() const{
    return m_lifecycle_isValid;
}

QString OAIJobExecutionProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIJobExecutionProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIJobExecutionProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIJobExecutionProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QDateTime OAIJobExecutionProperties::getStartTime() const {
    return m_start_time;
}
void OAIJobExecutionProperties::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIJobExecutionProperties::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIJobExecutionProperties::is_start_time_Valid() const{
    return m_start_time_isValid;
}

qint32 OAIJobExecutionProperties::getStepId() const {
    return m_step_id;
}
void OAIJobExecutionProperties::setStepId(const qint32 &step_id) {
    m_step_id = step_id;
    m_step_id_isSet = true;
}

bool OAIJobExecutionProperties::is_step_id_Set() const{
    return m_step_id_isSet;
}

bool OAIJobExecutionProperties::is_step_id_Valid() const{
    return m_step_id_isValid;
}

QString OAIJobExecutionProperties::getStepName() const {
    return m_step_name;
}
void OAIJobExecutionProperties::setStepName(const QString &step_name) {
    m_step_name = step_name;
    m_step_name_isSet = true;
}

bool OAIJobExecutionProperties::is_step_name_Set() const{
    return m_step_name_isSet;
}

bool OAIJobExecutionProperties::is_step_name_Valid() const{
    return m_step_name_isValid;
}

OAIJobExecutionTarget OAIJobExecutionProperties::getTarget() const {
    return m_target;
}
void OAIJobExecutionProperties::setTarget(const OAIJobExecutionTarget &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIJobExecutionProperties::is_target_Set() const{
    return m_target_isSet;
}

bool OAIJobExecutionProperties::is_target_Valid() const{
    return m_target_isValid;
}

bool OAIJobExecutionProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_attempt_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_execution_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifecycle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobExecutionProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
