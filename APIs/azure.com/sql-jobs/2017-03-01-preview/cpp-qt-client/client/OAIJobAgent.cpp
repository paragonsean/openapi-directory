/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobAgent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobAgent::OAIJobAgent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobAgent::OAIJobAgent() {
    this->initializeModel();
}

OAIJobAgent::~OAIJobAgent() {}

void OAIJobAgent::initializeModel() {

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIJobAgent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobAgent::fromJsonObject(QJsonObject json) {

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIJobAgent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobAgent::asJsonObject() const {
    QJsonObject obj;
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_sku.isSet()) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIJobAgentProperties OAIJobAgent::getProperties() const {
    return m_properties;
}
void OAIJobAgent::setProperties(const OAIJobAgentProperties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIJobAgent::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIJobAgent::is_properties_Valid() const{
    return m_properties_isValid;
}

OAIObject OAIJobAgent::getSku() const {
    return m_sku;
}
void OAIJobAgent::setSku(const OAIObject &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIJobAgent::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIJobAgent::is_sku_Valid() const{
    return m_sku_isValid;
}

QString OAIJobAgent::getLocation() const {
    return m_location;
}
void OAIJobAgent::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIJobAgent::is_location_Set() const{
    return m_location_isSet;
}

bool OAIJobAgent::is_location_Valid() const{
    return m_location_isValid;
}

QMap<QString, QString> OAIJobAgent::getTags() const {
    return m_tags;
}
void OAIJobAgent::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIJobAgent::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIJobAgent::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIJobAgent::getId() const {
    return m_id;
}
void OAIJobAgent::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIJobAgent::is_id_Set() const{
    return m_id_isSet;
}

bool OAIJobAgent::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIJobAgent::getName() const {
    return m_name;
}
void OAIJobAgent::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIJobAgent::is_name_Set() const{
    return m_name_isSet;
}

bool OAIJobAgent::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIJobAgent::getType() const {
    return m_type;
}
void OAIJobAgent::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIJobAgent::is_type_Set() const{
    return m_type_isSet;
}

bool OAIJobAgent::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIJobAgent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobAgent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_location_isValid && true;
}

} // namespace OpenAPI
