/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobAgentProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobAgentProperties::OAIJobAgentProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobAgentProperties::OAIJobAgentProperties() {
    this->initializeModel();
}

OAIJobAgentProperties::~OAIJobAgentProperties() {}

void OAIJobAgentProperties::initializeModel() {

    m_database_id_isSet = false;
    m_database_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIJobAgentProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobAgentProperties::fromJsonObject(QJsonObject json) {

    m_database_id_isValid = ::OpenAPI::fromJsonValue(m_database_id, json[QString("databaseId")]);
    m_database_id_isSet = !json[QString("databaseId")].isNull() && m_database_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIJobAgentProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobAgentProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_database_id_isSet) {
        obj.insert(QString("databaseId"), ::OpenAPI::toJsonValue(m_database_id));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIJobAgentProperties::getDatabaseId() const {
    return m_database_id;
}
void OAIJobAgentProperties::setDatabaseId(const QString &database_id) {
    m_database_id = database_id;
    m_database_id_isSet = true;
}

bool OAIJobAgentProperties::is_database_id_Set() const{
    return m_database_id_isSet;
}

bool OAIJobAgentProperties::is_database_id_Valid() const{
    return m_database_id_isValid;
}

QString OAIJobAgentProperties::getState() const {
    return m_state;
}
void OAIJobAgentProperties::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIJobAgentProperties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIJobAgentProperties::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIJobAgentProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobAgentProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_database_id_isValid && true;
}

} // namespace OpenAPI
