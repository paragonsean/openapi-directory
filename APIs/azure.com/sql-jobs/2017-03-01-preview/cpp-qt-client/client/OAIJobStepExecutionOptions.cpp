/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobStepExecutionOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobStepExecutionOptions::OAIJobStepExecutionOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobStepExecutionOptions::OAIJobStepExecutionOptions() {
    this->initializeModel();
}

OAIJobStepExecutionOptions::~OAIJobStepExecutionOptions() {}

void OAIJobStepExecutionOptions::initializeModel() {

    m_initial_retry_interval_seconds_isSet = false;
    m_initial_retry_interval_seconds_isValid = false;

    m_maximum_retry_interval_seconds_isSet = false;
    m_maximum_retry_interval_seconds_isValid = false;

    m_retry_attempts_isSet = false;
    m_retry_attempts_isValid = false;

    m_retry_interval_backoff_multiplier_isSet = false;
    m_retry_interval_backoff_multiplier_isValid = false;

    m_timeout_seconds_isSet = false;
    m_timeout_seconds_isValid = false;
}

void OAIJobStepExecutionOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobStepExecutionOptions::fromJsonObject(QJsonObject json) {

    m_initial_retry_interval_seconds_isValid = ::OpenAPI::fromJsonValue(m_initial_retry_interval_seconds, json[QString("initialRetryIntervalSeconds")]);
    m_initial_retry_interval_seconds_isSet = !json[QString("initialRetryIntervalSeconds")].isNull() && m_initial_retry_interval_seconds_isValid;

    m_maximum_retry_interval_seconds_isValid = ::OpenAPI::fromJsonValue(m_maximum_retry_interval_seconds, json[QString("maximumRetryIntervalSeconds")]);
    m_maximum_retry_interval_seconds_isSet = !json[QString("maximumRetryIntervalSeconds")].isNull() && m_maximum_retry_interval_seconds_isValid;

    m_retry_attempts_isValid = ::OpenAPI::fromJsonValue(m_retry_attempts, json[QString("retryAttempts")]);
    m_retry_attempts_isSet = !json[QString("retryAttempts")].isNull() && m_retry_attempts_isValid;

    m_retry_interval_backoff_multiplier_isValid = ::OpenAPI::fromJsonValue(m_retry_interval_backoff_multiplier, json[QString("retryIntervalBackoffMultiplier")]);
    m_retry_interval_backoff_multiplier_isSet = !json[QString("retryIntervalBackoffMultiplier")].isNull() && m_retry_interval_backoff_multiplier_isValid;

    m_timeout_seconds_isValid = ::OpenAPI::fromJsonValue(m_timeout_seconds, json[QString("timeoutSeconds")]);
    m_timeout_seconds_isSet = !json[QString("timeoutSeconds")].isNull() && m_timeout_seconds_isValid;
}

QString OAIJobStepExecutionOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobStepExecutionOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_initial_retry_interval_seconds_isSet) {
        obj.insert(QString("initialRetryIntervalSeconds"), ::OpenAPI::toJsonValue(m_initial_retry_interval_seconds));
    }
    if (m_maximum_retry_interval_seconds_isSet) {
        obj.insert(QString("maximumRetryIntervalSeconds"), ::OpenAPI::toJsonValue(m_maximum_retry_interval_seconds));
    }
    if (m_retry_attempts_isSet) {
        obj.insert(QString("retryAttempts"), ::OpenAPI::toJsonValue(m_retry_attempts));
    }
    if (m_retry_interval_backoff_multiplier_isSet) {
        obj.insert(QString("retryIntervalBackoffMultiplier"), ::OpenAPI::toJsonValue(m_retry_interval_backoff_multiplier));
    }
    if (m_timeout_seconds_isSet) {
        obj.insert(QString("timeoutSeconds"), ::OpenAPI::toJsonValue(m_timeout_seconds));
    }
    return obj;
}

qint32 OAIJobStepExecutionOptions::getInitialRetryIntervalSeconds() const {
    return m_initial_retry_interval_seconds;
}
void OAIJobStepExecutionOptions::setInitialRetryIntervalSeconds(const qint32 &initial_retry_interval_seconds) {
    m_initial_retry_interval_seconds = initial_retry_interval_seconds;
    m_initial_retry_interval_seconds_isSet = true;
}

bool OAIJobStepExecutionOptions::is_initial_retry_interval_seconds_Set() const{
    return m_initial_retry_interval_seconds_isSet;
}

bool OAIJobStepExecutionOptions::is_initial_retry_interval_seconds_Valid() const{
    return m_initial_retry_interval_seconds_isValid;
}

qint32 OAIJobStepExecutionOptions::getMaximumRetryIntervalSeconds() const {
    return m_maximum_retry_interval_seconds;
}
void OAIJobStepExecutionOptions::setMaximumRetryIntervalSeconds(const qint32 &maximum_retry_interval_seconds) {
    m_maximum_retry_interval_seconds = maximum_retry_interval_seconds;
    m_maximum_retry_interval_seconds_isSet = true;
}

bool OAIJobStepExecutionOptions::is_maximum_retry_interval_seconds_Set() const{
    return m_maximum_retry_interval_seconds_isSet;
}

bool OAIJobStepExecutionOptions::is_maximum_retry_interval_seconds_Valid() const{
    return m_maximum_retry_interval_seconds_isValid;
}

qint32 OAIJobStepExecutionOptions::getRetryAttempts() const {
    return m_retry_attempts;
}
void OAIJobStepExecutionOptions::setRetryAttempts(const qint32 &retry_attempts) {
    m_retry_attempts = retry_attempts;
    m_retry_attempts_isSet = true;
}

bool OAIJobStepExecutionOptions::is_retry_attempts_Set() const{
    return m_retry_attempts_isSet;
}

bool OAIJobStepExecutionOptions::is_retry_attempts_Valid() const{
    return m_retry_attempts_isValid;
}

float OAIJobStepExecutionOptions::getRetryIntervalBackoffMultiplier() const {
    return m_retry_interval_backoff_multiplier;
}
void OAIJobStepExecutionOptions::setRetryIntervalBackoffMultiplier(const float &retry_interval_backoff_multiplier) {
    m_retry_interval_backoff_multiplier = retry_interval_backoff_multiplier;
    m_retry_interval_backoff_multiplier_isSet = true;
}

bool OAIJobStepExecutionOptions::is_retry_interval_backoff_multiplier_Set() const{
    return m_retry_interval_backoff_multiplier_isSet;
}

bool OAIJobStepExecutionOptions::is_retry_interval_backoff_multiplier_Valid() const{
    return m_retry_interval_backoff_multiplier_isValid;
}

qint32 OAIJobStepExecutionOptions::getTimeoutSeconds() const {
    return m_timeout_seconds;
}
void OAIJobStepExecutionOptions::setTimeoutSeconds(const qint32 &timeout_seconds) {
    m_timeout_seconds = timeout_seconds;
    m_timeout_seconds_isSet = true;
}

bool OAIJobStepExecutionOptions::is_timeout_seconds_Set() const{
    return m_timeout_seconds_isSet;
}

bool OAIJobStepExecutionOptions::is_timeout_seconds_Valid() const{
    return m_timeout_seconds_isValid;
}

bool OAIJobStepExecutionOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_initial_retry_interval_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_retry_interval_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_interval_backoff_multiplier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobStepExecutionOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
