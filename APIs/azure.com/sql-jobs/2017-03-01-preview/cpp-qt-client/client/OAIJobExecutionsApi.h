/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIJobExecutionsApi_H
#define OAI_OAIJobExecutionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIJobExecution.h"
#include "OAIJobExecutionListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIJobExecutionsApi : public QObject {
    Q_OBJECT

public:
    OAIJobExecutionsApi(const int timeOut = 0);
    ~OAIJobExecutionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  job_agent_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  job_execution_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jobExecutionsCancel(const QString &resource_group_name, const QString &server_name, const QString &job_agent_name, const QString &job_name, const QString &job_execution_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  job_agent_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jobExecutionsCreate(const QString &resource_group_name, const QString &server_name, const QString &job_agent_name, const QString &job_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  job_agent_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  job_execution_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jobExecutionsCreateOrUpdate(const QString &resource_group_name, const QString &server_name, const QString &job_agent_name, const QString &job_name, const QString &job_execution_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  job_agent_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  job_execution_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jobExecutionsGet(const QString &resource_group_name, const QString &server_name, const QString &job_agent_name, const QString &job_name, const QString &job_execution_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  job_agent_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  create_time_min QDateTime [optional]
    * @param[in]  create_time_max QDateTime [optional]
    * @param[in]  end_time_min QDateTime [optional]
    * @param[in]  end_time_max QDateTime [optional]
    * @param[in]  is_active bool [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void jobExecutionsListByAgent(const QString &resource_group_name, const QString &server_name, const QString &job_agent_name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QDateTime> &create_time_min = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &create_time_max = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time_min = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time_max = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &is_active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  job_agent_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  create_time_min QDateTime [optional]
    * @param[in]  create_time_max QDateTime [optional]
    * @param[in]  end_time_min QDateTime [optional]
    * @param[in]  end_time_max QDateTime [optional]
    * @param[in]  is_active bool [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void jobExecutionsListByJob(const QString &resource_group_name, const QString &server_name, const QString &job_agent_name, const QString &job_name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QDateTime> &create_time_min = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &create_time_max = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time_min = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time_max = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &is_active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void jobExecutionsCancelCallback(OAIHttpRequestWorker *worker);
    void jobExecutionsCreateCallback(OAIHttpRequestWorker *worker);
    void jobExecutionsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void jobExecutionsGetCallback(OAIHttpRequestWorker *worker);
    void jobExecutionsListByAgentCallback(OAIHttpRequestWorker *worker);
    void jobExecutionsListByJobCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void jobExecutionsCancelSignal();
    void jobExecutionsCreateSignal(OAIJobExecution summary);
    void jobExecutionsCreateOrUpdateSignal(OAIJobExecution summary);
    void jobExecutionsGetSignal(OAIJobExecution summary);
    void jobExecutionsListByAgentSignal(OAIJobExecutionListResult summary);
    void jobExecutionsListByJobSignal(OAIJobExecutionListResult summary);


    void jobExecutionsCancelSignalFull(OAIHttpRequestWorker *worker);
    void jobExecutionsCreateSignalFull(OAIHttpRequestWorker *worker, OAIJobExecution summary);
    void jobExecutionsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIJobExecution summary);
    void jobExecutionsGetSignalFull(OAIHttpRequestWorker *worker, OAIJobExecution summary);
    void jobExecutionsListByAgentSignalFull(OAIHttpRequestWorker *worker, OAIJobExecutionListResult summary);
    void jobExecutionsListByJobSignalFull(OAIHttpRequestWorker *worker, OAIJobExecutionListResult summary);

    Q_DECL_DEPRECATED_X("Use jobExecutionsCancelSignalError() instead")
    void jobExecutionsCancelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jobExecutionsCancelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobExecutionsCreateSignalError() instead")
    void jobExecutionsCreateSignalE(OAIJobExecution summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobExecutionsCreateSignalError(OAIJobExecution summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobExecutionsCreateOrUpdateSignalError() instead")
    void jobExecutionsCreateOrUpdateSignalE(OAIJobExecution summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobExecutionsCreateOrUpdateSignalError(OAIJobExecution summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobExecutionsGetSignalError() instead")
    void jobExecutionsGetSignalE(OAIJobExecution summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobExecutionsGetSignalError(OAIJobExecution summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobExecutionsListByAgentSignalError() instead")
    void jobExecutionsListByAgentSignalE(OAIJobExecutionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobExecutionsListByAgentSignalError(OAIJobExecutionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobExecutionsListByJobSignalError() instead")
    void jobExecutionsListByJobSignalE(OAIJobExecutionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobExecutionsListByJobSignalError(OAIJobExecutionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use jobExecutionsCancelSignalErrorFull() instead")
    void jobExecutionsCancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobExecutionsCancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobExecutionsCreateSignalErrorFull() instead")
    void jobExecutionsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobExecutionsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobExecutionsCreateOrUpdateSignalErrorFull() instead")
    void jobExecutionsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobExecutionsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobExecutionsGetSignalErrorFull() instead")
    void jobExecutionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobExecutionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobExecutionsListByAgentSignalErrorFull() instead")
    void jobExecutionsListByAgentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobExecutionsListByAgentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobExecutionsListByJobSignalErrorFull() instead")
    void jobExecutionsListByJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobExecutionsListByJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
