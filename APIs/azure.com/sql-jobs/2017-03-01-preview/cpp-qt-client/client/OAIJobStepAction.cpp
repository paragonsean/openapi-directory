/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobStepAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobStepAction::OAIJobStepAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobStepAction::OAIJobStepAction() {
    this->initializeModel();
}

OAIJobStepAction::~OAIJobStepAction() {}

void OAIJobStepAction::initializeModel() {

    m_source_isSet = false;
    m_source_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIJobStepAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobStepAction::fromJsonObject(QJsonObject json) {

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIJobStepAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobStepAction::asJsonObject() const {
    QJsonObject obj;
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIJobStepAction::getSource() const {
    return m_source;
}
void OAIJobStepAction::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIJobStepAction::is_source_Set() const{
    return m_source_isSet;
}

bool OAIJobStepAction::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIJobStepAction::getType() const {
    return m_type;
}
void OAIJobStepAction::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIJobStepAction::is_type_Set() const{
    return m_type_isSet;
}

bool OAIJobStepAction::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIJobStepAction::getValue() const {
    return m_value;
}
void OAIJobStepAction::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIJobStepAction::is_value_Set() const{
    return m_value_isSet;
}

bool OAIJobStepAction::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIJobStepAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobStepAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid && true;
}

} // namespace OpenAPI
