/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobTarget.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobTarget::OAIJobTarget(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobTarget::OAIJobTarget() {
    this->initializeModel();
}

OAIJobTarget::~OAIJobTarget() {}

void OAIJobTarget::initializeModel() {

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_elastic_pool_name_isSet = false;
    m_elastic_pool_name_isValid = false;

    m_membership_type_isSet = false;
    m_membership_type_isValid = false;

    m_refresh_credential_isSet = false;
    m_refresh_credential_isValid = false;

    m_server_name_isSet = false;
    m_server_name_isValid = false;

    m_shard_map_name_isSet = false;
    m_shard_map_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIJobTarget::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobTarget::fromJsonObject(QJsonObject json) {

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("databaseName")]);
    m_database_name_isSet = !json[QString("databaseName")].isNull() && m_database_name_isValid;

    m_elastic_pool_name_isValid = ::OpenAPI::fromJsonValue(m_elastic_pool_name, json[QString("elasticPoolName")]);
    m_elastic_pool_name_isSet = !json[QString("elasticPoolName")].isNull() && m_elastic_pool_name_isValid;

    m_membership_type_isValid = ::OpenAPI::fromJsonValue(m_membership_type, json[QString("membershipType")]);
    m_membership_type_isSet = !json[QString("membershipType")].isNull() && m_membership_type_isValid;

    m_refresh_credential_isValid = ::OpenAPI::fromJsonValue(m_refresh_credential, json[QString("refreshCredential")]);
    m_refresh_credential_isSet = !json[QString("refreshCredential")].isNull() && m_refresh_credential_isValid;

    m_server_name_isValid = ::OpenAPI::fromJsonValue(m_server_name, json[QString("serverName")]);
    m_server_name_isSet = !json[QString("serverName")].isNull() && m_server_name_isValid;

    m_shard_map_name_isValid = ::OpenAPI::fromJsonValue(m_shard_map_name, json[QString("shardMapName")]);
    m_shard_map_name_isSet = !json[QString("shardMapName")].isNull() && m_shard_map_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIJobTarget::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobTarget::asJsonObject() const {
    QJsonObject obj;
    if (m_database_name_isSet) {
        obj.insert(QString("databaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_elastic_pool_name_isSet) {
        obj.insert(QString("elasticPoolName"), ::OpenAPI::toJsonValue(m_elastic_pool_name));
    }
    if (m_membership_type_isSet) {
        obj.insert(QString("membershipType"), ::OpenAPI::toJsonValue(m_membership_type));
    }
    if (m_refresh_credential_isSet) {
        obj.insert(QString("refreshCredential"), ::OpenAPI::toJsonValue(m_refresh_credential));
    }
    if (m_server_name_isSet) {
        obj.insert(QString("serverName"), ::OpenAPI::toJsonValue(m_server_name));
    }
    if (m_shard_map_name_isSet) {
        obj.insert(QString("shardMapName"), ::OpenAPI::toJsonValue(m_shard_map_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIJobTarget::getDatabaseName() const {
    return m_database_name;
}
void OAIJobTarget::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAIJobTarget::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAIJobTarget::is_database_name_Valid() const{
    return m_database_name_isValid;
}

QString OAIJobTarget::getElasticPoolName() const {
    return m_elastic_pool_name;
}
void OAIJobTarget::setElasticPoolName(const QString &elastic_pool_name) {
    m_elastic_pool_name = elastic_pool_name;
    m_elastic_pool_name_isSet = true;
}

bool OAIJobTarget::is_elastic_pool_name_Set() const{
    return m_elastic_pool_name_isSet;
}

bool OAIJobTarget::is_elastic_pool_name_Valid() const{
    return m_elastic_pool_name_isValid;
}

QString OAIJobTarget::getMembershipType() const {
    return m_membership_type;
}
void OAIJobTarget::setMembershipType(const QString &membership_type) {
    m_membership_type = membership_type;
    m_membership_type_isSet = true;
}

bool OAIJobTarget::is_membership_type_Set() const{
    return m_membership_type_isSet;
}

bool OAIJobTarget::is_membership_type_Valid() const{
    return m_membership_type_isValid;
}

QString OAIJobTarget::getRefreshCredential() const {
    return m_refresh_credential;
}
void OAIJobTarget::setRefreshCredential(const QString &refresh_credential) {
    m_refresh_credential = refresh_credential;
    m_refresh_credential_isSet = true;
}

bool OAIJobTarget::is_refresh_credential_Set() const{
    return m_refresh_credential_isSet;
}

bool OAIJobTarget::is_refresh_credential_Valid() const{
    return m_refresh_credential_isValid;
}

QString OAIJobTarget::getServerName() const {
    return m_server_name;
}
void OAIJobTarget::setServerName(const QString &server_name) {
    m_server_name = server_name;
    m_server_name_isSet = true;
}

bool OAIJobTarget::is_server_name_Set() const{
    return m_server_name_isSet;
}

bool OAIJobTarget::is_server_name_Valid() const{
    return m_server_name_isValid;
}

QString OAIJobTarget::getShardMapName() const {
    return m_shard_map_name;
}
void OAIJobTarget::setShardMapName(const QString &shard_map_name) {
    m_shard_map_name = shard_map_name;
    m_shard_map_name_isSet = true;
}

bool OAIJobTarget::is_shard_map_name_Set() const{
    return m_shard_map_name_isSet;
}

bool OAIJobTarget::is_shard_map_name_Valid() const{
    return m_shard_map_name_isValid;
}

QString OAIJobTarget::getType() const {
    return m_type;
}
void OAIJobTarget::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIJobTarget::is_type_Set() const{
    return m_type_isSet;
}

bool OAIJobTarget::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIJobTarget::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elastic_pool_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_credential_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shard_map_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobTarget::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
