/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobSchedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobSchedule::OAIJobSchedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobSchedule::OAIJobSchedule() {
    this->initializeModel();
}

OAIJobSchedule::~OAIJobSchedule() {}

void OAIJobSchedule::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIJobSchedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobSchedule::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIJobSchedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobSchedule::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAIJobSchedule::isEnabled() const {
    return m_enabled;
}
void OAIJobSchedule::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIJobSchedule::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIJobSchedule::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QDateTime OAIJobSchedule::getEndTime() const {
    return m_end_time;
}
void OAIJobSchedule::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIJobSchedule::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIJobSchedule::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIJobSchedule::getInterval() const {
    return m_interval;
}
void OAIJobSchedule::setInterval(const QString &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIJobSchedule::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIJobSchedule::is_interval_Valid() const{
    return m_interval_isValid;
}

QDateTime OAIJobSchedule::getStartTime() const {
    return m_start_time;
}
void OAIJobSchedule::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIJobSchedule::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIJobSchedule::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIJobSchedule::getType() const {
    return m_type;
}
void OAIJobSchedule::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIJobSchedule::is_type_Set() const{
    return m_type_isSet;
}

bool OAIJobSchedule::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIJobSchedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobSchedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
