/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIJobExecutionProperties.h
 *
 * Properties for an Azure SQL Database Elastic job execution.
 */

#ifndef OAIJobExecutionProperties_H
#define OAIJobExecutionProperties_H

#include <QJsonObject>

#include "OAIJobExecutionTarget.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIJobExecutionTarget;

class OAIJobExecutionProperties : public OAIObject {
public:
    OAIJobExecutionProperties();
    OAIJobExecutionProperties(QString json);
    ~OAIJobExecutionProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getCreateTime() const;
    void setCreateTime(const QDateTime &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    QDateTime getCurrentAttemptStartTime() const;
    void setCurrentAttemptStartTime(const QDateTime &current_attempt_start_time);
    bool is_current_attempt_start_time_Set() const;
    bool is_current_attempt_start_time_Valid() const;

    qint32 getCurrentAttempts() const;
    void setCurrentAttempts(const qint32 &current_attempts);
    bool is_current_attempts_Set() const;
    bool is_current_attempts_Valid() const;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    QString getJobExecutionId() const;
    void setJobExecutionId(const QString &job_execution_id);
    bool is_job_execution_id_Set() const;
    bool is_job_execution_id_Valid() const;

    qint32 getJobVersion() const;
    void setJobVersion(const qint32 &job_version);
    bool is_job_version_Set() const;
    bool is_job_version_Valid() const;

    QString getLastMessage() const;
    void setLastMessage(const QString &last_message);
    bool is_last_message_Set() const;
    bool is_last_message_Valid() const;

    QString getLifecycle() const;
    void setLifecycle(const QString &lifecycle);
    bool is_lifecycle_Set() const;
    bool is_lifecycle_Valid() const;

    QString getProvisioningState() const;
    void setProvisioningState(const QString &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    qint32 getStepId() const;
    void setStepId(const qint32 &step_id);
    bool is_step_id_Set() const;
    bool is_step_id_Valid() const;

    QString getStepName() const;
    void setStepName(const QString &step_name);
    bool is_step_name_Set() const;
    bool is_step_name_Valid() const;

    OAIJobExecutionTarget getTarget() const;
    void setTarget(const OAIJobExecutionTarget &target);
    bool is_target_Set() const;
    bool is_target_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    QDateTime m_current_attempt_start_time;
    bool m_current_attempt_start_time_isSet;
    bool m_current_attempt_start_time_isValid;

    qint32 m_current_attempts;
    bool m_current_attempts_isSet;
    bool m_current_attempts_isValid;

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    QString m_job_execution_id;
    bool m_job_execution_id_isSet;
    bool m_job_execution_id_isValid;

    qint32 m_job_version;
    bool m_job_version_isSet;
    bool m_job_version_isValid;

    QString m_last_message;
    bool m_last_message_isSet;
    bool m_last_message_isValid;

    QString m_lifecycle;
    bool m_lifecycle_isSet;
    bool m_lifecycle_isValid;

    QString m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    qint32 m_step_id;
    bool m_step_id_isSet;
    bool m_step_id_isValid;

    QString m_step_name;
    bool m_step_name_isSet;
    bool m_step_name_isValid;

    OAIJobExecutionTarget m_target;
    bool m_target_isSet;
    bool m_target_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIJobExecutionProperties)

#endif // OAIJobExecutionProperties_H
