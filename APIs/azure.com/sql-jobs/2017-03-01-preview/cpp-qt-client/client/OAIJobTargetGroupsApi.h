/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIJobTargetGroupsApi_H
#define OAI_OAIJobTargetGroupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIJobTargetGroup.h"
#include "OAIJobTargetGroupListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIJobTargetGroupsApi : public QObject {
    Q_OBJECT

public:
    OAIJobTargetGroupsApi(const int timeOut = 0);
    ~OAIJobTargetGroupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  job_agent_name QString [required]
    * @param[in]  target_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIJobTargetGroup [required]
    */
    virtual void jobTargetGroupsCreateOrUpdate(const QString &resource_group_name, const QString &server_name, const QString &job_agent_name, const QString &target_group_name, const QString &subscription_id, const QString &api_version, const OAIJobTargetGroup &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  job_agent_name QString [required]
    * @param[in]  target_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jobTargetGroupsDelete(const QString &resource_group_name, const QString &server_name, const QString &job_agent_name, const QString &target_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  job_agent_name QString [required]
    * @param[in]  target_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jobTargetGroupsGet(const QString &resource_group_name, const QString &server_name, const QString &job_agent_name, const QString &target_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  job_agent_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jobTargetGroupsListByAgent(const QString &resource_group_name, const QString &server_name, const QString &job_agent_name, const QString &subscription_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void jobTargetGroupsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void jobTargetGroupsDeleteCallback(OAIHttpRequestWorker *worker);
    void jobTargetGroupsGetCallback(OAIHttpRequestWorker *worker);
    void jobTargetGroupsListByAgentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void jobTargetGroupsCreateOrUpdateSignal(OAIJobTargetGroup summary);
    void jobTargetGroupsDeleteSignal();
    void jobTargetGroupsGetSignal(OAIJobTargetGroup summary);
    void jobTargetGroupsListByAgentSignal(OAIJobTargetGroupListResult summary);


    void jobTargetGroupsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIJobTargetGroup summary);
    void jobTargetGroupsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void jobTargetGroupsGetSignalFull(OAIHttpRequestWorker *worker, OAIJobTargetGroup summary);
    void jobTargetGroupsListByAgentSignalFull(OAIHttpRequestWorker *worker, OAIJobTargetGroupListResult summary);

    Q_DECL_DEPRECATED_X("Use jobTargetGroupsCreateOrUpdateSignalError() instead")
    void jobTargetGroupsCreateOrUpdateSignalE(OAIJobTargetGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobTargetGroupsCreateOrUpdateSignalError(OAIJobTargetGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobTargetGroupsDeleteSignalError() instead")
    void jobTargetGroupsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jobTargetGroupsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobTargetGroupsGetSignalError() instead")
    void jobTargetGroupsGetSignalE(OAIJobTargetGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobTargetGroupsGetSignalError(OAIJobTargetGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobTargetGroupsListByAgentSignalError() instead")
    void jobTargetGroupsListByAgentSignalE(OAIJobTargetGroupListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobTargetGroupsListByAgentSignalError(OAIJobTargetGroupListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use jobTargetGroupsCreateOrUpdateSignalErrorFull() instead")
    void jobTargetGroupsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobTargetGroupsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobTargetGroupsDeleteSignalErrorFull() instead")
    void jobTargetGroupsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobTargetGroupsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobTargetGroupsGetSignalErrorFull() instead")
    void jobTargetGroupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobTargetGroupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobTargetGroupsListByAgentSignalErrorFull() instead")
    void jobTargetGroupsListByAgentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobTargetGroupsListByAgentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
