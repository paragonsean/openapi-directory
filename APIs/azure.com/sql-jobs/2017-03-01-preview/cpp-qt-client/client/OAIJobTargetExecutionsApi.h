/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIJobTargetExecutionsApi_H
#define OAI_OAIJobTargetExecutionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIJobExecution.h"
#include "OAIJobExecutionListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIJobTargetExecutionsApi : public QObject {
    Q_OBJECT

public:
    OAIJobTargetExecutionsApi(const int timeOut = 0);
    ~OAIJobTargetExecutionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  job_agent_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  job_execution_id QString [required]
    * @param[in]  step_name QString [required]
    * @param[in]  target_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jobTargetExecutionsGet(const QString &resource_group_name, const QString &server_name, const QString &job_agent_name, const QString &job_name, const QString &job_execution_id, const QString &step_name, const QString &target_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  job_agent_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  job_execution_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  create_time_min QDateTime [optional]
    * @param[in]  create_time_max QDateTime [optional]
    * @param[in]  end_time_min QDateTime [optional]
    * @param[in]  end_time_max QDateTime [optional]
    * @param[in]  is_active bool [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void jobTargetExecutionsListByJobExecution(const QString &resource_group_name, const QString &server_name, const QString &job_agent_name, const QString &job_name, const QString &job_execution_id, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QDateTime> &create_time_min = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &create_time_max = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time_min = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time_max = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &is_active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  job_agent_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  job_execution_id QString [required]
    * @param[in]  step_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  create_time_min QDateTime [optional]
    * @param[in]  create_time_max QDateTime [optional]
    * @param[in]  end_time_min QDateTime [optional]
    * @param[in]  end_time_max QDateTime [optional]
    * @param[in]  is_active bool [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void jobTargetExecutionsListByStep(const QString &resource_group_name, const QString &server_name, const QString &job_agent_name, const QString &job_name, const QString &job_execution_id, const QString &step_name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QDateTime> &create_time_min = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &create_time_max = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time_min = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time_max = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &is_active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void jobTargetExecutionsGetCallback(OAIHttpRequestWorker *worker);
    void jobTargetExecutionsListByJobExecutionCallback(OAIHttpRequestWorker *worker);
    void jobTargetExecutionsListByStepCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void jobTargetExecutionsGetSignal(OAIJobExecution summary);
    void jobTargetExecutionsListByJobExecutionSignal(OAIJobExecutionListResult summary);
    void jobTargetExecutionsListByStepSignal(OAIJobExecutionListResult summary);


    void jobTargetExecutionsGetSignalFull(OAIHttpRequestWorker *worker, OAIJobExecution summary);
    void jobTargetExecutionsListByJobExecutionSignalFull(OAIHttpRequestWorker *worker, OAIJobExecutionListResult summary);
    void jobTargetExecutionsListByStepSignalFull(OAIHttpRequestWorker *worker, OAIJobExecutionListResult summary);

    Q_DECL_DEPRECATED_X("Use jobTargetExecutionsGetSignalError() instead")
    void jobTargetExecutionsGetSignalE(OAIJobExecution summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobTargetExecutionsGetSignalError(OAIJobExecution summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobTargetExecutionsListByJobExecutionSignalError() instead")
    void jobTargetExecutionsListByJobExecutionSignalE(OAIJobExecutionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobTargetExecutionsListByJobExecutionSignalError(OAIJobExecutionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobTargetExecutionsListByStepSignalError() instead")
    void jobTargetExecutionsListByStepSignalE(OAIJobExecutionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobTargetExecutionsListByStepSignalError(OAIJobExecutionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use jobTargetExecutionsGetSignalErrorFull() instead")
    void jobTargetExecutionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobTargetExecutionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobTargetExecutionsListByJobExecutionSignalErrorFull() instead")
    void jobTargetExecutionsListByJobExecutionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobTargetExecutionsListByJobExecutionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobTargetExecutionsListByStepSignalErrorFull() instead")
    void jobTargetExecutionsListByStepSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobTargetExecutionsListByStepSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
