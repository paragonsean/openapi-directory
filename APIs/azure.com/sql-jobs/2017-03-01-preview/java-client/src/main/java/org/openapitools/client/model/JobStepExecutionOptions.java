/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The execution options of a job step.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:13:11.122054-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobStepExecutionOptions {
  public static final String SERIALIZED_NAME_INITIAL_RETRY_INTERVAL_SECONDS = "initialRetryIntervalSeconds";
  @SerializedName(SERIALIZED_NAME_INITIAL_RETRY_INTERVAL_SECONDS)
  private Integer initialRetryIntervalSeconds = 1;

  public static final String SERIALIZED_NAME_MAXIMUM_RETRY_INTERVAL_SECONDS = "maximumRetryIntervalSeconds";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_RETRY_INTERVAL_SECONDS)
  private Integer maximumRetryIntervalSeconds = 120;

  public static final String SERIALIZED_NAME_RETRY_ATTEMPTS = "retryAttempts";
  @SerializedName(SERIALIZED_NAME_RETRY_ATTEMPTS)
  private Integer retryAttempts = 10;

  public static final String SERIALIZED_NAME_RETRY_INTERVAL_BACKOFF_MULTIPLIER = "retryIntervalBackoffMultiplier";
  @SerializedName(SERIALIZED_NAME_RETRY_INTERVAL_BACKOFF_MULTIPLIER)
  private Float retryIntervalBackoffMultiplier = 2.0f;

  public static final String SERIALIZED_NAME_TIMEOUT_SECONDS = "timeoutSeconds";
  @SerializedName(SERIALIZED_NAME_TIMEOUT_SECONDS)
  private Integer timeoutSeconds = 43200;

  public JobStepExecutionOptions() {
  }

  public JobStepExecutionOptions initialRetryIntervalSeconds(Integer initialRetryIntervalSeconds) {
    this.initialRetryIntervalSeconds = initialRetryIntervalSeconds;
    return this;
  }

  /**
   * Initial delay between retries for job step execution.
   * @return initialRetryIntervalSeconds
   */
  @javax.annotation.Nullable
  public Integer getInitialRetryIntervalSeconds() {
    return initialRetryIntervalSeconds;
  }

  public void setInitialRetryIntervalSeconds(Integer initialRetryIntervalSeconds) {
    this.initialRetryIntervalSeconds = initialRetryIntervalSeconds;
  }


  public JobStepExecutionOptions maximumRetryIntervalSeconds(Integer maximumRetryIntervalSeconds) {
    this.maximumRetryIntervalSeconds = maximumRetryIntervalSeconds;
    return this;
  }

  /**
   * The maximum amount of time to wait between retries for job step execution.
   * @return maximumRetryIntervalSeconds
   */
  @javax.annotation.Nullable
  public Integer getMaximumRetryIntervalSeconds() {
    return maximumRetryIntervalSeconds;
  }

  public void setMaximumRetryIntervalSeconds(Integer maximumRetryIntervalSeconds) {
    this.maximumRetryIntervalSeconds = maximumRetryIntervalSeconds;
  }


  public JobStepExecutionOptions retryAttempts(Integer retryAttempts) {
    this.retryAttempts = retryAttempts;
    return this;
  }

  /**
   * Maximum number of times the job step will be reattempted if the first attempt fails.
   * @return retryAttempts
   */
  @javax.annotation.Nullable
  public Integer getRetryAttempts() {
    return retryAttempts;
  }

  public void setRetryAttempts(Integer retryAttempts) {
    this.retryAttempts = retryAttempts;
  }


  public JobStepExecutionOptions retryIntervalBackoffMultiplier(Float retryIntervalBackoffMultiplier) {
    this.retryIntervalBackoffMultiplier = retryIntervalBackoffMultiplier;
    return this;
  }

  /**
   * The backoff multiplier for the time between retries.
   * @return retryIntervalBackoffMultiplier
   */
  @javax.annotation.Nullable
  public Float getRetryIntervalBackoffMultiplier() {
    return retryIntervalBackoffMultiplier;
  }

  public void setRetryIntervalBackoffMultiplier(Float retryIntervalBackoffMultiplier) {
    this.retryIntervalBackoffMultiplier = retryIntervalBackoffMultiplier;
  }


  public JobStepExecutionOptions timeoutSeconds(Integer timeoutSeconds) {
    this.timeoutSeconds = timeoutSeconds;
    return this;
  }

  /**
   * Execution timeout for the job step.
   * @return timeoutSeconds
   */
  @javax.annotation.Nullable
  public Integer getTimeoutSeconds() {
    return timeoutSeconds;
  }

  public void setTimeoutSeconds(Integer timeoutSeconds) {
    this.timeoutSeconds = timeoutSeconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobStepExecutionOptions jobStepExecutionOptions = (JobStepExecutionOptions) o;
    return Objects.equals(this.initialRetryIntervalSeconds, jobStepExecutionOptions.initialRetryIntervalSeconds) &&
        Objects.equals(this.maximumRetryIntervalSeconds, jobStepExecutionOptions.maximumRetryIntervalSeconds) &&
        Objects.equals(this.retryAttempts, jobStepExecutionOptions.retryAttempts) &&
        Objects.equals(this.retryIntervalBackoffMultiplier, jobStepExecutionOptions.retryIntervalBackoffMultiplier) &&
        Objects.equals(this.timeoutSeconds, jobStepExecutionOptions.timeoutSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(initialRetryIntervalSeconds, maximumRetryIntervalSeconds, retryAttempts, retryIntervalBackoffMultiplier, timeoutSeconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobStepExecutionOptions {\n");
    sb.append("    initialRetryIntervalSeconds: ").append(toIndentedString(initialRetryIntervalSeconds)).append("\n");
    sb.append("    maximumRetryIntervalSeconds: ").append(toIndentedString(maximumRetryIntervalSeconds)).append("\n");
    sb.append("    retryAttempts: ").append(toIndentedString(retryAttempts)).append("\n");
    sb.append("    retryIntervalBackoffMultiplier: ").append(toIndentedString(retryIntervalBackoffMultiplier)).append("\n");
    sb.append("    timeoutSeconds: ").append(toIndentedString(timeoutSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("initialRetryIntervalSeconds");
    openapiFields.add("maximumRetryIntervalSeconds");
    openapiFields.add("retryAttempts");
    openapiFields.add("retryIntervalBackoffMultiplier");
    openapiFields.add("timeoutSeconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobStepExecutionOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobStepExecutionOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobStepExecutionOptions is not found in the empty JSON string", JobStepExecutionOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobStepExecutionOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobStepExecutionOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobStepExecutionOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobStepExecutionOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobStepExecutionOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobStepExecutionOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<JobStepExecutionOptions>() {
           @Override
           public void write(JsonWriter out, JobStepExecutionOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobStepExecutionOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobStepExecutionOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobStepExecutionOptions
   * @throws IOException if the JSON string is invalid with respect to JobStepExecutionOptions
   */
  public static JobStepExecutionOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobStepExecutionOptions.class);
  }

  /**
   * Convert an instance of JobStepExecutionOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

