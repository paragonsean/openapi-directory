/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The output configuration of a job step.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:13:11.122054-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobStepOutput {
  public static final String SERIALIZED_NAME_CREDENTIAL = "credential";
  @SerializedName(SERIALIZED_NAME_CREDENTIAL)
  private String credential;

  public static final String SERIALIZED_NAME_DATABASE_NAME = "databaseName";
  @SerializedName(SERIALIZED_NAME_DATABASE_NAME)
  private String databaseName;

  public static final String SERIALIZED_NAME_RESOURCE_GROUP_NAME = "resourceGroupName";
  @SerializedName(SERIALIZED_NAME_RESOURCE_GROUP_NAME)
  private String resourceGroupName;

  public static final String SERIALIZED_NAME_SCHEMA_NAME = "schemaName";
  @SerializedName(SERIALIZED_NAME_SCHEMA_NAME)
  private String schemaName = "dbo";

  public static final String SERIALIZED_NAME_SERVER_NAME = "serverName";
  @SerializedName(SERIALIZED_NAME_SERVER_NAME)
  private String serverName;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscriptionId";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private UUID subscriptionId;

  public static final String SERIALIZED_NAME_TABLE_NAME = "tableName";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  private String tableName;

  /**
   * The output destination type.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    SQL_DATABASE("SqlDatabase");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type = TypeEnum.SQL_DATABASE;

  public JobStepOutput() {
  }

  public JobStepOutput credential(String credential) {
    this.credential = credential;
    return this;
  }

  /**
   * The resource ID of the credential to use to connect to the output destination.
   * @return credential
   */
  @javax.annotation.Nonnull
  public String getCredential() {
    return credential;
  }

  public void setCredential(String credential) {
    this.credential = credential;
  }


  public JobStepOutput databaseName(String databaseName) {
    this.databaseName = databaseName;
    return this;
  }

  /**
   * The output destination database.
   * @return databaseName
   */
  @javax.annotation.Nonnull
  public String getDatabaseName() {
    return databaseName;
  }

  public void setDatabaseName(String databaseName) {
    this.databaseName = databaseName;
  }


  public JobStepOutput resourceGroupName(String resourceGroupName) {
    this.resourceGroupName = resourceGroupName;
    return this;
  }

  /**
   * The output destination resource group.
   * @return resourceGroupName
   */
  @javax.annotation.Nullable
  public String getResourceGroupName() {
    return resourceGroupName;
  }

  public void setResourceGroupName(String resourceGroupName) {
    this.resourceGroupName = resourceGroupName;
  }


  public JobStepOutput schemaName(String schemaName) {
    this.schemaName = schemaName;
    return this;
  }

  /**
   * The output destination schema.
   * @return schemaName
   */
  @javax.annotation.Nullable
  public String getSchemaName() {
    return schemaName;
  }

  public void setSchemaName(String schemaName) {
    this.schemaName = schemaName;
  }


  public JobStepOutput serverName(String serverName) {
    this.serverName = serverName;
    return this;
  }

  /**
   * The output destination server name.
   * @return serverName
   */
  @javax.annotation.Nonnull
  public String getServerName() {
    return serverName;
  }

  public void setServerName(String serverName) {
    this.serverName = serverName;
  }


  public JobStepOutput subscriptionId(UUID subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  /**
   * The output destination subscription id.
   * @return subscriptionId
   */
  @javax.annotation.Nullable
  public UUID getSubscriptionId() {
    return subscriptionId;
  }

  public void setSubscriptionId(UUID subscriptionId) {
    this.subscriptionId = subscriptionId;
  }


  public JobStepOutput tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * The output destination table.
   * @return tableName
   */
  @javax.annotation.Nonnull
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }


  public JobStepOutput type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The output destination type.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobStepOutput jobStepOutput = (JobStepOutput) o;
    return Objects.equals(this.credential, jobStepOutput.credential) &&
        Objects.equals(this.databaseName, jobStepOutput.databaseName) &&
        Objects.equals(this.resourceGroupName, jobStepOutput.resourceGroupName) &&
        Objects.equals(this.schemaName, jobStepOutput.schemaName) &&
        Objects.equals(this.serverName, jobStepOutput.serverName) &&
        Objects.equals(this.subscriptionId, jobStepOutput.subscriptionId) &&
        Objects.equals(this.tableName, jobStepOutput.tableName) &&
        Objects.equals(this.type, jobStepOutput.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(credential, databaseName, resourceGroupName, schemaName, serverName, subscriptionId, tableName, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobStepOutput {\n");
    sb.append("    credential: ").append(toIndentedString(credential)).append("\n");
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("    resourceGroupName: ").append(toIndentedString(resourceGroupName)).append("\n");
    sb.append("    schemaName: ").append(toIndentedString(schemaName)).append("\n");
    sb.append("    serverName: ").append(toIndentedString(serverName)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("credential");
    openapiFields.add("databaseName");
    openapiFields.add("resourceGroupName");
    openapiFields.add("schemaName");
    openapiFields.add("serverName");
    openapiFields.add("subscriptionId");
    openapiFields.add("tableName");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("credential");
    openapiRequiredFields.add("databaseName");
    openapiRequiredFields.add("serverName");
    openapiRequiredFields.add("tableName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobStepOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobStepOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobStepOutput is not found in the empty JSON string", JobStepOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobStepOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobStepOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : JobStepOutput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("credential").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `credential` to be a primitive type in the JSON string but got `%s`", jsonObj.get("credential").toString()));
      }
      if (!jsonObj.get("databaseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `databaseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("databaseName").toString()));
      }
      if ((jsonObj.get("resourceGroupName") != null && !jsonObj.get("resourceGroupName").isJsonNull()) && !jsonObj.get("resourceGroupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceGroupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceGroupName").toString()));
      }
      if ((jsonObj.get("schemaName") != null && !jsonObj.get("schemaName").isJsonNull()) && !jsonObj.get("schemaName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemaName").toString()));
      }
      if (!jsonObj.get("serverName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverName").toString()));
      }
      if ((jsonObj.get("subscriptionId") != null && !jsonObj.get("subscriptionId").isJsonNull()) && !jsonObj.get("subscriptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionId").toString()));
      }
      if (!jsonObj.get("tableName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tableName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tableName").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobStepOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobStepOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobStepOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobStepOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<JobStepOutput>() {
           @Override
           public void write(JsonWriter out, JobStepOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobStepOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobStepOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobStepOutput
   * @throws IOException if the JSON string is invalid with respect to JobStepOutput
   */
  public static JobStepOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobStepOutput.class);
  }

  /**
   * Convert an instance of JobStepOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

