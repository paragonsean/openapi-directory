/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A job target, for example a specific database or a container of databases that is evaluated during job execution.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:13:11.122054-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobTarget {
  public static final String SERIALIZED_NAME_DATABASE_NAME = "databaseName";
  @SerializedName(SERIALIZED_NAME_DATABASE_NAME)
  private String databaseName;

  public static final String SERIALIZED_NAME_ELASTIC_POOL_NAME = "elasticPoolName";
  @SerializedName(SERIALIZED_NAME_ELASTIC_POOL_NAME)
  private String elasticPoolName;

  /**
   * Whether the target is included or excluded from the group.
   */
  @JsonAdapter(MembershipTypeEnum.Adapter.class)
  public enum MembershipTypeEnum {
    INCLUDE("Include"),
    
    EXCLUDE("Exclude");

    private String value;

    MembershipTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MembershipTypeEnum fromValue(String value) {
      for (MembershipTypeEnum b : MembershipTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MembershipTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MembershipTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MembershipTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MembershipTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MembershipTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MEMBERSHIP_TYPE = "membershipType";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_TYPE)
  private MembershipTypeEnum membershipType = MembershipTypeEnum.INCLUDE;

  public static final String SERIALIZED_NAME_REFRESH_CREDENTIAL = "refreshCredential";
  @SerializedName(SERIALIZED_NAME_REFRESH_CREDENTIAL)
  private String refreshCredential;

  public static final String SERIALIZED_NAME_SERVER_NAME = "serverName";
  @SerializedName(SERIALIZED_NAME_SERVER_NAME)
  private String serverName;

  public static final String SERIALIZED_NAME_SHARD_MAP_NAME = "shardMapName";
  @SerializedName(SERIALIZED_NAME_SHARD_MAP_NAME)
  private String shardMapName;

  /**
   * The target type.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TARGET_GROUP("TargetGroup"),
    
    SQL_DATABASE("SqlDatabase"),
    
    SQL_ELASTIC_POOL("SqlElasticPool"),
    
    SQL_SHARD_MAP("SqlShardMap"),
    
    SQL_SERVER("SqlServer");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public JobTarget() {
  }

  public JobTarget databaseName(String databaseName) {
    this.databaseName = databaseName;
    return this;
  }

  /**
   * The target database name.
   * @return databaseName
   */
  @javax.annotation.Nullable
  public String getDatabaseName() {
    return databaseName;
  }

  public void setDatabaseName(String databaseName) {
    this.databaseName = databaseName;
  }


  public JobTarget elasticPoolName(String elasticPoolName) {
    this.elasticPoolName = elasticPoolName;
    return this;
  }

  /**
   * The target elastic pool name.
   * @return elasticPoolName
   */
  @javax.annotation.Nullable
  public String getElasticPoolName() {
    return elasticPoolName;
  }

  public void setElasticPoolName(String elasticPoolName) {
    this.elasticPoolName = elasticPoolName;
  }


  public JobTarget membershipType(MembershipTypeEnum membershipType) {
    this.membershipType = membershipType;
    return this;
  }

  /**
   * Whether the target is included or excluded from the group.
   * @return membershipType
   */
  @javax.annotation.Nullable
  public MembershipTypeEnum getMembershipType() {
    return membershipType;
  }

  public void setMembershipType(MembershipTypeEnum membershipType) {
    this.membershipType = membershipType;
  }


  public JobTarget refreshCredential(String refreshCredential) {
    this.refreshCredential = refreshCredential;
    return this;
  }

  /**
   * The resource ID of the credential that is used during job execution to connect to the target and determine the list of databases inside the target.
   * @return refreshCredential
   */
  @javax.annotation.Nullable
  public String getRefreshCredential() {
    return refreshCredential;
  }

  public void setRefreshCredential(String refreshCredential) {
    this.refreshCredential = refreshCredential;
  }


  public JobTarget serverName(String serverName) {
    this.serverName = serverName;
    return this;
  }

  /**
   * The target server name.
   * @return serverName
   */
  @javax.annotation.Nullable
  public String getServerName() {
    return serverName;
  }

  public void setServerName(String serverName) {
    this.serverName = serverName;
  }


  public JobTarget shardMapName(String shardMapName) {
    this.shardMapName = shardMapName;
    return this;
  }

  /**
   * The target shard map.
   * @return shardMapName
   */
  @javax.annotation.Nullable
  public String getShardMapName() {
    return shardMapName;
  }

  public void setShardMapName(String shardMapName) {
    this.shardMapName = shardMapName;
  }


  public JobTarget type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The target type.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobTarget jobTarget = (JobTarget) o;
    return Objects.equals(this.databaseName, jobTarget.databaseName) &&
        Objects.equals(this.elasticPoolName, jobTarget.elasticPoolName) &&
        Objects.equals(this.membershipType, jobTarget.membershipType) &&
        Objects.equals(this.refreshCredential, jobTarget.refreshCredential) &&
        Objects.equals(this.serverName, jobTarget.serverName) &&
        Objects.equals(this.shardMapName, jobTarget.shardMapName) &&
        Objects.equals(this.type, jobTarget.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(databaseName, elasticPoolName, membershipType, refreshCredential, serverName, shardMapName, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobTarget {\n");
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("    elasticPoolName: ").append(toIndentedString(elasticPoolName)).append("\n");
    sb.append("    membershipType: ").append(toIndentedString(membershipType)).append("\n");
    sb.append("    refreshCredential: ").append(toIndentedString(refreshCredential)).append("\n");
    sb.append("    serverName: ").append(toIndentedString(serverName)).append("\n");
    sb.append("    shardMapName: ").append(toIndentedString(shardMapName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("databaseName");
    openapiFields.add("elasticPoolName");
    openapiFields.add("membershipType");
    openapiFields.add("refreshCredential");
    openapiFields.add("serverName");
    openapiFields.add("shardMapName");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobTarget
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobTarget.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobTarget is not found in the empty JSON string", JobTarget.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobTarget.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobTarget` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : JobTarget.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("databaseName") != null && !jsonObj.get("databaseName").isJsonNull()) && !jsonObj.get("databaseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `databaseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("databaseName").toString()));
      }
      if ((jsonObj.get("elasticPoolName") != null && !jsonObj.get("elasticPoolName").isJsonNull()) && !jsonObj.get("elasticPoolName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `elasticPoolName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("elasticPoolName").toString()));
      }
      if ((jsonObj.get("membershipType") != null && !jsonObj.get("membershipType").isJsonNull()) && !jsonObj.get("membershipType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `membershipType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("membershipType").toString()));
      }
      // validate the optional field `membershipType`
      if (jsonObj.get("membershipType") != null && !jsonObj.get("membershipType").isJsonNull()) {
        MembershipTypeEnum.validateJsonElement(jsonObj.get("membershipType"));
      }
      if ((jsonObj.get("refreshCredential") != null && !jsonObj.get("refreshCredential").isJsonNull()) && !jsonObj.get("refreshCredential").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refreshCredential` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refreshCredential").toString()));
      }
      if ((jsonObj.get("serverName") != null && !jsonObj.get("serverName").isJsonNull()) && !jsonObj.get("serverName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverName").toString()));
      }
      if ((jsonObj.get("shardMapName") != null && !jsonObj.get("shardMapName").isJsonNull()) && !jsonObj.get("shardMapName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shardMapName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shardMapName").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobTarget.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobTarget' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobTarget> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobTarget.class));

       return (TypeAdapter<T>) new TypeAdapter<JobTarget>() {
           @Override
           public void write(JsonWriter out, JobTarget value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobTarget read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobTarget given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobTarget
   * @throws IOException if the JSON string is invalid with respect to JobTarget
   */
  public static JobTarget fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobTarget.class);
  }

  /**
   * Convert an instance of JobTarget to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

