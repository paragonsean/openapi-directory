/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.JobStepAction;
import org.openapitools.client.model.JobStepExecutionOptions;
import org.openapitools.client.model.JobStepOutput;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a job step.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:13:11.122054-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobStepProperties {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private JobStepAction action;

  public static final String SERIALIZED_NAME_CREDENTIAL = "credential";
  @SerializedName(SERIALIZED_NAME_CREDENTIAL)
  private String credential;

  public static final String SERIALIZED_NAME_EXECUTION_OPTIONS = "executionOptions";
  @SerializedName(SERIALIZED_NAME_EXECUTION_OPTIONS)
  private JobStepExecutionOptions executionOptions;

  public static final String SERIALIZED_NAME_OUTPUT = "output";
  @SerializedName(SERIALIZED_NAME_OUTPUT)
  private JobStepOutput output;

  public static final String SERIALIZED_NAME_STEP_ID = "stepId";
  @SerializedName(SERIALIZED_NAME_STEP_ID)
  private Integer stepId;

  public static final String SERIALIZED_NAME_TARGET_GROUP = "targetGroup";
  @SerializedName(SERIALIZED_NAME_TARGET_GROUP)
  private String targetGroup;

  public JobStepProperties() {
  }

  public JobStepProperties action(JobStepAction action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nonnull
  public JobStepAction getAction() {
    return action;
  }

  public void setAction(JobStepAction action) {
    this.action = action;
  }


  public JobStepProperties credential(String credential) {
    this.credential = credential;
    return this;
  }

  /**
   * The resource ID of the job credential that will be used to connect to the targets.
   * @return credential
   */
  @javax.annotation.Nonnull
  public String getCredential() {
    return credential;
  }

  public void setCredential(String credential) {
    this.credential = credential;
  }


  public JobStepProperties executionOptions(JobStepExecutionOptions executionOptions) {
    this.executionOptions = executionOptions;
    return this;
  }

  /**
   * Get executionOptions
   * @return executionOptions
   */
  @javax.annotation.Nullable
  public JobStepExecutionOptions getExecutionOptions() {
    return executionOptions;
  }

  public void setExecutionOptions(JobStepExecutionOptions executionOptions) {
    this.executionOptions = executionOptions;
  }


  public JobStepProperties output(JobStepOutput output) {
    this.output = output;
    return this;
  }

  /**
   * Get output
   * @return output
   */
  @javax.annotation.Nullable
  public JobStepOutput getOutput() {
    return output;
  }

  public void setOutput(JobStepOutput output) {
    this.output = output;
  }


  public JobStepProperties stepId(Integer stepId) {
    this.stepId = stepId;
    return this;
  }

  /**
   * The job step&#39;s index within the job. If not specified when creating the job step, it will be created as the last step. If not specified when updating the job step, the step id is not modified.
   * @return stepId
   */
  @javax.annotation.Nullable
  public Integer getStepId() {
    return stepId;
  }

  public void setStepId(Integer stepId) {
    this.stepId = stepId;
  }


  public JobStepProperties targetGroup(String targetGroup) {
    this.targetGroup = targetGroup;
    return this;
  }

  /**
   * The resource ID of the target group that the job step will be executed on.
   * @return targetGroup
   */
  @javax.annotation.Nonnull
  public String getTargetGroup() {
    return targetGroup;
  }

  public void setTargetGroup(String targetGroup) {
    this.targetGroup = targetGroup;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobStepProperties jobStepProperties = (JobStepProperties) o;
    return Objects.equals(this.action, jobStepProperties.action) &&
        Objects.equals(this.credential, jobStepProperties.credential) &&
        Objects.equals(this.executionOptions, jobStepProperties.executionOptions) &&
        Objects.equals(this.output, jobStepProperties.output) &&
        Objects.equals(this.stepId, jobStepProperties.stepId) &&
        Objects.equals(this.targetGroup, jobStepProperties.targetGroup);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, credential, executionOptions, output, stepId, targetGroup);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobStepProperties {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    credential: ").append(toIndentedString(credential)).append("\n");
    sb.append("    executionOptions: ").append(toIndentedString(executionOptions)).append("\n");
    sb.append("    output: ").append(toIndentedString(output)).append("\n");
    sb.append("    stepId: ").append(toIndentedString(stepId)).append("\n");
    sb.append("    targetGroup: ").append(toIndentedString(targetGroup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("credential");
    openapiFields.add("executionOptions");
    openapiFields.add("output");
    openapiFields.add("stepId");
    openapiFields.add("targetGroup");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("action");
    openapiRequiredFields.add("credential");
    openapiRequiredFields.add("targetGroup");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobStepProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobStepProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobStepProperties is not found in the empty JSON string", JobStepProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobStepProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobStepProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : JobStepProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `action`
      JobStepAction.validateJsonElement(jsonObj.get("action"));
      if (!jsonObj.get("credential").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `credential` to be a primitive type in the JSON string but got `%s`", jsonObj.get("credential").toString()));
      }
      // validate the optional field `executionOptions`
      if (jsonObj.get("executionOptions") != null && !jsonObj.get("executionOptions").isJsonNull()) {
        JobStepExecutionOptions.validateJsonElement(jsonObj.get("executionOptions"));
      }
      // validate the optional field `output`
      if (jsonObj.get("output") != null && !jsonObj.get("output").isJsonNull()) {
        JobStepOutput.validateJsonElement(jsonObj.get("output"));
      }
      if (!jsonObj.get("targetGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetGroup").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobStepProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobStepProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobStepProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobStepProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<JobStepProperties>() {
           @Override
           public void write(JsonWriter out, JobStepProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobStepProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobStepProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobStepProperties
   * @throws IOException if the JSON string is invalid with respect to JobStepProperties
   */
  public static JobStepProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobStepProperties.class);
  }

  /**
   * Convert an instance of JobStepProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

