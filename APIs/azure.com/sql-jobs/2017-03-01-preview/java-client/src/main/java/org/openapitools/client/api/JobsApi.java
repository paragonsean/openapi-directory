/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Job;
import org.openapitools.client.model.JobListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JobsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public JobsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public JobsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for jobsCreateOrUpdate
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param jobAgentName The name of the job agent. (required)
     * @param jobName The name of the job to get. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The requested job state. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the job. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully created the job. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 ElasticJobsOperationFailed - Elastic jobs management operation failed.   * 400 ElasticJobsOperationFailed - Elastic jobs management operation failed.   * 400 InvalidResourceRequestBody - The resource or resource properties in the request body is empty or invalid.   * 400 InvalidDuration - Invalid duration.   * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsCreateOrUpdateCall(String resourceGroupName, String serverName, String jobAgentName, String jobName, String subscriptionId, String apiVersion, Job parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serverName" + "}", localVarApiClient.escapeString(serverName.toString()))
            .replace("{" + "jobAgentName" + "}", localVarApiClient.escapeString(jobAgentName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsCreateOrUpdateValidateBeforeCall(String resourceGroupName, String serverName, String jobAgentName, String jobName, String subscriptionId, String apiVersion, Job parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'serverName' is set
        if (serverName == null) {
            throw new ApiException("Missing the required parameter 'serverName' when calling jobsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'jobAgentName' is set
        if (jobAgentName == null) {
            throw new ApiException("Missing the required parameter 'jobAgentName' when calling jobsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling jobsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling jobsCreateOrUpdate(Async)");
        }

        return jobsCreateOrUpdateCall(resourceGroupName, serverName, jobAgentName, jobName, subscriptionId, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Creates or updates a job.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param jobAgentName The name of the job agent. (required)
     * @param jobName The name of the job to get. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The requested job state. (required)
     * @return Job
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the job. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully created the job. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 ElasticJobsOperationFailed - Elastic jobs management operation failed.   * 400 ElasticJobsOperationFailed - Elastic jobs management operation failed.   * 400 InvalidResourceRequestBody - The resource or resource properties in the request body is empty or invalid.   * 400 InvalidDuration - Invalid duration.   * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public Job jobsCreateOrUpdate(String resourceGroupName, String serverName, String jobAgentName, String jobName, String subscriptionId, String apiVersion, Job parameters) throws ApiException {
        ApiResponse<Job> localVarResp = jobsCreateOrUpdateWithHttpInfo(resourceGroupName, serverName, jobAgentName, jobName, subscriptionId, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a job.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param jobAgentName The name of the job agent. (required)
     * @param jobName The name of the job to get. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The requested job state. (required)
     * @return ApiResponse&lt;Job&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the job. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully created the job. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 ElasticJobsOperationFailed - Elastic jobs management operation failed.   * 400 ElasticJobsOperationFailed - Elastic jobs management operation failed.   * 400 InvalidResourceRequestBody - The resource or resource properties in the request body is empty or invalid.   * 400 InvalidDuration - Invalid duration.   * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Job> jobsCreateOrUpdateWithHttpInfo(String resourceGroupName, String serverName, String jobAgentName, String jobName, String subscriptionId, String apiVersion, Job parameters) throws ApiException {
        okhttp3.Call localVarCall = jobsCreateOrUpdateValidateBeforeCall(resourceGroupName, serverName, jobAgentName, jobName, subscriptionId, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a job.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param jobAgentName The name of the job agent. (required)
     * @param jobName The name of the job to get. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The requested job state. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the job. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully created the job. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 ElasticJobsOperationFailed - Elastic jobs management operation failed.   * 400 ElasticJobsOperationFailed - Elastic jobs management operation failed.   * 400 InvalidResourceRequestBody - The resource or resource properties in the request body is empty or invalid.   * 400 InvalidDuration - Invalid duration.   * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsCreateOrUpdateAsync(String resourceGroupName, String serverName, String jobAgentName, String jobName, String subscriptionId, String apiVersion, Job parameters, final ApiCallback<Job> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsCreateOrUpdateValidateBeforeCall(resourceGroupName, serverName, jobAgentName, jobName, subscriptionId, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsDelete
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param jobAgentName The name of the job agent. (required)
     * @param jobName The name of the job to delete. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the job. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified job does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 ElasticJobsOperationFailed - Elastic jobs management operation failed.   * 400 ElasticJobsOperationFailed - Elastic jobs management operation failed.   * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsDeleteCall(String resourceGroupName, String serverName, String jobAgentName, String jobName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serverName" + "}", localVarApiClient.escapeString(serverName.toString()))
            .replace("{" + "jobAgentName" + "}", localVarApiClient.escapeString(jobAgentName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsDeleteValidateBeforeCall(String resourceGroupName, String serverName, String jobAgentName, String jobName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobsDelete(Async)");
        }

        // verify the required parameter 'serverName' is set
        if (serverName == null) {
            throw new ApiException("Missing the required parameter 'serverName' when calling jobsDelete(Async)");
        }

        // verify the required parameter 'jobAgentName' is set
        if (jobAgentName == null) {
            throw new ApiException("Missing the required parameter 'jobAgentName' when calling jobsDelete(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling jobsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobsDelete(Async)");
        }

        return jobsDeleteCall(resourceGroupName, serverName, jobAgentName, jobName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Deletes a job.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param jobAgentName The name of the job agent. (required)
     * @param jobName The name of the job to delete. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the job. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified job does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 ElasticJobsOperationFailed - Elastic jobs management operation failed.   * 400 ElasticJobsOperationFailed - Elastic jobs management operation failed.   * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found. </td><td>  -  </td></tr>
     </table>
     */
    public void jobsDelete(String resourceGroupName, String serverName, String jobAgentName, String jobName, String subscriptionId, String apiVersion) throws ApiException {
        jobsDeleteWithHttpInfo(resourceGroupName, serverName, jobAgentName, jobName, subscriptionId, apiVersion);
    }

    /**
     * 
     * Deletes a job.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param jobAgentName The name of the job agent. (required)
     * @param jobName The name of the job to delete. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the job. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified job does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 ElasticJobsOperationFailed - Elastic jobs management operation failed.   * 400 ElasticJobsOperationFailed - Elastic jobs management operation failed.   * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> jobsDeleteWithHttpInfo(String resourceGroupName, String serverName, String jobAgentName, String jobName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = jobsDeleteValidateBeforeCall(resourceGroupName, serverName, jobAgentName, jobName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a job.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param jobAgentName The name of the job agent. (required)
     * @param jobName The name of the job to delete. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the job. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified job does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 ElasticJobsOperationFailed - Elastic jobs management operation failed.   * 400 ElasticJobsOperationFailed - Elastic jobs management operation failed.   * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsDeleteAsync(String resourceGroupName, String serverName, String jobAgentName, String jobName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsDeleteValidateBeforeCall(resourceGroupName, serverName, jobAgentName, jobName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsGet
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param jobAgentName The name of the job agent. (required)
     * @param jobName The name of the job to get. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the job. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsGetCall(String resourceGroupName, String serverName, String jobAgentName, String jobName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serverName" + "}", localVarApiClient.escapeString(serverName.toString()))
            .replace("{" + "jobAgentName" + "}", localVarApiClient.escapeString(jobAgentName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsGetValidateBeforeCall(String resourceGroupName, String serverName, String jobAgentName, String jobName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobsGet(Async)");
        }

        // verify the required parameter 'serverName' is set
        if (serverName == null) {
            throw new ApiException("Missing the required parameter 'serverName' when calling jobsGet(Async)");
        }

        // verify the required parameter 'jobAgentName' is set
        if (jobAgentName == null) {
            throw new ApiException("Missing the required parameter 'jobAgentName' when calling jobsGet(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling jobsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobsGet(Async)");
        }

        return jobsGetCall(resourceGroupName, serverName, jobAgentName, jobName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Gets a job.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param jobAgentName The name of the job agent. (required)
     * @param jobName The name of the job to get. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return Job
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the job. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found. </td><td>  -  </td></tr>
     </table>
     */
    public Job jobsGet(String resourceGroupName, String serverName, String jobAgentName, String jobName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Job> localVarResp = jobsGetWithHttpInfo(resourceGroupName, serverName, jobAgentName, jobName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a job.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param jobAgentName The name of the job agent. (required)
     * @param jobName The name of the job to get. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ApiResponse&lt;Job&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the job. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Job> jobsGetWithHttpInfo(String resourceGroupName, String serverName, String jobAgentName, String jobName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = jobsGetValidateBeforeCall(resourceGroupName, serverName, jobAgentName, jobName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a job.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param jobAgentName The name of the job agent. (required)
     * @param jobName The name of the job to get. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the job. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsGetAsync(String resourceGroupName, String serverName, String jobAgentName, String jobName, String subscriptionId, String apiVersion, final ApiCallback<Job> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsGetValidateBeforeCall(resourceGroupName, serverName, jobAgentName, jobName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsListByAgent
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param jobAgentName The name of the job agent. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of jobs. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsListByAgentCall(String resourceGroupName, String serverName, String jobAgentName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serverName" + "}", localVarApiClient.escapeString(serverName.toString()))
            .replace("{" + "jobAgentName" + "}", localVarApiClient.escapeString(jobAgentName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsListByAgentValidateBeforeCall(String resourceGroupName, String serverName, String jobAgentName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobsListByAgent(Async)");
        }

        // verify the required parameter 'serverName' is set
        if (serverName == null) {
            throw new ApiException("Missing the required parameter 'serverName' when calling jobsListByAgent(Async)");
        }

        // verify the required parameter 'jobAgentName' is set
        if (jobAgentName == null) {
            throw new ApiException("Missing the required parameter 'jobAgentName' when calling jobsListByAgent(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobsListByAgent(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobsListByAgent(Async)");
        }

        return jobsListByAgentCall(resourceGroupName, serverName, jobAgentName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Gets a list of jobs.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param jobAgentName The name of the job agent. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return JobListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of jobs. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public JobListResult jobsListByAgent(String resourceGroupName, String serverName, String jobAgentName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<JobListResult> localVarResp = jobsListByAgentWithHttpInfo(resourceGroupName, serverName, jobAgentName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a list of jobs.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param jobAgentName The name of the job agent. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ApiResponse&lt;JobListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of jobs. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobListResult> jobsListByAgentWithHttpInfo(String resourceGroupName, String serverName, String jobAgentName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = jobsListByAgentValidateBeforeCall(resourceGroupName, serverName, jobAgentName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<JobListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a list of jobs.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param jobAgentName The name of the job agent. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of jobs. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsListByAgentAsync(String resourceGroupName, String serverName, String jobAgentName, String subscriptionId, String apiVersion, final ApiCallback<JobListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsListByAgentValidateBeforeCall(resourceGroupName, serverName, jobAgentName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<JobListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
