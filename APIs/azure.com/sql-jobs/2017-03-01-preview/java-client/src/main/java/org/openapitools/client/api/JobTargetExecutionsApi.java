/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.JobExecution;
import org.openapitools.client.model.JobExecutionListResult;
import java.time.OffsetDateTime;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JobTargetExecutionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public JobTargetExecutionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public JobTargetExecutionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for jobTargetExecutionsGet
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param jobAgentName The name of the job agent. (required)
     * @param jobName The name of the job to get. (required)
     * @param jobExecutionId The unique id of the job execution (required)
     * @param stepName The name of the step. (required)
     * @param targetId The target id. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the target execution. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.   * 404 ResourceNotFound - The requested resource was not found.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobTargetExecutionsGetCall(String resourceGroupName, String serverName, String jobAgentName, String jobName, UUID jobExecutionId, String stepName, UUID targetId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions/{jobExecutionId}/steps/{stepName}/targets/{targetId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serverName" + "}", localVarApiClient.escapeString(serverName.toString()))
            .replace("{" + "jobAgentName" + "}", localVarApiClient.escapeString(jobAgentName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()))
            .replace("{" + "jobExecutionId" + "}", localVarApiClient.escapeString(jobExecutionId.toString()))
            .replace("{" + "stepName" + "}", localVarApiClient.escapeString(stepName.toString()))
            .replace("{" + "targetId" + "}", localVarApiClient.escapeString(targetId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobTargetExecutionsGetValidateBeforeCall(String resourceGroupName, String serverName, String jobAgentName, String jobName, UUID jobExecutionId, String stepName, UUID targetId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobTargetExecutionsGet(Async)");
        }

        // verify the required parameter 'serverName' is set
        if (serverName == null) {
            throw new ApiException("Missing the required parameter 'serverName' when calling jobTargetExecutionsGet(Async)");
        }

        // verify the required parameter 'jobAgentName' is set
        if (jobAgentName == null) {
            throw new ApiException("Missing the required parameter 'jobAgentName' when calling jobTargetExecutionsGet(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling jobTargetExecutionsGet(Async)");
        }

        // verify the required parameter 'jobExecutionId' is set
        if (jobExecutionId == null) {
            throw new ApiException("Missing the required parameter 'jobExecutionId' when calling jobTargetExecutionsGet(Async)");
        }

        // verify the required parameter 'stepName' is set
        if (stepName == null) {
            throw new ApiException("Missing the required parameter 'stepName' when calling jobTargetExecutionsGet(Async)");
        }

        // verify the required parameter 'targetId' is set
        if (targetId == null) {
            throw new ApiException("Missing the required parameter 'targetId' when calling jobTargetExecutionsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobTargetExecutionsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobTargetExecutionsGet(Async)");
        }

        return jobTargetExecutionsGetCall(resourceGroupName, serverName, jobAgentName, jobName, jobExecutionId, stepName, targetId, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Gets a target execution.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param jobAgentName The name of the job agent. (required)
     * @param jobName The name of the job to get. (required)
     * @param jobExecutionId The unique id of the job execution (required)
     * @param stepName The name of the step. (required)
     * @param targetId The target id. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return JobExecution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the target execution. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.   * 404 ResourceNotFound - The requested resource was not found.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found. </td><td>  -  </td></tr>
     </table>
     */
    public JobExecution jobTargetExecutionsGet(String resourceGroupName, String serverName, String jobAgentName, String jobName, UUID jobExecutionId, String stepName, UUID targetId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<JobExecution> localVarResp = jobTargetExecutionsGetWithHttpInfo(resourceGroupName, serverName, jobAgentName, jobName, jobExecutionId, stepName, targetId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a target execution.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param jobAgentName The name of the job agent. (required)
     * @param jobName The name of the job to get. (required)
     * @param jobExecutionId The unique id of the job execution (required)
     * @param stepName The name of the step. (required)
     * @param targetId The target id. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ApiResponse&lt;JobExecution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the target execution. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.   * 404 ResourceNotFound - The requested resource was not found.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobExecution> jobTargetExecutionsGetWithHttpInfo(String resourceGroupName, String serverName, String jobAgentName, String jobName, UUID jobExecutionId, String stepName, UUID targetId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = jobTargetExecutionsGetValidateBeforeCall(resourceGroupName, serverName, jobAgentName, jobName, jobExecutionId, stepName, targetId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<JobExecution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a target execution.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param jobAgentName The name of the job agent. (required)
     * @param jobName The name of the job to get. (required)
     * @param jobExecutionId The unique id of the job execution (required)
     * @param stepName The name of the step. (required)
     * @param targetId The target id. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the target execution. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.   * 404 ResourceNotFound - The requested resource was not found.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobTargetExecutionsGetAsync(String resourceGroupName, String serverName, String jobAgentName, String jobName, UUID jobExecutionId, String stepName, UUID targetId, String subscriptionId, String apiVersion, final ApiCallback<JobExecution> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobTargetExecutionsGetValidateBeforeCall(resourceGroupName, serverName, jobAgentName, jobName, jobExecutionId, stepName, targetId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<JobExecution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobTargetExecutionsListByJobExecution
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param jobAgentName The name of the job agent. (required)
     * @param jobName The name of the job to get. (required)
     * @param jobExecutionId The id of the job execution (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param createTimeMin If specified, only job executions created at or after the specified time are included. (optional)
     * @param createTimeMax If specified, only job executions created before the specified time are included. (optional)
     * @param endTimeMin If specified, only job executions completed at or after the specified time are included. (optional)
     * @param endTimeMax If specified, only job executions completed before the specified time are included. (optional)
     * @param isActive If specified, only active or only completed job executions are included. (optional)
     * @param $skip The number of elements in the collection to skip. (optional)
     * @param $top The number of elements to return from the collection. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the target executions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.   * 404 ResourceNotFound - The requested resource was not found.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobTargetExecutionsListByJobExecutionCall(String resourceGroupName, String serverName, String jobAgentName, String jobName, UUID jobExecutionId, String subscriptionId, String apiVersion, OffsetDateTime createTimeMin, OffsetDateTime createTimeMax, OffsetDateTime endTimeMin, OffsetDateTime endTimeMax, Boolean isActive, Integer $skip, Integer $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions/{jobExecutionId}/targets"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serverName" + "}", localVarApiClient.escapeString(serverName.toString()))
            .replace("{" + "jobAgentName" + "}", localVarApiClient.escapeString(jobAgentName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()))
            .replace("{" + "jobExecutionId" + "}", localVarApiClient.escapeString(jobExecutionId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (createTimeMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createTimeMin", createTimeMin));
        }

        if (createTimeMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createTimeMax", createTimeMax));
        }

        if (endTimeMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTimeMin", endTimeMin));
        }

        if (endTimeMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTimeMax", endTimeMax));
        }

        if (isActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isActive", isActive));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobTargetExecutionsListByJobExecutionValidateBeforeCall(String resourceGroupName, String serverName, String jobAgentName, String jobName, UUID jobExecutionId, String subscriptionId, String apiVersion, OffsetDateTime createTimeMin, OffsetDateTime createTimeMax, OffsetDateTime endTimeMin, OffsetDateTime endTimeMax, Boolean isActive, Integer $skip, Integer $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobTargetExecutionsListByJobExecution(Async)");
        }

        // verify the required parameter 'serverName' is set
        if (serverName == null) {
            throw new ApiException("Missing the required parameter 'serverName' when calling jobTargetExecutionsListByJobExecution(Async)");
        }

        // verify the required parameter 'jobAgentName' is set
        if (jobAgentName == null) {
            throw new ApiException("Missing the required parameter 'jobAgentName' when calling jobTargetExecutionsListByJobExecution(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling jobTargetExecutionsListByJobExecution(Async)");
        }

        // verify the required parameter 'jobExecutionId' is set
        if (jobExecutionId == null) {
            throw new ApiException("Missing the required parameter 'jobExecutionId' when calling jobTargetExecutionsListByJobExecution(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobTargetExecutionsListByJobExecution(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobTargetExecutionsListByJobExecution(Async)");
        }

        return jobTargetExecutionsListByJobExecutionCall(resourceGroupName, serverName, jobAgentName, jobName, jobExecutionId, subscriptionId, apiVersion, createTimeMin, createTimeMax, endTimeMin, endTimeMax, isActive, $skip, $top, _callback);

    }

    /**
     * 
     * Lists target executions for all steps of a job execution.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param jobAgentName The name of the job agent. (required)
     * @param jobName The name of the job to get. (required)
     * @param jobExecutionId The id of the job execution (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param createTimeMin If specified, only job executions created at or after the specified time are included. (optional)
     * @param createTimeMax If specified, only job executions created before the specified time are included. (optional)
     * @param endTimeMin If specified, only job executions completed at or after the specified time are included. (optional)
     * @param endTimeMax If specified, only job executions completed before the specified time are included. (optional)
     * @param isActive If specified, only active or only completed job executions are included. (optional)
     * @param $skip The number of elements in the collection to skip. (optional)
     * @param $top The number of elements to return from the collection. (optional)
     * @return JobExecutionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the target executions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.   * 404 ResourceNotFound - The requested resource was not found.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public JobExecutionListResult jobTargetExecutionsListByJobExecution(String resourceGroupName, String serverName, String jobAgentName, String jobName, UUID jobExecutionId, String subscriptionId, String apiVersion, OffsetDateTime createTimeMin, OffsetDateTime createTimeMax, OffsetDateTime endTimeMin, OffsetDateTime endTimeMax, Boolean isActive, Integer $skip, Integer $top) throws ApiException {
        ApiResponse<JobExecutionListResult> localVarResp = jobTargetExecutionsListByJobExecutionWithHttpInfo(resourceGroupName, serverName, jobAgentName, jobName, jobExecutionId, subscriptionId, apiVersion, createTimeMin, createTimeMax, endTimeMin, endTimeMax, isActive, $skip, $top);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists target executions for all steps of a job execution.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param jobAgentName The name of the job agent. (required)
     * @param jobName The name of the job to get. (required)
     * @param jobExecutionId The id of the job execution (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param createTimeMin If specified, only job executions created at or after the specified time are included. (optional)
     * @param createTimeMax If specified, only job executions created before the specified time are included. (optional)
     * @param endTimeMin If specified, only job executions completed at or after the specified time are included. (optional)
     * @param endTimeMax If specified, only job executions completed before the specified time are included. (optional)
     * @param isActive If specified, only active or only completed job executions are included. (optional)
     * @param $skip The number of elements in the collection to skip. (optional)
     * @param $top The number of elements to return from the collection. (optional)
     * @return ApiResponse&lt;JobExecutionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the target executions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.   * 404 ResourceNotFound - The requested resource was not found.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobExecutionListResult> jobTargetExecutionsListByJobExecutionWithHttpInfo(String resourceGroupName, String serverName, String jobAgentName, String jobName, UUID jobExecutionId, String subscriptionId, String apiVersion, OffsetDateTime createTimeMin, OffsetDateTime createTimeMax, OffsetDateTime endTimeMin, OffsetDateTime endTimeMax, Boolean isActive, Integer $skip, Integer $top) throws ApiException {
        okhttp3.Call localVarCall = jobTargetExecutionsListByJobExecutionValidateBeforeCall(resourceGroupName, serverName, jobAgentName, jobName, jobExecutionId, subscriptionId, apiVersion, createTimeMin, createTimeMax, endTimeMin, endTimeMax, isActive, $skip, $top, null);
        Type localVarReturnType = new TypeToken<JobExecutionListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists target executions for all steps of a job execution.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param jobAgentName The name of the job agent. (required)
     * @param jobName The name of the job to get. (required)
     * @param jobExecutionId The id of the job execution (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param createTimeMin If specified, only job executions created at or after the specified time are included. (optional)
     * @param createTimeMax If specified, only job executions created before the specified time are included. (optional)
     * @param endTimeMin If specified, only job executions completed at or after the specified time are included. (optional)
     * @param endTimeMax If specified, only job executions completed before the specified time are included. (optional)
     * @param isActive If specified, only active or only completed job executions are included. (optional)
     * @param $skip The number of elements in the collection to skip. (optional)
     * @param $top The number of elements to return from the collection. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the target executions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.   * 404 ResourceNotFound - The requested resource was not found.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobTargetExecutionsListByJobExecutionAsync(String resourceGroupName, String serverName, String jobAgentName, String jobName, UUID jobExecutionId, String subscriptionId, String apiVersion, OffsetDateTime createTimeMin, OffsetDateTime createTimeMax, OffsetDateTime endTimeMin, OffsetDateTime endTimeMax, Boolean isActive, Integer $skip, Integer $top, final ApiCallback<JobExecutionListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobTargetExecutionsListByJobExecutionValidateBeforeCall(resourceGroupName, serverName, jobAgentName, jobName, jobExecutionId, subscriptionId, apiVersion, createTimeMin, createTimeMax, endTimeMin, endTimeMax, isActive, $skip, $top, _callback);
        Type localVarReturnType = new TypeToken<JobExecutionListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobTargetExecutionsListByStep
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param jobAgentName The name of the job agent. (required)
     * @param jobName The name of the job to get. (required)
     * @param jobExecutionId The id of the job execution (required)
     * @param stepName The name of the step. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param createTimeMin If specified, only job executions created at or after the specified time are included. (optional)
     * @param createTimeMax If specified, only job executions created before the specified time are included. (optional)
     * @param endTimeMin If specified, only job executions completed at or after the specified time are included. (optional)
     * @param endTimeMax If specified, only job executions completed before the specified time are included. (optional)
     * @param isActive If specified, only active or only completed job executions are included. (optional)
     * @param $skip The number of elements in the collection to skip. (optional)
     * @param $top The number of elements to return from the collection. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the target executions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.   * 404 ResourceNotFound - The requested resource was not found.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobTargetExecutionsListByStepCall(String resourceGroupName, String serverName, String jobAgentName, String jobName, UUID jobExecutionId, String stepName, String subscriptionId, String apiVersion, OffsetDateTime createTimeMin, OffsetDateTime createTimeMax, OffsetDateTime endTimeMin, OffsetDateTime endTimeMax, Boolean isActive, Integer $skip, Integer $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions/{jobExecutionId}/steps/{stepName}/targets"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serverName" + "}", localVarApiClient.escapeString(serverName.toString()))
            .replace("{" + "jobAgentName" + "}", localVarApiClient.escapeString(jobAgentName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()))
            .replace("{" + "jobExecutionId" + "}", localVarApiClient.escapeString(jobExecutionId.toString()))
            .replace("{" + "stepName" + "}", localVarApiClient.escapeString(stepName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (createTimeMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createTimeMin", createTimeMin));
        }

        if (createTimeMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createTimeMax", createTimeMax));
        }

        if (endTimeMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTimeMin", endTimeMin));
        }

        if (endTimeMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTimeMax", endTimeMax));
        }

        if (isActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isActive", isActive));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobTargetExecutionsListByStepValidateBeforeCall(String resourceGroupName, String serverName, String jobAgentName, String jobName, UUID jobExecutionId, String stepName, String subscriptionId, String apiVersion, OffsetDateTime createTimeMin, OffsetDateTime createTimeMax, OffsetDateTime endTimeMin, OffsetDateTime endTimeMax, Boolean isActive, Integer $skip, Integer $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobTargetExecutionsListByStep(Async)");
        }

        // verify the required parameter 'serverName' is set
        if (serverName == null) {
            throw new ApiException("Missing the required parameter 'serverName' when calling jobTargetExecutionsListByStep(Async)");
        }

        // verify the required parameter 'jobAgentName' is set
        if (jobAgentName == null) {
            throw new ApiException("Missing the required parameter 'jobAgentName' when calling jobTargetExecutionsListByStep(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling jobTargetExecutionsListByStep(Async)");
        }

        // verify the required parameter 'jobExecutionId' is set
        if (jobExecutionId == null) {
            throw new ApiException("Missing the required parameter 'jobExecutionId' when calling jobTargetExecutionsListByStep(Async)");
        }

        // verify the required parameter 'stepName' is set
        if (stepName == null) {
            throw new ApiException("Missing the required parameter 'stepName' when calling jobTargetExecutionsListByStep(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobTargetExecutionsListByStep(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobTargetExecutionsListByStep(Async)");
        }

        return jobTargetExecutionsListByStepCall(resourceGroupName, serverName, jobAgentName, jobName, jobExecutionId, stepName, subscriptionId, apiVersion, createTimeMin, createTimeMax, endTimeMin, endTimeMax, isActive, $skip, $top, _callback);

    }

    /**
     * 
     * Lists the target executions of a job step execution.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param jobAgentName The name of the job agent. (required)
     * @param jobName The name of the job to get. (required)
     * @param jobExecutionId The id of the job execution (required)
     * @param stepName The name of the step. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param createTimeMin If specified, only job executions created at or after the specified time are included. (optional)
     * @param createTimeMax If specified, only job executions created before the specified time are included. (optional)
     * @param endTimeMin If specified, only job executions completed at or after the specified time are included. (optional)
     * @param endTimeMax If specified, only job executions completed before the specified time are included. (optional)
     * @param isActive If specified, only active or only completed job executions are included. (optional)
     * @param $skip The number of elements in the collection to skip. (optional)
     * @param $top The number of elements to return from the collection. (optional)
     * @return JobExecutionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the target executions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.   * 404 ResourceNotFound - The requested resource was not found.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public JobExecutionListResult jobTargetExecutionsListByStep(String resourceGroupName, String serverName, String jobAgentName, String jobName, UUID jobExecutionId, String stepName, String subscriptionId, String apiVersion, OffsetDateTime createTimeMin, OffsetDateTime createTimeMax, OffsetDateTime endTimeMin, OffsetDateTime endTimeMax, Boolean isActive, Integer $skip, Integer $top) throws ApiException {
        ApiResponse<JobExecutionListResult> localVarResp = jobTargetExecutionsListByStepWithHttpInfo(resourceGroupName, serverName, jobAgentName, jobName, jobExecutionId, stepName, subscriptionId, apiVersion, createTimeMin, createTimeMax, endTimeMin, endTimeMax, isActive, $skip, $top);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the target executions of a job step execution.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param jobAgentName The name of the job agent. (required)
     * @param jobName The name of the job to get. (required)
     * @param jobExecutionId The id of the job execution (required)
     * @param stepName The name of the step. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param createTimeMin If specified, only job executions created at or after the specified time are included. (optional)
     * @param createTimeMax If specified, only job executions created before the specified time are included. (optional)
     * @param endTimeMin If specified, only job executions completed at or after the specified time are included. (optional)
     * @param endTimeMax If specified, only job executions completed before the specified time are included. (optional)
     * @param isActive If specified, only active or only completed job executions are included. (optional)
     * @param $skip The number of elements in the collection to skip. (optional)
     * @param $top The number of elements to return from the collection. (optional)
     * @return ApiResponse&lt;JobExecutionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the target executions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.   * 404 ResourceNotFound - The requested resource was not found.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobExecutionListResult> jobTargetExecutionsListByStepWithHttpInfo(String resourceGroupName, String serverName, String jobAgentName, String jobName, UUID jobExecutionId, String stepName, String subscriptionId, String apiVersion, OffsetDateTime createTimeMin, OffsetDateTime createTimeMax, OffsetDateTime endTimeMin, OffsetDateTime endTimeMax, Boolean isActive, Integer $skip, Integer $top) throws ApiException {
        okhttp3.Call localVarCall = jobTargetExecutionsListByStepValidateBeforeCall(resourceGroupName, serverName, jobAgentName, jobName, jobExecutionId, stepName, subscriptionId, apiVersion, createTimeMin, createTimeMax, endTimeMin, endTimeMax, isActive, $skip, $top, null);
        Type localVarReturnType = new TypeToken<JobExecutionListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the target executions of a job step execution.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param jobAgentName The name of the job agent. (required)
     * @param jobName The name of the job to get. (required)
     * @param jobExecutionId The id of the job execution (required)
     * @param stepName The name of the step. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param createTimeMin If specified, only job executions created at or after the specified time are included. (optional)
     * @param createTimeMax If specified, only job executions created before the specified time are included. (optional)
     * @param endTimeMin If specified, only job executions completed at or after the specified time are included. (optional)
     * @param endTimeMax If specified, only job executions completed before the specified time are included. (optional)
     * @param isActive If specified, only active or only completed job executions are included. (optional)
     * @param $skip The number of elements in the collection to skip. (optional)
     * @param $top The number of elements to return from the collection. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the target executions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.   * 404 ResourceNotFound - The requested resource was not found.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobTargetExecutionsListByStepAsync(String resourceGroupName, String serverName, String jobAgentName, String jobName, UUID jobExecutionId, String stepName, String subscriptionId, String apiVersion, OffsetDateTime createTimeMin, OffsetDateTime createTimeMax, OffsetDateTime endTimeMin, OffsetDateTime endTimeMax, Boolean isActive, Integer $skip, Integer $top, final ApiCallback<JobExecutionListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobTargetExecutionsListByStepValidateBeforeCall(resourceGroupName, serverName, jobAgentName, jobName, jobExecutionId, stepName, subscriptionId, apiVersion, createTimeMin, createTimeMax, endTimeMin, endTimeMax, isActive, $skip, $top, _callback);
        Type localVarReturnType = new TypeToken<JobExecutionListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
