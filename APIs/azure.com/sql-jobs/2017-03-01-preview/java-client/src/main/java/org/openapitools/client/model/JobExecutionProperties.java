/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.JobExecutionTarget;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties for an Azure SQL Database Elastic job execution.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:13:11.122054-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobExecutionProperties {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private OffsetDateTime createTime;

  public static final String SERIALIZED_NAME_CURRENT_ATTEMPT_START_TIME = "currentAttemptStartTime";
  @SerializedName(SERIALIZED_NAME_CURRENT_ATTEMPT_START_TIME)
  private OffsetDateTime currentAttemptStartTime;

  public static final String SERIALIZED_NAME_CURRENT_ATTEMPTS = "currentAttempts";
  @SerializedName(SERIALIZED_NAME_CURRENT_ATTEMPTS)
  private Integer currentAttempts;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_JOB_EXECUTION_ID = "jobExecutionId";
  @SerializedName(SERIALIZED_NAME_JOB_EXECUTION_ID)
  private UUID jobExecutionId;

  public static final String SERIALIZED_NAME_JOB_VERSION = "jobVersion";
  @SerializedName(SERIALIZED_NAME_JOB_VERSION)
  private Integer jobVersion;

  public static final String SERIALIZED_NAME_LAST_MESSAGE = "lastMessage";
  @SerializedName(SERIALIZED_NAME_LAST_MESSAGE)
  private String lastMessage;

  /**
   * The detailed state of the job execution.
   */
  @JsonAdapter(LifecycleEnum.Adapter.class)
  public enum LifecycleEnum {
    CREATED("Created"),
    
    IN_PROGRESS("InProgress"),
    
    WAITING_FOR_CHILD_JOB_EXECUTIONS("WaitingForChildJobExecutions"),
    
    WAITING_FOR_RETRY("WaitingForRetry"),
    
    SUCCEEDED("Succeeded"),
    
    SUCCEEDED_WITH_SKIPPED("SucceededWithSkipped"),
    
    FAILED("Failed"),
    
    TIMED_OUT("TimedOut"),
    
    CANCELED("Canceled"),
    
    SKIPPED("Skipped");

    private String value;

    LifecycleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LifecycleEnum fromValue(String value) {
      for (LifecycleEnum b : LifecycleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LifecycleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LifecycleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LifecycleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LifecycleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LifecycleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LIFECYCLE = "lifecycle";
  @SerializedName(SERIALIZED_NAME_LIFECYCLE)
  private LifecycleEnum lifecycle;

  /**
   * The ARM provisioning state of the job execution.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    CREATED("Created"),
    
    IN_PROGRESS("InProgress"),
    
    SUCCEEDED("Succeeded"),
    
    FAILED("Failed"),
    
    CANCELED("Canceled");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STEP_ID = "stepId";
  @SerializedName(SERIALIZED_NAME_STEP_ID)
  private Integer stepId;

  public static final String SERIALIZED_NAME_STEP_NAME = "stepName";
  @SerializedName(SERIALIZED_NAME_STEP_NAME)
  private String stepName;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private JobExecutionTarget target;

  public JobExecutionProperties() {
  }

  public JobExecutionProperties(
     OffsetDateTime createTime, 
     OffsetDateTime currentAttemptStartTime, 
     OffsetDateTime endTime, 
     UUID jobExecutionId, 
     Integer jobVersion, 
     String lastMessage, 
     LifecycleEnum lifecycle, 
     ProvisioningStateEnum provisioningState, 
     OffsetDateTime startTime, 
     Integer stepId, 
     String stepName
  ) {
    this();
    this.createTime = createTime;
    this.currentAttemptStartTime = currentAttemptStartTime;
    this.endTime = endTime;
    this.jobExecutionId = jobExecutionId;
    this.jobVersion = jobVersion;
    this.lastMessage = lastMessage;
    this.lifecycle = lifecycle;
    this.provisioningState = provisioningState;
    this.startTime = startTime;
    this.stepId = stepId;
    this.stepName = stepName;
  }

  /**
   * The time that the job execution was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreateTime() {
    return createTime;
  }



  /**
   * Start time of the current attempt.
   * @return currentAttemptStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCurrentAttemptStartTime() {
    return currentAttemptStartTime;
  }



  public JobExecutionProperties currentAttempts(Integer currentAttempts) {
    this.currentAttempts = currentAttempts;
    return this;
  }

  /**
   * Number of times the job execution has been attempted.
   * @return currentAttempts
   */
  @javax.annotation.Nullable
  public Integer getCurrentAttempts() {
    return currentAttempts;
  }

  public void setCurrentAttempts(Integer currentAttempts) {
    this.currentAttempts = currentAttempts;
  }


  /**
   * The time that the job execution completed.
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }



  /**
   * The unique identifier of the job execution.
   * @return jobExecutionId
   */
  @javax.annotation.Nullable
  public UUID getJobExecutionId() {
    return jobExecutionId;
  }



  /**
   * The job version number.
   * @return jobVersion
   */
  @javax.annotation.Nullable
  public Integer getJobVersion() {
    return jobVersion;
  }



  /**
   * The last status or error message.
   * @return lastMessage
   */
  @javax.annotation.Nullable
  public String getLastMessage() {
    return lastMessage;
  }



  /**
   * The detailed state of the job execution.
   * @return lifecycle
   */
  @javax.annotation.Nullable
  public LifecycleEnum getLifecycle() {
    return lifecycle;
  }



  /**
   * The ARM provisioning state of the job execution.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  /**
   * The time that the job execution started.
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }



  /**
   * The job step id.
   * @return stepId
   */
  @javax.annotation.Nullable
  public Integer getStepId() {
    return stepId;
  }



  /**
   * The job step name.
   * @return stepName
   */
  @javax.annotation.Nullable
  public String getStepName() {
    return stepName;
  }



  public JobExecutionProperties target(JobExecutionTarget target) {
    this.target = target;
    return this;
  }

  /**
   * Get target
   * @return target
   */
  @javax.annotation.Nullable
  public JobExecutionTarget getTarget() {
    return target;
  }

  public void setTarget(JobExecutionTarget target) {
    this.target = target;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobExecutionProperties jobExecutionProperties = (JobExecutionProperties) o;
    return Objects.equals(this.createTime, jobExecutionProperties.createTime) &&
        Objects.equals(this.currentAttemptStartTime, jobExecutionProperties.currentAttemptStartTime) &&
        Objects.equals(this.currentAttempts, jobExecutionProperties.currentAttempts) &&
        Objects.equals(this.endTime, jobExecutionProperties.endTime) &&
        Objects.equals(this.jobExecutionId, jobExecutionProperties.jobExecutionId) &&
        Objects.equals(this.jobVersion, jobExecutionProperties.jobVersion) &&
        Objects.equals(this.lastMessage, jobExecutionProperties.lastMessage) &&
        Objects.equals(this.lifecycle, jobExecutionProperties.lifecycle) &&
        Objects.equals(this.provisioningState, jobExecutionProperties.provisioningState) &&
        Objects.equals(this.startTime, jobExecutionProperties.startTime) &&
        Objects.equals(this.stepId, jobExecutionProperties.stepId) &&
        Objects.equals(this.stepName, jobExecutionProperties.stepName) &&
        Objects.equals(this.target, jobExecutionProperties.target);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, currentAttemptStartTime, currentAttempts, endTime, jobExecutionId, jobVersion, lastMessage, lifecycle, provisioningState, startTime, stepId, stepName, target);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobExecutionProperties {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    currentAttemptStartTime: ").append(toIndentedString(currentAttemptStartTime)).append("\n");
    sb.append("    currentAttempts: ").append(toIndentedString(currentAttempts)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    jobExecutionId: ").append(toIndentedString(jobExecutionId)).append("\n");
    sb.append("    jobVersion: ").append(toIndentedString(jobVersion)).append("\n");
    sb.append("    lastMessage: ").append(toIndentedString(lastMessage)).append("\n");
    sb.append("    lifecycle: ").append(toIndentedString(lifecycle)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    stepId: ").append(toIndentedString(stepId)).append("\n");
    sb.append("    stepName: ").append(toIndentedString(stepName)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("currentAttemptStartTime");
    openapiFields.add("currentAttempts");
    openapiFields.add("endTime");
    openapiFields.add("jobExecutionId");
    openapiFields.add("jobVersion");
    openapiFields.add("lastMessage");
    openapiFields.add("lifecycle");
    openapiFields.add("provisioningState");
    openapiFields.add("startTime");
    openapiFields.add("stepId");
    openapiFields.add("stepName");
    openapiFields.add("target");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobExecutionProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobExecutionProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobExecutionProperties is not found in the empty JSON string", JobExecutionProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobExecutionProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobExecutionProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("jobExecutionId") != null && !jsonObj.get("jobExecutionId").isJsonNull()) && !jsonObj.get("jobExecutionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobExecutionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobExecutionId").toString()));
      }
      if ((jsonObj.get("lastMessage") != null && !jsonObj.get("lastMessage").isJsonNull()) && !jsonObj.get("lastMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastMessage").toString()));
      }
      if ((jsonObj.get("lifecycle") != null && !jsonObj.get("lifecycle").isJsonNull()) && !jsonObj.get("lifecycle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lifecycle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lifecycle").toString()));
      }
      // validate the optional field `lifecycle`
      if (jsonObj.get("lifecycle") != null && !jsonObj.get("lifecycle").isJsonNull()) {
        LifecycleEnum.validateJsonElement(jsonObj.get("lifecycle"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      if ((jsonObj.get("stepName") != null && !jsonObj.get("stepName").isJsonNull()) && !jsonObj.get("stepName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stepName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stepName").toString()));
      }
      // validate the optional field `target`
      if (jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) {
        JobExecutionTarget.validateJsonElement(jsonObj.get("target"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobExecutionProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobExecutionProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobExecutionProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobExecutionProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<JobExecutionProperties>() {
           @Override
           public void write(JsonWriter out, JobExecutionProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobExecutionProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobExecutionProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobExecutionProperties
   * @throws IOException if the JSON string is invalid with respect to JobExecutionProperties
   */
  public static JobExecutionProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobExecutionProperties.class);
  }

  /**
   * Convert an instance of JobExecutionProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

