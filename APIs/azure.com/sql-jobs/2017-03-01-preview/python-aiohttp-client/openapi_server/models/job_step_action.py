# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JobStepAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source: str='Inline', type: str='TSql', value: str=None):
        """JobStepAction - a model defined in OpenAPI

        :param source: The source of this JobStepAction.
        :param type: The type of this JobStepAction.
        :param value: The value of this JobStepAction.
        """
        self.openapi_types = {
            'source': str,
            'type': str,
            'value': str
        }

        self.attribute_map = {
            'source': 'source',
            'type': 'type',
            'value': 'value'
        }

        self._source = source
        self._type = type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobStepAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobStepAction of this JobStepAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source(self):
        """Gets the source of this JobStepAction.

        The source of the action to execute.

        :return: The source of this JobStepAction.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this JobStepAction.

        The source of the action to execute.

        :param source: The source of this JobStepAction.
        :type source: str
        """
        allowed_values = ["Inline"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def type(self):
        """Gets the type of this JobStepAction.

        Type of action being executed by the job step.

        :return: The type of this JobStepAction.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this JobStepAction.

        Type of action being executed by the job step.

        :param type: The type of this JobStepAction.
        :type type: str
        """
        allowed_values = ["TSql"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self):
        """Gets the value of this JobStepAction.

        The action value, for example the text of the T-SQL script to execute.

        :return: The value of this JobStepAction.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this JobStepAction.

        The action value, for example the text of the T-SQL script to execute.

        :param value: The value of this JobStepAction.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
