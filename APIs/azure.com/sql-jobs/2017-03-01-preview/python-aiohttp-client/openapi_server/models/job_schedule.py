# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JobSchedule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, end_time: datetime=None, interval: str=None, start_time: datetime=None, type: str='Once'):
        """JobSchedule - a model defined in OpenAPI

        :param enabled: The enabled of this JobSchedule.
        :param end_time: The end_time of this JobSchedule.
        :param interval: The interval of this JobSchedule.
        :param start_time: The start_time of this JobSchedule.
        :param type: The type of this JobSchedule.
        """
        self.openapi_types = {
            'enabled': bool,
            'end_time': datetime,
            'interval': str,
            'start_time': datetime,
            'type': str
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'end_time': 'endTime',
            'interval': 'interval',
            'start_time': 'startTime',
            'type': 'type'
        }

        self._enabled = enabled
        self._end_time = end_time
        self._interval = interval
        self._start_time = start_time
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobSchedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobSchedule of this JobSchedule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this JobSchedule.

        Whether or not the schedule is enabled.

        :return: The enabled of this JobSchedule.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this JobSchedule.

        Whether or not the schedule is enabled.

        :param enabled: The enabled of this JobSchedule.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def end_time(self):
        """Gets the end_time of this JobSchedule.

        Schedule end time.

        :return: The end_time of this JobSchedule.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this JobSchedule.

        Schedule end time.

        :param end_time: The end_time of this JobSchedule.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def interval(self):
        """Gets the interval of this JobSchedule.

        Value of the schedule's recurring interval, if the schedule type is recurring. ISO8601 duration format.

        :return: The interval of this JobSchedule.
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this JobSchedule.

        Value of the schedule's recurring interval, if the schedule type is recurring. ISO8601 duration format.

        :param interval: The interval of this JobSchedule.
        :type interval: str
        """

        self._interval = interval

    @property
    def start_time(self):
        """Gets the start_time of this JobSchedule.

        Schedule start time.

        :return: The start_time of this JobSchedule.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this JobSchedule.

        Schedule start time.

        :param start_time: The start_time of this JobSchedule.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def type(self):
        """Gets the type of this JobSchedule.

        Schedule interval type

        :return: The type of this JobSchedule.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this JobSchedule.

        Schedule interval type

        :param type: The type of this JobSchedule.
        :type type: str
        """
        allowed_values = ["Once", "Recurring"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
