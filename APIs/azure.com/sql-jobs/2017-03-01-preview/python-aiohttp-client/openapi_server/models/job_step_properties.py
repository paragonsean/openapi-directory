# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_step_action import JobStepAction
from openapi_server.models.job_step_execution_options import JobStepExecutionOptions
from openapi_server.models.job_step_output import JobStepOutput
from openapi_server import util


class JobStepProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: JobStepAction=None, credential: str=None, execution_options: JobStepExecutionOptions=None, output: JobStepOutput=None, step_id: int=None, target_group: str=None):
        """JobStepProperties - a model defined in OpenAPI

        :param action: The action of this JobStepProperties.
        :param credential: The credential of this JobStepProperties.
        :param execution_options: The execution_options of this JobStepProperties.
        :param output: The output of this JobStepProperties.
        :param step_id: The step_id of this JobStepProperties.
        :param target_group: The target_group of this JobStepProperties.
        """
        self.openapi_types = {
            'action': JobStepAction,
            'credential': str,
            'execution_options': JobStepExecutionOptions,
            'output': JobStepOutput,
            'step_id': int,
            'target_group': str
        }

        self.attribute_map = {
            'action': 'action',
            'credential': 'credential',
            'execution_options': 'executionOptions',
            'output': 'output',
            'step_id': 'stepId',
            'target_group': 'targetGroup'
        }

        self._action = action
        self._credential = credential
        self._execution_options = execution_options
        self._output = output
        self._step_id = step_id
        self._target_group = target_group

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobStepProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobStepProperties of this JobStepProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this JobStepProperties.


        :return: The action of this JobStepProperties.
        :rtype: JobStepAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this JobStepProperties.


        :param action: The action of this JobStepProperties.
        :type action: JobStepAction
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def credential(self):
        """Gets the credential of this JobStepProperties.

        The resource ID of the job credential that will be used to connect to the targets.

        :return: The credential of this JobStepProperties.
        :rtype: str
        """
        return self._credential

    @credential.setter
    def credential(self, credential):
        """Sets the credential of this JobStepProperties.

        The resource ID of the job credential that will be used to connect to the targets.

        :param credential: The credential of this JobStepProperties.
        :type credential: str
        """
        if credential is None:
            raise ValueError("Invalid value for `credential`, must not be `None`")

        self._credential = credential

    @property
    def execution_options(self):
        """Gets the execution_options of this JobStepProperties.


        :return: The execution_options of this JobStepProperties.
        :rtype: JobStepExecutionOptions
        """
        return self._execution_options

    @execution_options.setter
    def execution_options(self, execution_options):
        """Sets the execution_options of this JobStepProperties.


        :param execution_options: The execution_options of this JobStepProperties.
        :type execution_options: JobStepExecutionOptions
        """

        self._execution_options = execution_options

    @property
    def output(self):
        """Gets the output of this JobStepProperties.


        :return: The output of this JobStepProperties.
        :rtype: JobStepOutput
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this JobStepProperties.


        :param output: The output of this JobStepProperties.
        :type output: JobStepOutput
        """

        self._output = output

    @property
    def step_id(self):
        """Gets the step_id of this JobStepProperties.

        The job step's index within the job. If not specified when creating the job step, it will be created as the last step. If not specified when updating the job step, the step id is not modified.

        :return: The step_id of this JobStepProperties.
        :rtype: int
        """
        return self._step_id

    @step_id.setter
    def step_id(self, step_id):
        """Sets the step_id of this JobStepProperties.

        The job step's index within the job. If not specified when creating the job step, it will be created as the last step. If not specified when updating the job step, the step id is not modified.

        :param step_id: The step_id of this JobStepProperties.
        :type step_id: int
        """

        self._step_id = step_id

    @property
    def target_group(self):
        """Gets the target_group of this JobStepProperties.

        The resource ID of the target group that the job step will be executed on.

        :return: The target_group of this JobStepProperties.
        :rtype: str
        """
        return self._target_group

    @target_group.setter
    def target_group(self, target_group):
        """Sets the target_group of this JobStepProperties.

        The resource ID of the target group that the job step will be executed on.

        :param target_group: The target_group of this JobStepProperties.
        :type target_group: str
        """
        if target_group is None:
            raise ValueError("Invalid value for `target_group`, must not be `None`")

        self._target_group = target_group
