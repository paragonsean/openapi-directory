# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_execution_target import JobExecutionTarget
from openapi_server import util


class JobExecutionProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: datetime=None, current_attempt_start_time: datetime=None, current_attempts: int=None, end_time: datetime=None, job_execution_id: str=None, job_version: int=None, last_message: str=None, lifecycle: str=None, provisioning_state: str=None, start_time: datetime=None, step_id: int=None, step_name: str=None, target: JobExecutionTarget=None):
        """JobExecutionProperties - a model defined in OpenAPI

        :param create_time: The create_time of this JobExecutionProperties.
        :param current_attempt_start_time: The current_attempt_start_time of this JobExecutionProperties.
        :param current_attempts: The current_attempts of this JobExecutionProperties.
        :param end_time: The end_time of this JobExecutionProperties.
        :param job_execution_id: The job_execution_id of this JobExecutionProperties.
        :param job_version: The job_version of this JobExecutionProperties.
        :param last_message: The last_message of this JobExecutionProperties.
        :param lifecycle: The lifecycle of this JobExecutionProperties.
        :param provisioning_state: The provisioning_state of this JobExecutionProperties.
        :param start_time: The start_time of this JobExecutionProperties.
        :param step_id: The step_id of this JobExecutionProperties.
        :param step_name: The step_name of this JobExecutionProperties.
        :param target: The target of this JobExecutionProperties.
        """
        self.openapi_types = {
            'create_time': datetime,
            'current_attempt_start_time': datetime,
            'current_attempts': int,
            'end_time': datetime,
            'job_execution_id': str,
            'job_version': int,
            'last_message': str,
            'lifecycle': str,
            'provisioning_state': str,
            'start_time': datetime,
            'step_id': int,
            'step_name': str,
            'target': JobExecutionTarget
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'current_attempt_start_time': 'currentAttemptStartTime',
            'current_attempts': 'currentAttempts',
            'end_time': 'endTime',
            'job_execution_id': 'jobExecutionId',
            'job_version': 'jobVersion',
            'last_message': 'lastMessage',
            'lifecycle': 'lifecycle',
            'provisioning_state': 'provisioningState',
            'start_time': 'startTime',
            'step_id': 'stepId',
            'step_name': 'stepName',
            'target': 'target'
        }

        self._create_time = create_time
        self._current_attempt_start_time = current_attempt_start_time
        self._current_attempts = current_attempts
        self._end_time = end_time
        self._job_execution_id = job_execution_id
        self._job_version = job_version
        self._last_message = last_message
        self._lifecycle = lifecycle
        self._provisioning_state = provisioning_state
        self._start_time = start_time
        self._step_id = step_id
        self._step_name = step_name
        self._target = target

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobExecutionProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobExecutionProperties of this JobExecutionProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this JobExecutionProperties.

        The time that the job execution was created.

        :return: The create_time of this JobExecutionProperties.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this JobExecutionProperties.

        The time that the job execution was created.

        :param create_time: The create_time of this JobExecutionProperties.
        :type create_time: datetime
        """

        self._create_time = create_time

    @property
    def current_attempt_start_time(self):
        """Gets the current_attempt_start_time of this JobExecutionProperties.

        Start time of the current attempt.

        :return: The current_attempt_start_time of this JobExecutionProperties.
        :rtype: datetime
        """
        return self._current_attempt_start_time

    @current_attempt_start_time.setter
    def current_attempt_start_time(self, current_attempt_start_time):
        """Sets the current_attempt_start_time of this JobExecutionProperties.

        Start time of the current attempt.

        :param current_attempt_start_time: The current_attempt_start_time of this JobExecutionProperties.
        :type current_attempt_start_time: datetime
        """

        self._current_attempt_start_time = current_attempt_start_time

    @property
    def current_attempts(self):
        """Gets the current_attempts of this JobExecutionProperties.

        Number of times the job execution has been attempted.

        :return: The current_attempts of this JobExecutionProperties.
        :rtype: int
        """
        return self._current_attempts

    @current_attempts.setter
    def current_attempts(self, current_attempts):
        """Sets the current_attempts of this JobExecutionProperties.

        Number of times the job execution has been attempted.

        :param current_attempts: The current_attempts of this JobExecutionProperties.
        :type current_attempts: int
        """

        self._current_attempts = current_attempts

    @property
    def end_time(self):
        """Gets the end_time of this JobExecutionProperties.

        The time that the job execution completed.

        :return: The end_time of this JobExecutionProperties.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this JobExecutionProperties.

        The time that the job execution completed.

        :param end_time: The end_time of this JobExecutionProperties.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def job_execution_id(self):
        """Gets the job_execution_id of this JobExecutionProperties.

        The unique identifier of the job execution.

        :return: The job_execution_id of this JobExecutionProperties.
        :rtype: str
        """
        return self._job_execution_id

    @job_execution_id.setter
    def job_execution_id(self, job_execution_id):
        """Sets the job_execution_id of this JobExecutionProperties.

        The unique identifier of the job execution.

        :param job_execution_id: The job_execution_id of this JobExecutionProperties.
        :type job_execution_id: str
        """

        self._job_execution_id = job_execution_id

    @property
    def job_version(self):
        """Gets the job_version of this JobExecutionProperties.

        The job version number.

        :return: The job_version of this JobExecutionProperties.
        :rtype: int
        """
        return self._job_version

    @job_version.setter
    def job_version(self, job_version):
        """Sets the job_version of this JobExecutionProperties.

        The job version number.

        :param job_version: The job_version of this JobExecutionProperties.
        :type job_version: int
        """

        self._job_version = job_version

    @property
    def last_message(self):
        """Gets the last_message of this JobExecutionProperties.

        The last status or error message.

        :return: The last_message of this JobExecutionProperties.
        :rtype: str
        """
        return self._last_message

    @last_message.setter
    def last_message(self, last_message):
        """Sets the last_message of this JobExecutionProperties.

        The last status or error message.

        :param last_message: The last_message of this JobExecutionProperties.
        :type last_message: str
        """

        self._last_message = last_message

    @property
    def lifecycle(self):
        """Gets the lifecycle of this JobExecutionProperties.

        The detailed state of the job execution.

        :return: The lifecycle of this JobExecutionProperties.
        :rtype: str
        """
        return self._lifecycle

    @lifecycle.setter
    def lifecycle(self, lifecycle):
        """Sets the lifecycle of this JobExecutionProperties.

        The detailed state of the job execution.

        :param lifecycle: The lifecycle of this JobExecutionProperties.
        :type lifecycle: str
        """
        allowed_values = ["Created", "InProgress", "WaitingForChildJobExecutions", "WaitingForRetry", "Succeeded", "SucceededWithSkipped", "Failed", "TimedOut", "Canceled", "Skipped"]  # noqa: E501
        if lifecycle not in allowed_values:
            raise ValueError(
                "Invalid value for `lifecycle` ({0}), must be one of {1}"
                .format(lifecycle, allowed_values)
            )

        self._lifecycle = lifecycle

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this JobExecutionProperties.

        The ARM provisioning state of the job execution.

        :return: The provisioning_state of this JobExecutionProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this JobExecutionProperties.

        The ARM provisioning state of the job execution.

        :param provisioning_state: The provisioning_state of this JobExecutionProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Created", "InProgress", "Succeeded", "Failed", "Canceled"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def start_time(self):
        """Gets the start_time of this JobExecutionProperties.

        The time that the job execution started.

        :return: The start_time of this JobExecutionProperties.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this JobExecutionProperties.

        The time that the job execution started.

        :param start_time: The start_time of this JobExecutionProperties.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def step_id(self):
        """Gets the step_id of this JobExecutionProperties.

        The job step id.

        :return: The step_id of this JobExecutionProperties.
        :rtype: int
        """
        return self._step_id

    @step_id.setter
    def step_id(self, step_id):
        """Sets the step_id of this JobExecutionProperties.

        The job step id.

        :param step_id: The step_id of this JobExecutionProperties.
        :type step_id: int
        """

        self._step_id = step_id

    @property
    def step_name(self):
        """Gets the step_name of this JobExecutionProperties.

        The job step name.

        :return: The step_name of this JobExecutionProperties.
        :rtype: str
        """
        return self._step_name

    @step_name.setter
    def step_name(self, step_name):
        """Sets the step_name of this JobExecutionProperties.

        The job step name.

        :param step_name: The step_name of this JobExecutionProperties.
        :type step_name: str
        """

        self._step_name = step_name

    @property
    def target(self):
        """Gets the target of this JobExecutionProperties.


        :return: The target of this JobExecutionProperties.
        :rtype: JobExecutionTarget
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this JobExecutionProperties.


        :param target: The target of this JobExecutionProperties.
        :type target: JobExecutionTarget
        """

        self._target = target
