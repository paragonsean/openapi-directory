# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JobAgentProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, database_id: str=None, state: str=None):
        """JobAgentProperties - a model defined in OpenAPI

        :param database_id: The database_id of this JobAgentProperties.
        :param state: The state of this JobAgentProperties.
        """
        self.openapi_types = {
            'database_id': str,
            'state': str
        }

        self.attribute_map = {
            'database_id': 'databaseId',
            'state': 'state'
        }

        self._database_id = database_id
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobAgentProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobAgentProperties of this JobAgentProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def database_id(self):
        """Gets the database_id of this JobAgentProperties.

        Resource ID of the database to store job metadata in.

        :return: The database_id of this JobAgentProperties.
        :rtype: str
        """
        return self._database_id

    @database_id.setter
    def database_id(self, database_id):
        """Sets the database_id of this JobAgentProperties.

        Resource ID of the database to store job metadata in.

        :param database_id: The database_id of this JobAgentProperties.
        :type database_id: str
        """
        if database_id is None:
            raise ValueError("Invalid value for `database_id`, must not be `None`")

        self._database_id = database_id

    @property
    def state(self):
        """Gets the state of this JobAgentProperties.

        The state of the job agent.

        :return: The state of this JobAgentProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this JobAgentProperties.

        The state of the job agent.

        :param state: The state of this JobAgentProperties.
        :type state: str
        """
        allowed_values = ["Creating", "Ready", "Updating", "Deleting", "Disabled"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
