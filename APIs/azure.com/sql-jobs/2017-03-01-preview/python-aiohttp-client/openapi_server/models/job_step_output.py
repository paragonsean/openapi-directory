# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JobStepOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, credential: str=None, database_name: str=None, resource_group_name: str=None, schema_name: str='dbo', server_name: str=None, subscription_id: str=None, table_name: str=None, type: str='SqlDatabase'):
        """JobStepOutput - a model defined in OpenAPI

        :param credential: The credential of this JobStepOutput.
        :param database_name: The database_name of this JobStepOutput.
        :param resource_group_name: The resource_group_name of this JobStepOutput.
        :param schema_name: The schema_name of this JobStepOutput.
        :param server_name: The server_name of this JobStepOutput.
        :param subscription_id: The subscription_id of this JobStepOutput.
        :param table_name: The table_name of this JobStepOutput.
        :param type: The type of this JobStepOutput.
        """
        self.openapi_types = {
            'credential': str,
            'database_name': str,
            'resource_group_name': str,
            'schema_name': str,
            'server_name': str,
            'subscription_id': str,
            'table_name': str,
            'type': str
        }

        self.attribute_map = {
            'credential': 'credential',
            'database_name': 'databaseName',
            'resource_group_name': 'resourceGroupName',
            'schema_name': 'schemaName',
            'server_name': 'serverName',
            'subscription_id': 'subscriptionId',
            'table_name': 'tableName',
            'type': 'type'
        }

        self._credential = credential
        self._database_name = database_name
        self._resource_group_name = resource_group_name
        self._schema_name = schema_name
        self._server_name = server_name
        self._subscription_id = subscription_id
        self._table_name = table_name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobStepOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobStepOutput of this JobStepOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def credential(self):
        """Gets the credential of this JobStepOutput.

        The resource ID of the credential to use to connect to the output destination.

        :return: The credential of this JobStepOutput.
        :rtype: str
        """
        return self._credential

    @credential.setter
    def credential(self, credential):
        """Sets the credential of this JobStepOutput.

        The resource ID of the credential to use to connect to the output destination.

        :param credential: The credential of this JobStepOutput.
        :type credential: str
        """
        if credential is None:
            raise ValueError("Invalid value for `credential`, must not be `None`")

        self._credential = credential

    @property
    def database_name(self):
        """Gets the database_name of this JobStepOutput.

        The output destination database.

        :return: The database_name of this JobStepOutput.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this JobStepOutput.

        The output destination database.

        :param database_name: The database_name of this JobStepOutput.
        :type database_name: str
        """
        if database_name is None:
            raise ValueError("Invalid value for `database_name`, must not be `None`")

        self._database_name = database_name

    @property
    def resource_group_name(self):
        """Gets the resource_group_name of this JobStepOutput.

        The output destination resource group.

        :return: The resource_group_name of this JobStepOutput.
        :rtype: str
        """
        return self._resource_group_name

    @resource_group_name.setter
    def resource_group_name(self, resource_group_name):
        """Sets the resource_group_name of this JobStepOutput.

        The output destination resource group.

        :param resource_group_name: The resource_group_name of this JobStepOutput.
        :type resource_group_name: str
        """

        self._resource_group_name = resource_group_name

    @property
    def schema_name(self):
        """Gets the schema_name of this JobStepOutput.

        The output destination schema.

        :return: The schema_name of this JobStepOutput.
        :rtype: str
        """
        return self._schema_name

    @schema_name.setter
    def schema_name(self, schema_name):
        """Sets the schema_name of this JobStepOutput.

        The output destination schema.

        :param schema_name: The schema_name of this JobStepOutput.
        :type schema_name: str
        """

        self._schema_name = schema_name

    @property
    def server_name(self):
        """Gets the server_name of this JobStepOutput.

        The output destination server name.

        :return: The server_name of this JobStepOutput.
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this JobStepOutput.

        The output destination server name.

        :param server_name: The server_name of this JobStepOutput.
        :type server_name: str
        """
        if server_name is None:
            raise ValueError("Invalid value for `server_name`, must not be `None`")

        self._server_name = server_name

    @property
    def subscription_id(self):
        """Gets the subscription_id of this JobStepOutput.

        The output destination subscription id.

        :return: The subscription_id of this JobStepOutput.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this JobStepOutput.

        The output destination subscription id.

        :param subscription_id: The subscription_id of this JobStepOutput.
        :type subscription_id: str
        """

        self._subscription_id = subscription_id

    @property
    def table_name(self):
        """Gets the table_name of this JobStepOutput.

        The output destination table.

        :return: The table_name of this JobStepOutput.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this JobStepOutput.

        The output destination table.

        :param table_name: The table_name of this JobStepOutput.
        :type table_name: str
        """
        if table_name is None:
            raise ValueError("Invalid value for `table_name`, must not be `None`")

        self._table_name = table_name

    @property
    def type(self):
        """Gets the type of this JobStepOutput.

        The output destination type.

        :return: The type of this JobStepOutput.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this JobStepOutput.

        The output destination type.

        :param type: The type of this JobStepOutput.
        :type type: str
        """
        allowed_values = ["SqlDatabase"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
