# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JobTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, database_name: str=None, elastic_pool_name: str=None, membership_type: str='Include', refresh_credential: str=None, server_name: str=None, shard_map_name: str=None, type: str=None):
        """JobTarget - a model defined in OpenAPI

        :param database_name: The database_name of this JobTarget.
        :param elastic_pool_name: The elastic_pool_name of this JobTarget.
        :param membership_type: The membership_type of this JobTarget.
        :param refresh_credential: The refresh_credential of this JobTarget.
        :param server_name: The server_name of this JobTarget.
        :param shard_map_name: The shard_map_name of this JobTarget.
        :param type: The type of this JobTarget.
        """
        self.openapi_types = {
            'database_name': str,
            'elastic_pool_name': str,
            'membership_type': str,
            'refresh_credential': str,
            'server_name': str,
            'shard_map_name': str,
            'type': str
        }

        self.attribute_map = {
            'database_name': 'databaseName',
            'elastic_pool_name': 'elasticPoolName',
            'membership_type': 'membershipType',
            'refresh_credential': 'refreshCredential',
            'server_name': 'serverName',
            'shard_map_name': 'shardMapName',
            'type': 'type'
        }

        self._database_name = database_name
        self._elastic_pool_name = elastic_pool_name
        self._membership_type = membership_type
        self._refresh_credential = refresh_credential
        self._server_name = server_name
        self._shard_map_name = shard_map_name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobTarget of this JobTarget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def database_name(self):
        """Gets the database_name of this JobTarget.

        The target database name.

        :return: The database_name of this JobTarget.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this JobTarget.

        The target database name.

        :param database_name: The database_name of this JobTarget.
        :type database_name: str
        """

        self._database_name = database_name

    @property
    def elastic_pool_name(self):
        """Gets the elastic_pool_name of this JobTarget.

        The target elastic pool name.

        :return: The elastic_pool_name of this JobTarget.
        :rtype: str
        """
        return self._elastic_pool_name

    @elastic_pool_name.setter
    def elastic_pool_name(self, elastic_pool_name):
        """Sets the elastic_pool_name of this JobTarget.

        The target elastic pool name.

        :param elastic_pool_name: The elastic_pool_name of this JobTarget.
        :type elastic_pool_name: str
        """

        self._elastic_pool_name = elastic_pool_name

    @property
    def membership_type(self):
        """Gets the membership_type of this JobTarget.

        Whether the target is included or excluded from the group.

        :return: The membership_type of this JobTarget.
        :rtype: str
        """
        return self._membership_type

    @membership_type.setter
    def membership_type(self, membership_type):
        """Sets the membership_type of this JobTarget.

        Whether the target is included or excluded from the group.

        :param membership_type: The membership_type of this JobTarget.
        :type membership_type: str
        """
        allowed_values = ["Include", "Exclude"]  # noqa: E501
        if membership_type not in allowed_values:
            raise ValueError(
                "Invalid value for `membership_type` ({0}), must be one of {1}"
                .format(membership_type, allowed_values)
            )

        self._membership_type = membership_type

    @property
    def refresh_credential(self):
        """Gets the refresh_credential of this JobTarget.

        The resource ID of the credential that is used during job execution to connect to the target and determine the list of databases inside the target.

        :return: The refresh_credential of this JobTarget.
        :rtype: str
        """
        return self._refresh_credential

    @refresh_credential.setter
    def refresh_credential(self, refresh_credential):
        """Sets the refresh_credential of this JobTarget.

        The resource ID of the credential that is used during job execution to connect to the target and determine the list of databases inside the target.

        :param refresh_credential: The refresh_credential of this JobTarget.
        :type refresh_credential: str
        """

        self._refresh_credential = refresh_credential

    @property
    def server_name(self):
        """Gets the server_name of this JobTarget.

        The target server name.

        :return: The server_name of this JobTarget.
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this JobTarget.

        The target server name.

        :param server_name: The server_name of this JobTarget.
        :type server_name: str
        """

        self._server_name = server_name

    @property
    def shard_map_name(self):
        """Gets the shard_map_name of this JobTarget.

        The target shard map.

        :return: The shard_map_name of this JobTarget.
        :rtype: str
        """
        return self._shard_map_name

    @shard_map_name.setter
    def shard_map_name(self, shard_map_name):
        """Sets the shard_map_name of this JobTarget.

        The target shard map.

        :param shard_map_name: The shard_map_name of this JobTarget.
        :type shard_map_name: str
        """

        self._shard_map_name = shard_map_name

    @property
    def type(self):
        """Gets the type of this JobTarget.

        The target type.

        :return: The type of this JobTarget.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this JobTarget.

        The target type.

        :param type: The type of this JobTarget.
        :type type: str
        """
        allowed_values = ["TargetGroup", "SqlDatabase", "SqlElasticPool", "SqlShardMap", "SqlServer"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
