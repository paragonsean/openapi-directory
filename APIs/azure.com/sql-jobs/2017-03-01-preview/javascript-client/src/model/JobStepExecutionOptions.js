/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The JobStepExecutionOptions model module.
 * @module model/JobStepExecutionOptions
 * @version 2017-03-01-preview
 */
class JobStepExecutionOptions {
    /**
     * Constructs a new <code>JobStepExecutionOptions</code>.
     * The execution options of a job step.
     * @alias module:model/JobStepExecutionOptions
     */
    constructor() { 
        
        JobStepExecutionOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['initialRetryIntervalSeconds'] = 1;
        obj['maximumRetryIntervalSeconds'] = 120;
        obj['retryAttempts'] = 10;
        obj['retryIntervalBackoffMultiplier'] = 2.0;
        obj['timeoutSeconds'] = 43200;
    }

    /**
     * Constructs a <code>JobStepExecutionOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobStepExecutionOptions} obj Optional instance to populate.
     * @return {module:model/JobStepExecutionOptions} The populated <code>JobStepExecutionOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobStepExecutionOptions();

            if (data.hasOwnProperty('initialRetryIntervalSeconds')) {
                obj['initialRetryIntervalSeconds'] = ApiClient.convertToType(data['initialRetryIntervalSeconds'], 'Number');
            }
            if (data.hasOwnProperty('maximumRetryIntervalSeconds')) {
                obj['maximumRetryIntervalSeconds'] = ApiClient.convertToType(data['maximumRetryIntervalSeconds'], 'Number');
            }
            if (data.hasOwnProperty('retryAttempts')) {
                obj['retryAttempts'] = ApiClient.convertToType(data['retryAttempts'], 'Number');
            }
            if (data.hasOwnProperty('retryIntervalBackoffMultiplier')) {
                obj['retryIntervalBackoffMultiplier'] = ApiClient.convertToType(data['retryIntervalBackoffMultiplier'], 'Number');
            }
            if (data.hasOwnProperty('timeoutSeconds')) {
                obj['timeoutSeconds'] = ApiClient.convertToType(data['timeoutSeconds'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JobStepExecutionOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JobStepExecutionOptions</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Initial delay between retries for job step execution.
 * @member {Number} initialRetryIntervalSeconds
 * @default 1
 */
JobStepExecutionOptions.prototype['initialRetryIntervalSeconds'] = 1;

/**
 * The maximum amount of time to wait between retries for job step execution.
 * @member {Number} maximumRetryIntervalSeconds
 * @default 120
 */
JobStepExecutionOptions.prototype['maximumRetryIntervalSeconds'] = 120;

/**
 * Maximum number of times the job step will be reattempted if the first attempt fails.
 * @member {Number} retryAttempts
 * @default 10
 */
JobStepExecutionOptions.prototype['retryAttempts'] = 10;

/**
 * The backoff multiplier for the time between retries.
 * @member {Number} retryIntervalBackoffMultiplier
 * @default 2.0
 */
JobStepExecutionOptions.prototype['retryIntervalBackoffMultiplier'] = 2.0;

/**
 * Execution timeout for the job step.
 * @member {Number} timeoutSeconds
 * @default 43200
 */
JobStepExecutionOptions.prototype['timeoutSeconds'] = 43200;






export default JobStepExecutionOptions;

