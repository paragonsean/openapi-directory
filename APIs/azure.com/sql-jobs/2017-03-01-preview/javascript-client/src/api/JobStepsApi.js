/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import JobStep from '../model/JobStep';
import JobStepListResult from '../model/JobStepListResult';

/**
* JobSteps service.
* @module api/JobStepsApi
* @version 2017-03-01-preview
*/
export default class JobStepsApi {

    /**
    * Constructs a new JobStepsApi. 
    * @alias module:api/JobStepsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the jobStepsCreateOrUpdate operation.
     * @callback module:api/JobStepsApi~jobStepsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobStep} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a job step. This will implicitly create a new job version.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} jobAgentName The name of the job agent.
     * @param {String} jobName The name of the job.
     * @param {String} stepName The name of the job step.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:model/JobStep} parameters The requested state of the job step.
     * @param {module:api/JobStepsApi~jobStepsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobStep}
     */
    jobStepsCreateOrUpdate(resourceGroupName, serverName, jobAgentName, jobName, stepName, subscriptionId, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobStepsCreateOrUpdate");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling jobStepsCreateOrUpdate");
      }
      // verify the required parameter 'jobAgentName' is set
      if (jobAgentName === undefined || jobAgentName === null) {
        throw new Error("Missing the required parameter 'jobAgentName' when calling jobStepsCreateOrUpdate");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling jobStepsCreateOrUpdate");
      }
      // verify the required parameter 'stepName' is set
      if (stepName === undefined || stepName === null) {
        throw new Error("Missing the required parameter 'stepName' when calling jobStepsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobStepsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobStepsCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling jobStepsCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'jobAgentName': jobAgentName,
        'jobName': jobName,
        'stepName': stepName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JobStep;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/steps/{stepName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobStepsDelete operation.
     * @callback module:api/JobStepsApi~jobStepsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a job step. This will implicitly create a new job version.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} jobAgentName The name of the job agent.
     * @param {String} jobName The name of the job.
     * @param {String} stepName The name of the job step to delete.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/JobStepsApi~jobStepsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    jobStepsDelete(resourceGroupName, serverName, jobAgentName, jobName, stepName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobStepsDelete");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling jobStepsDelete");
      }
      // verify the required parameter 'jobAgentName' is set
      if (jobAgentName === undefined || jobAgentName === null) {
        throw new Error("Missing the required parameter 'jobAgentName' when calling jobStepsDelete");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling jobStepsDelete");
      }
      // verify the required parameter 'stepName' is set
      if (stepName === undefined || stepName === null) {
        throw new Error("Missing the required parameter 'stepName' when calling jobStepsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobStepsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobStepsDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'jobAgentName': jobAgentName,
        'jobName': jobName,
        'stepName': stepName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/steps/{stepName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobStepsGet operation.
     * @callback module:api/JobStepsApi~jobStepsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobStep} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a job step in a job's current version.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} jobAgentName The name of the job agent.
     * @param {String} jobName The name of the job.
     * @param {String} stepName The name of the job step.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/JobStepsApi~jobStepsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobStep}
     */
    jobStepsGet(resourceGroupName, serverName, jobAgentName, jobName, stepName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobStepsGet");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling jobStepsGet");
      }
      // verify the required parameter 'jobAgentName' is set
      if (jobAgentName === undefined || jobAgentName === null) {
        throw new Error("Missing the required parameter 'jobAgentName' when calling jobStepsGet");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling jobStepsGet");
      }
      // verify the required parameter 'stepName' is set
      if (stepName === undefined || stepName === null) {
        throw new Error("Missing the required parameter 'stepName' when calling jobStepsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobStepsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobStepsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'jobAgentName': jobAgentName,
        'jobName': jobName,
        'stepName': stepName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JobStep;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/steps/{stepName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobStepsGetByVersion operation.
     * @callback module:api/JobStepsApi~jobStepsGetByVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobStep} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the specified version of a job step.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} jobAgentName The name of the job agent.
     * @param {String} jobName The name of the job.
     * @param {Number} jobVersion The version of the job to get.
     * @param {String} stepName The name of the job step.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/JobStepsApi~jobStepsGetByVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobStep}
     */
    jobStepsGetByVersion(resourceGroupName, serverName, jobAgentName, jobName, jobVersion, stepName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobStepsGetByVersion");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling jobStepsGetByVersion");
      }
      // verify the required parameter 'jobAgentName' is set
      if (jobAgentName === undefined || jobAgentName === null) {
        throw new Error("Missing the required parameter 'jobAgentName' when calling jobStepsGetByVersion");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling jobStepsGetByVersion");
      }
      // verify the required parameter 'jobVersion' is set
      if (jobVersion === undefined || jobVersion === null) {
        throw new Error("Missing the required parameter 'jobVersion' when calling jobStepsGetByVersion");
      }
      // verify the required parameter 'stepName' is set
      if (stepName === undefined || stepName === null) {
        throw new Error("Missing the required parameter 'stepName' when calling jobStepsGetByVersion");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobStepsGetByVersion");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobStepsGetByVersion");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'jobAgentName': jobAgentName,
        'jobName': jobName,
        'jobVersion': jobVersion,
        'stepName': stepName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JobStep;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/versions/{jobVersion}/steps/{stepName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobStepsListByJob operation.
     * @callback module:api/JobStepsApi~jobStepsListByJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobStepListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all job steps for a job's current version.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} jobAgentName The name of the job agent.
     * @param {String} jobName The name of the job to get.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/JobStepsApi~jobStepsListByJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobStepListResult}
     */
    jobStepsListByJob(resourceGroupName, serverName, jobAgentName, jobName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobStepsListByJob");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling jobStepsListByJob");
      }
      // verify the required parameter 'jobAgentName' is set
      if (jobAgentName === undefined || jobAgentName === null) {
        throw new Error("Missing the required parameter 'jobAgentName' when calling jobStepsListByJob");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling jobStepsListByJob");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobStepsListByJob");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobStepsListByJob");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'jobAgentName': jobAgentName,
        'jobName': jobName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JobStepListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/steps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobStepsListByVersion operation.
     * @callback module:api/JobStepsApi~jobStepsListByVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobStepListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all job steps in the specified job version.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} jobAgentName The name of the job agent.
     * @param {String} jobName The name of the job to get.
     * @param {Number} jobVersion The version of the job to get.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/JobStepsApi~jobStepsListByVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobStepListResult}
     */
    jobStepsListByVersion(resourceGroupName, serverName, jobAgentName, jobName, jobVersion, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobStepsListByVersion");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling jobStepsListByVersion");
      }
      // verify the required parameter 'jobAgentName' is set
      if (jobAgentName === undefined || jobAgentName === null) {
        throw new Error("Missing the required parameter 'jobAgentName' when calling jobStepsListByVersion");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling jobStepsListByVersion");
      }
      // verify the required parameter 'jobVersion' is set
      if (jobVersion === undefined || jobVersion === null) {
        throw new Error("Missing the required parameter 'jobVersion' when calling jobStepsListByVersion");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobStepsListByVersion");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobStepsListByVersion");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'jobAgentName': jobAgentName,
        'jobName': jobName,
        'jobVersion': jobVersion,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JobStepListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/versions/{jobVersion}/steps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
