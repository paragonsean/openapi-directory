/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import JobVersion from '../model/JobVersion';
import JobVersionListResult from '../model/JobVersionListResult';

/**
* JobVersions service.
* @module api/JobVersionsApi
* @version 2017-03-01-preview
*/
export default class JobVersionsApi {

    /**
    * Constructs a new JobVersionsApi. 
    * @alias module:api/JobVersionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the jobVersionsGet operation.
     * @callback module:api/JobVersionsApi~jobVersionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobVersion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a job version.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} jobAgentName The name of the job agent.
     * @param {String} jobName The name of the job.
     * @param {Number} jobVersion The version of the job to get.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/JobVersionsApi~jobVersionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobVersion}
     */
    jobVersionsGet(resourceGroupName, serverName, jobAgentName, jobName, jobVersion, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobVersionsGet");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling jobVersionsGet");
      }
      // verify the required parameter 'jobAgentName' is set
      if (jobAgentName === undefined || jobAgentName === null) {
        throw new Error("Missing the required parameter 'jobAgentName' when calling jobVersionsGet");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling jobVersionsGet");
      }
      // verify the required parameter 'jobVersion' is set
      if (jobVersion === undefined || jobVersion === null) {
        throw new Error("Missing the required parameter 'jobVersion' when calling jobVersionsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobVersionsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobVersionsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'jobAgentName': jobAgentName,
        'jobName': jobName,
        'jobVersion': jobVersion,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JobVersion;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/versions/{jobVersion}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobVersionsListByJob operation.
     * @callback module:api/JobVersionsApi~jobVersionsListByJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobVersionListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all versions of a job.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} jobAgentName The name of the job agent.
     * @param {String} jobName The name of the job to get.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/JobVersionsApi~jobVersionsListByJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobVersionListResult}
     */
    jobVersionsListByJob(resourceGroupName, serverName, jobAgentName, jobName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobVersionsListByJob");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling jobVersionsListByJob");
      }
      // verify the required parameter 'jobAgentName' is set
      if (jobAgentName === undefined || jobAgentName === null) {
        throw new Error("Missing the required parameter 'jobAgentName' when calling jobVersionsListByJob");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling jobVersionsListByJob");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobVersionsListByJob");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobVersionsListByJob");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'jobAgentName': jobAgentName,
        'jobName': jobName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JobVersionListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
