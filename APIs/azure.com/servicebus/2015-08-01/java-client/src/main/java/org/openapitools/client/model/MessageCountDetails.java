/*
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Message Count Details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:59.525861-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MessageCountDetails {
  public static final String SERIALIZED_NAME_ACTIVE_MESSAGE_COUNT = "activeMessageCount";
  @SerializedName(SERIALIZED_NAME_ACTIVE_MESSAGE_COUNT)
  private Long activeMessageCount;

  public static final String SERIALIZED_NAME_DEAD_LETTER_MESSAGE_COUNT = "deadLetterMessageCount";
  @SerializedName(SERIALIZED_NAME_DEAD_LETTER_MESSAGE_COUNT)
  private Long deadLetterMessageCount;

  public static final String SERIALIZED_NAME_SCHEDULED_MESSAGE_COUNT = "scheduledMessageCount";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_MESSAGE_COUNT)
  private Long scheduledMessageCount;

  public static final String SERIALIZED_NAME_TRANSFER_DEAD_LETTER_MESSAGE_COUNT = "transferDeadLetterMessageCount";
  @SerializedName(SERIALIZED_NAME_TRANSFER_DEAD_LETTER_MESSAGE_COUNT)
  private Long transferDeadLetterMessageCount;

  public static final String SERIALIZED_NAME_TRANSFER_MESSAGE_COUNT = "transferMessageCount";
  @SerializedName(SERIALIZED_NAME_TRANSFER_MESSAGE_COUNT)
  private Long transferMessageCount;

  public MessageCountDetails() {
  }

  public MessageCountDetails(
     Long activeMessageCount, 
     Long deadLetterMessageCount, 
     Long scheduledMessageCount, 
     Long transferDeadLetterMessageCount, 
     Long transferMessageCount
  ) {
    this();
    this.activeMessageCount = activeMessageCount;
    this.deadLetterMessageCount = deadLetterMessageCount;
    this.scheduledMessageCount = scheduledMessageCount;
    this.transferDeadLetterMessageCount = transferDeadLetterMessageCount;
    this.transferMessageCount = transferMessageCount;
  }

  /**
   * Number of active messages in the queue, topic, or subscription.
   * @return activeMessageCount
   */
  @javax.annotation.Nullable
  public Long getActiveMessageCount() {
    return activeMessageCount;
  }



  /**
   * Number of messages that are dead lettered.
   * @return deadLetterMessageCount
   */
  @javax.annotation.Nullable
  public Long getDeadLetterMessageCount() {
    return deadLetterMessageCount;
  }



  /**
   * Number of scheduled messages.
   * @return scheduledMessageCount
   */
  @javax.annotation.Nullable
  public Long getScheduledMessageCount() {
    return scheduledMessageCount;
  }



  /**
   * Number of messages transferred into dead letters.
   * @return transferDeadLetterMessageCount
   */
  @javax.annotation.Nullable
  public Long getTransferDeadLetterMessageCount() {
    return transferDeadLetterMessageCount;
  }



  /**
   * Number of messages transferred to another queue, topic, or subscription.
   * @return transferMessageCount
   */
  @javax.annotation.Nullable
  public Long getTransferMessageCount() {
    return transferMessageCount;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessageCountDetails messageCountDetails = (MessageCountDetails) o;
    return Objects.equals(this.activeMessageCount, messageCountDetails.activeMessageCount) &&
        Objects.equals(this.deadLetterMessageCount, messageCountDetails.deadLetterMessageCount) &&
        Objects.equals(this.scheduledMessageCount, messageCountDetails.scheduledMessageCount) &&
        Objects.equals(this.transferDeadLetterMessageCount, messageCountDetails.transferDeadLetterMessageCount) &&
        Objects.equals(this.transferMessageCount, messageCountDetails.transferMessageCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeMessageCount, deadLetterMessageCount, scheduledMessageCount, transferDeadLetterMessageCount, transferMessageCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessageCountDetails {\n");
    sb.append("    activeMessageCount: ").append(toIndentedString(activeMessageCount)).append("\n");
    sb.append("    deadLetterMessageCount: ").append(toIndentedString(deadLetterMessageCount)).append("\n");
    sb.append("    scheduledMessageCount: ").append(toIndentedString(scheduledMessageCount)).append("\n");
    sb.append("    transferDeadLetterMessageCount: ").append(toIndentedString(transferDeadLetterMessageCount)).append("\n");
    sb.append("    transferMessageCount: ").append(toIndentedString(transferMessageCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activeMessageCount");
    openapiFields.add("deadLetterMessageCount");
    openapiFields.add("scheduledMessageCount");
    openapiFields.add("transferDeadLetterMessageCount");
    openapiFields.add("transferMessageCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MessageCountDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MessageCountDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MessageCountDetails is not found in the empty JSON string", MessageCountDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MessageCountDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MessageCountDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MessageCountDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MessageCountDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MessageCountDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MessageCountDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<MessageCountDetails>() {
           @Override
           public void write(JsonWriter out, MessageCountDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MessageCountDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MessageCountDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MessageCountDetails
   * @throws IOException if the JSON string is invalid with respect to MessageCountDetails
   */
  public static MessageCountDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MessageCountDetails.class);
  }

  /**
   * Convert an instance of MessageCountDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

