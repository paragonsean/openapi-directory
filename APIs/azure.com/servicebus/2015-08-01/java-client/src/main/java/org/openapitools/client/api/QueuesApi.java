/*
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.QueueCreateOrUpdateParameters;
import org.openapitools.client.model.QueueListResult;
import org.openapitools.client.model.QueueResource;
import org.openapitools.client.model.RegenerateKeysParameters;
import org.openapitools.client.model.ResourceListKeys;
import org.openapitools.client.model.SharedAccessAuthorizationRuleCreateOrUpdateParameters;
import org.openapitools.client.model.SharedAccessAuthorizationRuleListResult;
import org.openapitools.client.model.SharedAccessAuthorizationRuleResource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QueuesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public QueuesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QueuesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for queuesCreateOrUpdate
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create or update a queue resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Queue successfully created. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639395.aspx"> Documentation</a>
     */
    public okhttp3.Call queuesCreateOrUpdateCall(String resourceGroupName, String namespaceName, String queueName, String apiVersion, String subscriptionId, QueueCreateOrUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "queueName" + "}", localVarApiClient.escapeString(queueName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queuesCreateOrUpdateValidateBeforeCall(String resourceGroupName, String namespaceName, String queueName, String apiVersion, String subscriptionId, QueueCreateOrUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling queuesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling queuesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling queuesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling queuesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling queuesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling queuesCreateOrUpdate(Async)");
        }

        return queuesCreateOrUpdateCall(resourceGroupName, namespaceName, queueName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates or updates a Service Bus queue. This operation is idempotent.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create or update a queue resource. (required)
     * @return QueueResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Queue successfully created. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639395.aspx"> Documentation</a>
     */
    public QueueResource queuesCreateOrUpdate(String resourceGroupName, String namespaceName, String queueName, String apiVersion, String subscriptionId, QueueCreateOrUpdateParameters parameters) throws ApiException {
        ApiResponse<QueueResource> localVarResp = queuesCreateOrUpdateWithHttpInfo(resourceGroupName, namespaceName, queueName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a Service Bus queue. This operation is idempotent.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create or update a queue resource. (required)
     * @return ApiResponse&lt;QueueResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Queue successfully created. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639395.aspx"> Documentation</a>
     */
    public ApiResponse<QueueResource> queuesCreateOrUpdateWithHttpInfo(String resourceGroupName, String namespaceName, String queueName, String apiVersion, String subscriptionId, QueueCreateOrUpdateParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = queuesCreateOrUpdateValidateBeforeCall(resourceGroupName, namespaceName, queueName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<QueueResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a Service Bus queue. This operation is idempotent.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create or update a queue resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Queue successfully created. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639395.aspx"> Documentation</a>
     */
    public okhttp3.Call queuesCreateOrUpdateAsync(String resourceGroupName, String namespaceName, String queueName, String apiVersion, String subscriptionId, QueueCreateOrUpdateParameters parameters, final ApiCallback<QueueResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = queuesCreateOrUpdateValidateBeforeCall(resourceGroupName, namespaceName, queueName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<QueueResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queuesCreateOrUpdateAuthorizationRule
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The shared access authorization rule. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rule successfully created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queuesCreateOrUpdateAuthorizationRuleCall(String resourceGroupName, String namespaceName, String queueName, String authorizationRuleName, String apiVersion, String subscriptionId, SharedAccessAuthorizationRuleCreateOrUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}/authorizationRules/{authorizationRuleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "queueName" + "}", localVarApiClient.escapeString(queueName.toString()))
            .replace("{" + "authorizationRuleName" + "}", localVarApiClient.escapeString(authorizationRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queuesCreateOrUpdateAuthorizationRuleValidateBeforeCall(String resourceGroupName, String namespaceName, String queueName, String authorizationRuleName, String apiVersion, String subscriptionId, SharedAccessAuthorizationRuleCreateOrUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling queuesCreateOrUpdateAuthorizationRule(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling queuesCreateOrUpdateAuthorizationRule(Async)");
        }

        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling queuesCreateOrUpdateAuthorizationRule(Async)");
        }

        // verify the required parameter 'authorizationRuleName' is set
        if (authorizationRuleName == null) {
            throw new ApiException("Missing the required parameter 'authorizationRuleName' when calling queuesCreateOrUpdateAuthorizationRule(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling queuesCreateOrUpdateAuthorizationRule(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling queuesCreateOrUpdateAuthorizationRule(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling queuesCreateOrUpdateAuthorizationRule(Async)");
        }

        return queuesCreateOrUpdateAuthorizationRuleCall(resourceGroupName, namespaceName, queueName, authorizationRuleName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates an authorization rule for a queue.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The shared access authorization rule. (required)
     * @return SharedAccessAuthorizationRuleResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rule successfully created. </td><td>  -  </td></tr>
     </table>
     */
    public SharedAccessAuthorizationRuleResource queuesCreateOrUpdateAuthorizationRule(String resourceGroupName, String namespaceName, String queueName, String authorizationRuleName, String apiVersion, String subscriptionId, SharedAccessAuthorizationRuleCreateOrUpdateParameters parameters) throws ApiException {
        ApiResponse<SharedAccessAuthorizationRuleResource> localVarResp = queuesCreateOrUpdateAuthorizationRuleWithHttpInfo(resourceGroupName, namespaceName, queueName, authorizationRuleName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates an authorization rule for a queue.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The shared access authorization rule. (required)
     * @return ApiResponse&lt;SharedAccessAuthorizationRuleResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rule successfully created. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SharedAccessAuthorizationRuleResource> queuesCreateOrUpdateAuthorizationRuleWithHttpInfo(String resourceGroupName, String namespaceName, String queueName, String authorizationRuleName, String apiVersion, String subscriptionId, SharedAccessAuthorizationRuleCreateOrUpdateParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = queuesCreateOrUpdateAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, queueName, authorizationRuleName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<SharedAccessAuthorizationRuleResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates an authorization rule for a queue.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The shared access authorization rule. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rule successfully created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queuesCreateOrUpdateAuthorizationRuleAsync(String resourceGroupName, String namespaceName, String queueName, String authorizationRuleName, String apiVersion, String subscriptionId, SharedAccessAuthorizationRuleCreateOrUpdateParameters parameters, final ApiCallback<SharedAccessAuthorizationRuleResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = queuesCreateOrUpdateAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, queueName, authorizationRuleName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<SharedAccessAuthorizationRuleResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queuesDelete
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Queue successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639411.aspx"> Documentation</a>
     */
    public okhttp3.Call queuesDeleteCall(String resourceGroupName, String namespaceName, String queueName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "queueName" + "}", localVarApiClient.escapeString(queueName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queuesDeleteValidateBeforeCall(String resourceGroupName, String namespaceName, String queueName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling queuesDelete(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling queuesDelete(Async)");
        }

        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling queuesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling queuesDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling queuesDelete(Async)");
        }

        return queuesDeleteCall(resourceGroupName, namespaceName, queueName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes a queue from the specified namespace in a resource group.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Queue successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639411.aspx"> Documentation</a>
     */
    public void queuesDelete(String resourceGroupName, String namespaceName, String queueName, String apiVersion, String subscriptionId) throws ApiException {
        queuesDeleteWithHttpInfo(resourceGroupName, namespaceName, queueName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes a queue from the specified namespace in a resource group.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Queue successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639411.aspx"> Documentation</a>
     */
    public ApiResponse<Void> queuesDeleteWithHttpInfo(String resourceGroupName, String namespaceName, String queueName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = queuesDeleteValidateBeforeCall(resourceGroupName, namespaceName, queueName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a queue from the specified namespace in a resource group.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Queue successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639411.aspx"> Documentation</a>
     */
    public okhttp3.Call queuesDeleteAsync(String resourceGroupName, String namespaceName, String queueName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = queuesDeleteValidateBeforeCall(resourceGroupName, namespaceName, queueName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for queuesDeleteAuthorizationRule
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rule successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt705609.aspx"> Documentation</a>
     */
    public okhttp3.Call queuesDeleteAuthorizationRuleCall(String resourceGroupName, String namespaceName, String queueName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}/authorizationRules/{authorizationRuleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "queueName" + "}", localVarApiClient.escapeString(queueName.toString()))
            .replace("{" + "authorizationRuleName" + "}", localVarApiClient.escapeString(authorizationRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queuesDeleteAuthorizationRuleValidateBeforeCall(String resourceGroupName, String namespaceName, String queueName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling queuesDeleteAuthorizationRule(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling queuesDeleteAuthorizationRule(Async)");
        }

        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling queuesDeleteAuthorizationRule(Async)");
        }

        // verify the required parameter 'authorizationRuleName' is set
        if (authorizationRuleName == null) {
            throw new ApiException("Missing the required parameter 'authorizationRuleName' when calling queuesDeleteAuthorizationRule(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling queuesDeleteAuthorizationRule(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling queuesDeleteAuthorizationRule(Async)");
        }

        return queuesDeleteAuthorizationRuleCall(resourceGroupName, namespaceName, queueName, authorizationRuleName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes a queue authorization rule.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rule successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt705609.aspx"> Documentation</a>
     */
    public void queuesDeleteAuthorizationRule(String resourceGroupName, String namespaceName, String queueName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        queuesDeleteAuthorizationRuleWithHttpInfo(resourceGroupName, namespaceName, queueName, authorizationRuleName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes a queue authorization rule.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rule successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt705609.aspx"> Documentation</a>
     */
    public ApiResponse<Void> queuesDeleteAuthorizationRuleWithHttpInfo(String resourceGroupName, String namespaceName, String queueName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = queuesDeleteAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, queueName, authorizationRuleName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a queue authorization rule.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rule successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt705609.aspx"> Documentation</a>
     */
    public okhttp3.Call queuesDeleteAuthorizationRuleAsync(String resourceGroupName, String namespaceName, String queueName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = queuesDeleteAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, queueName, authorizationRuleName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for queuesGet
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Queue description successfully returned. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639380.aspx"> Documentation</a>
     */
    public okhttp3.Call queuesGetCall(String resourceGroupName, String namespaceName, String queueName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "queueName" + "}", localVarApiClient.escapeString(queueName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queuesGetValidateBeforeCall(String resourceGroupName, String namespaceName, String queueName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling queuesGet(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling queuesGet(Async)");
        }

        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling queuesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling queuesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling queuesGet(Async)");
        }

        return queuesGetCall(resourceGroupName, namespaceName, queueName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Returns a description for the specified queue.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return QueueResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Queue description successfully returned. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639380.aspx"> Documentation</a>
     */
    public QueueResource queuesGet(String resourceGroupName, String namespaceName, String queueName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<QueueResource> localVarResp = queuesGetWithHttpInfo(resourceGroupName, namespaceName, queueName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a description for the specified queue.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;QueueResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Queue description successfully returned. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639380.aspx"> Documentation</a>
     */
    public ApiResponse<QueueResource> queuesGetWithHttpInfo(String resourceGroupName, String namespaceName, String queueName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = queuesGetValidateBeforeCall(resourceGroupName, namespaceName, queueName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<QueueResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a description for the specified queue.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Queue description successfully returned. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639380.aspx"> Documentation</a>
     */
    public okhttp3.Call queuesGetAsync(String resourceGroupName, String namespaceName, String queueName, String apiVersion, String subscriptionId, final ApiCallback<QueueResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = queuesGetValidateBeforeCall(resourceGroupName, namespaceName, queueName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<QueueResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queuesGetAuthorizationRule
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rule successfully returned. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt705611.aspx"> Documentation</a>
     */
    public okhttp3.Call queuesGetAuthorizationRuleCall(String resourceGroupName, String namespaceName, String queueName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}/authorizationRules/{authorizationRuleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "queueName" + "}", localVarApiClient.escapeString(queueName.toString()))
            .replace("{" + "authorizationRuleName" + "}", localVarApiClient.escapeString(authorizationRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queuesGetAuthorizationRuleValidateBeforeCall(String resourceGroupName, String namespaceName, String queueName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling queuesGetAuthorizationRule(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling queuesGetAuthorizationRule(Async)");
        }

        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling queuesGetAuthorizationRule(Async)");
        }

        // verify the required parameter 'authorizationRuleName' is set
        if (authorizationRuleName == null) {
            throw new ApiException("Missing the required parameter 'authorizationRuleName' when calling queuesGetAuthorizationRule(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling queuesGetAuthorizationRule(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling queuesGetAuthorizationRule(Async)");
        }

        return queuesGetAuthorizationRuleCall(resourceGroupName, namespaceName, queueName, authorizationRuleName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets an authorization rule for a queue by rule name.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return SharedAccessAuthorizationRuleResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rule successfully returned. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt705611.aspx"> Documentation</a>
     */
    public SharedAccessAuthorizationRuleResource queuesGetAuthorizationRule(String resourceGroupName, String namespaceName, String queueName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<SharedAccessAuthorizationRuleResource> localVarResp = queuesGetAuthorizationRuleWithHttpInfo(resourceGroupName, namespaceName, queueName, authorizationRuleName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets an authorization rule for a queue by rule name.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;SharedAccessAuthorizationRuleResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rule successfully returned. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt705611.aspx"> Documentation</a>
     */
    public ApiResponse<SharedAccessAuthorizationRuleResource> queuesGetAuthorizationRuleWithHttpInfo(String resourceGroupName, String namespaceName, String queueName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = queuesGetAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, queueName, authorizationRuleName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<SharedAccessAuthorizationRuleResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets an authorization rule for a queue by rule name.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rule successfully returned. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt705611.aspx"> Documentation</a>
     */
    public okhttp3.Call queuesGetAuthorizationRuleAsync(String resourceGroupName, String namespaceName, String queueName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback<SharedAccessAuthorizationRuleResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = queuesGetAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, queueName, authorizationRuleName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<SharedAccessAuthorizationRuleResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queuesListAll
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Queues successfully returned. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639415.aspx"> Documentation</a>
     */
    public okhttp3.Call queuesListAllCall(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queuesListAllValidateBeforeCall(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling queuesListAll(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling queuesListAll(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling queuesListAll(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling queuesListAll(Async)");
        }

        return queuesListAllCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets the queues within a namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return QueueListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Queues successfully returned. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639415.aspx"> Documentation</a>
     */
    public QueueListResult queuesListAll(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<QueueListResult> localVarResp = queuesListAllWithHttpInfo(resourceGroupName, namespaceName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the queues within a namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;QueueListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Queues successfully returned. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639415.aspx"> Documentation</a>
     */
    public ApiResponse<QueueListResult> queuesListAllWithHttpInfo(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = queuesListAllValidateBeforeCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<QueueListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the queues within a namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Queues successfully returned. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639415.aspx"> Documentation</a>
     */
    public okhttp3.Call queuesListAllAsync(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, final ApiCallback<QueueListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = queuesListAllValidateBeforeCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<QueueListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queuesListAuthorizationRules
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rules successfully returned. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt705607.aspx"> Documentation</a>
     */
    public okhttp3.Call queuesListAuthorizationRulesCall(String resourceGroupName, String namespaceName, String queueName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}/authorizationRules"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "queueName" + "}", localVarApiClient.escapeString(queueName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queuesListAuthorizationRulesValidateBeforeCall(String resourceGroupName, String namespaceName, String queueName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling queuesListAuthorizationRules(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling queuesListAuthorizationRules(Async)");
        }

        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling queuesListAuthorizationRules(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling queuesListAuthorizationRules(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling queuesListAuthorizationRules(Async)");
        }

        return queuesListAuthorizationRulesCall(resourceGroupName, namespaceName, queueName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets all authorization rules for a queue.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return SharedAccessAuthorizationRuleListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rules successfully returned. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt705607.aspx"> Documentation</a>
     */
    public SharedAccessAuthorizationRuleListResult queuesListAuthorizationRules(String resourceGroupName, String namespaceName, String queueName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<SharedAccessAuthorizationRuleListResult> localVarResp = queuesListAuthorizationRulesWithHttpInfo(resourceGroupName, namespaceName, queueName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all authorization rules for a queue.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;SharedAccessAuthorizationRuleListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rules successfully returned. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt705607.aspx"> Documentation</a>
     */
    public ApiResponse<SharedAccessAuthorizationRuleListResult> queuesListAuthorizationRulesWithHttpInfo(String resourceGroupName, String namespaceName, String queueName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = queuesListAuthorizationRulesValidateBeforeCall(resourceGroupName, namespaceName, queueName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<SharedAccessAuthorizationRuleListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all authorization rules for a queue.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rules successfully returned. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt705607.aspx"> Documentation</a>
     */
    public okhttp3.Call queuesListAuthorizationRulesAsync(String resourceGroupName, String namespaceName, String queueName, String apiVersion, String subscriptionId, final ApiCallback<SharedAccessAuthorizationRuleListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = queuesListAuthorizationRulesValidateBeforeCall(resourceGroupName, namespaceName, queueName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<SharedAccessAuthorizationRuleListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queuesListKeys
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection strings successfully returned. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt705608.aspx"> Documentation</a>
     */
    public okhttp3.Call queuesListKeysCall(String resourceGroupName, String namespaceName, String queueName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}/authorizationRules/{authorizationRuleName}/ListKeys"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "queueName" + "}", localVarApiClient.escapeString(queueName.toString()))
            .replace("{" + "authorizationRuleName" + "}", localVarApiClient.escapeString(authorizationRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queuesListKeysValidateBeforeCall(String resourceGroupName, String namespaceName, String queueName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling queuesListKeys(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling queuesListKeys(Async)");
        }

        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling queuesListKeys(Async)");
        }

        // verify the required parameter 'authorizationRuleName' is set
        if (authorizationRuleName == null) {
            throw new ApiException("Missing the required parameter 'authorizationRuleName' when calling queuesListKeys(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling queuesListKeys(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling queuesListKeys(Async)");
        }

        return queuesListKeysCall(resourceGroupName, namespaceName, queueName, authorizationRuleName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Primary and secondary connection strings to the queue.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ResourceListKeys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection strings successfully returned. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt705608.aspx"> Documentation</a>
     */
    public ResourceListKeys queuesListKeys(String resourceGroupName, String namespaceName, String queueName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ResourceListKeys> localVarResp = queuesListKeysWithHttpInfo(resourceGroupName, namespaceName, queueName, authorizationRuleName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Primary and secondary connection strings to the queue.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;ResourceListKeys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection strings successfully returned. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt705608.aspx"> Documentation</a>
     */
    public ApiResponse<ResourceListKeys> queuesListKeysWithHttpInfo(String resourceGroupName, String namespaceName, String queueName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = queuesListKeysValidateBeforeCall(resourceGroupName, namespaceName, queueName, authorizationRuleName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ResourceListKeys>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Primary and secondary connection strings to the queue.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection strings successfully returned. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt705608.aspx"> Documentation</a>
     */
    public okhttp3.Call queuesListKeysAsync(String resourceGroupName, String namespaceName, String queueName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback<ResourceListKeys> _callback) throws ApiException {

        okhttp3.Call localVarCall = queuesListKeysValidateBeforeCall(resourceGroupName, namespaceName, queueName, authorizationRuleName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ResourceListKeys>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queuesPostAuthorizationRule
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rule successfully returned. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt705611.aspx"> Documentation</a>
     */
    public okhttp3.Call queuesPostAuthorizationRuleCall(String resourceGroupName, String namespaceName, String queueName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}/authorizationRules/{authorizationRuleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "queueName" + "}", localVarApiClient.escapeString(queueName.toString()))
            .replace("{" + "authorizationRuleName" + "}", localVarApiClient.escapeString(authorizationRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queuesPostAuthorizationRuleValidateBeforeCall(String resourceGroupName, String namespaceName, String queueName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling queuesPostAuthorizationRule(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling queuesPostAuthorizationRule(Async)");
        }

        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling queuesPostAuthorizationRule(Async)");
        }

        // verify the required parameter 'authorizationRuleName' is set
        if (authorizationRuleName == null) {
            throw new ApiException("Missing the required parameter 'authorizationRuleName' when calling queuesPostAuthorizationRule(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling queuesPostAuthorizationRule(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling queuesPostAuthorizationRule(Async)");
        }

        return queuesPostAuthorizationRuleCall(resourceGroupName, namespaceName, queueName, authorizationRuleName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets an authorization rule for a queue by rule name.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return SharedAccessAuthorizationRuleResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rule successfully returned. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt705611.aspx"> Documentation</a>
     */
    public SharedAccessAuthorizationRuleResource queuesPostAuthorizationRule(String resourceGroupName, String namespaceName, String queueName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<SharedAccessAuthorizationRuleResource> localVarResp = queuesPostAuthorizationRuleWithHttpInfo(resourceGroupName, namespaceName, queueName, authorizationRuleName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets an authorization rule for a queue by rule name.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;SharedAccessAuthorizationRuleResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rule successfully returned. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt705611.aspx"> Documentation</a>
     */
    public ApiResponse<SharedAccessAuthorizationRuleResource> queuesPostAuthorizationRuleWithHttpInfo(String resourceGroupName, String namespaceName, String queueName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = queuesPostAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, queueName, authorizationRuleName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<SharedAccessAuthorizationRuleResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets an authorization rule for a queue by rule name.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rule successfully returned. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt705611.aspx"> Documentation</a>
     */
    public okhttp3.Call queuesPostAuthorizationRuleAsync(String resourceGroupName, String namespaceName, String queueName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback<SharedAccessAuthorizationRuleResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = queuesPostAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, queueName, authorizationRuleName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<SharedAccessAuthorizationRuleResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queuesRegenerateKeys
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to regenerate the authorization rule. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection strings successfully regenerated. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt705606.aspx"> Documentation</a>
     */
    public okhttp3.Call queuesRegenerateKeysCall(String resourceGroupName, String namespaceName, String queueName, String authorizationRuleName, String apiVersion, String subscriptionId, RegenerateKeysParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}/authorizationRules/{authorizationRuleName}/regenerateKeys"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "queueName" + "}", localVarApiClient.escapeString(queueName.toString()))
            .replace("{" + "authorizationRuleName" + "}", localVarApiClient.escapeString(authorizationRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queuesRegenerateKeysValidateBeforeCall(String resourceGroupName, String namespaceName, String queueName, String authorizationRuleName, String apiVersion, String subscriptionId, RegenerateKeysParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling queuesRegenerateKeys(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling queuesRegenerateKeys(Async)");
        }

        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling queuesRegenerateKeys(Async)");
        }

        // verify the required parameter 'authorizationRuleName' is set
        if (authorizationRuleName == null) {
            throw new ApiException("Missing the required parameter 'authorizationRuleName' when calling queuesRegenerateKeys(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling queuesRegenerateKeys(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling queuesRegenerateKeys(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling queuesRegenerateKeys(Async)");
        }

        return queuesRegenerateKeysCall(resourceGroupName, namespaceName, queueName, authorizationRuleName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Regenerates the primary or secondary connection strings to the queue.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to regenerate the authorization rule. (required)
     * @return ResourceListKeys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection strings successfully regenerated. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt705606.aspx"> Documentation</a>
     */
    public ResourceListKeys queuesRegenerateKeys(String resourceGroupName, String namespaceName, String queueName, String authorizationRuleName, String apiVersion, String subscriptionId, RegenerateKeysParameters parameters) throws ApiException {
        ApiResponse<ResourceListKeys> localVarResp = queuesRegenerateKeysWithHttpInfo(resourceGroupName, namespaceName, queueName, authorizationRuleName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Regenerates the primary or secondary connection strings to the queue.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to regenerate the authorization rule. (required)
     * @return ApiResponse&lt;ResourceListKeys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection strings successfully regenerated. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt705606.aspx"> Documentation</a>
     */
    public ApiResponse<ResourceListKeys> queuesRegenerateKeysWithHttpInfo(String resourceGroupName, String namespaceName, String queueName, String authorizationRuleName, String apiVersion, String subscriptionId, RegenerateKeysParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = queuesRegenerateKeysValidateBeforeCall(resourceGroupName, namespaceName, queueName, authorizationRuleName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<ResourceListKeys>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Regenerates the primary or secondary connection strings to the queue.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param queueName The queue name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to regenerate the authorization rule. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection strings successfully regenerated. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt705606.aspx"> Documentation</a>
     */
    public okhttp3.Call queuesRegenerateKeysAsync(String resourceGroupName, String namespaceName, String queueName, String authorizationRuleName, String apiVersion, String subscriptionId, RegenerateKeysParameters parameters, final ApiCallback<ResourceListKeys> _callback) throws ApiException {

        okhttp3.Call localVarCall = queuesRegenerateKeysValidateBeforeCall(resourceGroupName, namespaceName, queueName, authorizationRuleName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<ResourceListKeys>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
