/*
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.RegenerateKeysParameters;
import org.openapitools.client.model.ResourceListKeys;
import org.openapitools.client.model.SharedAccessAuthorizationRuleCreateOrUpdateParameters;
import org.openapitools.client.model.SharedAccessAuthorizationRuleListResult;
import org.openapitools.client.model.SharedAccessAuthorizationRuleResource;
import org.openapitools.client.model.TopicCreateOrUpdateParameters;
import org.openapitools.client.model.TopicListResult;
import org.openapitools.client.model.TopicResource;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TopicsApi
 */
@Disabled
public class TopicsApiTest {

    private final TopicsApi api = new TopicsApi();

    /**
     * Creates a topic in the specified namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void topicsCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String topicName = null;
        String apiVersion = null;
        String subscriptionId = null;
        TopicCreateOrUpdateParameters parameters = null;
        TopicResource response = api.topicsCreateOrUpdate(resourceGroupName, namespaceName, topicName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Creates an authorization rule for the specified topic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void topicsCreateOrUpdateAuthorizationRuleTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String topicName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        SharedAccessAuthorizationRuleCreateOrUpdateParameters parameters = null;
        SharedAccessAuthorizationRuleResource response = api.topicsCreateOrUpdateAuthorizationRule(resourceGroupName, namespaceName, topicName, authorizationRuleName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Deletes a topic from the specified namespace and resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void topicsDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String topicName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.topicsDelete(resourceGroupName, namespaceName, topicName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Deletes a topic authorization rule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void topicsDeleteAuthorizationRuleTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String topicName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.topicsDeleteAuthorizationRule(resourceGroupName, namespaceName, topicName, authorizationRuleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Returns a description for the specified topic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void topicsGetTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String topicName = null;
        String apiVersion = null;
        String subscriptionId = null;
        TopicResource response = api.topicsGet(resourceGroupName, namespaceName, topicName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Returns the specified authorization rule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void topicsGetAuthorizationRuleTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String topicName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        SharedAccessAuthorizationRuleResource response = api.topicsGetAuthorizationRule(resourceGroupName, namespaceName, topicName, authorizationRuleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets all the topics in a namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void topicsListAllTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        TopicListResult response = api.topicsListAll(resourceGroupName, namespaceName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets authorization rules for a topic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void topicsListAuthorizationRulesTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String topicName = null;
        String apiVersion = null;
        String subscriptionId = null;
        SharedAccessAuthorizationRuleListResult response = api.topicsListAuthorizationRules(resourceGroupName, namespaceName, topicName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the primary and secondary connection strings for the topic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void topicsListKeysTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String topicName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        ResourceListKeys response = api.topicsListKeys(resourceGroupName, namespaceName, topicName, authorizationRuleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Returns the specified authorization rule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void topicsPostAuthorizationRuleTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String topicName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        SharedAccessAuthorizationRuleResource response = api.topicsPostAuthorizationRule(resourceGroupName, namespaceName, topicName, authorizationRuleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Regenerates primary or secondary connection strings for the topic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void topicsRegenerateKeysTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String topicName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        RegenerateKeysParameters parameters = null;
        ResourceListKeys response = api.topicsRegenerateKeys(resourceGroupName, namespaceName, topicName, authorizationRuleName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

}
