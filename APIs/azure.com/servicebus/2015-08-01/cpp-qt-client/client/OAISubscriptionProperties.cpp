/**
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2015-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionProperties::OAISubscriptionProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionProperties::OAISubscriptionProperties() {
    this->initializeModel();
}

OAISubscriptionProperties::~OAISubscriptionProperties() {}

void OAISubscriptionProperties::initializeModel() {

    m_accessed_at_isSet = false;
    m_accessed_at_isValid = false;

    m_auto_delete_on_idle_isSet = false;
    m_auto_delete_on_idle_isValid = false;

    m_count_details_isSet = false;
    m_count_details_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_dead_lettering_on_filter_evaluation_exceptions_isSet = false;
    m_dead_lettering_on_filter_evaluation_exceptions_isValid = false;

    m_dead_lettering_on_message_expiration_isSet = false;
    m_dead_lettering_on_message_expiration_isValid = false;

    m_default_message_time_to_live_isSet = false;
    m_default_message_time_to_live_isValid = false;

    m_enable_batched_operations_isSet = false;
    m_enable_batched_operations_isValid = false;

    m_entity_availability_status_isSet = false;
    m_entity_availability_status_isValid = false;

    m_is_read_only_isSet = false;
    m_is_read_only_isValid = false;

    m_lock_duration_isSet = false;
    m_lock_duration_isValid = false;

    m_max_delivery_count_isSet = false;
    m_max_delivery_count_isValid = false;

    m_message_count_isSet = false;
    m_message_count_isValid = false;

    m_requires_session_isSet = false;
    m_requires_session_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAISubscriptionProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionProperties::fromJsonObject(QJsonObject json) {

    m_accessed_at_isValid = ::OpenAPI::fromJsonValue(m_accessed_at, json[QString("accessedAt")]);
    m_accessed_at_isSet = !json[QString("accessedAt")].isNull() && m_accessed_at_isValid;

    m_auto_delete_on_idle_isValid = ::OpenAPI::fromJsonValue(m_auto_delete_on_idle, json[QString("autoDeleteOnIdle")]);
    m_auto_delete_on_idle_isSet = !json[QString("autoDeleteOnIdle")].isNull() && m_auto_delete_on_idle_isValid;

    m_count_details_isValid = ::OpenAPI::fromJsonValue(m_count_details, json[QString("countDetails")]);
    m_count_details_isSet = !json[QString("countDetails")].isNull() && m_count_details_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_dead_lettering_on_filter_evaluation_exceptions_isValid = ::OpenAPI::fromJsonValue(m_dead_lettering_on_filter_evaluation_exceptions, json[QString("deadLetteringOnFilterEvaluationExceptions")]);
    m_dead_lettering_on_filter_evaluation_exceptions_isSet = !json[QString("deadLetteringOnFilterEvaluationExceptions")].isNull() && m_dead_lettering_on_filter_evaluation_exceptions_isValid;

    m_dead_lettering_on_message_expiration_isValid = ::OpenAPI::fromJsonValue(m_dead_lettering_on_message_expiration, json[QString("deadLetteringOnMessageExpiration")]);
    m_dead_lettering_on_message_expiration_isSet = !json[QString("deadLetteringOnMessageExpiration")].isNull() && m_dead_lettering_on_message_expiration_isValid;

    m_default_message_time_to_live_isValid = ::OpenAPI::fromJsonValue(m_default_message_time_to_live, json[QString("defaultMessageTimeToLive")]);
    m_default_message_time_to_live_isSet = !json[QString("defaultMessageTimeToLive")].isNull() && m_default_message_time_to_live_isValid;

    m_enable_batched_operations_isValid = ::OpenAPI::fromJsonValue(m_enable_batched_operations, json[QString("enableBatchedOperations")]);
    m_enable_batched_operations_isSet = !json[QString("enableBatchedOperations")].isNull() && m_enable_batched_operations_isValid;

    m_entity_availability_status_isValid = ::OpenAPI::fromJsonValue(m_entity_availability_status, json[QString("entityAvailabilityStatus")]);
    m_entity_availability_status_isSet = !json[QString("entityAvailabilityStatus")].isNull() && m_entity_availability_status_isValid;

    m_is_read_only_isValid = ::OpenAPI::fromJsonValue(m_is_read_only, json[QString("isReadOnly")]);
    m_is_read_only_isSet = !json[QString("isReadOnly")].isNull() && m_is_read_only_isValid;

    m_lock_duration_isValid = ::OpenAPI::fromJsonValue(m_lock_duration, json[QString("lockDuration")]);
    m_lock_duration_isSet = !json[QString("lockDuration")].isNull() && m_lock_duration_isValid;

    m_max_delivery_count_isValid = ::OpenAPI::fromJsonValue(m_max_delivery_count, json[QString("maxDeliveryCount")]);
    m_max_delivery_count_isSet = !json[QString("maxDeliveryCount")].isNull() && m_max_delivery_count_isValid;

    m_message_count_isValid = ::OpenAPI::fromJsonValue(m_message_count, json[QString("messageCount")]);
    m_message_count_isSet = !json[QString("messageCount")].isNull() && m_message_count_isValid;

    m_requires_session_isValid = ::OpenAPI::fromJsonValue(m_requires_session, json[QString("requiresSession")]);
    m_requires_session_isSet = !json[QString("requiresSession")].isNull() && m_requires_session_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAISubscriptionProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_accessed_at_isSet) {
        obj.insert(QString("accessedAt"), ::OpenAPI::toJsonValue(m_accessed_at));
    }
    if (m_auto_delete_on_idle_isSet) {
        obj.insert(QString("autoDeleteOnIdle"), ::OpenAPI::toJsonValue(m_auto_delete_on_idle));
    }
    if (m_count_details.isSet()) {
        obj.insert(QString("countDetails"), ::OpenAPI::toJsonValue(m_count_details));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_dead_lettering_on_filter_evaluation_exceptions_isSet) {
        obj.insert(QString("deadLetteringOnFilterEvaluationExceptions"), ::OpenAPI::toJsonValue(m_dead_lettering_on_filter_evaluation_exceptions));
    }
    if (m_dead_lettering_on_message_expiration_isSet) {
        obj.insert(QString("deadLetteringOnMessageExpiration"), ::OpenAPI::toJsonValue(m_dead_lettering_on_message_expiration));
    }
    if (m_default_message_time_to_live_isSet) {
        obj.insert(QString("defaultMessageTimeToLive"), ::OpenAPI::toJsonValue(m_default_message_time_to_live));
    }
    if (m_enable_batched_operations_isSet) {
        obj.insert(QString("enableBatchedOperations"), ::OpenAPI::toJsonValue(m_enable_batched_operations));
    }
    if (m_entity_availability_status.isSet()) {
        obj.insert(QString("entityAvailabilityStatus"), ::OpenAPI::toJsonValue(m_entity_availability_status));
    }
    if (m_is_read_only_isSet) {
        obj.insert(QString("isReadOnly"), ::OpenAPI::toJsonValue(m_is_read_only));
    }
    if (m_lock_duration_isSet) {
        obj.insert(QString("lockDuration"), ::OpenAPI::toJsonValue(m_lock_duration));
    }
    if (m_max_delivery_count_isSet) {
        obj.insert(QString("maxDeliveryCount"), ::OpenAPI::toJsonValue(m_max_delivery_count));
    }
    if (m_message_count_isSet) {
        obj.insert(QString("messageCount"), ::OpenAPI::toJsonValue(m_message_count));
    }
    if (m_requires_session_isSet) {
        obj.insert(QString("requiresSession"), ::OpenAPI::toJsonValue(m_requires_session));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QDateTime OAISubscriptionProperties::getAccessedAt() const {
    return m_accessed_at;
}
void OAISubscriptionProperties::setAccessedAt(const QDateTime &accessed_at) {
    m_accessed_at = accessed_at;
    m_accessed_at_isSet = true;
}

bool OAISubscriptionProperties::is_accessed_at_Set() const{
    return m_accessed_at_isSet;
}

bool OAISubscriptionProperties::is_accessed_at_Valid() const{
    return m_accessed_at_isValid;
}

QString OAISubscriptionProperties::getAutoDeleteOnIdle() const {
    return m_auto_delete_on_idle;
}
void OAISubscriptionProperties::setAutoDeleteOnIdle(const QString &auto_delete_on_idle) {
    m_auto_delete_on_idle = auto_delete_on_idle;
    m_auto_delete_on_idle_isSet = true;
}

bool OAISubscriptionProperties::is_auto_delete_on_idle_Set() const{
    return m_auto_delete_on_idle_isSet;
}

bool OAISubscriptionProperties::is_auto_delete_on_idle_Valid() const{
    return m_auto_delete_on_idle_isValid;
}

OAIMessageCountDetails OAISubscriptionProperties::getCountDetails() const {
    return m_count_details;
}
void OAISubscriptionProperties::setCountDetails(const OAIMessageCountDetails &count_details) {
    m_count_details = count_details;
    m_count_details_isSet = true;
}

bool OAISubscriptionProperties::is_count_details_Set() const{
    return m_count_details_isSet;
}

bool OAISubscriptionProperties::is_count_details_Valid() const{
    return m_count_details_isValid;
}

QDateTime OAISubscriptionProperties::getCreatedAt() const {
    return m_created_at;
}
void OAISubscriptionProperties::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAISubscriptionProperties::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAISubscriptionProperties::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAISubscriptionProperties::isDeadLetteringOnFilterEvaluationExceptions() const {
    return m_dead_lettering_on_filter_evaluation_exceptions;
}
void OAISubscriptionProperties::setDeadLetteringOnFilterEvaluationExceptions(const bool &dead_lettering_on_filter_evaluation_exceptions) {
    m_dead_lettering_on_filter_evaluation_exceptions = dead_lettering_on_filter_evaluation_exceptions;
    m_dead_lettering_on_filter_evaluation_exceptions_isSet = true;
}

bool OAISubscriptionProperties::is_dead_lettering_on_filter_evaluation_exceptions_Set() const{
    return m_dead_lettering_on_filter_evaluation_exceptions_isSet;
}

bool OAISubscriptionProperties::is_dead_lettering_on_filter_evaluation_exceptions_Valid() const{
    return m_dead_lettering_on_filter_evaluation_exceptions_isValid;
}

bool OAISubscriptionProperties::isDeadLetteringOnMessageExpiration() const {
    return m_dead_lettering_on_message_expiration;
}
void OAISubscriptionProperties::setDeadLetteringOnMessageExpiration(const bool &dead_lettering_on_message_expiration) {
    m_dead_lettering_on_message_expiration = dead_lettering_on_message_expiration;
    m_dead_lettering_on_message_expiration_isSet = true;
}

bool OAISubscriptionProperties::is_dead_lettering_on_message_expiration_Set() const{
    return m_dead_lettering_on_message_expiration_isSet;
}

bool OAISubscriptionProperties::is_dead_lettering_on_message_expiration_Valid() const{
    return m_dead_lettering_on_message_expiration_isValid;
}

QString OAISubscriptionProperties::getDefaultMessageTimeToLive() const {
    return m_default_message_time_to_live;
}
void OAISubscriptionProperties::setDefaultMessageTimeToLive(const QString &default_message_time_to_live) {
    m_default_message_time_to_live = default_message_time_to_live;
    m_default_message_time_to_live_isSet = true;
}

bool OAISubscriptionProperties::is_default_message_time_to_live_Set() const{
    return m_default_message_time_to_live_isSet;
}

bool OAISubscriptionProperties::is_default_message_time_to_live_Valid() const{
    return m_default_message_time_to_live_isValid;
}

bool OAISubscriptionProperties::isEnableBatchedOperations() const {
    return m_enable_batched_operations;
}
void OAISubscriptionProperties::setEnableBatchedOperations(const bool &enable_batched_operations) {
    m_enable_batched_operations = enable_batched_operations;
    m_enable_batched_operations_isSet = true;
}

bool OAISubscriptionProperties::is_enable_batched_operations_Set() const{
    return m_enable_batched_operations_isSet;
}

bool OAISubscriptionProperties::is_enable_batched_operations_Valid() const{
    return m_enable_batched_operations_isValid;
}

OAIEntityAvailabilityStatus OAISubscriptionProperties::getEntityAvailabilityStatus() const {
    return m_entity_availability_status;
}
void OAISubscriptionProperties::setEntityAvailabilityStatus(const OAIEntityAvailabilityStatus &entity_availability_status) {
    m_entity_availability_status = entity_availability_status;
    m_entity_availability_status_isSet = true;
}

bool OAISubscriptionProperties::is_entity_availability_status_Set() const{
    return m_entity_availability_status_isSet;
}

bool OAISubscriptionProperties::is_entity_availability_status_Valid() const{
    return m_entity_availability_status_isValid;
}

bool OAISubscriptionProperties::isIsReadOnly() const {
    return m_is_read_only;
}
void OAISubscriptionProperties::setIsReadOnly(const bool &is_read_only) {
    m_is_read_only = is_read_only;
    m_is_read_only_isSet = true;
}

bool OAISubscriptionProperties::is_is_read_only_Set() const{
    return m_is_read_only_isSet;
}

bool OAISubscriptionProperties::is_is_read_only_Valid() const{
    return m_is_read_only_isValid;
}

QString OAISubscriptionProperties::getLockDuration() const {
    return m_lock_duration;
}
void OAISubscriptionProperties::setLockDuration(const QString &lock_duration) {
    m_lock_duration = lock_duration;
    m_lock_duration_isSet = true;
}

bool OAISubscriptionProperties::is_lock_duration_Set() const{
    return m_lock_duration_isSet;
}

bool OAISubscriptionProperties::is_lock_duration_Valid() const{
    return m_lock_duration_isValid;
}

qint32 OAISubscriptionProperties::getMaxDeliveryCount() const {
    return m_max_delivery_count;
}
void OAISubscriptionProperties::setMaxDeliveryCount(const qint32 &max_delivery_count) {
    m_max_delivery_count = max_delivery_count;
    m_max_delivery_count_isSet = true;
}

bool OAISubscriptionProperties::is_max_delivery_count_Set() const{
    return m_max_delivery_count_isSet;
}

bool OAISubscriptionProperties::is_max_delivery_count_Valid() const{
    return m_max_delivery_count_isValid;
}

qint64 OAISubscriptionProperties::getMessageCount() const {
    return m_message_count;
}
void OAISubscriptionProperties::setMessageCount(const qint64 &message_count) {
    m_message_count = message_count;
    m_message_count_isSet = true;
}

bool OAISubscriptionProperties::is_message_count_Set() const{
    return m_message_count_isSet;
}

bool OAISubscriptionProperties::is_message_count_Valid() const{
    return m_message_count_isValid;
}

bool OAISubscriptionProperties::isRequiresSession() const {
    return m_requires_session;
}
void OAISubscriptionProperties::setRequiresSession(const bool &requires_session) {
    m_requires_session = requires_session;
    m_requires_session_isSet = true;
}

bool OAISubscriptionProperties::is_requires_session_Set() const{
    return m_requires_session_isSet;
}

bool OAISubscriptionProperties::is_requires_session_Valid() const{
    return m_requires_session_isValid;
}

OAIEntityStatus OAISubscriptionProperties::getStatus() const {
    return m_status;
}
void OAISubscriptionProperties::setStatus(const OAIEntityStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISubscriptionProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAISubscriptionProperties::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAISubscriptionProperties::getUpdatedAt() const {
    return m_updated_at;
}
void OAISubscriptionProperties::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAISubscriptionProperties::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAISubscriptionProperties::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAISubscriptionProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accessed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_delete_on_idle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dead_lettering_on_filter_evaluation_exceptions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dead_lettering_on_message_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_message_time_to_live_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_batched_operations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_availability_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_read_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lock_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_delivery_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requires_session_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
