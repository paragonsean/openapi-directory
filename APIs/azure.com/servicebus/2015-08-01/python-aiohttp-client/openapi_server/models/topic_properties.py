# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entity_availability_status import EntityAvailabilityStatus
from openapi_server.models.entity_status import EntityStatus
from openapi_server.models.message_count_details import MessageCountDetails
from openapi_server import util


class TopicProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accessed_at: datetime=None, auto_delete_on_idle: str=None, count_details: MessageCountDetails=None, created_at: datetime=None, default_message_time_to_live: str=None, duplicate_detection_history_time_window: str=None, enable_batched_operations: bool=None, enable_express: bool=None, enable_partitioning: bool=None, entity_availability_status: EntityAvailabilityStatus=None, filtering_messages_before_publishing: bool=None, is_anonymous_accessible: bool=None, is_express: bool=None, max_size_in_megabytes: int=None, requires_duplicate_detection: bool=None, size_in_bytes: int=None, status: EntityStatus=None, subscription_count: int=None, support_ordering: bool=None, updated_at: datetime=None):
        """TopicProperties - a model defined in OpenAPI

        :param accessed_at: The accessed_at of this TopicProperties.
        :param auto_delete_on_idle: The auto_delete_on_idle of this TopicProperties.
        :param count_details: The count_details of this TopicProperties.
        :param created_at: The created_at of this TopicProperties.
        :param default_message_time_to_live: The default_message_time_to_live of this TopicProperties.
        :param duplicate_detection_history_time_window: The duplicate_detection_history_time_window of this TopicProperties.
        :param enable_batched_operations: The enable_batched_operations of this TopicProperties.
        :param enable_express: The enable_express of this TopicProperties.
        :param enable_partitioning: The enable_partitioning of this TopicProperties.
        :param entity_availability_status: The entity_availability_status of this TopicProperties.
        :param filtering_messages_before_publishing: The filtering_messages_before_publishing of this TopicProperties.
        :param is_anonymous_accessible: The is_anonymous_accessible of this TopicProperties.
        :param is_express: The is_express of this TopicProperties.
        :param max_size_in_megabytes: The max_size_in_megabytes of this TopicProperties.
        :param requires_duplicate_detection: The requires_duplicate_detection of this TopicProperties.
        :param size_in_bytes: The size_in_bytes of this TopicProperties.
        :param status: The status of this TopicProperties.
        :param subscription_count: The subscription_count of this TopicProperties.
        :param support_ordering: The support_ordering of this TopicProperties.
        :param updated_at: The updated_at of this TopicProperties.
        """
        self.openapi_types = {
            'accessed_at': datetime,
            'auto_delete_on_idle': str,
            'count_details': MessageCountDetails,
            'created_at': datetime,
            'default_message_time_to_live': str,
            'duplicate_detection_history_time_window': str,
            'enable_batched_operations': bool,
            'enable_express': bool,
            'enable_partitioning': bool,
            'entity_availability_status': EntityAvailabilityStatus,
            'filtering_messages_before_publishing': bool,
            'is_anonymous_accessible': bool,
            'is_express': bool,
            'max_size_in_megabytes': int,
            'requires_duplicate_detection': bool,
            'size_in_bytes': int,
            'status': EntityStatus,
            'subscription_count': int,
            'support_ordering': bool,
            'updated_at': datetime
        }

        self.attribute_map = {
            'accessed_at': 'accessedAt',
            'auto_delete_on_idle': 'autoDeleteOnIdle',
            'count_details': 'countDetails',
            'created_at': 'createdAt',
            'default_message_time_to_live': 'defaultMessageTimeToLive',
            'duplicate_detection_history_time_window': 'duplicateDetectionHistoryTimeWindow',
            'enable_batched_operations': 'enableBatchedOperations',
            'enable_express': 'enableExpress',
            'enable_partitioning': 'enablePartitioning',
            'entity_availability_status': 'entityAvailabilityStatus',
            'filtering_messages_before_publishing': 'filteringMessagesBeforePublishing',
            'is_anonymous_accessible': 'isAnonymousAccessible',
            'is_express': 'isExpress',
            'max_size_in_megabytes': 'maxSizeInMegabytes',
            'requires_duplicate_detection': 'requiresDuplicateDetection',
            'size_in_bytes': 'sizeInBytes',
            'status': 'status',
            'subscription_count': 'subscriptionCount',
            'support_ordering': 'supportOrdering',
            'updated_at': 'updatedAt'
        }

        self._accessed_at = accessed_at
        self._auto_delete_on_idle = auto_delete_on_idle
        self._count_details = count_details
        self._created_at = created_at
        self._default_message_time_to_live = default_message_time_to_live
        self._duplicate_detection_history_time_window = duplicate_detection_history_time_window
        self._enable_batched_operations = enable_batched_operations
        self._enable_express = enable_express
        self._enable_partitioning = enable_partitioning
        self._entity_availability_status = entity_availability_status
        self._filtering_messages_before_publishing = filtering_messages_before_publishing
        self._is_anonymous_accessible = is_anonymous_accessible
        self._is_express = is_express
        self._max_size_in_megabytes = max_size_in_megabytes
        self._requires_duplicate_detection = requires_duplicate_detection
        self._size_in_bytes = size_in_bytes
        self._status = status
        self._subscription_count = subscription_count
        self._support_ordering = support_ordering
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TopicProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TopicProperties of this TopicProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accessed_at(self):
        """Gets the accessed_at of this TopicProperties.

        Last time the message was sent, or a request was received, for this topic.

        :return: The accessed_at of this TopicProperties.
        :rtype: datetime
        """
        return self._accessed_at

    @accessed_at.setter
    def accessed_at(self, accessed_at):
        """Sets the accessed_at of this TopicProperties.

        Last time the message was sent, or a request was received, for this topic.

        :param accessed_at: The accessed_at of this TopicProperties.
        :type accessed_at: datetime
        """

        self._accessed_at = accessed_at

    @property
    def auto_delete_on_idle(self):
        """Gets the auto_delete_on_idle of this TopicProperties.

        TimeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.

        :return: The auto_delete_on_idle of this TopicProperties.
        :rtype: str
        """
        return self._auto_delete_on_idle

    @auto_delete_on_idle.setter
    def auto_delete_on_idle(self, auto_delete_on_idle):
        """Sets the auto_delete_on_idle of this TopicProperties.

        TimeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.

        :param auto_delete_on_idle: The auto_delete_on_idle of this TopicProperties.
        :type auto_delete_on_idle: str
        """

        self._auto_delete_on_idle = auto_delete_on_idle

    @property
    def count_details(self):
        """Gets the count_details of this TopicProperties.


        :return: The count_details of this TopicProperties.
        :rtype: MessageCountDetails
        """
        return self._count_details

    @count_details.setter
    def count_details(self, count_details):
        """Sets the count_details of this TopicProperties.


        :param count_details: The count_details of this TopicProperties.
        :type count_details: MessageCountDetails
        """

        self._count_details = count_details

    @property
    def created_at(self):
        """Gets the created_at of this TopicProperties.

        Exact time the message was created.

        :return: The created_at of this TopicProperties.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TopicProperties.

        Exact time the message was created.

        :param created_at: The created_at of this TopicProperties.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def default_message_time_to_live(self):
        """Gets the default_message_time_to_live of this TopicProperties.

        Default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.

        :return: The default_message_time_to_live of this TopicProperties.
        :rtype: str
        """
        return self._default_message_time_to_live

    @default_message_time_to_live.setter
    def default_message_time_to_live(self, default_message_time_to_live):
        """Sets the default_message_time_to_live of this TopicProperties.

        Default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.

        :param default_message_time_to_live: The default_message_time_to_live of this TopicProperties.
        :type default_message_time_to_live: str
        """

        self._default_message_time_to_live = default_message_time_to_live

    @property
    def duplicate_detection_history_time_window(self):
        """Gets the duplicate_detection_history_time_window of this TopicProperties.

        TimeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.

        :return: The duplicate_detection_history_time_window of this TopicProperties.
        :rtype: str
        """
        return self._duplicate_detection_history_time_window

    @duplicate_detection_history_time_window.setter
    def duplicate_detection_history_time_window(self, duplicate_detection_history_time_window):
        """Sets the duplicate_detection_history_time_window of this TopicProperties.

        TimeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.

        :param duplicate_detection_history_time_window: The duplicate_detection_history_time_window of this TopicProperties.
        :type duplicate_detection_history_time_window: str
        """

        self._duplicate_detection_history_time_window = duplicate_detection_history_time_window

    @property
    def enable_batched_operations(self):
        """Gets the enable_batched_operations of this TopicProperties.

        Value that indicates whether server-side batched operations are enabled.

        :return: The enable_batched_operations of this TopicProperties.
        :rtype: bool
        """
        return self._enable_batched_operations

    @enable_batched_operations.setter
    def enable_batched_operations(self, enable_batched_operations):
        """Sets the enable_batched_operations of this TopicProperties.

        Value that indicates whether server-side batched operations are enabled.

        :param enable_batched_operations: The enable_batched_operations of this TopicProperties.
        :type enable_batched_operations: bool
        """

        self._enable_batched_operations = enable_batched_operations

    @property
    def enable_express(self):
        """Gets the enable_express of this TopicProperties.

        Value that indicates whether Express Entities are enabled. An express topic holds a message in memory temporarily before writing it to persistent storage.

        :return: The enable_express of this TopicProperties.
        :rtype: bool
        """
        return self._enable_express

    @enable_express.setter
    def enable_express(self, enable_express):
        """Sets the enable_express of this TopicProperties.

        Value that indicates whether Express Entities are enabled. An express topic holds a message in memory temporarily before writing it to persistent storage.

        :param enable_express: The enable_express of this TopicProperties.
        :type enable_express: bool
        """

        self._enable_express = enable_express

    @property
    def enable_partitioning(self):
        """Gets the enable_partitioning of this TopicProperties.

        Value that indicates whether the topic to be partitioned across multiple message brokers is enabled.

        :return: The enable_partitioning of this TopicProperties.
        :rtype: bool
        """
        return self._enable_partitioning

    @enable_partitioning.setter
    def enable_partitioning(self, enable_partitioning):
        """Sets the enable_partitioning of this TopicProperties.

        Value that indicates whether the topic to be partitioned across multiple message brokers is enabled.

        :param enable_partitioning: The enable_partitioning of this TopicProperties.
        :type enable_partitioning: bool
        """

        self._enable_partitioning = enable_partitioning

    @property
    def entity_availability_status(self):
        """Gets the entity_availability_status of this TopicProperties.


        :return: The entity_availability_status of this TopicProperties.
        :rtype: EntityAvailabilityStatus
        """
        return self._entity_availability_status

    @entity_availability_status.setter
    def entity_availability_status(self, entity_availability_status):
        """Sets the entity_availability_status of this TopicProperties.


        :param entity_availability_status: The entity_availability_status of this TopicProperties.
        :type entity_availability_status: EntityAvailabilityStatus
        """

        self._entity_availability_status = entity_availability_status

    @property
    def filtering_messages_before_publishing(self):
        """Gets the filtering_messages_before_publishing of this TopicProperties.

        Whether messages should be filtered before publishing.

        :return: The filtering_messages_before_publishing of this TopicProperties.
        :rtype: bool
        """
        return self._filtering_messages_before_publishing

    @filtering_messages_before_publishing.setter
    def filtering_messages_before_publishing(self, filtering_messages_before_publishing):
        """Sets the filtering_messages_before_publishing of this TopicProperties.

        Whether messages should be filtered before publishing.

        :param filtering_messages_before_publishing: The filtering_messages_before_publishing of this TopicProperties.
        :type filtering_messages_before_publishing: bool
        """

        self._filtering_messages_before_publishing = filtering_messages_before_publishing

    @property
    def is_anonymous_accessible(self):
        """Gets the is_anonymous_accessible of this TopicProperties.

        Value that indicates whether the message is accessible anonymously.

        :return: The is_anonymous_accessible of this TopicProperties.
        :rtype: bool
        """
        return self._is_anonymous_accessible

    @is_anonymous_accessible.setter
    def is_anonymous_accessible(self, is_anonymous_accessible):
        """Sets the is_anonymous_accessible of this TopicProperties.

        Value that indicates whether the message is accessible anonymously.

        :param is_anonymous_accessible: The is_anonymous_accessible of this TopicProperties.
        :type is_anonymous_accessible: bool
        """

        self._is_anonymous_accessible = is_anonymous_accessible

    @property
    def is_express(self):
        """Gets the is_express of this TopicProperties.

        

        :return: The is_express of this TopicProperties.
        :rtype: bool
        """
        return self._is_express

    @is_express.setter
    def is_express(self, is_express):
        """Sets the is_express of this TopicProperties.

        

        :param is_express: The is_express of this TopicProperties.
        :type is_express: bool
        """

        self._is_express = is_express

    @property
    def max_size_in_megabytes(self):
        """Gets the max_size_in_megabytes of this TopicProperties.

        Maximum size of the topic in megabytes, which is the size of the memory allocated for the topic.

        :return: The max_size_in_megabytes of this TopicProperties.
        :rtype: int
        """
        return self._max_size_in_megabytes

    @max_size_in_megabytes.setter
    def max_size_in_megabytes(self, max_size_in_megabytes):
        """Sets the max_size_in_megabytes of this TopicProperties.

        Maximum size of the topic in megabytes, which is the size of the memory allocated for the topic.

        :param max_size_in_megabytes: The max_size_in_megabytes of this TopicProperties.
        :type max_size_in_megabytes: int
        """

        self._max_size_in_megabytes = max_size_in_megabytes

    @property
    def requires_duplicate_detection(self):
        """Gets the requires_duplicate_detection of this TopicProperties.

        Value indicating if this topic requires duplicate detection.

        :return: The requires_duplicate_detection of this TopicProperties.
        :rtype: bool
        """
        return self._requires_duplicate_detection

    @requires_duplicate_detection.setter
    def requires_duplicate_detection(self, requires_duplicate_detection):
        """Sets the requires_duplicate_detection of this TopicProperties.

        Value indicating if this topic requires duplicate detection.

        :param requires_duplicate_detection: The requires_duplicate_detection of this TopicProperties.
        :type requires_duplicate_detection: bool
        """

        self._requires_duplicate_detection = requires_duplicate_detection

    @property
    def size_in_bytes(self):
        """Gets the size_in_bytes of this TopicProperties.

        Size of the topic, in bytes.

        :return: The size_in_bytes of this TopicProperties.
        :rtype: int
        """
        return self._size_in_bytes

    @size_in_bytes.setter
    def size_in_bytes(self, size_in_bytes):
        """Sets the size_in_bytes of this TopicProperties.

        Size of the topic, in bytes.

        :param size_in_bytes: The size_in_bytes of this TopicProperties.
        :type size_in_bytes: int
        """

        self._size_in_bytes = size_in_bytes

    @property
    def status(self):
        """Gets the status of this TopicProperties.


        :return: The status of this TopicProperties.
        :rtype: EntityStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TopicProperties.


        :param status: The status of this TopicProperties.
        :type status: EntityStatus
        """

        self._status = status

    @property
    def subscription_count(self):
        """Gets the subscription_count of this TopicProperties.

        Number of subscriptions.

        :return: The subscription_count of this TopicProperties.
        :rtype: int
        """
        return self._subscription_count

    @subscription_count.setter
    def subscription_count(self, subscription_count):
        """Sets the subscription_count of this TopicProperties.

        Number of subscriptions.

        :param subscription_count: The subscription_count of this TopicProperties.
        :type subscription_count: int
        """

        self._subscription_count = subscription_count

    @property
    def support_ordering(self):
        """Gets the support_ordering of this TopicProperties.

        Value that indicates whether the topic supports ordering.

        :return: The support_ordering of this TopicProperties.
        :rtype: bool
        """
        return self._support_ordering

    @support_ordering.setter
    def support_ordering(self, support_ordering):
        """Sets the support_ordering of this TopicProperties.

        Value that indicates whether the topic supports ordering.

        :param support_ordering: The support_ordering of this TopicProperties.
        :type support_ordering: bool
        """

        self._support_ordering = support_ordering

    @property
    def updated_at(self):
        """Gets the updated_at of this TopicProperties.

        The exact time the message was updated.

        :return: The updated_at of this TopicProperties.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TopicProperties.

        The exact time the message was updated.

        :param updated_at: The updated_at of this TopicProperties.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
