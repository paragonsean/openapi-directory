# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NamespaceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_acs_namespace: bool=None, created_at: datetime=None, enabled: bool=None, provisioning_state: str=None, service_bus_endpoint: str=None, status: str=None, updated_at: datetime=None):
        """NamespaceProperties - a model defined in OpenAPI

        :param create_acs_namespace: The create_acs_namespace of this NamespaceProperties.
        :param created_at: The created_at of this NamespaceProperties.
        :param enabled: The enabled of this NamespaceProperties.
        :param provisioning_state: The provisioning_state of this NamespaceProperties.
        :param service_bus_endpoint: The service_bus_endpoint of this NamespaceProperties.
        :param status: The status of this NamespaceProperties.
        :param updated_at: The updated_at of this NamespaceProperties.
        """
        self.openapi_types = {
            'create_acs_namespace': bool,
            'created_at': datetime,
            'enabled': bool,
            'provisioning_state': str,
            'service_bus_endpoint': str,
            'status': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'create_acs_namespace': 'createACSNamespace',
            'created_at': 'createdAt',
            'enabled': 'enabled',
            'provisioning_state': 'provisioningState',
            'service_bus_endpoint': 'serviceBusEndpoint',
            'status': 'status',
            'updated_at': 'updatedAt'
        }

        self._create_acs_namespace = create_acs_namespace
        self._created_at = created_at
        self._enabled = enabled
        self._provisioning_state = provisioning_state
        self._service_bus_endpoint = service_bus_endpoint
        self._status = status
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NamespaceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NamespaceProperties of this NamespaceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_acs_namespace(self):
        """Gets the create_acs_namespace of this NamespaceProperties.

        Indicates whether to create an ACS namespace.

        :return: The create_acs_namespace of this NamespaceProperties.
        :rtype: bool
        """
        return self._create_acs_namespace

    @create_acs_namespace.setter
    def create_acs_namespace(self, create_acs_namespace):
        """Sets the create_acs_namespace of this NamespaceProperties.

        Indicates whether to create an ACS namespace.

        :param create_acs_namespace: The create_acs_namespace of this NamespaceProperties.
        :type create_acs_namespace: bool
        """

        self._create_acs_namespace = create_acs_namespace

    @property
    def created_at(self):
        """Gets the created_at of this NamespaceProperties.

        The time the namespace was created.

        :return: The created_at of this NamespaceProperties.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this NamespaceProperties.

        The time the namespace was created.

        :param created_at: The created_at of this NamespaceProperties.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def enabled(self):
        """Gets the enabled of this NamespaceProperties.

        Specifies whether this instance is enabled.

        :return: The enabled of this NamespaceProperties.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this NamespaceProperties.

        Specifies whether this instance is enabled.

        :param enabled: The enabled of this NamespaceProperties.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this NamespaceProperties.

        Provisioning state of the namespace.

        :return: The provisioning_state of this NamespaceProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this NamespaceProperties.

        Provisioning state of the namespace.

        :param provisioning_state: The provisioning_state of this NamespaceProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def service_bus_endpoint(self):
        """Gets the service_bus_endpoint of this NamespaceProperties.

        Endpoint you can use to perform Service Bus operations.

        :return: The service_bus_endpoint of this NamespaceProperties.
        :rtype: str
        """
        return self._service_bus_endpoint

    @service_bus_endpoint.setter
    def service_bus_endpoint(self, service_bus_endpoint):
        """Sets the service_bus_endpoint of this NamespaceProperties.

        Endpoint you can use to perform Service Bus operations.

        :param service_bus_endpoint: The service_bus_endpoint of this NamespaceProperties.
        :type service_bus_endpoint: str
        """

        self._service_bus_endpoint = service_bus_endpoint

    @property
    def status(self):
        """Gets the status of this NamespaceProperties.

        State of the namespace.

        :return: The status of this NamespaceProperties.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NamespaceProperties.

        State of the namespace.

        :param status: The status of this NamespaceProperties.
        :type status: str
        """
        allowed_values = ["Unknown", "Creating", "Created", "Activating", "Enabling", "Active", "Disabling", "Disabled", "SoftDeleting", "SoftDeleted", "Removing", "Removed", "Failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this NamespaceProperties.

        The time the namespace was updated.

        :return: The updated_at of this NamespaceProperties.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this NamespaceProperties.

        The time the namespace was updated.

        :param updated_at: The updated_at of this NamespaceProperties.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
