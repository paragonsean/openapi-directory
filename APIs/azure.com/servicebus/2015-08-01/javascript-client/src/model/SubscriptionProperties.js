/**
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EntityAvailabilityStatus from './EntityAvailabilityStatus';
import EntityStatus from './EntityStatus';
import MessageCountDetails from './MessageCountDetails';

/**
 * The SubscriptionProperties model module.
 * @module model/SubscriptionProperties
 * @version 2015-08-01
 */
class SubscriptionProperties {
    /**
     * Constructs a new <code>SubscriptionProperties</code>.
     * Description of Subscription Resource.
     * @alias module:model/SubscriptionProperties
     */
    constructor() { 
        
        SubscriptionProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SubscriptionProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubscriptionProperties} obj Optional instance to populate.
     * @return {module:model/SubscriptionProperties} The populated <code>SubscriptionProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubscriptionProperties();

            if (data.hasOwnProperty('accessedAt')) {
                obj['accessedAt'] = ApiClient.convertToType(data['accessedAt'], 'Date');
            }
            if (data.hasOwnProperty('autoDeleteOnIdle')) {
                obj['autoDeleteOnIdle'] = ApiClient.convertToType(data['autoDeleteOnIdle'], 'String');
            }
            if (data.hasOwnProperty('countDetails')) {
                obj['countDetails'] = MessageCountDetails.constructFromObject(data['countDetails']);
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('deadLetteringOnFilterEvaluationExceptions')) {
                obj['deadLetteringOnFilterEvaluationExceptions'] = ApiClient.convertToType(data['deadLetteringOnFilterEvaluationExceptions'], 'Boolean');
            }
            if (data.hasOwnProperty('deadLetteringOnMessageExpiration')) {
                obj['deadLetteringOnMessageExpiration'] = ApiClient.convertToType(data['deadLetteringOnMessageExpiration'], 'Boolean');
            }
            if (data.hasOwnProperty('defaultMessageTimeToLive')) {
                obj['defaultMessageTimeToLive'] = ApiClient.convertToType(data['defaultMessageTimeToLive'], 'String');
            }
            if (data.hasOwnProperty('enableBatchedOperations')) {
                obj['enableBatchedOperations'] = ApiClient.convertToType(data['enableBatchedOperations'], 'Boolean');
            }
            if (data.hasOwnProperty('entityAvailabilityStatus')) {
                obj['entityAvailabilityStatus'] = EntityAvailabilityStatus.constructFromObject(data['entityAvailabilityStatus']);
            }
            if (data.hasOwnProperty('isReadOnly')) {
                obj['isReadOnly'] = ApiClient.convertToType(data['isReadOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('lockDuration')) {
                obj['lockDuration'] = ApiClient.convertToType(data['lockDuration'], 'String');
            }
            if (data.hasOwnProperty('maxDeliveryCount')) {
                obj['maxDeliveryCount'] = ApiClient.convertToType(data['maxDeliveryCount'], 'Number');
            }
            if (data.hasOwnProperty('messageCount')) {
                obj['messageCount'] = ApiClient.convertToType(data['messageCount'], 'Number');
            }
            if (data.hasOwnProperty('requiresSession')) {
                obj['requiresSession'] = ApiClient.convertToType(data['requiresSession'], 'Boolean');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = EntityStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubscriptionProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubscriptionProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['autoDeleteOnIdle'] && !(typeof data['autoDeleteOnIdle'] === 'string' || data['autoDeleteOnIdle'] instanceof String)) {
            throw new Error("Expected the field `autoDeleteOnIdle` to be a primitive type in the JSON string but got " + data['autoDeleteOnIdle']);
        }
        // validate the optional field `countDetails`
        if (data['countDetails']) { // data not null
          MessageCountDetails.validateJSON(data['countDetails']);
        }
        // ensure the json data is a string
        if (data['defaultMessageTimeToLive'] && !(typeof data['defaultMessageTimeToLive'] === 'string' || data['defaultMessageTimeToLive'] instanceof String)) {
            throw new Error("Expected the field `defaultMessageTimeToLive` to be a primitive type in the JSON string but got " + data['defaultMessageTimeToLive']);
        }
        // ensure the json data is a string
        if (data['lockDuration'] && !(typeof data['lockDuration'] === 'string' || data['lockDuration'] instanceof String)) {
            throw new Error("Expected the field `lockDuration` to be a primitive type in the JSON string but got " + data['lockDuration']);
        }

        return true;
    }


}



/**
 * Last time there was a receive request to this subscription.
 * @member {Date} accessedAt
 */
SubscriptionProperties.prototype['accessedAt'] = undefined;

/**
 * TimeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
 * @member {String} autoDeleteOnIdle
 */
SubscriptionProperties.prototype['autoDeleteOnIdle'] = undefined;

/**
 * @member {module:model/MessageCountDetails} countDetails
 */
SubscriptionProperties.prototype['countDetails'] = undefined;

/**
 * Exact time the message was created.
 * @member {Date} createdAt
 */
SubscriptionProperties.prototype['createdAt'] = undefined;

/**
 * Value that indicates whether a subscription has dead letter support on filter evaluation exceptions.
 * @member {Boolean} deadLetteringOnFilterEvaluationExceptions
 */
SubscriptionProperties.prototype['deadLetteringOnFilterEvaluationExceptions'] = undefined;

/**
 * Value that indicates whether a subscription has dead letter support when a message expires.
 * @member {Boolean} deadLetteringOnMessageExpiration
 */
SubscriptionProperties.prototype['deadLetteringOnMessageExpiration'] = undefined;

/**
 * Default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
 * @member {String} defaultMessageTimeToLive
 */
SubscriptionProperties.prototype['defaultMessageTimeToLive'] = undefined;

/**
 * Value that indicates whether server-side batched operations are enabled.
 * @member {Boolean} enableBatchedOperations
 */
SubscriptionProperties.prototype['enableBatchedOperations'] = undefined;

/**
 * @member {module:model/EntityAvailabilityStatus} entityAvailabilityStatus
 */
SubscriptionProperties.prototype['entityAvailabilityStatus'] = undefined;

/**
 * Value that indicates whether the entity description is read-only.
 * @member {Boolean} isReadOnly
 */
SubscriptionProperties.prototype['isReadOnly'] = undefined;

/**
 * The lock duration time span for the subscription.
 * @member {String} lockDuration
 */
SubscriptionProperties.prototype['lockDuration'] = undefined;

/**
 * Number of maximum deliveries.
 * @member {Number} maxDeliveryCount
 */
SubscriptionProperties.prototype['maxDeliveryCount'] = undefined;

/**
 * Number of messages.
 * @member {Number} messageCount
 */
SubscriptionProperties.prototype['messageCount'] = undefined;

/**
 * Value indicating if a subscription supports the concept of sessions.
 * @member {Boolean} requiresSession
 */
SubscriptionProperties.prototype['requiresSession'] = undefined;

/**
 * @member {module:model/EntityStatus} status
 */
SubscriptionProperties.prototype['status'] = undefined;

/**
 * The exact time the message was updated.
 * @member {Date} updatedAt
 */
SubscriptionProperties.prototype['updatedAt'] = undefined;






export default SubscriptionProperties;

