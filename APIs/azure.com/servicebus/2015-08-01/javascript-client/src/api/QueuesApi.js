/**
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import QueueCreateOrUpdateParameters from '../model/QueueCreateOrUpdateParameters';
import QueueListResult from '../model/QueueListResult';
import QueueResource from '../model/QueueResource';
import RegenerateKeysParameters from '../model/RegenerateKeysParameters';
import ResourceListKeys from '../model/ResourceListKeys';
import SharedAccessAuthorizationRuleCreateOrUpdateParameters from '../model/SharedAccessAuthorizationRuleCreateOrUpdateParameters';
import SharedAccessAuthorizationRuleListResult from '../model/SharedAccessAuthorizationRuleListResult';
import SharedAccessAuthorizationRuleResource from '../model/SharedAccessAuthorizationRuleResource';

/**
* Queues service.
* @module api/QueuesApi
* @version 2015-08-01
*/
export default class QueuesApi {

    /**
    * Constructs a new QueuesApi. 
    * @alias module:api/QueuesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the queuesCreateOrUpdate operation.
     * @callback module:api/QueuesApi~queuesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueueResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a Service Bus queue. This operation is idempotent.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} namespaceName The namespace name
     * @param {String} queueName The queue name.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/QueueCreateOrUpdateParameters} parameters Parameters supplied to create or update a queue resource.
     * @param {module:api/QueuesApi~queuesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueueResource}
     */
    queuesCreateOrUpdate(resourceGroupName, namespaceName, queueName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling queuesCreateOrUpdate");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling queuesCreateOrUpdate");
      }
      // verify the required parameter 'queueName' is set
      if (queueName === undefined || queueName === null) {
        throw new Error("Missing the required parameter 'queueName' when calling queuesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling queuesCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling queuesCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling queuesCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'queueName': queueName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = QueueResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queuesCreateOrUpdateAuthorizationRule operation.
     * @callback module:api/QueuesApi~queuesCreateOrUpdateAuthorizationRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SharedAccessAuthorizationRuleResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an authorization rule for a queue.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} namespaceName The namespace name
     * @param {String} queueName The queue name.
     * @param {String} authorizationRuleName The authorization rule name.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/SharedAccessAuthorizationRuleCreateOrUpdateParameters} parameters The shared access authorization rule.
     * @param {module:api/QueuesApi~queuesCreateOrUpdateAuthorizationRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SharedAccessAuthorizationRuleResource}
     */
    queuesCreateOrUpdateAuthorizationRule(resourceGroupName, namespaceName, queueName, authorizationRuleName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling queuesCreateOrUpdateAuthorizationRule");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling queuesCreateOrUpdateAuthorizationRule");
      }
      // verify the required parameter 'queueName' is set
      if (queueName === undefined || queueName === null) {
        throw new Error("Missing the required parameter 'queueName' when calling queuesCreateOrUpdateAuthorizationRule");
      }
      // verify the required parameter 'authorizationRuleName' is set
      if (authorizationRuleName === undefined || authorizationRuleName === null) {
        throw new Error("Missing the required parameter 'authorizationRuleName' when calling queuesCreateOrUpdateAuthorizationRule");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling queuesCreateOrUpdateAuthorizationRule");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling queuesCreateOrUpdateAuthorizationRule");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling queuesCreateOrUpdateAuthorizationRule");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'queueName': queueName,
        'authorizationRuleName': authorizationRuleName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SharedAccessAuthorizationRuleResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}/authorizationRules/{authorizationRuleName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queuesDelete operation.
     * @callback module:api/QueuesApi~queuesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a queue from the specified namespace in a resource group.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} namespaceName The namespace name
     * @param {String} queueName The queue name.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/QueuesApi~queuesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    queuesDelete(resourceGroupName, namespaceName, queueName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling queuesDelete");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling queuesDelete");
      }
      // verify the required parameter 'queueName' is set
      if (queueName === undefined || queueName === null) {
        throw new Error("Missing the required parameter 'queueName' when calling queuesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling queuesDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling queuesDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'queueName': queueName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queuesDeleteAuthorizationRule operation.
     * @callback module:api/QueuesApi~queuesDeleteAuthorizationRuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a queue authorization rule.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} namespaceName The namespace name
     * @param {String} queueName The queue name.
     * @param {String} authorizationRuleName The authorization rule name.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/QueuesApi~queuesDeleteAuthorizationRuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    queuesDeleteAuthorizationRule(resourceGroupName, namespaceName, queueName, authorizationRuleName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling queuesDeleteAuthorizationRule");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling queuesDeleteAuthorizationRule");
      }
      // verify the required parameter 'queueName' is set
      if (queueName === undefined || queueName === null) {
        throw new Error("Missing the required parameter 'queueName' when calling queuesDeleteAuthorizationRule");
      }
      // verify the required parameter 'authorizationRuleName' is set
      if (authorizationRuleName === undefined || authorizationRuleName === null) {
        throw new Error("Missing the required parameter 'authorizationRuleName' when calling queuesDeleteAuthorizationRule");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling queuesDeleteAuthorizationRule");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling queuesDeleteAuthorizationRule");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'queueName': queueName,
        'authorizationRuleName': authorizationRuleName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}/authorizationRules/{authorizationRuleName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queuesGet operation.
     * @callback module:api/QueuesApi~queuesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueueResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a description for the specified queue.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} namespaceName The namespace name
     * @param {String} queueName The queue name.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/QueuesApi~queuesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueueResource}
     */
    queuesGet(resourceGroupName, namespaceName, queueName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling queuesGet");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling queuesGet");
      }
      // verify the required parameter 'queueName' is set
      if (queueName === undefined || queueName === null) {
        throw new Error("Missing the required parameter 'queueName' when calling queuesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling queuesGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling queuesGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'queueName': queueName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QueueResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queuesGetAuthorizationRule operation.
     * @callback module:api/QueuesApi~queuesGetAuthorizationRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SharedAccessAuthorizationRuleResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an authorization rule for a queue by rule name.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} namespaceName The namespace name
     * @param {String} queueName The queue name.
     * @param {String} authorizationRuleName The authorization rule name.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/QueuesApi~queuesGetAuthorizationRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SharedAccessAuthorizationRuleResource}
     */
    queuesGetAuthorizationRule(resourceGroupName, namespaceName, queueName, authorizationRuleName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling queuesGetAuthorizationRule");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling queuesGetAuthorizationRule");
      }
      // verify the required parameter 'queueName' is set
      if (queueName === undefined || queueName === null) {
        throw new Error("Missing the required parameter 'queueName' when calling queuesGetAuthorizationRule");
      }
      // verify the required parameter 'authorizationRuleName' is set
      if (authorizationRuleName === undefined || authorizationRuleName === null) {
        throw new Error("Missing the required parameter 'authorizationRuleName' when calling queuesGetAuthorizationRule");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling queuesGetAuthorizationRule");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling queuesGetAuthorizationRule");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'queueName': queueName,
        'authorizationRuleName': authorizationRuleName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SharedAccessAuthorizationRuleResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}/authorizationRules/{authorizationRuleName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queuesListAll operation.
     * @callback module:api/QueuesApi~queuesListAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueueListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the queues within a namespace.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} namespaceName The namespace name
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/QueuesApi~queuesListAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueueListResult}
     */
    queuesListAll(resourceGroupName, namespaceName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling queuesListAll");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling queuesListAll");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling queuesListAll");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling queuesListAll");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QueueListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queuesListAuthorizationRules operation.
     * @callback module:api/QueuesApi~queuesListAuthorizationRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SharedAccessAuthorizationRuleListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all authorization rules for a queue.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} namespaceName The namespace name
     * @param {String} queueName The queue name.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/QueuesApi~queuesListAuthorizationRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SharedAccessAuthorizationRuleListResult}
     */
    queuesListAuthorizationRules(resourceGroupName, namespaceName, queueName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling queuesListAuthorizationRules");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling queuesListAuthorizationRules");
      }
      // verify the required parameter 'queueName' is set
      if (queueName === undefined || queueName === null) {
        throw new Error("Missing the required parameter 'queueName' when calling queuesListAuthorizationRules");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling queuesListAuthorizationRules");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling queuesListAuthorizationRules");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'queueName': queueName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SharedAccessAuthorizationRuleListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}/authorizationRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queuesListKeys operation.
     * @callback module:api/QueuesApi~queuesListKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceListKeys} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Primary and secondary connection strings to the queue.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} namespaceName The namespace name
     * @param {String} queueName The queue name.
     * @param {String} authorizationRuleName The authorization rule name.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/QueuesApi~queuesListKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceListKeys}
     */
    queuesListKeys(resourceGroupName, namespaceName, queueName, authorizationRuleName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling queuesListKeys");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling queuesListKeys");
      }
      // verify the required parameter 'queueName' is set
      if (queueName === undefined || queueName === null) {
        throw new Error("Missing the required parameter 'queueName' when calling queuesListKeys");
      }
      // verify the required parameter 'authorizationRuleName' is set
      if (authorizationRuleName === undefined || authorizationRuleName === null) {
        throw new Error("Missing the required parameter 'authorizationRuleName' when calling queuesListKeys");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling queuesListKeys");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling queuesListKeys");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'queueName': queueName,
        'authorizationRuleName': authorizationRuleName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceListKeys;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}/authorizationRules/{authorizationRuleName}/ListKeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queuesPostAuthorizationRule operation.
     * @callback module:api/QueuesApi~queuesPostAuthorizationRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SharedAccessAuthorizationRuleResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an authorization rule for a queue by rule name.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} namespaceName The namespace name
     * @param {String} queueName The queue name.
     * @param {String} authorizationRuleName The authorization rule name.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/QueuesApi~queuesPostAuthorizationRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SharedAccessAuthorizationRuleResource}
     */
    queuesPostAuthorizationRule(resourceGroupName, namespaceName, queueName, authorizationRuleName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling queuesPostAuthorizationRule");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling queuesPostAuthorizationRule");
      }
      // verify the required parameter 'queueName' is set
      if (queueName === undefined || queueName === null) {
        throw new Error("Missing the required parameter 'queueName' when calling queuesPostAuthorizationRule");
      }
      // verify the required parameter 'authorizationRuleName' is set
      if (authorizationRuleName === undefined || authorizationRuleName === null) {
        throw new Error("Missing the required parameter 'authorizationRuleName' when calling queuesPostAuthorizationRule");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling queuesPostAuthorizationRule");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling queuesPostAuthorizationRule");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'queueName': queueName,
        'authorizationRuleName': authorizationRuleName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SharedAccessAuthorizationRuleResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}/authorizationRules/{authorizationRuleName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queuesRegenerateKeys operation.
     * @callback module:api/QueuesApi~queuesRegenerateKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceListKeys} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Regenerates the primary or secondary connection strings to the queue.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} namespaceName The namespace name
     * @param {String} queueName The queue name.
     * @param {String} authorizationRuleName The authorization rule name.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/RegenerateKeysParameters} parameters Parameters supplied to regenerate the authorization rule.
     * @param {module:api/QueuesApi~queuesRegenerateKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceListKeys}
     */
    queuesRegenerateKeys(resourceGroupName, namespaceName, queueName, authorizationRuleName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling queuesRegenerateKeys");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling queuesRegenerateKeys");
      }
      // verify the required parameter 'queueName' is set
      if (queueName === undefined || queueName === null) {
        throw new Error("Missing the required parameter 'queueName' when calling queuesRegenerateKeys");
      }
      // verify the required parameter 'authorizationRuleName' is set
      if (authorizationRuleName === undefined || authorizationRuleName === null) {
        throw new Error("Missing the required parameter 'authorizationRuleName' when calling queuesRegenerateKeys");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling queuesRegenerateKeys");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling queuesRegenerateKeys");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling queuesRegenerateKeys");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'queueName': queueName,
        'authorizationRuleName': authorizationRuleName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResourceListKeys;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}/authorizationRules/{authorizationRuleName}/regenerateKeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
