/**
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RegenerateKeysParameters from '../model/RegenerateKeysParameters';
import ResourceListKeys from '../model/ResourceListKeys';
import SharedAccessAuthorizationRuleCreateOrUpdateParameters from '../model/SharedAccessAuthorizationRuleCreateOrUpdateParameters';
import SharedAccessAuthorizationRuleListResult from '../model/SharedAccessAuthorizationRuleListResult';
import SharedAccessAuthorizationRuleResource from '../model/SharedAccessAuthorizationRuleResource';
import TopicCreateOrUpdateParameters from '../model/TopicCreateOrUpdateParameters';
import TopicListResult from '../model/TopicListResult';
import TopicResource from '../model/TopicResource';

/**
* Topics service.
* @module api/TopicsApi
* @version 2015-08-01
*/
export default class TopicsApi {

    /**
    * Constructs a new TopicsApi. 
    * @alias module:api/TopicsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the topicsCreateOrUpdate operation.
     * @callback module:api/TopicsApi~topicsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TopicResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a topic in the specified namespace.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} namespaceName The namespace name
     * @param {String} topicName The topic name.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/TopicCreateOrUpdateParameters} parameters Parameters supplied to create a topic resource.
     * @param {module:api/TopicsApi~topicsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TopicResource}
     */
    topicsCreateOrUpdate(resourceGroupName, namespaceName, topicName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling topicsCreateOrUpdate");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling topicsCreateOrUpdate");
      }
      // verify the required parameter 'topicName' is set
      if (topicName === undefined || topicName === null) {
        throw new Error("Missing the required parameter 'topicName' when calling topicsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling topicsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling topicsCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling topicsCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'topicName': topicName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TopicResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the topicsCreateOrUpdateAuthorizationRule operation.
     * @callback module:api/TopicsApi~topicsCreateOrUpdateAuthorizationRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SharedAccessAuthorizationRuleResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an authorization rule for the specified topic.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} namespaceName The namespace name
     * @param {String} topicName The topic name.
     * @param {String} authorizationRuleName The authorization rule name.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/SharedAccessAuthorizationRuleCreateOrUpdateParameters} parameters The shared access authorization rule.
     * @param {module:api/TopicsApi~topicsCreateOrUpdateAuthorizationRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SharedAccessAuthorizationRuleResource}
     */
    topicsCreateOrUpdateAuthorizationRule(resourceGroupName, namespaceName, topicName, authorizationRuleName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling topicsCreateOrUpdateAuthorizationRule");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling topicsCreateOrUpdateAuthorizationRule");
      }
      // verify the required parameter 'topicName' is set
      if (topicName === undefined || topicName === null) {
        throw new Error("Missing the required parameter 'topicName' when calling topicsCreateOrUpdateAuthorizationRule");
      }
      // verify the required parameter 'authorizationRuleName' is set
      if (authorizationRuleName === undefined || authorizationRuleName === null) {
        throw new Error("Missing the required parameter 'authorizationRuleName' when calling topicsCreateOrUpdateAuthorizationRule");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling topicsCreateOrUpdateAuthorizationRule");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling topicsCreateOrUpdateAuthorizationRule");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling topicsCreateOrUpdateAuthorizationRule");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'topicName': topicName,
        'authorizationRuleName': authorizationRuleName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SharedAccessAuthorizationRuleResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/authorizationRules/{authorizationRuleName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the topicsDelete operation.
     * @callback module:api/TopicsApi~topicsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a topic from the specified namespace and resource group.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} namespaceName The namespace name
     * @param {String} topicName The topic name.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/TopicsApi~topicsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    topicsDelete(resourceGroupName, namespaceName, topicName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling topicsDelete");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling topicsDelete");
      }
      // verify the required parameter 'topicName' is set
      if (topicName === undefined || topicName === null) {
        throw new Error("Missing the required parameter 'topicName' when calling topicsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling topicsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling topicsDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'topicName': topicName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the topicsDeleteAuthorizationRule operation.
     * @callback module:api/TopicsApi~topicsDeleteAuthorizationRuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a topic authorization rule.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} namespaceName The namespace name
     * @param {String} topicName The topic name.
     * @param {String} authorizationRuleName The authorization rule name.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/TopicsApi~topicsDeleteAuthorizationRuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    topicsDeleteAuthorizationRule(resourceGroupName, namespaceName, topicName, authorizationRuleName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling topicsDeleteAuthorizationRule");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling topicsDeleteAuthorizationRule");
      }
      // verify the required parameter 'topicName' is set
      if (topicName === undefined || topicName === null) {
        throw new Error("Missing the required parameter 'topicName' when calling topicsDeleteAuthorizationRule");
      }
      // verify the required parameter 'authorizationRuleName' is set
      if (authorizationRuleName === undefined || authorizationRuleName === null) {
        throw new Error("Missing the required parameter 'authorizationRuleName' when calling topicsDeleteAuthorizationRule");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling topicsDeleteAuthorizationRule");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling topicsDeleteAuthorizationRule");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'topicName': topicName,
        'authorizationRuleName': authorizationRuleName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/authorizationRules/{authorizationRuleName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the topicsGet operation.
     * @callback module:api/TopicsApi~topicsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TopicResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a description for the specified topic.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} namespaceName The namespace name
     * @param {String} topicName The topic name.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/TopicsApi~topicsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TopicResource}
     */
    topicsGet(resourceGroupName, namespaceName, topicName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling topicsGet");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling topicsGet");
      }
      // verify the required parameter 'topicName' is set
      if (topicName === undefined || topicName === null) {
        throw new Error("Missing the required parameter 'topicName' when calling topicsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling topicsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling topicsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'topicName': topicName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TopicResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the topicsGetAuthorizationRule operation.
     * @callback module:api/TopicsApi~topicsGetAuthorizationRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SharedAccessAuthorizationRuleResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the specified authorization rule.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} namespaceName The namespace name
     * @param {String} topicName The topic name.
     * @param {String} authorizationRuleName The authorization rule name.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/TopicsApi~topicsGetAuthorizationRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SharedAccessAuthorizationRuleResource}
     */
    topicsGetAuthorizationRule(resourceGroupName, namespaceName, topicName, authorizationRuleName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling topicsGetAuthorizationRule");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling topicsGetAuthorizationRule");
      }
      // verify the required parameter 'topicName' is set
      if (topicName === undefined || topicName === null) {
        throw new Error("Missing the required parameter 'topicName' when calling topicsGetAuthorizationRule");
      }
      // verify the required parameter 'authorizationRuleName' is set
      if (authorizationRuleName === undefined || authorizationRuleName === null) {
        throw new Error("Missing the required parameter 'authorizationRuleName' when calling topicsGetAuthorizationRule");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling topicsGetAuthorizationRule");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling topicsGetAuthorizationRule");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'topicName': topicName,
        'authorizationRuleName': authorizationRuleName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SharedAccessAuthorizationRuleResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/authorizationRules/{authorizationRuleName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the topicsListAll operation.
     * @callback module:api/TopicsApi~topicsListAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TopicListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the topics in a namespace.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} namespaceName The namespace name
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/TopicsApi~topicsListAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TopicListResult}
     */
    topicsListAll(resourceGroupName, namespaceName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling topicsListAll");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling topicsListAll");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling topicsListAll");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling topicsListAll");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TopicListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the topicsListAuthorizationRules operation.
     * @callback module:api/TopicsApi~topicsListAuthorizationRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SharedAccessAuthorizationRuleListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets authorization rules for a topic.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} namespaceName The namespace name
     * @param {String} topicName The topic name.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/TopicsApi~topicsListAuthorizationRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SharedAccessAuthorizationRuleListResult}
     */
    topicsListAuthorizationRules(resourceGroupName, namespaceName, topicName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling topicsListAuthorizationRules");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling topicsListAuthorizationRules");
      }
      // verify the required parameter 'topicName' is set
      if (topicName === undefined || topicName === null) {
        throw new Error("Missing the required parameter 'topicName' when calling topicsListAuthorizationRules");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling topicsListAuthorizationRules");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling topicsListAuthorizationRules");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'topicName': topicName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SharedAccessAuthorizationRuleListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/authorizationRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the topicsListKeys operation.
     * @callback module:api/TopicsApi~topicsListKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceListKeys} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the primary and secondary connection strings for the topic.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} namespaceName The namespace name
     * @param {String} topicName The topic name.
     * @param {String} authorizationRuleName The authorization rule name.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/TopicsApi~topicsListKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceListKeys}
     */
    topicsListKeys(resourceGroupName, namespaceName, topicName, authorizationRuleName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling topicsListKeys");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling topicsListKeys");
      }
      // verify the required parameter 'topicName' is set
      if (topicName === undefined || topicName === null) {
        throw new Error("Missing the required parameter 'topicName' when calling topicsListKeys");
      }
      // verify the required parameter 'authorizationRuleName' is set
      if (authorizationRuleName === undefined || authorizationRuleName === null) {
        throw new Error("Missing the required parameter 'authorizationRuleName' when calling topicsListKeys");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling topicsListKeys");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling topicsListKeys");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'topicName': topicName,
        'authorizationRuleName': authorizationRuleName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceListKeys;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/authorizationRules/{authorizationRuleName}/ListKeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the topicsPostAuthorizationRule operation.
     * @callback module:api/TopicsApi~topicsPostAuthorizationRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SharedAccessAuthorizationRuleResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the specified authorization rule.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} namespaceName The namespace name
     * @param {String} topicName The topic name.
     * @param {String} authorizationRuleName The authorization rule name.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/TopicsApi~topicsPostAuthorizationRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SharedAccessAuthorizationRuleResource}
     */
    topicsPostAuthorizationRule(resourceGroupName, namespaceName, topicName, authorizationRuleName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling topicsPostAuthorizationRule");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling topicsPostAuthorizationRule");
      }
      // verify the required parameter 'topicName' is set
      if (topicName === undefined || topicName === null) {
        throw new Error("Missing the required parameter 'topicName' when calling topicsPostAuthorizationRule");
      }
      // verify the required parameter 'authorizationRuleName' is set
      if (authorizationRuleName === undefined || authorizationRuleName === null) {
        throw new Error("Missing the required parameter 'authorizationRuleName' when calling topicsPostAuthorizationRule");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling topicsPostAuthorizationRule");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling topicsPostAuthorizationRule");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'topicName': topicName,
        'authorizationRuleName': authorizationRuleName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SharedAccessAuthorizationRuleResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/authorizationRules/{authorizationRuleName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the topicsRegenerateKeys operation.
     * @callback module:api/TopicsApi~topicsRegenerateKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceListKeys} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Regenerates primary or secondary connection strings for the topic.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} namespaceName The namespace name
     * @param {String} topicName The topic name.
     * @param {String} authorizationRuleName The authorization rule name.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/RegenerateKeysParameters} parameters Parameters supplied to regenerate the authorization rule.
     * @param {module:api/TopicsApi~topicsRegenerateKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceListKeys}
     */
    topicsRegenerateKeys(resourceGroupName, namespaceName, topicName, authorizationRuleName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling topicsRegenerateKeys");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling topicsRegenerateKeys");
      }
      // verify the required parameter 'topicName' is set
      if (topicName === undefined || topicName === null) {
        throw new Error("Missing the required parameter 'topicName' when calling topicsRegenerateKeys");
      }
      // verify the required parameter 'authorizationRuleName' is set
      if (authorizationRuleName === undefined || authorizationRuleName === null) {
        throw new Error("Missing the required parameter 'authorizationRuleName' when calling topicsRegenerateKeys");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling topicsRegenerateKeys");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling topicsRegenerateKeys");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling topicsRegenerateKeys");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'topicName': topicName,
        'authorizationRuleName': authorizationRuleName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResourceListKeys;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/authorizationRules/{authorizationRuleName}/regenerateKeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
