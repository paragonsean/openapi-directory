/**
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ServiceBusManagementClient);
  }
}(this, function(expect, ServiceBusManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ServiceBusManagementClient.QueuesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('QueuesApi', function() {
    describe('queuesCreateOrUpdate', function() {
      it('should call queuesCreateOrUpdate successfully', function(done) {
        //uncomment below and update the code to test queuesCreateOrUpdate
        //instance.queuesCreateOrUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('queuesCreateOrUpdateAuthorizationRule', function() {
      it('should call queuesCreateOrUpdateAuthorizationRule successfully', function(done) {
        //uncomment below and update the code to test queuesCreateOrUpdateAuthorizationRule
        //instance.queuesCreateOrUpdateAuthorizationRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('queuesDelete', function() {
      it('should call queuesDelete successfully', function(done) {
        //uncomment below and update the code to test queuesDelete
        //instance.queuesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('queuesDeleteAuthorizationRule', function() {
      it('should call queuesDeleteAuthorizationRule successfully', function(done) {
        //uncomment below and update the code to test queuesDeleteAuthorizationRule
        //instance.queuesDeleteAuthorizationRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('queuesGet', function() {
      it('should call queuesGet successfully', function(done) {
        //uncomment below and update the code to test queuesGet
        //instance.queuesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('queuesGetAuthorizationRule', function() {
      it('should call queuesGetAuthorizationRule successfully', function(done) {
        //uncomment below and update the code to test queuesGetAuthorizationRule
        //instance.queuesGetAuthorizationRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('queuesListAll', function() {
      it('should call queuesListAll successfully', function(done) {
        //uncomment below and update the code to test queuesListAll
        //instance.queuesListAll(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('queuesListAuthorizationRules', function() {
      it('should call queuesListAuthorizationRules successfully', function(done) {
        //uncomment below and update the code to test queuesListAuthorizationRules
        //instance.queuesListAuthorizationRules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('queuesListKeys', function() {
      it('should call queuesListKeys successfully', function(done) {
        //uncomment below and update the code to test queuesListKeys
        //instance.queuesListKeys(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('queuesPostAuthorizationRule', function() {
      it('should call queuesPostAuthorizationRule successfully', function(done) {
        //uncomment below and update the code to test queuesPostAuthorizationRule
        //instance.queuesPostAuthorizationRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('queuesRegenerateKeys', function() {
      it('should call queuesRegenerateKeys successfully', function(done) {
        //uncomment below and update the code to test queuesRegenerateKeys
        //instance.queuesRegenerateKeys(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
