/**
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2017-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SBNamespaceMigrate model module.
 * @module model/SBNamespaceMigrate
 * @version 2017-04-01
 */
class SBNamespaceMigrate {
    /**
     * Constructs a new <code>SBNamespaceMigrate</code>.
     * Namespace Migrate Object
     * @alias module:model/SBNamespaceMigrate
     * @param targetNamespaceType {module:model/SBNamespaceMigrate.TargetNamespaceTypeEnum} Type of namespaces
     */
    constructor(targetNamespaceType) { 
        
        SBNamespaceMigrate.initialize(this, targetNamespaceType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, targetNamespaceType) { 
        obj['targetNamespaceType'] = targetNamespaceType;
    }

    /**
     * Constructs a <code>SBNamespaceMigrate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SBNamespaceMigrate} obj Optional instance to populate.
     * @return {module:model/SBNamespaceMigrate} The populated <code>SBNamespaceMigrate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SBNamespaceMigrate();

            if (data.hasOwnProperty('targetNamespaceType')) {
                obj['targetNamespaceType'] = ApiClient.convertToType(data['targetNamespaceType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SBNamespaceMigrate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SBNamespaceMigrate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SBNamespaceMigrate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['targetNamespaceType'] && !(typeof data['targetNamespaceType'] === 'string' || data['targetNamespaceType'] instanceof String)) {
            throw new Error("Expected the field `targetNamespaceType` to be a primitive type in the JSON string but got " + data['targetNamespaceType']);
        }

        return true;
    }


}

SBNamespaceMigrate.RequiredProperties = ["targetNamespaceType"];

/**
 * Type of namespaces
 * @member {module:model/SBNamespaceMigrate.TargetNamespaceTypeEnum} targetNamespaceType
 */
SBNamespaceMigrate.prototype['targetNamespaceType'] = undefined;





/**
 * Allowed values for the <code>targetNamespaceType</code> property.
 * @enum {String}
 * @readonly
 */
SBNamespaceMigrate['TargetNamespaceTypeEnum'] = {

    /**
     * value: "Messaging"
     * @const
     */
    "Messaging": "Messaging",

    /**
     * value: "NotificationHub"
     * @const
     */
    "NotificationHub": "NotificationHub",

    /**
     * value: "Mixed"
     * @const
     */
    "Mixed": "Mixed",

    /**
     * value: "EventHub"
     * @const
     */
    "EventHub": "EventHub",

    /**
     * value: "Relay"
     * @const
     */
    "Relay": "Relay"
};



export default SBNamespaceMigrate;

