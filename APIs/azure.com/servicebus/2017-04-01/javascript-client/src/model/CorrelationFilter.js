/**
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2017-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CorrelationFilter model module.
 * @module model/CorrelationFilter
 * @version 2017-04-01
 */
class CorrelationFilter {
    /**
     * Constructs a new <code>CorrelationFilter</code>.
     * Represents the correlation filter expression.
     * @alias module:model/CorrelationFilter
     */
    constructor() { 
        
        CorrelationFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['requiresPreprocessing'] = true;
    }

    /**
     * Constructs a <code>CorrelationFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CorrelationFilter} obj Optional instance to populate.
     * @return {module:model/CorrelationFilter} The populated <code>CorrelationFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CorrelationFilter();

            if (data.hasOwnProperty('contentType')) {
                obj['contentType'] = ApiClient.convertToType(data['contentType'], 'String');
            }
            if (data.hasOwnProperty('correlationId')) {
                obj['correlationId'] = ApiClient.convertToType(data['correlationId'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('messageId')) {
                obj['messageId'] = ApiClient.convertToType(data['messageId'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], {'String': 'String'});
            }
            if (data.hasOwnProperty('replyTo')) {
                obj['replyTo'] = ApiClient.convertToType(data['replyTo'], 'String');
            }
            if (data.hasOwnProperty('replyToSessionId')) {
                obj['replyToSessionId'] = ApiClient.convertToType(data['replyToSessionId'], 'String');
            }
            if (data.hasOwnProperty('requiresPreprocessing')) {
                obj['requiresPreprocessing'] = ApiClient.convertToType(data['requiresPreprocessing'], 'Boolean');
            }
            if (data.hasOwnProperty('sessionId')) {
                obj['sessionId'] = ApiClient.convertToType(data['sessionId'], 'String');
            }
            if (data.hasOwnProperty('to')) {
                obj['to'] = ApiClient.convertToType(data['to'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CorrelationFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CorrelationFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['contentType'] && !(typeof data['contentType'] === 'string' || data['contentType'] instanceof String)) {
            throw new Error("Expected the field `contentType` to be a primitive type in the JSON string but got " + data['contentType']);
        }
        // ensure the json data is a string
        if (data['correlationId'] && !(typeof data['correlationId'] === 'string' || data['correlationId'] instanceof String)) {
            throw new Error("Expected the field `correlationId` to be a primitive type in the JSON string but got " + data['correlationId']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['messageId'] && !(typeof data['messageId'] === 'string' || data['messageId'] instanceof String)) {
            throw new Error("Expected the field `messageId` to be a primitive type in the JSON string but got " + data['messageId']);
        }
        // ensure the json data is a string
        if (data['replyTo'] && !(typeof data['replyTo'] === 'string' || data['replyTo'] instanceof String)) {
            throw new Error("Expected the field `replyTo` to be a primitive type in the JSON string but got " + data['replyTo']);
        }
        // ensure the json data is a string
        if (data['replyToSessionId'] && !(typeof data['replyToSessionId'] === 'string' || data['replyToSessionId'] instanceof String)) {
            throw new Error("Expected the field `replyToSessionId` to be a primitive type in the JSON string but got " + data['replyToSessionId']);
        }
        // ensure the json data is a string
        if (data['sessionId'] && !(typeof data['sessionId'] === 'string' || data['sessionId'] instanceof String)) {
            throw new Error("Expected the field `sessionId` to be a primitive type in the JSON string but got " + data['sessionId']);
        }
        // ensure the json data is a string
        if (data['to'] && !(typeof data['to'] === 'string' || data['to'] instanceof String)) {
            throw new Error("Expected the field `to` to be a primitive type in the JSON string but got " + data['to']);
        }

        return true;
    }


}



/**
 * Content type of the message.
 * @member {String} contentType
 */
CorrelationFilter.prototype['contentType'] = undefined;

/**
 * Identifier of the correlation.
 * @member {String} correlationId
 */
CorrelationFilter.prototype['correlationId'] = undefined;

/**
 * Application specific label.
 * @member {String} label
 */
CorrelationFilter.prototype['label'] = undefined;

/**
 * Identifier of the message.
 * @member {String} messageId
 */
CorrelationFilter.prototype['messageId'] = undefined;

/**
 * dictionary object for custom filters
 * @member {Object.<String, String>} properties
 */
CorrelationFilter.prototype['properties'] = undefined;

/**
 * Address of the queue to reply to.
 * @member {String} replyTo
 */
CorrelationFilter.prototype['replyTo'] = undefined;

/**
 * Session identifier to reply to.
 * @member {String} replyToSessionId
 */
CorrelationFilter.prototype['replyToSessionId'] = undefined;

/**
 * Value that indicates whether the rule action requires preprocessing.
 * @member {Boolean} requiresPreprocessing
 * @default true
 */
CorrelationFilter.prototype['requiresPreprocessing'] = true;

/**
 * Session identifier.
 * @member {String} sessionId
 */
CorrelationFilter.prototype['sessionId'] = undefined;

/**
 * Address to send to.
 * @member {String} to
 */
CorrelationFilter.prototype['to'] = undefined;






export default CorrelationFilter;

