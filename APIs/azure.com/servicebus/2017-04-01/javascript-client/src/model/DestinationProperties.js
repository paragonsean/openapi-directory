/**
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2017-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DestinationProperties model module.
 * @module model/DestinationProperties
 * @version 2017-04-01
 */
class DestinationProperties {
    /**
     * Constructs a new <code>DestinationProperties</code>.
     * Properties describing the storage account, blob container and archive name format for capture destination
     * @alias module:model/DestinationProperties
     */
    constructor() { 
        
        DestinationProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinationProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinationProperties} obj Optional instance to populate.
     * @return {module:model/DestinationProperties} The populated <code>DestinationProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinationProperties();

            if (data.hasOwnProperty('archiveNameFormat')) {
                obj['archiveNameFormat'] = ApiClient.convertToType(data['archiveNameFormat'], 'String');
            }
            if (data.hasOwnProperty('blobContainer')) {
                obj['blobContainer'] = ApiClient.convertToType(data['blobContainer'], 'String');
            }
            if (data.hasOwnProperty('storageAccountResourceId')) {
                obj['storageAccountResourceId'] = ApiClient.convertToType(data['storageAccountResourceId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinationProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinationProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['archiveNameFormat'] && !(typeof data['archiveNameFormat'] === 'string' || data['archiveNameFormat'] instanceof String)) {
            throw new Error("Expected the field `archiveNameFormat` to be a primitive type in the JSON string but got " + data['archiveNameFormat']);
        }
        // ensure the json data is a string
        if (data['blobContainer'] && !(typeof data['blobContainer'] === 'string' || data['blobContainer'] instanceof String)) {
            throw new Error("Expected the field `blobContainer` to be a primitive type in the JSON string but got " + data['blobContainer']);
        }
        // ensure the json data is a string
        if (data['storageAccountResourceId'] && !(typeof data['storageAccountResourceId'] === 'string' || data['storageAccountResourceId'] instanceof String)) {
            throw new Error("Expected the field `storageAccountResourceId` to be a primitive type in the JSON string but got " + data['storageAccountResourceId']);
        }

        return true;
    }


}



/**
 * Blob naming convention for archive, e.g. {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
 * @member {String} archiveNameFormat
 */
DestinationProperties.prototype['archiveNameFormat'] = undefined;

/**
 * Blob container Name
 * @member {String} blobContainer
 */
DestinationProperties.prototype['blobContainer'] = undefined;

/**
 * Resource id of the storage account to be used to create the blobs
 * @member {String} storageAccountResourceId
 */
DestinationProperties.prototype['storageAccountResourceId'] = undefined;






export default DestinationProperties;

