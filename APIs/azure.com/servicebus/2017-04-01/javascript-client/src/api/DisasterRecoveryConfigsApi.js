/**
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2017-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccessKeys from '../model/AccessKeys';
import ArmDisasterRecovery from '../model/ArmDisasterRecovery';
import ArmDisasterRecoveryListResult from '../model/ArmDisasterRecoveryListResult';
import CheckNameAvailability from '../model/CheckNameAvailability';
import CheckNameAvailabilityResult from '../model/CheckNameAvailabilityResult';
import ErrorResponse from '../model/ErrorResponse';
import SBAuthorizationRule from '../model/SBAuthorizationRule';
import SBAuthorizationRuleListResult from '../model/SBAuthorizationRuleListResult';

/**
* DisasterRecoveryConfigs service.
* @module api/DisasterRecoveryConfigsApi
* @version 2017-04-01
*/
export default class DisasterRecoveryConfigsApi {

    /**
    * Constructs a new DisasterRecoveryConfigsApi. 
    * @alias module:api/DisasterRecoveryConfigsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the disasterRecoveryConfigsBreakPairing operation.
     * @callback module:api/DisasterRecoveryConfigsApi~disasterRecoveryConfigsBreakPairingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation disables the Disaster Recovery and stops replicating changes from primary to secondary namespaces
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} namespaceName The namespace name
     * @param {String} alias The Disaster Recovery configuration name
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/DisasterRecoveryConfigsApi~disasterRecoveryConfigsBreakPairingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disasterRecoveryConfigsBreakPairing(resourceGroupName, namespaceName, alias, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling disasterRecoveryConfigsBreakPairing");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling disasterRecoveryConfigsBreakPairing");
      }
      // verify the required parameter 'alias' is set
      if (alias === undefined || alias === null) {
        throw new Error("Missing the required parameter 'alias' when calling disasterRecoveryConfigsBreakPairing");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling disasterRecoveryConfigsBreakPairing");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling disasterRecoveryConfigsBreakPairing");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'alias': alias,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}/breakPairing', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disasterRecoveryConfigsCheckNameAvailability operation.
     * @callback module:api/DisasterRecoveryConfigsApi~disasterRecoveryConfigsCheckNameAvailabilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckNameAvailabilityResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check the give namespace name availability.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} namespaceName The namespace name
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/CheckNameAvailability} parameters Parameters to check availability of the given namespace name
     * @param {module:api/DisasterRecoveryConfigsApi~disasterRecoveryConfigsCheckNameAvailabilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckNameAvailabilityResult}
     */
    disasterRecoveryConfigsCheckNameAvailability(resourceGroupName, namespaceName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling disasterRecoveryConfigsCheckNameAvailability");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling disasterRecoveryConfigsCheckNameAvailability");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling disasterRecoveryConfigsCheckNameAvailability");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling disasterRecoveryConfigsCheckNameAvailability");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling disasterRecoveryConfigsCheckNameAvailability");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckNameAvailabilityResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/CheckNameAvailability', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disasterRecoveryConfigsCreateOrUpdate operation.
     * @callback module:api/DisasterRecoveryConfigsApi~disasterRecoveryConfigsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArmDisasterRecovery} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a new Alias(Disaster Recovery configuration)
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} namespaceName The namespace name
     * @param {String} alias The Disaster Recovery configuration name
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/ArmDisasterRecovery} parameters Parameters required to create an Alias(Disaster Recovery configuration)
     * @param {module:api/DisasterRecoveryConfigsApi~disasterRecoveryConfigsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArmDisasterRecovery}
     */
    disasterRecoveryConfigsCreateOrUpdate(resourceGroupName, namespaceName, alias, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling disasterRecoveryConfigsCreateOrUpdate");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling disasterRecoveryConfigsCreateOrUpdate");
      }
      // verify the required parameter 'alias' is set
      if (alias === undefined || alias === null) {
        throw new Error("Missing the required parameter 'alias' when calling disasterRecoveryConfigsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling disasterRecoveryConfigsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling disasterRecoveryConfigsCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling disasterRecoveryConfigsCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'alias': alias,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ArmDisasterRecovery;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disasterRecoveryConfigsDelete operation.
     * @callback module:api/DisasterRecoveryConfigsApi~disasterRecoveryConfigsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an Alias(Disaster Recovery configuration)
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} namespaceName The namespace name
     * @param {String} alias The Disaster Recovery configuration name
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/DisasterRecoveryConfigsApi~disasterRecoveryConfigsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disasterRecoveryConfigsDelete(resourceGroupName, namespaceName, alias, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling disasterRecoveryConfigsDelete");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling disasterRecoveryConfigsDelete");
      }
      // verify the required parameter 'alias' is set
      if (alias === undefined || alias === null) {
        throw new Error("Missing the required parameter 'alias' when calling disasterRecoveryConfigsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling disasterRecoveryConfigsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling disasterRecoveryConfigsDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'alias': alias,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disasterRecoveryConfigsFailOver operation.
     * @callback module:api/DisasterRecoveryConfigsApi~disasterRecoveryConfigsFailOverCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invokes GEO DR failover and reconfigure the alias to point to the secondary namespace
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} namespaceName The namespace name
     * @param {String} alias The Disaster Recovery configuration name
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/DisasterRecoveryConfigsApi~disasterRecoveryConfigsFailOverCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disasterRecoveryConfigsFailOver(resourceGroupName, namespaceName, alias, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling disasterRecoveryConfigsFailOver");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling disasterRecoveryConfigsFailOver");
      }
      // verify the required parameter 'alias' is set
      if (alias === undefined || alias === null) {
        throw new Error("Missing the required parameter 'alias' when calling disasterRecoveryConfigsFailOver");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling disasterRecoveryConfigsFailOver");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling disasterRecoveryConfigsFailOver");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'alias': alias,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}/failover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disasterRecoveryConfigsGet operation.
     * @callback module:api/DisasterRecoveryConfigsApi~disasterRecoveryConfigsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArmDisasterRecovery} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves Alias(Disaster Recovery configuration) for primary or secondary namespace
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} namespaceName The namespace name
     * @param {String} alias The Disaster Recovery configuration name
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/DisasterRecoveryConfigsApi~disasterRecoveryConfigsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArmDisasterRecovery}
     */
    disasterRecoveryConfigsGet(resourceGroupName, namespaceName, alias, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling disasterRecoveryConfigsGet");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling disasterRecoveryConfigsGet");
      }
      // verify the required parameter 'alias' is set
      if (alias === undefined || alias === null) {
        throw new Error("Missing the required parameter 'alias' when calling disasterRecoveryConfigsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling disasterRecoveryConfigsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling disasterRecoveryConfigsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'alias': alias,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArmDisasterRecovery;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disasterRecoveryConfigsGetAuthorizationRule operation.
     * @callback module:api/DisasterRecoveryConfigsApi~disasterRecoveryConfigsGetAuthorizationRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SBAuthorizationRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an authorization rule for a namespace by rule name.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} namespaceName The namespace name
     * @param {String} alias The Disaster Recovery configuration name
     * @param {String} authorizationRuleName The authorization rule name.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/DisasterRecoveryConfigsApi~disasterRecoveryConfigsGetAuthorizationRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SBAuthorizationRule}
     */
    disasterRecoveryConfigsGetAuthorizationRule(resourceGroupName, namespaceName, alias, authorizationRuleName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling disasterRecoveryConfigsGetAuthorizationRule");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling disasterRecoveryConfigsGetAuthorizationRule");
      }
      // verify the required parameter 'alias' is set
      if (alias === undefined || alias === null) {
        throw new Error("Missing the required parameter 'alias' when calling disasterRecoveryConfigsGetAuthorizationRule");
      }
      // verify the required parameter 'authorizationRuleName' is set
      if (authorizationRuleName === undefined || authorizationRuleName === null) {
        throw new Error("Missing the required parameter 'authorizationRuleName' when calling disasterRecoveryConfigsGetAuthorizationRule");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling disasterRecoveryConfigsGetAuthorizationRule");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling disasterRecoveryConfigsGetAuthorizationRule");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'alias': alias,
        'authorizationRuleName': authorizationRuleName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SBAuthorizationRule;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}/AuthorizationRules/{authorizationRuleName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disasterRecoveryConfigsList operation.
     * @callback module:api/DisasterRecoveryConfigsApi~disasterRecoveryConfigsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArmDisasterRecoveryListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all Alias(Disaster Recovery configurations)
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} namespaceName The namespace name
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/DisasterRecoveryConfigsApi~disasterRecoveryConfigsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArmDisasterRecoveryListResult}
     */
    disasterRecoveryConfigsList(resourceGroupName, namespaceName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling disasterRecoveryConfigsList");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling disasterRecoveryConfigsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling disasterRecoveryConfigsList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling disasterRecoveryConfigsList");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArmDisasterRecoveryListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disasterRecoveryConfigsListAuthorizationRules operation.
     * @callback module:api/DisasterRecoveryConfigsApi~disasterRecoveryConfigsListAuthorizationRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SBAuthorizationRuleListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the authorization rules for a namespace.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} namespaceName The namespace name
     * @param {String} alias The Disaster Recovery configuration name
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/DisasterRecoveryConfigsApi~disasterRecoveryConfigsListAuthorizationRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SBAuthorizationRuleListResult}
     */
    disasterRecoveryConfigsListAuthorizationRules(resourceGroupName, namespaceName, alias, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling disasterRecoveryConfigsListAuthorizationRules");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling disasterRecoveryConfigsListAuthorizationRules");
      }
      // verify the required parameter 'alias' is set
      if (alias === undefined || alias === null) {
        throw new Error("Missing the required parameter 'alias' when calling disasterRecoveryConfigsListAuthorizationRules");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling disasterRecoveryConfigsListAuthorizationRules");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling disasterRecoveryConfigsListAuthorizationRules");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'alias': alias,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SBAuthorizationRuleListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}/AuthorizationRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disasterRecoveryConfigsListKeys operation.
     * @callback module:api/DisasterRecoveryConfigsApi~disasterRecoveryConfigsListKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccessKeys} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the primary and secondary connection strings for the namespace.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} namespaceName The namespace name
     * @param {String} alias The Disaster Recovery configuration name
     * @param {String} authorizationRuleName The authorization rule name.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/DisasterRecoveryConfigsApi~disasterRecoveryConfigsListKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccessKeys}
     */
    disasterRecoveryConfigsListKeys(resourceGroupName, namespaceName, alias, authorizationRuleName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling disasterRecoveryConfigsListKeys");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling disasterRecoveryConfigsListKeys");
      }
      // verify the required parameter 'alias' is set
      if (alias === undefined || alias === null) {
        throw new Error("Missing the required parameter 'alias' when calling disasterRecoveryConfigsListKeys");
      }
      // verify the required parameter 'authorizationRuleName' is set
      if (authorizationRuleName === undefined || authorizationRuleName === null) {
        throw new Error("Missing the required parameter 'authorizationRuleName' when calling disasterRecoveryConfigsListKeys");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling disasterRecoveryConfigsListKeys");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling disasterRecoveryConfigsListKeys");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'alias': alias,
        'authorizationRuleName': authorizationRuleName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccessKeys;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}/AuthorizationRules/{authorizationRuleName}/listKeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
