/**
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2017-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ServiceBusManagementClient);
  }
}(this, function(expect, ServiceBusManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ServiceBusManagementClient.TopicsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TopicsApi', function() {
    describe('topicsCreateOrUpdate', function() {
      it('should call topicsCreateOrUpdate successfully', function(done) {
        //uncomment below and update the code to test topicsCreateOrUpdate
        //instance.topicsCreateOrUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('topicsCreateOrUpdateAuthorizationRule', function() {
      it('should call topicsCreateOrUpdateAuthorizationRule successfully', function(done) {
        //uncomment below and update the code to test topicsCreateOrUpdateAuthorizationRule
        //instance.topicsCreateOrUpdateAuthorizationRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('topicsDelete', function() {
      it('should call topicsDelete successfully', function(done) {
        //uncomment below and update the code to test topicsDelete
        //instance.topicsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('topicsDeleteAuthorizationRule', function() {
      it('should call topicsDeleteAuthorizationRule successfully', function(done) {
        //uncomment below and update the code to test topicsDeleteAuthorizationRule
        //instance.topicsDeleteAuthorizationRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('topicsGet', function() {
      it('should call topicsGet successfully', function(done) {
        //uncomment below and update the code to test topicsGet
        //instance.topicsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('topicsGetAuthorizationRule', function() {
      it('should call topicsGetAuthorizationRule successfully', function(done) {
        //uncomment below and update the code to test topicsGetAuthorizationRule
        //instance.topicsGetAuthorizationRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('topicsListAuthorizationRules', function() {
      it('should call topicsListAuthorizationRules successfully', function(done) {
        //uncomment below and update the code to test topicsListAuthorizationRules
        //instance.topicsListAuthorizationRules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('topicsListByNamespace', function() {
      it('should call topicsListByNamespace successfully', function(done) {
        //uncomment below and update the code to test topicsListByNamespace
        //instance.topicsListByNamespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('topicsListKeys', function() {
      it('should call topicsListKeys successfully', function(done) {
        //uncomment below and update the code to test topicsListKeys
        //instance.topicsListKeys(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('topicsRegenerateKeys', function() {
      it('should call topicsRegenerateKeys successfully', function(done) {
        //uncomment below and update the code to test topicsRegenerateKeys
        //instance.topicsRegenerateKeys(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
