/**
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2017-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIQueuesApi_H
#define OAI_OAIQueuesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccessKeys.h"
#include "OAIErrorResponse.h"
#include "OAIRegenerateAccessKeyParameters.h"
#include "OAISBAuthorizationRule.h"
#include "OAISBAuthorizationRuleListResult.h"
#include "OAISBQueue.h"
#include "OAISBQueueListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIQueuesApi : public QObject {
    Q_OBJECT

public:
    OAIQueuesApi(const int timeOut = 0);
    ~OAIQueuesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  queue_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAISBQueue [required]
    */
    virtual void queuesCreateOrUpdate(const QString &resource_group_name, const QString &namespace_name, const QString &queue_name, const QString &api_version, const QString &subscription_id, const OAISBQueue &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  queue_name QString [required]
    * @param[in]  authorization_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAISBAuthorizationRule [required]
    */
    virtual void queuesCreateOrUpdateAuthorizationRule(const QString &resource_group_name, const QString &namespace_name, const QString &queue_name, const QString &authorization_rule_name, const QString &api_version, const QString &subscription_id, const OAISBAuthorizationRule &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  queue_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void queuesDelete(const QString &resource_group_name, const QString &namespace_name, const QString &queue_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  queue_name QString [required]
    * @param[in]  authorization_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void queuesDeleteAuthorizationRule(const QString &resource_group_name, const QString &namespace_name, const QString &queue_name, const QString &authorization_rule_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  queue_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void queuesGet(const QString &resource_group_name, const QString &namespace_name, const QString &queue_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  queue_name QString [required]
    * @param[in]  authorization_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void queuesGetAuthorizationRule(const QString &resource_group_name, const QString &namespace_name, const QString &queue_name, const QString &authorization_rule_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  queue_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void queuesListAuthorizationRules(const QString &resource_group_name, const QString &namespace_name, const QString &queue_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  skip qint32 [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void queuesListByNamespace(const QString &resource_group_name, const QString &namespace_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  queue_name QString [required]
    * @param[in]  authorization_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void queuesListKeys(const QString &resource_group_name, const QString &namespace_name, const QString &queue_name, const QString &authorization_rule_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  queue_name QString [required]
    * @param[in]  authorization_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIRegenerateAccessKeyParameters [required]
    */
    virtual void queuesRegenerateKeys(const QString &resource_group_name, const QString &namespace_name, const QString &queue_name, const QString &authorization_rule_name, const QString &api_version, const QString &subscription_id, const OAIRegenerateAccessKeyParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void queuesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void queuesCreateOrUpdateAuthorizationRuleCallback(OAIHttpRequestWorker *worker);
    void queuesDeleteCallback(OAIHttpRequestWorker *worker);
    void queuesDeleteAuthorizationRuleCallback(OAIHttpRequestWorker *worker);
    void queuesGetCallback(OAIHttpRequestWorker *worker);
    void queuesGetAuthorizationRuleCallback(OAIHttpRequestWorker *worker);
    void queuesListAuthorizationRulesCallback(OAIHttpRequestWorker *worker);
    void queuesListByNamespaceCallback(OAIHttpRequestWorker *worker);
    void queuesListKeysCallback(OAIHttpRequestWorker *worker);
    void queuesRegenerateKeysCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void queuesCreateOrUpdateSignal(OAISBQueue summary);
    void queuesCreateOrUpdateAuthorizationRuleSignal(OAISBAuthorizationRule summary);
    void queuesDeleteSignal();
    void queuesDeleteAuthorizationRuleSignal();
    void queuesGetSignal(OAISBQueue summary);
    void queuesGetAuthorizationRuleSignal(OAISBAuthorizationRule summary);
    void queuesListAuthorizationRulesSignal(OAISBAuthorizationRuleListResult summary);
    void queuesListByNamespaceSignal(OAISBQueueListResult summary);
    void queuesListKeysSignal(OAIAccessKeys summary);
    void queuesRegenerateKeysSignal(OAIAccessKeys summary);


    void queuesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAISBQueue summary);
    void queuesCreateOrUpdateAuthorizationRuleSignalFull(OAIHttpRequestWorker *worker, OAISBAuthorizationRule summary);
    void queuesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void queuesDeleteAuthorizationRuleSignalFull(OAIHttpRequestWorker *worker);
    void queuesGetSignalFull(OAIHttpRequestWorker *worker, OAISBQueue summary);
    void queuesGetAuthorizationRuleSignalFull(OAIHttpRequestWorker *worker, OAISBAuthorizationRule summary);
    void queuesListAuthorizationRulesSignalFull(OAIHttpRequestWorker *worker, OAISBAuthorizationRuleListResult summary);
    void queuesListByNamespaceSignalFull(OAIHttpRequestWorker *worker, OAISBQueueListResult summary);
    void queuesListKeysSignalFull(OAIHttpRequestWorker *worker, OAIAccessKeys summary);
    void queuesRegenerateKeysSignalFull(OAIHttpRequestWorker *worker, OAIAccessKeys summary);

    Q_DECL_DEPRECATED_X("Use queuesCreateOrUpdateSignalError() instead")
    void queuesCreateOrUpdateSignalE(OAISBQueue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queuesCreateOrUpdateSignalError(OAISBQueue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queuesCreateOrUpdateAuthorizationRuleSignalError() instead")
    void queuesCreateOrUpdateAuthorizationRuleSignalE(OAISBAuthorizationRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queuesCreateOrUpdateAuthorizationRuleSignalError(OAISBAuthorizationRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queuesDeleteSignalError() instead")
    void queuesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void queuesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queuesDeleteAuthorizationRuleSignalError() instead")
    void queuesDeleteAuthorizationRuleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void queuesDeleteAuthorizationRuleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queuesGetSignalError() instead")
    void queuesGetSignalE(OAISBQueue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queuesGetSignalError(OAISBQueue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queuesGetAuthorizationRuleSignalError() instead")
    void queuesGetAuthorizationRuleSignalE(OAISBAuthorizationRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queuesGetAuthorizationRuleSignalError(OAISBAuthorizationRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queuesListAuthorizationRulesSignalError() instead")
    void queuesListAuthorizationRulesSignalE(OAISBAuthorizationRuleListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queuesListAuthorizationRulesSignalError(OAISBAuthorizationRuleListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queuesListByNamespaceSignalError() instead")
    void queuesListByNamespaceSignalE(OAISBQueueListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queuesListByNamespaceSignalError(OAISBQueueListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queuesListKeysSignalError() instead")
    void queuesListKeysSignalE(OAIAccessKeys summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queuesListKeysSignalError(OAIAccessKeys summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queuesRegenerateKeysSignalError() instead")
    void queuesRegenerateKeysSignalE(OAIAccessKeys summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queuesRegenerateKeysSignalError(OAIAccessKeys summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use queuesCreateOrUpdateSignalErrorFull() instead")
    void queuesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queuesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queuesCreateOrUpdateAuthorizationRuleSignalErrorFull() instead")
    void queuesCreateOrUpdateAuthorizationRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queuesCreateOrUpdateAuthorizationRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queuesDeleteSignalErrorFull() instead")
    void queuesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queuesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queuesDeleteAuthorizationRuleSignalErrorFull() instead")
    void queuesDeleteAuthorizationRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queuesDeleteAuthorizationRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queuesGetSignalErrorFull() instead")
    void queuesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queuesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queuesGetAuthorizationRuleSignalErrorFull() instead")
    void queuesGetAuthorizationRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queuesGetAuthorizationRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queuesListAuthorizationRulesSignalErrorFull() instead")
    void queuesListAuthorizationRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queuesListAuthorizationRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queuesListByNamespaceSignalErrorFull() instead")
    void queuesListByNamespaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queuesListByNamespaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queuesListKeysSignalErrorFull() instead")
    void queuesListKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queuesListKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queuesRegenerateKeysSignalErrorFull() instead")
    void queuesRegenerateKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queuesRegenerateKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
