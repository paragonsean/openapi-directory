/**
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2017-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICaptureDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICaptureDescription::OAICaptureDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICaptureDescription::OAICaptureDescription() {
    this->initializeModel();
}

OAICaptureDescription::~OAICaptureDescription() {}

void OAICaptureDescription::initializeModel() {

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_encoding_isSet = false;
    m_encoding_isValid = false;

    m_interval_in_seconds_isSet = false;
    m_interval_in_seconds_isValid = false;

    m_size_limit_in_bytes_isSet = false;
    m_size_limit_in_bytes_isValid = false;
}

void OAICaptureDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICaptureDescription::fromJsonObject(QJsonObject json) {

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_encoding_isValid = ::OpenAPI::fromJsonValue(m_encoding, json[QString("encoding")]);
    m_encoding_isSet = !json[QString("encoding")].isNull() && m_encoding_isValid;

    m_interval_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_interval_in_seconds, json[QString("intervalInSeconds")]);
    m_interval_in_seconds_isSet = !json[QString("intervalInSeconds")].isNull() && m_interval_in_seconds_isValid;

    m_size_limit_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_size_limit_in_bytes, json[QString("sizeLimitInBytes")]);
    m_size_limit_in_bytes_isSet = !json[QString("sizeLimitInBytes")].isNull() && m_size_limit_in_bytes_isValid;
}

QString OAICaptureDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICaptureDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_destination.isSet()) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_encoding_isSet) {
        obj.insert(QString("encoding"), ::OpenAPI::toJsonValue(m_encoding));
    }
    if (m_interval_in_seconds_isSet) {
        obj.insert(QString("intervalInSeconds"), ::OpenAPI::toJsonValue(m_interval_in_seconds));
    }
    if (m_size_limit_in_bytes_isSet) {
        obj.insert(QString("sizeLimitInBytes"), ::OpenAPI::toJsonValue(m_size_limit_in_bytes));
    }
    return obj;
}

OAIDestination OAICaptureDescription::getDestination() const {
    return m_destination;
}
void OAICaptureDescription::setDestination(const OAIDestination &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAICaptureDescription::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAICaptureDescription::is_destination_Valid() const{
    return m_destination_isValid;
}

bool OAICaptureDescription::isEnabled() const {
    return m_enabled;
}
void OAICaptureDescription::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAICaptureDescription::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAICaptureDescription::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAICaptureDescription::getEncoding() const {
    return m_encoding;
}
void OAICaptureDescription::setEncoding(const QString &encoding) {
    m_encoding = encoding;
    m_encoding_isSet = true;
}

bool OAICaptureDescription::is_encoding_Set() const{
    return m_encoding_isSet;
}

bool OAICaptureDescription::is_encoding_Valid() const{
    return m_encoding_isValid;
}

qint32 OAICaptureDescription::getIntervalInSeconds() const {
    return m_interval_in_seconds;
}
void OAICaptureDescription::setIntervalInSeconds(const qint32 &interval_in_seconds) {
    m_interval_in_seconds = interval_in_seconds;
    m_interval_in_seconds_isSet = true;
}

bool OAICaptureDescription::is_interval_in_seconds_Set() const{
    return m_interval_in_seconds_isSet;
}

bool OAICaptureDescription::is_interval_in_seconds_Valid() const{
    return m_interval_in_seconds_isValid;
}

qint32 OAICaptureDescription::getSizeLimitInBytes() const {
    return m_size_limit_in_bytes;
}
void OAICaptureDescription::setSizeLimitInBytes(const qint32 &size_limit_in_bytes) {
    m_size_limit_in_bytes = size_limit_in_bytes;
    m_size_limit_in_bytes_isSet = true;
}

bool OAICaptureDescription::is_size_limit_in_bytes_Set() const{
    return m_size_limit_in_bytes_isSet;
}

bool OAICaptureDescription::is_size_limit_in_bytes_Valid() const{
    return m_size_limit_in_bytes_isValid;
}

bool OAICaptureDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_limit_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICaptureDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
