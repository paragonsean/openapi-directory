/**
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2017-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestination_properties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestination_properties::OAIDestination_properties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestination_properties::OAIDestination_properties() {
    this->initializeModel();
}

OAIDestination_properties::~OAIDestination_properties() {}

void OAIDestination_properties::initializeModel() {

    m_archive_name_format_isSet = false;
    m_archive_name_format_isValid = false;

    m_blob_container_isSet = false;
    m_blob_container_isValid = false;

    m_storage_account_resource_id_isSet = false;
    m_storage_account_resource_id_isValid = false;
}

void OAIDestination_properties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestination_properties::fromJsonObject(QJsonObject json) {

    m_archive_name_format_isValid = ::OpenAPI::fromJsonValue(m_archive_name_format, json[QString("archiveNameFormat")]);
    m_archive_name_format_isSet = !json[QString("archiveNameFormat")].isNull() && m_archive_name_format_isValid;

    m_blob_container_isValid = ::OpenAPI::fromJsonValue(m_blob_container, json[QString("blobContainer")]);
    m_blob_container_isSet = !json[QString("blobContainer")].isNull() && m_blob_container_isValid;

    m_storage_account_resource_id_isValid = ::OpenAPI::fromJsonValue(m_storage_account_resource_id, json[QString("storageAccountResourceId")]);
    m_storage_account_resource_id_isSet = !json[QString("storageAccountResourceId")].isNull() && m_storage_account_resource_id_isValid;
}

QString OAIDestination_properties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestination_properties::asJsonObject() const {
    QJsonObject obj;
    if (m_archive_name_format_isSet) {
        obj.insert(QString("archiveNameFormat"), ::OpenAPI::toJsonValue(m_archive_name_format));
    }
    if (m_blob_container_isSet) {
        obj.insert(QString("blobContainer"), ::OpenAPI::toJsonValue(m_blob_container));
    }
    if (m_storage_account_resource_id_isSet) {
        obj.insert(QString("storageAccountResourceId"), ::OpenAPI::toJsonValue(m_storage_account_resource_id));
    }
    return obj;
}

QString OAIDestination_properties::getArchiveNameFormat() const {
    return m_archive_name_format;
}
void OAIDestination_properties::setArchiveNameFormat(const QString &archive_name_format) {
    m_archive_name_format = archive_name_format;
    m_archive_name_format_isSet = true;
}

bool OAIDestination_properties::is_archive_name_format_Set() const{
    return m_archive_name_format_isSet;
}

bool OAIDestination_properties::is_archive_name_format_Valid() const{
    return m_archive_name_format_isValid;
}

QString OAIDestination_properties::getBlobContainer() const {
    return m_blob_container;
}
void OAIDestination_properties::setBlobContainer(const QString &blob_container) {
    m_blob_container = blob_container;
    m_blob_container_isSet = true;
}

bool OAIDestination_properties::is_blob_container_Set() const{
    return m_blob_container_isSet;
}

bool OAIDestination_properties::is_blob_container_Valid() const{
    return m_blob_container_isValid;
}

QString OAIDestination_properties::getStorageAccountResourceId() const {
    return m_storage_account_resource_id;
}
void OAIDestination_properties::setStorageAccountResourceId(const QString &storage_account_resource_id) {
    m_storage_account_resource_id = storage_account_resource_id;
    m_storage_account_resource_id_isSet = true;
}

bool OAIDestination_properties::is_storage_account_resource_id_Set() const{
    return m_storage_account_resource_id_isSet;
}

bool OAIDestination_properties::is_storage_account_resource_id_Valid() const{
    return m_storage_account_resource_id_isValid;
}

bool OAIDestination_properties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archive_name_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blob_container_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestination_properties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
