/**
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2017-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDisasterRecoveryConfigsApi_H
#define OAI_OAIDisasterRecoveryConfigsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccessKeys.h"
#include "OAIArmDisasterRecovery.h"
#include "OAIArmDisasterRecoveryListResult.h"
#include "OAICheckNameAvailability.h"
#include "OAICheckNameAvailabilityResult.h"
#include "OAIErrorResponse.h"
#include "OAISBAuthorizationRule.h"
#include "OAISBAuthorizationRuleListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDisasterRecoveryConfigsApi : public QObject {
    Q_OBJECT

public:
    OAIDisasterRecoveryConfigsApi(const int timeOut = 0);
    ~OAIDisasterRecoveryConfigsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  alias QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void disasterRecoveryConfigsBreakPairing(const QString &resource_group_name, const QString &namespace_name, const QString &alias, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAICheckNameAvailability [required]
    */
    virtual void disasterRecoveryConfigsCheckNameAvailability(const QString &resource_group_name, const QString &namespace_name, const QString &api_version, const QString &subscription_id, const OAICheckNameAvailability &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  alias QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIArmDisasterRecovery [required]
    */
    virtual void disasterRecoveryConfigsCreateOrUpdate(const QString &resource_group_name, const QString &namespace_name, const QString &alias, const QString &api_version, const QString &subscription_id, const OAIArmDisasterRecovery &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  alias QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void disasterRecoveryConfigsDelete(const QString &resource_group_name, const QString &namespace_name, const QString &alias, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  alias QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void disasterRecoveryConfigsFailOver(const QString &resource_group_name, const QString &namespace_name, const QString &alias, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  alias QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void disasterRecoveryConfigsGet(const QString &resource_group_name, const QString &namespace_name, const QString &alias, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  alias QString [required]
    * @param[in]  authorization_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void disasterRecoveryConfigsGetAuthorizationRule(const QString &resource_group_name, const QString &namespace_name, const QString &alias, const QString &authorization_rule_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void disasterRecoveryConfigsList(const QString &resource_group_name, const QString &namespace_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  alias QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void disasterRecoveryConfigsListAuthorizationRules(const QString &resource_group_name, const QString &namespace_name, const QString &alias, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  alias QString [required]
    * @param[in]  authorization_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void disasterRecoveryConfigsListKeys(const QString &resource_group_name, const QString &namespace_name, const QString &alias, const QString &authorization_rule_name, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void disasterRecoveryConfigsBreakPairingCallback(OAIHttpRequestWorker *worker);
    void disasterRecoveryConfigsCheckNameAvailabilityCallback(OAIHttpRequestWorker *worker);
    void disasterRecoveryConfigsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void disasterRecoveryConfigsDeleteCallback(OAIHttpRequestWorker *worker);
    void disasterRecoveryConfigsFailOverCallback(OAIHttpRequestWorker *worker);
    void disasterRecoveryConfigsGetCallback(OAIHttpRequestWorker *worker);
    void disasterRecoveryConfigsGetAuthorizationRuleCallback(OAIHttpRequestWorker *worker);
    void disasterRecoveryConfigsListCallback(OAIHttpRequestWorker *worker);
    void disasterRecoveryConfigsListAuthorizationRulesCallback(OAIHttpRequestWorker *worker);
    void disasterRecoveryConfigsListKeysCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void disasterRecoveryConfigsBreakPairingSignal();
    void disasterRecoveryConfigsCheckNameAvailabilitySignal(OAICheckNameAvailabilityResult summary);
    void disasterRecoveryConfigsCreateOrUpdateSignal(OAIArmDisasterRecovery summary);
    void disasterRecoveryConfigsDeleteSignal();
    void disasterRecoveryConfigsFailOverSignal();
    void disasterRecoveryConfigsGetSignal(OAIArmDisasterRecovery summary);
    void disasterRecoveryConfigsGetAuthorizationRuleSignal(OAISBAuthorizationRule summary);
    void disasterRecoveryConfigsListSignal(OAIArmDisasterRecoveryListResult summary);
    void disasterRecoveryConfigsListAuthorizationRulesSignal(OAISBAuthorizationRuleListResult summary);
    void disasterRecoveryConfigsListKeysSignal(OAIAccessKeys summary);


    void disasterRecoveryConfigsBreakPairingSignalFull(OAIHttpRequestWorker *worker);
    void disasterRecoveryConfigsCheckNameAvailabilitySignalFull(OAIHttpRequestWorker *worker, OAICheckNameAvailabilityResult summary);
    void disasterRecoveryConfigsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIArmDisasterRecovery summary);
    void disasterRecoveryConfigsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void disasterRecoveryConfigsFailOverSignalFull(OAIHttpRequestWorker *worker);
    void disasterRecoveryConfigsGetSignalFull(OAIHttpRequestWorker *worker, OAIArmDisasterRecovery summary);
    void disasterRecoveryConfigsGetAuthorizationRuleSignalFull(OAIHttpRequestWorker *worker, OAISBAuthorizationRule summary);
    void disasterRecoveryConfigsListSignalFull(OAIHttpRequestWorker *worker, OAIArmDisasterRecoveryListResult summary);
    void disasterRecoveryConfigsListAuthorizationRulesSignalFull(OAIHttpRequestWorker *worker, OAISBAuthorizationRuleListResult summary);
    void disasterRecoveryConfigsListKeysSignalFull(OAIHttpRequestWorker *worker, OAIAccessKeys summary);

    Q_DECL_DEPRECATED_X("Use disasterRecoveryConfigsBreakPairingSignalError() instead")
    void disasterRecoveryConfigsBreakPairingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void disasterRecoveryConfigsBreakPairingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disasterRecoveryConfigsCheckNameAvailabilitySignalError() instead")
    void disasterRecoveryConfigsCheckNameAvailabilitySignalE(OAICheckNameAvailabilityResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disasterRecoveryConfigsCheckNameAvailabilitySignalError(OAICheckNameAvailabilityResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disasterRecoveryConfigsCreateOrUpdateSignalError() instead")
    void disasterRecoveryConfigsCreateOrUpdateSignalE(OAIArmDisasterRecovery summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disasterRecoveryConfigsCreateOrUpdateSignalError(OAIArmDisasterRecovery summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disasterRecoveryConfigsDeleteSignalError() instead")
    void disasterRecoveryConfigsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void disasterRecoveryConfigsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disasterRecoveryConfigsFailOverSignalError() instead")
    void disasterRecoveryConfigsFailOverSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void disasterRecoveryConfigsFailOverSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disasterRecoveryConfigsGetSignalError() instead")
    void disasterRecoveryConfigsGetSignalE(OAIArmDisasterRecovery summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disasterRecoveryConfigsGetSignalError(OAIArmDisasterRecovery summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disasterRecoveryConfigsGetAuthorizationRuleSignalError() instead")
    void disasterRecoveryConfigsGetAuthorizationRuleSignalE(OAISBAuthorizationRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disasterRecoveryConfigsGetAuthorizationRuleSignalError(OAISBAuthorizationRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disasterRecoveryConfigsListSignalError() instead")
    void disasterRecoveryConfigsListSignalE(OAIArmDisasterRecoveryListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disasterRecoveryConfigsListSignalError(OAIArmDisasterRecoveryListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disasterRecoveryConfigsListAuthorizationRulesSignalError() instead")
    void disasterRecoveryConfigsListAuthorizationRulesSignalE(OAISBAuthorizationRuleListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disasterRecoveryConfigsListAuthorizationRulesSignalError(OAISBAuthorizationRuleListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disasterRecoveryConfigsListKeysSignalError() instead")
    void disasterRecoveryConfigsListKeysSignalE(OAIAccessKeys summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disasterRecoveryConfigsListKeysSignalError(OAIAccessKeys summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use disasterRecoveryConfigsBreakPairingSignalErrorFull() instead")
    void disasterRecoveryConfigsBreakPairingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disasterRecoveryConfigsBreakPairingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disasterRecoveryConfigsCheckNameAvailabilitySignalErrorFull() instead")
    void disasterRecoveryConfigsCheckNameAvailabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disasterRecoveryConfigsCheckNameAvailabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disasterRecoveryConfigsCreateOrUpdateSignalErrorFull() instead")
    void disasterRecoveryConfigsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disasterRecoveryConfigsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disasterRecoveryConfigsDeleteSignalErrorFull() instead")
    void disasterRecoveryConfigsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disasterRecoveryConfigsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disasterRecoveryConfigsFailOverSignalErrorFull() instead")
    void disasterRecoveryConfigsFailOverSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disasterRecoveryConfigsFailOverSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disasterRecoveryConfigsGetSignalErrorFull() instead")
    void disasterRecoveryConfigsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disasterRecoveryConfigsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disasterRecoveryConfigsGetAuthorizationRuleSignalErrorFull() instead")
    void disasterRecoveryConfigsGetAuthorizationRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disasterRecoveryConfigsGetAuthorizationRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disasterRecoveryConfigsListSignalErrorFull() instead")
    void disasterRecoveryConfigsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disasterRecoveryConfigsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disasterRecoveryConfigsListAuthorizationRulesSignalErrorFull() instead")
    void disasterRecoveryConfigsListAuthorizationRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disasterRecoveryConfigsListAuthorizationRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disasterRecoveryConfigsListKeysSignalErrorFull() instead")
    void disasterRecoveryConfigsListKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disasterRecoveryConfigsListKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
