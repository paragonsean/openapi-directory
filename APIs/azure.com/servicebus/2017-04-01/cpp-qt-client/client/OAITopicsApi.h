/**
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2017-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITopicsApi_H
#define OAI_OAITopicsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccessKeys.h"
#include "OAIErrorResponse.h"
#include "OAIRegenerateAccessKeyParameters.h"
#include "OAISBAuthorizationRule.h"
#include "OAISBAuthorizationRuleListResult.h"
#include "OAISBTopic.h"
#include "OAISBTopicListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITopicsApi : public QObject {
    Q_OBJECT

public:
    OAITopicsApi(const int timeOut = 0);
    ~OAITopicsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  topic_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAISBTopic [required]
    */
    virtual void topicsCreateOrUpdate(const QString &resource_group_name, const QString &namespace_name, const QString &topic_name, const QString &api_version, const QString &subscription_id, const OAISBTopic &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  topic_name QString [required]
    * @param[in]  authorization_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAISBAuthorizationRule [required]
    */
    virtual void topicsCreateOrUpdateAuthorizationRule(const QString &resource_group_name, const QString &namespace_name, const QString &topic_name, const QString &authorization_rule_name, const QString &api_version, const QString &subscription_id, const OAISBAuthorizationRule &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  topic_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void topicsDelete(const QString &resource_group_name, const QString &namespace_name, const QString &topic_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  topic_name QString [required]
    * @param[in]  authorization_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void topicsDeleteAuthorizationRule(const QString &resource_group_name, const QString &namespace_name, const QString &topic_name, const QString &authorization_rule_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  topic_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void topicsGet(const QString &resource_group_name, const QString &namespace_name, const QString &topic_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  topic_name QString [required]
    * @param[in]  authorization_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void topicsGetAuthorizationRule(const QString &resource_group_name, const QString &namespace_name, const QString &topic_name, const QString &authorization_rule_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  topic_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void topicsListAuthorizationRules(const QString &resource_group_name, const QString &namespace_name, const QString &topic_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  skip qint32 [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void topicsListByNamespace(const QString &resource_group_name, const QString &namespace_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  topic_name QString [required]
    * @param[in]  authorization_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void topicsListKeys(const QString &resource_group_name, const QString &namespace_name, const QString &topic_name, const QString &authorization_rule_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  topic_name QString [required]
    * @param[in]  authorization_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIRegenerateAccessKeyParameters [required]
    */
    virtual void topicsRegenerateKeys(const QString &resource_group_name, const QString &namespace_name, const QString &topic_name, const QString &authorization_rule_name, const QString &api_version, const QString &subscription_id, const OAIRegenerateAccessKeyParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void topicsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void topicsCreateOrUpdateAuthorizationRuleCallback(OAIHttpRequestWorker *worker);
    void topicsDeleteCallback(OAIHttpRequestWorker *worker);
    void topicsDeleteAuthorizationRuleCallback(OAIHttpRequestWorker *worker);
    void topicsGetCallback(OAIHttpRequestWorker *worker);
    void topicsGetAuthorizationRuleCallback(OAIHttpRequestWorker *worker);
    void topicsListAuthorizationRulesCallback(OAIHttpRequestWorker *worker);
    void topicsListByNamespaceCallback(OAIHttpRequestWorker *worker);
    void topicsListKeysCallback(OAIHttpRequestWorker *worker);
    void topicsRegenerateKeysCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void topicsCreateOrUpdateSignal(OAISBTopic summary);
    void topicsCreateOrUpdateAuthorizationRuleSignal(OAISBAuthorizationRule summary);
    void topicsDeleteSignal();
    void topicsDeleteAuthorizationRuleSignal();
    void topicsGetSignal(OAISBTopic summary);
    void topicsGetAuthorizationRuleSignal(OAISBAuthorizationRule summary);
    void topicsListAuthorizationRulesSignal(OAISBAuthorizationRuleListResult summary);
    void topicsListByNamespaceSignal(OAISBTopicListResult summary);
    void topicsListKeysSignal(OAIAccessKeys summary);
    void topicsRegenerateKeysSignal(OAIAccessKeys summary);


    void topicsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAISBTopic summary);
    void topicsCreateOrUpdateAuthorizationRuleSignalFull(OAIHttpRequestWorker *worker, OAISBAuthorizationRule summary);
    void topicsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void topicsDeleteAuthorizationRuleSignalFull(OAIHttpRequestWorker *worker);
    void topicsGetSignalFull(OAIHttpRequestWorker *worker, OAISBTopic summary);
    void topicsGetAuthorizationRuleSignalFull(OAIHttpRequestWorker *worker, OAISBAuthorizationRule summary);
    void topicsListAuthorizationRulesSignalFull(OAIHttpRequestWorker *worker, OAISBAuthorizationRuleListResult summary);
    void topicsListByNamespaceSignalFull(OAIHttpRequestWorker *worker, OAISBTopicListResult summary);
    void topicsListKeysSignalFull(OAIHttpRequestWorker *worker, OAIAccessKeys summary);
    void topicsRegenerateKeysSignalFull(OAIHttpRequestWorker *worker, OAIAccessKeys summary);

    Q_DECL_DEPRECATED_X("Use topicsCreateOrUpdateSignalError() instead")
    void topicsCreateOrUpdateSignalE(OAISBTopic summary, QNetworkReply::NetworkError error_type, QString error_str);
    void topicsCreateOrUpdateSignalError(OAISBTopic summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicsCreateOrUpdateAuthorizationRuleSignalError() instead")
    void topicsCreateOrUpdateAuthorizationRuleSignalE(OAISBAuthorizationRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void topicsCreateOrUpdateAuthorizationRuleSignalError(OAISBAuthorizationRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicsDeleteSignalError() instead")
    void topicsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void topicsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicsDeleteAuthorizationRuleSignalError() instead")
    void topicsDeleteAuthorizationRuleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void topicsDeleteAuthorizationRuleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicsGetSignalError() instead")
    void topicsGetSignalE(OAISBTopic summary, QNetworkReply::NetworkError error_type, QString error_str);
    void topicsGetSignalError(OAISBTopic summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicsGetAuthorizationRuleSignalError() instead")
    void topicsGetAuthorizationRuleSignalE(OAISBAuthorizationRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void topicsGetAuthorizationRuleSignalError(OAISBAuthorizationRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicsListAuthorizationRulesSignalError() instead")
    void topicsListAuthorizationRulesSignalE(OAISBAuthorizationRuleListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void topicsListAuthorizationRulesSignalError(OAISBAuthorizationRuleListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicsListByNamespaceSignalError() instead")
    void topicsListByNamespaceSignalE(OAISBTopicListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void topicsListByNamespaceSignalError(OAISBTopicListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicsListKeysSignalError() instead")
    void topicsListKeysSignalE(OAIAccessKeys summary, QNetworkReply::NetworkError error_type, QString error_str);
    void topicsListKeysSignalError(OAIAccessKeys summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicsRegenerateKeysSignalError() instead")
    void topicsRegenerateKeysSignalE(OAIAccessKeys summary, QNetworkReply::NetworkError error_type, QString error_str);
    void topicsRegenerateKeysSignalError(OAIAccessKeys summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use topicsCreateOrUpdateSignalErrorFull() instead")
    void topicsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void topicsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicsCreateOrUpdateAuthorizationRuleSignalErrorFull() instead")
    void topicsCreateOrUpdateAuthorizationRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void topicsCreateOrUpdateAuthorizationRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicsDeleteSignalErrorFull() instead")
    void topicsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void topicsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicsDeleteAuthorizationRuleSignalErrorFull() instead")
    void topicsDeleteAuthorizationRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void topicsDeleteAuthorizationRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicsGetSignalErrorFull() instead")
    void topicsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void topicsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicsGetAuthorizationRuleSignalErrorFull() instead")
    void topicsGetAuthorizationRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void topicsGetAuthorizationRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicsListAuthorizationRulesSignalErrorFull() instead")
    void topicsListAuthorizationRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void topicsListAuthorizationRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicsListByNamespaceSignalErrorFull() instead")
    void topicsListByNamespaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void topicsListByNamespaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicsListKeysSignalErrorFull() instead")
    void topicsListKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void topicsListKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicsRegenerateKeysSignalErrorFull() instead")
    void topicsRegenerateKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void topicsRegenerateKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
