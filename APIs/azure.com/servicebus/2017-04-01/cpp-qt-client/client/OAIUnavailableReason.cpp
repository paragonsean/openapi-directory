/**
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2017-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUnavailableReason.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUnavailableReason::OAIUnavailableReason(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUnavailableReason::OAIUnavailableReason() {
    this->initializeModel();
}

OAIUnavailableReason::~OAIUnavailableReason() {}

void OAIUnavailableReason::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIUnavailableReason::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIUnavailableReason::fromJson(QString jsonString) {
    
    if ( jsonString.compare("None", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnavailableReason::NONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InvalidName", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnavailableReason::INVALIDNAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SubscriptionIsDisabled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnavailableReason::SUBSCRIPTIONISDISABLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NameInUse", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnavailableReason::NAMEINUSE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NameInLockdown", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnavailableReason::NAMEINLOCKDOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TooManyNamespaceInCurrentSubscription", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnavailableReason::TOOMANYNAMESPACEINCURRENTSUBSCRIPTION;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIUnavailableReason::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIUnavailableReason::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIUnavailableReason::NONE:
            val = "None";
            break;
        case eOAIUnavailableReason::INVALIDNAME:
            val = "InvalidName";
            break;
        case eOAIUnavailableReason::SUBSCRIPTIONISDISABLED:
            val = "SubscriptionIsDisabled";
            break;
        case eOAIUnavailableReason::NAMEINUSE:
            val = "NameInUse";
            break;
        case eOAIUnavailableReason::NAMEINLOCKDOWN:
            val = "NameInLockdown";
            break;
        case eOAIUnavailableReason::TOOMANYNAMESPACEINCURRENTSUBSCRIPTION:
            val = "TooManyNamespaceInCurrentSubscription";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIUnavailableReason::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIUnavailableReason::eOAIUnavailableReason OAIUnavailableReason::getValue() const {
    return m_value;
}

void OAIUnavailableReason::setValue(const OAIUnavailableReason::eOAIUnavailableReason& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIUnavailableReason::isSet() const {
    
    return m_value_isSet;
}

bool OAIUnavailableReason::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
