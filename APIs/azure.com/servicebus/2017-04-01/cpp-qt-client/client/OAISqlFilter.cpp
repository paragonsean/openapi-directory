/**
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2017-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISqlFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISqlFilter::OAISqlFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISqlFilter::OAISqlFilter() {
    this->initializeModel();
}

OAISqlFilter::~OAISqlFilter() {}

void OAISqlFilter::initializeModel() {

    m_compatibility_level_isSet = false;
    m_compatibility_level_isValid = false;

    m_requires_preprocessing_isSet = false;
    m_requires_preprocessing_isValid = false;

    m_sql_expression_isSet = false;
    m_sql_expression_isValid = false;
}

void OAISqlFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISqlFilter::fromJsonObject(QJsonObject json) {

    m_compatibility_level_isValid = ::OpenAPI::fromJsonValue(m_compatibility_level, json[QString("compatibilityLevel")]);
    m_compatibility_level_isSet = !json[QString("compatibilityLevel")].isNull() && m_compatibility_level_isValid;

    m_requires_preprocessing_isValid = ::OpenAPI::fromJsonValue(m_requires_preprocessing, json[QString("requiresPreprocessing")]);
    m_requires_preprocessing_isSet = !json[QString("requiresPreprocessing")].isNull() && m_requires_preprocessing_isValid;

    m_sql_expression_isValid = ::OpenAPI::fromJsonValue(m_sql_expression, json[QString("sqlExpression")]);
    m_sql_expression_isSet = !json[QString("sqlExpression")].isNull() && m_sql_expression_isValid;
}

QString OAISqlFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISqlFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_compatibility_level_isSet) {
        obj.insert(QString("compatibilityLevel"), ::OpenAPI::toJsonValue(m_compatibility_level));
    }
    if (m_requires_preprocessing_isSet) {
        obj.insert(QString("requiresPreprocessing"), ::OpenAPI::toJsonValue(m_requires_preprocessing));
    }
    if (m_sql_expression_isSet) {
        obj.insert(QString("sqlExpression"), ::OpenAPI::toJsonValue(m_sql_expression));
    }
    return obj;
}

qint32 OAISqlFilter::getCompatibilityLevel() const {
    return m_compatibility_level;
}
void OAISqlFilter::setCompatibilityLevel(const qint32 &compatibility_level) {
    m_compatibility_level = compatibility_level;
    m_compatibility_level_isSet = true;
}

bool OAISqlFilter::is_compatibility_level_Set() const{
    return m_compatibility_level_isSet;
}

bool OAISqlFilter::is_compatibility_level_Valid() const{
    return m_compatibility_level_isValid;
}

bool OAISqlFilter::isRequiresPreprocessing() const {
    return m_requires_preprocessing;
}
void OAISqlFilter::setRequiresPreprocessing(const bool &requires_preprocessing) {
    m_requires_preprocessing = requires_preprocessing;
    m_requires_preprocessing_isSet = true;
}

bool OAISqlFilter::is_requires_preprocessing_Set() const{
    return m_requires_preprocessing_isSet;
}

bool OAISqlFilter::is_requires_preprocessing_Valid() const{
    return m_requires_preprocessing_isValid;
}

QString OAISqlFilter::getSqlExpression() const {
    return m_sql_expression;
}
void OAISqlFilter::setSqlExpression(const QString &sql_expression) {
    m_sql_expression = sql_expression;
    m_sql_expression_isSet = true;
}

bool OAISqlFilter::is_sql_expression_Set() const{
    return m_sql_expression_isSet;
}

bool OAISqlFilter::is_sql_expression_Valid() const{
    return m_sql_expression_isValid;
}

bool OAISqlFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compatibility_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requires_preprocessing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_expression_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISqlFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
