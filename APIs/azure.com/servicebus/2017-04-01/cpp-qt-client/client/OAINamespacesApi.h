/**
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2017-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINamespacesApi_H
#define OAI_OAINamespacesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccessKeys.h"
#include "OAICheckNameAvailability.h"
#include "OAICheckNameAvailabilityResult.h"
#include "OAIErrorResponse.h"
#include "OAINetworkRuleSet.h"
#include "OAINetworkRuleSetListResult.h"
#include "OAIRegenerateAccessKeyParameters.h"
#include "OAISBAuthorizationRule.h"
#include "OAISBAuthorizationRuleListResult.h"
#include "OAISBNamespace.h"
#include "OAISBNamespaceListResult.h"
#include "OAISBNamespaceMigrate.h"
#include "OAISBNamespaceUpdateParameters.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINamespacesApi : public QObject {
    Q_OBJECT

public:
    OAINamespacesApi(const int timeOut = 0);
    ~OAINamespacesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAICheckNameAvailability [required]
    */
    virtual void namespacesCheckNameAvailability(const QString &api_version, const QString &subscription_id, const OAICheckNameAvailability &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAISBNamespace [required]
    */
    virtual void namespacesCreateOrUpdate(const QString &resource_group_name, const QString &namespace_name, const QString &api_version, const QString &subscription_id, const OAISBNamespace &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  authorization_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAISBAuthorizationRule [required]
    */
    virtual void namespacesCreateOrUpdateAuthorizationRule(const QString &resource_group_name, const QString &namespace_name, const QString &authorization_rule_name, const QString &api_version, const QString &subscription_id, const OAISBAuthorizationRule &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAINetworkRuleSet [required]
    */
    virtual void namespacesCreateOrUpdateNetworkRuleSet(const QString &resource_group_name, const QString &namespace_name, const QString &api_version, const QString &subscription_id, const OAINetworkRuleSet &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void namespacesDelete(const QString &resource_group_name, const QString &namespace_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  authorization_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void namespacesDeleteAuthorizationRule(const QString &resource_group_name, const QString &namespace_name, const QString &authorization_rule_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void namespacesGet(const QString &resource_group_name, const QString &namespace_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  authorization_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void namespacesGetAuthorizationRule(const QString &resource_group_name, const QString &namespace_name, const QString &authorization_rule_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void namespacesGetNetworkRuleSet(const QString &resource_group_name, const QString &namespace_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void namespacesList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void namespacesListAuthorizationRules(const QString &resource_group_name, const QString &namespace_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void namespacesListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  authorization_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void namespacesListKeys(const QString &resource_group_name, const QString &namespace_name, const QString &authorization_rule_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void namespacesListNetworkRuleSets(const QString &resource_group_name, const QString &namespace_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAISBNamespaceMigrate [required]
    */
    virtual void namespacesMigrate(const QString &resource_group_name, const QString &namespace_name, const QString &api_version, const QString &subscription_id, const OAISBNamespaceMigrate &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  authorization_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIRegenerateAccessKeyParameters [required]
    */
    virtual void namespacesRegenerateKeys(const QString &resource_group_name, const QString &namespace_name, const QString &authorization_rule_name, const QString &api_version, const QString &subscription_id, const OAIRegenerateAccessKeyParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAISBNamespaceUpdateParameters [required]
    */
    virtual void namespacesUpdate(const QString &resource_group_name, const QString &namespace_name, const QString &api_version, const QString &subscription_id, const OAISBNamespaceUpdateParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void namespacesCheckNameAvailabilityCallback(OAIHttpRequestWorker *worker);
    void namespacesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void namespacesCreateOrUpdateAuthorizationRuleCallback(OAIHttpRequestWorker *worker);
    void namespacesCreateOrUpdateNetworkRuleSetCallback(OAIHttpRequestWorker *worker);
    void namespacesDeleteCallback(OAIHttpRequestWorker *worker);
    void namespacesDeleteAuthorizationRuleCallback(OAIHttpRequestWorker *worker);
    void namespacesGetCallback(OAIHttpRequestWorker *worker);
    void namespacesGetAuthorizationRuleCallback(OAIHttpRequestWorker *worker);
    void namespacesGetNetworkRuleSetCallback(OAIHttpRequestWorker *worker);
    void namespacesListCallback(OAIHttpRequestWorker *worker);
    void namespacesListAuthorizationRulesCallback(OAIHttpRequestWorker *worker);
    void namespacesListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void namespacesListKeysCallback(OAIHttpRequestWorker *worker);
    void namespacesListNetworkRuleSetsCallback(OAIHttpRequestWorker *worker);
    void namespacesMigrateCallback(OAIHttpRequestWorker *worker);
    void namespacesRegenerateKeysCallback(OAIHttpRequestWorker *worker);
    void namespacesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void namespacesCheckNameAvailabilitySignal(OAICheckNameAvailabilityResult summary);
    void namespacesCreateOrUpdateSignal(OAISBNamespace summary);
    void namespacesCreateOrUpdateAuthorizationRuleSignal(OAISBAuthorizationRule summary);
    void namespacesCreateOrUpdateNetworkRuleSetSignal(OAINetworkRuleSet summary);
    void namespacesDeleteSignal();
    void namespacesDeleteAuthorizationRuleSignal();
    void namespacesGetSignal(OAISBNamespace summary);
    void namespacesGetAuthorizationRuleSignal(OAISBAuthorizationRule summary);
    void namespacesGetNetworkRuleSetSignal(OAINetworkRuleSet summary);
    void namespacesListSignal(OAISBNamespaceListResult summary);
    void namespacesListAuthorizationRulesSignal(OAISBAuthorizationRuleListResult summary);
    void namespacesListByResourceGroupSignal(OAISBNamespaceListResult summary);
    void namespacesListKeysSignal(OAIAccessKeys summary);
    void namespacesListNetworkRuleSetsSignal(OAINetworkRuleSetListResult summary);
    void namespacesMigrateSignal();
    void namespacesRegenerateKeysSignal(OAIAccessKeys summary);
    void namespacesUpdateSignal(OAISBNamespace summary);


    void namespacesCheckNameAvailabilitySignalFull(OAIHttpRequestWorker *worker, OAICheckNameAvailabilityResult summary);
    void namespacesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAISBNamespace summary);
    void namespacesCreateOrUpdateAuthorizationRuleSignalFull(OAIHttpRequestWorker *worker, OAISBAuthorizationRule summary);
    void namespacesCreateOrUpdateNetworkRuleSetSignalFull(OAIHttpRequestWorker *worker, OAINetworkRuleSet summary);
    void namespacesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void namespacesDeleteAuthorizationRuleSignalFull(OAIHttpRequestWorker *worker);
    void namespacesGetSignalFull(OAIHttpRequestWorker *worker, OAISBNamespace summary);
    void namespacesGetAuthorizationRuleSignalFull(OAIHttpRequestWorker *worker, OAISBAuthorizationRule summary);
    void namespacesGetNetworkRuleSetSignalFull(OAIHttpRequestWorker *worker, OAINetworkRuleSet summary);
    void namespacesListSignalFull(OAIHttpRequestWorker *worker, OAISBNamespaceListResult summary);
    void namespacesListAuthorizationRulesSignalFull(OAIHttpRequestWorker *worker, OAISBAuthorizationRuleListResult summary);
    void namespacesListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAISBNamespaceListResult summary);
    void namespacesListKeysSignalFull(OAIHttpRequestWorker *worker, OAIAccessKeys summary);
    void namespacesListNetworkRuleSetsSignalFull(OAIHttpRequestWorker *worker, OAINetworkRuleSetListResult summary);
    void namespacesMigrateSignalFull(OAIHttpRequestWorker *worker);
    void namespacesRegenerateKeysSignalFull(OAIHttpRequestWorker *worker, OAIAccessKeys summary);
    void namespacesUpdateSignalFull(OAIHttpRequestWorker *worker, OAISBNamespace summary);

    Q_DECL_DEPRECATED_X("Use namespacesCheckNameAvailabilitySignalError() instead")
    void namespacesCheckNameAvailabilitySignalE(OAICheckNameAvailabilityResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesCheckNameAvailabilitySignalError(OAICheckNameAvailabilityResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesCreateOrUpdateSignalError() instead")
    void namespacesCreateOrUpdateSignalE(OAISBNamespace summary, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesCreateOrUpdateSignalError(OAISBNamespace summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesCreateOrUpdateAuthorizationRuleSignalError() instead")
    void namespacesCreateOrUpdateAuthorizationRuleSignalE(OAISBAuthorizationRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesCreateOrUpdateAuthorizationRuleSignalError(OAISBAuthorizationRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesCreateOrUpdateNetworkRuleSetSignalError() instead")
    void namespacesCreateOrUpdateNetworkRuleSetSignalE(OAINetworkRuleSet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesCreateOrUpdateNetworkRuleSetSignalError(OAINetworkRuleSet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesDeleteSignalError() instead")
    void namespacesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesDeleteAuthorizationRuleSignalError() instead")
    void namespacesDeleteAuthorizationRuleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesDeleteAuthorizationRuleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesGetSignalError() instead")
    void namespacesGetSignalE(OAISBNamespace summary, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesGetSignalError(OAISBNamespace summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesGetAuthorizationRuleSignalError() instead")
    void namespacesGetAuthorizationRuleSignalE(OAISBAuthorizationRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesGetAuthorizationRuleSignalError(OAISBAuthorizationRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesGetNetworkRuleSetSignalError() instead")
    void namespacesGetNetworkRuleSetSignalE(OAINetworkRuleSet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesGetNetworkRuleSetSignalError(OAINetworkRuleSet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesListSignalError() instead")
    void namespacesListSignalE(OAISBNamespaceListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesListSignalError(OAISBNamespaceListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesListAuthorizationRulesSignalError() instead")
    void namespacesListAuthorizationRulesSignalE(OAISBAuthorizationRuleListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesListAuthorizationRulesSignalError(OAISBAuthorizationRuleListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesListByResourceGroupSignalError() instead")
    void namespacesListByResourceGroupSignalE(OAISBNamespaceListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesListByResourceGroupSignalError(OAISBNamespaceListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesListKeysSignalError() instead")
    void namespacesListKeysSignalE(OAIAccessKeys summary, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesListKeysSignalError(OAIAccessKeys summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesListNetworkRuleSetsSignalError() instead")
    void namespacesListNetworkRuleSetsSignalE(OAINetworkRuleSetListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesListNetworkRuleSetsSignalError(OAINetworkRuleSetListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesMigrateSignalError() instead")
    void namespacesMigrateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesMigrateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesRegenerateKeysSignalError() instead")
    void namespacesRegenerateKeysSignalE(OAIAccessKeys summary, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesRegenerateKeysSignalError(OAIAccessKeys summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesUpdateSignalError() instead")
    void namespacesUpdateSignalE(OAISBNamespace summary, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesUpdateSignalError(OAISBNamespace summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use namespacesCheckNameAvailabilitySignalErrorFull() instead")
    void namespacesCheckNameAvailabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesCheckNameAvailabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesCreateOrUpdateSignalErrorFull() instead")
    void namespacesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesCreateOrUpdateAuthorizationRuleSignalErrorFull() instead")
    void namespacesCreateOrUpdateAuthorizationRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesCreateOrUpdateAuthorizationRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesCreateOrUpdateNetworkRuleSetSignalErrorFull() instead")
    void namespacesCreateOrUpdateNetworkRuleSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesCreateOrUpdateNetworkRuleSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesDeleteSignalErrorFull() instead")
    void namespacesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesDeleteAuthorizationRuleSignalErrorFull() instead")
    void namespacesDeleteAuthorizationRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesDeleteAuthorizationRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesGetSignalErrorFull() instead")
    void namespacesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesGetAuthorizationRuleSignalErrorFull() instead")
    void namespacesGetAuthorizationRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesGetAuthorizationRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesGetNetworkRuleSetSignalErrorFull() instead")
    void namespacesGetNetworkRuleSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesGetNetworkRuleSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesListSignalErrorFull() instead")
    void namespacesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesListAuthorizationRulesSignalErrorFull() instead")
    void namespacesListAuthorizationRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesListAuthorizationRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesListByResourceGroupSignalErrorFull() instead")
    void namespacesListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesListKeysSignalErrorFull() instead")
    void namespacesListKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesListKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesListNetworkRuleSetsSignalErrorFull() instead")
    void namespacesListNetworkRuleSetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesListNetworkRuleSetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesMigrateSignalErrorFull() instead")
    void namespacesMigrateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesMigrateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesRegenerateKeysSignalErrorFull() instead")
    void namespacesRegenerateKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesRegenerateKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesUpdateSignalErrorFull() instead")
    void namespacesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
