/**
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2017-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINWRuleSetVirtualNetworkRules.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINWRuleSetVirtualNetworkRules::OAINWRuleSetVirtualNetworkRules(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINWRuleSetVirtualNetworkRules::OAINWRuleSetVirtualNetworkRules() {
    this->initializeModel();
}

OAINWRuleSetVirtualNetworkRules::~OAINWRuleSetVirtualNetworkRules() {}

void OAINWRuleSetVirtualNetworkRules::initializeModel() {

    m_ignore_missing_vnet_service_endpoint_isSet = false;
    m_ignore_missing_vnet_service_endpoint_isValid = false;

    m_subnet_isSet = false;
    m_subnet_isValid = false;
}

void OAINWRuleSetVirtualNetworkRules::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINWRuleSetVirtualNetworkRules::fromJsonObject(QJsonObject json) {

    m_ignore_missing_vnet_service_endpoint_isValid = ::OpenAPI::fromJsonValue(m_ignore_missing_vnet_service_endpoint, json[QString("ignoreMissingVnetServiceEndpoint")]);
    m_ignore_missing_vnet_service_endpoint_isSet = !json[QString("ignoreMissingVnetServiceEndpoint")].isNull() && m_ignore_missing_vnet_service_endpoint_isValid;

    m_subnet_isValid = ::OpenAPI::fromJsonValue(m_subnet, json[QString("subnet")]);
    m_subnet_isSet = !json[QString("subnet")].isNull() && m_subnet_isValid;
}

QString OAINWRuleSetVirtualNetworkRules::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINWRuleSetVirtualNetworkRules::asJsonObject() const {
    QJsonObject obj;
    if (m_ignore_missing_vnet_service_endpoint_isSet) {
        obj.insert(QString("ignoreMissingVnetServiceEndpoint"), ::OpenAPI::toJsonValue(m_ignore_missing_vnet_service_endpoint));
    }
    if (m_subnet.isSet()) {
        obj.insert(QString("subnet"), ::OpenAPI::toJsonValue(m_subnet));
    }
    return obj;
}

bool OAINWRuleSetVirtualNetworkRules::isIgnoreMissingVnetServiceEndpoint() const {
    return m_ignore_missing_vnet_service_endpoint;
}
void OAINWRuleSetVirtualNetworkRules::setIgnoreMissingVnetServiceEndpoint(const bool &ignore_missing_vnet_service_endpoint) {
    m_ignore_missing_vnet_service_endpoint = ignore_missing_vnet_service_endpoint;
    m_ignore_missing_vnet_service_endpoint_isSet = true;
}

bool OAINWRuleSetVirtualNetworkRules::is_ignore_missing_vnet_service_endpoint_Set() const{
    return m_ignore_missing_vnet_service_endpoint_isSet;
}

bool OAINWRuleSetVirtualNetworkRules::is_ignore_missing_vnet_service_endpoint_Valid() const{
    return m_ignore_missing_vnet_service_endpoint_isValid;
}

OAISubnet OAINWRuleSetVirtualNetworkRules::getSubnet() const {
    return m_subnet;
}
void OAINWRuleSetVirtualNetworkRules::setSubnet(const OAISubnet &subnet) {
    m_subnet = subnet;
    m_subnet_isSet = true;
}

bool OAINWRuleSetVirtualNetworkRules::is_subnet_Set() const{
    return m_subnet_isSet;
}

bool OAINWRuleSetVirtualNetworkRules::is_subnet_Valid() const{
    return m_subnet_isValid;
}

bool OAINWRuleSetVirtualNetworkRules::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ignore_missing_vnet_service_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINWRuleSetVirtualNetworkRules::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
