/**
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2017-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICorrelationFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICorrelationFilter::OAICorrelationFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICorrelationFilter::OAICorrelationFilter() {
    this->initializeModel();
}

OAICorrelationFilter::~OAICorrelationFilter() {}

void OAICorrelationFilter::initializeModel() {

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_correlation_id_isSet = false;
    m_correlation_id_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_reply_to_isSet = false;
    m_reply_to_isValid = false;

    m_reply_to_session_id_isSet = false;
    m_reply_to_session_id_isValid = false;

    m_requires_preprocessing_isSet = false;
    m_requires_preprocessing_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;
}

void OAICorrelationFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICorrelationFilter::fromJsonObject(QJsonObject json) {

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_correlation_id_isValid = ::OpenAPI::fromJsonValue(m_correlation_id, json[QString("correlationId")]);
    m_correlation_id_isSet = !json[QString("correlationId")].isNull() && m_correlation_id_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("messageId")]);
    m_message_id_isSet = !json[QString("messageId")].isNull() && m_message_id_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_reply_to_isValid = ::OpenAPI::fromJsonValue(m_reply_to, json[QString("replyTo")]);
    m_reply_to_isSet = !json[QString("replyTo")].isNull() && m_reply_to_isValid;

    m_reply_to_session_id_isValid = ::OpenAPI::fromJsonValue(m_reply_to_session_id, json[QString("replyToSessionId")]);
    m_reply_to_session_id_isSet = !json[QString("replyToSessionId")].isNull() && m_reply_to_session_id_isValid;

    m_requires_preprocessing_isValid = ::OpenAPI::fromJsonValue(m_requires_preprocessing, json[QString("requiresPreprocessing")]);
    m_requires_preprocessing_isSet = !json[QString("requiresPreprocessing")].isNull() && m_requires_preprocessing_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("sessionId")]);
    m_session_id_isSet = !json[QString("sessionId")].isNull() && m_session_id_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;
}

QString OAICorrelationFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICorrelationFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_content_type_isSet) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_correlation_id_isSet) {
        obj.insert(QString("correlationId"), ::OpenAPI::toJsonValue(m_correlation_id));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("messageId"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_reply_to_isSet) {
        obj.insert(QString("replyTo"), ::OpenAPI::toJsonValue(m_reply_to));
    }
    if (m_reply_to_session_id_isSet) {
        obj.insert(QString("replyToSessionId"), ::OpenAPI::toJsonValue(m_reply_to_session_id));
    }
    if (m_requires_preprocessing_isSet) {
        obj.insert(QString("requiresPreprocessing"), ::OpenAPI::toJsonValue(m_requires_preprocessing));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("sessionId"), ::OpenAPI::toJsonValue(m_session_id));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    return obj;
}

QString OAICorrelationFilter::getContentType() const {
    return m_content_type;
}
void OAICorrelationFilter::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAICorrelationFilter::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAICorrelationFilter::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QString OAICorrelationFilter::getCorrelationId() const {
    return m_correlation_id;
}
void OAICorrelationFilter::setCorrelationId(const QString &correlation_id) {
    m_correlation_id = correlation_id;
    m_correlation_id_isSet = true;
}

bool OAICorrelationFilter::is_correlation_id_Set() const{
    return m_correlation_id_isSet;
}

bool OAICorrelationFilter::is_correlation_id_Valid() const{
    return m_correlation_id_isValid;
}

QString OAICorrelationFilter::getLabel() const {
    return m_label;
}
void OAICorrelationFilter::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAICorrelationFilter::is_label_Set() const{
    return m_label_isSet;
}

bool OAICorrelationFilter::is_label_Valid() const{
    return m_label_isValid;
}

QString OAICorrelationFilter::getMessageId() const {
    return m_message_id;
}
void OAICorrelationFilter::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAICorrelationFilter::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAICorrelationFilter::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QMap<QString, QString> OAICorrelationFilter::getProperties() const {
    return m_properties;
}
void OAICorrelationFilter::setProperties(const QMap<QString, QString> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAICorrelationFilter::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAICorrelationFilter::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAICorrelationFilter::getReplyTo() const {
    return m_reply_to;
}
void OAICorrelationFilter::setReplyTo(const QString &reply_to) {
    m_reply_to = reply_to;
    m_reply_to_isSet = true;
}

bool OAICorrelationFilter::is_reply_to_Set() const{
    return m_reply_to_isSet;
}

bool OAICorrelationFilter::is_reply_to_Valid() const{
    return m_reply_to_isValid;
}

QString OAICorrelationFilter::getReplyToSessionId() const {
    return m_reply_to_session_id;
}
void OAICorrelationFilter::setReplyToSessionId(const QString &reply_to_session_id) {
    m_reply_to_session_id = reply_to_session_id;
    m_reply_to_session_id_isSet = true;
}

bool OAICorrelationFilter::is_reply_to_session_id_Set() const{
    return m_reply_to_session_id_isSet;
}

bool OAICorrelationFilter::is_reply_to_session_id_Valid() const{
    return m_reply_to_session_id_isValid;
}

bool OAICorrelationFilter::isRequiresPreprocessing() const {
    return m_requires_preprocessing;
}
void OAICorrelationFilter::setRequiresPreprocessing(const bool &requires_preprocessing) {
    m_requires_preprocessing = requires_preprocessing;
    m_requires_preprocessing_isSet = true;
}

bool OAICorrelationFilter::is_requires_preprocessing_Set() const{
    return m_requires_preprocessing_isSet;
}

bool OAICorrelationFilter::is_requires_preprocessing_Valid() const{
    return m_requires_preprocessing_isValid;
}

QString OAICorrelationFilter::getSessionId() const {
    return m_session_id;
}
void OAICorrelationFilter::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAICorrelationFilter::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAICorrelationFilter::is_session_id_Valid() const{
    return m_session_id_isValid;
}

QString OAICorrelationFilter::getTo() const {
    return m_to;
}
void OAICorrelationFilter::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAICorrelationFilter::is_to_Set() const{
    return m_to_isSet;
}

bool OAICorrelationFilter::is_to_Valid() const{
    return m_to_isValid;
}

bool OAICorrelationFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_correlation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_to_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requires_preprocessing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICorrelationFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
