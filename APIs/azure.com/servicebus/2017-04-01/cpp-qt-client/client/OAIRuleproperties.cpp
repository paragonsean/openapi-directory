/**
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2017-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRuleproperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRuleproperties::OAIRuleproperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRuleproperties::OAIRuleproperties() {
    this->initializeModel();
}

OAIRuleproperties::~OAIRuleproperties() {}

void OAIRuleproperties::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_correlation_filter_isSet = false;
    m_correlation_filter_isValid = false;

    m_filter_type_isSet = false;
    m_filter_type_isValid = false;

    m_sql_filter_isSet = false;
    m_sql_filter_isValid = false;
}

void OAIRuleproperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRuleproperties::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_correlation_filter_isValid = ::OpenAPI::fromJsonValue(m_correlation_filter, json[QString("correlationFilter")]);
    m_correlation_filter_isSet = !json[QString("correlationFilter")].isNull() && m_correlation_filter_isValid;

    m_filter_type_isValid = ::OpenAPI::fromJsonValue(m_filter_type, json[QString("filterType")]);
    m_filter_type_isSet = !json[QString("filterType")].isNull() && m_filter_type_isValid;

    m_sql_filter_isValid = ::OpenAPI::fromJsonValue(m_sql_filter, json[QString("sqlFilter")]);
    m_sql_filter_isSet = !json[QString("sqlFilter")].isNull() && m_sql_filter_isValid;
}

QString OAIRuleproperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRuleproperties::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_correlation_filter.isSet()) {
        obj.insert(QString("correlationFilter"), ::OpenAPI::toJsonValue(m_correlation_filter));
    }
    if (m_filter_type.isSet()) {
        obj.insert(QString("filterType"), ::OpenAPI::toJsonValue(m_filter_type));
    }
    if (m_sql_filter.isSet()) {
        obj.insert(QString("sqlFilter"), ::OpenAPI::toJsonValue(m_sql_filter));
    }
    return obj;
}

OAIAction OAIRuleproperties::getAction() const {
    return m_action;
}
void OAIRuleproperties::setAction(const OAIAction &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIRuleproperties::is_action_Set() const{
    return m_action_isSet;
}

bool OAIRuleproperties::is_action_Valid() const{
    return m_action_isValid;
}

OAICorrelationFilter OAIRuleproperties::getCorrelationFilter() const {
    return m_correlation_filter;
}
void OAIRuleproperties::setCorrelationFilter(const OAICorrelationFilter &correlation_filter) {
    m_correlation_filter = correlation_filter;
    m_correlation_filter_isSet = true;
}

bool OAIRuleproperties::is_correlation_filter_Set() const{
    return m_correlation_filter_isSet;
}

bool OAIRuleproperties::is_correlation_filter_Valid() const{
    return m_correlation_filter_isValid;
}

OAIFilterType OAIRuleproperties::getFilterType() const {
    return m_filter_type;
}
void OAIRuleproperties::setFilterType(const OAIFilterType &filter_type) {
    m_filter_type = filter_type;
    m_filter_type_isSet = true;
}

bool OAIRuleproperties::is_filter_type_Set() const{
    return m_filter_type_isSet;
}

bool OAIRuleproperties::is_filter_type_Valid() const{
    return m_filter_type_isValid;
}

OAISqlFilter OAIRuleproperties::getSqlFilter() const {
    return m_sql_filter;
}
void OAIRuleproperties::setSqlFilter(const OAISqlFilter &sql_filter) {
    m_sql_filter = sql_filter;
    m_sql_filter_isSet = true;
}

bool OAIRuleproperties::is_sql_filter_Set() const{
    return m_sql_filter_isSet;
}

bool OAIRuleproperties::is_sql_filter_Valid() const{
    return m_sql_filter_isValid;
}

bool OAIRuleproperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_correlation_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRuleproperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
