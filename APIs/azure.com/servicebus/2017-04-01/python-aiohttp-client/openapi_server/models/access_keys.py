# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccessKeys(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alias_primary_connection_string: str=None, alias_secondary_connection_string: str=None, key_name: str=None, primary_connection_string: str=None, primary_key: str=None, secondary_connection_string: str=None, secondary_key: str=None):
        """AccessKeys - a model defined in OpenAPI

        :param alias_primary_connection_string: The alias_primary_connection_string of this AccessKeys.
        :param alias_secondary_connection_string: The alias_secondary_connection_string of this AccessKeys.
        :param key_name: The key_name of this AccessKeys.
        :param primary_connection_string: The primary_connection_string of this AccessKeys.
        :param primary_key: The primary_key of this AccessKeys.
        :param secondary_connection_string: The secondary_connection_string of this AccessKeys.
        :param secondary_key: The secondary_key of this AccessKeys.
        """
        self.openapi_types = {
            'alias_primary_connection_string': str,
            'alias_secondary_connection_string': str,
            'key_name': str,
            'primary_connection_string': str,
            'primary_key': str,
            'secondary_connection_string': str,
            'secondary_key': str
        }

        self.attribute_map = {
            'alias_primary_connection_string': 'aliasPrimaryConnectionString',
            'alias_secondary_connection_string': 'aliasSecondaryConnectionString',
            'key_name': 'keyName',
            'primary_connection_string': 'primaryConnectionString',
            'primary_key': 'primaryKey',
            'secondary_connection_string': 'secondaryConnectionString',
            'secondary_key': 'secondaryKey'
        }

        self._alias_primary_connection_string = alias_primary_connection_string
        self._alias_secondary_connection_string = alias_secondary_connection_string
        self._key_name = key_name
        self._primary_connection_string = primary_connection_string
        self._primary_key = primary_key
        self._secondary_connection_string = secondary_connection_string
        self._secondary_key = secondary_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccessKeys':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccessKeys of this AccessKeys.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alias_primary_connection_string(self):
        """Gets the alias_primary_connection_string of this AccessKeys.

        Primary connection string of the alias if GEO DR is enabled

        :return: The alias_primary_connection_string of this AccessKeys.
        :rtype: str
        """
        return self._alias_primary_connection_string

    @alias_primary_connection_string.setter
    def alias_primary_connection_string(self, alias_primary_connection_string):
        """Sets the alias_primary_connection_string of this AccessKeys.

        Primary connection string of the alias if GEO DR is enabled

        :param alias_primary_connection_string: The alias_primary_connection_string of this AccessKeys.
        :type alias_primary_connection_string: str
        """

        self._alias_primary_connection_string = alias_primary_connection_string

    @property
    def alias_secondary_connection_string(self):
        """Gets the alias_secondary_connection_string of this AccessKeys.

        Secondary  connection string of the alias if GEO DR is enabled

        :return: The alias_secondary_connection_string of this AccessKeys.
        :rtype: str
        """
        return self._alias_secondary_connection_string

    @alias_secondary_connection_string.setter
    def alias_secondary_connection_string(self, alias_secondary_connection_string):
        """Sets the alias_secondary_connection_string of this AccessKeys.

        Secondary  connection string of the alias if GEO DR is enabled

        :param alias_secondary_connection_string: The alias_secondary_connection_string of this AccessKeys.
        :type alias_secondary_connection_string: str
        """

        self._alias_secondary_connection_string = alias_secondary_connection_string

    @property
    def key_name(self):
        """Gets the key_name of this AccessKeys.

        A string that describes the authorization rule.

        :return: The key_name of this AccessKeys.
        :rtype: str
        """
        return self._key_name

    @key_name.setter
    def key_name(self, key_name):
        """Sets the key_name of this AccessKeys.

        A string that describes the authorization rule.

        :param key_name: The key_name of this AccessKeys.
        :type key_name: str
        """

        self._key_name = key_name

    @property
    def primary_connection_string(self):
        """Gets the primary_connection_string of this AccessKeys.

        Primary connection string of the created namespace authorization rule.

        :return: The primary_connection_string of this AccessKeys.
        :rtype: str
        """
        return self._primary_connection_string

    @primary_connection_string.setter
    def primary_connection_string(self, primary_connection_string):
        """Sets the primary_connection_string of this AccessKeys.

        Primary connection string of the created namespace authorization rule.

        :param primary_connection_string: The primary_connection_string of this AccessKeys.
        :type primary_connection_string: str
        """

        self._primary_connection_string = primary_connection_string

    @property
    def primary_key(self):
        """Gets the primary_key of this AccessKeys.

        A base64-encoded 256-bit primary key for signing and validating the SAS token.

        :return: The primary_key of this AccessKeys.
        :rtype: str
        """
        return self._primary_key

    @primary_key.setter
    def primary_key(self, primary_key):
        """Sets the primary_key of this AccessKeys.

        A base64-encoded 256-bit primary key for signing and validating the SAS token.

        :param primary_key: The primary_key of this AccessKeys.
        :type primary_key: str
        """

        self._primary_key = primary_key

    @property
    def secondary_connection_string(self):
        """Gets the secondary_connection_string of this AccessKeys.

        Secondary connection string of the created namespace authorization rule.

        :return: The secondary_connection_string of this AccessKeys.
        :rtype: str
        """
        return self._secondary_connection_string

    @secondary_connection_string.setter
    def secondary_connection_string(self, secondary_connection_string):
        """Sets the secondary_connection_string of this AccessKeys.

        Secondary connection string of the created namespace authorization rule.

        :param secondary_connection_string: The secondary_connection_string of this AccessKeys.
        :type secondary_connection_string: str
        """

        self._secondary_connection_string = secondary_connection_string

    @property
    def secondary_key(self):
        """Gets the secondary_key of this AccessKeys.

        A base64-encoded 256-bit primary key for signing and validating the SAS token.

        :return: The secondary_key of this AccessKeys.
        :rtype: str
        """
        return self._secondary_key

    @secondary_key.setter
    def secondary_key(self, secondary_key):
        """Sets the secondary_key of this AccessKeys.

        A base64-encoded 256-bit primary key for signing and validating the SAS token.

        :param secondary_key: The secondary_key of this AccessKeys.
        :type secondary_key: str
        """

        self._secondary_key = secondary_key
