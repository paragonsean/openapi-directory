# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuthorizationRuleProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rights: List[str]=None):
        """AuthorizationRuleProperties - a model defined in OpenAPI

        :param rights: The rights of this AuthorizationRuleProperties.
        """
        self.openapi_types = {
            'rights': List[str]
        }

        self.attribute_map = {
            'rights': 'rights'
        }

        self._rights = rights

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthorizationRuleProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthorizationRuleProperties of this AuthorizationRuleProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rights(self):
        """Gets the rights of this AuthorizationRuleProperties.

        The rights associated with the rule.

        :return: The rights of this AuthorizationRuleProperties.
        :rtype: List[str]
        """
        return self._rights

    @rights.setter
    def rights(self, rights):
        """Sets the rights of this AuthorizationRuleProperties.

        The rights associated with the rule.

        :param rights: The rights of this AuthorizationRuleProperties.
        :type rights: List[str]
        """
        allowed_values = ["Manage", "Send", "Listen"]  # noqa: E501
        if not set(rights).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `rights` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(rights) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._rights = rights
