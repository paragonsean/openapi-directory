# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entity_status import EntityStatus
from openapi_server.models.message_count_details import MessageCountDetails
from openapi_server import util


class SBQueueProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accessed_at: datetime=None, auto_delete_on_idle: str=None, count_details: MessageCountDetails=None, created_at: datetime=None, dead_lettering_on_message_expiration: bool=None, default_message_time_to_live: str=None, duplicate_detection_history_time_window: str=None, enable_batched_operations: bool=None, enable_express: bool=None, enable_partitioning: bool=None, forward_dead_lettered_messages_to: str=None, forward_to: str=None, lock_duration: str=None, max_delivery_count: int=None, max_size_in_megabytes: int=None, message_count: int=None, requires_duplicate_detection: bool=None, requires_session: bool=None, size_in_bytes: int=None, status: EntityStatus=None, updated_at: datetime=None):
        """SBQueueProperties - a model defined in OpenAPI

        :param accessed_at: The accessed_at of this SBQueueProperties.
        :param auto_delete_on_idle: The auto_delete_on_idle of this SBQueueProperties.
        :param count_details: The count_details of this SBQueueProperties.
        :param created_at: The created_at of this SBQueueProperties.
        :param dead_lettering_on_message_expiration: The dead_lettering_on_message_expiration of this SBQueueProperties.
        :param default_message_time_to_live: The default_message_time_to_live of this SBQueueProperties.
        :param duplicate_detection_history_time_window: The duplicate_detection_history_time_window of this SBQueueProperties.
        :param enable_batched_operations: The enable_batched_operations of this SBQueueProperties.
        :param enable_express: The enable_express of this SBQueueProperties.
        :param enable_partitioning: The enable_partitioning of this SBQueueProperties.
        :param forward_dead_lettered_messages_to: The forward_dead_lettered_messages_to of this SBQueueProperties.
        :param forward_to: The forward_to of this SBQueueProperties.
        :param lock_duration: The lock_duration of this SBQueueProperties.
        :param max_delivery_count: The max_delivery_count of this SBQueueProperties.
        :param max_size_in_megabytes: The max_size_in_megabytes of this SBQueueProperties.
        :param message_count: The message_count of this SBQueueProperties.
        :param requires_duplicate_detection: The requires_duplicate_detection of this SBQueueProperties.
        :param requires_session: The requires_session of this SBQueueProperties.
        :param size_in_bytes: The size_in_bytes of this SBQueueProperties.
        :param status: The status of this SBQueueProperties.
        :param updated_at: The updated_at of this SBQueueProperties.
        """
        self.openapi_types = {
            'accessed_at': datetime,
            'auto_delete_on_idle': str,
            'count_details': MessageCountDetails,
            'created_at': datetime,
            'dead_lettering_on_message_expiration': bool,
            'default_message_time_to_live': str,
            'duplicate_detection_history_time_window': str,
            'enable_batched_operations': bool,
            'enable_express': bool,
            'enable_partitioning': bool,
            'forward_dead_lettered_messages_to': str,
            'forward_to': str,
            'lock_duration': str,
            'max_delivery_count': int,
            'max_size_in_megabytes': int,
            'message_count': int,
            'requires_duplicate_detection': bool,
            'requires_session': bool,
            'size_in_bytes': int,
            'status': EntityStatus,
            'updated_at': datetime
        }

        self.attribute_map = {
            'accessed_at': 'accessedAt',
            'auto_delete_on_idle': 'autoDeleteOnIdle',
            'count_details': 'countDetails',
            'created_at': 'createdAt',
            'dead_lettering_on_message_expiration': 'deadLetteringOnMessageExpiration',
            'default_message_time_to_live': 'defaultMessageTimeToLive',
            'duplicate_detection_history_time_window': 'duplicateDetectionHistoryTimeWindow',
            'enable_batched_operations': 'enableBatchedOperations',
            'enable_express': 'enableExpress',
            'enable_partitioning': 'enablePartitioning',
            'forward_dead_lettered_messages_to': 'forwardDeadLetteredMessagesTo',
            'forward_to': 'forwardTo',
            'lock_duration': 'lockDuration',
            'max_delivery_count': 'maxDeliveryCount',
            'max_size_in_megabytes': 'maxSizeInMegabytes',
            'message_count': 'messageCount',
            'requires_duplicate_detection': 'requiresDuplicateDetection',
            'requires_session': 'requiresSession',
            'size_in_bytes': 'sizeInBytes',
            'status': 'status',
            'updated_at': 'updatedAt'
        }

        self._accessed_at = accessed_at
        self._auto_delete_on_idle = auto_delete_on_idle
        self._count_details = count_details
        self._created_at = created_at
        self._dead_lettering_on_message_expiration = dead_lettering_on_message_expiration
        self._default_message_time_to_live = default_message_time_to_live
        self._duplicate_detection_history_time_window = duplicate_detection_history_time_window
        self._enable_batched_operations = enable_batched_operations
        self._enable_express = enable_express
        self._enable_partitioning = enable_partitioning
        self._forward_dead_lettered_messages_to = forward_dead_lettered_messages_to
        self._forward_to = forward_to
        self._lock_duration = lock_duration
        self._max_delivery_count = max_delivery_count
        self._max_size_in_megabytes = max_size_in_megabytes
        self._message_count = message_count
        self._requires_duplicate_detection = requires_duplicate_detection
        self._requires_session = requires_session
        self._size_in_bytes = size_in_bytes
        self._status = status
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SBQueueProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SBQueueProperties of this SBQueueProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accessed_at(self):
        """Gets the accessed_at of this SBQueueProperties.

        Last time a message was sent, or the last time there was a receive request to this queue.

        :return: The accessed_at of this SBQueueProperties.
        :rtype: datetime
        """
        return self._accessed_at

    @accessed_at.setter
    def accessed_at(self, accessed_at):
        """Sets the accessed_at of this SBQueueProperties.

        Last time a message was sent, or the last time there was a receive request to this queue.

        :param accessed_at: The accessed_at of this SBQueueProperties.
        :type accessed_at: datetime
        """

        self._accessed_at = accessed_at

    @property
    def auto_delete_on_idle(self):
        """Gets the auto_delete_on_idle of this SBQueueProperties.

        ISO 8061 timeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes.

        :return: The auto_delete_on_idle of this SBQueueProperties.
        :rtype: str
        """
        return self._auto_delete_on_idle

    @auto_delete_on_idle.setter
    def auto_delete_on_idle(self, auto_delete_on_idle):
        """Sets the auto_delete_on_idle of this SBQueueProperties.

        ISO 8061 timeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes.

        :param auto_delete_on_idle: The auto_delete_on_idle of this SBQueueProperties.
        :type auto_delete_on_idle: str
        """

        self._auto_delete_on_idle = auto_delete_on_idle

    @property
    def count_details(self):
        """Gets the count_details of this SBQueueProperties.


        :return: The count_details of this SBQueueProperties.
        :rtype: MessageCountDetails
        """
        return self._count_details

    @count_details.setter
    def count_details(self, count_details):
        """Sets the count_details of this SBQueueProperties.


        :param count_details: The count_details of this SBQueueProperties.
        :type count_details: MessageCountDetails
        """

        self._count_details = count_details

    @property
    def created_at(self):
        """Gets the created_at of this SBQueueProperties.

        The exact time the message was created.

        :return: The created_at of this SBQueueProperties.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SBQueueProperties.

        The exact time the message was created.

        :param created_at: The created_at of this SBQueueProperties.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def dead_lettering_on_message_expiration(self):
        """Gets the dead_lettering_on_message_expiration of this SBQueueProperties.

        A value that indicates whether this queue has dead letter support when a message expires.

        :return: The dead_lettering_on_message_expiration of this SBQueueProperties.
        :rtype: bool
        """
        return self._dead_lettering_on_message_expiration

    @dead_lettering_on_message_expiration.setter
    def dead_lettering_on_message_expiration(self, dead_lettering_on_message_expiration):
        """Sets the dead_lettering_on_message_expiration of this SBQueueProperties.

        A value that indicates whether this queue has dead letter support when a message expires.

        :param dead_lettering_on_message_expiration: The dead_lettering_on_message_expiration of this SBQueueProperties.
        :type dead_lettering_on_message_expiration: bool
        """

        self._dead_lettering_on_message_expiration = dead_lettering_on_message_expiration

    @property
    def default_message_time_to_live(self):
        """Gets the default_message_time_to_live of this SBQueueProperties.

        ISO 8601 default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.

        :return: The default_message_time_to_live of this SBQueueProperties.
        :rtype: str
        """
        return self._default_message_time_to_live

    @default_message_time_to_live.setter
    def default_message_time_to_live(self, default_message_time_to_live):
        """Sets the default_message_time_to_live of this SBQueueProperties.

        ISO 8601 default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.

        :param default_message_time_to_live: The default_message_time_to_live of this SBQueueProperties.
        :type default_message_time_to_live: str
        """

        self._default_message_time_to_live = default_message_time_to_live

    @property
    def duplicate_detection_history_time_window(self):
        """Gets the duplicate_detection_history_time_window of this SBQueueProperties.

        ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.

        :return: The duplicate_detection_history_time_window of this SBQueueProperties.
        :rtype: str
        """
        return self._duplicate_detection_history_time_window

    @duplicate_detection_history_time_window.setter
    def duplicate_detection_history_time_window(self, duplicate_detection_history_time_window):
        """Sets the duplicate_detection_history_time_window of this SBQueueProperties.

        ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.

        :param duplicate_detection_history_time_window: The duplicate_detection_history_time_window of this SBQueueProperties.
        :type duplicate_detection_history_time_window: str
        """

        self._duplicate_detection_history_time_window = duplicate_detection_history_time_window

    @property
    def enable_batched_operations(self):
        """Gets the enable_batched_operations of this SBQueueProperties.

        Value that indicates whether server-side batched operations are enabled.

        :return: The enable_batched_operations of this SBQueueProperties.
        :rtype: bool
        """
        return self._enable_batched_operations

    @enable_batched_operations.setter
    def enable_batched_operations(self, enable_batched_operations):
        """Sets the enable_batched_operations of this SBQueueProperties.

        Value that indicates whether server-side batched operations are enabled.

        :param enable_batched_operations: The enable_batched_operations of this SBQueueProperties.
        :type enable_batched_operations: bool
        """

        self._enable_batched_operations = enable_batched_operations

    @property
    def enable_express(self):
        """Gets the enable_express of this SBQueueProperties.

        A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage.

        :return: The enable_express of this SBQueueProperties.
        :rtype: bool
        """
        return self._enable_express

    @enable_express.setter
    def enable_express(self, enable_express):
        """Sets the enable_express of this SBQueueProperties.

        A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage.

        :param enable_express: The enable_express of this SBQueueProperties.
        :type enable_express: bool
        """

        self._enable_express = enable_express

    @property
    def enable_partitioning(self):
        """Gets the enable_partitioning of this SBQueueProperties.

        A value that indicates whether the queue is to be partitioned across multiple message brokers.

        :return: The enable_partitioning of this SBQueueProperties.
        :rtype: bool
        """
        return self._enable_partitioning

    @enable_partitioning.setter
    def enable_partitioning(self, enable_partitioning):
        """Sets the enable_partitioning of this SBQueueProperties.

        A value that indicates whether the queue is to be partitioned across multiple message brokers.

        :param enable_partitioning: The enable_partitioning of this SBQueueProperties.
        :type enable_partitioning: bool
        """

        self._enable_partitioning = enable_partitioning

    @property
    def forward_dead_lettered_messages_to(self):
        """Gets the forward_dead_lettered_messages_to of this SBQueueProperties.

        Queue/Topic name to forward the Dead Letter message

        :return: The forward_dead_lettered_messages_to of this SBQueueProperties.
        :rtype: str
        """
        return self._forward_dead_lettered_messages_to

    @forward_dead_lettered_messages_to.setter
    def forward_dead_lettered_messages_to(self, forward_dead_lettered_messages_to):
        """Sets the forward_dead_lettered_messages_to of this SBQueueProperties.

        Queue/Topic name to forward the Dead Letter message

        :param forward_dead_lettered_messages_to: The forward_dead_lettered_messages_to of this SBQueueProperties.
        :type forward_dead_lettered_messages_to: str
        """

        self._forward_dead_lettered_messages_to = forward_dead_lettered_messages_to

    @property
    def forward_to(self):
        """Gets the forward_to of this SBQueueProperties.

        Queue/Topic name to forward the messages

        :return: The forward_to of this SBQueueProperties.
        :rtype: str
        """
        return self._forward_to

    @forward_to.setter
    def forward_to(self, forward_to):
        """Sets the forward_to of this SBQueueProperties.

        Queue/Topic name to forward the messages

        :param forward_to: The forward_to of this SBQueueProperties.
        :type forward_to: str
        """

        self._forward_to = forward_to

    @property
    def lock_duration(self):
        """Gets the lock_duration of this SBQueueProperties.

        ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute.

        :return: The lock_duration of this SBQueueProperties.
        :rtype: str
        """
        return self._lock_duration

    @lock_duration.setter
    def lock_duration(self, lock_duration):
        """Sets the lock_duration of this SBQueueProperties.

        ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute.

        :param lock_duration: The lock_duration of this SBQueueProperties.
        :type lock_duration: str
        """

        self._lock_duration = lock_duration

    @property
    def max_delivery_count(self):
        """Gets the max_delivery_count of this SBQueueProperties.

        The maximum delivery count. A message is automatically deadlettered after this number of deliveries. default value is 10.

        :return: The max_delivery_count of this SBQueueProperties.
        :rtype: int
        """
        return self._max_delivery_count

    @max_delivery_count.setter
    def max_delivery_count(self, max_delivery_count):
        """Sets the max_delivery_count of this SBQueueProperties.

        The maximum delivery count. A message is automatically deadlettered after this number of deliveries. default value is 10.

        :param max_delivery_count: The max_delivery_count of this SBQueueProperties.
        :type max_delivery_count: int
        """

        self._max_delivery_count = max_delivery_count

    @property
    def max_size_in_megabytes(self):
        """Gets the max_size_in_megabytes of this SBQueueProperties.

        The maximum size of the queue in megabytes, which is the size of memory allocated for the queue. Default is 1024.

        :return: The max_size_in_megabytes of this SBQueueProperties.
        :rtype: int
        """
        return self._max_size_in_megabytes

    @max_size_in_megabytes.setter
    def max_size_in_megabytes(self, max_size_in_megabytes):
        """Sets the max_size_in_megabytes of this SBQueueProperties.

        The maximum size of the queue in megabytes, which is the size of memory allocated for the queue. Default is 1024.

        :param max_size_in_megabytes: The max_size_in_megabytes of this SBQueueProperties.
        :type max_size_in_megabytes: int
        """

        self._max_size_in_megabytes = max_size_in_megabytes

    @property
    def message_count(self):
        """Gets the message_count of this SBQueueProperties.

        The number of messages in the queue.

        :return: The message_count of this SBQueueProperties.
        :rtype: int
        """
        return self._message_count

    @message_count.setter
    def message_count(self, message_count):
        """Sets the message_count of this SBQueueProperties.

        The number of messages in the queue.

        :param message_count: The message_count of this SBQueueProperties.
        :type message_count: int
        """

        self._message_count = message_count

    @property
    def requires_duplicate_detection(self):
        """Gets the requires_duplicate_detection of this SBQueueProperties.

        A value indicating if this queue requires duplicate detection.

        :return: The requires_duplicate_detection of this SBQueueProperties.
        :rtype: bool
        """
        return self._requires_duplicate_detection

    @requires_duplicate_detection.setter
    def requires_duplicate_detection(self, requires_duplicate_detection):
        """Sets the requires_duplicate_detection of this SBQueueProperties.

        A value indicating if this queue requires duplicate detection.

        :param requires_duplicate_detection: The requires_duplicate_detection of this SBQueueProperties.
        :type requires_duplicate_detection: bool
        """

        self._requires_duplicate_detection = requires_duplicate_detection

    @property
    def requires_session(self):
        """Gets the requires_session of this SBQueueProperties.

        A value that indicates whether the queue supports the concept of sessions.

        :return: The requires_session of this SBQueueProperties.
        :rtype: bool
        """
        return self._requires_session

    @requires_session.setter
    def requires_session(self, requires_session):
        """Sets the requires_session of this SBQueueProperties.

        A value that indicates whether the queue supports the concept of sessions.

        :param requires_session: The requires_session of this SBQueueProperties.
        :type requires_session: bool
        """

        self._requires_session = requires_session

    @property
    def size_in_bytes(self):
        """Gets the size_in_bytes of this SBQueueProperties.

        The size of the queue, in bytes.

        :return: The size_in_bytes of this SBQueueProperties.
        :rtype: int
        """
        return self._size_in_bytes

    @size_in_bytes.setter
    def size_in_bytes(self, size_in_bytes):
        """Sets the size_in_bytes of this SBQueueProperties.

        The size of the queue, in bytes.

        :param size_in_bytes: The size_in_bytes of this SBQueueProperties.
        :type size_in_bytes: int
        """

        self._size_in_bytes = size_in_bytes

    @property
    def status(self):
        """Gets the status of this SBQueueProperties.


        :return: The status of this SBQueueProperties.
        :rtype: EntityStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SBQueueProperties.


        :param status: The status of this SBQueueProperties.
        :type status: EntityStatus
        """

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this SBQueueProperties.

        The exact time the message was updated.

        :return: The updated_at of this SBQueueProperties.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SBQueueProperties.

        The exact time the message was updated.

        :param updated_at: The updated_at of this SBQueueProperties.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
