# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destination import Destination
from openapi_server import util


class CaptureDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination: Destination=None, enabled: bool=None, encoding: str=None, interval_in_seconds: int=None, size_limit_in_bytes: int=None):
        """CaptureDescription - a model defined in OpenAPI

        :param destination: The destination of this CaptureDescription.
        :param enabled: The enabled of this CaptureDescription.
        :param encoding: The encoding of this CaptureDescription.
        :param interval_in_seconds: The interval_in_seconds of this CaptureDescription.
        :param size_limit_in_bytes: The size_limit_in_bytes of this CaptureDescription.
        """
        self.openapi_types = {
            'destination': Destination,
            'enabled': bool,
            'encoding': str,
            'interval_in_seconds': int,
            'size_limit_in_bytes': int
        }

        self.attribute_map = {
            'destination': 'destination',
            'enabled': 'enabled',
            'encoding': 'encoding',
            'interval_in_seconds': 'intervalInSeconds',
            'size_limit_in_bytes': 'sizeLimitInBytes'
        }

        self._destination = destination
        self._enabled = enabled
        self._encoding = encoding
        self._interval_in_seconds = interval_in_seconds
        self._size_limit_in_bytes = size_limit_in_bytes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CaptureDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CaptureDescription of this CaptureDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination(self):
        """Gets the destination of this CaptureDescription.


        :return: The destination of this CaptureDescription.
        :rtype: Destination
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this CaptureDescription.


        :param destination: The destination of this CaptureDescription.
        :type destination: Destination
        """

        self._destination = destination

    @property
    def enabled(self):
        """Gets the enabled of this CaptureDescription.

        A value that indicates whether capture description is enabled. 

        :return: The enabled of this CaptureDescription.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CaptureDescription.

        A value that indicates whether capture description is enabled. 

        :param enabled: The enabled of this CaptureDescription.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def encoding(self):
        """Gets the encoding of this CaptureDescription.

        Enumerates the possible values for the encoding format of capture description.

        :return: The encoding of this CaptureDescription.
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this CaptureDescription.

        Enumerates the possible values for the encoding format of capture description.

        :param encoding: The encoding of this CaptureDescription.
        :type encoding: str
        """
        allowed_values = ["Avro", "AvroDeflate"]  # noqa: E501
        if encoding not in allowed_values:
            raise ValueError(
                "Invalid value for `encoding` ({0}), must be one of {1}"
                .format(encoding, allowed_values)
            )

        self._encoding = encoding

    @property
    def interval_in_seconds(self):
        """Gets the interval_in_seconds of this CaptureDescription.

        The time window allows you to set the frequency with which the capture to Azure Blobs will happen, value should between 60 to 900 seconds

        :return: The interval_in_seconds of this CaptureDescription.
        :rtype: int
        """
        return self._interval_in_seconds

    @interval_in_seconds.setter
    def interval_in_seconds(self, interval_in_seconds):
        """Sets the interval_in_seconds of this CaptureDescription.

        The time window allows you to set the frequency with which the capture to Azure Blobs will happen, value should between 60 to 900 seconds

        :param interval_in_seconds: The interval_in_seconds of this CaptureDescription.
        :type interval_in_seconds: int
        """
        if interval_in_seconds is not None and interval_in_seconds > 900:
            raise ValueError("Invalid value for `interval_in_seconds`, must be a value less than or equal to `900`")
        if interval_in_seconds is not None and interval_in_seconds < 60:
            raise ValueError("Invalid value for `interval_in_seconds`, must be a value greater than or equal to `60`")

        self._interval_in_seconds = interval_in_seconds

    @property
    def size_limit_in_bytes(self):
        """Gets the size_limit_in_bytes of this CaptureDescription.

        The size window defines the amount of data built up in your Event Hub before an capture operation, value should be between 10485760 and 524288000 bytes

        :return: The size_limit_in_bytes of this CaptureDescription.
        :rtype: int
        """
        return self._size_limit_in_bytes

    @size_limit_in_bytes.setter
    def size_limit_in_bytes(self, size_limit_in_bytes):
        """Sets the size_limit_in_bytes of this CaptureDescription.

        The size window defines the amount of data built up in your Event Hub before an capture operation, value should be between 10485760 and 524288000 bytes

        :param size_limit_in_bytes: The size_limit_in_bytes of this CaptureDescription.
        :type size_limit_in_bytes: int
        """
        if size_limit_in_bytes is not None and size_limit_in_bytes > 524288000:
            raise ValueError("Invalid value for `size_limit_in_bytes`, must be a value less than or equal to `524288000`")
        if size_limit_in_bytes is not None and size_limit_in_bytes < 10485760:
            raise ValueError("Invalid value for `size_limit_in_bytes`, must be a value greater than or equal to `10485760`")

        self._size_limit_in_bytes = size_limit_in_bytes
