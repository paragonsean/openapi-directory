# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.subnet import Subnet
from openapi_server import util


class NWRuleSetVirtualNetworkRules(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ignore_missing_vnet_service_endpoint: bool=None, subnet: Subnet=None):
        """NWRuleSetVirtualNetworkRules - a model defined in OpenAPI

        :param ignore_missing_vnet_service_endpoint: The ignore_missing_vnet_service_endpoint of this NWRuleSetVirtualNetworkRules.
        :param subnet: The subnet of this NWRuleSetVirtualNetworkRules.
        """
        self.openapi_types = {
            'ignore_missing_vnet_service_endpoint': bool,
            'subnet': Subnet
        }

        self.attribute_map = {
            'ignore_missing_vnet_service_endpoint': 'ignoreMissingVnetServiceEndpoint',
            'subnet': 'subnet'
        }

        self._ignore_missing_vnet_service_endpoint = ignore_missing_vnet_service_endpoint
        self._subnet = subnet

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NWRuleSetVirtualNetworkRules':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NWRuleSetVirtualNetworkRules of this NWRuleSetVirtualNetworkRules.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ignore_missing_vnet_service_endpoint(self):
        """Gets the ignore_missing_vnet_service_endpoint of this NWRuleSetVirtualNetworkRules.

        Value that indicates whether to ignore missing VNet Service Endpoint

        :return: The ignore_missing_vnet_service_endpoint of this NWRuleSetVirtualNetworkRules.
        :rtype: bool
        """
        return self._ignore_missing_vnet_service_endpoint

    @ignore_missing_vnet_service_endpoint.setter
    def ignore_missing_vnet_service_endpoint(self, ignore_missing_vnet_service_endpoint):
        """Sets the ignore_missing_vnet_service_endpoint of this NWRuleSetVirtualNetworkRules.

        Value that indicates whether to ignore missing VNet Service Endpoint

        :param ignore_missing_vnet_service_endpoint: The ignore_missing_vnet_service_endpoint of this NWRuleSetVirtualNetworkRules.
        :type ignore_missing_vnet_service_endpoint: bool
        """

        self._ignore_missing_vnet_service_endpoint = ignore_missing_vnet_service_endpoint

    @property
    def subnet(self):
        """Gets the subnet of this NWRuleSetVirtualNetworkRules.


        :return: The subnet of this NWRuleSetVirtualNetworkRules.
        :rtype: Subnet
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """Sets the subnet of this NWRuleSetVirtualNetworkRules.


        :param subnet: The subnet of this NWRuleSetVirtualNetworkRules.
        :type subnet: Subnet
        """

        self._subnet = subnet
