# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SqlFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compatibility_level: int=20, requires_preprocessing: bool=True, sql_expression: str=None):
        """SqlFilter - a model defined in OpenAPI

        :param compatibility_level: The compatibility_level of this SqlFilter.
        :param requires_preprocessing: The requires_preprocessing of this SqlFilter.
        :param sql_expression: The sql_expression of this SqlFilter.
        """
        self.openapi_types = {
            'compatibility_level': int,
            'requires_preprocessing': bool,
            'sql_expression': str
        }

        self.attribute_map = {
            'compatibility_level': 'compatibilityLevel',
            'requires_preprocessing': 'requiresPreprocessing',
            'sql_expression': 'sqlExpression'
        }

        self._compatibility_level = compatibility_level
        self._requires_preprocessing = requires_preprocessing
        self._sql_expression = sql_expression

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SqlFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SqlFilter of this SqlFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compatibility_level(self):
        """Gets the compatibility_level of this SqlFilter.

        This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20.

        :return: The compatibility_level of this SqlFilter.
        :rtype: int
        """
        return self._compatibility_level

    @compatibility_level.setter
    def compatibility_level(self, compatibility_level):
        """Sets the compatibility_level of this SqlFilter.

        This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20.

        :param compatibility_level: The compatibility_level of this SqlFilter.
        :type compatibility_level: int
        """
        if compatibility_level is not None and compatibility_level > 20:
            raise ValueError("Invalid value for `compatibility_level`, must be a value less than or equal to `20`")
        if compatibility_level is not None and compatibility_level < 20:
            raise ValueError("Invalid value for `compatibility_level`, must be a value greater than or equal to `20`")

        self._compatibility_level = compatibility_level

    @property
    def requires_preprocessing(self):
        """Gets the requires_preprocessing of this SqlFilter.

        Value that indicates whether the rule action requires preprocessing.

        :return: The requires_preprocessing of this SqlFilter.
        :rtype: bool
        """
        return self._requires_preprocessing

    @requires_preprocessing.setter
    def requires_preprocessing(self, requires_preprocessing):
        """Sets the requires_preprocessing of this SqlFilter.

        Value that indicates whether the rule action requires preprocessing.

        :param requires_preprocessing: The requires_preprocessing of this SqlFilter.
        :type requires_preprocessing: bool
        """

        self._requires_preprocessing = requires_preprocessing

    @property
    def sql_expression(self):
        """Gets the sql_expression of this SqlFilter.

        The SQL expression. e.g. MyProperty='ABC'

        :return: The sql_expression of this SqlFilter.
        :rtype: str
        """
        return self._sql_expression

    @sql_expression.setter
    def sql_expression(self, sql_expression):
        """Sets the sql_expression of this SqlFilter.

        The SQL expression. e.g. MyProperty='ABC'

        :param sql_expression: The sql_expression of this SqlFilter.
        :type sql_expression: str
        """

        self._sql_expression = sql_expression
