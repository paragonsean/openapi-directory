# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CorrelationFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_type: str=None, correlation_id: str=None, label: str=None, message_id: str=None, properties: Dict[str, str]=None, reply_to: str=None, reply_to_session_id: str=None, requires_preprocessing: bool=True, session_id: str=None, to: str=None):
        """CorrelationFilter - a model defined in OpenAPI

        :param content_type: The content_type of this CorrelationFilter.
        :param correlation_id: The correlation_id of this CorrelationFilter.
        :param label: The label of this CorrelationFilter.
        :param message_id: The message_id of this CorrelationFilter.
        :param properties: The properties of this CorrelationFilter.
        :param reply_to: The reply_to of this CorrelationFilter.
        :param reply_to_session_id: The reply_to_session_id of this CorrelationFilter.
        :param requires_preprocessing: The requires_preprocessing of this CorrelationFilter.
        :param session_id: The session_id of this CorrelationFilter.
        :param to: The to of this CorrelationFilter.
        """
        self.openapi_types = {
            'content_type': str,
            'correlation_id': str,
            'label': str,
            'message_id': str,
            'properties': Dict[str, str],
            'reply_to': str,
            'reply_to_session_id': str,
            'requires_preprocessing': bool,
            'session_id': str,
            'to': str
        }

        self.attribute_map = {
            'content_type': 'contentType',
            'correlation_id': 'correlationId',
            'label': 'label',
            'message_id': 'messageId',
            'properties': 'properties',
            'reply_to': 'replyTo',
            'reply_to_session_id': 'replyToSessionId',
            'requires_preprocessing': 'requiresPreprocessing',
            'session_id': 'sessionId',
            'to': 'to'
        }

        self._content_type = content_type
        self._correlation_id = correlation_id
        self._label = label
        self._message_id = message_id
        self._properties = properties
        self._reply_to = reply_to
        self._reply_to_session_id = reply_to_session_id
        self._requires_preprocessing = requires_preprocessing
        self._session_id = session_id
        self._to = to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CorrelationFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CorrelationFilter of this CorrelationFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_type(self):
        """Gets the content_type of this CorrelationFilter.

        Content type of the message.

        :return: The content_type of this CorrelationFilter.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this CorrelationFilter.

        Content type of the message.

        :param content_type: The content_type of this CorrelationFilter.
        :type content_type: str
        """

        self._content_type = content_type

    @property
    def correlation_id(self):
        """Gets the correlation_id of this CorrelationFilter.

        Identifier of the correlation.

        :return: The correlation_id of this CorrelationFilter.
        :rtype: str
        """
        return self._correlation_id

    @correlation_id.setter
    def correlation_id(self, correlation_id):
        """Sets the correlation_id of this CorrelationFilter.

        Identifier of the correlation.

        :param correlation_id: The correlation_id of this CorrelationFilter.
        :type correlation_id: str
        """

        self._correlation_id = correlation_id

    @property
    def label(self):
        """Gets the label of this CorrelationFilter.

        Application specific label.

        :return: The label of this CorrelationFilter.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this CorrelationFilter.

        Application specific label.

        :param label: The label of this CorrelationFilter.
        :type label: str
        """

        self._label = label

    @property
    def message_id(self):
        """Gets the message_id of this CorrelationFilter.

        Identifier of the message.

        :return: The message_id of this CorrelationFilter.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this CorrelationFilter.

        Identifier of the message.

        :param message_id: The message_id of this CorrelationFilter.
        :type message_id: str
        """

        self._message_id = message_id

    @property
    def properties(self):
        """Gets the properties of this CorrelationFilter.

        dictionary object for custom filters

        :return: The properties of this CorrelationFilter.
        :rtype: Dict[str, str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this CorrelationFilter.

        dictionary object for custom filters

        :param properties: The properties of this CorrelationFilter.
        :type properties: Dict[str, str]
        """

        self._properties = properties

    @property
    def reply_to(self):
        """Gets the reply_to of this CorrelationFilter.

        Address of the queue to reply to.

        :return: The reply_to of this CorrelationFilter.
        :rtype: str
        """
        return self._reply_to

    @reply_to.setter
    def reply_to(self, reply_to):
        """Sets the reply_to of this CorrelationFilter.

        Address of the queue to reply to.

        :param reply_to: The reply_to of this CorrelationFilter.
        :type reply_to: str
        """

        self._reply_to = reply_to

    @property
    def reply_to_session_id(self):
        """Gets the reply_to_session_id of this CorrelationFilter.

        Session identifier to reply to.

        :return: The reply_to_session_id of this CorrelationFilter.
        :rtype: str
        """
        return self._reply_to_session_id

    @reply_to_session_id.setter
    def reply_to_session_id(self, reply_to_session_id):
        """Sets the reply_to_session_id of this CorrelationFilter.

        Session identifier to reply to.

        :param reply_to_session_id: The reply_to_session_id of this CorrelationFilter.
        :type reply_to_session_id: str
        """

        self._reply_to_session_id = reply_to_session_id

    @property
    def requires_preprocessing(self):
        """Gets the requires_preprocessing of this CorrelationFilter.

        Value that indicates whether the rule action requires preprocessing.

        :return: The requires_preprocessing of this CorrelationFilter.
        :rtype: bool
        """
        return self._requires_preprocessing

    @requires_preprocessing.setter
    def requires_preprocessing(self, requires_preprocessing):
        """Sets the requires_preprocessing of this CorrelationFilter.

        Value that indicates whether the rule action requires preprocessing.

        :param requires_preprocessing: The requires_preprocessing of this CorrelationFilter.
        :type requires_preprocessing: bool
        """

        self._requires_preprocessing = requires_preprocessing

    @property
    def session_id(self):
        """Gets the session_id of this CorrelationFilter.

        Session identifier.

        :return: The session_id of this CorrelationFilter.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this CorrelationFilter.

        Session identifier.

        :param session_id: The session_id of this CorrelationFilter.
        :type session_id: str
        """

        self._session_id = session_id

    @property
    def to(self):
        """Gets the to of this CorrelationFilter.

        Address to send to.

        :return: The to of this CorrelationFilter.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this CorrelationFilter.

        Address to send to.

        :param to: The to of this CorrelationFilter.
        :type to: str
        """

        self._to = to
