# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegenerateAccessKeyParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key: str=None, key_type: str=None):
        """RegenerateAccessKeyParameters - a model defined in OpenAPI

        :param key: The key of this RegenerateAccessKeyParameters.
        :param key_type: The key_type of this RegenerateAccessKeyParameters.
        """
        self.openapi_types = {
            'key': str,
            'key_type': str
        }

        self.attribute_map = {
            'key': 'key',
            'key_type': 'keyType'
        }

        self._key = key
        self._key_type = key_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegenerateAccessKeyParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegenerateAccessKeyParameters of this RegenerateAccessKeyParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key(self):
        """Gets the key of this RegenerateAccessKeyParameters.

        Optional, if the key value provided, is reset for KeyType value or autogenerate Key value set for keyType

        :return: The key of this RegenerateAccessKeyParameters.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this RegenerateAccessKeyParameters.

        Optional, if the key value provided, is reset for KeyType value or autogenerate Key value set for keyType

        :param key: The key of this RegenerateAccessKeyParameters.
        :type key: str
        """

        self._key = key

    @property
    def key_type(self):
        """Gets the key_type of this RegenerateAccessKeyParameters.

        The access key to regenerate.

        :return: The key_type of this RegenerateAccessKeyParameters.
        :rtype: str
        """
        return self._key_type

    @key_type.setter
    def key_type(self, key_type):
        """Sets the key_type of this RegenerateAccessKeyParameters.

        The access key to regenerate.

        :param key_type: The key_type of this RegenerateAccessKeyParameters.
        :type key_type: str
        """
        allowed_values = ["PrimaryKey", "SecondaryKey"]  # noqa: E501
        if key_type not in allowed_values:
            raise ValueError(
                "Invalid value for `key_type` ({0}), must be one of {1}"
                .format(key_type, allowed_values)
            )

        self._key_type = key_type
