/*
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2017-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Destination;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties to configure capture description for eventhub
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:48.552458-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CaptureDescription {
  public static final String SERIALIZED_NAME_DESTINATION = "destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private Destination destination;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  /**
   * Enumerates the possible values for the encoding format of capture description.
   */
  @JsonAdapter(EncodingEnum.Adapter.class)
  public enum EncodingEnum {
    AVRO("Avro"),
    
    AVRO_DEFLATE("AvroDeflate");

    private String value;

    EncodingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EncodingEnum fromValue(String value) {
      for (EncodingEnum b : EncodingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EncodingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EncodingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EncodingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EncodingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EncodingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENCODING = "encoding";
  @SerializedName(SERIALIZED_NAME_ENCODING)
  private EncodingEnum encoding;

  public static final String SERIALIZED_NAME_INTERVAL_IN_SECONDS = "intervalInSeconds";
  @SerializedName(SERIALIZED_NAME_INTERVAL_IN_SECONDS)
  private Integer intervalInSeconds;

  public static final String SERIALIZED_NAME_SIZE_LIMIT_IN_BYTES = "sizeLimitInBytes";
  @SerializedName(SERIALIZED_NAME_SIZE_LIMIT_IN_BYTES)
  private Integer sizeLimitInBytes;

  public CaptureDescription() {
  }

  public CaptureDescription destination(Destination destination) {
    this.destination = destination;
    return this;
  }

  /**
   * Get destination
   * @return destination
   */
  @javax.annotation.Nullable
  public Destination getDestination() {
    return destination;
  }

  public void setDestination(Destination destination) {
    this.destination = destination;
  }


  public CaptureDescription enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * A value that indicates whether capture description is enabled. 
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public CaptureDescription encoding(EncodingEnum encoding) {
    this.encoding = encoding;
    return this;
  }

  /**
   * Enumerates the possible values for the encoding format of capture description.
   * @return encoding
   */
  @javax.annotation.Nullable
  public EncodingEnum getEncoding() {
    return encoding;
  }

  public void setEncoding(EncodingEnum encoding) {
    this.encoding = encoding;
  }


  public CaptureDescription intervalInSeconds(Integer intervalInSeconds) {
    this.intervalInSeconds = intervalInSeconds;
    return this;
  }

  /**
   * The time window allows you to set the frequency with which the capture to Azure Blobs will happen, value should between 60 to 900 seconds
   * minimum: 60
   * maximum: 900
   * @return intervalInSeconds
   */
  @javax.annotation.Nullable
  public Integer getIntervalInSeconds() {
    return intervalInSeconds;
  }

  public void setIntervalInSeconds(Integer intervalInSeconds) {
    this.intervalInSeconds = intervalInSeconds;
  }


  public CaptureDescription sizeLimitInBytes(Integer sizeLimitInBytes) {
    this.sizeLimitInBytes = sizeLimitInBytes;
    return this;
  }

  /**
   * The size window defines the amount of data built up in your Event Hub before an capture operation, value should be between 10485760 and 524288000 bytes
   * minimum: 10485760
   * maximum: 524288000
   * @return sizeLimitInBytes
   */
  @javax.annotation.Nullable
  public Integer getSizeLimitInBytes() {
    return sizeLimitInBytes;
  }

  public void setSizeLimitInBytes(Integer sizeLimitInBytes) {
    this.sizeLimitInBytes = sizeLimitInBytes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CaptureDescription captureDescription = (CaptureDescription) o;
    return Objects.equals(this.destination, captureDescription.destination) &&
        Objects.equals(this.enabled, captureDescription.enabled) &&
        Objects.equals(this.encoding, captureDescription.encoding) &&
        Objects.equals(this.intervalInSeconds, captureDescription.intervalInSeconds) &&
        Objects.equals(this.sizeLimitInBytes, captureDescription.sizeLimitInBytes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destination, enabled, encoding, intervalInSeconds, sizeLimitInBytes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CaptureDescription {\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    encoding: ").append(toIndentedString(encoding)).append("\n");
    sb.append("    intervalInSeconds: ").append(toIndentedString(intervalInSeconds)).append("\n");
    sb.append("    sizeLimitInBytes: ").append(toIndentedString(sizeLimitInBytes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destination");
    openapiFields.add("enabled");
    openapiFields.add("encoding");
    openapiFields.add("intervalInSeconds");
    openapiFields.add("sizeLimitInBytes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CaptureDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CaptureDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CaptureDescription is not found in the empty JSON string", CaptureDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CaptureDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CaptureDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `destination`
      if (jsonObj.get("destination") != null && !jsonObj.get("destination").isJsonNull()) {
        Destination.validateJsonElement(jsonObj.get("destination"));
      }
      if ((jsonObj.get("encoding") != null && !jsonObj.get("encoding").isJsonNull()) && !jsonObj.get("encoding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encoding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encoding").toString()));
      }
      // validate the optional field `encoding`
      if (jsonObj.get("encoding") != null && !jsonObj.get("encoding").isJsonNull()) {
        EncodingEnum.validateJsonElement(jsonObj.get("encoding"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CaptureDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CaptureDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CaptureDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CaptureDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<CaptureDescription>() {
           @Override
           public void write(JsonWriter out, CaptureDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CaptureDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CaptureDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CaptureDescription
   * @throws IOException if the JSON string is invalid with respect to CaptureDescription
   */
  public static CaptureDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CaptureDescription.class);
  }

  /**
   * Convert an instance of CaptureDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

