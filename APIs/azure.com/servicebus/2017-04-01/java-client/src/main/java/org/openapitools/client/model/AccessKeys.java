/*
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2017-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Namespace/ServiceBus Connection String
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:48.552458-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccessKeys {
  public static final String SERIALIZED_NAME_ALIAS_PRIMARY_CONNECTION_STRING = "aliasPrimaryConnectionString";
  @SerializedName(SERIALIZED_NAME_ALIAS_PRIMARY_CONNECTION_STRING)
  private String aliasPrimaryConnectionString;

  public static final String SERIALIZED_NAME_ALIAS_SECONDARY_CONNECTION_STRING = "aliasSecondaryConnectionString";
  @SerializedName(SERIALIZED_NAME_ALIAS_SECONDARY_CONNECTION_STRING)
  private String aliasSecondaryConnectionString;

  public static final String SERIALIZED_NAME_KEY_NAME = "keyName";
  @SerializedName(SERIALIZED_NAME_KEY_NAME)
  private String keyName;

  public static final String SERIALIZED_NAME_PRIMARY_CONNECTION_STRING = "primaryConnectionString";
  @SerializedName(SERIALIZED_NAME_PRIMARY_CONNECTION_STRING)
  private String primaryConnectionString;

  public static final String SERIALIZED_NAME_PRIMARY_KEY = "primaryKey";
  @SerializedName(SERIALIZED_NAME_PRIMARY_KEY)
  private String primaryKey;

  public static final String SERIALIZED_NAME_SECONDARY_CONNECTION_STRING = "secondaryConnectionString";
  @SerializedName(SERIALIZED_NAME_SECONDARY_CONNECTION_STRING)
  private String secondaryConnectionString;

  public static final String SERIALIZED_NAME_SECONDARY_KEY = "secondaryKey";
  @SerializedName(SERIALIZED_NAME_SECONDARY_KEY)
  private String secondaryKey;

  public AccessKeys() {
  }

  public AccessKeys(
     String aliasPrimaryConnectionString, 
     String aliasSecondaryConnectionString, 
     String keyName, 
     String primaryConnectionString, 
     String primaryKey, 
     String secondaryConnectionString, 
     String secondaryKey
  ) {
    this();
    this.aliasPrimaryConnectionString = aliasPrimaryConnectionString;
    this.aliasSecondaryConnectionString = aliasSecondaryConnectionString;
    this.keyName = keyName;
    this.primaryConnectionString = primaryConnectionString;
    this.primaryKey = primaryKey;
    this.secondaryConnectionString = secondaryConnectionString;
    this.secondaryKey = secondaryKey;
  }

  /**
   * Primary connection string of the alias if GEO DR is enabled
   * @return aliasPrimaryConnectionString
   */
  @javax.annotation.Nullable
  public String getAliasPrimaryConnectionString() {
    return aliasPrimaryConnectionString;
  }



  /**
   * Secondary  connection string of the alias if GEO DR is enabled
   * @return aliasSecondaryConnectionString
   */
  @javax.annotation.Nullable
  public String getAliasSecondaryConnectionString() {
    return aliasSecondaryConnectionString;
  }



  /**
   * A string that describes the authorization rule.
   * @return keyName
   */
  @javax.annotation.Nullable
  public String getKeyName() {
    return keyName;
  }



  /**
   * Primary connection string of the created namespace authorization rule.
   * @return primaryConnectionString
   */
  @javax.annotation.Nullable
  public String getPrimaryConnectionString() {
    return primaryConnectionString;
  }



  /**
   * A base64-encoded 256-bit primary key for signing and validating the SAS token.
   * @return primaryKey
   */
  @javax.annotation.Nullable
  public String getPrimaryKey() {
    return primaryKey;
  }



  /**
   * Secondary connection string of the created namespace authorization rule.
   * @return secondaryConnectionString
   */
  @javax.annotation.Nullable
  public String getSecondaryConnectionString() {
    return secondaryConnectionString;
  }



  /**
   * A base64-encoded 256-bit primary key for signing and validating the SAS token.
   * @return secondaryKey
   */
  @javax.annotation.Nullable
  public String getSecondaryKey() {
    return secondaryKey;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccessKeys accessKeys = (AccessKeys) o;
    return Objects.equals(this.aliasPrimaryConnectionString, accessKeys.aliasPrimaryConnectionString) &&
        Objects.equals(this.aliasSecondaryConnectionString, accessKeys.aliasSecondaryConnectionString) &&
        Objects.equals(this.keyName, accessKeys.keyName) &&
        Objects.equals(this.primaryConnectionString, accessKeys.primaryConnectionString) &&
        Objects.equals(this.primaryKey, accessKeys.primaryKey) &&
        Objects.equals(this.secondaryConnectionString, accessKeys.secondaryConnectionString) &&
        Objects.equals(this.secondaryKey, accessKeys.secondaryKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aliasPrimaryConnectionString, aliasSecondaryConnectionString, keyName, primaryConnectionString, primaryKey, secondaryConnectionString, secondaryKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccessKeys {\n");
    sb.append("    aliasPrimaryConnectionString: ").append(toIndentedString(aliasPrimaryConnectionString)).append("\n");
    sb.append("    aliasSecondaryConnectionString: ").append(toIndentedString(aliasSecondaryConnectionString)).append("\n");
    sb.append("    keyName: ").append(toIndentedString(keyName)).append("\n");
    sb.append("    primaryConnectionString: ").append(toIndentedString(primaryConnectionString)).append("\n");
    sb.append("    primaryKey: ").append(toIndentedString(primaryKey)).append("\n");
    sb.append("    secondaryConnectionString: ").append(toIndentedString(secondaryConnectionString)).append("\n");
    sb.append("    secondaryKey: ").append(toIndentedString(secondaryKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aliasPrimaryConnectionString");
    openapiFields.add("aliasSecondaryConnectionString");
    openapiFields.add("keyName");
    openapiFields.add("primaryConnectionString");
    openapiFields.add("primaryKey");
    openapiFields.add("secondaryConnectionString");
    openapiFields.add("secondaryKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccessKeys
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccessKeys.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccessKeys is not found in the empty JSON string", AccessKeys.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccessKeys.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccessKeys` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aliasPrimaryConnectionString") != null && !jsonObj.get("aliasPrimaryConnectionString").isJsonNull()) && !jsonObj.get("aliasPrimaryConnectionString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aliasPrimaryConnectionString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aliasPrimaryConnectionString").toString()));
      }
      if ((jsonObj.get("aliasSecondaryConnectionString") != null && !jsonObj.get("aliasSecondaryConnectionString").isJsonNull()) && !jsonObj.get("aliasSecondaryConnectionString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aliasSecondaryConnectionString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aliasSecondaryConnectionString").toString()));
      }
      if ((jsonObj.get("keyName") != null && !jsonObj.get("keyName").isJsonNull()) && !jsonObj.get("keyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyName").toString()));
      }
      if ((jsonObj.get("primaryConnectionString") != null && !jsonObj.get("primaryConnectionString").isJsonNull()) && !jsonObj.get("primaryConnectionString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryConnectionString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryConnectionString").toString()));
      }
      if ((jsonObj.get("primaryKey") != null && !jsonObj.get("primaryKey").isJsonNull()) && !jsonObj.get("primaryKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryKey").toString()));
      }
      if ((jsonObj.get("secondaryConnectionString") != null && !jsonObj.get("secondaryConnectionString").isJsonNull()) && !jsonObj.get("secondaryConnectionString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryConnectionString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondaryConnectionString").toString()));
      }
      if ((jsonObj.get("secondaryKey") != null && !jsonObj.get("secondaryKey").isJsonNull()) && !jsonObj.get("secondaryKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondaryKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccessKeys.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccessKeys' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccessKeys> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccessKeys.class));

       return (TypeAdapter<T>) new TypeAdapter<AccessKeys>() {
           @Override
           public void write(JsonWriter out, AccessKeys value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccessKeys read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccessKeys given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccessKeys
   * @throws IOException if the JSON string is invalid with respect to AccessKeys
   */
  public static AccessKeys fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccessKeys.class);
  }

  /**
   * Convert an instance of AccessKeys to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

