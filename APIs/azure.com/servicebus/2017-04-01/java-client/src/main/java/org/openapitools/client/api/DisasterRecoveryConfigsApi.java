/*
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2017-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccessKeys;
import org.openapitools.client.model.ArmDisasterRecovery;
import org.openapitools.client.model.ArmDisasterRecoveryListResult;
import org.openapitools.client.model.CheckNameAvailability;
import org.openapitools.client.model.CheckNameAvailabilityResult;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.SBAuthorizationRule;
import org.openapitools.client.model.SBAuthorizationRuleListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DisasterRecoveryConfigsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DisasterRecoveryConfigsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DisasterRecoveryConfigsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for disasterRecoveryConfigsBreakPairing
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param alias The Disaster Recovery configuration name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Break-Pairing operation is successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disasterRecoveryConfigsBreakPairingCall(String resourceGroupName, String namespaceName, String alias, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}/breakPairing"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disasterRecoveryConfigsBreakPairingValidateBeforeCall(String resourceGroupName, String namespaceName, String alias, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling disasterRecoveryConfigsBreakPairing(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling disasterRecoveryConfigsBreakPairing(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling disasterRecoveryConfigsBreakPairing(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling disasterRecoveryConfigsBreakPairing(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling disasterRecoveryConfigsBreakPairing(Async)");
        }

        return disasterRecoveryConfigsBreakPairingCall(resourceGroupName, namespaceName, alias, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * This operation disables the Disaster Recovery and stops replicating changes from primary to secondary namespaces
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param alias The Disaster Recovery configuration name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Break-Pairing operation is successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void disasterRecoveryConfigsBreakPairing(String resourceGroupName, String namespaceName, String alias, String apiVersion, String subscriptionId) throws ApiException {
        disasterRecoveryConfigsBreakPairingWithHttpInfo(resourceGroupName, namespaceName, alias, apiVersion, subscriptionId);
    }

    /**
     * 
     * This operation disables the Disaster Recovery and stops replicating changes from primary to secondary namespaces
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param alias The Disaster Recovery configuration name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Break-Pairing operation is successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> disasterRecoveryConfigsBreakPairingWithHttpInfo(String resourceGroupName, String namespaceName, String alias, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = disasterRecoveryConfigsBreakPairingValidateBeforeCall(resourceGroupName, namespaceName, alias, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * This operation disables the Disaster Recovery and stops replicating changes from primary to secondary namespaces
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param alias The Disaster Recovery configuration name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Break-Pairing operation is successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disasterRecoveryConfigsBreakPairingAsync(String resourceGroupName, String namespaceName, String alias, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = disasterRecoveryConfigsBreakPairingValidateBeforeCall(resourceGroupName, namespaceName, alias, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for disasterRecoveryConfigsCheckNameAvailability
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters to check availability of the given namespace name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> check availability returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disasterRecoveryConfigsCheckNameAvailabilityCall(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, CheckNameAvailability parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/CheckNameAvailability"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disasterRecoveryConfigsCheckNameAvailabilityValidateBeforeCall(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, CheckNameAvailability parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling disasterRecoveryConfigsCheckNameAvailability(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling disasterRecoveryConfigsCheckNameAvailability(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling disasterRecoveryConfigsCheckNameAvailability(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling disasterRecoveryConfigsCheckNameAvailability(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling disasterRecoveryConfigsCheckNameAvailability(Async)");
        }

        return disasterRecoveryConfigsCheckNameAvailabilityCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Check the give namespace name availability.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters to check availability of the given namespace name (required)
     * @return CheckNameAvailabilityResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> check availability returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public CheckNameAvailabilityResult disasterRecoveryConfigsCheckNameAvailability(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, CheckNameAvailability parameters) throws ApiException {
        ApiResponse<CheckNameAvailabilityResult> localVarResp = disasterRecoveryConfigsCheckNameAvailabilityWithHttpInfo(resourceGroupName, namespaceName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Check the give namespace name availability.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters to check availability of the given namespace name (required)
     * @return ApiResponse&lt;CheckNameAvailabilityResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> check availability returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckNameAvailabilityResult> disasterRecoveryConfigsCheckNameAvailabilityWithHttpInfo(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, CheckNameAvailability parameters) throws ApiException {
        okhttp3.Call localVarCall = disasterRecoveryConfigsCheckNameAvailabilityValidateBeforeCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<CheckNameAvailabilityResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Check the give namespace name availability.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters to check availability of the given namespace name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> check availability returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disasterRecoveryConfigsCheckNameAvailabilityAsync(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, CheckNameAvailability parameters, final ApiCallback<CheckNameAvailabilityResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = disasterRecoveryConfigsCheckNameAvailabilityValidateBeforeCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<CheckNameAvailabilityResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disasterRecoveryConfigsCreateOrUpdate
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param alias The Disaster Recovery configuration name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters required to create an Alias(Disaster Recovery configuration) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Alias(Disaster Recovery configuration) successfully created </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Alias(Disaster Recovery configuration) creation request received </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disasterRecoveryConfigsCreateOrUpdateCall(String resourceGroupName, String namespaceName, String alias, String apiVersion, String subscriptionId, ArmDisasterRecovery parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disasterRecoveryConfigsCreateOrUpdateValidateBeforeCall(String resourceGroupName, String namespaceName, String alias, String apiVersion, String subscriptionId, ArmDisasterRecovery parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling disasterRecoveryConfigsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling disasterRecoveryConfigsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling disasterRecoveryConfigsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling disasterRecoveryConfigsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling disasterRecoveryConfigsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling disasterRecoveryConfigsCreateOrUpdate(Async)");
        }

        return disasterRecoveryConfigsCreateOrUpdateCall(resourceGroupName, namespaceName, alias, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates or updates a new Alias(Disaster Recovery configuration)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param alias The Disaster Recovery configuration name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters required to create an Alias(Disaster Recovery configuration) (required)
     * @return ArmDisasterRecovery
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Alias(Disaster Recovery configuration) successfully created </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Alias(Disaster Recovery configuration) creation request received </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ArmDisasterRecovery disasterRecoveryConfigsCreateOrUpdate(String resourceGroupName, String namespaceName, String alias, String apiVersion, String subscriptionId, ArmDisasterRecovery parameters) throws ApiException {
        ApiResponse<ArmDisasterRecovery> localVarResp = disasterRecoveryConfigsCreateOrUpdateWithHttpInfo(resourceGroupName, namespaceName, alias, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a new Alias(Disaster Recovery configuration)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param alias The Disaster Recovery configuration name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters required to create an Alias(Disaster Recovery configuration) (required)
     * @return ApiResponse&lt;ArmDisasterRecovery&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Alias(Disaster Recovery configuration) successfully created </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Alias(Disaster Recovery configuration) creation request received </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ArmDisasterRecovery> disasterRecoveryConfigsCreateOrUpdateWithHttpInfo(String resourceGroupName, String namespaceName, String alias, String apiVersion, String subscriptionId, ArmDisasterRecovery parameters) throws ApiException {
        okhttp3.Call localVarCall = disasterRecoveryConfigsCreateOrUpdateValidateBeforeCall(resourceGroupName, namespaceName, alias, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<ArmDisasterRecovery>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a new Alias(Disaster Recovery configuration)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param alias The Disaster Recovery configuration name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters required to create an Alias(Disaster Recovery configuration) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Alias(Disaster Recovery configuration) successfully created </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Alias(Disaster Recovery configuration) creation request received </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disasterRecoveryConfigsCreateOrUpdateAsync(String resourceGroupName, String namespaceName, String alias, String apiVersion, String subscriptionId, ArmDisasterRecovery parameters, final ApiCallback<ArmDisasterRecovery> _callback) throws ApiException {

        okhttp3.Call localVarCall = disasterRecoveryConfigsCreateOrUpdateValidateBeforeCall(resourceGroupName, namespaceName, alias, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<ArmDisasterRecovery>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disasterRecoveryConfigsDelete
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param alias The Disaster Recovery configuration name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Alias(Disaster Recovery configuration) request accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disasterRecoveryConfigsDeleteCall(String resourceGroupName, String namespaceName, String alias, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disasterRecoveryConfigsDeleteValidateBeforeCall(String resourceGroupName, String namespaceName, String alias, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling disasterRecoveryConfigsDelete(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling disasterRecoveryConfigsDelete(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling disasterRecoveryConfigsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling disasterRecoveryConfigsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling disasterRecoveryConfigsDelete(Async)");
        }

        return disasterRecoveryConfigsDeleteCall(resourceGroupName, namespaceName, alias, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes an Alias(Disaster Recovery configuration)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param alias The Disaster Recovery configuration name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Alias(Disaster Recovery configuration) request accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void disasterRecoveryConfigsDelete(String resourceGroupName, String namespaceName, String alias, String apiVersion, String subscriptionId) throws ApiException {
        disasterRecoveryConfigsDeleteWithHttpInfo(resourceGroupName, namespaceName, alias, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes an Alias(Disaster Recovery configuration)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param alias The Disaster Recovery configuration name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Alias(Disaster Recovery configuration) request accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> disasterRecoveryConfigsDeleteWithHttpInfo(String resourceGroupName, String namespaceName, String alias, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = disasterRecoveryConfigsDeleteValidateBeforeCall(resourceGroupName, namespaceName, alias, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an Alias(Disaster Recovery configuration)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param alias The Disaster Recovery configuration name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Alias(Disaster Recovery configuration) request accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disasterRecoveryConfigsDeleteAsync(String resourceGroupName, String namespaceName, String alias, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = disasterRecoveryConfigsDeleteValidateBeforeCall(resourceGroupName, namespaceName, alias, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for disasterRecoveryConfigsFailOver
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param alias The Disaster Recovery configuration name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Failover operation is successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disasterRecoveryConfigsFailOverCall(String resourceGroupName, String namespaceName, String alias, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}/failover"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disasterRecoveryConfigsFailOverValidateBeforeCall(String resourceGroupName, String namespaceName, String alias, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling disasterRecoveryConfigsFailOver(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling disasterRecoveryConfigsFailOver(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling disasterRecoveryConfigsFailOver(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling disasterRecoveryConfigsFailOver(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling disasterRecoveryConfigsFailOver(Async)");
        }

        return disasterRecoveryConfigsFailOverCall(resourceGroupName, namespaceName, alias, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Invokes GEO DR failover and reconfigure the alias to point to the secondary namespace
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param alias The Disaster Recovery configuration name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Failover operation is successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void disasterRecoveryConfigsFailOver(String resourceGroupName, String namespaceName, String alias, String apiVersion, String subscriptionId) throws ApiException {
        disasterRecoveryConfigsFailOverWithHttpInfo(resourceGroupName, namespaceName, alias, apiVersion, subscriptionId);
    }

    /**
     * 
     * Invokes GEO DR failover and reconfigure the alias to point to the secondary namespace
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param alias The Disaster Recovery configuration name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Failover operation is successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> disasterRecoveryConfigsFailOverWithHttpInfo(String resourceGroupName, String namespaceName, String alias, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = disasterRecoveryConfigsFailOverValidateBeforeCall(resourceGroupName, namespaceName, alias, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Invokes GEO DR failover and reconfigure the alias to point to the secondary namespace
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param alias The Disaster Recovery configuration name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Failover operation is successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disasterRecoveryConfigsFailOverAsync(String resourceGroupName, String namespaceName, String alias, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = disasterRecoveryConfigsFailOverValidateBeforeCall(resourceGroupName, namespaceName, alias, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for disasterRecoveryConfigsGet
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param alias The Disaster Recovery configuration name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the Alias(Disaster Recovery configurations) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disasterRecoveryConfigsGetCall(String resourceGroupName, String namespaceName, String alias, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disasterRecoveryConfigsGetValidateBeforeCall(String resourceGroupName, String namespaceName, String alias, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling disasterRecoveryConfigsGet(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling disasterRecoveryConfigsGet(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling disasterRecoveryConfigsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling disasterRecoveryConfigsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling disasterRecoveryConfigsGet(Async)");
        }

        return disasterRecoveryConfigsGetCall(resourceGroupName, namespaceName, alias, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Retrieves Alias(Disaster Recovery configuration) for primary or secondary namespace
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param alias The Disaster Recovery configuration name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ArmDisasterRecovery
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the Alias(Disaster Recovery configurations) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ArmDisasterRecovery disasterRecoveryConfigsGet(String resourceGroupName, String namespaceName, String alias, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ArmDisasterRecovery> localVarResp = disasterRecoveryConfigsGetWithHttpInfo(resourceGroupName, namespaceName, alias, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves Alias(Disaster Recovery configuration) for primary or secondary namespace
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param alias The Disaster Recovery configuration name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;ArmDisasterRecovery&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the Alias(Disaster Recovery configurations) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ArmDisasterRecovery> disasterRecoveryConfigsGetWithHttpInfo(String resourceGroupName, String namespaceName, String alias, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = disasterRecoveryConfigsGetValidateBeforeCall(resourceGroupName, namespaceName, alias, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ArmDisasterRecovery>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves Alias(Disaster Recovery configuration) for primary or secondary namespace
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param alias The Disaster Recovery configuration name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the Alias(Disaster Recovery configurations) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disasterRecoveryConfigsGetAsync(String resourceGroupName, String namespaceName, String alias, String apiVersion, String subscriptionId, final ApiCallback<ArmDisasterRecovery> _callback) throws ApiException {

        okhttp3.Call localVarCall = disasterRecoveryConfigsGetValidateBeforeCall(resourceGroupName, namespaceName, alias, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ArmDisasterRecovery>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disasterRecoveryConfigsGetAuthorizationRule
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param alias The Disaster Recovery configuration name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DisasterRecoveryConfigs authorization rule returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639392.aspx"> Documentation</a>
     */
    public okhttp3.Call disasterRecoveryConfigsGetAuthorizationRuleCall(String resourceGroupName, String namespaceName, String alias, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}/AuthorizationRules/{authorizationRuleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()))
            .replace("{" + "authorizationRuleName" + "}", localVarApiClient.escapeString(authorizationRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disasterRecoveryConfigsGetAuthorizationRuleValidateBeforeCall(String resourceGroupName, String namespaceName, String alias, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling disasterRecoveryConfigsGetAuthorizationRule(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling disasterRecoveryConfigsGetAuthorizationRule(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling disasterRecoveryConfigsGetAuthorizationRule(Async)");
        }

        // verify the required parameter 'authorizationRuleName' is set
        if (authorizationRuleName == null) {
            throw new ApiException("Missing the required parameter 'authorizationRuleName' when calling disasterRecoveryConfigsGetAuthorizationRule(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling disasterRecoveryConfigsGetAuthorizationRule(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling disasterRecoveryConfigsGetAuthorizationRule(Async)");
        }

        return disasterRecoveryConfigsGetAuthorizationRuleCall(resourceGroupName, namespaceName, alias, authorizationRuleName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets an authorization rule for a namespace by rule name.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param alias The Disaster Recovery configuration name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return SBAuthorizationRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DisasterRecoveryConfigs authorization rule returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639392.aspx"> Documentation</a>
     */
    public SBAuthorizationRule disasterRecoveryConfigsGetAuthorizationRule(String resourceGroupName, String namespaceName, String alias, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<SBAuthorizationRule> localVarResp = disasterRecoveryConfigsGetAuthorizationRuleWithHttpInfo(resourceGroupName, namespaceName, alias, authorizationRuleName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets an authorization rule for a namespace by rule name.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param alias The Disaster Recovery configuration name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;SBAuthorizationRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DisasterRecoveryConfigs authorization rule returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639392.aspx"> Documentation</a>
     */
    public ApiResponse<SBAuthorizationRule> disasterRecoveryConfigsGetAuthorizationRuleWithHttpInfo(String resourceGroupName, String namespaceName, String alias, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = disasterRecoveryConfigsGetAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, alias, authorizationRuleName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<SBAuthorizationRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets an authorization rule for a namespace by rule name.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param alias The Disaster Recovery configuration name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DisasterRecoveryConfigs authorization rule returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639392.aspx"> Documentation</a>
     */
    public okhttp3.Call disasterRecoveryConfigsGetAuthorizationRuleAsync(String resourceGroupName, String namespaceName, String alias, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback<SBAuthorizationRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = disasterRecoveryConfigsGetAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, alias, authorizationRuleName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<SBAuthorizationRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disasterRecoveryConfigsList
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of Alias(Disaster Recovery configurations) for servicebus namespace </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disasterRecoveryConfigsListCall(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disasterRecoveryConfigsListValidateBeforeCall(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling disasterRecoveryConfigsList(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling disasterRecoveryConfigsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling disasterRecoveryConfigsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling disasterRecoveryConfigsList(Async)");
        }

        return disasterRecoveryConfigsListCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets all Alias(Disaster Recovery configurations)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ArmDisasterRecoveryListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of Alias(Disaster Recovery configurations) for servicebus namespace </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ArmDisasterRecoveryListResult disasterRecoveryConfigsList(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ArmDisasterRecoveryListResult> localVarResp = disasterRecoveryConfigsListWithHttpInfo(resourceGroupName, namespaceName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all Alias(Disaster Recovery configurations)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;ArmDisasterRecoveryListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of Alias(Disaster Recovery configurations) for servicebus namespace </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ArmDisasterRecoveryListResult> disasterRecoveryConfigsListWithHttpInfo(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = disasterRecoveryConfigsListValidateBeforeCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ArmDisasterRecoveryListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all Alias(Disaster Recovery configurations)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of Alias(Disaster Recovery configurations) for servicebus namespace </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disasterRecoveryConfigsListAsync(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, final ApiCallback<ArmDisasterRecoveryListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = disasterRecoveryConfigsListValidateBeforeCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ArmDisasterRecoveryListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disasterRecoveryConfigsListAuthorizationRules
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param alias The Disaster Recovery configuration name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DisasterRecoveryConfigs authorization rules returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639376.aspx"> Documentation</a>
     */
    public okhttp3.Call disasterRecoveryConfigsListAuthorizationRulesCall(String resourceGroupName, String namespaceName, String alias, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}/AuthorizationRules"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disasterRecoveryConfigsListAuthorizationRulesValidateBeforeCall(String resourceGroupName, String namespaceName, String alias, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling disasterRecoveryConfigsListAuthorizationRules(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling disasterRecoveryConfigsListAuthorizationRules(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling disasterRecoveryConfigsListAuthorizationRules(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling disasterRecoveryConfigsListAuthorizationRules(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling disasterRecoveryConfigsListAuthorizationRules(Async)");
        }

        return disasterRecoveryConfigsListAuthorizationRulesCall(resourceGroupName, namespaceName, alias, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets the authorization rules for a namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param alias The Disaster Recovery configuration name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return SBAuthorizationRuleListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DisasterRecoveryConfigs authorization rules returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639376.aspx"> Documentation</a>
     */
    public SBAuthorizationRuleListResult disasterRecoveryConfigsListAuthorizationRules(String resourceGroupName, String namespaceName, String alias, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<SBAuthorizationRuleListResult> localVarResp = disasterRecoveryConfigsListAuthorizationRulesWithHttpInfo(resourceGroupName, namespaceName, alias, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the authorization rules for a namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param alias The Disaster Recovery configuration name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;SBAuthorizationRuleListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DisasterRecoveryConfigs authorization rules returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639376.aspx"> Documentation</a>
     */
    public ApiResponse<SBAuthorizationRuleListResult> disasterRecoveryConfigsListAuthorizationRulesWithHttpInfo(String resourceGroupName, String namespaceName, String alias, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = disasterRecoveryConfigsListAuthorizationRulesValidateBeforeCall(resourceGroupName, namespaceName, alias, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<SBAuthorizationRuleListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the authorization rules for a namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param alias The Disaster Recovery configuration name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DisasterRecoveryConfigs authorization rules returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639376.aspx"> Documentation</a>
     */
    public okhttp3.Call disasterRecoveryConfigsListAuthorizationRulesAsync(String resourceGroupName, String namespaceName, String alias, String apiVersion, String subscriptionId, final ApiCallback<SBAuthorizationRuleListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = disasterRecoveryConfigsListAuthorizationRulesValidateBeforeCall(resourceGroupName, namespaceName, alias, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<SBAuthorizationRuleListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disasterRecoveryConfigsListKeys
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param alias The Disaster Recovery configuration name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection strings successfully returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639398.aspx"> Documentation</a>
     */
    public okhttp3.Call disasterRecoveryConfigsListKeysCall(String resourceGroupName, String namespaceName, String alias, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}/AuthorizationRules/{authorizationRuleName}/listKeys"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()))
            .replace("{" + "authorizationRuleName" + "}", localVarApiClient.escapeString(authorizationRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disasterRecoveryConfigsListKeysValidateBeforeCall(String resourceGroupName, String namespaceName, String alias, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling disasterRecoveryConfigsListKeys(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling disasterRecoveryConfigsListKeys(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling disasterRecoveryConfigsListKeys(Async)");
        }

        // verify the required parameter 'authorizationRuleName' is set
        if (authorizationRuleName == null) {
            throw new ApiException("Missing the required parameter 'authorizationRuleName' when calling disasterRecoveryConfigsListKeys(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling disasterRecoveryConfigsListKeys(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling disasterRecoveryConfigsListKeys(Async)");
        }

        return disasterRecoveryConfigsListKeysCall(resourceGroupName, namespaceName, alias, authorizationRuleName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets the primary and secondary connection strings for the namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param alias The Disaster Recovery configuration name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return AccessKeys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection strings successfully returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639398.aspx"> Documentation</a>
     */
    public AccessKeys disasterRecoveryConfigsListKeys(String resourceGroupName, String namespaceName, String alias, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<AccessKeys> localVarResp = disasterRecoveryConfigsListKeysWithHttpInfo(resourceGroupName, namespaceName, alias, authorizationRuleName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the primary and secondary connection strings for the namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param alias The Disaster Recovery configuration name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;AccessKeys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection strings successfully returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639398.aspx"> Documentation</a>
     */
    public ApiResponse<AccessKeys> disasterRecoveryConfigsListKeysWithHttpInfo(String resourceGroupName, String namespaceName, String alias, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = disasterRecoveryConfigsListKeysValidateBeforeCall(resourceGroupName, namespaceName, alias, authorizationRuleName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<AccessKeys>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the primary and secondary connection strings for the namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param alias The Disaster Recovery configuration name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection strings successfully returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639398.aspx"> Documentation</a>
     */
    public okhttp3.Call disasterRecoveryConfigsListKeysAsync(String resourceGroupName, String namespaceName, String alias, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback<AccessKeys> _callback) throws ApiException {

        okhttp3.Call localVarCall = disasterRecoveryConfigsListKeysValidateBeforeCall(resourceGroupName, namespaceName, alias, authorizationRuleName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<AccessKeys>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
