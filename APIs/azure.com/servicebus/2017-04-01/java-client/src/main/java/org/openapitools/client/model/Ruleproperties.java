/*
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2017-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Action;
import org.openapitools.client.model.CorrelationFilter;
import org.openapitools.client.model.FilterType;
import org.openapitools.client.model.SqlFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Description of Rule Resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:48.552458-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Ruleproperties {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private Action action;

  public static final String SERIALIZED_NAME_CORRELATION_FILTER = "correlationFilter";
  @SerializedName(SERIALIZED_NAME_CORRELATION_FILTER)
  private CorrelationFilter correlationFilter;

  public static final String SERIALIZED_NAME_FILTER_TYPE = "filterType";
  @SerializedName(SERIALIZED_NAME_FILTER_TYPE)
  private FilterType filterType;

  public static final String SERIALIZED_NAME_SQL_FILTER = "sqlFilter";
  @SerializedName(SERIALIZED_NAME_SQL_FILTER)
  private SqlFilter sqlFilter;

  public Ruleproperties() {
  }

  public Ruleproperties action(Action action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nullable
  public Action getAction() {
    return action;
  }

  public void setAction(Action action) {
    this.action = action;
  }


  public Ruleproperties correlationFilter(CorrelationFilter correlationFilter) {
    this.correlationFilter = correlationFilter;
    return this;
  }

  /**
   * Get correlationFilter
   * @return correlationFilter
   */
  @javax.annotation.Nullable
  public CorrelationFilter getCorrelationFilter() {
    return correlationFilter;
  }

  public void setCorrelationFilter(CorrelationFilter correlationFilter) {
    this.correlationFilter = correlationFilter;
  }


  public Ruleproperties filterType(FilterType filterType) {
    this.filterType = filterType;
    return this;
  }

  /**
   * Get filterType
   * @return filterType
   */
  @javax.annotation.Nullable
  public FilterType getFilterType() {
    return filterType;
  }

  public void setFilterType(FilterType filterType) {
    this.filterType = filterType;
  }


  public Ruleproperties sqlFilter(SqlFilter sqlFilter) {
    this.sqlFilter = sqlFilter;
    return this;
  }

  /**
   * Get sqlFilter
   * @return sqlFilter
   */
  @javax.annotation.Nullable
  public SqlFilter getSqlFilter() {
    return sqlFilter;
  }

  public void setSqlFilter(SqlFilter sqlFilter) {
    this.sqlFilter = sqlFilter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Ruleproperties ruleproperties = (Ruleproperties) o;
    return Objects.equals(this.action, ruleproperties.action) &&
        Objects.equals(this.correlationFilter, ruleproperties.correlationFilter) &&
        Objects.equals(this.filterType, ruleproperties.filterType) &&
        Objects.equals(this.sqlFilter, ruleproperties.sqlFilter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, correlationFilter, filterType, sqlFilter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Ruleproperties {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    correlationFilter: ").append(toIndentedString(correlationFilter)).append("\n");
    sb.append("    filterType: ").append(toIndentedString(filterType)).append("\n");
    sb.append("    sqlFilter: ").append(toIndentedString(sqlFilter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("correlationFilter");
    openapiFields.add("filterType");
    openapiFields.add("sqlFilter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Ruleproperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Ruleproperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Ruleproperties is not found in the empty JSON string", Ruleproperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Ruleproperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Ruleproperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `action`
      if (jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) {
        Action.validateJsonElement(jsonObj.get("action"));
      }
      // validate the optional field `correlationFilter`
      if (jsonObj.get("correlationFilter") != null && !jsonObj.get("correlationFilter").isJsonNull()) {
        CorrelationFilter.validateJsonElement(jsonObj.get("correlationFilter"));
      }
      // validate the optional field `filterType`
      if (jsonObj.get("filterType") != null && !jsonObj.get("filterType").isJsonNull()) {
        FilterType.validateJsonElement(jsonObj.get("filterType"));
      }
      // validate the optional field `sqlFilter`
      if (jsonObj.get("sqlFilter") != null && !jsonObj.get("sqlFilter").isJsonNull()) {
        SqlFilter.validateJsonElement(jsonObj.get("sqlFilter"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Ruleproperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Ruleproperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Ruleproperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Ruleproperties.class));

       return (TypeAdapter<T>) new TypeAdapter<Ruleproperties>() {
           @Override
           public void write(JsonWriter out, Ruleproperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Ruleproperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Ruleproperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Ruleproperties
   * @throws IOException if the JSON string is invalid with respect to Ruleproperties
   */
  public static Ruleproperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Ruleproperties.class);
  }

  /**
   * Convert an instance of Ruleproperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

