/*
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2017-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccessKeys;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.RegenerateAccessKeyParameters;
import org.openapitools.client.model.SBAuthorizationRule;
import org.openapitools.client.model.SBAuthorizationRuleListResult;
import org.openapitools.client.model.SBTopic;
import org.openapitools.client.model.SBTopicListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TopicsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TopicsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TopicsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for topicsCreateOrUpdate
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create a topic resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639409.aspx"> Documentation</a>
     */
    public okhttp3.Call topicsCreateOrUpdateCall(String resourceGroupName, String namespaceName, String topicName, String apiVersion, String subscriptionId, SBTopic parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "topicName" + "}", localVarApiClient.escapeString(topicName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call topicsCreateOrUpdateValidateBeforeCall(String resourceGroupName, String namespaceName, String topicName, String apiVersion, String subscriptionId, SBTopic parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling topicsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling topicsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'topicName' is set
        if (topicName == null) {
            throw new ApiException("Missing the required parameter 'topicName' when calling topicsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling topicsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling topicsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling topicsCreateOrUpdate(Async)");
        }

        return topicsCreateOrUpdateCall(resourceGroupName, namespaceName, topicName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates a topic in the specified namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create a topic resource. (required)
     * @return SBTopic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639409.aspx"> Documentation</a>
     */
    public SBTopic topicsCreateOrUpdate(String resourceGroupName, String namespaceName, String topicName, String apiVersion, String subscriptionId, SBTopic parameters) throws ApiException {
        ApiResponse<SBTopic> localVarResp = topicsCreateOrUpdateWithHttpInfo(resourceGroupName, namespaceName, topicName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a topic in the specified namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create a topic resource. (required)
     * @return ApiResponse&lt;SBTopic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639409.aspx"> Documentation</a>
     */
    public ApiResponse<SBTopic> topicsCreateOrUpdateWithHttpInfo(String resourceGroupName, String namespaceName, String topicName, String apiVersion, String subscriptionId, SBTopic parameters) throws ApiException {
        okhttp3.Call localVarCall = topicsCreateOrUpdateValidateBeforeCall(resourceGroupName, namespaceName, topicName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<SBTopic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a topic in the specified namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create a topic resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639409.aspx"> Documentation</a>
     */
    public okhttp3.Call topicsCreateOrUpdateAsync(String resourceGroupName, String namespaceName, String topicName, String apiVersion, String subscriptionId, SBTopic parameters, final ApiCallback<SBTopic> _callback) throws ApiException {

        okhttp3.Call localVarCall = topicsCreateOrUpdateValidateBeforeCall(resourceGroupName, namespaceName, topicName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<SBTopic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for topicsCreateOrUpdateAuthorizationRule
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The shared access authorization rule. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic authorization rule successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt720678.aspx"> Documentation</a>
     */
    public okhttp3.Call topicsCreateOrUpdateAuthorizationRuleCall(String resourceGroupName, String namespaceName, String topicName, String authorizationRuleName, String apiVersion, String subscriptionId, SBAuthorizationRule parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/authorizationRules/{authorizationRuleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "topicName" + "}", localVarApiClient.escapeString(topicName.toString()))
            .replace("{" + "authorizationRuleName" + "}", localVarApiClient.escapeString(authorizationRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call topicsCreateOrUpdateAuthorizationRuleValidateBeforeCall(String resourceGroupName, String namespaceName, String topicName, String authorizationRuleName, String apiVersion, String subscriptionId, SBAuthorizationRule parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling topicsCreateOrUpdateAuthorizationRule(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling topicsCreateOrUpdateAuthorizationRule(Async)");
        }

        // verify the required parameter 'topicName' is set
        if (topicName == null) {
            throw new ApiException("Missing the required parameter 'topicName' when calling topicsCreateOrUpdateAuthorizationRule(Async)");
        }

        // verify the required parameter 'authorizationRuleName' is set
        if (authorizationRuleName == null) {
            throw new ApiException("Missing the required parameter 'authorizationRuleName' when calling topicsCreateOrUpdateAuthorizationRule(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling topicsCreateOrUpdateAuthorizationRule(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling topicsCreateOrUpdateAuthorizationRule(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling topicsCreateOrUpdateAuthorizationRule(Async)");
        }

        return topicsCreateOrUpdateAuthorizationRuleCall(resourceGroupName, namespaceName, topicName, authorizationRuleName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates an authorization rule for the specified topic.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The shared access authorization rule. (required)
     * @return SBAuthorizationRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic authorization rule successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt720678.aspx"> Documentation</a>
     */
    public SBAuthorizationRule topicsCreateOrUpdateAuthorizationRule(String resourceGroupName, String namespaceName, String topicName, String authorizationRuleName, String apiVersion, String subscriptionId, SBAuthorizationRule parameters) throws ApiException {
        ApiResponse<SBAuthorizationRule> localVarResp = topicsCreateOrUpdateAuthorizationRuleWithHttpInfo(resourceGroupName, namespaceName, topicName, authorizationRuleName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates an authorization rule for the specified topic.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The shared access authorization rule. (required)
     * @return ApiResponse&lt;SBAuthorizationRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic authorization rule successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt720678.aspx"> Documentation</a>
     */
    public ApiResponse<SBAuthorizationRule> topicsCreateOrUpdateAuthorizationRuleWithHttpInfo(String resourceGroupName, String namespaceName, String topicName, String authorizationRuleName, String apiVersion, String subscriptionId, SBAuthorizationRule parameters) throws ApiException {
        okhttp3.Call localVarCall = topicsCreateOrUpdateAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, topicName, authorizationRuleName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<SBAuthorizationRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates an authorization rule for the specified topic.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The shared access authorization rule. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic authorization rule successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt720678.aspx"> Documentation</a>
     */
    public okhttp3.Call topicsCreateOrUpdateAuthorizationRuleAsync(String resourceGroupName, String namespaceName, String topicName, String authorizationRuleName, String apiVersion, String subscriptionId, SBAuthorizationRule parameters, final ApiCallback<SBAuthorizationRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = topicsCreateOrUpdateAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, topicName, authorizationRuleName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<SBAuthorizationRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for topicsDelete
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639404.aspx"> Documentation</a>
     */
    public okhttp3.Call topicsDeleteCall(String resourceGroupName, String namespaceName, String topicName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "topicName" + "}", localVarApiClient.escapeString(topicName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call topicsDeleteValidateBeforeCall(String resourceGroupName, String namespaceName, String topicName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling topicsDelete(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling topicsDelete(Async)");
        }

        // verify the required parameter 'topicName' is set
        if (topicName == null) {
            throw new ApiException("Missing the required parameter 'topicName' when calling topicsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling topicsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling topicsDelete(Async)");
        }

        return topicsDeleteCall(resourceGroupName, namespaceName, topicName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes a topic from the specified namespace and resource group.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639404.aspx"> Documentation</a>
     */
    public void topicsDelete(String resourceGroupName, String namespaceName, String topicName, String apiVersion, String subscriptionId) throws ApiException {
        topicsDeleteWithHttpInfo(resourceGroupName, namespaceName, topicName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes a topic from the specified namespace and resource group.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639404.aspx"> Documentation</a>
     */
    public ApiResponse<Void> topicsDeleteWithHttpInfo(String resourceGroupName, String namespaceName, String topicName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = topicsDeleteValidateBeforeCall(resourceGroupName, namespaceName, topicName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a topic from the specified namespace and resource group.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639404.aspx"> Documentation</a>
     */
    public okhttp3.Call topicsDeleteAsync(String resourceGroupName, String namespaceName, String topicName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = topicsDeleteValidateBeforeCall(resourceGroupName, namespaceName, topicName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for topicsDeleteAuthorizationRule
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic authorization rule successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt720681.aspx"> Documentation</a>
     */
    public okhttp3.Call topicsDeleteAuthorizationRuleCall(String resourceGroupName, String namespaceName, String topicName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/authorizationRules/{authorizationRuleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "topicName" + "}", localVarApiClient.escapeString(topicName.toString()))
            .replace("{" + "authorizationRuleName" + "}", localVarApiClient.escapeString(authorizationRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call topicsDeleteAuthorizationRuleValidateBeforeCall(String resourceGroupName, String namespaceName, String topicName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling topicsDeleteAuthorizationRule(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling topicsDeleteAuthorizationRule(Async)");
        }

        // verify the required parameter 'topicName' is set
        if (topicName == null) {
            throw new ApiException("Missing the required parameter 'topicName' when calling topicsDeleteAuthorizationRule(Async)");
        }

        // verify the required parameter 'authorizationRuleName' is set
        if (authorizationRuleName == null) {
            throw new ApiException("Missing the required parameter 'authorizationRuleName' when calling topicsDeleteAuthorizationRule(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling topicsDeleteAuthorizationRule(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling topicsDeleteAuthorizationRule(Async)");
        }

        return topicsDeleteAuthorizationRuleCall(resourceGroupName, namespaceName, topicName, authorizationRuleName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes a topic authorization rule.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic authorization rule successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt720681.aspx"> Documentation</a>
     */
    public void topicsDeleteAuthorizationRule(String resourceGroupName, String namespaceName, String topicName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        topicsDeleteAuthorizationRuleWithHttpInfo(resourceGroupName, namespaceName, topicName, authorizationRuleName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes a topic authorization rule.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic authorization rule successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt720681.aspx"> Documentation</a>
     */
    public ApiResponse<Void> topicsDeleteAuthorizationRuleWithHttpInfo(String resourceGroupName, String namespaceName, String topicName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = topicsDeleteAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, topicName, authorizationRuleName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a topic authorization rule.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic authorization rule successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt720681.aspx"> Documentation</a>
     */
    public okhttp3.Call topicsDeleteAuthorizationRuleAsync(String resourceGroupName, String namespaceName, String topicName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = topicsDeleteAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, topicName, authorizationRuleName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for topicsGet
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic description successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639399.aspx"> Documentation</a>
     */
    public okhttp3.Call topicsGetCall(String resourceGroupName, String namespaceName, String topicName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "topicName" + "}", localVarApiClient.escapeString(topicName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call topicsGetValidateBeforeCall(String resourceGroupName, String namespaceName, String topicName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling topicsGet(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling topicsGet(Async)");
        }

        // verify the required parameter 'topicName' is set
        if (topicName == null) {
            throw new ApiException("Missing the required parameter 'topicName' when calling topicsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling topicsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling topicsGet(Async)");
        }

        return topicsGetCall(resourceGroupName, namespaceName, topicName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Returns a description for the specified topic.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return SBTopic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic description successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639399.aspx"> Documentation</a>
     */
    public SBTopic topicsGet(String resourceGroupName, String namespaceName, String topicName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<SBTopic> localVarResp = topicsGetWithHttpInfo(resourceGroupName, namespaceName, topicName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a description for the specified topic.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;SBTopic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic description successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639399.aspx"> Documentation</a>
     */
    public ApiResponse<SBTopic> topicsGetWithHttpInfo(String resourceGroupName, String namespaceName, String topicName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = topicsGetValidateBeforeCall(resourceGroupName, namespaceName, topicName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<SBTopic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a description for the specified topic.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic description successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639399.aspx"> Documentation</a>
     */
    public okhttp3.Call topicsGetAsync(String resourceGroupName, String namespaceName, String topicName, String apiVersion, String subscriptionId, final ApiCallback<SBTopic> _callback) throws ApiException {

        okhttp3.Call localVarCall = topicsGetValidateBeforeCall(resourceGroupName, namespaceName, topicName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<SBTopic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for topicsGetAuthorizationRule
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic authorization rule returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt720676.aspx"> Documentation</a>
     */
    public okhttp3.Call topicsGetAuthorizationRuleCall(String resourceGroupName, String namespaceName, String topicName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/authorizationRules/{authorizationRuleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "topicName" + "}", localVarApiClient.escapeString(topicName.toString()))
            .replace("{" + "authorizationRuleName" + "}", localVarApiClient.escapeString(authorizationRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call topicsGetAuthorizationRuleValidateBeforeCall(String resourceGroupName, String namespaceName, String topicName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling topicsGetAuthorizationRule(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling topicsGetAuthorizationRule(Async)");
        }

        // verify the required parameter 'topicName' is set
        if (topicName == null) {
            throw new ApiException("Missing the required parameter 'topicName' when calling topicsGetAuthorizationRule(Async)");
        }

        // verify the required parameter 'authorizationRuleName' is set
        if (authorizationRuleName == null) {
            throw new ApiException("Missing the required parameter 'authorizationRuleName' when calling topicsGetAuthorizationRule(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling topicsGetAuthorizationRule(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling topicsGetAuthorizationRule(Async)");
        }

        return topicsGetAuthorizationRuleCall(resourceGroupName, namespaceName, topicName, authorizationRuleName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Returns the specified authorization rule.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return SBAuthorizationRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic authorization rule returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt720676.aspx"> Documentation</a>
     */
    public SBAuthorizationRule topicsGetAuthorizationRule(String resourceGroupName, String namespaceName, String topicName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<SBAuthorizationRule> localVarResp = topicsGetAuthorizationRuleWithHttpInfo(resourceGroupName, namespaceName, topicName, authorizationRuleName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the specified authorization rule.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;SBAuthorizationRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic authorization rule returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt720676.aspx"> Documentation</a>
     */
    public ApiResponse<SBAuthorizationRule> topicsGetAuthorizationRuleWithHttpInfo(String resourceGroupName, String namespaceName, String topicName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = topicsGetAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, topicName, authorizationRuleName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<SBAuthorizationRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the specified authorization rule.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic authorization rule returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt720676.aspx"> Documentation</a>
     */
    public okhttp3.Call topicsGetAuthorizationRuleAsync(String resourceGroupName, String namespaceName, String topicName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback<SBAuthorizationRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = topicsGetAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, topicName, authorizationRuleName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<SBAuthorizationRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for topicsListAuthorizationRules
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rules successfully returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt720681.aspx"> Documentation</a>
     */
    public okhttp3.Call topicsListAuthorizationRulesCall(String resourceGroupName, String namespaceName, String topicName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/authorizationRules"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "topicName" + "}", localVarApiClient.escapeString(topicName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call topicsListAuthorizationRulesValidateBeforeCall(String resourceGroupName, String namespaceName, String topicName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling topicsListAuthorizationRules(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling topicsListAuthorizationRules(Async)");
        }

        // verify the required parameter 'topicName' is set
        if (topicName == null) {
            throw new ApiException("Missing the required parameter 'topicName' when calling topicsListAuthorizationRules(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling topicsListAuthorizationRules(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling topicsListAuthorizationRules(Async)");
        }

        return topicsListAuthorizationRulesCall(resourceGroupName, namespaceName, topicName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets authorization rules for a topic.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return SBAuthorizationRuleListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rules successfully returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt720681.aspx"> Documentation</a>
     */
    public SBAuthorizationRuleListResult topicsListAuthorizationRules(String resourceGroupName, String namespaceName, String topicName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<SBAuthorizationRuleListResult> localVarResp = topicsListAuthorizationRulesWithHttpInfo(resourceGroupName, namespaceName, topicName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets authorization rules for a topic.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;SBAuthorizationRuleListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rules successfully returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt720681.aspx"> Documentation</a>
     */
    public ApiResponse<SBAuthorizationRuleListResult> topicsListAuthorizationRulesWithHttpInfo(String resourceGroupName, String namespaceName, String topicName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = topicsListAuthorizationRulesValidateBeforeCall(resourceGroupName, namespaceName, topicName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<SBAuthorizationRuleListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets authorization rules for a topic.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rules successfully returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt720681.aspx"> Documentation</a>
     */
    public okhttp3.Call topicsListAuthorizationRulesAsync(String resourceGroupName, String namespaceName, String topicName, String apiVersion, String subscriptionId, final ApiCallback<SBAuthorizationRuleListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = topicsListAuthorizationRulesValidateBeforeCall(resourceGroupName, namespaceName, topicName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<SBAuthorizationRuleListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for topicsListByNamespace
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $skip Skip is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skip parameter that specifies a starting point to use for subsequent calls. (optional)
     * @param $top May be used to limit the number of results to the most recent N usageDetails. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved list of topics. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639388.aspx"> Documentation</a>
     */
    public okhttp3.Call topicsListByNamespaceCall(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, Integer $skip, Integer $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call topicsListByNamespaceValidateBeforeCall(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, Integer $skip, Integer $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling topicsListByNamespace(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling topicsListByNamespace(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling topicsListByNamespace(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling topicsListByNamespace(Async)");
        }

        return topicsListByNamespaceCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, $skip, $top, _callback);

    }

    /**
     * 
     * Gets all the topics in a namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $skip Skip is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skip parameter that specifies a starting point to use for subsequent calls. (optional)
     * @param $top May be used to limit the number of results to the most recent N usageDetails. (optional)
     * @return SBTopicListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved list of topics. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639388.aspx"> Documentation</a>
     */
    public SBTopicListResult topicsListByNamespace(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, Integer $skip, Integer $top) throws ApiException {
        ApiResponse<SBTopicListResult> localVarResp = topicsListByNamespaceWithHttpInfo(resourceGroupName, namespaceName, apiVersion, subscriptionId, $skip, $top);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all the topics in a namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $skip Skip is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skip parameter that specifies a starting point to use for subsequent calls. (optional)
     * @param $top May be used to limit the number of results to the most recent N usageDetails. (optional)
     * @return ApiResponse&lt;SBTopicListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved list of topics. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639388.aspx"> Documentation</a>
     */
    public ApiResponse<SBTopicListResult> topicsListByNamespaceWithHttpInfo(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, Integer $skip, Integer $top) throws ApiException {
        okhttp3.Call localVarCall = topicsListByNamespaceValidateBeforeCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, $skip, $top, null);
        Type localVarReturnType = new TypeToken<SBTopicListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all the topics in a namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $skip Skip is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skip parameter that specifies a starting point to use for subsequent calls. (optional)
     * @param $top May be used to limit the number of results to the most recent N usageDetails. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved list of topics. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639388.aspx"> Documentation</a>
     */
    public okhttp3.Call topicsListByNamespaceAsync(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, Integer $skip, Integer $top, final ApiCallback<SBTopicListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = topicsListByNamespaceValidateBeforeCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, $skip, $top, _callback);
        Type localVarReturnType = new TypeToken<SBTopicListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for topicsListKeys
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection strings successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt720677.aspx"> Documentation</a>
     */
    public okhttp3.Call topicsListKeysCall(String resourceGroupName, String namespaceName, String topicName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/authorizationRules/{authorizationRuleName}/ListKeys"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "topicName" + "}", localVarApiClient.escapeString(topicName.toString()))
            .replace("{" + "authorizationRuleName" + "}", localVarApiClient.escapeString(authorizationRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call topicsListKeysValidateBeforeCall(String resourceGroupName, String namespaceName, String topicName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling topicsListKeys(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling topicsListKeys(Async)");
        }

        // verify the required parameter 'topicName' is set
        if (topicName == null) {
            throw new ApiException("Missing the required parameter 'topicName' when calling topicsListKeys(Async)");
        }

        // verify the required parameter 'authorizationRuleName' is set
        if (authorizationRuleName == null) {
            throw new ApiException("Missing the required parameter 'authorizationRuleName' when calling topicsListKeys(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling topicsListKeys(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling topicsListKeys(Async)");
        }

        return topicsListKeysCall(resourceGroupName, namespaceName, topicName, authorizationRuleName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets the primary and secondary connection strings for the topic.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return AccessKeys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection strings successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt720677.aspx"> Documentation</a>
     */
    public AccessKeys topicsListKeys(String resourceGroupName, String namespaceName, String topicName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<AccessKeys> localVarResp = topicsListKeysWithHttpInfo(resourceGroupName, namespaceName, topicName, authorizationRuleName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the primary and secondary connection strings for the topic.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;AccessKeys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection strings successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt720677.aspx"> Documentation</a>
     */
    public ApiResponse<AccessKeys> topicsListKeysWithHttpInfo(String resourceGroupName, String namespaceName, String topicName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = topicsListKeysValidateBeforeCall(resourceGroupName, namespaceName, topicName, authorizationRuleName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<AccessKeys>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the primary and secondary connection strings for the topic.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection strings successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt720677.aspx"> Documentation</a>
     */
    public okhttp3.Call topicsListKeysAsync(String resourceGroupName, String namespaceName, String topicName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback<AccessKeys> _callback) throws ApiException {

        okhttp3.Call localVarCall = topicsListKeysValidateBeforeCall(resourceGroupName, namespaceName, topicName, authorizationRuleName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<AccessKeys>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for topicsRegenerateKeys
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to regenerate the authorization rule. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection strings successfully regenerated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt720679.aspx"> Documentation</a>
     */
    public okhttp3.Call topicsRegenerateKeysCall(String resourceGroupName, String namespaceName, String topicName, String authorizationRuleName, String apiVersion, String subscriptionId, RegenerateAccessKeyParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/authorizationRules/{authorizationRuleName}/regenerateKeys"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "topicName" + "}", localVarApiClient.escapeString(topicName.toString()))
            .replace("{" + "authorizationRuleName" + "}", localVarApiClient.escapeString(authorizationRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call topicsRegenerateKeysValidateBeforeCall(String resourceGroupName, String namespaceName, String topicName, String authorizationRuleName, String apiVersion, String subscriptionId, RegenerateAccessKeyParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling topicsRegenerateKeys(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling topicsRegenerateKeys(Async)");
        }

        // verify the required parameter 'topicName' is set
        if (topicName == null) {
            throw new ApiException("Missing the required parameter 'topicName' when calling topicsRegenerateKeys(Async)");
        }

        // verify the required parameter 'authorizationRuleName' is set
        if (authorizationRuleName == null) {
            throw new ApiException("Missing the required parameter 'authorizationRuleName' when calling topicsRegenerateKeys(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling topicsRegenerateKeys(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling topicsRegenerateKeys(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling topicsRegenerateKeys(Async)");
        }

        return topicsRegenerateKeysCall(resourceGroupName, namespaceName, topicName, authorizationRuleName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Regenerates primary or secondary connection strings for the topic.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to regenerate the authorization rule. (required)
     * @return AccessKeys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection strings successfully regenerated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt720679.aspx"> Documentation</a>
     */
    public AccessKeys topicsRegenerateKeys(String resourceGroupName, String namespaceName, String topicName, String authorizationRuleName, String apiVersion, String subscriptionId, RegenerateAccessKeyParameters parameters) throws ApiException {
        ApiResponse<AccessKeys> localVarResp = topicsRegenerateKeysWithHttpInfo(resourceGroupName, namespaceName, topicName, authorizationRuleName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Regenerates primary or secondary connection strings for the topic.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to regenerate the authorization rule. (required)
     * @return ApiResponse&lt;AccessKeys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection strings successfully regenerated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt720679.aspx"> Documentation</a>
     */
    public ApiResponse<AccessKeys> topicsRegenerateKeysWithHttpInfo(String resourceGroupName, String namespaceName, String topicName, String authorizationRuleName, String apiVersion, String subscriptionId, RegenerateAccessKeyParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = topicsRegenerateKeysValidateBeforeCall(resourceGroupName, namespaceName, topicName, authorizationRuleName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<AccessKeys>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Regenerates primary or secondary connection strings for the topic.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to regenerate the authorization rule. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection strings successfully regenerated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt720679.aspx"> Documentation</a>
     */
    public okhttp3.Call topicsRegenerateKeysAsync(String resourceGroupName, String namespaceName, String topicName, String authorizationRuleName, String apiVersion, String subscriptionId, RegenerateAccessKeyParameters parameters, final ApiCallback<AccessKeys> _callback) throws ApiException {

        okhttp3.Call localVarCall = topicsRegenerateKeysValidateBeforeCall(resourceGroupName, namespaceName, topicName, authorizationRuleName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<AccessKeys>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
