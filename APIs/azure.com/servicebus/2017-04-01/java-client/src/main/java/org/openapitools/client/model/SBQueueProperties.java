/*
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2017-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.EntityStatus;
import org.openapitools.client.model.MessageCountDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Queue Properties definition.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:48.552458-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SBQueueProperties {
  public static final String SERIALIZED_NAME_ACCESSED_AT = "accessedAt";
  @SerializedName(SERIALIZED_NAME_ACCESSED_AT)
  private OffsetDateTime accessedAt;

  public static final String SERIALIZED_NAME_AUTO_DELETE_ON_IDLE = "autoDeleteOnIdle";
  @SerializedName(SERIALIZED_NAME_AUTO_DELETE_ON_IDLE)
  private String autoDeleteOnIdle;

  public static final String SERIALIZED_NAME_COUNT_DETAILS = "countDetails";
  @SerializedName(SERIALIZED_NAME_COUNT_DETAILS)
  private MessageCountDetails countDetails;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DEAD_LETTERING_ON_MESSAGE_EXPIRATION = "deadLetteringOnMessageExpiration";
  @SerializedName(SERIALIZED_NAME_DEAD_LETTERING_ON_MESSAGE_EXPIRATION)
  private Boolean deadLetteringOnMessageExpiration;

  public static final String SERIALIZED_NAME_DEFAULT_MESSAGE_TIME_TO_LIVE = "defaultMessageTimeToLive";
  @SerializedName(SERIALIZED_NAME_DEFAULT_MESSAGE_TIME_TO_LIVE)
  private String defaultMessageTimeToLive;

  public static final String SERIALIZED_NAME_DUPLICATE_DETECTION_HISTORY_TIME_WINDOW = "duplicateDetectionHistoryTimeWindow";
  @SerializedName(SERIALIZED_NAME_DUPLICATE_DETECTION_HISTORY_TIME_WINDOW)
  private String duplicateDetectionHistoryTimeWindow;

  public static final String SERIALIZED_NAME_ENABLE_BATCHED_OPERATIONS = "enableBatchedOperations";
  @SerializedName(SERIALIZED_NAME_ENABLE_BATCHED_OPERATIONS)
  private Boolean enableBatchedOperations;

  public static final String SERIALIZED_NAME_ENABLE_EXPRESS = "enableExpress";
  @SerializedName(SERIALIZED_NAME_ENABLE_EXPRESS)
  private Boolean enableExpress;

  public static final String SERIALIZED_NAME_ENABLE_PARTITIONING = "enablePartitioning";
  @SerializedName(SERIALIZED_NAME_ENABLE_PARTITIONING)
  private Boolean enablePartitioning;

  public static final String SERIALIZED_NAME_FORWARD_DEAD_LETTERED_MESSAGES_TO = "forwardDeadLetteredMessagesTo";
  @SerializedName(SERIALIZED_NAME_FORWARD_DEAD_LETTERED_MESSAGES_TO)
  private String forwardDeadLetteredMessagesTo;

  public static final String SERIALIZED_NAME_FORWARD_TO = "forwardTo";
  @SerializedName(SERIALIZED_NAME_FORWARD_TO)
  private String forwardTo;

  public static final String SERIALIZED_NAME_LOCK_DURATION = "lockDuration";
  @SerializedName(SERIALIZED_NAME_LOCK_DURATION)
  private String lockDuration;

  public static final String SERIALIZED_NAME_MAX_DELIVERY_COUNT = "maxDeliveryCount";
  @SerializedName(SERIALIZED_NAME_MAX_DELIVERY_COUNT)
  private Integer maxDeliveryCount;

  public static final String SERIALIZED_NAME_MAX_SIZE_IN_MEGABYTES = "maxSizeInMegabytes";
  @SerializedName(SERIALIZED_NAME_MAX_SIZE_IN_MEGABYTES)
  private Integer maxSizeInMegabytes;

  public static final String SERIALIZED_NAME_MESSAGE_COUNT = "messageCount";
  @SerializedName(SERIALIZED_NAME_MESSAGE_COUNT)
  private Long messageCount;

  public static final String SERIALIZED_NAME_REQUIRES_DUPLICATE_DETECTION = "requiresDuplicateDetection";
  @SerializedName(SERIALIZED_NAME_REQUIRES_DUPLICATE_DETECTION)
  private Boolean requiresDuplicateDetection;

  public static final String SERIALIZED_NAME_REQUIRES_SESSION = "requiresSession";
  @SerializedName(SERIALIZED_NAME_REQUIRES_SESSION)
  private Boolean requiresSession;

  public static final String SERIALIZED_NAME_SIZE_IN_BYTES = "sizeInBytes";
  @SerializedName(SERIALIZED_NAME_SIZE_IN_BYTES)
  private Long sizeInBytes;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private EntityStatus status;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public SBQueueProperties() {
  }

  public SBQueueProperties(
     OffsetDateTime accessedAt, 
     OffsetDateTime createdAt, 
     Long messageCount, 
     Long sizeInBytes, 
     OffsetDateTime updatedAt
  ) {
    this();
    this.accessedAt = accessedAt;
    this.createdAt = createdAt;
    this.messageCount = messageCount;
    this.sizeInBytes = sizeInBytes;
    this.updatedAt = updatedAt;
  }

  /**
   * Last time a message was sent, or the last time there was a receive request to this queue.
   * @return accessedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAccessedAt() {
    return accessedAt;
  }



  public SBQueueProperties autoDeleteOnIdle(String autoDeleteOnIdle) {
    this.autoDeleteOnIdle = autoDeleteOnIdle;
    return this;
  }

  /**
   * ISO 8061 timeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes.
   * @return autoDeleteOnIdle
   */
  @javax.annotation.Nullable
  public String getAutoDeleteOnIdle() {
    return autoDeleteOnIdle;
  }

  public void setAutoDeleteOnIdle(String autoDeleteOnIdle) {
    this.autoDeleteOnIdle = autoDeleteOnIdle;
  }


  public SBQueueProperties countDetails(MessageCountDetails countDetails) {
    this.countDetails = countDetails;
    return this;
  }

  /**
   * Get countDetails
   * @return countDetails
   */
  @javax.annotation.Nullable
  public MessageCountDetails getCountDetails() {
    return countDetails;
  }

  public void setCountDetails(MessageCountDetails countDetails) {
    this.countDetails = countDetails;
  }


  /**
   * The exact time the message was created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  public SBQueueProperties deadLetteringOnMessageExpiration(Boolean deadLetteringOnMessageExpiration) {
    this.deadLetteringOnMessageExpiration = deadLetteringOnMessageExpiration;
    return this;
  }

  /**
   * A value that indicates whether this queue has dead letter support when a message expires.
   * @return deadLetteringOnMessageExpiration
   */
  @javax.annotation.Nullable
  public Boolean getDeadLetteringOnMessageExpiration() {
    return deadLetteringOnMessageExpiration;
  }

  public void setDeadLetteringOnMessageExpiration(Boolean deadLetteringOnMessageExpiration) {
    this.deadLetteringOnMessageExpiration = deadLetteringOnMessageExpiration;
  }


  public SBQueueProperties defaultMessageTimeToLive(String defaultMessageTimeToLive) {
    this.defaultMessageTimeToLive = defaultMessageTimeToLive;
    return this;
  }

  /**
   * ISO 8601 default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
   * @return defaultMessageTimeToLive
   */
  @javax.annotation.Nullable
  public String getDefaultMessageTimeToLive() {
    return defaultMessageTimeToLive;
  }

  public void setDefaultMessageTimeToLive(String defaultMessageTimeToLive) {
    this.defaultMessageTimeToLive = defaultMessageTimeToLive;
  }


  public SBQueueProperties duplicateDetectionHistoryTimeWindow(String duplicateDetectionHistoryTimeWindow) {
    this.duplicateDetectionHistoryTimeWindow = duplicateDetectionHistoryTimeWindow;
    return this;
  }

  /**
   * ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
   * @return duplicateDetectionHistoryTimeWindow
   */
  @javax.annotation.Nullable
  public String getDuplicateDetectionHistoryTimeWindow() {
    return duplicateDetectionHistoryTimeWindow;
  }

  public void setDuplicateDetectionHistoryTimeWindow(String duplicateDetectionHistoryTimeWindow) {
    this.duplicateDetectionHistoryTimeWindow = duplicateDetectionHistoryTimeWindow;
  }


  public SBQueueProperties enableBatchedOperations(Boolean enableBatchedOperations) {
    this.enableBatchedOperations = enableBatchedOperations;
    return this;
  }

  /**
   * Value that indicates whether server-side batched operations are enabled.
   * @return enableBatchedOperations
   */
  @javax.annotation.Nullable
  public Boolean getEnableBatchedOperations() {
    return enableBatchedOperations;
  }

  public void setEnableBatchedOperations(Boolean enableBatchedOperations) {
    this.enableBatchedOperations = enableBatchedOperations;
  }


  public SBQueueProperties enableExpress(Boolean enableExpress) {
    this.enableExpress = enableExpress;
    return this;
  }

  /**
   * A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage.
   * @return enableExpress
   */
  @javax.annotation.Nullable
  public Boolean getEnableExpress() {
    return enableExpress;
  }

  public void setEnableExpress(Boolean enableExpress) {
    this.enableExpress = enableExpress;
  }


  public SBQueueProperties enablePartitioning(Boolean enablePartitioning) {
    this.enablePartitioning = enablePartitioning;
    return this;
  }

  /**
   * A value that indicates whether the queue is to be partitioned across multiple message brokers.
   * @return enablePartitioning
   */
  @javax.annotation.Nullable
  public Boolean getEnablePartitioning() {
    return enablePartitioning;
  }

  public void setEnablePartitioning(Boolean enablePartitioning) {
    this.enablePartitioning = enablePartitioning;
  }


  public SBQueueProperties forwardDeadLetteredMessagesTo(String forwardDeadLetteredMessagesTo) {
    this.forwardDeadLetteredMessagesTo = forwardDeadLetteredMessagesTo;
    return this;
  }

  /**
   * Queue/Topic name to forward the Dead Letter message
   * @return forwardDeadLetteredMessagesTo
   */
  @javax.annotation.Nullable
  public String getForwardDeadLetteredMessagesTo() {
    return forwardDeadLetteredMessagesTo;
  }

  public void setForwardDeadLetteredMessagesTo(String forwardDeadLetteredMessagesTo) {
    this.forwardDeadLetteredMessagesTo = forwardDeadLetteredMessagesTo;
  }


  public SBQueueProperties forwardTo(String forwardTo) {
    this.forwardTo = forwardTo;
    return this;
  }

  /**
   * Queue/Topic name to forward the messages
   * @return forwardTo
   */
  @javax.annotation.Nullable
  public String getForwardTo() {
    return forwardTo;
  }

  public void setForwardTo(String forwardTo) {
    this.forwardTo = forwardTo;
  }


  public SBQueueProperties lockDuration(String lockDuration) {
    this.lockDuration = lockDuration;
    return this;
  }

  /**
   * ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute.
   * @return lockDuration
   */
  @javax.annotation.Nullable
  public String getLockDuration() {
    return lockDuration;
  }

  public void setLockDuration(String lockDuration) {
    this.lockDuration = lockDuration;
  }


  public SBQueueProperties maxDeliveryCount(Integer maxDeliveryCount) {
    this.maxDeliveryCount = maxDeliveryCount;
    return this;
  }

  /**
   * The maximum delivery count. A message is automatically deadlettered after this number of deliveries. default value is 10.
   * @return maxDeliveryCount
   */
  @javax.annotation.Nullable
  public Integer getMaxDeliveryCount() {
    return maxDeliveryCount;
  }

  public void setMaxDeliveryCount(Integer maxDeliveryCount) {
    this.maxDeliveryCount = maxDeliveryCount;
  }


  public SBQueueProperties maxSizeInMegabytes(Integer maxSizeInMegabytes) {
    this.maxSizeInMegabytes = maxSizeInMegabytes;
    return this;
  }

  /**
   * The maximum size of the queue in megabytes, which is the size of memory allocated for the queue. Default is 1024.
   * @return maxSizeInMegabytes
   */
  @javax.annotation.Nullable
  public Integer getMaxSizeInMegabytes() {
    return maxSizeInMegabytes;
  }

  public void setMaxSizeInMegabytes(Integer maxSizeInMegabytes) {
    this.maxSizeInMegabytes = maxSizeInMegabytes;
  }


  /**
   * The number of messages in the queue.
   * @return messageCount
   */
  @javax.annotation.Nullable
  public Long getMessageCount() {
    return messageCount;
  }



  public SBQueueProperties requiresDuplicateDetection(Boolean requiresDuplicateDetection) {
    this.requiresDuplicateDetection = requiresDuplicateDetection;
    return this;
  }

  /**
   * A value indicating if this queue requires duplicate detection.
   * @return requiresDuplicateDetection
   */
  @javax.annotation.Nullable
  public Boolean getRequiresDuplicateDetection() {
    return requiresDuplicateDetection;
  }

  public void setRequiresDuplicateDetection(Boolean requiresDuplicateDetection) {
    this.requiresDuplicateDetection = requiresDuplicateDetection;
  }


  public SBQueueProperties requiresSession(Boolean requiresSession) {
    this.requiresSession = requiresSession;
    return this;
  }

  /**
   * A value that indicates whether the queue supports the concept of sessions.
   * @return requiresSession
   */
  @javax.annotation.Nullable
  public Boolean getRequiresSession() {
    return requiresSession;
  }

  public void setRequiresSession(Boolean requiresSession) {
    this.requiresSession = requiresSession;
  }


  /**
   * The size of the queue, in bytes.
   * @return sizeInBytes
   */
  @javax.annotation.Nullable
  public Long getSizeInBytes() {
    return sizeInBytes;
  }



  public SBQueueProperties status(EntityStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public EntityStatus getStatus() {
    return status;
  }

  public void setStatus(EntityStatus status) {
    this.status = status;
  }


  /**
   * The exact time the message was updated.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SBQueueProperties sbQueueProperties = (SBQueueProperties) o;
    return Objects.equals(this.accessedAt, sbQueueProperties.accessedAt) &&
        Objects.equals(this.autoDeleteOnIdle, sbQueueProperties.autoDeleteOnIdle) &&
        Objects.equals(this.countDetails, sbQueueProperties.countDetails) &&
        Objects.equals(this.createdAt, sbQueueProperties.createdAt) &&
        Objects.equals(this.deadLetteringOnMessageExpiration, sbQueueProperties.deadLetteringOnMessageExpiration) &&
        Objects.equals(this.defaultMessageTimeToLive, sbQueueProperties.defaultMessageTimeToLive) &&
        Objects.equals(this.duplicateDetectionHistoryTimeWindow, sbQueueProperties.duplicateDetectionHistoryTimeWindow) &&
        Objects.equals(this.enableBatchedOperations, sbQueueProperties.enableBatchedOperations) &&
        Objects.equals(this.enableExpress, sbQueueProperties.enableExpress) &&
        Objects.equals(this.enablePartitioning, sbQueueProperties.enablePartitioning) &&
        Objects.equals(this.forwardDeadLetteredMessagesTo, sbQueueProperties.forwardDeadLetteredMessagesTo) &&
        Objects.equals(this.forwardTo, sbQueueProperties.forwardTo) &&
        Objects.equals(this.lockDuration, sbQueueProperties.lockDuration) &&
        Objects.equals(this.maxDeliveryCount, sbQueueProperties.maxDeliveryCount) &&
        Objects.equals(this.maxSizeInMegabytes, sbQueueProperties.maxSizeInMegabytes) &&
        Objects.equals(this.messageCount, sbQueueProperties.messageCount) &&
        Objects.equals(this.requiresDuplicateDetection, sbQueueProperties.requiresDuplicateDetection) &&
        Objects.equals(this.requiresSession, sbQueueProperties.requiresSession) &&
        Objects.equals(this.sizeInBytes, sbQueueProperties.sizeInBytes) &&
        Objects.equals(this.status, sbQueueProperties.status) &&
        Objects.equals(this.updatedAt, sbQueueProperties.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessedAt, autoDeleteOnIdle, countDetails, createdAt, deadLetteringOnMessageExpiration, defaultMessageTimeToLive, duplicateDetectionHistoryTimeWindow, enableBatchedOperations, enableExpress, enablePartitioning, forwardDeadLetteredMessagesTo, forwardTo, lockDuration, maxDeliveryCount, maxSizeInMegabytes, messageCount, requiresDuplicateDetection, requiresSession, sizeInBytes, status, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SBQueueProperties {\n");
    sb.append("    accessedAt: ").append(toIndentedString(accessedAt)).append("\n");
    sb.append("    autoDeleteOnIdle: ").append(toIndentedString(autoDeleteOnIdle)).append("\n");
    sb.append("    countDetails: ").append(toIndentedString(countDetails)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    deadLetteringOnMessageExpiration: ").append(toIndentedString(deadLetteringOnMessageExpiration)).append("\n");
    sb.append("    defaultMessageTimeToLive: ").append(toIndentedString(defaultMessageTimeToLive)).append("\n");
    sb.append("    duplicateDetectionHistoryTimeWindow: ").append(toIndentedString(duplicateDetectionHistoryTimeWindow)).append("\n");
    sb.append("    enableBatchedOperations: ").append(toIndentedString(enableBatchedOperations)).append("\n");
    sb.append("    enableExpress: ").append(toIndentedString(enableExpress)).append("\n");
    sb.append("    enablePartitioning: ").append(toIndentedString(enablePartitioning)).append("\n");
    sb.append("    forwardDeadLetteredMessagesTo: ").append(toIndentedString(forwardDeadLetteredMessagesTo)).append("\n");
    sb.append("    forwardTo: ").append(toIndentedString(forwardTo)).append("\n");
    sb.append("    lockDuration: ").append(toIndentedString(lockDuration)).append("\n");
    sb.append("    maxDeliveryCount: ").append(toIndentedString(maxDeliveryCount)).append("\n");
    sb.append("    maxSizeInMegabytes: ").append(toIndentedString(maxSizeInMegabytes)).append("\n");
    sb.append("    messageCount: ").append(toIndentedString(messageCount)).append("\n");
    sb.append("    requiresDuplicateDetection: ").append(toIndentedString(requiresDuplicateDetection)).append("\n");
    sb.append("    requiresSession: ").append(toIndentedString(requiresSession)).append("\n");
    sb.append("    sizeInBytes: ").append(toIndentedString(sizeInBytes)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessedAt");
    openapiFields.add("autoDeleteOnIdle");
    openapiFields.add("countDetails");
    openapiFields.add("createdAt");
    openapiFields.add("deadLetteringOnMessageExpiration");
    openapiFields.add("defaultMessageTimeToLive");
    openapiFields.add("duplicateDetectionHistoryTimeWindow");
    openapiFields.add("enableBatchedOperations");
    openapiFields.add("enableExpress");
    openapiFields.add("enablePartitioning");
    openapiFields.add("forwardDeadLetteredMessagesTo");
    openapiFields.add("forwardTo");
    openapiFields.add("lockDuration");
    openapiFields.add("maxDeliveryCount");
    openapiFields.add("maxSizeInMegabytes");
    openapiFields.add("messageCount");
    openapiFields.add("requiresDuplicateDetection");
    openapiFields.add("requiresSession");
    openapiFields.add("sizeInBytes");
    openapiFields.add("status");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SBQueueProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SBQueueProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SBQueueProperties is not found in the empty JSON string", SBQueueProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SBQueueProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SBQueueProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("autoDeleteOnIdle") != null && !jsonObj.get("autoDeleteOnIdle").isJsonNull()) && !jsonObj.get("autoDeleteOnIdle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoDeleteOnIdle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoDeleteOnIdle").toString()));
      }
      // validate the optional field `countDetails`
      if (jsonObj.get("countDetails") != null && !jsonObj.get("countDetails").isJsonNull()) {
        MessageCountDetails.validateJsonElement(jsonObj.get("countDetails"));
      }
      if ((jsonObj.get("defaultMessageTimeToLive") != null && !jsonObj.get("defaultMessageTimeToLive").isJsonNull()) && !jsonObj.get("defaultMessageTimeToLive").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultMessageTimeToLive` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultMessageTimeToLive").toString()));
      }
      if ((jsonObj.get("duplicateDetectionHistoryTimeWindow") != null && !jsonObj.get("duplicateDetectionHistoryTimeWindow").isJsonNull()) && !jsonObj.get("duplicateDetectionHistoryTimeWindow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duplicateDetectionHistoryTimeWindow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duplicateDetectionHistoryTimeWindow").toString()));
      }
      if ((jsonObj.get("forwardDeadLetteredMessagesTo") != null && !jsonObj.get("forwardDeadLetteredMessagesTo").isJsonNull()) && !jsonObj.get("forwardDeadLetteredMessagesTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forwardDeadLetteredMessagesTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forwardDeadLetteredMessagesTo").toString()));
      }
      if ((jsonObj.get("forwardTo") != null && !jsonObj.get("forwardTo").isJsonNull()) && !jsonObj.get("forwardTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forwardTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forwardTo").toString()));
      }
      if ((jsonObj.get("lockDuration") != null && !jsonObj.get("lockDuration").isJsonNull()) && !jsonObj.get("lockDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lockDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lockDuration").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        EntityStatus.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SBQueueProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SBQueueProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SBQueueProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SBQueueProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<SBQueueProperties>() {
           @Override
           public void write(JsonWriter out, SBQueueProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SBQueueProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SBQueueProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SBQueueProperties
   * @throws IOException if the JSON string is invalid with respect to SBQueueProperties
   */
  public static SBQueueProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SBQueueProperties.class);
  }

  /**
   * Convert an instance of SBQueueProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

