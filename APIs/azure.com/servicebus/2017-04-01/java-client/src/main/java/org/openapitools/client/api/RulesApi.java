/*
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2017-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.Rule;
import org.openapitools.client.model.RuleListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RulesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RulesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RulesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for rulesCreateOrUpdate
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param subscriptionName The subscription name. (required)
     * @param ruleName The rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create a rule. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulesCreateOrUpdateCall(String resourceGroupName, String namespaceName, String topicName, String subscriptionName, String ruleName, String apiVersion, String subscriptionId, Rule parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions/{subscriptionName}/rules/{ruleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "topicName" + "}", localVarApiClient.escapeString(topicName.toString()))
            .replace("{" + "subscriptionName" + "}", localVarApiClient.escapeString(subscriptionName.toString()))
            .replace("{" + "ruleName" + "}", localVarApiClient.escapeString(ruleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rulesCreateOrUpdateValidateBeforeCall(String resourceGroupName, String namespaceName, String topicName, String subscriptionName, String ruleName, String apiVersion, String subscriptionId, Rule parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling rulesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling rulesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'topicName' is set
        if (topicName == null) {
            throw new ApiException("Missing the required parameter 'topicName' when calling rulesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionName' is set
        if (subscriptionName == null) {
            throw new ApiException("Missing the required parameter 'subscriptionName' when calling rulesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'ruleName' is set
        if (ruleName == null) {
            throw new ApiException("Missing the required parameter 'ruleName' when calling rulesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling rulesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling rulesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling rulesCreateOrUpdate(Async)");
        }

        return rulesCreateOrUpdateCall(resourceGroupName, namespaceName, topicName, subscriptionName, ruleName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates a new rule and updates an existing rule
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param subscriptionName The subscription name. (required)
     * @param ruleName The rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create a rule. (required)
     * @return Rule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Rule rulesCreateOrUpdate(String resourceGroupName, String namespaceName, String topicName, String subscriptionName, String ruleName, String apiVersion, String subscriptionId, Rule parameters) throws ApiException {
        ApiResponse<Rule> localVarResp = rulesCreateOrUpdateWithHttpInfo(resourceGroupName, namespaceName, topicName, subscriptionName, ruleName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new rule and updates an existing rule
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param subscriptionName The subscription name. (required)
     * @param ruleName The rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create a rule. (required)
     * @return ApiResponse&lt;Rule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rule> rulesCreateOrUpdateWithHttpInfo(String resourceGroupName, String namespaceName, String topicName, String subscriptionName, String ruleName, String apiVersion, String subscriptionId, Rule parameters) throws ApiException {
        okhttp3.Call localVarCall = rulesCreateOrUpdateValidateBeforeCall(resourceGroupName, namespaceName, topicName, subscriptionName, ruleName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<Rule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new rule and updates an existing rule
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param subscriptionName The subscription name. (required)
     * @param ruleName The rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create a rule. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulesCreateOrUpdateAsync(String resourceGroupName, String namespaceName, String topicName, String subscriptionName, String ruleName, String apiVersion, String subscriptionId, Rule parameters, final ApiCallback<Rule> _callback) throws ApiException {

        okhttp3.Call localVarCall = rulesCreateOrUpdateValidateBeforeCall(resourceGroupName, namespaceName, topicName, subscriptionName, ruleName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<Rule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rulesDelete
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param subscriptionName The subscription name. (required)
     * @param ruleName The rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulesDeleteCall(String resourceGroupName, String namespaceName, String topicName, String subscriptionName, String ruleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions/{subscriptionName}/rules/{ruleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "topicName" + "}", localVarApiClient.escapeString(topicName.toString()))
            .replace("{" + "subscriptionName" + "}", localVarApiClient.escapeString(subscriptionName.toString()))
            .replace("{" + "ruleName" + "}", localVarApiClient.escapeString(ruleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rulesDeleteValidateBeforeCall(String resourceGroupName, String namespaceName, String topicName, String subscriptionName, String ruleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling rulesDelete(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling rulesDelete(Async)");
        }

        // verify the required parameter 'topicName' is set
        if (topicName == null) {
            throw new ApiException("Missing the required parameter 'topicName' when calling rulesDelete(Async)");
        }

        // verify the required parameter 'subscriptionName' is set
        if (subscriptionName == null) {
            throw new ApiException("Missing the required parameter 'subscriptionName' when calling rulesDelete(Async)");
        }

        // verify the required parameter 'ruleName' is set
        if (ruleName == null) {
            throw new ApiException("Missing the required parameter 'ruleName' when calling rulesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling rulesDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling rulesDelete(Async)");
        }

        return rulesDeleteCall(resourceGroupName, namespaceName, topicName, subscriptionName, ruleName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes an existing rule.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param subscriptionName The subscription name. (required)
     * @param ruleName The rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void rulesDelete(String resourceGroupName, String namespaceName, String topicName, String subscriptionName, String ruleName, String apiVersion, String subscriptionId) throws ApiException {
        rulesDeleteWithHttpInfo(resourceGroupName, namespaceName, topicName, subscriptionName, ruleName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes an existing rule.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param subscriptionName The subscription name. (required)
     * @param ruleName The rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> rulesDeleteWithHttpInfo(String resourceGroupName, String namespaceName, String topicName, String subscriptionName, String ruleName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = rulesDeleteValidateBeforeCall(resourceGroupName, namespaceName, topicName, subscriptionName, ruleName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an existing rule.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param subscriptionName The subscription name. (required)
     * @param ruleName The rule name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulesDeleteAsync(String resourceGroupName, String namespaceName, String topicName, String subscriptionName, String ruleName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = rulesDeleteValidateBeforeCall(resourceGroupName, namespaceName, topicName, subscriptionName, ruleName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for rulesListBySubscriptions
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param subscriptionName The subscription name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $skip Skip is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skip parameter that specifies a starting point to use for subsequent calls. (optional)
     * @param $top May be used to limit the number of results to the most recent N usageDetails. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved list of Rules. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulesListBySubscriptionsCall(String resourceGroupName, String namespaceName, String topicName, String subscriptionName, String apiVersion, String subscriptionId, Integer $skip, Integer $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions/{subscriptionName}/rules"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "topicName" + "}", localVarApiClient.escapeString(topicName.toString()))
            .replace("{" + "subscriptionName" + "}", localVarApiClient.escapeString(subscriptionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rulesListBySubscriptionsValidateBeforeCall(String resourceGroupName, String namespaceName, String topicName, String subscriptionName, String apiVersion, String subscriptionId, Integer $skip, Integer $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling rulesListBySubscriptions(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling rulesListBySubscriptions(Async)");
        }

        // verify the required parameter 'topicName' is set
        if (topicName == null) {
            throw new ApiException("Missing the required parameter 'topicName' when calling rulesListBySubscriptions(Async)");
        }

        // verify the required parameter 'subscriptionName' is set
        if (subscriptionName == null) {
            throw new ApiException("Missing the required parameter 'subscriptionName' when calling rulesListBySubscriptions(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling rulesListBySubscriptions(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling rulesListBySubscriptions(Async)");
        }

        return rulesListBySubscriptionsCall(resourceGroupName, namespaceName, topicName, subscriptionName, apiVersion, subscriptionId, $skip, $top, _callback);

    }

    /**
     * 
     * List all the rules within given topic-subscription
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param subscriptionName The subscription name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $skip Skip is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skip parameter that specifies a starting point to use for subsequent calls. (optional)
     * @param $top May be used to limit the number of results to the most recent N usageDetails. (optional)
     * @return RuleListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved list of Rules. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public RuleListResult rulesListBySubscriptions(String resourceGroupName, String namespaceName, String topicName, String subscriptionName, String apiVersion, String subscriptionId, Integer $skip, Integer $top) throws ApiException {
        ApiResponse<RuleListResult> localVarResp = rulesListBySubscriptionsWithHttpInfo(resourceGroupName, namespaceName, topicName, subscriptionName, apiVersion, subscriptionId, $skip, $top);
        return localVarResp.getData();
    }

    /**
     * 
     * List all the rules within given topic-subscription
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param subscriptionName The subscription name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $skip Skip is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skip parameter that specifies a starting point to use for subsequent calls. (optional)
     * @param $top May be used to limit the number of results to the most recent N usageDetails. (optional)
     * @return ApiResponse&lt;RuleListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved list of Rules. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RuleListResult> rulesListBySubscriptionsWithHttpInfo(String resourceGroupName, String namespaceName, String topicName, String subscriptionName, String apiVersion, String subscriptionId, Integer $skip, Integer $top) throws ApiException {
        okhttp3.Call localVarCall = rulesListBySubscriptionsValidateBeforeCall(resourceGroupName, namespaceName, topicName, subscriptionName, apiVersion, subscriptionId, $skip, $top, null);
        Type localVarReturnType = new TypeToken<RuleListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all the rules within given topic-subscription
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param topicName The topic name. (required)
     * @param subscriptionName The subscription name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $skip Skip is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skip parameter that specifies a starting point to use for subsequent calls. (optional)
     * @param $top May be used to limit the number of results to the most recent N usageDetails. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved list of Rules. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulesListBySubscriptionsAsync(String resourceGroupName, String namespaceName, String topicName, String subscriptionName, String apiVersion, String subscriptionId, Integer $skip, Integer $top, final ApiCallback<RuleListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = rulesListBySubscriptionsValidateBeforeCall(resourceGroupName, namespaceName, topicName, subscriptionName, apiVersion, subscriptionId, $skip, $top, _callback);
        Type localVarReturnType = new TypeToken<RuleListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
