/*
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2017-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.MigrationConfigListResult;
import org.openapitools.client.model.MigrationConfigProperties;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MigrationConfigsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MigrationConfigsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MigrationConfigsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for migrationConfigsCompleteMigration
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param configName The configuration name. Should always be \&quot;$default\&quot;. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> upgrade operation of Migration Config is successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call migrationConfigsCompleteMigrationCall(String resourceGroupName, String namespaceName, String configName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/migrationConfigurations/{configName}/upgrade"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "configName" + "}", localVarApiClient.escapeString(configName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call migrationConfigsCompleteMigrationValidateBeforeCall(String resourceGroupName, String namespaceName, String configName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling migrationConfigsCompleteMigration(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling migrationConfigsCompleteMigration(Async)");
        }

        // verify the required parameter 'configName' is set
        if (configName == null) {
            throw new ApiException("Missing the required parameter 'configName' when calling migrationConfigsCompleteMigration(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling migrationConfigsCompleteMigration(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling migrationConfigsCompleteMigration(Async)");
        }

        return migrationConfigsCompleteMigrationCall(resourceGroupName, namespaceName, configName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * This operation Completes Migration of entities by pointing the connection strings to Premium namespace and any entities created after the operation will be under Premium Namespace. CompleteMigration operation will fail when entity migration is in-progress.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param configName The configuration name. Should always be \&quot;$default\&quot;. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> upgrade operation of Migration Config is successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void migrationConfigsCompleteMigration(String resourceGroupName, String namespaceName, String configName, String apiVersion, String subscriptionId) throws ApiException {
        migrationConfigsCompleteMigrationWithHttpInfo(resourceGroupName, namespaceName, configName, apiVersion, subscriptionId);
    }

    /**
     * 
     * This operation Completes Migration of entities by pointing the connection strings to Premium namespace and any entities created after the operation will be under Premium Namespace. CompleteMigration operation will fail when entity migration is in-progress.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param configName The configuration name. Should always be \&quot;$default\&quot;. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> upgrade operation of Migration Config is successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> migrationConfigsCompleteMigrationWithHttpInfo(String resourceGroupName, String namespaceName, String configName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = migrationConfigsCompleteMigrationValidateBeforeCall(resourceGroupName, namespaceName, configName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * This operation Completes Migration of entities by pointing the connection strings to Premium namespace and any entities created after the operation will be under Premium Namespace. CompleteMigration operation will fail when entity migration is in-progress.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param configName The configuration name. Should always be \&quot;$default\&quot;. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> upgrade operation of Migration Config is successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call migrationConfigsCompleteMigrationAsync(String resourceGroupName, String namespaceName, String configName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = migrationConfigsCompleteMigrationValidateBeforeCall(resourceGroupName, namespaceName, configName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for migrationConfigsCreateAndStartMigration
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param configName The configuration name. Should always be \&quot;$default\&quot;. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters required to create Migration Configuration (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Migration Config successfully created </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Migration Config creation request received </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call migrationConfigsCreateAndStartMigrationCall(String resourceGroupName, String namespaceName, String configName, String apiVersion, String subscriptionId, MigrationConfigProperties parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/migrationConfigurations/{configName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "configName" + "}", localVarApiClient.escapeString(configName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call migrationConfigsCreateAndStartMigrationValidateBeforeCall(String resourceGroupName, String namespaceName, String configName, String apiVersion, String subscriptionId, MigrationConfigProperties parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling migrationConfigsCreateAndStartMigration(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling migrationConfigsCreateAndStartMigration(Async)");
        }

        // verify the required parameter 'configName' is set
        if (configName == null) {
            throw new ApiException("Missing the required parameter 'configName' when calling migrationConfigsCreateAndStartMigration(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling migrationConfigsCreateAndStartMigration(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling migrationConfigsCreateAndStartMigration(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling migrationConfigsCreateAndStartMigration(Async)");
        }

        return migrationConfigsCreateAndStartMigrationCall(resourceGroupName, namespaceName, configName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates Migration configuration and starts migration of entities from Standard to Premium namespace
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param configName The configuration name. Should always be \&quot;$default\&quot;. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters required to create Migration Configuration (required)
     * @return MigrationConfigProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Migration Config successfully created </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Migration Config creation request received </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public MigrationConfigProperties migrationConfigsCreateAndStartMigration(String resourceGroupName, String namespaceName, String configName, String apiVersion, String subscriptionId, MigrationConfigProperties parameters) throws ApiException {
        ApiResponse<MigrationConfigProperties> localVarResp = migrationConfigsCreateAndStartMigrationWithHttpInfo(resourceGroupName, namespaceName, configName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates Migration configuration and starts migration of entities from Standard to Premium namespace
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param configName The configuration name. Should always be \&quot;$default\&quot;. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters required to create Migration Configuration (required)
     * @return ApiResponse&lt;MigrationConfigProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Migration Config successfully created </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Migration Config creation request received </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MigrationConfigProperties> migrationConfigsCreateAndStartMigrationWithHttpInfo(String resourceGroupName, String namespaceName, String configName, String apiVersion, String subscriptionId, MigrationConfigProperties parameters) throws ApiException {
        okhttp3.Call localVarCall = migrationConfigsCreateAndStartMigrationValidateBeforeCall(resourceGroupName, namespaceName, configName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<MigrationConfigProperties>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates Migration configuration and starts migration of entities from Standard to Premium namespace
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param configName The configuration name. Should always be \&quot;$default\&quot;. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters required to create Migration Configuration (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Migration Config successfully created </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Migration Config creation request received </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call migrationConfigsCreateAndStartMigrationAsync(String resourceGroupName, String namespaceName, String configName, String apiVersion, String subscriptionId, MigrationConfigProperties parameters, final ApiCallback<MigrationConfigProperties> _callback) throws ApiException {

        okhttp3.Call localVarCall = migrationConfigsCreateAndStartMigrationValidateBeforeCall(resourceGroupName, namespaceName, configName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<MigrationConfigProperties>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for migrationConfigsDelete
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param configName The configuration name. Should always be \&quot;$default\&quot;. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Migration Config request accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call migrationConfigsDeleteCall(String resourceGroupName, String namespaceName, String configName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/migrationConfigurations/{configName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "configName" + "}", localVarApiClient.escapeString(configName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call migrationConfigsDeleteValidateBeforeCall(String resourceGroupName, String namespaceName, String configName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling migrationConfigsDelete(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling migrationConfigsDelete(Async)");
        }

        // verify the required parameter 'configName' is set
        if (configName == null) {
            throw new ApiException("Missing the required parameter 'configName' when calling migrationConfigsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling migrationConfigsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling migrationConfigsDelete(Async)");
        }

        return migrationConfigsDeleteCall(resourceGroupName, namespaceName, configName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes a MigrationConfiguration
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param configName The configuration name. Should always be \&quot;$default\&quot;. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Migration Config request accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void migrationConfigsDelete(String resourceGroupName, String namespaceName, String configName, String apiVersion, String subscriptionId) throws ApiException {
        migrationConfigsDeleteWithHttpInfo(resourceGroupName, namespaceName, configName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes a MigrationConfiguration
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param configName The configuration name. Should always be \&quot;$default\&quot;. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Migration Config request accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> migrationConfigsDeleteWithHttpInfo(String resourceGroupName, String namespaceName, String configName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = migrationConfigsDeleteValidateBeforeCall(resourceGroupName, namespaceName, configName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a MigrationConfiguration
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param configName The configuration name. Should always be \&quot;$default\&quot;. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Migration Config request accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call migrationConfigsDeleteAsync(String resourceGroupName, String namespaceName, String configName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = migrationConfigsDeleteValidateBeforeCall(resourceGroupName, namespaceName, configName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for migrationConfigsGet
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param configName The configuration name. Should always be \&quot;$default\&quot;. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved Migration Config) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call migrationConfigsGetCall(String resourceGroupName, String namespaceName, String configName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/migrationConfigurations/{configName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "configName" + "}", localVarApiClient.escapeString(configName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call migrationConfigsGetValidateBeforeCall(String resourceGroupName, String namespaceName, String configName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling migrationConfigsGet(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling migrationConfigsGet(Async)");
        }

        // verify the required parameter 'configName' is set
        if (configName == null) {
            throw new ApiException("Missing the required parameter 'configName' when calling migrationConfigsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling migrationConfigsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling migrationConfigsGet(Async)");
        }

        return migrationConfigsGetCall(resourceGroupName, namespaceName, configName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Retrieves Migration Config
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param configName The configuration name. Should always be \&quot;$default\&quot;. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return MigrationConfigProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved Migration Config) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public MigrationConfigProperties migrationConfigsGet(String resourceGroupName, String namespaceName, String configName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<MigrationConfigProperties> localVarResp = migrationConfigsGetWithHttpInfo(resourceGroupName, namespaceName, configName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves Migration Config
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param configName The configuration name. Should always be \&quot;$default\&quot;. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;MigrationConfigProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved Migration Config) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MigrationConfigProperties> migrationConfigsGetWithHttpInfo(String resourceGroupName, String namespaceName, String configName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = migrationConfigsGetValidateBeforeCall(resourceGroupName, namespaceName, configName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<MigrationConfigProperties>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves Migration Config
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param configName The configuration name. Should always be \&quot;$default\&quot;. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved Migration Config) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call migrationConfigsGetAsync(String resourceGroupName, String namespaceName, String configName, String apiVersion, String subscriptionId, final ApiCallback<MigrationConfigProperties> _callback) throws ApiException {

        okhttp3.Call localVarCall = migrationConfigsGetValidateBeforeCall(resourceGroupName, namespaceName, configName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<MigrationConfigProperties>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for migrationConfigsList
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of migrationConfigurations for servicebus namespace </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call migrationConfigsListCall(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/migrationConfigurations"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call migrationConfigsListValidateBeforeCall(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling migrationConfigsList(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling migrationConfigsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling migrationConfigsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling migrationConfigsList(Async)");
        }

        return migrationConfigsListCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets all migrationConfigurations
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return MigrationConfigListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of migrationConfigurations for servicebus namespace </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public MigrationConfigListResult migrationConfigsList(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<MigrationConfigListResult> localVarResp = migrationConfigsListWithHttpInfo(resourceGroupName, namespaceName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all migrationConfigurations
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;MigrationConfigListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of migrationConfigurations for servicebus namespace </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MigrationConfigListResult> migrationConfigsListWithHttpInfo(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = migrationConfigsListValidateBeforeCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<MigrationConfigListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all migrationConfigurations
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of migrationConfigurations for servicebus namespace </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call migrationConfigsListAsync(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, final ApiCallback<MigrationConfigListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = migrationConfigsListValidateBeforeCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<MigrationConfigListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for migrationConfigsRevert
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param configName The configuration name. Should always be \&quot;$default\&quot;. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> MigrationConfig Revert operation is successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call migrationConfigsRevertCall(String resourceGroupName, String namespaceName, String configName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/migrationConfigurations/{configName}/revert"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "configName" + "}", localVarApiClient.escapeString(configName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call migrationConfigsRevertValidateBeforeCall(String resourceGroupName, String namespaceName, String configName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling migrationConfigsRevert(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling migrationConfigsRevert(Async)");
        }

        // verify the required parameter 'configName' is set
        if (configName == null) {
            throw new ApiException("Missing the required parameter 'configName' when calling migrationConfigsRevert(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling migrationConfigsRevert(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling migrationConfigsRevert(Async)");
        }

        return migrationConfigsRevertCall(resourceGroupName, namespaceName, configName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * This operation reverts Migration
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param configName The configuration name. Should always be \&quot;$default\&quot;. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> MigrationConfig Revert operation is successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void migrationConfigsRevert(String resourceGroupName, String namespaceName, String configName, String apiVersion, String subscriptionId) throws ApiException {
        migrationConfigsRevertWithHttpInfo(resourceGroupName, namespaceName, configName, apiVersion, subscriptionId);
    }

    /**
     * 
     * This operation reverts Migration
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param configName The configuration name. Should always be \&quot;$default\&quot;. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> MigrationConfig Revert operation is successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> migrationConfigsRevertWithHttpInfo(String resourceGroupName, String namespaceName, String configName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = migrationConfigsRevertValidateBeforeCall(resourceGroupName, namespaceName, configName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * This operation reverts Migration
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The namespace name (required)
     * @param configName The configuration name. Should always be \&quot;$default\&quot;. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> MigrationConfig Revert operation is successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> ServiceBus error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call migrationConfigsRevertAsync(String resourceGroupName, String namespaceName, String configName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = migrationConfigsRevertValidateBeforeCall(resourceGroupName, namespaceName, configName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
