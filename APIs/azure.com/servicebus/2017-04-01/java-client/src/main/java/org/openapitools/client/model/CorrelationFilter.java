/*
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2017-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the correlation filter expression.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:48.552458-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CorrelationFilter {
  public static final String SERIALIZED_NAME_CONTENT_TYPE = "contentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_CORRELATION_ID = "correlationId";
  @SerializedName(SERIALIZED_NAME_CORRELATION_ID)
  private String correlationId;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_MESSAGE_ID = "messageId";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ID)
  private String messageId;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, String> properties = new HashMap<>();

  public static final String SERIALIZED_NAME_REPLY_TO = "replyTo";
  @SerializedName(SERIALIZED_NAME_REPLY_TO)
  private String replyTo;

  public static final String SERIALIZED_NAME_REPLY_TO_SESSION_ID = "replyToSessionId";
  @SerializedName(SERIALIZED_NAME_REPLY_TO_SESSION_ID)
  private String replyToSessionId;

  public static final String SERIALIZED_NAME_REQUIRES_PREPROCESSING = "requiresPreprocessing";
  @SerializedName(SERIALIZED_NAME_REQUIRES_PREPROCESSING)
  private Boolean requiresPreprocessing = true;

  public static final String SERIALIZED_NAME_SESSION_ID = "sessionId";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private String sessionId;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public CorrelationFilter() {
  }

  public CorrelationFilter contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * Content type of the message.
   * @return contentType
   */
  @javax.annotation.Nullable
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public CorrelationFilter correlationId(String correlationId) {
    this.correlationId = correlationId;
    return this;
  }

  /**
   * Identifier of the correlation.
   * @return correlationId
   */
  @javax.annotation.Nullable
  public String getCorrelationId() {
    return correlationId;
  }

  public void setCorrelationId(String correlationId) {
    this.correlationId = correlationId;
  }


  public CorrelationFilter label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Application specific label.
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public CorrelationFilter messageId(String messageId) {
    this.messageId = messageId;
    return this;
  }

  /**
   * Identifier of the message.
   * @return messageId
   */
  @javax.annotation.Nullable
  public String getMessageId() {
    return messageId;
  }

  public void setMessageId(String messageId) {
    this.messageId = messageId;
  }


  public CorrelationFilter properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public CorrelationFilter putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * dictionary object for custom filters
   * @return properties
   */
  @javax.annotation.Nullable
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }


  public CorrelationFilter replyTo(String replyTo) {
    this.replyTo = replyTo;
    return this;
  }

  /**
   * Address of the queue to reply to.
   * @return replyTo
   */
  @javax.annotation.Nullable
  public String getReplyTo() {
    return replyTo;
  }

  public void setReplyTo(String replyTo) {
    this.replyTo = replyTo;
  }


  public CorrelationFilter replyToSessionId(String replyToSessionId) {
    this.replyToSessionId = replyToSessionId;
    return this;
  }

  /**
   * Session identifier to reply to.
   * @return replyToSessionId
   */
  @javax.annotation.Nullable
  public String getReplyToSessionId() {
    return replyToSessionId;
  }

  public void setReplyToSessionId(String replyToSessionId) {
    this.replyToSessionId = replyToSessionId;
  }


  public CorrelationFilter requiresPreprocessing(Boolean requiresPreprocessing) {
    this.requiresPreprocessing = requiresPreprocessing;
    return this;
  }

  /**
   * Value that indicates whether the rule action requires preprocessing.
   * @return requiresPreprocessing
   */
  @javax.annotation.Nullable
  public Boolean getRequiresPreprocessing() {
    return requiresPreprocessing;
  }

  public void setRequiresPreprocessing(Boolean requiresPreprocessing) {
    this.requiresPreprocessing = requiresPreprocessing;
  }


  public CorrelationFilter sessionId(String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  /**
   * Session identifier.
   * @return sessionId
   */
  @javax.annotation.Nullable
  public String getSessionId() {
    return sessionId;
  }

  public void setSessionId(String sessionId) {
    this.sessionId = sessionId;
  }


  public CorrelationFilter to(String to) {
    this.to = to;
    return this;
  }

  /**
   * Address to send to.
   * @return to
   */
  @javax.annotation.Nullable
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CorrelationFilter correlationFilter = (CorrelationFilter) o;
    return Objects.equals(this.contentType, correlationFilter.contentType) &&
        Objects.equals(this.correlationId, correlationFilter.correlationId) &&
        Objects.equals(this.label, correlationFilter.label) &&
        Objects.equals(this.messageId, correlationFilter.messageId) &&
        Objects.equals(this.properties, correlationFilter.properties) &&
        Objects.equals(this.replyTo, correlationFilter.replyTo) &&
        Objects.equals(this.replyToSessionId, correlationFilter.replyToSessionId) &&
        Objects.equals(this.requiresPreprocessing, correlationFilter.requiresPreprocessing) &&
        Objects.equals(this.sessionId, correlationFilter.sessionId) &&
        Objects.equals(this.to, correlationFilter.to);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentType, correlationId, label, messageId, properties, replyTo, replyToSessionId, requiresPreprocessing, sessionId, to);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CorrelationFilter {\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    correlationId: ").append(toIndentedString(correlationId)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    replyTo: ").append(toIndentedString(replyTo)).append("\n");
    sb.append("    replyToSessionId: ").append(toIndentedString(replyToSessionId)).append("\n");
    sb.append("    requiresPreprocessing: ").append(toIndentedString(requiresPreprocessing)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contentType");
    openapiFields.add("correlationId");
    openapiFields.add("label");
    openapiFields.add("messageId");
    openapiFields.add("properties");
    openapiFields.add("replyTo");
    openapiFields.add("replyToSessionId");
    openapiFields.add("requiresPreprocessing");
    openapiFields.add("sessionId");
    openapiFields.add("to");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CorrelationFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CorrelationFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CorrelationFilter is not found in the empty JSON string", CorrelationFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CorrelationFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CorrelationFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("contentType") != null && !jsonObj.get("contentType").isJsonNull()) && !jsonObj.get("contentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentType").toString()));
      }
      if ((jsonObj.get("correlationId") != null && !jsonObj.get("correlationId").isJsonNull()) && !jsonObj.get("correlationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `correlationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("correlationId").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("messageId") != null && !jsonObj.get("messageId").isJsonNull()) && !jsonObj.get("messageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageId").toString()));
      }
      if ((jsonObj.get("replyTo") != null && !jsonObj.get("replyTo").isJsonNull()) && !jsonObj.get("replyTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replyTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replyTo").toString()));
      }
      if ((jsonObj.get("replyToSessionId") != null && !jsonObj.get("replyToSessionId").isJsonNull()) && !jsonObj.get("replyToSessionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replyToSessionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replyToSessionId").toString()));
      }
      if ((jsonObj.get("sessionId") != null && !jsonObj.get("sessionId").isJsonNull()) && !jsonObj.get("sessionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionId").toString()));
      }
      if ((jsonObj.get("to") != null && !jsonObj.get("to").isJsonNull()) && !jsonObj.get("to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CorrelationFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CorrelationFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CorrelationFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CorrelationFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<CorrelationFilter>() {
           @Override
           public void write(JsonWriter out, CorrelationFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CorrelationFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CorrelationFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CorrelationFilter
   * @throws IOException if the JSON string is invalid with respect to CorrelationFilter
   */
  public static CorrelationFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CorrelationFilter.class);
  }

  /**
   * Convert an instance of CorrelationFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

