/*
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2017-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccessKeys;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.RegenerateAccessKeyParameters;
import org.openapitools.client.model.SBAuthorizationRule;
import org.openapitools.client.model.SBAuthorizationRuleListResult;
import org.openapitools.client.model.SBQueue;
import org.openapitools.client.model.SBQueueListResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for QueuesApi
 */
@Disabled
public class QueuesApiTest {

    private final QueuesApi api = new QueuesApi();

    /**
     * Creates or updates a Service Bus queue. This operation is idempotent.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queuesCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String queueName = null;
        String apiVersion = null;
        String subscriptionId = null;
        SBQueue parameters = null;
        SBQueue response = api.queuesCreateOrUpdate(resourceGroupName, namespaceName, queueName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Creates an authorization rule for a queue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queuesCreateOrUpdateAuthorizationRuleTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String queueName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        SBAuthorizationRule parameters = null;
        SBAuthorizationRule response = api.queuesCreateOrUpdateAuthorizationRule(resourceGroupName, namespaceName, queueName, authorizationRuleName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Deletes a queue from the specified namespace in a resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queuesDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String queueName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.queuesDelete(resourceGroupName, namespaceName, queueName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Deletes a queue authorization rule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queuesDeleteAuthorizationRuleTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String queueName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.queuesDeleteAuthorizationRule(resourceGroupName, namespaceName, queueName, authorizationRuleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Returns a description for the specified queue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queuesGetTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String queueName = null;
        String apiVersion = null;
        String subscriptionId = null;
        SBQueue response = api.queuesGet(resourceGroupName, namespaceName, queueName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets an authorization rule for a queue by rule name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queuesGetAuthorizationRuleTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String queueName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        SBAuthorizationRule response = api.queuesGetAuthorizationRule(resourceGroupName, namespaceName, queueName, authorizationRuleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets all authorization rules for a queue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queuesListAuthorizationRulesTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String queueName = null;
        String apiVersion = null;
        String subscriptionId = null;
        SBAuthorizationRuleListResult response = api.queuesListAuthorizationRules(resourceGroupName, namespaceName, queueName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the queues within a namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queuesListByNamespaceTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        Integer $skip = null;
        Integer $top = null;
        SBQueueListResult response = api.queuesListByNamespace(resourceGroupName, namespaceName, apiVersion, subscriptionId, $skip, $top);
        // TODO: test validations
    }

    /**
     * Primary and secondary connection strings to the queue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queuesListKeysTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String queueName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        AccessKeys response = api.queuesListKeys(resourceGroupName, namespaceName, queueName, authorizationRuleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Regenerates the primary or secondary connection strings to the queue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queuesRegenerateKeysTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String queueName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        RegenerateAccessKeyParameters parameters = null;
        AccessKeys response = api.queuesRegenerateKeys(resourceGroupName, namespaceName, queueName, authorizationRuleName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

}
