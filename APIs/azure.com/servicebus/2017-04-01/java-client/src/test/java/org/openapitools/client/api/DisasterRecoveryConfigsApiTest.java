/*
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2017-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccessKeys;
import org.openapitools.client.model.ArmDisasterRecovery;
import org.openapitools.client.model.ArmDisasterRecoveryListResult;
import org.openapitools.client.model.CheckNameAvailability;
import org.openapitools.client.model.CheckNameAvailabilityResult;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.SBAuthorizationRule;
import org.openapitools.client.model.SBAuthorizationRuleListResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DisasterRecoveryConfigsApi
 */
@Disabled
public class DisasterRecoveryConfigsApiTest {

    private final DisasterRecoveryConfigsApi api = new DisasterRecoveryConfigsApi();

    /**
     * This operation disables the Disaster Recovery and stops replicating changes from primary to secondary namespaces
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disasterRecoveryConfigsBreakPairingTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String alias = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.disasterRecoveryConfigsBreakPairing(resourceGroupName, namespaceName, alias, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Check the give namespace name availability.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disasterRecoveryConfigsCheckNameAvailabilityTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        CheckNameAvailability parameters = null;
        CheckNameAvailabilityResult response = api.disasterRecoveryConfigsCheckNameAvailability(resourceGroupName, namespaceName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Creates or updates a new Alias(Disaster Recovery configuration)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disasterRecoveryConfigsCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String alias = null;
        String apiVersion = null;
        String subscriptionId = null;
        ArmDisasterRecovery parameters = null;
        ArmDisasterRecovery response = api.disasterRecoveryConfigsCreateOrUpdate(resourceGroupName, namespaceName, alias, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Deletes an Alias(Disaster Recovery configuration)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disasterRecoveryConfigsDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String alias = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.disasterRecoveryConfigsDelete(resourceGroupName, namespaceName, alias, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Invokes GEO DR failover and reconfigure the alias to point to the secondary namespace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disasterRecoveryConfigsFailOverTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String alias = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.disasterRecoveryConfigsFailOver(resourceGroupName, namespaceName, alias, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Retrieves Alias(Disaster Recovery configuration) for primary or secondary namespace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disasterRecoveryConfigsGetTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String alias = null;
        String apiVersion = null;
        String subscriptionId = null;
        ArmDisasterRecovery response = api.disasterRecoveryConfigsGet(resourceGroupName, namespaceName, alias, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets an authorization rule for a namespace by rule name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disasterRecoveryConfigsGetAuthorizationRuleTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String alias = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        SBAuthorizationRule response = api.disasterRecoveryConfigsGetAuthorizationRule(resourceGroupName, namespaceName, alias, authorizationRuleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets all Alias(Disaster Recovery configurations)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disasterRecoveryConfigsListTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        ArmDisasterRecoveryListResult response = api.disasterRecoveryConfigsList(resourceGroupName, namespaceName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the authorization rules for a namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disasterRecoveryConfigsListAuthorizationRulesTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String alias = null;
        String apiVersion = null;
        String subscriptionId = null;
        SBAuthorizationRuleListResult response = api.disasterRecoveryConfigsListAuthorizationRules(resourceGroupName, namespaceName, alias, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the primary and secondary connection strings for the namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disasterRecoveryConfigsListKeysTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String alias = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        AccessKeys response = api.disasterRecoveryConfigsListKeys(resourceGroupName, namespaceName, alias, authorizationRuleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

}
