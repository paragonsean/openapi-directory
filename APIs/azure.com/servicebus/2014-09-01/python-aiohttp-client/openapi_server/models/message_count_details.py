# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MessageCountDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_message_count: int=None, dead_letter_message_count: int=None, scheduled_message_count: int=None, transfer_dead_letter_message_count: int=None, transfer_message_count: int=None):
        """MessageCountDetails - a model defined in OpenAPI

        :param active_message_count: The active_message_count of this MessageCountDetails.
        :param dead_letter_message_count: The dead_letter_message_count of this MessageCountDetails.
        :param scheduled_message_count: The scheduled_message_count of this MessageCountDetails.
        :param transfer_dead_letter_message_count: The transfer_dead_letter_message_count of this MessageCountDetails.
        :param transfer_message_count: The transfer_message_count of this MessageCountDetails.
        """
        self.openapi_types = {
            'active_message_count': int,
            'dead_letter_message_count': int,
            'scheduled_message_count': int,
            'transfer_dead_letter_message_count': int,
            'transfer_message_count': int
        }

        self.attribute_map = {
            'active_message_count': 'activeMessageCount',
            'dead_letter_message_count': 'deadLetterMessageCount',
            'scheduled_message_count': 'scheduledMessageCount',
            'transfer_dead_letter_message_count': 'transferDeadLetterMessageCount',
            'transfer_message_count': 'transferMessageCount'
        }

        self._active_message_count = active_message_count
        self._dead_letter_message_count = dead_letter_message_count
        self._scheduled_message_count = scheduled_message_count
        self._transfer_dead_letter_message_count = transfer_dead_letter_message_count
        self._transfer_message_count = transfer_message_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessageCountDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MessageCountDetails of this MessageCountDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_message_count(self):
        """Gets the active_message_count of this MessageCountDetails.

        Number of active messages in the queue, topic, or subscription.

        :return: The active_message_count of this MessageCountDetails.
        :rtype: int
        """
        return self._active_message_count

    @active_message_count.setter
    def active_message_count(self, active_message_count):
        """Sets the active_message_count of this MessageCountDetails.

        Number of active messages in the queue, topic, or subscription.

        :param active_message_count: The active_message_count of this MessageCountDetails.
        :type active_message_count: int
        """

        self._active_message_count = active_message_count

    @property
    def dead_letter_message_count(self):
        """Gets the dead_letter_message_count of this MessageCountDetails.

        Number of messages that are dead lettered.

        :return: The dead_letter_message_count of this MessageCountDetails.
        :rtype: int
        """
        return self._dead_letter_message_count

    @dead_letter_message_count.setter
    def dead_letter_message_count(self, dead_letter_message_count):
        """Sets the dead_letter_message_count of this MessageCountDetails.

        Number of messages that are dead lettered.

        :param dead_letter_message_count: The dead_letter_message_count of this MessageCountDetails.
        :type dead_letter_message_count: int
        """

        self._dead_letter_message_count = dead_letter_message_count

    @property
    def scheduled_message_count(self):
        """Gets the scheduled_message_count of this MessageCountDetails.

        Number of scheduled messages.

        :return: The scheduled_message_count of this MessageCountDetails.
        :rtype: int
        """
        return self._scheduled_message_count

    @scheduled_message_count.setter
    def scheduled_message_count(self, scheduled_message_count):
        """Sets the scheduled_message_count of this MessageCountDetails.

        Number of scheduled messages.

        :param scheduled_message_count: The scheduled_message_count of this MessageCountDetails.
        :type scheduled_message_count: int
        """

        self._scheduled_message_count = scheduled_message_count

    @property
    def transfer_dead_letter_message_count(self):
        """Gets the transfer_dead_letter_message_count of this MessageCountDetails.

        Number of messages transferred into dead letters.

        :return: The transfer_dead_letter_message_count of this MessageCountDetails.
        :rtype: int
        """
        return self._transfer_dead_letter_message_count

    @transfer_dead_letter_message_count.setter
    def transfer_dead_letter_message_count(self, transfer_dead_letter_message_count):
        """Sets the transfer_dead_letter_message_count of this MessageCountDetails.

        Number of messages transferred into dead letters.

        :param transfer_dead_letter_message_count: The transfer_dead_letter_message_count of this MessageCountDetails.
        :type transfer_dead_letter_message_count: int
        """

        self._transfer_dead_letter_message_count = transfer_dead_letter_message_count

    @property
    def transfer_message_count(self):
        """Gets the transfer_message_count of this MessageCountDetails.

        Number of messages transferred to another queue, topic, or subscription.

        :return: The transfer_message_count of this MessageCountDetails.
        :rtype: int
        """
        return self._transfer_message_count

    @transfer_message_count.setter
    def transfer_message_count(self, transfer_message_count):
        """Sets the transfer_message_count of this MessageCountDetails.

        Number of messages transferred to another queue, topic, or subscription.

        :param transfer_message_count: The transfer_message_count of this MessageCountDetails.
        :type transfer_message_count: int
        """

        self._transfer_message_count = transfer_message_count
