# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entity_availability_status import EntityAvailabilityStatus
from openapi_server.models.entity_status import EntityStatus
from openapi_server.models.message_count_details import MessageCountDetails
from openapi_server import util


class SubscriptionProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accessed_at: datetime=None, auto_delete_on_idle: str=None, count_details: MessageCountDetails=None, created_at: datetime=None, dead_lettering_on_filter_evaluation_exceptions: bool=None, dead_lettering_on_message_expiration: bool=None, default_message_time_to_live: str=None, enable_batched_operations: bool=None, entity_availability_status: EntityAvailabilityStatus=None, is_read_only: bool=None, lock_duration: str=None, max_delivery_count: int=None, message_count: int=None, requires_session: bool=None, status: EntityStatus=None, updated_at: datetime=None):
        """SubscriptionProperties - a model defined in OpenAPI

        :param accessed_at: The accessed_at of this SubscriptionProperties.
        :param auto_delete_on_idle: The auto_delete_on_idle of this SubscriptionProperties.
        :param count_details: The count_details of this SubscriptionProperties.
        :param created_at: The created_at of this SubscriptionProperties.
        :param dead_lettering_on_filter_evaluation_exceptions: The dead_lettering_on_filter_evaluation_exceptions of this SubscriptionProperties.
        :param dead_lettering_on_message_expiration: The dead_lettering_on_message_expiration of this SubscriptionProperties.
        :param default_message_time_to_live: The default_message_time_to_live of this SubscriptionProperties.
        :param enable_batched_operations: The enable_batched_operations of this SubscriptionProperties.
        :param entity_availability_status: The entity_availability_status of this SubscriptionProperties.
        :param is_read_only: The is_read_only of this SubscriptionProperties.
        :param lock_duration: The lock_duration of this SubscriptionProperties.
        :param max_delivery_count: The max_delivery_count of this SubscriptionProperties.
        :param message_count: The message_count of this SubscriptionProperties.
        :param requires_session: The requires_session of this SubscriptionProperties.
        :param status: The status of this SubscriptionProperties.
        :param updated_at: The updated_at of this SubscriptionProperties.
        """
        self.openapi_types = {
            'accessed_at': datetime,
            'auto_delete_on_idle': str,
            'count_details': MessageCountDetails,
            'created_at': datetime,
            'dead_lettering_on_filter_evaluation_exceptions': bool,
            'dead_lettering_on_message_expiration': bool,
            'default_message_time_to_live': str,
            'enable_batched_operations': bool,
            'entity_availability_status': EntityAvailabilityStatus,
            'is_read_only': bool,
            'lock_duration': str,
            'max_delivery_count': int,
            'message_count': int,
            'requires_session': bool,
            'status': EntityStatus,
            'updated_at': datetime
        }

        self.attribute_map = {
            'accessed_at': 'accessedAt',
            'auto_delete_on_idle': 'autoDeleteOnIdle',
            'count_details': 'countDetails',
            'created_at': 'createdAt',
            'dead_lettering_on_filter_evaluation_exceptions': 'deadLetteringOnFilterEvaluationExceptions',
            'dead_lettering_on_message_expiration': 'deadLetteringOnMessageExpiration',
            'default_message_time_to_live': 'defaultMessageTimeToLive',
            'enable_batched_operations': 'enableBatchedOperations',
            'entity_availability_status': 'entityAvailabilityStatus',
            'is_read_only': 'isReadOnly',
            'lock_duration': 'lockDuration',
            'max_delivery_count': 'maxDeliveryCount',
            'message_count': 'messageCount',
            'requires_session': 'requiresSession',
            'status': 'status',
            'updated_at': 'updatedAt'
        }

        self._accessed_at = accessed_at
        self._auto_delete_on_idle = auto_delete_on_idle
        self._count_details = count_details
        self._created_at = created_at
        self._dead_lettering_on_filter_evaluation_exceptions = dead_lettering_on_filter_evaluation_exceptions
        self._dead_lettering_on_message_expiration = dead_lettering_on_message_expiration
        self._default_message_time_to_live = default_message_time_to_live
        self._enable_batched_operations = enable_batched_operations
        self._entity_availability_status = entity_availability_status
        self._is_read_only = is_read_only
        self._lock_duration = lock_duration
        self._max_delivery_count = max_delivery_count
        self._message_count = message_count
        self._requires_session = requires_session
        self._status = status
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionProperties of this SubscriptionProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accessed_at(self):
        """Gets the accessed_at of this SubscriptionProperties.

        Last time there was a receive request to this subscription.

        :return: The accessed_at of this SubscriptionProperties.
        :rtype: datetime
        """
        return self._accessed_at

    @accessed_at.setter
    def accessed_at(self, accessed_at):
        """Sets the accessed_at of this SubscriptionProperties.

        Last time there was a receive request to this subscription.

        :param accessed_at: The accessed_at of this SubscriptionProperties.
        :type accessed_at: datetime
        """

        self._accessed_at = accessed_at

    @property
    def auto_delete_on_idle(self):
        """Gets the auto_delete_on_idle of this SubscriptionProperties.

        TimeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.

        :return: The auto_delete_on_idle of this SubscriptionProperties.
        :rtype: str
        """
        return self._auto_delete_on_idle

    @auto_delete_on_idle.setter
    def auto_delete_on_idle(self, auto_delete_on_idle):
        """Sets the auto_delete_on_idle of this SubscriptionProperties.

        TimeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.

        :param auto_delete_on_idle: The auto_delete_on_idle of this SubscriptionProperties.
        :type auto_delete_on_idle: str
        """

        self._auto_delete_on_idle = auto_delete_on_idle

    @property
    def count_details(self):
        """Gets the count_details of this SubscriptionProperties.


        :return: The count_details of this SubscriptionProperties.
        :rtype: MessageCountDetails
        """
        return self._count_details

    @count_details.setter
    def count_details(self, count_details):
        """Sets the count_details of this SubscriptionProperties.


        :param count_details: The count_details of this SubscriptionProperties.
        :type count_details: MessageCountDetails
        """

        self._count_details = count_details

    @property
    def created_at(self):
        """Gets the created_at of this SubscriptionProperties.

        Exact time the message was created.

        :return: The created_at of this SubscriptionProperties.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SubscriptionProperties.

        Exact time the message was created.

        :param created_at: The created_at of this SubscriptionProperties.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def dead_lettering_on_filter_evaluation_exceptions(self):
        """Gets the dead_lettering_on_filter_evaluation_exceptions of this SubscriptionProperties.

        Value that indicates whether a subscription has dead letter support on filter evaluation exceptions.

        :return: The dead_lettering_on_filter_evaluation_exceptions of this SubscriptionProperties.
        :rtype: bool
        """
        return self._dead_lettering_on_filter_evaluation_exceptions

    @dead_lettering_on_filter_evaluation_exceptions.setter
    def dead_lettering_on_filter_evaluation_exceptions(self, dead_lettering_on_filter_evaluation_exceptions):
        """Sets the dead_lettering_on_filter_evaluation_exceptions of this SubscriptionProperties.

        Value that indicates whether a subscription has dead letter support on filter evaluation exceptions.

        :param dead_lettering_on_filter_evaluation_exceptions: The dead_lettering_on_filter_evaluation_exceptions of this SubscriptionProperties.
        :type dead_lettering_on_filter_evaluation_exceptions: bool
        """

        self._dead_lettering_on_filter_evaluation_exceptions = dead_lettering_on_filter_evaluation_exceptions

    @property
    def dead_lettering_on_message_expiration(self):
        """Gets the dead_lettering_on_message_expiration of this SubscriptionProperties.

        Value that indicates whether a subscription has dead letter support when a message expires.

        :return: The dead_lettering_on_message_expiration of this SubscriptionProperties.
        :rtype: bool
        """
        return self._dead_lettering_on_message_expiration

    @dead_lettering_on_message_expiration.setter
    def dead_lettering_on_message_expiration(self, dead_lettering_on_message_expiration):
        """Sets the dead_lettering_on_message_expiration of this SubscriptionProperties.

        Value that indicates whether a subscription has dead letter support when a message expires.

        :param dead_lettering_on_message_expiration: The dead_lettering_on_message_expiration of this SubscriptionProperties.
        :type dead_lettering_on_message_expiration: bool
        """

        self._dead_lettering_on_message_expiration = dead_lettering_on_message_expiration

    @property
    def default_message_time_to_live(self):
        """Gets the default_message_time_to_live of this SubscriptionProperties.

        Default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.

        :return: The default_message_time_to_live of this SubscriptionProperties.
        :rtype: str
        """
        return self._default_message_time_to_live

    @default_message_time_to_live.setter
    def default_message_time_to_live(self, default_message_time_to_live):
        """Sets the default_message_time_to_live of this SubscriptionProperties.

        Default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.

        :param default_message_time_to_live: The default_message_time_to_live of this SubscriptionProperties.
        :type default_message_time_to_live: str
        """

        self._default_message_time_to_live = default_message_time_to_live

    @property
    def enable_batched_operations(self):
        """Gets the enable_batched_operations of this SubscriptionProperties.

        Value that indicates whether server-side batched operations are enabled.

        :return: The enable_batched_operations of this SubscriptionProperties.
        :rtype: bool
        """
        return self._enable_batched_operations

    @enable_batched_operations.setter
    def enable_batched_operations(self, enable_batched_operations):
        """Sets the enable_batched_operations of this SubscriptionProperties.

        Value that indicates whether server-side batched operations are enabled.

        :param enable_batched_operations: The enable_batched_operations of this SubscriptionProperties.
        :type enable_batched_operations: bool
        """

        self._enable_batched_operations = enable_batched_operations

    @property
    def entity_availability_status(self):
        """Gets the entity_availability_status of this SubscriptionProperties.


        :return: The entity_availability_status of this SubscriptionProperties.
        :rtype: EntityAvailabilityStatus
        """
        return self._entity_availability_status

    @entity_availability_status.setter
    def entity_availability_status(self, entity_availability_status):
        """Sets the entity_availability_status of this SubscriptionProperties.


        :param entity_availability_status: The entity_availability_status of this SubscriptionProperties.
        :type entity_availability_status: EntityAvailabilityStatus
        """

        self._entity_availability_status = entity_availability_status

    @property
    def is_read_only(self):
        """Gets the is_read_only of this SubscriptionProperties.

        Value that indicates whether the entity description is read-only.

        :return: The is_read_only of this SubscriptionProperties.
        :rtype: bool
        """
        return self._is_read_only

    @is_read_only.setter
    def is_read_only(self, is_read_only):
        """Sets the is_read_only of this SubscriptionProperties.

        Value that indicates whether the entity description is read-only.

        :param is_read_only: The is_read_only of this SubscriptionProperties.
        :type is_read_only: bool
        """

        self._is_read_only = is_read_only

    @property
    def lock_duration(self):
        """Gets the lock_duration of this SubscriptionProperties.

        The lock duration time span for the subscription.

        :return: The lock_duration of this SubscriptionProperties.
        :rtype: str
        """
        return self._lock_duration

    @lock_duration.setter
    def lock_duration(self, lock_duration):
        """Sets the lock_duration of this SubscriptionProperties.

        The lock duration time span for the subscription.

        :param lock_duration: The lock_duration of this SubscriptionProperties.
        :type lock_duration: str
        """

        self._lock_duration = lock_duration

    @property
    def max_delivery_count(self):
        """Gets the max_delivery_count of this SubscriptionProperties.

        Number of maximum deliveries.

        :return: The max_delivery_count of this SubscriptionProperties.
        :rtype: int
        """
        return self._max_delivery_count

    @max_delivery_count.setter
    def max_delivery_count(self, max_delivery_count):
        """Sets the max_delivery_count of this SubscriptionProperties.

        Number of maximum deliveries.

        :param max_delivery_count: The max_delivery_count of this SubscriptionProperties.
        :type max_delivery_count: int
        """

        self._max_delivery_count = max_delivery_count

    @property
    def message_count(self):
        """Gets the message_count of this SubscriptionProperties.

        Number of messages.

        :return: The message_count of this SubscriptionProperties.
        :rtype: int
        """
        return self._message_count

    @message_count.setter
    def message_count(self, message_count):
        """Sets the message_count of this SubscriptionProperties.

        Number of messages.

        :param message_count: The message_count of this SubscriptionProperties.
        :type message_count: int
        """

        self._message_count = message_count

    @property
    def requires_session(self):
        """Gets the requires_session of this SubscriptionProperties.

        Value indicating if a subscription supports the concept of sessions.

        :return: The requires_session of this SubscriptionProperties.
        :rtype: bool
        """
        return self._requires_session

    @requires_session.setter
    def requires_session(self, requires_session):
        """Sets the requires_session of this SubscriptionProperties.

        Value indicating if a subscription supports the concept of sessions.

        :param requires_session: The requires_session of this SubscriptionProperties.
        :type requires_session: bool
        """

        self._requires_session = requires_session

    @property
    def status(self):
        """Gets the status of this SubscriptionProperties.


        :return: The status of this SubscriptionProperties.
        :rtype: EntityStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SubscriptionProperties.


        :param status: The status of this SubscriptionProperties.
        :type status: EntityStatus
        """

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this SubscriptionProperties.

        The exact time the message was updated.

        :return: The updated_at of this SubscriptionProperties.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SubscriptionProperties.

        The exact time the message was updated.

        :param updated_at: The updated_at of this SubscriptionProperties.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
