/*
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2014-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of the namespace.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:56.106573-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NamespaceProperties {
  public static final String SERIALIZED_NAME_CREATE_A_C_S_NAMESPACE = "createACSNamespace";
  @SerializedName(SERIALIZED_NAME_CREATE_A_C_S_NAMESPACE)
  private Boolean createACSNamespace;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_SERVICE_BUS_ENDPOINT = "serviceBusEndpoint";
  @SerializedName(SERIALIZED_NAME_SERVICE_BUS_ENDPOINT)
  private String serviceBusEndpoint;

  /**
   * State of the namespace.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    UNKNOWN("Unknown"),
    
    CREATING("Creating"),
    
    CREATED("Created"),
    
    ACTIVATING("Activating"),
    
    ENABLING("Enabling"),
    
    ACTIVE("Active"),
    
    DISABLING("Disabling"),
    
    DISABLED("Disabled"),
    
    SOFT_DELETING("SoftDeleting"),
    
    SOFT_DELETED("SoftDeleted"),
    
    REMOVING("Removing"),
    
    REMOVED("Removed"),
    
    FAILED("Failed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public NamespaceProperties() {
  }

  public NamespaceProperties(
     OffsetDateTime createdAt, 
     String provisioningState, 
     String serviceBusEndpoint, 
     OffsetDateTime updatedAt
  ) {
    this();
    this.createdAt = createdAt;
    this.provisioningState = provisioningState;
    this.serviceBusEndpoint = serviceBusEndpoint;
    this.updatedAt = updatedAt;
  }

  public NamespaceProperties createACSNamespace(Boolean createACSNamespace) {
    this.createACSNamespace = createACSNamespace;
    return this;
  }

  /**
   * Indicates whether to create an ACS namespace.
   * @return createACSNamespace
   */
  @javax.annotation.Nullable
  public Boolean getCreateACSNamespace() {
    return createACSNamespace;
  }

  public void setCreateACSNamespace(Boolean createACSNamespace) {
    this.createACSNamespace = createACSNamespace;
  }


  /**
   * The time the namespace was created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  public NamespaceProperties enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Specifies whether this instance is enabled.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  /**
   * Provisioning state of the namespace.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }



  /**
   * Endpoint you can use to perform Service Bus operations.
   * @return serviceBusEndpoint
   */
  @javax.annotation.Nullable
  public String getServiceBusEndpoint() {
    return serviceBusEndpoint;
  }



  public NamespaceProperties status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * State of the namespace.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  /**
   * The time the namespace was updated.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NamespaceProperties namespaceProperties = (NamespaceProperties) o;
    return Objects.equals(this.createACSNamespace, namespaceProperties.createACSNamespace) &&
        Objects.equals(this.createdAt, namespaceProperties.createdAt) &&
        Objects.equals(this.enabled, namespaceProperties.enabled) &&
        Objects.equals(this.provisioningState, namespaceProperties.provisioningState) &&
        Objects.equals(this.serviceBusEndpoint, namespaceProperties.serviceBusEndpoint) &&
        Objects.equals(this.status, namespaceProperties.status) &&
        Objects.equals(this.updatedAt, namespaceProperties.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createACSNamespace, createdAt, enabled, provisioningState, serviceBusEndpoint, status, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NamespaceProperties {\n");
    sb.append("    createACSNamespace: ").append(toIndentedString(createACSNamespace)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    serviceBusEndpoint: ").append(toIndentedString(serviceBusEndpoint)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createACSNamespace");
    openapiFields.add("createdAt");
    openapiFields.add("enabled");
    openapiFields.add("provisioningState");
    openapiFields.add("serviceBusEndpoint");
    openapiFields.add("status");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NamespaceProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NamespaceProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NamespaceProperties is not found in the empty JSON string", NamespaceProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NamespaceProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NamespaceProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if ((jsonObj.get("serviceBusEndpoint") != null && !jsonObj.get("serviceBusEndpoint").isJsonNull()) && !jsonObj.get("serviceBusEndpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceBusEndpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceBusEndpoint").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NamespaceProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NamespaceProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NamespaceProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NamespaceProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<NamespaceProperties>() {
           @Override
           public void write(JsonWriter out, NamespaceProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NamespaceProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NamespaceProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NamespaceProperties
   * @throws IOException if the JSON string is invalid with respect to NamespaceProperties
   */
  public static NamespaceProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NamespaceProperties.class);
  }

  /**
   * Convert an instance of NamespaceProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

