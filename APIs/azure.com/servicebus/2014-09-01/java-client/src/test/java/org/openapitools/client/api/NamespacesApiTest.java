/*
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2014-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CheckNameAvailability;
import org.openapitools.client.model.CheckNameAvailabilityResult;
import org.openapitools.client.model.NamespaceCreateOrUpdateParameters;
import org.openapitools.client.model.NamespaceListResult;
import org.openapitools.client.model.NamespaceResource;
import org.openapitools.client.model.NamespaceUpdateParameters;
import org.openapitools.client.model.SharedAccessAuthorizationRuleCreateOrUpdateParameters;
import org.openapitools.client.model.SharedAccessAuthorizationRuleGetResource;
import org.openapitools.client.model.SharedAccessAuthorizationRuleListResult;
import org.openapitools.client.model.SharedAccessAuthorizationRuleResource;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NamespacesApi
 */
@Disabled
public class NamespacesApiTest {

    private final NamespacesApi api = new NamespacesApi();

    /**
     * Check the give namespace name availability.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesCheckNameAvailabilityTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        CheckNameAvailability parameters = null;
        CheckNameAvailabilityResult response = api.namespacesCheckNameAvailability(apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Check the give namespace name availability.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesCheckNameSpaceAvailabilityTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        CheckNameAvailability parameters = null;
        CheckNameAvailabilityResult response = api.namespacesCheckNameSpaceAvailability(apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Creates or updates a service namespace. Once created, this namespace&#39;s resource manifest is immutable. This operation is idempotent.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        NamespaceCreateOrUpdateParameters parameters = null;
        NamespaceResource response = api.namespacesCreateOrUpdate(resourceGroupName, namespaceName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Creates or updates an authorization rule for a namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesCreateOrUpdateAuthorizationRuleTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        SharedAccessAuthorizationRuleCreateOrUpdateParameters parameters = null;
        SharedAccessAuthorizationRuleResource response = api.namespacesCreateOrUpdateAuthorizationRule(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Deletes an existing namespace. This operation also removes all associated resources under the namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.namespacesDelete(resourceGroupName, namespaceName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Deletes a namespace authorization rule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesDeleteAuthorizationRuleTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.namespacesDeleteAuthorizationRule(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets a description for the specified namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesGetTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        NamespaceResource response = api.namespacesGet(resourceGroupName, namespaceName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets an authorization rule for a namespace by rule name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesGetAuthorizationRuleTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        SharedAccessAuthorizationRuleGetResource response = api.namespacesGetAuthorizationRule(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the authorization rules for a namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesListAuthorizationRulesTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        SharedAccessAuthorizationRuleListResult response = api.namespacesListAuthorizationRules(resourceGroupName, namespaceName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the available namespaces within a resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesListByResourceGroupTest() throws ApiException {
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        NamespaceListResult response = api.namespacesListByResourceGroup(resourceGroupName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets all the available namespaces within the subscription, irrespective of the resource groups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesListBySubscriptionTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        NamespaceListResult response = api.namespacesListBySubscription(apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the authorization rules for a namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesListPostAuthorizationRulesTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        SharedAccessAuthorizationRuleListResult response = api.namespacesListPostAuthorizationRules(resourceGroupName, namespaceName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets an authorization rule for a namespace by rule name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesPostAuthorizationRuleTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        SharedAccessAuthorizationRuleResource response = api.namespacesPostAuthorizationRule(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Updates a service namespace. Once created, this namespace&#39;s resource manifest is immutable. This operation is idempotent.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        NamespaceUpdateParameters parameters = null;
        NamespaceResource response = api.namespacesUpdate(resourceGroupName, namespaceName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

}
