/**
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2014-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessageCountDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessageCountDetails::OAIMessageCountDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessageCountDetails::OAIMessageCountDetails() {
    this->initializeModel();
}

OAIMessageCountDetails::~OAIMessageCountDetails() {}

void OAIMessageCountDetails::initializeModel() {

    m_active_message_count_isSet = false;
    m_active_message_count_isValid = false;

    m_dead_letter_message_count_isSet = false;
    m_dead_letter_message_count_isValid = false;

    m_scheduled_message_count_isSet = false;
    m_scheduled_message_count_isValid = false;

    m_transfer_dead_letter_message_count_isSet = false;
    m_transfer_dead_letter_message_count_isValid = false;

    m_transfer_message_count_isSet = false;
    m_transfer_message_count_isValid = false;
}

void OAIMessageCountDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessageCountDetails::fromJsonObject(QJsonObject json) {

    m_active_message_count_isValid = ::OpenAPI::fromJsonValue(m_active_message_count, json[QString("activeMessageCount")]);
    m_active_message_count_isSet = !json[QString("activeMessageCount")].isNull() && m_active_message_count_isValid;

    m_dead_letter_message_count_isValid = ::OpenAPI::fromJsonValue(m_dead_letter_message_count, json[QString("deadLetterMessageCount")]);
    m_dead_letter_message_count_isSet = !json[QString("deadLetterMessageCount")].isNull() && m_dead_letter_message_count_isValid;

    m_scheduled_message_count_isValid = ::OpenAPI::fromJsonValue(m_scheduled_message_count, json[QString("scheduledMessageCount")]);
    m_scheduled_message_count_isSet = !json[QString("scheduledMessageCount")].isNull() && m_scheduled_message_count_isValid;

    m_transfer_dead_letter_message_count_isValid = ::OpenAPI::fromJsonValue(m_transfer_dead_letter_message_count, json[QString("transferDeadLetterMessageCount")]);
    m_transfer_dead_letter_message_count_isSet = !json[QString("transferDeadLetterMessageCount")].isNull() && m_transfer_dead_letter_message_count_isValid;

    m_transfer_message_count_isValid = ::OpenAPI::fromJsonValue(m_transfer_message_count, json[QString("transferMessageCount")]);
    m_transfer_message_count_isSet = !json[QString("transferMessageCount")].isNull() && m_transfer_message_count_isValid;
}

QString OAIMessageCountDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessageCountDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_active_message_count_isSet) {
        obj.insert(QString("activeMessageCount"), ::OpenAPI::toJsonValue(m_active_message_count));
    }
    if (m_dead_letter_message_count_isSet) {
        obj.insert(QString("deadLetterMessageCount"), ::OpenAPI::toJsonValue(m_dead_letter_message_count));
    }
    if (m_scheduled_message_count_isSet) {
        obj.insert(QString("scheduledMessageCount"), ::OpenAPI::toJsonValue(m_scheduled_message_count));
    }
    if (m_transfer_dead_letter_message_count_isSet) {
        obj.insert(QString("transferDeadLetterMessageCount"), ::OpenAPI::toJsonValue(m_transfer_dead_letter_message_count));
    }
    if (m_transfer_message_count_isSet) {
        obj.insert(QString("transferMessageCount"), ::OpenAPI::toJsonValue(m_transfer_message_count));
    }
    return obj;
}

qint64 OAIMessageCountDetails::getActiveMessageCount() const {
    return m_active_message_count;
}
void OAIMessageCountDetails::setActiveMessageCount(const qint64 &active_message_count) {
    m_active_message_count = active_message_count;
    m_active_message_count_isSet = true;
}

bool OAIMessageCountDetails::is_active_message_count_Set() const{
    return m_active_message_count_isSet;
}

bool OAIMessageCountDetails::is_active_message_count_Valid() const{
    return m_active_message_count_isValid;
}

qint64 OAIMessageCountDetails::getDeadLetterMessageCount() const {
    return m_dead_letter_message_count;
}
void OAIMessageCountDetails::setDeadLetterMessageCount(const qint64 &dead_letter_message_count) {
    m_dead_letter_message_count = dead_letter_message_count;
    m_dead_letter_message_count_isSet = true;
}

bool OAIMessageCountDetails::is_dead_letter_message_count_Set() const{
    return m_dead_letter_message_count_isSet;
}

bool OAIMessageCountDetails::is_dead_letter_message_count_Valid() const{
    return m_dead_letter_message_count_isValid;
}

qint64 OAIMessageCountDetails::getScheduledMessageCount() const {
    return m_scheduled_message_count;
}
void OAIMessageCountDetails::setScheduledMessageCount(const qint64 &scheduled_message_count) {
    m_scheduled_message_count = scheduled_message_count;
    m_scheduled_message_count_isSet = true;
}

bool OAIMessageCountDetails::is_scheduled_message_count_Set() const{
    return m_scheduled_message_count_isSet;
}

bool OAIMessageCountDetails::is_scheduled_message_count_Valid() const{
    return m_scheduled_message_count_isValid;
}

qint64 OAIMessageCountDetails::getTransferDeadLetterMessageCount() const {
    return m_transfer_dead_letter_message_count;
}
void OAIMessageCountDetails::setTransferDeadLetterMessageCount(const qint64 &transfer_dead_letter_message_count) {
    m_transfer_dead_letter_message_count = transfer_dead_letter_message_count;
    m_transfer_dead_letter_message_count_isSet = true;
}

bool OAIMessageCountDetails::is_transfer_dead_letter_message_count_Set() const{
    return m_transfer_dead_letter_message_count_isSet;
}

bool OAIMessageCountDetails::is_transfer_dead_letter_message_count_Valid() const{
    return m_transfer_dead_letter_message_count_isValid;
}

qint64 OAIMessageCountDetails::getTransferMessageCount() const {
    return m_transfer_message_count;
}
void OAIMessageCountDetails::setTransferMessageCount(const qint64 &transfer_message_count) {
    m_transfer_message_count = transfer_message_count;
    m_transfer_message_count_isSet = true;
}

bool OAIMessageCountDetails::is_transfer_message_count_Set() const{
    return m_transfer_message_count_isSet;
}

bool OAIMessageCountDetails::is_transfer_message_count_Valid() const{
    return m_transfer_message_count_isValid;
}

bool OAIMessageCountDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_message_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dead_letter_message_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_message_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_dead_letter_message_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_message_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessageCountDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
