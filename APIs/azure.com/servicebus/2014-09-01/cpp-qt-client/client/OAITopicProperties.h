/**
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2014-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITopicProperties.h
 *
 * The Topic Properties definition.
 */

#ifndef OAITopicProperties_H
#define OAITopicProperties_H

#include <QJsonObject>

#include "OAIEntityAvailabilityStatus.h"
#include "OAIEntityStatus.h"
#include "OAIMessageCountDetails.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMessageCountDetails;

class OAITopicProperties : public OAIObject {
public:
    OAITopicProperties();
    OAITopicProperties(QString json);
    ~OAITopicProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getAccessedAt() const;
    void setAccessedAt(const QDateTime &accessed_at);
    bool is_accessed_at_Set() const;
    bool is_accessed_at_Valid() const;

    QString getAutoDeleteOnIdle() const;
    void setAutoDeleteOnIdle(const QString &auto_delete_on_idle);
    bool is_auto_delete_on_idle_Set() const;
    bool is_auto_delete_on_idle_Valid() const;

    OAIMessageCountDetails getCountDetails() const;
    void setCountDetails(const OAIMessageCountDetails &count_details);
    bool is_count_details_Set() const;
    bool is_count_details_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getDefaultMessageTimeToLive() const;
    void setDefaultMessageTimeToLive(const QString &default_message_time_to_live);
    bool is_default_message_time_to_live_Set() const;
    bool is_default_message_time_to_live_Valid() const;

    QString getDuplicateDetectionHistoryTimeWindow() const;
    void setDuplicateDetectionHistoryTimeWindow(const QString &duplicate_detection_history_time_window);
    bool is_duplicate_detection_history_time_window_Set() const;
    bool is_duplicate_detection_history_time_window_Valid() const;

    bool isEnableBatchedOperations() const;
    void setEnableBatchedOperations(const bool &enable_batched_operations);
    bool is_enable_batched_operations_Set() const;
    bool is_enable_batched_operations_Valid() const;

    bool isEnableExpress() const;
    void setEnableExpress(const bool &enable_express);
    bool is_enable_express_Set() const;
    bool is_enable_express_Valid() const;

    bool isEnablePartitioning() const;
    void setEnablePartitioning(const bool &enable_partitioning);
    bool is_enable_partitioning_Set() const;
    bool is_enable_partitioning_Valid() const;

    OAIEntityAvailabilityStatus getEntityAvailabilityStatus() const;
    void setEntityAvailabilityStatus(const OAIEntityAvailabilityStatus &entity_availability_status);
    bool is_entity_availability_status_Set() const;
    bool is_entity_availability_status_Valid() const;

    bool isFilteringMessagesBeforePublishing() const;
    void setFilteringMessagesBeforePublishing(const bool &filtering_messages_before_publishing);
    bool is_filtering_messages_before_publishing_Set() const;
    bool is_filtering_messages_before_publishing_Valid() const;

    bool isIsAnonymousAccessible() const;
    void setIsAnonymousAccessible(const bool &is_anonymous_accessible);
    bool is_is_anonymous_accessible_Set() const;
    bool is_is_anonymous_accessible_Valid() const;

    bool isIsExpress() const;
    void setIsExpress(const bool &is_express);
    bool is_is_express_Set() const;
    bool is_is_express_Valid() const;

    qint64 getMaxSizeInMegabytes() const;
    void setMaxSizeInMegabytes(const qint64 &max_size_in_megabytes);
    bool is_max_size_in_megabytes_Set() const;
    bool is_max_size_in_megabytes_Valid() const;

    bool isRequiresDuplicateDetection() const;
    void setRequiresDuplicateDetection(const bool &requires_duplicate_detection);
    bool is_requires_duplicate_detection_Set() const;
    bool is_requires_duplicate_detection_Valid() const;

    qint64 getSizeInBytes() const;
    void setSizeInBytes(const qint64 &size_in_bytes);
    bool is_size_in_bytes_Set() const;
    bool is_size_in_bytes_Valid() const;

    OAIEntityStatus getStatus() const;
    void setStatus(const OAIEntityStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    qint32 getSubscriptionCount() const;
    void setSubscriptionCount(const qint32 &subscription_count);
    bool is_subscription_count_Set() const;
    bool is_subscription_count_Valid() const;

    bool isSupportOrdering() const;
    void setSupportOrdering(const bool &support_ordering);
    bool is_support_ordering_Set() const;
    bool is_support_ordering_Valid() const;

    QDateTime getUpdatedAt() const;
    void setUpdatedAt(const QDateTime &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_accessed_at;
    bool m_accessed_at_isSet;
    bool m_accessed_at_isValid;

    QString m_auto_delete_on_idle;
    bool m_auto_delete_on_idle_isSet;
    bool m_auto_delete_on_idle_isValid;

    OAIMessageCountDetails m_count_details;
    bool m_count_details_isSet;
    bool m_count_details_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_default_message_time_to_live;
    bool m_default_message_time_to_live_isSet;
    bool m_default_message_time_to_live_isValid;

    QString m_duplicate_detection_history_time_window;
    bool m_duplicate_detection_history_time_window_isSet;
    bool m_duplicate_detection_history_time_window_isValid;

    bool m_enable_batched_operations;
    bool m_enable_batched_operations_isSet;
    bool m_enable_batched_operations_isValid;

    bool m_enable_express;
    bool m_enable_express_isSet;
    bool m_enable_express_isValid;

    bool m_enable_partitioning;
    bool m_enable_partitioning_isSet;
    bool m_enable_partitioning_isValid;

    OAIEntityAvailabilityStatus m_entity_availability_status;
    bool m_entity_availability_status_isSet;
    bool m_entity_availability_status_isValid;

    bool m_filtering_messages_before_publishing;
    bool m_filtering_messages_before_publishing_isSet;
    bool m_filtering_messages_before_publishing_isValid;

    bool m_is_anonymous_accessible;
    bool m_is_anonymous_accessible_isSet;
    bool m_is_anonymous_accessible_isValid;

    bool m_is_express;
    bool m_is_express_isSet;
    bool m_is_express_isValid;

    qint64 m_max_size_in_megabytes;
    bool m_max_size_in_megabytes_isSet;
    bool m_max_size_in_megabytes_isValid;

    bool m_requires_duplicate_detection;
    bool m_requires_duplicate_detection_isSet;
    bool m_requires_duplicate_detection_isValid;

    qint64 m_size_in_bytes;
    bool m_size_in_bytes_isSet;
    bool m_size_in_bytes_isValid;

    OAIEntityStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    qint32 m_subscription_count;
    bool m_subscription_count_isSet;
    bool m_subscription_count_isValid;

    bool m_support_ordering;
    bool m_support_ordering_isSet;
    bool m_support_ordering_isValid;

    QDateTime m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITopicProperties)

#endif // OAITopicProperties_H
