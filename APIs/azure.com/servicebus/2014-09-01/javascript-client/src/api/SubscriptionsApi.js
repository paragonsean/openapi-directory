/**
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2014-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SubscriptionCreateOrUpdateParameters from '../model/SubscriptionCreateOrUpdateParameters';
import SubscriptionListResult from '../model/SubscriptionListResult';
import SubscriptionResource from '../model/SubscriptionResource';

/**
* Subscriptions service.
* @module api/SubscriptionsApi
* @version 2014-09-01
*/
export default class SubscriptionsApi {

    /**
    * Constructs a new SubscriptionsApi. 
    * @alias module:api/SubscriptionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the subscriptionsCreateOrUpdate operation.
     * @callback module:api/SubscriptionsApi~subscriptionsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a topic subscription.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} namespaceName The namespace name
     * @param {String} topicName The topic name.
     * @param {String} subscriptionName The subscription name.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/SubscriptionCreateOrUpdateParameters} parameters Parameters supplied to create a subscription resource.
     * @param {module:api/SubscriptionsApi~subscriptionsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionResource}
     */
    subscriptionsCreateOrUpdate(resourceGroupName, namespaceName, topicName, subscriptionName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling subscriptionsCreateOrUpdate");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling subscriptionsCreateOrUpdate");
      }
      // verify the required parameter 'topicName' is set
      if (topicName === undefined || topicName === null) {
        throw new Error("Missing the required parameter 'topicName' when calling subscriptionsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionName' is set
      if (subscriptionName === undefined || subscriptionName === null) {
        throw new Error("Missing the required parameter 'subscriptionName' when calling subscriptionsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling subscriptionsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling subscriptionsCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling subscriptionsCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'topicName': topicName,
        'subscriptionName': subscriptionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubscriptionResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions/{subscriptionName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsDelete operation.
     * @callback module:api/SubscriptionsApi~subscriptionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a subscription from the specified topic.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} namespaceName The namespace name
     * @param {String} topicName The topic name.
     * @param {String} subscriptionName The subscription name.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/SubscriptionsApi~subscriptionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    subscriptionsDelete(resourceGroupName, namespaceName, topicName, subscriptionName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling subscriptionsDelete");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling subscriptionsDelete");
      }
      // verify the required parameter 'topicName' is set
      if (topicName === undefined || topicName === null) {
        throw new Error("Missing the required parameter 'topicName' when calling subscriptionsDelete");
      }
      // verify the required parameter 'subscriptionName' is set
      if (subscriptionName === undefined || subscriptionName === null) {
        throw new Error("Missing the required parameter 'subscriptionName' when calling subscriptionsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling subscriptionsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling subscriptionsDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'topicName': topicName,
        'subscriptionName': subscriptionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions/{subscriptionName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsGet operation.
     * @callback module:api/SubscriptionsApi~subscriptionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a subscription description for the specified topic.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} namespaceName The namespace name
     * @param {String} topicName The topic name.
     * @param {String} subscriptionName The subscription name.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/SubscriptionsApi~subscriptionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionResource}
     */
    subscriptionsGet(resourceGroupName, namespaceName, topicName, subscriptionName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling subscriptionsGet");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling subscriptionsGet");
      }
      // verify the required parameter 'topicName' is set
      if (topicName === undefined || topicName === null) {
        throw new Error("Missing the required parameter 'topicName' when calling subscriptionsGet");
      }
      // verify the required parameter 'subscriptionName' is set
      if (subscriptionName === undefined || subscriptionName === null) {
        throw new Error("Missing the required parameter 'subscriptionName' when calling subscriptionsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling subscriptionsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling subscriptionsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'topicName': topicName,
        'subscriptionName': subscriptionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions/{subscriptionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsListAll operation.
     * @callback module:api/SubscriptionsApi~subscriptionsListAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all the subscriptions under a specified topic.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} namespaceName The namespace name
     * @param {String} topicName The topic name.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/SubscriptionsApi~subscriptionsListAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionListResult}
     */
    subscriptionsListAll(resourceGroupName, namespaceName, topicName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling subscriptionsListAll");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling subscriptionsListAll");
      }
      // verify the required parameter 'topicName' is set
      if (topicName === undefined || topicName === null) {
        throw new Error("Missing the required parameter 'topicName' when calling subscriptionsListAll");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling subscriptionsListAll");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling subscriptionsListAll");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'topicName': topicName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
