/**
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2014-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NamespaceProperties model module.
 * @module model/NamespaceProperties
 * @version 2014-09-01
 */
class NamespaceProperties {
    /**
     * Constructs a new <code>NamespaceProperties</code>.
     * Properties of the namespace.
     * @alias module:model/NamespaceProperties
     */
    constructor() { 
        
        NamespaceProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NamespaceProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NamespaceProperties} obj Optional instance to populate.
     * @return {module:model/NamespaceProperties} The populated <code>NamespaceProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NamespaceProperties();

            if (data.hasOwnProperty('createACSNamespace')) {
                obj['createACSNamespace'] = ApiClient.convertToType(data['createACSNamespace'], 'Boolean');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('serviceBusEndpoint')) {
                obj['serviceBusEndpoint'] = ApiClient.convertToType(data['serviceBusEndpoint'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NamespaceProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NamespaceProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['serviceBusEndpoint'] && !(typeof data['serviceBusEndpoint'] === 'string' || data['serviceBusEndpoint'] instanceof String)) {
            throw new Error("Expected the field `serviceBusEndpoint` to be a primitive type in the JSON string but got " + data['serviceBusEndpoint']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * Indicates whether to create an ACS namespace.
 * @member {Boolean} createACSNamespace
 */
NamespaceProperties.prototype['createACSNamespace'] = undefined;

/**
 * The time the namespace was created.
 * @member {Date} createdAt
 */
NamespaceProperties.prototype['createdAt'] = undefined;

/**
 * Specifies whether this instance is enabled.
 * @member {Boolean} enabled
 */
NamespaceProperties.prototype['enabled'] = undefined;

/**
 * Provisioning state of the namespace.
 * @member {String} provisioningState
 */
NamespaceProperties.prototype['provisioningState'] = undefined;

/**
 * Endpoint you can use to perform Service Bus operations.
 * @member {String} serviceBusEndpoint
 */
NamespaceProperties.prototype['serviceBusEndpoint'] = undefined;

/**
 * State of the namespace.
 * @member {module:model/NamespaceProperties.StatusEnum} status
 */
NamespaceProperties.prototype['status'] = undefined;

/**
 * The time the namespace was updated.
 * @member {Date} updatedAt
 */
NamespaceProperties.prototype['updatedAt'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
NamespaceProperties['StatusEnum'] = {

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Created"
     * @const
     */
    "Created": "Created",

    /**
     * value: "Activating"
     * @const
     */
    "Activating": "Activating",

    /**
     * value: "Enabling"
     * @const
     */
    "Enabling": "Enabling",

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "Disabling"
     * @const
     */
    "Disabling": "Disabling",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled",

    /**
     * value: "SoftDeleting"
     * @const
     */
    "SoftDeleting": "SoftDeleting",

    /**
     * value: "SoftDeleted"
     * @const
     */
    "SoftDeleted": "SoftDeleted",

    /**
     * value: "Removing"
     * @const
     */
    "Removing": "Removing",

    /**
     * value: "Removed"
     * @const
     */
    "Removed": "Removed",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed"
};



export default NamespaceProperties;

