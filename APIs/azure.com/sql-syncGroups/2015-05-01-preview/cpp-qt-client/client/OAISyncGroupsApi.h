/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISyncGroupsApi_H
#define OAI_OAISyncGroupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAISyncDatabaseIdListResult.h"
#include "OAISyncFullSchemaPropertiesListResult.h"
#include "OAISyncGroup.h"
#include "OAISyncGroupListResult.h"
#include "OAISyncGroupLogListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISyncGroupsApi : public QObject {
    Q_OBJECT

public:
    OAISyncGroupsApi(const int timeOut = 0);
    ~OAISyncGroupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  sync_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void syncGroupsCancelSync(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &sync_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  sync_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAISyncGroup [required]
    */
    virtual void syncGroupsCreateOrUpdate(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &sync_group_name, const QString &subscription_id, const QString &api_version, const OAISyncGroup &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  sync_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void syncGroupsDelete(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &sync_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  sync_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void syncGroupsGet(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &sync_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void syncGroupsListByDatabase(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  sync_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void syncGroupsListHubSchemas(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &sync_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  sync_group_name QString [required]
    * @param[in]  start_time QString [required]
    * @param[in]  end_time QString [required]
    * @param[in]  type QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  continuation_token QString [optional]
    */
    virtual void syncGroupsListLogs(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &sync_group_name, const QString &start_time, const QString &end_time, const QString &type, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &continuation_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  location_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void syncGroupsListSyncDatabaseIds(const QString &location_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  sync_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void syncGroupsRefreshHubSchema(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &sync_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  sync_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void syncGroupsTriggerSync(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &sync_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  sync_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAISyncGroup [required]
    */
    virtual void syncGroupsUpdate(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &sync_group_name, const QString &subscription_id, const QString &api_version, const OAISyncGroup &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void syncGroupsCancelSyncCallback(OAIHttpRequestWorker *worker);
    void syncGroupsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void syncGroupsDeleteCallback(OAIHttpRequestWorker *worker);
    void syncGroupsGetCallback(OAIHttpRequestWorker *worker);
    void syncGroupsListByDatabaseCallback(OAIHttpRequestWorker *worker);
    void syncGroupsListHubSchemasCallback(OAIHttpRequestWorker *worker);
    void syncGroupsListLogsCallback(OAIHttpRequestWorker *worker);
    void syncGroupsListSyncDatabaseIdsCallback(OAIHttpRequestWorker *worker);
    void syncGroupsRefreshHubSchemaCallback(OAIHttpRequestWorker *worker);
    void syncGroupsTriggerSyncCallback(OAIHttpRequestWorker *worker);
    void syncGroupsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void syncGroupsCancelSyncSignal();
    void syncGroupsCreateOrUpdateSignal(OAISyncGroup summary);
    void syncGroupsDeleteSignal();
    void syncGroupsGetSignal(OAISyncGroup summary);
    void syncGroupsListByDatabaseSignal(OAISyncGroupListResult summary);
    void syncGroupsListHubSchemasSignal(OAISyncFullSchemaPropertiesListResult summary);
    void syncGroupsListLogsSignal(OAISyncGroupLogListResult summary);
    void syncGroupsListSyncDatabaseIdsSignal(OAISyncDatabaseIdListResult summary);
    void syncGroupsRefreshHubSchemaSignal();
    void syncGroupsTriggerSyncSignal();
    void syncGroupsUpdateSignal(OAISyncGroup summary);


    void syncGroupsCancelSyncSignalFull(OAIHttpRequestWorker *worker);
    void syncGroupsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAISyncGroup summary);
    void syncGroupsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void syncGroupsGetSignalFull(OAIHttpRequestWorker *worker, OAISyncGroup summary);
    void syncGroupsListByDatabaseSignalFull(OAIHttpRequestWorker *worker, OAISyncGroupListResult summary);
    void syncGroupsListHubSchemasSignalFull(OAIHttpRequestWorker *worker, OAISyncFullSchemaPropertiesListResult summary);
    void syncGroupsListLogsSignalFull(OAIHttpRequestWorker *worker, OAISyncGroupLogListResult summary);
    void syncGroupsListSyncDatabaseIdsSignalFull(OAIHttpRequestWorker *worker, OAISyncDatabaseIdListResult summary);
    void syncGroupsRefreshHubSchemaSignalFull(OAIHttpRequestWorker *worker);
    void syncGroupsTriggerSyncSignalFull(OAIHttpRequestWorker *worker);
    void syncGroupsUpdateSignalFull(OAIHttpRequestWorker *worker, OAISyncGroup summary);

    Q_DECL_DEPRECATED_X("Use syncGroupsCancelSyncSignalError() instead")
    void syncGroupsCancelSyncSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void syncGroupsCancelSyncSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncGroupsCreateOrUpdateSignalError() instead")
    void syncGroupsCreateOrUpdateSignalE(OAISyncGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void syncGroupsCreateOrUpdateSignalError(OAISyncGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncGroupsDeleteSignalError() instead")
    void syncGroupsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void syncGroupsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncGroupsGetSignalError() instead")
    void syncGroupsGetSignalE(OAISyncGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void syncGroupsGetSignalError(OAISyncGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncGroupsListByDatabaseSignalError() instead")
    void syncGroupsListByDatabaseSignalE(OAISyncGroupListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void syncGroupsListByDatabaseSignalError(OAISyncGroupListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncGroupsListHubSchemasSignalError() instead")
    void syncGroupsListHubSchemasSignalE(OAISyncFullSchemaPropertiesListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void syncGroupsListHubSchemasSignalError(OAISyncFullSchemaPropertiesListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncGroupsListLogsSignalError() instead")
    void syncGroupsListLogsSignalE(OAISyncGroupLogListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void syncGroupsListLogsSignalError(OAISyncGroupLogListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncGroupsListSyncDatabaseIdsSignalError() instead")
    void syncGroupsListSyncDatabaseIdsSignalE(OAISyncDatabaseIdListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void syncGroupsListSyncDatabaseIdsSignalError(OAISyncDatabaseIdListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncGroupsRefreshHubSchemaSignalError() instead")
    void syncGroupsRefreshHubSchemaSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void syncGroupsRefreshHubSchemaSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncGroupsTriggerSyncSignalError() instead")
    void syncGroupsTriggerSyncSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void syncGroupsTriggerSyncSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncGroupsUpdateSignalError() instead")
    void syncGroupsUpdateSignalE(OAISyncGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void syncGroupsUpdateSignalError(OAISyncGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use syncGroupsCancelSyncSignalErrorFull() instead")
    void syncGroupsCancelSyncSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncGroupsCancelSyncSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncGroupsCreateOrUpdateSignalErrorFull() instead")
    void syncGroupsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncGroupsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncGroupsDeleteSignalErrorFull() instead")
    void syncGroupsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncGroupsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncGroupsGetSignalErrorFull() instead")
    void syncGroupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncGroupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncGroupsListByDatabaseSignalErrorFull() instead")
    void syncGroupsListByDatabaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncGroupsListByDatabaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncGroupsListHubSchemasSignalErrorFull() instead")
    void syncGroupsListHubSchemasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncGroupsListHubSchemasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncGroupsListLogsSignalErrorFull() instead")
    void syncGroupsListLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncGroupsListLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncGroupsListSyncDatabaseIdsSignalErrorFull() instead")
    void syncGroupsListSyncDatabaseIdsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncGroupsListSyncDatabaseIdsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncGroupsRefreshHubSchemaSignalErrorFull() instead")
    void syncGroupsRefreshHubSchemaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncGroupsRefreshHubSchemaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncGroupsTriggerSyncSignalErrorFull() instead")
    void syncGroupsTriggerSyncSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncGroupsTriggerSyncSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncGroupsUpdateSignalErrorFull() instead")
    void syncGroupsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncGroupsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
