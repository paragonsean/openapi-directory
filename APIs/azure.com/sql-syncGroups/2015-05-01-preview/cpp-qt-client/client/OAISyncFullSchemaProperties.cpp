/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISyncFullSchemaProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISyncFullSchemaProperties::OAISyncFullSchemaProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISyncFullSchemaProperties::OAISyncFullSchemaProperties() {
    this->initializeModel();
}

OAISyncFullSchemaProperties::~OAISyncFullSchemaProperties() {}

void OAISyncFullSchemaProperties::initializeModel() {

    m_last_update_time_isSet = false;
    m_last_update_time_isValid = false;

    m_tables_isSet = false;
    m_tables_isValid = false;
}

void OAISyncFullSchemaProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISyncFullSchemaProperties::fromJsonObject(QJsonObject json) {

    m_last_update_time_isValid = ::OpenAPI::fromJsonValue(m_last_update_time, json[QString("lastUpdateTime")]);
    m_last_update_time_isSet = !json[QString("lastUpdateTime")].isNull() && m_last_update_time_isValid;

    m_tables_isValid = ::OpenAPI::fromJsonValue(m_tables, json[QString("tables")]);
    m_tables_isSet = !json[QString("tables")].isNull() && m_tables_isValid;
}

QString OAISyncFullSchemaProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISyncFullSchemaProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_last_update_time_isSet) {
        obj.insert(QString("lastUpdateTime"), ::OpenAPI::toJsonValue(m_last_update_time));
    }
    if (m_tables.size() > 0) {
        obj.insert(QString("tables"), ::OpenAPI::toJsonValue(m_tables));
    }
    return obj;
}

QDateTime OAISyncFullSchemaProperties::getLastUpdateTime() const {
    return m_last_update_time;
}
void OAISyncFullSchemaProperties::setLastUpdateTime(const QDateTime &last_update_time) {
    m_last_update_time = last_update_time;
    m_last_update_time_isSet = true;
}

bool OAISyncFullSchemaProperties::is_last_update_time_Set() const{
    return m_last_update_time_isSet;
}

bool OAISyncFullSchemaProperties::is_last_update_time_Valid() const{
    return m_last_update_time_isValid;
}

QList<OAISyncFullSchemaTable> OAISyncFullSchemaProperties::getTables() const {
    return m_tables;
}
void OAISyncFullSchemaProperties::setTables(const QList<OAISyncFullSchemaTable> &tables) {
    m_tables = tables;
    m_tables_isSet = true;
}

bool OAISyncFullSchemaProperties::is_tables_Set() const{
    return m_tables_isSet;
}

bool OAISyncFullSchemaProperties::is_tables_Valid() const{
    return m_tables_isValid;
}

bool OAISyncFullSchemaProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_last_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tables.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISyncFullSchemaProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
