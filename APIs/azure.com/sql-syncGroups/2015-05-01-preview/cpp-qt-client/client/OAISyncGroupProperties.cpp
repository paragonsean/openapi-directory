/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISyncGroupProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISyncGroupProperties::OAISyncGroupProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISyncGroupProperties::OAISyncGroupProperties() {
    this->initializeModel();
}

OAISyncGroupProperties::~OAISyncGroupProperties() {}

void OAISyncGroupProperties::initializeModel() {

    m_conflict_resolution_policy_isSet = false;
    m_conflict_resolution_policy_isValid = false;

    m_hub_database_password_isSet = false;
    m_hub_database_password_isValid = false;

    m_hub_database_user_name_isSet = false;
    m_hub_database_user_name_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_last_sync_time_isSet = false;
    m_last_sync_time_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_sync_database_id_isSet = false;
    m_sync_database_id_isValid = false;

    m_sync_state_isSet = false;
    m_sync_state_isValid = false;
}

void OAISyncGroupProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISyncGroupProperties::fromJsonObject(QJsonObject json) {

    m_conflict_resolution_policy_isValid = ::OpenAPI::fromJsonValue(m_conflict_resolution_policy, json[QString("conflictResolutionPolicy")]);
    m_conflict_resolution_policy_isSet = !json[QString("conflictResolutionPolicy")].isNull() && m_conflict_resolution_policy_isValid;

    m_hub_database_password_isValid = ::OpenAPI::fromJsonValue(m_hub_database_password, json[QString("hubDatabasePassword")]);
    m_hub_database_password_isSet = !json[QString("hubDatabasePassword")].isNull() && m_hub_database_password_isValid;

    m_hub_database_user_name_isValid = ::OpenAPI::fromJsonValue(m_hub_database_user_name, json[QString("hubDatabaseUserName")]);
    m_hub_database_user_name_isSet = !json[QString("hubDatabaseUserName")].isNull() && m_hub_database_user_name_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_last_sync_time_isValid = ::OpenAPI::fromJsonValue(m_last_sync_time, json[QString("lastSyncTime")]);
    m_last_sync_time_isSet = !json[QString("lastSyncTime")].isNull() && m_last_sync_time_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;

    m_sync_database_id_isValid = ::OpenAPI::fromJsonValue(m_sync_database_id, json[QString("syncDatabaseId")]);
    m_sync_database_id_isSet = !json[QString("syncDatabaseId")].isNull() && m_sync_database_id_isValid;

    m_sync_state_isValid = ::OpenAPI::fromJsonValue(m_sync_state, json[QString("syncState")]);
    m_sync_state_isSet = !json[QString("syncState")].isNull() && m_sync_state_isValid;
}

QString OAISyncGroupProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISyncGroupProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_conflict_resolution_policy_isSet) {
        obj.insert(QString("conflictResolutionPolicy"), ::OpenAPI::toJsonValue(m_conflict_resolution_policy));
    }
    if (m_hub_database_password_isSet) {
        obj.insert(QString("hubDatabasePassword"), ::OpenAPI::toJsonValue(m_hub_database_password));
    }
    if (m_hub_database_user_name_isSet) {
        obj.insert(QString("hubDatabaseUserName"), ::OpenAPI::toJsonValue(m_hub_database_user_name));
    }
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_last_sync_time_isSet) {
        obj.insert(QString("lastSyncTime"), ::OpenAPI::toJsonValue(m_last_sync_time));
    }
    if (m_schema.isSet()) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_sync_database_id_isSet) {
        obj.insert(QString("syncDatabaseId"), ::OpenAPI::toJsonValue(m_sync_database_id));
    }
    if (m_sync_state_isSet) {
        obj.insert(QString("syncState"), ::OpenAPI::toJsonValue(m_sync_state));
    }
    return obj;
}

QString OAISyncGroupProperties::getConflictResolutionPolicy() const {
    return m_conflict_resolution_policy;
}
void OAISyncGroupProperties::setConflictResolutionPolicy(const QString &conflict_resolution_policy) {
    m_conflict_resolution_policy = conflict_resolution_policy;
    m_conflict_resolution_policy_isSet = true;
}

bool OAISyncGroupProperties::is_conflict_resolution_policy_Set() const{
    return m_conflict_resolution_policy_isSet;
}

bool OAISyncGroupProperties::is_conflict_resolution_policy_Valid() const{
    return m_conflict_resolution_policy_isValid;
}

QString OAISyncGroupProperties::getHubDatabasePassword() const {
    return m_hub_database_password;
}
void OAISyncGroupProperties::setHubDatabasePassword(const QString &hub_database_password) {
    m_hub_database_password = hub_database_password;
    m_hub_database_password_isSet = true;
}

bool OAISyncGroupProperties::is_hub_database_password_Set() const{
    return m_hub_database_password_isSet;
}

bool OAISyncGroupProperties::is_hub_database_password_Valid() const{
    return m_hub_database_password_isValid;
}

QString OAISyncGroupProperties::getHubDatabaseUserName() const {
    return m_hub_database_user_name;
}
void OAISyncGroupProperties::setHubDatabaseUserName(const QString &hub_database_user_name) {
    m_hub_database_user_name = hub_database_user_name;
    m_hub_database_user_name_isSet = true;
}

bool OAISyncGroupProperties::is_hub_database_user_name_Set() const{
    return m_hub_database_user_name_isSet;
}

bool OAISyncGroupProperties::is_hub_database_user_name_Valid() const{
    return m_hub_database_user_name_isValid;
}

qint32 OAISyncGroupProperties::getInterval() const {
    return m_interval;
}
void OAISyncGroupProperties::setInterval(const qint32 &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAISyncGroupProperties::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAISyncGroupProperties::is_interval_Valid() const{
    return m_interval_isValid;
}

QDateTime OAISyncGroupProperties::getLastSyncTime() const {
    return m_last_sync_time;
}
void OAISyncGroupProperties::setLastSyncTime(const QDateTime &last_sync_time) {
    m_last_sync_time = last_sync_time;
    m_last_sync_time_isSet = true;
}

bool OAISyncGroupProperties::is_last_sync_time_Set() const{
    return m_last_sync_time_isSet;
}

bool OAISyncGroupProperties::is_last_sync_time_Valid() const{
    return m_last_sync_time_isValid;
}

OAISyncGroupSchema OAISyncGroupProperties::getSchema() const {
    return m_schema;
}
void OAISyncGroupProperties::setSchema(const OAISyncGroupSchema &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAISyncGroupProperties::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAISyncGroupProperties::is_schema_Valid() const{
    return m_schema_isValid;
}

QString OAISyncGroupProperties::getSyncDatabaseId() const {
    return m_sync_database_id;
}
void OAISyncGroupProperties::setSyncDatabaseId(const QString &sync_database_id) {
    m_sync_database_id = sync_database_id;
    m_sync_database_id_isSet = true;
}

bool OAISyncGroupProperties::is_sync_database_id_Set() const{
    return m_sync_database_id_isSet;
}

bool OAISyncGroupProperties::is_sync_database_id_Valid() const{
    return m_sync_database_id_isValid;
}

QString OAISyncGroupProperties::getSyncState() const {
    return m_sync_state;
}
void OAISyncGroupProperties::setSyncState(const QString &sync_state) {
    m_sync_state = sync_state;
    m_sync_state_isSet = true;
}

bool OAISyncGroupProperties::is_sync_state_Set() const{
    return m_sync_state_isSet;
}

bool OAISyncGroupProperties::is_sync_state_Valid() const{
    return m_sync_state_isValid;
}

bool OAISyncGroupProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conflict_resolution_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hub_database_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hub_database_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_sync_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_database_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISyncGroupProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
