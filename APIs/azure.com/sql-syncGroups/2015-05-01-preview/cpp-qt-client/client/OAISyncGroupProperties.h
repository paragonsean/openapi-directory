/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISyncGroupProperties.h
 *
 * Properties of a sync group.
 */

#ifndef OAISyncGroupProperties_H
#define OAISyncGroupProperties_H

#include <QJsonObject>

#include "OAISyncGroupSchema.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISyncGroupSchema;

class OAISyncGroupProperties : public OAIObject {
public:
    OAISyncGroupProperties();
    OAISyncGroupProperties(QString json);
    ~OAISyncGroupProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getConflictResolutionPolicy() const;
    void setConflictResolutionPolicy(const QString &conflict_resolution_policy);
    bool is_conflict_resolution_policy_Set() const;
    bool is_conflict_resolution_policy_Valid() const;

    QString getHubDatabasePassword() const;
    void setHubDatabasePassword(const QString &hub_database_password);
    bool is_hub_database_password_Set() const;
    bool is_hub_database_password_Valid() const;

    QString getHubDatabaseUserName() const;
    void setHubDatabaseUserName(const QString &hub_database_user_name);
    bool is_hub_database_user_name_Set() const;
    bool is_hub_database_user_name_Valid() const;

    qint32 getInterval() const;
    void setInterval(const qint32 &interval);
    bool is_interval_Set() const;
    bool is_interval_Valid() const;

    QDateTime getLastSyncTime() const;
    void setLastSyncTime(const QDateTime &last_sync_time);
    bool is_last_sync_time_Set() const;
    bool is_last_sync_time_Valid() const;

    OAISyncGroupSchema getSchema() const;
    void setSchema(const OAISyncGroupSchema &schema);
    bool is_schema_Set() const;
    bool is_schema_Valid() const;

    QString getSyncDatabaseId() const;
    void setSyncDatabaseId(const QString &sync_database_id);
    bool is_sync_database_id_Set() const;
    bool is_sync_database_id_Valid() const;

    QString getSyncState() const;
    void setSyncState(const QString &sync_state);
    bool is_sync_state_Set() const;
    bool is_sync_state_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_conflict_resolution_policy;
    bool m_conflict_resolution_policy_isSet;
    bool m_conflict_resolution_policy_isValid;

    QString m_hub_database_password;
    bool m_hub_database_password_isSet;
    bool m_hub_database_password_isValid;

    QString m_hub_database_user_name;
    bool m_hub_database_user_name_isSet;
    bool m_hub_database_user_name_isValid;

    qint32 m_interval;
    bool m_interval_isSet;
    bool m_interval_isValid;

    QDateTime m_last_sync_time;
    bool m_last_sync_time_isSet;
    bool m_last_sync_time_isValid;

    OAISyncGroupSchema m_schema;
    bool m_schema_isSet;
    bool m_schema_isValid;

    QString m_sync_database_id;
    bool m_sync_database_id_isSet;
    bool m_sync_database_id_isValid;

    QString m_sync_state;
    bool m_sync_state_isSet;
    bool m_sync_state_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISyncGroupProperties)

#endif // OAISyncGroupProperties_H
