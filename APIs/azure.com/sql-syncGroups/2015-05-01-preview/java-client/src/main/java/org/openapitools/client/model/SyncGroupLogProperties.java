/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of an Azure SQL Database sync group log.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:30:49.608214-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SyncGroupLogProperties {
  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private String details;

  public static final String SERIALIZED_NAME_OPERATION_STATUS = "operationStatus";
  @SerializedName(SERIALIZED_NAME_OPERATION_STATUS)
  private String operationStatus;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_TRACING_ID = "tracingId";
  @SerializedName(SERIALIZED_NAME_TRACING_ID)
  private UUID tracingId;

  /**
   * Type of the sync group log.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ALL("All"),
    
    ERROR("Error"),
    
    WARNING("Warning"),
    
    SUCCESS("Success");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public SyncGroupLogProperties() {
  }

  public SyncGroupLogProperties(
     String details, 
     String operationStatus, 
     String source, 
     OffsetDateTime timestamp, 
     UUID tracingId, 
     TypeEnum type
  ) {
    this();
    this.details = details;
    this.operationStatus = operationStatus;
    this.source = source;
    this.timestamp = timestamp;
    this.tracingId = tracingId;
    this.type = type;
  }

  /**
   * Details of the sync group log.
   * @return details
   */
  @javax.annotation.Nullable
  public String getDetails() {
    return details;
  }



  /**
   * OperationStatus of the sync group log.
   * @return operationStatus
   */
  @javax.annotation.Nullable
  public String getOperationStatus() {
    return operationStatus;
  }



  /**
   * Source of the sync group log.
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }



  /**
   * Timestamp of the sync group log.
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }



  /**
   * TracingId of the sync group log.
   * @return tracingId
   */
  @javax.annotation.Nullable
  public UUID getTracingId() {
    return tracingId;
  }



  /**
   * Type of the sync group log.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SyncGroupLogProperties syncGroupLogProperties = (SyncGroupLogProperties) o;
    return Objects.equals(this.details, syncGroupLogProperties.details) &&
        Objects.equals(this.operationStatus, syncGroupLogProperties.operationStatus) &&
        Objects.equals(this.source, syncGroupLogProperties.source) &&
        Objects.equals(this.timestamp, syncGroupLogProperties.timestamp) &&
        Objects.equals(this.tracingId, syncGroupLogProperties.tracingId) &&
        Objects.equals(this.type, syncGroupLogProperties.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(details, operationStatus, source, timestamp, tracingId, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SyncGroupLogProperties {\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    operationStatus: ").append(toIndentedString(operationStatus)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    tracingId: ").append(toIndentedString(tracingId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("details");
    openapiFields.add("operationStatus");
    openapiFields.add("source");
    openapiFields.add("timestamp");
    openapiFields.add("tracingId");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SyncGroupLogProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SyncGroupLogProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SyncGroupLogProperties is not found in the empty JSON string", SyncGroupLogProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SyncGroupLogProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SyncGroupLogProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull()) && !jsonObj.get("details").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `details` to be a primitive type in the JSON string but got `%s`", jsonObj.get("details").toString()));
      }
      if ((jsonObj.get("operationStatus") != null && !jsonObj.get("operationStatus").isJsonNull()) && !jsonObj.get("operationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationStatus").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("tracingId") != null && !jsonObj.get("tracingId").isJsonNull()) && !jsonObj.get("tracingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tracingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tracingId").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SyncGroupLogProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SyncGroupLogProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SyncGroupLogProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SyncGroupLogProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<SyncGroupLogProperties>() {
           @Override
           public void write(JsonWriter out, SyncGroupLogProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SyncGroupLogProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SyncGroupLogProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SyncGroupLogProperties
   * @throws IOException if the JSON string is invalid with respect to SyncGroupLogProperties
   */
  public static SyncGroupLogProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SyncGroupLogProperties.class);
  }

  /**
   * Convert an instance of SyncGroupLogProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

