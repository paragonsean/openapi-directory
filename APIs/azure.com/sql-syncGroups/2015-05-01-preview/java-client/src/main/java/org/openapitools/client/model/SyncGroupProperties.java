/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.SyncGroupSchema;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a sync group.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:30:49.608214-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SyncGroupProperties {
  /**
   * Conflict resolution policy of the sync group.
   */
  @JsonAdapter(ConflictResolutionPolicyEnum.Adapter.class)
  public enum ConflictResolutionPolicyEnum {
    HUB_WIN("HubWin"),
    
    MEMBER_WIN("MemberWin");

    private String value;

    ConflictResolutionPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConflictResolutionPolicyEnum fromValue(String value) {
      for (ConflictResolutionPolicyEnum b : ConflictResolutionPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConflictResolutionPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConflictResolutionPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConflictResolutionPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConflictResolutionPolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConflictResolutionPolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONFLICT_RESOLUTION_POLICY = "conflictResolutionPolicy";
  @SerializedName(SERIALIZED_NAME_CONFLICT_RESOLUTION_POLICY)
  private ConflictResolutionPolicyEnum conflictResolutionPolicy;

  public static final String SERIALIZED_NAME_HUB_DATABASE_PASSWORD = "hubDatabasePassword";
  @SerializedName(SERIALIZED_NAME_HUB_DATABASE_PASSWORD)
  private String hubDatabasePassword;

  public static final String SERIALIZED_NAME_HUB_DATABASE_USER_NAME = "hubDatabaseUserName";
  @SerializedName(SERIALIZED_NAME_HUB_DATABASE_USER_NAME)
  private String hubDatabaseUserName;

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private Integer interval;

  public static final String SERIALIZED_NAME_LAST_SYNC_TIME = "lastSyncTime";
  @SerializedName(SERIALIZED_NAME_LAST_SYNC_TIME)
  private OffsetDateTime lastSyncTime;

  public static final String SERIALIZED_NAME_SCHEMA = "schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  private SyncGroupSchema schema;

  public static final String SERIALIZED_NAME_SYNC_DATABASE_ID = "syncDatabaseId";
  @SerializedName(SERIALIZED_NAME_SYNC_DATABASE_ID)
  private String syncDatabaseId;

  /**
   * Sync state of the sync group.
   */
  @JsonAdapter(SyncStateEnum.Adapter.class)
  public enum SyncStateEnum {
    NOT_READY("NotReady"),
    
    ERROR("Error"),
    
    WARNING("Warning"),
    
    PROGRESSING("Progressing"),
    
    GOOD("Good");

    private String value;

    SyncStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SyncStateEnum fromValue(String value) {
      for (SyncStateEnum b : SyncStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SyncStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SyncStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SyncStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SyncStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SyncStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SYNC_STATE = "syncState";
  @SerializedName(SERIALIZED_NAME_SYNC_STATE)
  private SyncStateEnum syncState;

  public SyncGroupProperties() {
  }

  public SyncGroupProperties(
     OffsetDateTime lastSyncTime, 
     SyncStateEnum syncState
  ) {
    this();
    this.lastSyncTime = lastSyncTime;
    this.syncState = syncState;
  }

  public SyncGroupProperties conflictResolutionPolicy(ConflictResolutionPolicyEnum conflictResolutionPolicy) {
    this.conflictResolutionPolicy = conflictResolutionPolicy;
    return this;
  }

  /**
   * Conflict resolution policy of the sync group.
   * @return conflictResolutionPolicy
   */
  @javax.annotation.Nullable
  public ConflictResolutionPolicyEnum getConflictResolutionPolicy() {
    return conflictResolutionPolicy;
  }

  public void setConflictResolutionPolicy(ConflictResolutionPolicyEnum conflictResolutionPolicy) {
    this.conflictResolutionPolicy = conflictResolutionPolicy;
  }


  public SyncGroupProperties hubDatabasePassword(String hubDatabasePassword) {
    this.hubDatabasePassword = hubDatabasePassword;
    return this;
  }

  /**
   * Password for the sync group hub database credential.
   * @return hubDatabasePassword
   */
  @javax.annotation.Nullable
  public String getHubDatabasePassword() {
    return hubDatabasePassword;
  }

  public void setHubDatabasePassword(String hubDatabasePassword) {
    this.hubDatabasePassword = hubDatabasePassword;
  }


  public SyncGroupProperties hubDatabaseUserName(String hubDatabaseUserName) {
    this.hubDatabaseUserName = hubDatabaseUserName;
    return this;
  }

  /**
   * User name for the sync group hub database credential.
   * @return hubDatabaseUserName
   */
  @javax.annotation.Nullable
  public String getHubDatabaseUserName() {
    return hubDatabaseUserName;
  }

  public void setHubDatabaseUserName(String hubDatabaseUserName) {
    this.hubDatabaseUserName = hubDatabaseUserName;
  }


  public SyncGroupProperties interval(Integer interval) {
    this.interval = interval;
    return this;
  }

  /**
   * Sync interval of the sync group.
   * @return interval
   */
  @javax.annotation.Nullable
  public Integer getInterval() {
    return interval;
  }

  public void setInterval(Integer interval) {
    this.interval = interval;
  }


  /**
   * Last sync time of the sync group.
   * @return lastSyncTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastSyncTime() {
    return lastSyncTime;
  }



  public SyncGroupProperties schema(SyncGroupSchema schema) {
    this.schema = schema;
    return this;
  }

  /**
   * Get schema
   * @return schema
   */
  @javax.annotation.Nullable
  public SyncGroupSchema getSchema() {
    return schema;
  }

  public void setSchema(SyncGroupSchema schema) {
    this.schema = schema;
  }


  public SyncGroupProperties syncDatabaseId(String syncDatabaseId) {
    this.syncDatabaseId = syncDatabaseId;
    return this;
  }

  /**
   * ARM resource id of the sync database in the sync group.
   * @return syncDatabaseId
   */
  @javax.annotation.Nullable
  public String getSyncDatabaseId() {
    return syncDatabaseId;
  }

  public void setSyncDatabaseId(String syncDatabaseId) {
    this.syncDatabaseId = syncDatabaseId;
  }


  /**
   * Sync state of the sync group.
   * @return syncState
   */
  @javax.annotation.Nullable
  public SyncStateEnum getSyncState() {
    return syncState;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SyncGroupProperties syncGroupProperties = (SyncGroupProperties) o;
    return Objects.equals(this.conflictResolutionPolicy, syncGroupProperties.conflictResolutionPolicy) &&
        Objects.equals(this.hubDatabasePassword, syncGroupProperties.hubDatabasePassword) &&
        Objects.equals(this.hubDatabaseUserName, syncGroupProperties.hubDatabaseUserName) &&
        Objects.equals(this.interval, syncGroupProperties.interval) &&
        Objects.equals(this.lastSyncTime, syncGroupProperties.lastSyncTime) &&
        Objects.equals(this.schema, syncGroupProperties.schema) &&
        Objects.equals(this.syncDatabaseId, syncGroupProperties.syncDatabaseId) &&
        Objects.equals(this.syncState, syncGroupProperties.syncState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conflictResolutionPolicy, hubDatabasePassword, hubDatabaseUserName, interval, lastSyncTime, schema, syncDatabaseId, syncState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SyncGroupProperties {\n");
    sb.append("    conflictResolutionPolicy: ").append(toIndentedString(conflictResolutionPolicy)).append("\n");
    sb.append("    hubDatabasePassword: ").append(toIndentedString(hubDatabasePassword)).append("\n");
    sb.append("    hubDatabaseUserName: ").append(toIndentedString(hubDatabaseUserName)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    lastSyncTime: ").append(toIndentedString(lastSyncTime)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    syncDatabaseId: ").append(toIndentedString(syncDatabaseId)).append("\n");
    sb.append("    syncState: ").append(toIndentedString(syncState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conflictResolutionPolicy");
    openapiFields.add("hubDatabasePassword");
    openapiFields.add("hubDatabaseUserName");
    openapiFields.add("interval");
    openapiFields.add("lastSyncTime");
    openapiFields.add("schema");
    openapiFields.add("syncDatabaseId");
    openapiFields.add("syncState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SyncGroupProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SyncGroupProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SyncGroupProperties is not found in the empty JSON string", SyncGroupProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SyncGroupProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SyncGroupProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("conflictResolutionPolicy") != null && !jsonObj.get("conflictResolutionPolicy").isJsonNull()) && !jsonObj.get("conflictResolutionPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conflictResolutionPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conflictResolutionPolicy").toString()));
      }
      // validate the optional field `conflictResolutionPolicy`
      if (jsonObj.get("conflictResolutionPolicy") != null && !jsonObj.get("conflictResolutionPolicy").isJsonNull()) {
        ConflictResolutionPolicyEnum.validateJsonElement(jsonObj.get("conflictResolutionPolicy"));
      }
      if ((jsonObj.get("hubDatabasePassword") != null && !jsonObj.get("hubDatabasePassword").isJsonNull()) && !jsonObj.get("hubDatabasePassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hubDatabasePassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hubDatabasePassword").toString()));
      }
      if ((jsonObj.get("hubDatabaseUserName") != null && !jsonObj.get("hubDatabaseUserName").isJsonNull()) && !jsonObj.get("hubDatabaseUserName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hubDatabaseUserName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hubDatabaseUserName").toString()));
      }
      // validate the optional field `schema`
      if (jsonObj.get("schema") != null && !jsonObj.get("schema").isJsonNull()) {
        SyncGroupSchema.validateJsonElement(jsonObj.get("schema"));
      }
      if ((jsonObj.get("syncDatabaseId") != null && !jsonObj.get("syncDatabaseId").isJsonNull()) && !jsonObj.get("syncDatabaseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `syncDatabaseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("syncDatabaseId").toString()));
      }
      if ((jsonObj.get("syncState") != null && !jsonObj.get("syncState").isJsonNull()) && !jsonObj.get("syncState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `syncState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("syncState").toString()));
      }
      // validate the optional field `syncState`
      if (jsonObj.get("syncState") != null && !jsonObj.get("syncState").isJsonNull()) {
        SyncStateEnum.validateJsonElement(jsonObj.get("syncState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SyncGroupProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SyncGroupProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SyncGroupProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SyncGroupProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<SyncGroupProperties>() {
           @Override
           public void write(JsonWriter out, SyncGroupProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SyncGroupProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SyncGroupProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SyncGroupProperties
   * @throws IOException if the JSON string is invalid with respect to SyncGroupProperties
   */
  public static SyncGroupProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SyncGroupProperties.class);
  }

  /**
   * Convert an instance of SyncGroupProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

