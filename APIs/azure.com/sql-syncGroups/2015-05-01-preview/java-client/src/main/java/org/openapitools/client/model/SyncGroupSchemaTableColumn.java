/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of column in sync group table.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:30:49.608214-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SyncGroupSchemaTableColumn {
  public static final String SERIALIZED_NAME_DATA_SIZE = "dataSize";
  @SerializedName(SERIALIZED_NAME_DATA_SIZE)
  private String dataSize;

  public static final String SERIALIZED_NAME_DATA_TYPE = "dataType";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE)
  private String dataType;

  public static final String SERIALIZED_NAME_QUOTED_NAME = "quotedName";
  @SerializedName(SERIALIZED_NAME_QUOTED_NAME)
  private String quotedName;

  public SyncGroupSchemaTableColumn() {
  }

  public SyncGroupSchemaTableColumn dataSize(String dataSize) {
    this.dataSize = dataSize;
    return this;
  }

  /**
   * Data size of the column.
   * @return dataSize
   */
  @javax.annotation.Nullable
  public String getDataSize() {
    return dataSize;
  }

  public void setDataSize(String dataSize) {
    this.dataSize = dataSize;
  }


  public SyncGroupSchemaTableColumn dataType(String dataType) {
    this.dataType = dataType;
    return this;
  }

  /**
   * Data type of the column.
   * @return dataType
   */
  @javax.annotation.Nullable
  public String getDataType() {
    return dataType;
  }

  public void setDataType(String dataType) {
    this.dataType = dataType;
  }


  public SyncGroupSchemaTableColumn quotedName(String quotedName) {
    this.quotedName = quotedName;
    return this;
  }

  /**
   * Quoted name of sync group table column.
   * @return quotedName
   */
  @javax.annotation.Nullable
  public String getQuotedName() {
    return quotedName;
  }

  public void setQuotedName(String quotedName) {
    this.quotedName = quotedName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SyncGroupSchemaTableColumn syncGroupSchemaTableColumn = (SyncGroupSchemaTableColumn) o;
    return Objects.equals(this.dataSize, syncGroupSchemaTableColumn.dataSize) &&
        Objects.equals(this.dataType, syncGroupSchemaTableColumn.dataType) &&
        Objects.equals(this.quotedName, syncGroupSchemaTableColumn.quotedName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSize, dataType, quotedName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SyncGroupSchemaTableColumn {\n");
    sb.append("    dataSize: ").append(toIndentedString(dataSize)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    quotedName: ").append(toIndentedString(quotedName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataSize");
    openapiFields.add("dataType");
    openapiFields.add("quotedName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SyncGroupSchemaTableColumn
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SyncGroupSchemaTableColumn.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SyncGroupSchemaTableColumn is not found in the empty JSON string", SyncGroupSchemaTableColumn.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SyncGroupSchemaTableColumn.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SyncGroupSchemaTableColumn` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataSize") != null && !jsonObj.get("dataSize").isJsonNull()) && !jsonObj.get("dataSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSize").toString()));
      }
      if ((jsonObj.get("dataType") != null && !jsonObj.get("dataType").isJsonNull()) && !jsonObj.get("dataType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataType").toString()));
      }
      if ((jsonObj.get("quotedName") != null && !jsonObj.get("quotedName").isJsonNull()) && !jsonObj.get("quotedName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quotedName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quotedName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SyncGroupSchemaTableColumn.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SyncGroupSchemaTableColumn' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SyncGroupSchemaTableColumn> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SyncGroupSchemaTableColumn.class));

       return (TypeAdapter<T>) new TypeAdapter<SyncGroupSchemaTableColumn>() {
           @Override
           public void write(JsonWriter out, SyncGroupSchemaTableColumn value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SyncGroupSchemaTableColumn read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SyncGroupSchemaTableColumn given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SyncGroupSchemaTableColumn
   * @throws IOException if the JSON string is invalid with respect to SyncGroupSchemaTableColumn
   */
  public static SyncGroupSchemaTableColumn fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SyncGroupSchemaTableColumn.class);
  }

  /**
   * Convert an instance of SyncGroupSchemaTableColumn to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

