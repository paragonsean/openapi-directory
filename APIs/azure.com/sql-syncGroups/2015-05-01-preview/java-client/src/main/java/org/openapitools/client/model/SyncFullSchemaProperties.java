/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SyncFullSchemaTable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of the database full schema.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:30:49.608214-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SyncFullSchemaProperties {
  public static final String SERIALIZED_NAME_LAST_UPDATE_TIME = "lastUpdateTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_TIME)
  private OffsetDateTime lastUpdateTime;

  public static final String SERIALIZED_NAME_TABLES = "tables";
  @SerializedName(SERIALIZED_NAME_TABLES)
  private List<SyncFullSchemaTable> tables = new ArrayList<>();

  public SyncFullSchemaProperties() {
  }

  public SyncFullSchemaProperties(
     OffsetDateTime lastUpdateTime, 
     List<SyncFullSchemaTable> tables
  ) {
    this();
    this.lastUpdateTime = lastUpdateTime;
    this.tables = tables;
  }

  /**
   * Last update time of the database schema.
   * @return lastUpdateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdateTime() {
    return lastUpdateTime;
  }



  /**
   * List of tables in the database full schema.
   * @return tables
   */
  @javax.annotation.Nullable
  public List<SyncFullSchemaTable> getTables() {
    return tables;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SyncFullSchemaProperties syncFullSchemaProperties = (SyncFullSchemaProperties) o;
    return Objects.equals(this.lastUpdateTime, syncFullSchemaProperties.lastUpdateTime) &&
        Objects.equals(this.tables, syncFullSchemaProperties.tables);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lastUpdateTime, tables);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SyncFullSchemaProperties {\n");
    sb.append("    lastUpdateTime: ").append(toIndentedString(lastUpdateTime)).append("\n");
    sb.append("    tables: ").append(toIndentedString(tables)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lastUpdateTime");
    openapiFields.add("tables");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SyncFullSchemaProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SyncFullSchemaProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SyncFullSchemaProperties is not found in the empty JSON string", SyncFullSchemaProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SyncFullSchemaProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SyncFullSchemaProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("tables") != null && !jsonObj.get("tables").isJsonNull()) {
        JsonArray jsonArraytables = jsonObj.getAsJsonArray("tables");
        if (jsonArraytables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tables` to be an array in the JSON string but got `%s`", jsonObj.get("tables").toString()));
          }

          // validate the optional field `tables` (array)
          for (int i = 0; i < jsonArraytables.size(); i++) {
            SyncFullSchemaTable.validateJsonElement(jsonArraytables.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SyncFullSchemaProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SyncFullSchemaProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SyncFullSchemaProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SyncFullSchemaProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<SyncFullSchemaProperties>() {
           @Override
           public void write(JsonWriter out, SyncFullSchemaProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SyncFullSchemaProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SyncFullSchemaProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SyncFullSchemaProperties
   * @throws IOException if the JSON string is invalid with respect to SyncFullSchemaProperties
   */
  public static SyncFullSchemaProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SyncFullSchemaProperties.class);
  }

  /**
   * Convert an instance of SyncFullSchemaProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

