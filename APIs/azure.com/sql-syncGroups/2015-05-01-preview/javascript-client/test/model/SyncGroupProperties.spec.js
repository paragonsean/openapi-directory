/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SqlManagementClient);
  }
}(this, function(expect, SqlManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SqlManagementClient.SyncGroupProperties();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SyncGroupProperties', function() {
    it('should create an instance of SyncGroupProperties', function() {
      // uncomment below and update the code to test SyncGroupProperties
      //var instance = new SqlManagementClient.SyncGroupProperties();
      //expect(instance).to.be.a(SqlManagementClient.SyncGroupProperties);
    });

    it('should have the property conflictResolutionPolicy (base name: "conflictResolutionPolicy")', function() {
      // uncomment below and update the code to test the property conflictResolutionPolicy
      //var instance = new SqlManagementClient.SyncGroupProperties();
      //expect(instance).to.be();
    });

    it('should have the property hubDatabasePassword (base name: "hubDatabasePassword")', function() {
      // uncomment below and update the code to test the property hubDatabasePassword
      //var instance = new SqlManagementClient.SyncGroupProperties();
      //expect(instance).to.be();
    });

    it('should have the property hubDatabaseUserName (base name: "hubDatabaseUserName")', function() {
      // uncomment below and update the code to test the property hubDatabaseUserName
      //var instance = new SqlManagementClient.SyncGroupProperties();
      //expect(instance).to.be();
    });

    it('should have the property interval (base name: "interval")', function() {
      // uncomment below and update the code to test the property interval
      //var instance = new SqlManagementClient.SyncGroupProperties();
      //expect(instance).to.be();
    });

    it('should have the property lastSyncTime (base name: "lastSyncTime")', function() {
      // uncomment below and update the code to test the property lastSyncTime
      //var instance = new SqlManagementClient.SyncGroupProperties();
      //expect(instance).to.be();
    });

    it('should have the property schema (base name: "schema")', function() {
      // uncomment below and update the code to test the property schema
      //var instance = new SqlManagementClient.SyncGroupProperties();
      //expect(instance).to.be();
    });

    it('should have the property syncDatabaseId (base name: "syncDatabaseId")', function() {
      // uncomment below and update the code to test the property syncDatabaseId
      //var instance = new SqlManagementClient.SyncGroupProperties();
      //expect(instance).to.be();
    });

    it('should have the property syncState (base name: "syncState")', function() {
      // uncomment below and update the code to test the property syncState
      //var instance = new SqlManagementClient.SyncGroupProperties();
      //expect(instance).to.be();
    });

  });

}));
