/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SqlManagementClient);
  }
}(this, function(expect, SqlManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SqlManagementClient.SyncGroupsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SyncGroupsApi', function() {
    describe('syncGroupsCancelSync', function() {
      it('should call syncGroupsCancelSync successfully', function(done) {
        //uncomment below and update the code to test syncGroupsCancelSync
        //instance.syncGroupsCancelSync(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('syncGroupsCreateOrUpdate', function() {
      it('should call syncGroupsCreateOrUpdate successfully', function(done) {
        //uncomment below and update the code to test syncGroupsCreateOrUpdate
        //instance.syncGroupsCreateOrUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('syncGroupsDelete', function() {
      it('should call syncGroupsDelete successfully', function(done) {
        //uncomment below and update the code to test syncGroupsDelete
        //instance.syncGroupsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('syncGroupsGet', function() {
      it('should call syncGroupsGet successfully', function(done) {
        //uncomment below and update the code to test syncGroupsGet
        //instance.syncGroupsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('syncGroupsListByDatabase', function() {
      it('should call syncGroupsListByDatabase successfully', function(done) {
        //uncomment below and update the code to test syncGroupsListByDatabase
        //instance.syncGroupsListByDatabase(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('syncGroupsListHubSchemas', function() {
      it('should call syncGroupsListHubSchemas successfully', function(done) {
        //uncomment below and update the code to test syncGroupsListHubSchemas
        //instance.syncGroupsListHubSchemas(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('syncGroupsListLogs', function() {
      it('should call syncGroupsListLogs successfully', function(done) {
        //uncomment below and update the code to test syncGroupsListLogs
        //instance.syncGroupsListLogs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('syncGroupsListSyncDatabaseIds', function() {
      it('should call syncGroupsListSyncDatabaseIds successfully', function(done) {
        //uncomment below and update the code to test syncGroupsListSyncDatabaseIds
        //instance.syncGroupsListSyncDatabaseIds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('syncGroupsRefreshHubSchema', function() {
      it('should call syncGroupsRefreshHubSchema successfully', function(done) {
        //uncomment below and update the code to test syncGroupsRefreshHubSchema
        //instance.syncGroupsRefreshHubSchema(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('syncGroupsTriggerSync', function() {
      it('should call syncGroupsTriggerSync successfully', function(done) {
        //uncomment below and update the code to test syncGroupsTriggerSync
        //instance.syncGroupsTriggerSync(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('syncGroupsUpdate', function() {
      it('should call syncGroupsUpdate successfully', function(done) {
        //uncomment below and update the code to test syncGroupsUpdate
        //instance.syncGroupsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
