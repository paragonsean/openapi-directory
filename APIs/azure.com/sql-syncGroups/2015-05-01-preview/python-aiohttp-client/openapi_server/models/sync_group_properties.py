# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sync_group_schema import SyncGroupSchema
from openapi_server import util


class SyncGroupProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conflict_resolution_policy: str=None, hub_database_password: str=None, hub_database_user_name: str=None, interval: int=None, last_sync_time: datetime=None, _schema: SyncGroupSchema=None, sync_database_id: str=None, sync_state: str=None):
        """SyncGroupProperties - a model defined in OpenAPI

        :param conflict_resolution_policy: The conflict_resolution_policy of this SyncGroupProperties.
        :param hub_database_password: The hub_database_password of this SyncGroupProperties.
        :param hub_database_user_name: The hub_database_user_name of this SyncGroupProperties.
        :param interval: The interval of this SyncGroupProperties.
        :param last_sync_time: The last_sync_time of this SyncGroupProperties.
        :param _schema: The _schema of this SyncGroupProperties.
        :param sync_database_id: The sync_database_id of this SyncGroupProperties.
        :param sync_state: The sync_state of this SyncGroupProperties.
        """
        self.openapi_types = {
            'conflict_resolution_policy': str,
            'hub_database_password': str,
            'hub_database_user_name': str,
            'interval': int,
            'last_sync_time': datetime,
            '_schema': SyncGroupSchema,
            'sync_database_id': str,
            'sync_state': str
        }

        self.attribute_map = {
            'conflict_resolution_policy': 'conflictResolutionPolicy',
            'hub_database_password': 'hubDatabasePassword',
            'hub_database_user_name': 'hubDatabaseUserName',
            'interval': 'interval',
            'last_sync_time': 'lastSyncTime',
            '_schema': 'schema',
            'sync_database_id': 'syncDatabaseId',
            'sync_state': 'syncState'
        }

        self._conflict_resolution_policy = conflict_resolution_policy
        self._hub_database_password = hub_database_password
        self._hub_database_user_name = hub_database_user_name
        self._interval = interval
        self._last_sync_time = last_sync_time
        self.__schema = _schema
        self._sync_database_id = sync_database_id
        self._sync_state = sync_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SyncGroupProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SyncGroupProperties of this SyncGroupProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conflict_resolution_policy(self):
        """Gets the conflict_resolution_policy of this SyncGroupProperties.

        Conflict resolution policy of the sync group.

        :return: The conflict_resolution_policy of this SyncGroupProperties.
        :rtype: str
        """
        return self._conflict_resolution_policy

    @conflict_resolution_policy.setter
    def conflict_resolution_policy(self, conflict_resolution_policy):
        """Sets the conflict_resolution_policy of this SyncGroupProperties.

        Conflict resolution policy of the sync group.

        :param conflict_resolution_policy: The conflict_resolution_policy of this SyncGroupProperties.
        :type conflict_resolution_policy: str
        """
        allowed_values = ["HubWin", "MemberWin"]  # noqa: E501
        if conflict_resolution_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `conflict_resolution_policy` ({0}), must be one of {1}"
                .format(conflict_resolution_policy, allowed_values)
            )

        self._conflict_resolution_policy = conflict_resolution_policy

    @property
    def hub_database_password(self):
        """Gets the hub_database_password of this SyncGroupProperties.

        Password for the sync group hub database credential.

        :return: The hub_database_password of this SyncGroupProperties.
        :rtype: str
        """
        return self._hub_database_password

    @hub_database_password.setter
    def hub_database_password(self, hub_database_password):
        """Sets the hub_database_password of this SyncGroupProperties.

        Password for the sync group hub database credential.

        :param hub_database_password: The hub_database_password of this SyncGroupProperties.
        :type hub_database_password: str
        """

        self._hub_database_password = hub_database_password

    @property
    def hub_database_user_name(self):
        """Gets the hub_database_user_name of this SyncGroupProperties.

        User name for the sync group hub database credential.

        :return: The hub_database_user_name of this SyncGroupProperties.
        :rtype: str
        """
        return self._hub_database_user_name

    @hub_database_user_name.setter
    def hub_database_user_name(self, hub_database_user_name):
        """Sets the hub_database_user_name of this SyncGroupProperties.

        User name for the sync group hub database credential.

        :param hub_database_user_name: The hub_database_user_name of this SyncGroupProperties.
        :type hub_database_user_name: str
        """

        self._hub_database_user_name = hub_database_user_name

    @property
    def interval(self):
        """Gets the interval of this SyncGroupProperties.

        Sync interval of the sync group.

        :return: The interval of this SyncGroupProperties.
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this SyncGroupProperties.

        Sync interval of the sync group.

        :param interval: The interval of this SyncGroupProperties.
        :type interval: int
        """

        self._interval = interval

    @property
    def last_sync_time(self):
        """Gets the last_sync_time of this SyncGroupProperties.

        Last sync time of the sync group.

        :return: The last_sync_time of this SyncGroupProperties.
        :rtype: datetime
        """
        return self._last_sync_time

    @last_sync_time.setter
    def last_sync_time(self, last_sync_time):
        """Sets the last_sync_time of this SyncGroupProperties.

        Last sync time of the sync group.

        :param last_sync_time: The last_sync_time of this SyncGroupProperties.
        :type last_sync_time: datetime
        """

        self._last_sync_time = last_sync_time

    @property
    def _schema(self):
        """Gets the _schema of this SyncGroupProperties.


        :return: The _schema of this SyncGroupProperties.
        :rtype: SyncGroupSchema
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this SyncGroupProperties.


        :param _schema: The _schema of this SyncGroupProperties.
        :type _schema: SyncGroupSchema
        """

        self.__schema = _schema

    @property
    def sync_database_id(self):
        """Gets the sync_database_id of this SyncGroupProperties.

        ARM resource id of the sync database in the sync group.

        :return: The sync_database_id of this SyncGroupProperties.
        :rtype: str
        """
        return self._sync_database_id

    @sync_database_id.setter
    def sync_database_id(self, sync_database_id):
        """Sets the sync_database_id of this SyncGroupProperties.

        ARM resource id of the sync database in the sync group.

        :param sync_database_id: The sync_database_id of this SyncGroupProperties.
        :type sync_database_id: str
        """

        self._sync_database_id = sync_database_id

    @property
    def sync_state(self):
        """Gets the sync_state of this SyncGroupProperties.

        Sync state of the sync group.

        :return: The sync_state of this SyncGroupProperties.
        :rtype: str
        """
        return self._sync_state

    @sync_state.setter
    def sync_state(self, sync_state):
        """Sets the sync_state of this SyncGroupProperties.

        Sync state of the sync group.

        :param sync_state: The sync_state of this SyncGroupProperties.
        :type sync_state: str
        """
        allowed_values = ["NotReady", "Error", "Warning", "Progressing", "Good"]  # noqa: E501
        if sync_state not in allowed_values:
            raise ValueError(
                "Invalid value for `sync_state` ({0}), must be one of {1}"
                .format(sync_state, allowed_values)
            )

        self._sync_state = sync_state
