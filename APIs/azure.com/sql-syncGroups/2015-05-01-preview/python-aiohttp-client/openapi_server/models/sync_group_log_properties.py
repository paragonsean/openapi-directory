# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SyncGroupLogProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, details: str=None, operation_status: str=None, source: str=None, timestamp: datetime=None, tracing_id: str=None, type: str=None):
        """SyncGroupLogProperties - a model defined in OpenAPI

        :param details: The details of this SyncGroupLogProperties.
        :param operation_status: The operation_status of this SyncGroupLogProperties.
        :param source: The source of this SyncGroupLogProperties.
        :param timestamp: The timestamp of this SyncGroupLogProperties.
        :param tracing_id: The tracing_id of this SyncGroupLogProperties.
        :param type: The type of this SyncGroupLogProperties.
        """
        self.openapi_types = {
            'details': str,
            'operation_status': str,
            'source': str,
            'timestamp': datetime,
            'tracing_id': str,
            'type': str
        }

        self.attribute_map = {
            'details': 'details',
            'operation_status': 'operationStatus',
            'source': 'source',
            'timestamp': 'timestamp',
            'tracing_id': 'tracingId',
            'type': 'type'
        }

        self._details = details
        self._operation_status = operation_status
        self._source = source
        self._timestamp = timestamp
        self._tracing_id = tracing_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SyncGroupLogProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SyncGroupLogProperties of this SyncGroupLogProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def details(self):
        """Gets the details of this SyncGroupLogProperties.

        Details of the sync group log.

        :return: The details of this SyncGroupLogProperties.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this SyncGroupLogProperties.

        Details of the sync group log.

        :param details: The details of this SyncGroupLogProperties.
        :type details: str
        """

        self._details = details

    @property
    def operation_status(self):
        """Gets the operation_status of this SyncGroupLogProperties.

        OperationStatus of the sync group log.

        :return: The operation_status of this SyncGroupLogProperties.
        :rtype: str
        """
        return self._operation_status

    @operation_status.setter
    def operation_status(self, operation_status):
        """Sets the operation_status of this SyncGroupLogProperties.

        OperationStatus of the sync group log.

        :param operation_status: The operation_status of this SyncGroupLogProperties.
        :type operation_status: str
        """

        self._operation_status = operation_status

    @property
    def source(self):
        """Gets the source of this SyncGroupLogProperties.

        Source of the sync group log.

        :return: The source of this SyncGroupLogProperties.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this SyncGroupLogProperties.

        Source of the sync group log.

        :param source: The source of this SyncGroupLogProperties.
        :type source: str
        """

        self._source = source

    @property
    def timestamp(self):
        """Gets the timestamp of this SyncGroupLogProperties.

        Timestamp of the sync group log.

        :return: The timestamp of this SyncGroupLogProperties.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this SyncGroupLogProperties.

        Timestamp of the sync group log.

        :param timestamp: The timestamp of this SyncGroupLogProperties.
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def tracing_id(self):
        """Gets the tracing_id of this SyncGroupLogProperties.

        TracingId of the sync group log.

        :return: The tracing_id of this SyncGroupLogProperties.
        :rtype: str
        """
        return self._tracing_id

    @tracing_id.setter
    def tracing_id(self, tracing_id):
        """Sets the tracing_id of this SyncGroupLogProperties.

        TracingId of the sync group log.

        :param tracing_id: The tracing_id of this SyncGroupLogProperties.
        :type tracing_id: str
        """

        self._tracing_id = tracing_id

    @property
    def type(self):
        """Gets the type of this SyncGroupLogProperties.

        Type of the sync group log.

        :return: The type of this SyncGroupLogProperties.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SyncGroupLogProperties.

        Type of the sync group log.

        :param type: The type of this SyncGroupLogProperties.
        :type type: str
        """
        allowed_values = ["All", "Error", "Warning", "Success"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
