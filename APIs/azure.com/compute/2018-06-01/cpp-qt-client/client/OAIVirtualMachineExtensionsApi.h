/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVirtualMachineExtensionsApi_H
#define OAI_OAIVirtualMachineExtensionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIVirtualMachineExtension.h"
#include "OAIVirtualMachineExtensionUpdate.h"
#include "OAIVirtualMachineExtensionsListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVirtualMachineExtensionsApi : public QObject {
    Q_OBJECT

public:
    OAIVirtualMachineExtensionsApi(const int timeOut = 0);
    ~OAIVirtualMachineExtensionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_name QString [required]
    * @param[in]  vm_extension_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  extension_parameters OAIVirtualMachineExtension [required]
    */
    virtual void virtualMachineExtensionsCreateOrUpdate(const QString &resource_group_name, const QString &vm_name, const QString &vm_extension_name, const QString &api_version, const QString &subscription_id, const OAIVirtualMachineExtension &extension_parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_name QString [required]
    * @param[in]  vm_extension_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualMachineExtensionsDelete(const QString &resource_group_name, const QString &vm_name, const QString &vm_extension_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_name QString [required]
    * @param[in]  vm_extension_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void virtualMachineExtensionsGet(const QString &resource_group_name, const QString &vm_name, const QString &vm_extension_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void virtualMachineExtensionsList(const QString &resource_group_name, const QString &vm_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_name QString [required]
    * @param[in]  vm_extension_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  extension_parameters OAIVirtualMachineExtensionUpdate [required]
    */
    virtual void virtualMachineExtensionsUpdate(const QString &resource_group_name, const QString &vm_name, const QString &vm_extension_name, const QString &api_version, const QString &subscription_id, const OAIVirtualMachineExtensionUpdate &extension_parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void virtualMachineExtensionsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualMachineExtensionsDeleteCallback(OAIHttpRequestWorker *worker);
    void virtualMachineExtensionsGetCallback(OAIHttpRequestWorker *worker);
    void virtualMachineExtensionsListCallback(OAIHttpRequestWorker *worker);
    void virtualMachineExtensionsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void virtualMachineExtensionsCreateOrUpdateSignal(OAIVirtualMachineExtension summary);
    void virtualMachineExtensionsDeleteSignal();
    void virtualMachineExtensionsGetSignal(OAIVirtualMachineExtension summary);
    void virtualMachineExtensionsListSignal(OAIVirtualMachineExtensionsListResult summary);
    void virtualMachineExtensionsUpdateSignal(OAIVirtualMachineExtension summary);


    void virtualMachineExtensionsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualMachineExtension summary);
    void virtualMachineExtensionsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void virtualMachineExtensionsGetSignalFull(OAIHttpRequestWorker *worker, OAIVirtualMachineExtension summary);
    void virtualMachineExtensionsListSignalFull(OAIHttpRequestWorker *worker, OAIVirtualMachineExtensionsListResult summary);
    void virtualMachineExtensionsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualMachineExtension summary);

    Q_DECL_DEPRECATED_X("Use virtualMachineExtensionsCreateOrUpdateSignalError() instead")
    void virtualMachineExtensionsCreateOrUpdateSignalE(OAIVirtualMachineExtension summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineExtensionsCreateOrUpdateSignalError(OAIVirtualMachineExtension summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineExtensionsDeleteSignalError() instead")
    void virtualMachineExtensionsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineExtensionsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineExtensionsGetSignalError() instead")
    void virtualMachineExtensionsGetSignalE(OAIVirtualMachineExtension summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineExtensionsGetSignalError(OAIVirtualMachineExtension summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineExtensionsListSignalError() instead")
    void virtualMachineExtensionsListSignalE(OAIVirtualMachineExtensionsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineExtensionsListSignalError(OAIVirtualMachineExtensionsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineExtensionsUpdateSignalError() instead")
    void virtualMachineExtensionsUpdateSignalE(OAIVirtualMachineExtension summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineExtensionsUpdateSignalError(OAIVirtualMachineExtension summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use virtualMachineExtensionsCreateOrUpdateSignalErrorFull() instead")
    void virtualMachineExtensionsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineExtensionsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineExtensionsDeleteSignalErrorFull() instead")
    void virtualMachineExtensionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineExtensionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineExtensionsGetSignalErrorFull() instead")
    void virtualMachineExtensionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineExtensionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineExtensionsListSignalErrorFull() instead")
    void virtualMachineExtensionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineExtensionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineExtensionsUpdateSignalErrorFull() instead")
    void virtualMachineExtensionsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineExtensionsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
