/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRollingUpgradePolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRollingUpgradePolicy::OAIRollingUpgradePolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRollingUpgradePolicy::OAIRollingUpgradePolicy() {
    this->initializeModel();
}

OAIRollingUpgradePolicy::~OAIRollingUpgradePolicy() {}

void OAIRollingUpgradePolicy::initializeModel() {

    m_max_batch_instance_percent_isSet = false;
    m_max_batch_instance_percent_isValid = false;

    m_max_unhealthy_instance_percent_isSet = false;
    m_max_unhealthy_instance_percent_isValid = false;

    m_max_unhealthy_upgraded_instance_percent_isSet = false;
    m_max_unhealthy_upgraded_instance_percent_isValid = false;

    m_pause_time_between_batches_isSet = false;
    m_pause_time_between_batches_isValid = false;
}

void OAIRollingUpgradePolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRollingUpgradePolicy::fromJsonObject(QJsonObject json) {

    m_max_batch_instance_percent_isValid = ::OpenAPI::fromJsonValue(m_max_batch_instance_percent, json[QString("maxBatchInstancePercent")]);
    m_max_batch_instance_percent_isSet = !json[QString("maxBatchInstancePercent")].isNull() && m_max_batch_instance_percent_isValid;

    m_max_unhealthy_instance_percent_isValid = ::OpenAPI::fromJsonValue(m_max_unhealthy_instance_percent, json[QString("maxUnhealthyInstancePercent")]);
    m_max_unhealthy_instance_percent_isSet = !json[QString("maxUnhealthyInstancePercent")].isNull() && m_max_unhealthy_instance_percent_isValid;

    m_max_unhealthy_upgraded_instance_percent_isValid = ::OpenAPI::fromJsonValue(m_max_unhealthy_upgraded_instance_percent, json[QString("maxUnhealthyUpgradedInstancePercent")]);
    m_max_unhealthy_upgraded_instance_percent_isSet = !json[QString("maxUnhealthyUpgradedInstancePercent")].isNull() && m_max_unhealthy_upgraded_instance_percent_isValid;

    m_pause_time_between_batches_isValid = ::OpenAPI::fromJsonValue(m_pause_time_between_batches, json[QString("pauseTimeBetweenBatches")]);
    m_pause_time_between_batches_isSet = !json[QString("pauseTimeBetweenBatches")].isNull() && m_pause_time_between_batches_isValid;
}

QString OAIRollingUpgradePolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRollingUpgradePolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_max_batch_instance_percent_isSet) {
        obj.insert(QString("maxBatchInstancePercent"), ::OpenAPI::toJsonValue(m_max_batch_instance_percent));
    }
    if (m_max_unhealthy_instance_percent_isSet) {
        obj.insert(QString("maxUnhealthyInstancePercent"), ::OpenAPI::toJsonValue(m_max_unhealthy_instance_percent));
    }
    if (m_max_unhealthy_upgraded_instance_percent_isSet) {
        obj.insert(QString("maxUnhealthyUpgradedInstancePercent"), ::OpenAPI::toJsonValue(m_max_unhealthy_upgraded_instance_percent));
    }
    if (m_pause_time_between_batches_isSet) {
        obj.insert(QString("pauseTimeBetweenBatches"), ::OpenAPI::toJsonValue(m_pause_time_between_batches));
    }
    return obj;
}

qint32 OAIRollingUpgradePolicy::getMaxBatchInstancePercent() const {
    return m_max_batch_instance_percent;
}
void OAIRollingUpgradePolicy::setMaxBatchInstancePercent(const qint32 &max_batch_instance_percent) {
    m_max_batch_instance_percent = max_batch_instance_percent;
    m_max_batch_instance_percent_isSet = true;
}

bool OAIRollingUpgradePolicy::is_max_batch_instance_percent_Set() const{
    return m_max_batch_instance_percent_isSet;
}

bool OAIRollingUpgradePolicy::is_max_batch_instance_percent_Valid() const{
    return m_max_batch_instance_percent_isValid;
}

qint32 OAIRollingUpgradePolicy::getMaxUnhealthyInstancePercent() const {
    return m_max_unhealthy_instance_percent;
}
void OAIRollingUpgradePolicy::setMaxUnhealthyInstancePercent(const qint32 &max_unhealthy_instance_percent) {
    m_max_unhealthy_instance_percent = max_unhealthy_instance_percent;
    m_max_unhealthy_instance_percent_isSet = true;
}

bool OAIRollingUpgradePolicy::is_max_unhealthy_instance_percent_Set() const{
    return m_max_unhealthy_instance_percent_isSet;
}

bool OAIRollingUpgradePolicy::is_max_unhealthy_instance_percent_Valid() const{
    return m_max_unhealthy_instance_percent_isValid;
}

qint32 OAIRollingUpgradePolicy::getMaxUnhealthyUpgradedInstancePercent() const {
    return m_max_unhealthy_upgraded_instance_percent;
}
void OAIRollingUpgradePolicy::setMaxUnhealthyUpgradedInstancePercent(const qint32 &max_unhealthy_upgraded_instance_percent) {
    m_max_unhealthy_upgraded_instance_percent = max_unhealthy_upgraded_instance_percent;
    m_max_unhealthy_upgraded_instance_percent_isSet = true;
}

bool OAIRollingUpgradePolicy::is_max_unhealthy_upgraded_instance_percent_Set() const{
    return m_max_unhealthy_upgraded_instance_percent_isSet;
}

bool OAIRollingUpgradePolicy::is_max_unhealthy_upgraded_instance_percent_Valid() const{
    return m_max_unhealthy_upgraded_instance_percent_isValid;
}

QString OAIRollingUpgradePolicy::getPauseTimeBetweenBatches() const {
    return m_pause_time_between_batches;
}
void OAIRollingUpgradePolicy::setPauseTimeBetweenBatches(const QString &pause_time_between_batches) {
    m_pause_time_between_batches = pause_time_between_batches;
    m_pause_time_between_batches_isSet = true;
}

bool OAIRollingUpgradePolicy::is_pause_time_between_batches_Set() const{
    return m_pause_time_between_batches_isSet;
}

bool OAIRollingUpgradePolicy::is_pause_time_between_batches_Valid() const{
    return m_pause_time_between_batches_isValid;
}

bool OAIRollingUpgradePolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_batch_instance_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_unhealthy_instance_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_unhealthy_upgraded_instance_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pause_time_between_batches_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRollingUpgradePolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
