/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualMachineImageProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualMachineImageProperties::OAIVirtualMachineImageProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualMachineImageProperties::OAIVirtualMachineImageProperties() {
    this->initializeModel();
}

OAIVirtualMachineImageProperties::~OAIVirtualMachineImageProperties() {}

void OAIVirtualMachineImageProperties::initializeModel() {

    m_data_disk_images_isSet = false;
    m_data_disk_images_isValid = false;

    m_os_disk_image_isSet = false;
    m_os_disk_image_isValid = false;

    m_plan_isSet = false;
    m_plan_isValid = false;
}

void OAIVirtualMachineImageProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualMachineImageProperties::fromJsonObject(QJsonObject json) {

    m_data_disk_images_isValid = ::OpenAPI::fromJsonValue(m_data_disk_images, json[QString("dataDiskImages")]);
    m_data_disk_images_isSet = !json[QString("dataDiskImages")].isNull() && m_data_disk_images_isValid;

    m_os_disk_image_isValid = ::OpenAPI::fromJsonValue(m_os_disk_image, json[QString("osDiskImage")]);
    m_os_disk_image_isSet = !json[QString("osDiskImage")].isNull() && m_os_disk_image_isValid;

    m_plan_isValid = ::OpenAPI::fromJsonValue(m_plan, json[QString("plan")]);
    m_plan_isSet = !json[QString("plan")].isNull() && m_plan_isValid;
}

QString OAIVirtualMachineImageProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualMachineImageProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_data_disk_images.size() > 0) {
        obj.insert(QString("dataDiskImages"), ::OpenAPI::toJsonValue(m_data_disk_images));
    }
    if (m_os_disk_image.isSet()) {
        obj.insert(QString("osDiskImage"), ::OpenAPI::toJsonValue(m_os_disk_image));
    }
    if (m_plan.isSet()) {
        obj.insert(QString("plan"), ::OpenAPI::toJsonValue(m_plan));
    }
    return obj;
}

QList<OAIDataDiskImage> OAIVirtualMachineImageProperties::getDataDiskImages() const {
    return m_data_disk_images;
}
void OAIVirtualMachineImageProperties::setDataDiskImages(const QList<OAIDataDiskImage> &data_disk_images) {
    m_data_disk_images = data_disk_images;
    m_data_disk_images_isSet = true;
}

bool OAIVirtualMachineImageProperties::is_data_disk_images_Set() const{
    return m_data_disk_images_isSet;
}

bool OAIVirtualMachineImageProperties::is_data_disk_images_Valid() const{
    return m_data_disk_images_isValid;
}

OAIOSDiskImage OAIVirtualMachineImageProperties::getOsDiskImage() const {
    return m_os_disk_image;
}
void OAIVirtualMachineImageProperties::setOsDiskImage(const OAIOSDiskImage &os_disk_image) {
    m_os_disk_image = os_disk_image;
    m_os_disk_image_isSet = true;
}

bool OAIVirtualMachineImageProperties::is_os_disk_image_Set() const{
    return m_os_disk_image_isSet;
}

bool OAIVirtualMachineImageProperties::is_os_disk_image_Valid() const{
    return m_os_disk_image_isValid;
}

OAIPurchasePlan OAIVirtualMachineImageProperties::getPlan() const {
    return m_plan;
}
void OAIVirtualMachineImageProperties::setPlan(const OAIPurchasePlan &plan) {
    m_plan = plan;
    m_plan_isSet = true;
}

bool OAIVirtualMachineImageProperties::is_plan_Set() const{
    return m_plan_isSet;
}

bool OAIVirtualMachineImageProperties::is_plan_Valid() const{
    return m_plan_isValid;
}

bool OAIVirtualMachineImageProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_disk_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_disk_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualMachineImageProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
