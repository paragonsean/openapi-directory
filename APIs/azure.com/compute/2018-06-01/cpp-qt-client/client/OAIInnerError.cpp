/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInnerError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInnerError::OAIInnerError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInnerError::OAIInnerError() {
    this->initializeModel();
}

OAIInnerError::~OAIInnerError() {}

void OAIInnerError::initializeModel() {

    m_errordetail_isSet = false;
    m_errordetail_isValid = false;

    m_exceptiontype_isSet = false;
    m_exceptiontype_isValid = false;
}

void OAIInnerError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInnerError::fromJsonObject(QJsonObject json) {

    m_errordetail_isValid = ::OpenAPI::fromJsonValue(m_errordetail, json[QString("errordetail")]);
    m_errordetail_isSet = !json[QString("errordetail")].isNull() && m_errordetail_isValid;

    m_exceptiontype_isValid = ::OpenAPI::fromJsonValue(m_exceptiontype, json[QString("exceptiontype")]);
    m_exceptiontype_isSet = !json[QString("exceptiontype")].isNull() && m_exceptiontype_isValid;
}

QString OAIInnerError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInnerError::asJsonObject() const {
    QJsonObject obj;
    if (m_errordetail_isSet) {
        obj.insert(QString("errordetail"), ::OpenAPI::toJsonValue(m_errordetail));
    }
    if (m_exceptiontype_isSet) {
        obj.insert(QString("exceptiontype"), ::OpenAPI::toJsonValue(m_exceptiontype));
    }
    return obj;
}

QString OAIInnerError::getErrordetail() const {
    return m_errordetail;
}
void OAIInnerError::setErrordetail(const QString &errordetail) {
    m_errordetail = errordetail;
    m_errordetail_isSet = true;
}

bool OAIInnerError::is_errordetail_Set() const{
    return m_errordetail_isSet;
}

bool OAIInnerError::is_errordetail_Valid() const{
    return m_errordetail_isValid;
}

QString OAIInnerError::getExceptiontype() const {
    return m_exceptiontype;
}
void OAIInnerError::setExceptiontype(const QString &exceptiontype) {
    m_exceptiontype = exceptiontype;
    m_exceptiontype_isSet = true;
}

bool OAIInnerError::is_exceptiontype_Set() const{
    return m_exceptiontype_isSet;
}

bool OAIInnerError::is_exceptiontype_Valid() const{
    return m_exceptiontype_isValid;
}

bool OAIInnerError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_errordetail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exceptiontype_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInnerError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
