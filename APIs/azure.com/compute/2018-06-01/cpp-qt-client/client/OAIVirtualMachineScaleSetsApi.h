/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVirtualMachineScaleSetsApi_H
#define OAI_OAIVirtualMachineScaleSetsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRecoveryWalkResponse.h"
#include "OAIVirtualMachineScaleSet.h"
#include "OAIVirtualMachineScaleSetInstanceView.h"
#include "OAIVirtualMachineScaleSetListOSUpgradeHistory.h"
#include "OAIVirtualMachineScaleSetListResult.h"
#include "OAIVirtualMachineScaleSetListSkusResult.h"
#include "OAIVirtualMachineScaleSetListWithLinkResult.h"
#include "OAIVirtualMachineScaleSetReimageParameters.h"
#include "OAIVirtualMachineScaleSetUpdate.h"
#include "OAIVirtualMachineScaleSetVMInstanceIDs.h"
#include "OAIVirtualMachineScaleSetVMInstanceRequiredIDs.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVirtualMachineScaleSetsApi : public QObject {
    Q_OBJECT

public:
    OAIVirtualMachineScaleSetsApi(const int timeOut = 0);
    ~OAIVirtualMachineScaleSetsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_scale_set_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIVirtualMachineScaleSet [required]
    */
    virtual void virtualMachineScaleSetsCreateOrUpdate(const QString &resource_group_name, const QString &vm_scale_set_name, const QString &api_version, const QString &subscription_id, const OAIVirtualMachineScaleSet &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_scale_set_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  vm_instance_ids OAIVirtualMachineScaleSetVMInstanceIDs [optional]
    */
    virtual void virtualMachineScaleSetsDeallocate(const QString &resource_group_name, const QString &vm_scale_set_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<OAIVirtualMachineScaleSetVMInstanceIDs> &vm_instance_ids = ::OpenAPI::OptionalParam<OAIVirtualMachineScaleSetVMInstanceIDs>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_scale_set_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualMachineScaleSetsDelete(const QString &resource_group_name, const QString &vm_scale_set_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_scale_set_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  vm_instance_ids OAIVirtualMachineScaleSetVMInstanceRequiredIDs [required]
    */
    virtual void virtualMachineScaleSetsDeleteInstances(const QString &resource_group_name, const QString &vm_scale_set_name, const QString &api_version, const QString &subscription_id, const OAIVirtualMachineScaleSetVMInstanceRequiredIDs &vm_instance_ids);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_scale_set_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  platform_update_domain qint32 [required]
    */
    virtual void virtualMachineScaleSetsForceRecoveryServiceFabricPlatformUpdateDomainWalk(const QString &resource_group_name, const QString &vm_scale_set_name, const QString &api_version, const QString &subscription_id, const qint32 &platform_update_domain);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_scale_set_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualMachineScaleSetsGet(const QString &resource_group_name, const QString &vm_scale_set_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_scale_set_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualMachineScaleSetsGetInstanceView(const QString &resource_group_name, const QString &vm_scale_set_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_scale_set_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualMachineScaleSetsGetOSUpgradeHistory(const QString &resource_group_name, const QString &vm_scale_set_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualMachineScaleSetsList(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualMachineScaleSetsListAll(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_scale_set_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualMachineScaleSetsListSkus(const QString &resource_group_name, const QString &vm_scale_set_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_scale_set_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  vm_instance_ids OAIVirtualMachineScaleSetVMInstanceIDs [optional]
    */
    virtual void virtualMachineScaleSetsPerformMaintenance(const QString &resource_group_name, const QString &vm_scale_set_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<OAIVirtualMachineScaleSetVMInstanceIDs> &vm_instance_ids = ::OpenAPI::OptionalParam<OAIVirtualMachineScaleSetVMInstanceIDs>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_scale_set_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  vm_instance_ids OAIVirtualMachineScaleSetVMInstanceIDs [optional]
    */
    virtual void virtualMachineScaleSetsPowerOff(const QString &resource_group_name, const QString &vm_scale_set_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<OAIVirtualMachineScaleSetVMInstanceIDs> &vm_instance_ids = ::OpenAPI::OptionalParam<OAIVirtualMachineScaleSetVMInstanceIDs>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_scale_set_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  vm_instance_ids OAIVirtualMachineScaleSetVMInstanceIDs [optional]
    */
    virtual void virtualMachineScaleSetsRedeploy(const QString &resource_group_name, const QString &vm_scale_set_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<OAIVirtualMachineScaleSetVMInstanceIDs> &vm_instance_ids = ::OpenAPI::OptionalParam<OAIVirtualMachineScaleSetVMInstanceIDs>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_scale_set_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  vm_scale_set_reimage_input OAIVirtualMachineScaleSetReimageParameters [optional]
    */
    virtual void virtualMachineScaleSetsReimage(const QString &resource_group_name, const QString &vm_scale_set_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<OAIVirtualMachineScaleSetReimageParameters> &vm_scale_set_reimage_input = ::OpenAPI::OptionalParam<OAIVirtualMachineScaleSetReimageParameters>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_scale_set_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  vm_instance_ids OAIVirtualMachineScaleSetVMInstanceIDs [optional]
    */
    virtual void virtualMachineScaleSetsReimageAll(const QString &resource_group_name, const QString &vm_scale_set_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<OAIVirtualMachineScaleSetVMInstanceIDs> &vm_instance_ids = ::OpenAPI::OptionalParam<OAIVirtualMachineScaleSetVMInstanceIDs>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_scale_set_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  vm_instance_ids OAIVirtualMachineScaleSetVMInstanceIDs [optional]
    */
    virtual void virtualMachineScaleSetsRestart(const QString &resource_group_name, const QString &vm_scale_set_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<OAIVirtualMachineScaleSetVMInstanceIDs> &vm_instance_ids = ::OpenAPI::OptionalParam<OAIVirtualMachineScaleSetVMInstanceIDs>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_scale_set_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  vm_instance_ids OAIVirtualMachineScaleSetVMInstanceIDs [optional]
    */
    virtual void virtualMachineScaleSetsStart(const QString &resource_group_name, const QString &vm_scale_set_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<OAIVirtualMachineScaleSetVMInstanceIDs> &vm_instance_ids = ::OpenAPI::OptionalParam<OAIVirtualMachineScaleSetVMInstanceIDs>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_scale_set_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIVirtualMachineScaleSetUpdate [required]
    */
    virtual void virtualMachineScaleSetsUpdate(const QString &resource_group_name, const QString &vm_scale_set_name, const QString &api_version, const QString &subscription_id, const OAIVirtualMachineScaleSetUpdate &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_scale_set_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  vm_instance_ids OAIVirtualMachineScaleSetVMInstanceRequiredIDs [required]
    */
    virtual void virtualMachineScaleSetsUpdateInstances(const QString &resource_group_name, const QString &vm_scale_set_name, const QString &api_version, const QString &subscription_id, const OAIVirtualMachineScaleSetVMInstanceRequiredIDs &vm_instance_ids);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void virtualMachineScaleSetsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetsDeallocateCallback(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetsDeleteCallback(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetsDeleteInstancesCallback(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetsForceRecoveryServiceFabricPlatformUpdateDomainWalkCallback(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetsGetCallback(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetsGetInstanceViewCallback(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetsGetOSUpgradeHistoryCallback(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetsListCallback(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetsListAllCallback(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetsListSkusCallback(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetsPerformMaintenanceCallback(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetsPowerOffCallback(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetsRedeployCallback(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetsReimageCallback(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetsReimageAllCallback(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetsRestartCallback(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetsStartCallback(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetsUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetsUpdateInstancesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void virtualMachineScaleSetsCreateOrUpdateSignal(OAIVirtualMachineScaleSet summary);
    void virtualMachineScaleSetsDeallocateSignal();
    void virtualMachineScaleSetsDeleteSignal();
    void virtualMachineScaleSetsDeleteInstancesSignal();
    void virtualMachineScaleSetsForceRecoveryServiceFabricPlatformUpdateDomainWalkSignal(OAIRecoveryWalkResponse summary);
    void virtualMachineScaleSetsGetSignal(OAIVirtualMachineScaleSet summary);
    void virtualMachineScaleSetsGetInstanceViewSignal(OAIVirtualMachineScaleSetInstanceView summary);
    void virtualMachineScaleSetsGetOSUpgradeHistorySignal(OAIVirtualMachineScaleSetListOSUpgradeHistory summary);
    void virtualMachineScaleSetsListSignal(OAIVirtualMachineScaleSetListResult summary);
    void virtualMachineScaleSetsListAllSignal(OAIVirtualMachineScaleSetListWithLinkResult summary);
    void virtualMachineScaleSetsListSkusSignal(OAIVirtualMachineScaleSetListSkusResult summary);
    void virtualMachineScaleSetsPerformMaintenanceSignal();
    void virtualMachineScaleSetsPowerOffSignal();
    void virtualMachineScaleSetsRedeploySignal();
    void virtualMachineScaleSetsReimageSignal();
    void virtualMachineScaleSetsReimageAllSignal();
    void virtualMachineScaleSetsRestartSignal();
    void virtualMachineScaleSetsStartSignal();
    void virtualMachineScaleSetsUpdateSignal(OAIVirtualMachineScaleSet summary);
    void virtualMachineScaleSetsUpdateInstancesSignal();


    void virtualMachineScaleSetsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualMachineScaleSet summary);
    void virtualMachineScaleSetsDeallocateSignalFull(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetsDeleteInstancesSignalFull(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetsForceRecoveryServiceFabricPlatformUpdateDomainWalkSignalFull(OAIHttpRequestWorker *worker, OAIRecoveryWalkResponse summary);
    void virtualMachineScaleSetsGetSignalFull(OAIHttpRequestWorker *worker, OAIVirtualMachineScaleSet summary);
    void virtualMachineScaleSetsGetInstanceViewSignalFull(OAIHttpRequestWorker *worker, OAIVirtualMachineScaleSetInstanceView summary);
    void virtualMachineScaleSetsGetOSUpgradeHistorySignalFull(OAIHttpRequestWorker *worker, OAIVirtualMachineScaleSetListOSUpgradeHistory summary);
    void virtualMachineScaleSetsListSignalFull(OAIHttpRequestWorker *worker, OAIVirtualMachineScaleSetListResult summary);
    void virtualMachineScaleSetsListAllSignalFull(OAIHttpRequestWorker *worker, OAIVirtualMachineScaleSetListWithLinkResult summary);
    void virtualMachineScaleSetsListSkusSignalFull(OAIHttpRequestWorker *worker, OAIVirtualMachineScaleSetListSkusResult summary);
    void virtualMachineScaleSetsPerformMaintenanceSignalFull(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetsPowerOffSignalFull(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetsRedeploySignalFull(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetsReimageSignalFull(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetsReimageAllSignalFull(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetsRestartSignalFull(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetsStartSignalFull(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualMachineScaleSet summary);
    void virtualMachineScaleSetsUpdateInstancesSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsCreateOrUpdateSignalError() instead")
    void virtualMachineScaleSetsCreateOrUpdateSignalE(OAIVirtualMachineScaleSet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsCreateOrUpdateSignalError(OAIVirtualMachineScaleSet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsDeallocateSignalError() instead")
    void virtualMachineScaleSetsDeallocateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsDeallocateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsDeleteSignalError() instead")
    void virtualMachineScaleSetsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsDeleteInstancesSignalError() instead")
    void virtualMachineScaleSetsDeleteInstancesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsDeleteInstancesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsForceRecoveryServiceFabricPlatformUpdateDomainWalkSignalError() instead")
    void virtualMachineScaleSetsForceRecoveryServiceFabricPlatformUpdateDomainWalkSignalE(OAIRecoveryWalkResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsForceRecoveryServiceFabricPlatformUpdateDomainWalkSignalError(OAIRecoveryWalkResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsGetSignalError() instead")
    void virtualMachineScaleSetsGetSignalE(OAIVirtualMachineScaleSet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsGetSignalError(OAIVirtualMachineScaleSet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsGetInstanceViewSignalError() instead")
    void virtualMachineScaleSetsGetInstanceViewSignalE(OAIVirtualMachineScaleSetInstanceView summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsGetInstanceViewSignalError(OAIVirtualMachineScaleSetInstanceView summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsGetOSUpgradeHistorySignalError() instead")
    void virtualMachineScaleSetsGetOSUpgradeHistorySignalE(OAIVirtualMachineScaleSetListOSUpgradeHistory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsGetOSUpgradeHistorySignalError(OAIVirtualMachineScaleSetListOSUpgradeHistory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsListSignalError() instead")
    void virtualMachineScaleSetsListSignalE(OAIVirtualMachineScaleSetListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsListSignalError(OAIVirtualMachineScaleSetListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsListAllSignalError() instead")
    void virtualMachineScaleSetsListAllSignalE(OAIVirtualMachineScaleSetListWithLinkResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsListAllSignalError(OAIVirtualMachineScaleSetListWithLinkResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsListSkusSignalError() instead")
    void virtualMachineScaleSetsListSkusSignalE(OAIVirtualMachineScaleSetListSkusResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsListSkusSignalError(OAIVirtualMachineScaleSetListSkusResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsPerformMaintenanceSignalError() instead")
    void virtualMachineScaleSetsPerformMaintenanceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsPerformMaintenanceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsPowerOffSignalError() instead")
    void virtualMachineScaleSetsPowerOffSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsPowerOffSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsRedeploySignalError() instead")
    void virtualMachineScaleSetsRedeploySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsRedeploySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsReimageSignalError() instead")
    void virtualMachineScaleSetsReimageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsReimageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsReimageAllSignalError() instead")
    void virtualMachineScaleSetsReimageAllSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsReimageAllSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsRestartSignalError() instead")
    void virtualMachineScaleSetsRestartSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsRestartSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsStartSignalError() instead")
    void virtualMachineScaleSetsStartSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsStartSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsUpdateSignalError() instead")
    void virtualMachineScaleSetsUpdateSignalE(OAIVirtualMachineScaleSet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsUpdateSignalError(OAIVirtualMachineScaleSet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsUpdateInstancesSignalError() instead")
    void virtualMachineScaleSetsUpdateInstancesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsUpdateInstancesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsCreateOrUpdateSignalErrorFull() instead")
    void virtualMachineScaleSetsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsDeallocateSignalErrorFull() instead")
    void virtualMachineScaleSetsDeallocateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsDeallocateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsDeleteSignalErrorFull() instead")
    void virtualMachineScaleSetsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsDeleteInstancesSignalErrorFull() instead")
    void virtualMachineScaleSetsDeleteInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsDeleteInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsForceRecoveryServiceFabricPlatformUpdateDomainWalkSignalErrorFull() instead")
    void virtualMachineScaleSetsForceRecoveryServiceFabricPlatformUpdateDomainWalkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsForceRecoveryServiceFabricPlatformUpdateDomainWalkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsGetSignalErrorFull() instead")
    void virtualMachineScaleSetsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsGetInstanceViewSignalErrorFull() instead")
    void virtualMachineScaleSetsGetInstanceViewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsGetInstanceViewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsGetOSUpgradeHistorySignalErrorFull() instead")
    void virtualMachineScaleSetsGetOSUpgradeHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsGetOSUpgradeHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsListSignalErrorFull() instead")
    void virtualMachineScaleSetsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsListAllSignalErrorFull() instead")
    void virtualMachineScaleSetsListAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsListAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsListSkusSignalErrorFull() instead")
    void virtualMachineScaleSetsListSkusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsListSkusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsPerformMaintenanceSignalErrorFull() instead")
    void virtualMachineScaleSetsPerformMaintenanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsPerformMaintenanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsPowerOffSignalErrorFull() instead")
    void virtualMachineScaleSetsPowerOffSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsPowerOffSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsRedeploySignalErrorFull() instead")
    void virtualMachineScaleSetsRedeploySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsRedeploySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsReimageSignalErrorFull() instead")
    void virtualMachineScaleSetsReimageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsReimageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsReimageAllSignalErrorFull() instead")
    void virtualMachineScaleSetsReimageAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsReimageAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsRestartSignalErrorFull() instead")
    void virtualMachineScaleSetsRestartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsRestartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsStartSignalErrorFull() instead")
    void virtualMachineScaleSetsStartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsStartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsUpdateSignalErrorFull() instead")
    void virtualMachineScaleSetsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetsUpdateInstancesSignalErrorFull() instead")
    void virtualMachineScaleSetsUpdateInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetsUpdateInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
