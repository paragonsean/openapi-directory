/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StorageAccountType from './StorageAccountType';
import SubResource from './SubResource';

/**
 * The ImageOSDisk model module.
 * @module model/ImageOSDisk
 * @version 2018-06-01
 */
class ImageOSDisk {
    /**
     * Constructs a new <code>ImageOSDisk</code>.
     * Describes an Operating System disk.
     * @alias module:model/ImageOSDisk
     * @param osState {module:model/ImageOSDisk.OsStateEnum} The OS State.
     * @param osType {module:model/ImageOSDisk.OsTypeEnum} This property allows you to specify the type of the OS that is included in the disk if creating a VM from a custom image. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**
     */
    constructor(osState, osType) { 
        
        ImageOSDisk.initialize(this, osState, osType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, osState, osType) { 
        obj['osState'] = osState;
        obj['osType'] = osType;
    }

    /**
     * Constructs a <code>ImageOSDisk</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageOSDisk} obj Optional instance to populate.
     * @return {module:model/ImageOSDisk} The populated <code>ImageOSDisk</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageOSDisk();

            if (data.hasOwnProperty('blobUri')) {
                obj['blobUri'] = ApiClient.convertToType(data['blobUri'], 'String');
            }
            if (data.hasOwnProperty('caching')) {
                obj['caching'] = ApiClient.convertToType(data['caching'], 'String');
            }
            if (data.hasOwnProperty('diskSizeGB')) {
                obj['diskSizeGB'] = ApiClient.convertToType(data['diskSizeGB'], 'Number');
            }
            if (data.hasOwnProperty('managedDisk')) {
                obj['managedDisk'] = SubResource.constructFromObject(data['managedDisk']);
            }
            if (data.hasOwnProperty('osState')) {
                obj['osState'] = ApiClient.convertToType(data['osState'], 'String');
            }
            if (data.hasOwnProperty('osType')) {
                obj['osType'] = ApiClient.convertToType(data['osType'], 'String');
            }
            if (data.hasOwnProperty('snapshot')) {
                obj['snapshot'] = SubResource.constructFromObject(data['snapshot']);
            }
            if (data.hasOwnProperty('storageAccountType')) {
                obj['storageAccountType'] = StorageAccountType.constructFromObject(data['storageAccountType']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageOSDisk</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageOSDisk</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImageOSDisk.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['blobUri'] && !(typeof data['blobUri'] === 'string' || data['blobUri'] instanceof String)) {
            throw new Error("Expected the field `blobUri` to be a primitive type in the JSON string but got " + data['blobUri']);
        }
        // ensure the json data is a string
        if (data['caching'] && !(typeof data['caching'] === 'string' || data['caching'] instanceof String)) {
            throw new Error("Expected the field `caching` to be a primitive type in the JSON string but got " + data['caching']);
        }
        // validate the optional field `managedDisk`
        if (data['managedDisk']) { // data not null
          SubResource.validateJSON(data['managedDisk']);
        }
        // ensure the json data is a string
        if (data['osState'] && !(typeof data['osState'] === 'string' || data['osState'] instanceof String)) {
            throw new Error("Expected the field `osState` to be a primitive type in the JSON string but got " + data['osState']);
        }
        // ensure the json data is a string
        if (data['osType'] && !(typeof data['osType'] === 'string' || data['osType'] instanceof String)) {
            throw new Error("Expected the field `osType` to be a primitive type in the JSON string but got " + data['osType']);
        }
        // validate the optional field `snapshot`
        if (data['snapshot']) { // data not null
          SubResource.validateJSON(data['snapshot']);
        }

        return true;
    }


}

ImageOSDisk.RequiredProperties = ["osState", "osType"];

/**
 * The Virtual Hard Disk.
 * @member {String} blobUri
 */
ImageOSDisk.prototype['blobUri'] = undefined;

/**
 * Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**
 * @member {module:model/ImageOSDisk.CachingEnum} caching
 */
ImageOSDisk.prototype['caching'] = undefined;

/**
 * Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
 * @member {Number} diskSizeGB
 */
ImageOSDisk.prototype['diskSizeGB'] = undefined;

/**
 * @member {module:model/SubResource} managedDisk
 */
ImageOSDisk.prototype['managedDisk'] = undefined;

/**
 * The OS State.
 * @member {module:model/ImageOSDisk.OsStateEnum} osState
 */
ImageOSDisk.prototype['osState'] = undefined;

/**
 * This property allows you to specify the type of the OS that is included in the disk if creating a VM from a custom image. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**
 * @member {module:model/ImageOSDisk.OsTypeEnum} osType
 */
ImageOSDisk.prototype['osType'] = undefined;

/**
 * @member {module:model/SubResource} snapshot
 */
ImageOSDisk.prototype['snapshot'] = undefined;

/**
 * @member {module:model/StorageAccountType} storageAccountType
 */
ImageOSDisk.prototype['storageAccountType'] = undefined;





/**
 * Allowed values for the <code>caching</code> property.
 * @enum {String}
 * @readonly
 */
ImageOSDisk['CachingEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "ReadOnly"
     * @const
     */
    "ReadOnly": "ReadOnly",

    /**
     * value: "ReadWrite"
     * @const
     */
    "ReadWrite": "ReadWrite"
};


/**
 * Allowed values for the <code>osState</code> property.
 * @enum {String}
 * @readonly
 */
ImageOSDisk['OsStateEnum'] = {

    /**
     * value: "Generalized"
     * @const
     */
    "Generalized": "Generalized",

    /**
     * value: "Specialized"
     * @const
     */
    "Specialized": "Specialized"
};


/**
 * Allowed values for the <code>osType</code> property.
 * @enum {String}
 * @readonly
 */
ImageOSDisk['OsTypeEnum'] = {

    /**
     * value: "Windows"
     * @const
     */
    "Windows": "Windows",

    /**
     * value: "Linux"
     * @const
     */
    "Linux": "Linux"
};



export default ImageOSDisk;

