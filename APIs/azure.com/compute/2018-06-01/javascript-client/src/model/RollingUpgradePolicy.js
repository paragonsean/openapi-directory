/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RollingUpgradePolicy model module.
 * @module model/RollingUpgradePolicy
 * @version 2018-06-01
 */
class RollingUpgradePolicy {
    /**
     * Constructs a new <code>RollingUpgradePolicy</code>.
     * The configuration parameters used while performing a rolling upgrade.
     * @alias module:model/RollingUpgradePolicy
     */
    constructor() { 
        
        RollingUpgradePolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RollingUpgradePolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RollingUpgradePolicy} obj Optional instance to populate.
     * @return {module:model/RollingUpgradePolicy} The populated <code>RollingUpgradePolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RollingUpgradePolicy();

            if (data.hasOwnProperty('maxBatchInstancePercent')) {
                obj['maxBatchInstancePercent'] = ApiClient.convertToType(data['maxBatchInstancePercent'], 'Number');
            }
            if (data.hasOwnProperty('maxUnhealthyInstancePercent')) {
                obj['maxUnhealthyInstancePercent'] = ApiClient.convertToType(data['maxUnhealthyInstancePercent'], 'Number');
            }
            if (data.hasOwnProperty('maxUnhealthyUpgradedInstancePercent')) {
                obj['maxUnhealthyUpgradedInstancePercent'] = ApiClient.convertToType(data['maxUnhealthyUpgradedInstancePercent'], 'Number');
            }
            if (data.hasOwnProperty('pauseTimeBetweenBatches')) {
                obj['pauseTimeBetweenBatches'] = ApiClient.convertToType(data['pauseTimeBetweenBatches'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RollingUpgradePolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RollingUpgradePolicy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['pauseTimeBetweenBatches'] && !(typeof data['pauseTimeBetweenBatches'] === 'string' || data['pauseTimeBetweenBatches'] instanceof String)) {
            throw new Error("Expected the field `pauseTimeBetweenBatches` to be a primitive type in the JSON string but got " + data['pauseTimeBetweenBatches']);
        }

        return true;
    }


}



/**
 * The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. The default value for this parameter is 20%.
 * @member {Number} maxBatchInstancePercent
 */
RollingUpgradePolicy.prototype['maxBatchInstancePercent'] = undefined;

/**
 * The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. The default value for this parameter is 20%.
 * @member {Number} maxUnhealthyInstancePercent
 */
RollingUpgradePolicy.prototype['maxUnhealthyInstancePercent'] = undefined;

/**
 * The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The default value for this parameter is 20%.
 * @member {Number} maxUnhealthyUpgradedInstancePercent
 */
RollingUpgradePolicy.prototype['maxUnhealthyUpgradedInstancePercent'] = undefined;

/**
 * The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format. The default value is 0 seconds (PT0S).
 * @member {String} pauseTimeBetweenBatches
 */
RollingUpgradePolicy.prototype['pauseTimeBetweenBatches'] = undefined;






export default RollingUpgradePolicy;

