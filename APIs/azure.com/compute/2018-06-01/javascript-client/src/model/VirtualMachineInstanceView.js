/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BootDiagnosticsInstanceView from './BootDiagnosticsInstanceView';
import DiskInstanceView from './DiskInstanceView';
import InstanceViewStatus from './InstanceViewStatus';
import MaintenanceRedeployStatus from './MaintenanceRedeployStatus';
import VirtualMachineAgentInstanceView from './VirtualMachineAgentInstanceView';
import VirtualMachineExtensionInstanceView from './VirtualMachineExtensionInstanceView';

/**
 * The VirtualMachineInstanceView model module.
 * @module model/VirtualMachineInstanceView
 * @version 2018-06-01
 */
class VirtualMachineInstanceView {
    /**
     * Constructs a new <code>VirtualMachineInstanceView</code>.
     * The instance view of a virtual machine.
     * @alias module:model/VirtualMachineInstanceView
     */
    constructor() { 
        
        VirtualMachineInstanceView.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VirtualMachineInstanceView</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VirtualMachineInstanceView} obj Optional instance to populate.
     * @return {module:model/VirtualMachineInstanceView} The populated <code>VirtualMachineInstanceView</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VirtualMachineInstanceView();

            if (data.hasOwnProperty('bootDiagnostics')) {
                obj['bootDiagnostics'] = BootDiagnosticsInstanceView.constructFromObject(data['bootDiagnostics']);
            }
            if (data.hasOwnProperty('computerName')) {
                obj['computerName'] = ApiClient.convertToType(data['computerName'], 'String');
            }
            if (data.hasOwnProperty('disks')) {
                obj['disks'] = ApiClient.convertToType(data['disks'], [DiskInstanceView]);
            }
            if (data.hasOwnProperty('extensions')) {
                obj['extensions'] = ApiClient.convertToType(data['extensions'], [VirtualMachineExtensionInstanceView]);
            }
            if (data.hasOwnProperty('maintenanceRedeployStatus')) {
                obj['maintenanceRedeployStatus'] = MaintenanceRedeployStatus.constructFromObject(data['maintenanceRedeployStatus']);
            }
            if (data.hasOwnProperty('osName')) {
                obj['osName'] = ApiClient.convertToType(data['osName'], 'String');
            }
            if (data.hasOwnProperty('osVersion')) {
                obj['osVersion'] = ApiClient.convertToType(data['osVersion'], 'String');
            }
            if (data.hasOwnProperty('platformFaultDomain')) {
                obj['platformFaultDomain'] = ApiClient.convertToType(data['platformFaultDomain'], 'Number');
            }
            if (data.hasOwnProperty('platformUpdateDomain')) {
                obj['platformUpdateDomain'] = ApiClient.convertToType(data['platformUpdateDomain'], 'Number');
            }
            if (data.hasOwnProperty('rdpThumbPrint')) {
                obj['rdpThumbPrint'] = ApiClient.convertToType(data['rdpThumbPrint'], 'String');
            }
            if (data.hasOwnProperty('statuses')) {
                obj['statuses'] = ApiClient.convertToType(data['statuses'], [InstanceViewStatus]);
            }
            if (data.hasOwnProperty('vmAgent')) {
                obj['vmAgent'] = VirtualMachineAgentInstanceView.constructFromObject(data['vmAgent']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VirtualMachineInstanceView</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VirtualMachineInstanceView</code>.
     */
    static validateJSON(data) {
        // validate the optional field `bootDiagnostics`
        if (data['bootDiagnostics']) { // data not null
          BootDiagnosticsInstanceView.validateJSON(data['bootDiagnostics']);
        }
        // ensure the json data is a string
        if (data['computerName'] && !(typeof data['computerName'] === 'string' || data['computerName'] instanceof String)) {
            throw new Error("Expected the field `computerName` to be a primitive type in the JSON string but got " + data['computerName']);
        }
        if (data['disks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['disks'])) {
                throw new Error("Expected the field `disks` to be an array in the JSON data but got " + data['disks']);
            }
            // validate the optional field `disks` (array)
            for (const item of data['disks']) {
                DiskInstanceView.validateJSON(item);
            };
        }
        if (data['extensions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['extensions'])) {
                throw new Error("Expected the field `extensions` to be an array in the JSON data but got " + data['extensions']);
            }
            // validate the optional field `extensions` (array)
            for (const item of data['extensions']) {
                VirtualMachineExtensionInstanceView.validateJSON(item);
            };
        }
        // validate the optional field `maintenanceRedeployStatus`
        if (data['maintenanceRedeployStatus']) { // data not null
          MaintenanceRedeployStatus.validateJSON(data['maintenanceRedeployStatus']);
        }
        // ensure the json data is a string
        if (data['osName'] && !(typeof data['osName'] === 'string' || data['osName'] instanceof String)) {
            throw new Error("Expected the field `osName` to be a primitive type in the JSON string but got " + data['osName']);
        }
        // ensure the json data is a string
        if (data['osVersion'] && !(typeof data['osVersion'] === 'string' || data['osVersion'] instanceof String)) {
            throw new Error("Expected the field `osVersion` to be a primitive type in the JSON string but got " + data['osVersion']);
        }
        // ensure the json data is a string
        if (data['rdpThumbPrint'] && !(typeof data['rdpThumbPrint'] === 'string' || data['rdpThumbPrint'] instanceof String)) {
            throw new Error("Expected the field `rdpThumbPrint` to be a primitive type in the JSON string but got " + data['rdpThumbPrint']);
        }
        if (data['statuses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['statuses'])) {
                throw new Error("Expected the field `statuses` to be an array in the JSON data but got " + data['statuses']);
            }
            // validate the optional field `statuses` (array)
            for (const item of data['statuses']) {
                InstanceViewStatus.validateJSON(item);
            };
        }
        // validate the optional field `vmAgent`
        if (data['vmAgent']) { // data not null
          VirtualMachineAgentInstanceView.validateJSON(data['vmAgent']);
        }

        return true;
    }


}



/**
 * @member {module:model/BootDiagnosticsInstanceView} bootDiagnostics
 */
VirtualMachineInstanceView.prototype['bootDiagnostics'] = undefined;

/**
 * The computer name assigned to the virtual machine.
 * @member {String} computerName
 */
VirtualMachineInstanceView.prototype['computerName'] = undefined;

/**
 * The virtual machine disk information.
 * @member {Array.<module:model/DiskInstanceView>} disks
 */
VirtualMachineInstanceView.prototype['disks'] = undefined;

/**
 * The extensions information.
 * @member {Array.<module:model/VirtualMachineExtensionInstanceView>} extensions
 */
VirtualMachineInstanceView.prototype['extensions'] = undefined;

/**
 * @member {module:model/MaintenanceRedeployStatus} maintenanceRedeployStatus
 */
VirtualMachineInstanceView.prototype['maintenanceRedeployStatus'] = undefined;

/**
 * The Operating System running on the virtual machine.
 * @member {String} osName
 */
VirtualMachineInstanceView.prototype['osName'] = undefined;

/**
 * The version of Operating System running on the virtual machine.
 * @member {String} osVersion
 */
VirtualMachineInstanceView.prototype['osVersion'] = undefined;

/**
 * Specifies the fault domain of the virtual machine.
 * @member {Number} platformFaultDomain
 */
VirtualMachineInstanceView.prototype['platformFaultDomain'] = undefined;

/**
 * Specifies the update domain of the virtual machine.
 * @member {Number} platformUpdateDomain
 */
VirtualMachineInstanceView.prototype['platformUpdateDomain'] = undefined;

/**
 * The Remote desktop certificate thumbprint.
 * @member {String} rdpThumbPrint
 */
VirtualMachineInstanceView.prototype['rdpThumbPrint'] = undefined;

/**
 * The resource status information.
 * @member {Array.<module:model/InstanceViewStatus>} statuses
 */
VirtualMachineInstanceView.prototype['statuses'] = undefined;

/**
 * @member {module:model/VirtualMachineAgentInstanceView} vmAgent
 */
VirtualMachineInstanceView.prototype['vmAgent'] = undefined;






export default VirtualMachineInstanceView;

