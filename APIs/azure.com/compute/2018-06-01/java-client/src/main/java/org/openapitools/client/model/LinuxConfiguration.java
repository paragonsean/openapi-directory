/*
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SshConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the Linux operating system settings on the virtual machine. &lt;br&gt;&lt;br&gt;For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-endorsed-distros?toc&#x3D;%2fazure%2fvirtual-machines%2flinux%2ftoc.json) &lt;br&gt;&lt;br&gt; For running non-endorsed distributions, see [Information for Non-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-create-upload-generic?toc&#x3D;%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:49:36.564072-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LinuxConfiguration {
  public static final String SERIALIZED_NAME_DISABLE_PASSWORD_AUTHENTICATION = "disablePasswordAuthentication";
  @SerializedName(SERIALIZED_NAME_DISABLE_PASSWORD_AUTHENTICATION)
  private Boolean disablePasswordAuthentication;

  public static final String SERIALIZED_NAME_PROVISION_V_M_AGENT = "provisionVMAgent";
  @SerializedName(SERIALIZED_NAME_PROVISION_V_M_AGENT)
  private Boolean provisionVMAgent;

  public static final String SERIALIZED_NAME_SSH = "ssh";
  @SerializedName(SERIALIZED_NAME_SSH)
  private SshConfiguration ssh;

  public LinuxConfiguration() {
  }

  public LinuxConfiguration disablePasswordAuthentication(Boolean disablePasswordAuthentication) {
    this.disablePasswordAuthentication = disablePasswordAuthentication;
    return this;
  }

  /**
   * Specifies whether password authentication should be disabled.
   * @return disablePasswordAuthentication
   */
  @javax.annotation.Nullable
  public Boolean getDisablePasswordAuthentication() {
    return disablePasswordAuthentication;
  }

  public void setDisablePasswordAuthentication(Boolean disablePasswordAuthentication) {
    this.disablePasswordAuthentication = disablePasswordAuthentication;
  }


  public LinuxConfiguration provisionVMAgent(Boolean provisionVMAgent) {
    this.provisionVMAgent = provisionVMAgent;
    return this;
  }

  /**
   * Indicates whether virtual machine agent should be provisioned on the virtual machine. &lt;br&gt;&lt;br&gt; When this property is not specified in the request body, default behavior is to set it to true.  This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later.
   * @return provisionVMAgent
   */
  @javax.annotation.Nullable
  public Boolean getProvisionVMAgent() {
    return provisionVMAgent;
  }

  public void setProvisionVMAgent(Boolean provisionVMAgent) {
    this.provisionVMAgent = provisionVMAgent;
  }


  public LinuxConfiguration ssh(SshConfiguration ssh) {
    this.ssh = ssh;
    return this;
  }

  /**
   * Get ssh
   * @return ssh
   */
  @javax.annotation.Nullable
  public SshConfiguration getSsh() {
    return ssh;
  }

  public void setSsh(SshConfiguration ssh) {
    this.ssh = ssh;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LinuxConfiguration linuxConfiguration = (LinuxConfiguration) o;
    return Objects.equals(this.disablePasswordAuthentication, linuxConfiguration.disablePasswordAuthentication) &&
        Objects.equals(this.provisionVMAgent, linuxConfiguration.provisionVMAgent) &&
        Objects.equals(this.ssh, linuxConfiguration.ssh);
  }

  @Override
  public int hashCode() {
    return Objects.hash(disablePasswordAuthentication, provisionVMAgent, ssh);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LinuxConfiguration {\n");
    sb.append("    disablePasswordAuthentication: ").append(toIndentedString(disablePasswordAuthentication)).append("\n");
    sb.append("    provisionVMAgent: ").append(toIndentedString(provisionVMAgent)).append("\n");
    sb.append("    ssh: ").append(toIndentedString(ssh)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("disablePasswordAuthentication");
    openapiFields.add("provisionVMAgent");
    openapiFields.add("ssh");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LinuxConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LinuxConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LinuxConfiguration is not found in the empty JSON string", LinuxConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LinuxConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LinuxConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ssh`
      if (jsonObj.get("ssh") != null && !jsonObj.get("ssh").isJsonNull()) {
        SshConfiguration.validateJsonElement(jsonObj.get("ssh"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LinuxConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LinuxConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LinuxConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LinuxConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<LinuxConfiguration>() {
           @Override
           public void write(JsonWriter out, LinuxConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LinuxConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LinuxConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LinuxConfiguration
   * @throws IOException if the JSON string is invalid with respect to LinuxConfiguration
   */
  public static LinuxConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LinuxConfiguration.class);
  }

  /**
   * Convert an instance of LinuxConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

