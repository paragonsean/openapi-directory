/*
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ApiError;
import org.openapitools.client.model.ImageReference;
import org.openapitools.client.model.RollbackStatusInfo;
import org.openapitools.client.model.RollingUpgradeProgressInfo;
import org.openapitools.client.model.UpgradeOperationHistoryStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes each OS upgrade on the Virtual Machine Scale Set.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:49:36.564072-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpgradeOperationHistoricalStatusInfoProperties {
  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private ApiError error;

  public static final String SERIALIZED_NAME_PROGRESS = "progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  private RollingUpgradeProgressInfo progress;

  public static final String SERIALIZED_NAME_ROLLBACK_INFO = "rollbackInfo";
  @SerializedName(SERIALIZED_NAME_ROLLBACK_INFO)
  private RollbackStatusInfo rollbackInfo;

  public static final String SERIALIZED_NAME_RUNNING_STATUS = "runningStatus";
  @SerializedName(SERIALIZED_NAME_RUNNING_STATUS)
  private UpgradeOperationHistoryStatus runningStatus;

  /**
   * Invoker of the Upgrade Operation
   */
  @JsonAdapter(StartedByEnum.Adapter.class)
  public enum StartedByEnum {
    UNKNOWN("Unknown"),
    
    USER("User"),
    
    PLATFORM("Platform");

    private String value;

    StartedByEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StartedByEnum fromValue(String value) {
      for (StartedByEnum b : StartedByEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StartedByEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StartedByEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StartedByEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StartedByEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StartedByEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STARTED_BY = "startedBy";
  @SerializedName(SERIALIZED_NAME_STARTED_BY)
  private StartedByEnum startedBy;

  public static final String SERIALIZED_NAME_TARGET_IMAGE_REFERENCE = "targetImageReference";
  @SerializedName(SERIALIZED_NAME_TARGET_IMAGE_REFERENCE)
  private ImageReference targetImageReference;

  public UpgradeOperationHistoricalStatusInfoProperties() {
  }

  public UpgradeOperationHistoricalStatusInfoProperties(
     StartedByEnum startedBy
  ) {
    this();
    this.startedBy = startedBy;
  }

  public UpgradeOperationHistoricalStatusInfoProperties error(ApiError error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public ApiError getError() {
    return error;
  }

  public void setError(ApiError error) {
    this.error = error;
  }


  public UpgradeOperationHistoricalStatusInfoProperties progress(RollingUpgradeProgressInfo progress) {
    this.progress = progress;
    return this;
  }

  /**
   * Get progress
   * @return progress
   */
  @javax.annotation.Nullable
  public RollingUpgradeProgressInfo getProgress() {
    return progress;
  }

  public void setProgress(RollingUpgradeProgressInfo progress) {
    this.progress = progress;
  }


  public UpgradeOperationHistoricalStatusInfoProperties rollbackInfo(RollbackStatusInfo rollbackInfo) {
    this.rollbackInfo = rollbackInfo;
    return this;
  }

  /**
   * Get rollbackInfo
   * @return rollbackInfo
   */
  @javax.annotation.Nullable
  public RollbackStatusInfo getRollbackInfo() {
    return rollbackInfo;
  }

  public void setRollbackInfo(RollbackStatusInfo rollbackInfo) {
    this.rollbackInfo = rollbackInfo;
  }


  public UpgradeOperationHistoricalStatusInfoProperties runningStatus(UpgradeOperationHistoryStatus runningStatus) {
    this.runningStatus = runningStatus;
    return this;
  }

  /**
   * Get runningStatus
   * @return runningStatus
   */
  @javax.annotation.Nullable
  public UpgradeOperationHistoryStatus getRunningStatus() {
    return runningStatus;
  }

  public void setRunningStatus(UpgradeOperationHistoryStatus runningStatus) {
    this.runningStatus = runningStatus;
  }


  /**
   * Invoker of the Upgrade Operation
   * @return startedBy
   */
  @javax.annotation.Nullable
  public StartedByEnum getStartedBy() {
    return startedBy;
  }



  public UpgradeOperationHistoricalStatusInfoProperties targetImageReference(ImageReference targetImageReference) {
    this.targetImageReference = targetImageReference;
    return this;
  }

  /**
   * Get targetImageReference
   * @return targetImageReference
   */
  @javax.annotation.Nullable
  public ImageReference getTargetImageReference() {
    return targetImageReference;
  }

  public void setTargetImageReference(ImageReference targetImageReference) {
    this.targetImageReference = targetImageReference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpgradeOperationHistoricalStatusInfoProperties upgradeOperationHistoricalStatusInfoProperties = (UpgradeOperationHistoricalStatusInfoProperties) o;
    return Objects.equals(this.error, upgradeOperationHistoricalStatusInfoProperties.error) &&
        Objects.equals(this.progress, upgradeOperationHistoricalStatusInfoProperties.progress) &&
        Objects.equals(this.rollbackInfo, upgradeOperationHistoricalStatusInfoProperties.rollbackInfo) &&
        Objects.equals(this.runningStatus, upgradeOperationHistoricalStatusInfoProperties.runningStatus) &&
        Objects.equals(this.startedBy, upgradeOperationHistoricalStatusInfoProperties.startedBy) &&
        Objects.equals(this.targetImageReference, upgradeOperationHistoricalStatusInfoProperties.targetImageReference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(error, progress, rollbackInfo, runningStatus, startedBy, targetImageReference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpgradeOperationHistoricalStatusInfoProperties {\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    rollbackInfo: ").append(toIndentedString(rollbackInfo)).append("\n");
    sb.append("    runningStatus: ").append(toIndentedString(runningStatus)).append("\n");
    sb.append("    startedBy: ").append(toIndentedString(startedBy)).append("\n");
    sb.append("    targetImageReference: ").append(toIndentedString(targetImageReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("error");
    openapiFields.add("progress");
    openapiFields.add("rollbackInfo");
    openapiFields.add("runningStatus");
    openapiFields.add("startedBy");
    openapiFields.add("targetImageReference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpgradeOperationHistoricalStatusInfoProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpgradeOperationHistoricalStatusInfoProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpgradeOperationHistoricalStatusInfoProperties is not found in the empty JSON string", UpgradeOperationHistoricalStatusInfoProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpgradeOperationHistoricalStatusInfoProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpgradeOperationHistoricalStatusInfoProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `error`
      if (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) {
        ApiError.validateJsonElement(jsonObj.get("error"));
      }
      // validate the optional field `progress`
      if (jsonObj.get("progress") != null && !jsonObj.get("progress").isJsonNull()) {
        RollingUpgradeProgressInfo.validateJsonElement(jsonObj.get("progress"));
      }
      // validate the optional field `rollbackInfo`
      if (jsonObj.get("rollbackInfo") != null && !jsonObj.get("rollbackInfo").isJsonNull()) {
        RollbackStatusInfo.validateJsonElement(jsonObj.get("rollbackInfo"));
      }
      // validate the optional field `runningStatus`
      if (jsonObj.get("runningStatus") != null && !jsonObj.get("runningStatus").isJsonNull()) {
        UpgradeOperationHistoryStatus.validateJsonElement(jsonObj.get("runningStatus"));
      }
      if ((jsonObj.get("startedBy") != null && !jsonObj.get("startedBy").isJsonNull()) && !jsonObj.get("startedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startedBy").toString()));
      }
      // validate the optional field `startedBy`
      if (jsonObj.get("startedBy") != null && !jsonObj.get("startedBy").isJsonNull()) {
        StartedByEnum.validateJsonElement(jsonObj.get("startedBy"));
      }
      // validate the optional field `targetImageReference`
      if (jsonObj.get("targetImageReference") != null && !jsonObj.get("targetImageReference").isJsonNull()) {
        ImageReference.validateJsonElement(jsonObj.get("targetImageReference"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpgradeOperationHistoricalStatusInfoProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpgradeOperationHistoricalStatusInfoProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpgradeOperationHistoricalStatusInfoProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpgradeOperationHistoricalStatusInfoProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<UpgradeOperationHistoricalStatusInfoProperties>() {
           @Override
           public void write(JsonWriter out, UpgradeOperationHistoricalStatusInfoProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpgradeOperationHistoricalStatusInfoProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpgradeOperationHistoricalStatusInfoProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpgradeOperationHistoricalStatusInfoProperties
   * @throws IOException if the JSON string is invalid with respect to UpgradeOperationHistoricalStatusInfoProperties
   */
  public static UpgradeOperationHistoricalStatusInfoProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpgradeOperationHistoricalStatusInfoProperties.class);
  }

  /**
   * Convert an instance of UpgradeOperationHistoricalStatusInfoProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

