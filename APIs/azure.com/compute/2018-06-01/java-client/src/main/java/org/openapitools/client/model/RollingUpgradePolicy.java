/*
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The configuration parameters used while performing a rolling upgrade.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:49:36.564072-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RollingUpgradePolicy {
  public static final String SERIALIZED_NAME_MAX_BATCH_INSTANCE_PERCENT = "maxBatchInstancePercent";
  @SerializedName(SERIALIZED_NAME_MAX_BATCH_INSTANCE_PERCENT)
  private Integer maxBatchInstancePercent;

  public static final String SERIALIZED_NAME_MAX_UNHEALTHY_INSTANCE_PERCENT = "maxUnhealthyInstancePercent";
  @SerializedName(SERIALIZED_NAME_MAX_UNHEALTHY_INSTANCE_PERCENT)
  private Integer maxUnhealthyInstancePercent;

  public static final String SERIALIZED_NAME_MAX_UNHEALTHY_UPGRADED_INSTANCE_PERCENT = "maxUnhealthyUpgradedInstancePercent";
  @SerializedName(SERIALIZED_NAME_MAX_UNHEALTHY_UPGRADED_INSTANCE_PERCENT)
  private Integer maxUnhealthyUpgradedInstancePercent;

  public static final String SERIALIZED_NAME_PAUSE_TIME_BETWEEN_BATCHES = "pauseTimeBetweenBatches";
  @SerializedName(SERIALIZED_NAME_PAUSE_TIME_BETWEEN_BATCHES)
  private String pauseTimeBetweenBatches;

  public RollingUpgradePolicy() {
  }

  public RollingUpgradePolicy maxBatchInstancePercent(Integer maxBatchInstancePercent) {
    this.maxBatchInstancePercent = maxBatchInstancePercent;
    return this;
  }

  /**
   * The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. The default value for this parameter is 20%.
   * minimum: 5
   * maximum: 100
   * @return maxBatchInstancePercent
   */
  @javax.annotation.Nullable
  public Integer getMaxBatchInstancePercent() {
    return maxBatchInstancePercent;
  }

  public void setMaxBatchInstancePercent(Integer maxBatchInstancePercent) {
    this.maxBatchInstancePercent = maxBatchInstancePercent;
  }


  public RollingUpgradePolicy maxUnhealthyInstancePercent(Integer maxUnhealthyInstancePercent) {
    this.maxUnhealthyInstancePercent = maxUnhealthyInstancePercent;
    return this;
  }

  /**
   * The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. The default value for this parameter is 20%.
   * minimum: 5
   * maximum: 100
   * @return maxUnhealthyInstancePercent
   */
  @javax.annotation.Nullable
  public Integer getMaxUnhealthyInstancePercent() {
    return maxUnhealthyInstancePercent;
  }

  public void setMaxUnhealthyInstancePercent(Integer maxUnhealthyInstancePercent) {
    this.maxUnhealthyInstancePercent = maxUnhealthyInstancePercent;
  }


  public RollingUpgradePolicy maxUnhealthyUpgradedInstancePercent(Integer maxUnhealthyUpgradedInstancePercent) {
    this.maxUnhealthyUpgradedInstancePercent = maxUnhealthyUpgradedInstancePercent;
    return this;
  }

  /**
   * The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The default value for this parameter is 20%.
   * minimum: 0
   * maximum: 100
   * @return maxUnhealthyUpgradedInstancePercent
   */
  @javax.annotation.Nullable
  public Integer getMaxUnhealthyUpgradedInstancePercent() {
    return maxUnhealthyUpgradedInstancePercent;
  }

  public void setMaxUnhealthyUpgradedInstancePercent(Integer maxUnhealthyUpgradedInstancePercent) {
    this.maxUnhealthyUpgradedInstancePercent = maxUnhealthyUpgradedInstancePercent;
  }


  public RollingUpgradePolicy pauseTimeBetweenBatches(String pauseTimeBetweenBatches) {
    this.pauseTimeBetweenBatches = pauseTimeBetweenBatches;
    return this;
  }

  /**
   * The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format. The default value is 0 seconds (PT0S).
   * @return pauseTimeBetweenBatches
   */
  @javax.annotation.Nullable
  public String getPauseTimeBetweenBatches() {
    return pauseTimeBetweenBatches;
  }

  public void setPauseTimeBetweenBatches(String pauseTimeBetweenBatches) {
    this.pauseTimeBetweenBatches = pauseTimeBetweenBatches;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RollingUpgradePolicy rollingUpgradePolicy = (RollingUpgradePolicy) o;
    return Objects.equals(this.maxBatchInstancePercent, rollingUpgradePolicy.maxBatchInstancePercent) &&
        Objects.equals(this.maxUnhealthyInstancePercent, rollingUpgradePolicy.maxUnhealthyInstancePercent) &&
        Objects.equals(this.maxUnhealthyUpgradedInstancePercent, rollingUpgradePolicy.maxUnhealthyUpgradedInstancePercent) &&
        Objects.equals(this.pauseTimeBetweenBatches, rollingUpgradePolicy.pauseTimeBetweenBatches);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxBatchInstancePercent, maxUnhealthyInstancePercent, maxUnhealthyUpgradedInstancePercent, pauseTimeBetweenBatches);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RollingUpgradePolicy {\n");
    sb.append("    maxBatchInstancePercent: ").append(toIndentedString(maxBatchInstancePercent)).append("\n");
    sb.append("    maxUnhealthyInstancePercent: ").append(toIndentedString(maxUnhealthyInstancePercent)).append("\n");
    sb.append("    maxUnhealthyUpgradedInstancePercent: ").append(toIndentedString(maxUnhealthyUpgradedInstancePercent)).append("\n");
    sb.append("    pauseTimeBetweenBatches: ").append(toIndentedString(pauseTimeBetweenBatches)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("maxBatchInstancePercent");
    openapiFields.add("maxUnhealthyInstancePercent");
    openapiFields.add("maxUnhealthyUpgradedInstancePercent");
    openapiFields.add("pauseTimeBetweenBatches");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RollingUpgradePolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RollingUpgradePolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RollingUpgradePolicy is not found in the empty JSON string", RollingUpgradePolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RollingUpgradePolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RollingUpgradePolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("pauseTimeBetweenBatches") != null && !jsonObj.get("pauseTimeBetweenBatches").isJsonNull()) && !jsonObj.get("pauseTimeBetweenBatches").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pauseTimeBetweenBatches` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pauseTimeBetweenBatches").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RollingUpgradePolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RollingUpgradePolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RollingUpgradePolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RollingUpgradePolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<RollingUpgradePolicy>() {
           @Override
           public void write(JsonWriter out, RollingUpgradePolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RollingUpgradePolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RollingUpgradePolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RollingUpgradePolicy
   * @throws IOException if the JSON string is invalid with respect to RollingUpgradePolicy
   */
  public static RollingUpgradePolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RollingUpgradePolicy.class);
  }

  /**
   * Convert an instance of RollingUpgradePolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

