/*
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.VirtualMachineImage;
import org.openapitools.client.model.VirtualMachineImageResource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VirtualMachineImagesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VirtualMachineImagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VirtualMachineImagesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for virtualMachineImagesGet
     * @param location The name of a supported Azure region. (required)
     * @param publisherName A valid image publisher. (required)
     * @param offer A valid image publisher offer. (required)
     * @param skus A valid image SKU. (required)
     * @param version A valid image SKU version. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualMachineImagesGetCall(String location, String publisherName, String offer, String skus, String version, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmimage/offers/{offer}/skus/{skus}/versions/{version}"
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "publisherName" + "}", localVarApiClient.escapeString(publisherName.toString()))
            .replace("{" + "offer" + "}", localVarApiClient.escapeString(offer.toString()))
            .replace("{" + "skus" + "}", localVarApiClient.escapeString(skus.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualMachineImagesGetValidateBeforeCall(String location, String publisherName, String offer, String skus, String version, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling virtualMachineImagesGet(Async)");
        }

        // verify the required parameter 'publisherName' is set
        if (publisherName == null) {
            throw new ApiException("Missing the required parameter 'publisherName' when calling virtualMachineImagesGet(Async)");
        }

        // verify the required parameter 'offer' is set
        if (offer == null) {
            throw new ApiException("Missing the required parameter 'offer' when calling virtualMachineImagesGet(Async)");
        }

        // verify the required parameter 'skus' is set
        if (skus == null) {
            throw new ApiException("Missing the required parameter 'skus' when calling virtualMachineImagesGet(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling virtualMachineImagesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualMachineImagesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualMachineImagesGet(Async)");
        }

        return virtualMachineImagesGetCall(location, publisherName, offer, skus, version, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets a virtual machine image.
     * @param location The name of a supported Azure region. (required)
     * @param publisherName A valid image publisher. (required)
     * @param offer A valid image publisher offer. (required)
     * @param skus A valid image SKU. (required)
     * @param version A valid image SKU version. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return VirtualMachineImage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VirtualMachineImage virtualMachineImagesGet(String location, String publisherName, String offer, String skus, String version, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<VirtualMachineImage> localVarResp = virtualMachineImagesGetWithHttpInfo(location, publisherName, offer, skus, version, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a virtual machine image.
     * @param location The name of a supported Azure region. (required)
     * @param publisherName A valid image publisher. (required)
     * @param offer A valid image publisher offer. (required)
     * @param skus A valid image SKU. (required)
     * @param version A valid image SKU version. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;VirtualMachineImage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualMachineImage> virtualMachineImagesGetWithHttpInfo(String location, String publisherName, String offer, String skus, String version, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = virtualMachineImagesGetValidateBeforeCall(location, publisherName, offer, skus, version, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<VirtualMachineImage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a virtual machine image.
     * @param location The name of a supported Azure region. (required)
     * @param publisherName A valid image publisher. (required)
     * @param offer A valid image publisher offer. (required)
     * @param skus A valid image SKU. (required)
     * @param version A valid image SKU version. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualMachineImagesGetAsync(String location, String publisherName, String offer, String skus, String version, String apiVersion, String subscriptionId, final ApiCallback<VirtualMachineImage> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualMachineImagesGetValidateBeforeCall(location, publisherName, offer, skus, version, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<VirtualMachineImage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualMachineImagesList
     * @param location The name of a supported Azure region. (required)
     * @param publisherName A valid image publisher. (required)
     * @param offer A valid image publisher offer. (required)
     * @param skus A valid image SKU. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $orderby  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualMachineImagesListCall(String location, String publisherName, String offer, String skus, String apiVersion, String subscriptionId, String $filter, Integer $top, String $orderby, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmimage/offers/{offer}/skus/{skus}/versions"
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "publisherName" + "}", localVarApiClient.escapeString(publisherName.toString()))
            .replace("{" + "offer" + "}", localVarApiClient.escapeString(offer.toString()))
            .replace("{" + "skus" + "}", localVarApiClient.escapeString(skus.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualMachineImagesListValidateBeforeCall(String location, String publisherName, String offer, String skus, String apiVersion, String subscriptionId, String $filter, Integer $top, String $orderby, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling virtualMachineImagesList(Async)");
        }

        // verify the required parameter 'publisherName' is set
        if (publisherName == null) {
            throw new ApiException("Missing the required parameter 'publisherName' when calling virtualMachineImagesList(Async)");
        }

        // verify the required parameter 'offer' is set
        if (offer == null) {
            throw new ApiException("Missing the required parameter 'offer' when calling virtualMachineImagesList(Async)");
        }

        // verify the required parameter 'skus' is set
        if (skus == null) {
            throw new ApiException("Missing the required parameter 'skus' when calling virtualMachineImagesList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualMachineImagesList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualMachineImagesList(Async)");
        }

        return virtualMachineImagesListCall(location, publisherName, offer, skus, apiVersion, subscriptionId, $filter, $top, $orderby, _callback);

    }

    /**
     * 
     * Gets a list of all virtual machine image versions for the specified location, publisher, offer, and SKU.
     * @param location The name of a supported Azure region. (required)
     * @param publisherName A valid image publisher. (required)
     * @param offer A valid image publisher offer. (required)
     * @param skus A valid image SKU. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $orderby  (optional)
     * @return List&lt;VirtualMachineImageResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<VirtualMachineImageResource> virtualMachineImagesList(String location, String publisherName, String offer, String skus, String apiVersion, String subscriptionId, String $filter, Integer $top, String $orderby) throws ApiException {
        ApiResponse<List<VirtualMachineImageResource>> localVarResp = virtualMachineImagesListWithHttpInfo(location, publisherName, offer, skus, apiVersion, subscriptionId, $filter, $top, $orderby);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a list of all virtual machine image versions for the specified location, publisher, offer, and SKU.
     * @param location The name of a supported Azure region. (required)
     * @param publisherName A valid image publisher. (required)
     * @param offer A valid image publisher offer. (required)
     * @param skus A valid image SKU. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $orderby  (optional)
     * @return ApiResponse&lt;List&lt;VirtualMachineImageResource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<VirtualMachineImageResource>> virtualMachineImagesListWithHttpInfo(String location, String publisherName, String offer, String skus, String apiVersion, String subscriptionId, String $filter, Integer $top, String $orderby) throws ApiException {
        okhttp3.Call localVarCall = virtualMachineImagesListValidateBeforeCall(location, publisherName, offer, skus, apiVersion, subscriptionId, $filter, $top, $orderby, null);
        Type localVarReturnType = new TypeToken<List<VirtualMachineImageResource>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a list of all virtual machine image versions for the specified location, publisher, offer, and SKU.
     * @param location The name of a supported Azure region. (required)
     * @param publisherName A valid image publisher. (required)
     * @param offer A valid image publisher offer. (required)
     * @param skus A valid image SKU. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $orderby  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualMachineImagesListAsync(String location, String publisherName, String offer, String skus, String apiVersion, String subscriptionId, String $filter, Integer $top, String $orderby, final ApiCallback<List<VirtualMachineImageResource>> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualMachineImagesListValidateBeforeCall(location, publisherName, offer, skus, apiVersion, subscriptionId, $filter, $top, $orderby, _callback);
        Type localVarReturnType = new TypeToken<List<VirtualMachineImageResource>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualMachineImagesListOffers
     * @param location The name of a supported Azure region. (required)
     * @param publisherName A valid image publisher. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualMachineImagesListOffersCall(String location, String publisherName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmimage/offers"
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "publisherName" + "}", localVarApiClient.escapeString(publisherName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualMachineImagesListOffersValidateBeforeCall(String location, String publisherName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling virtualMachineImagesListOffers(Async)");
        }

        // verify the required parameter 'publisherName' is set
        if (publisherName == null) {
            throw new ApiException("Missing the required parameter 'publisherName' when calling virtualMachineImagesListOffers(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualMachineImagesListOffers(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualMachineImagesListOffers(Async)");
        }

        return virtualMachineImagesListOffersCall(location, publisherName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets a list of virtual machine image offers for the specified location and publisher.
     * @param location The name of a supported Azure region. (required)
     * @param publisherName A valid image publisher. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return List&lt;VirtualMachineImageResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<VirtualMachineImageResource> virtualMachineImagesListOffers(String location, String publisherName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<List<VirtualMachineImageResource>> localVarResp = virtualMachineImagesListOffersWithHttpInfo(location, publisherName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a list of virtual machine image offers for the specified location and publisher.
     * @param location The name of a supported Azure region. (required)
     * @param publisherName A valid image publisher. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;List&lt;VirtualMachineImageResource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<VirtualMachineImageResource>> virtualMachineImagesListOffersWithHttpInfo(String location, String publisherName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = virtualMachineImagesListOffersValidateBeforeCall(location, publisherName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<List<VirtualMachineImageResource>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a list of virtual machine image offers for the specified location and publisher.
     * @param location The name of a supported Azure region. (required)
     * @param publisherName A valid image publisher. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualMachineImagesListOffersAsync(String location, String publisherName, String apiVersion, String subscriptionId, final ApiCallback<List<VirtualMachineImageResource>> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualMachineImagesListOffersValidateBeforeCall(location, publisherName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<List<VirtualMachineImageResource>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualMachineImagesListPublishers
     * @param location The name of a supported Azure region. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualMachineImagesListPublishersCall(String location, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers"
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualMachineImagesListPublishersValidateBeforeCall(String location, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling virtualMachineImagesListPublishers(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualMachineImagesListPublishers(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualMachineImagesListPublishers(Async)");
        }

        return virtualMachineImagesListPublishersCall(location, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets a list of virtual machine image publishers for the specified Azure location.
     * @param location The name of a supported Azure region. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return List&lt;VirtualMachineImageResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<VirtualMachineImageResource> virtualMachineImagesListPublishers(String location, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<List<VirtualMachineImageResource>> localVarResp = virtualMachineImagesListPublishersWithHttpInfo(location, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a list of virtual machine image publishers for the specified Azure location.
     * @param location The name of a supported Azure region. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;List&lt;VirtualMachineImageResource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<VirtualMachineImageResource>> virtualMachineImagesListPublishersWithHttpInfo(String location, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = virtualMachineImagesListPublishersValidateBeforeCall(location, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<List<VirtualMachineImageResource>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a list of virtual machine image publishers for the specified Azure location.
     * @param location The name of a supported Azure region. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualMachineImagesListPublishersAsync(String location, String apiVersion, String subscriptionId, final ApiCallback<List<VirtualMachineImageResource>> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualMachineImagesListPublishersValidateBeforeCall(location, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<List<VirtualMachineImageResource>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualMachineImagesListSkus
     * @param location The name of a supported Azure region. (required)
     * @param publisherName A valid image publisher. (required)
     * @param offer A valid image publisher offer. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualMachineImagesListSkusCall(String location, String publisherName, String offer, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmimage/offers/{offer}/skus"
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "publisherName" + "}", localVarApiClient.escapeString(publisherName.toString()))
            .replace("{" + "offer" + "}", localVarApiClient.escapeString(offer.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualMachineImagesListSkusValidateBeforeCall(String location, String publisherName, String offer, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling virtualMachineImagesListSkus(Async)");
        }

        // verify the required parameter 'publisherName' is set
        if (publisherName == null) {
            throw new ApiException("Missing the required parameter 'publisherName' when calling virtualMachineImagesListSkus(Async)");
        }

        // verify the required parameter 'offer' is set
        if (offer == null) {
            throw new ApiException("Missing the required parameter 'offer' when calling virtualMachineImagesListSkus(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualMachineImagesListSkus(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualMachineImagesListSkus(Async)");
        }

        return virtualMachineImagesListSkusCall(location, publisherName, offer, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets a list of virtual machine image SKUs for the specified location, publisher, and offer.
     * @param location The name of a supported Azure region. (required)
     * @param publisherName A valid image publisher. (required)
     * @param offer A valid image publisher offer. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return List&lt;VirtualMachineImageResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<VirtualMachineImageResource> virtualMachineImagesListSkus(String location, String publisherName, String offer, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<List<VirtualMachineImageResource>> localVarResp = virtualMachineImagesListSkusWithHttpInfo(location, publisherName, offer, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a list of virtual machine image SKUs for the specified location, publisher, and offer.
     * @param location The name of a supported Azure region. (required)
     * @param publisherName A valid image publisher. (required)
     * @param offer A valid image publisher offer. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;List&lt;VirtualMachineImageResource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<VirtualMachineImageResource>> virtualMachineImagesListSkusWithHttpInfo(String location, String publisherName, String offer, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = virtualMachineImagesListSkusValidateBeforeCall(location, publisherName, offer, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<List<VirtualMachineImageResource>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a list of virtual machine image SKUs for the specified location, publisher, and offer.
     * @param location The name of a supported Azure region. (required)
     * @param publisherName A valid image publisher. (required)
     * @param offer A valid image publisher offer. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualMachineImagesListSkusAsync(String location, String publisherName, String offer, String apiVersion, String subscriptionId, final ApiCallback<List<VirtualMachineImageResource>> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualMachineImagesListSkusValidateBeforeCall(location, publisherName, offer, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<List<VirtualMachineImageResource>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
