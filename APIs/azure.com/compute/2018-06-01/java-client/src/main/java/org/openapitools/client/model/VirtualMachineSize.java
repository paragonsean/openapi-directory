/*
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the properties of a VM size.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:49:36.564072-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VirtualMachineSize {
  public static final String SERIALIZED_NAME_MAX_DATA_DISK_COUNT = "maxDataDiskCount";
  @SerializedName(SERIALIZED_NAME_MAX_DATA_DISK_COUNT)
  private Integer maxDataDiskCount;

  public static final String SERIALIZED_NAME_MEMORY_IN_M_B = "memoryInMB";
  @SerializedName(SERIALIZED_NAME_MEMORY_IN_M_B)
  private Integer memoryInMB;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBER_OF_CORES = "numberOfCores";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_CORES)
  private Integer numberOfCores;

  public static final String SERIALIZED_NAME_OS_DISK_SIZE_IN_M_B = "osDiskSizeInMB";
  @SerializedName(SERIALIZED_NAME_OS_DISK_SIZE_IN_M_B)
  private Integer osDiskSizeInMB;

  public static final String SERIALIZED_NAME_RESOURCE_DISK_SIZE_IN_M_B = "resourceDiskSizeInMB";
  @SerializedName(SERIALIZED_NAME_RESOURCE_DISK_SIZE_IN_M_B)
  private Integer resourceDiskSizeInMB;

  public VirtualMachineSize() {
  }

  public VirtualMachineSize maxDataDiskCount(Integer maxDataDiskCount) {
    this.maxDataDiskCount = maxDataDiskCount;
    return this;
  }

  /**
   * The maximum number of data disks that can be attached to the virtual machine size.
   * @return maxDataDiskCount
   */
  @javax.annotation.Nullable
  public Integer getMaxDataDiskCount() {
    return maxDataDiskCount;
  }

  public void setMaxDataDiskCount(Integer maxDataDiskCount) {
    this.maxDataDiskCount = maxDataDiskCount;
  }


  public VirtualMachineSize memoryInMB(Integer memoryInMB) {
    this.memoryInMB = memoryInMB;
    return this;
  }

  /**
   * The amount of memory, in MB, supported by the virtual machine size.
   * @return memoryInMB
   */
  @javax.annotation.Nullable
  public Integer getMemoryInMB() {
    return memoryInMB;
  }

  public void setMemoryInMB(Integer memoryInMB) {
    this.memoryInMB = memoryInMB;
  }


  public VirtualMachineSize name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the virtual machine size.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public VirtualMachineSize numberOfCores(Integer numberOfCores) {
    this.numberOfCores = numberOfCores;
    return this;
  }

  /**
   * The number of cores supported by the virtual machine size.
   * @return numberOfCores
   */
  @javax.annotation.Nullable
  public Integer getNumberOfCores() {
    return numberOfCores;
  }

  public void setNumberOfCores(Integer numberOfCores) {
    this.numberOfCores = numberOfCores;
  }


  public VirtualMachineSize osDiskSizeInMB(Integer osDiskSizeInMB) {
    this.osDiskSizeInMB = osDiskSizeInMB;
    return this;
  }

  /**
   * The OS disk size, in MB, allowed by the virtual machine size.
   * @return osDiskSizeInMB
   */
  @javax.annotation.Nullable
  public Integer getOsDiskSizeInMB() {
    return osDiskSizeInMB;
  }

  public void setOsDiskSizeInMB(Integer osDiskSizeInMB) {
    this.osDiskSizeInMB = osDiskSizeInMB;
  }


  public VirtualMachineSize resourceDiskSizeInMB(Integer resourceDiskSizeInMB) {
    this.resourceDiskSizeInMB = resourceDiskSizeInMB;
    return this;
  }

  /**
   * The resource disk size, in MB, allowed by the virtual machine size.
   * @return resourceDiskSizeInMB
   */
  @javax.annotation.Nullable
  public Integer getResourceDiskSizeInMB() {
    return resourceDiskSizeInMB;
  }

  public void setResourceDiskSizeInMB(Integer resourceDiskSizeInMB) {
    this.resourceDiskSizeInMB = resourceDiskSizeInMB;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualMachineSize virtualMachineSize = (VirtualMachineSize) o;
    return Objects.equals(this.maxDataDiskCount, virtualMachineSize.maxDataDiskCount) &&
        Objects.equals(this.memoryInMB, virtualMachineSize.memoryInMB) &&
        Objects.equals(this.name, virtualMachineSize.name) &&
        Objects.equals(this.numberOfCores, virtualMachineSize.numberOfCores) &&
        Objects.equals(this.osDiskSizeInMB, virtualMachineSize.osDiskSizeInMB) &&
        Objects.equals(this.resourceDiskSizeInMB, virtualMachineSize.resourceDiskSizeInMB);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxDataDiskCount, memoryInMB, name, numberOfCores, osDiskSizeInMB, resourceDiskSizeInMB);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualMachineSize {\n");
    sb.append("    maxDataDiskCount: ").append(toIndentedString(maxDataDiskCount)).append("\n");
    sb.append("    memoryInMB: ").append(toIndentedString(memoryInMB)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    numberOfCores: ").append(toIndentedString(numberOfCores)).append("\n");
    sb.append("    osDiskSizeInMB: ").append(toIndentedString(osDiskSizeInMB)).append("\n");
    sb.append("    resourceDiskSizeInMB: ").append(toIndentedString(resourceDiskSizeInMB)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("maxDataDiskCount");
    openapiFields.add("memoryInMB");
    openapiFields.add("name");
    openapiFields.add("numberOfCores");
    openapiFields.add("osDiskSizeInMB");
    openapiFields.add("resourceDiskSizeInMB");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualMachineSize
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualMachineSize.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualMachineSize is not found in the empty JSON string", VirtualMachineSize.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualMachineSize.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualMachineSize` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualMachineSize.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualMachineSize' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualMachineSize> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualMachineSize.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualMachineSize>() {
           @Override
           public void write(JsonWriter out, VirtualMachineSize value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualMachineSize read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualMachineSize given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualMachineSize
   * @throws IOException if the JSON string is invalid with respect to VirtualMachineSize
   */
  public static VirtualMachineSize fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualMachineSize.class);
  }

  /**
   * Convert an instance of VirtualMachineSize to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

