# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.linux_configuration import LinuxConfiguration
from openapi_server.models.vault_secret_group import VaultSecretGroup
from openapi_server.models.windows_configuration import WindowsConfiguration
from openapi_server import util


class OSProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin_password: str=None, admin_username: str=None, allow_extension_operations: bool=None, computer_name: str=None, custom_data: str=None, linux_configuration: LinuxConfiguration=None, secrets: List[VaultSecretGroup]=None, windows_configuration: WindowsConfiguration=None):
        """OSProfile - a model defined in OpenAPI

        :param admin_password: The admin_password of this OSProfile.
        :param admin_username: The admin_username of this OSProfile.
        :param allow_extension_operations: The allow_extension_operations of this OSProfile.
        :param computer_name: The computer_name of this OSProfile.
        :param custom_data: The custom_data of this OSProfile.
        :param linux_configuration: The linux_configuration of this OSProfile.
        :param secrets: The secrets of this OSProfile.
        :param windows_configuration: The windows_configuration of this OSProfile.
        """
        self.openapi_types = {
            'admin_password': str,
            'admin_username': str,
            'allow_extension_operations': bool,
            'computer_name': str,
            'custom_data': str,
            'linux_configuration': LinuxConfiguration,
            'secrets': List[VaultSecretGroup],
            'windows_configuration': WindowsConfiguration
        }

        self.attribute_map = {
            'admin_password': 'adminPassword',
            'admin_username': 'adminUsername',
            'allow_extension_operations': 'allowExtensionOperations',
            'computer_name': 'computerName',
            'custom_data': 'customData',
            'linux_configuration': 'linuxConfiguration',
            'secrets': 'secrets',
            'windows_configuration': 'windowsConfiguration'
        }

        self._admin_password = admin_password
        self._admin_username = admin_username
        self._allow_extension_operations = allow_extension_operations
        self._computer_name = computer_name
        self._custom_data = custom_data
        self._linux_configuration = linux_configuration
        self._secrets = secrets
        self._windows_configuration = windows_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OSProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OSProfile of this OSProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin_password(self):
        """Gets the admin_password of this OSProfile.

        Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\\W_]) <br><br> **Disallowed values:** \"abc@123\", \"P@$$w0rd\", \"P@ssw0rd\", \"P@ssword123\", \"Pa$$word\", \"pass@word1\", \"Password!\", \"Password1\", \"Password22\", \"iloveyou!\" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-reset-rdp?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-vmaccess-extension?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#reset-root-password)

        :return: The admin_password of this OSProfile.
        :rtype: str
        """
        return self._admin_password

    @admin_password.setter
    def admin_password(self, admin_password):
        """Sets the admin_password of this OSProfile.

        Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\\W_]) <br><br> **Disallowed values:** \"abc@123\", \"P@$$w0rd\", \"P@ssw0rd\", \"P@ssword123\", \"Pa$$word\", \"pass@word1\", \"Password!\", \"Password1\", \"Password22\", \"iloveyou!\" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-reset-rdp?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-vmaccess-extension?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#reset-root-password)

        :param admin_password: The admin_password of this OSProfile.
        :type admin_password: str
        """

        self._admin_password = admin_password

    @property
    def admin_username(self):
        """Gets the admin_username of this OSProfile.

        Specifies the name of the administrator account. <br><br> **Windows-only restriction:** Cannot end in \".\" <br><br> **Disallowed values:** \"administrator\", \"admin\", \"user\", \"user1\", \"test\", \"user2\", \"test1\", \"user3\", \"admin1\", \"1\", \"123\", \"a\", \"actuser\", \"adm\", \"admin2\", \"aspnet\", \"backup\", \"console\", \"david\", \"guest\", \"john\", \"owner\", \"root\", \"server\", \"sql\", \"support\", \"support_388945a0\", \"sys\", \"test2\", \"test3\", \"user4\", \"user5\". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters  <br><br><li> For root access to the Linux VM, see [Using root privileges on Linux virtual machines in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-use-root-privileges?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)<br><li> For a list of built-in system users on Linux that should not be used in this field, see [Selecting User Names for Linux on Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-usernames?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)

        :return: The admin_username of this OSProfile.
        :rtype: str
        """
        return self._admin_username

    @admin_username.setter
    def admin_username(self, admin_username):
        """Sets the admin_username of this OSProfile.

        Specifies the name of the administrator account. <br><br> **Windows-only restriction:** Cannot end in \".\" <br><br> **Disallowed values:** \"administrator\", \"admin\", \"user\", \"user1\", \"test\", \"user2\", \"test1\", \"user3\", \"admin1\", \"1\", \"123\", \"a\", \"actuser\", \"adm\", \"admin2\", \"aspnet\", \"backup\", \"console\", \"david\", \"guest\", \"john\", \"owner\", \"root\", \"server\", \"sql\", \"support\", \"support_388945a0\", \"sys\", \"test2\", \"test3\", \"user4\", \"user5\". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters  <br><br><li> For root access to the Linux VM, see [Using root privileges on Linux virtual machines in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-use-root-privileges?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)<br><li> For a list of built-in system users on Linux that should not be used in this field, see [Selecting User Names for Linux on Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-usernames?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)

        :param admin_username: The admin_username of this OSProfile.
        :type admin_username: str
        """

        self._admin_username = admin_username

    @property
    def allow_extension_operations(self):
        """Gets the allow_extension_operations of this OSProfile.

        Specifies whether extension operations should be allowed on the virtual machine. <br><br>This may only be set to False when no extensions are present on the virtual machine.

        :return: The allow_extension_operations of this OSProfile.
        :rtype: bool
        """
        return self._allow_extension_operations

    @allow_extension_operations.setter
    def allow_extension_operations(self, allow_extension_operations):
        """Sets the allow_extension_operations of this OSProfile.

        Specifies whether extension operations should be allowed on the virtual machine. <br><br>This may only be set to False when no extensions are present on the virtual machine.

        :param allow_extension_operations: The allow_extension_operations of this OSProfile.
        :type allow_extension_operations: bool
        """

        self._allow_extension_operations = allow_extension_operations

    @property
    def computer_name(self):
        """Gets the computer_name of this OSProfile.

        Specifies the host OS name of the virtual machine. <br><br> This name cannot be updated after the VM is created. <br><br> **Max-length (Windows):** 15 characters <br><br> **Max-length (Linux):** 64 characters. <br><br> For naming conventions and restrictions see [Azure infrastructure services implementation guidelines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-infrastructure-subscription-accounts-guidelines?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#1-naming-conventions).

        :return: The computer_name of this OSProfile.
        :rtype: str
        """
        return self._computer_name

    @computer_name.setter
    def computer_name(self, computer_name):
        """Sets the computer_name of this OSProfile.

        Specifies the host OS name of the virtual machine. <br><br> This name cannot be updated after the VM is created. <br><br> **Max-length (Windows):** 15 characters <br><br> **Max-length (Linux):** 64 characters. <br><br> For naming conventions and restrictions see [Azure infrastructure services implementation guidelines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-infrastructure-subscription-accounts-guidelines?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#1-naming-conventions).

        :param computer_name: The computer_name of this OSProfile.
        :type computer_name: str
        """

        self._computer_name = computer_name

    @property
    def custom_data(self):
        """Gets the custom_data of this OSProfile.

        Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. <br><br> For using cloud-init for your VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-cloud-init?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)

        :return: The custom_data of this OSProfile.
        :rtype: str
        """
        return self._custom_data

    @custom_data.setter
    def custom_data(self, custom_data):
        """Sets the custom_data of this OSProfile.

        Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. <br><br> For using cloud-init for your VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-cloud-init?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)

        :param custom_data: The custom_data of this OSProfile.
        :type custom_data: str
        """

        self._custom_data = custom_data

    @property
    def linux_configuration(self):
        """Gets the linux_configuration of this OSProfile.


        :return: The linux_configuration of this OSProfile.
        :rtype: LinuxConfiguration
        """
        return self._linux_configuration

    @linux_configuration.setter
    def linux_configuration(self, linux_configuration):
        """Sets the linux_configuration of this OSProfile.


        :param linux_configuration: The linux_configuration of this OSProfile.
        :type linux_configuration: LinuxConfiguration
        """

        self._linux_configuration = linux_configuration

    @property
    def secrets(self):
        """Gets the secrets of this OSProfile.

        Specifies set of certificates that should be installed onto the virtual machine.

        :return: The secrets of this OSProfile.
        :rtype: List[VaultSecretGroup]
        """
        return self._secrets

    @secrets.setter
    def secrets(self, secrets):
        """Sets the secrets of this OSProfile.

        Specifies set of certificates that should be installed onto the virtual machine.

        :param secrets: The secrets of this OSProfile.
        :type secrets: List[VaultSecretGroup]
        """

        self._secrets = secrets

    @property
    def windows_configuration(self):
        """Gets the windows_configuration of this OSProfile.


        :return: The windows_configuration of this OSProfile.
        :rtype: WindowsConfiguration
        """
        return self._windows_configuration

    @windows_configuration.setter
    def windows_configuration(self, windows_configuration):
        """Sets the windows_configuration of this OSProfile.


        :param windows_configuration: The windows_configuration of this OSProfile.
        :type windows_configuration: WindowsConfiguration
        """

        self._windows_configuration = windows_configuration
