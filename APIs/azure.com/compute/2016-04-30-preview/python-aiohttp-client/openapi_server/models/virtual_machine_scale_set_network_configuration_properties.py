# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.virtual_machine_scale_set_ip_configuration import VirtualMachineScaleSetIPConfiguration
from openapi_server import util


class VirtualMachineScaleSetNetworkConfigurationProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip_configurations: List[VirtualMachineScaleSetIPConfiguration]=None, primary: bool=None):
        """VirtualMachineScaleSetNetworkConfigurationProperties - a model defined in OpenAPI

        :param ip_configurations: The ip_configurations of this VirtualMachineScaleSetNetworkConfigurationProperties.
        :param primary: The primary of this VirtualMachineScaleSetNetworkConfigurationProperties.
        """
        self.openapi_types = {
            'ip_configurations': List[VirtualMachineScaleSetIPConfiguration],
            'primary': bool
        }

        self.attribute_map = {
            'ip_configurations': 'ipConfigurations',
            'primary': 'primary'
        }

        self._ip_configurations = ip_configurations
        self._primary = primary

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualMachineScaleSetNetworkConfigurationProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualMachineScaleSetNetworkConfigurationProperties of this VirtualMachineScaleSetNetworkConfigurationProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip_configurations(self):
        """Gets the ip_configurations of this VirtualMachineScaleSetNetworkConfigurationProperties.

        The virtual machine scale set IP Configuration.

        :return: The ip_configurations of this VirtualMachineScaleSetNetworkConfigurationProperties.
        :rtype: List[VirtualMachineScaleSetIPConfiguration]
        """
        return self._ip_configurations

    @ip_configurations.setter
    def ip_configurations(self, ip_configurations):
        """Sets the ip_configurations of this VirtualMachineScaleSetNetworkConfigurationProperties.

        The virtual machine scale set IP Configuration.

        :param ip_configurations: The ip_configurations of this VirtualMachineScaleSetNetworkConfigurationProperties.
        :type ip_configurations: List[VirtualMachineScaleSetIPConfiguration]
        """
        if ip_configurations is None:
            raise ValueError("Invalid value for `ip_configurations`, must not be `None`")

        self._ip_configurations = ip_configurations

    @property
    def primary(self):
        """Gets the primary of this VirtualMachineScaleSetNetworkConfigurationProperties.

        Whether this is a primary NIC on a virtual machine.

        :return: The primary of this VirtualMachineScaleSetNetworkConfigurationProperties.
        :rtype: bool
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """Sets the primary of this VirtualMachineScaleSetNetworkConfigurationProperties.

        Whether this is a primary NIC on a virtual machine.

        :param primary: The primary of this VirtualMachineScaleSetNetworkConfigurationProperties.
        :type primary: bool
        """

        self._primary = primary
