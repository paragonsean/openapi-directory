# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.caching import Caching
from openapi_server.models.create_option import CreateOption
from openapi_server.models.managed_disk_parameters import ManagedDiskParameters
from openapi_server.models.virtual_hard_disk import VirtualHardDisk
from openapi_server import util


class DataDisk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, caching: Caching=None, create_option: CreateOption=None, disk_size_gb: int=None, image: VirtualHardDisk=None, lun: int=None, managed_disk: ManagedDiskParameters=None, name: str=None, vhd: VirtualHardDisk=None):
        """DataDisk - a model defined in OpenAPI

        :param caching: The caching of this DataDisk.
        :param create_option: The create_option of this DataDisk.
        :param disk_size_gb: The disk_size_gb of this DataDisk.
        :param image: The image of this DataDisk.
        :param lun: The lun of this DataDisk.
        :param managed_disk: The managed_disk of this DataDisk.
        :param name: The name of this DataDisk.
        :param vhd: The vhd of this DataDisk.
        """
        self.openapi_types = {
            'caching': Caching,
            'create_option': CreateOption,
            'disk_size_gb': int,
            'image': VirtualHardDisk,
            'lun': int,
            'managed_disk': ManagedDiskParameters,
            'name': str,
            'vhd': VirtualHardDisk
        }

        self.attribute_map = {
            'caching': 'caching',
            'create_option': 'createOption',
            'disk_size_gb': 'diskSizeGB',
            'image': 'image',
            'lun': 'lun',
            'managed_disk': 'managedDisk',
            'name': 'name',
            'vhd': 'vhd'
        }

        self._caching = caching
        self._create_option = create_option
        self._disk_size_gb = disk_size_gb
        self._image = image
        self._lun = lun
        self._managed_disk = managed_disk
        self._name = name
        self._vhd = vhd

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataDisk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataDisk of this DataDisk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def caching(self):
        """Gets the caching of this DataDisk.


        :return: The caching of this DataDisk.
        :rtype: Caching
        """
        return self._caching

    @caching.setter
    def caching(self, caching):
        """Sets the caching of this DataDisk.


        :param caching: The caching of this DataDisk.
        :type caching: Caching
        """

        self._caching = caching

    @property
    def create_option(self):
        """Gets the create_option of this DataDisk.


        :return: The create_option of this DataDisk.
        :rtype: CreateOption
        """
        return self._create_option

    @create_option.setter
    def create_option(self, create_option):
        """Sets the create_option of this DataDisk.


        :param create_option: The create_option of this DataDisk.
        :type create_option: CreateOption
        """
        if create_option is None:
            raise ValueError("Invalid value for `create_option`, must not be `None`")

        self._create_option = create_option

    @property
    def disk_size_gb(self):
        """Gets the disk_size_gb of this DataDisk.

        Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB

        :return: The disk_size_gb of this DataDisk.
        :rtype: int
        """
        return self._disk_size_gb

    @disk_size_gb.setter
    def disk_size_gb(self, disk_size_gb):
        """Sets the disk_size_gb of this DataDisk.

        Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB

        :param disk_size_gb: The disk_size_gb of this DataDisk.
        :type disk_size_gb: int
        """

        self._disk_size_gb = disk_size_gb

    @property
    def image(self):
        """Gets the image of this DataDisk.


        :return: The image of this DataDisk.
        :rtype: VirtualHardDisk
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this DataDisk.


        :param image: The image of this DataDisk.
        :type image: VirtualHardDisk
        """

        self._image = image

    @property
    def lun(self):
        """Gets the lun of this DataDisk.

        Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.

        :return: The lun of this DataDisk.
        :rtype: int
        """
        return self._lun

    @lun.setter
    def lun(self, lun):
        """Sets the lun of this DataDisk.

        Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.

        :param lun: The lun of this DataDisk.
        :type lun: int
        """
        if lun is None:
            raise ValueError("Invalid value for `lun`, must not be `None`")

        self._lun = lun

    @property
    def managed_disk(self):
        """Gets the managed_disk of this DataDisk.


        :return: The managed_disk of this DataDisk.
        :rtype: ManagedDiskParameters
        """
        return self._managed_disk

    @managed_disk.setter
    def managed_disk(self, managed_disk):
        """Sets the managed_disk of this DataDisk.


        :param managed_disk: The managed_disk of this DataDisk.
        :type managed_disk: ManagedDiskParameters
        """

        self._managed_disk = managed_disk

    @property
    def name(self):
        """Gets the name of this DataDisk.

        The disk name.

        :return: The name of this DataDisk.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataDisk.

        The disk name.

        :param name: The name of this DataDisk.
        :type name: str
        """

        self._name = name

    @property
    def vhd(self):
        """Gets the vhd of this DataDisk.


        :return: The vhd of this DataDisk.
        :rtype: VirtualHardDisk
        """
        return self._vhd

    @vhd.setter
    def vhd(self, vhd):
        """Sets the vhd of this DataDisk.


        :param vhd: The vhd of this DataDisk.
        :type vhd: VirtualHardDisk
        """

        self._vhd = vhd
