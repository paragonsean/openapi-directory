# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.caching import Caching
from openapi_server.models.create_option import CreateOption
from openapi_server.models.virtual_hard_disk import VirtualHardDisk
from openapi_server.models.virtual_machine_scale_set_managed_disk_parameters import VirtualMachineScaleSetManagedDiskParameters
from openapi_server import util


class VirtualMachineScaleSetOSDisk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, caching: Caching=None, create_option: CreateOption=None, image: VirtualHardDisk=None, managed_disk: VirtualMachineScaleSetManagedDiskParameters=None, name: str=None, os_type: str=None, vhd_containers: List[str]=None):
        """VirtualMachineScaleSetOSDisk - a model defined in OpenAPI

        :param caching: The caching of this VirtualMachineScaleSetOSDisk.
        :param create_option: The create_option of this VirtualMachineScaleSetOSDisk.
        :param image: The image of this VirtualMachineScaleSetOSDisk.
        :param managed_disk: The managed_disk of this VirtualMachineScaleSetOSDisk.
        :param name: The name of this VirtualMachineScaleSetOSDisk.
        :param os_type: The os_type of this VirtualMachineScaleSetOSDisk.
        :param vhd_containers: The vhd_containers of this VirtualMachineScaleSetOSDisk.
        """
        self.openapi_types = {
            'caching': Caching,
            'create_option': CreateOption,
            'image': VirtualHardDisk,
            'managed_disk': VirtualMachineScaleSetManagedDiskParameters,
            'name': str,
            'os_type': str,
            'vhd_containers': List[str]
        }

        self.attribute_map = {
            'caching': 'caching',
            'create_option': 'createOption',
            'image': 'image',
            'managed_disk': 'managedDisk',
            'name': 'name',
            'os_type': 'osType',
            'vhd_containers': 'vhdContainers'
        }

        self._caching = caching
        self._create_option = create_option
        self._image = image
        self._managed_disk = managed_disk
        self._name = name
        self._os_type = os_type
        self._vhd_containers = vhd_containers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualMachineScaleSetOSDisk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualMachineScaleSetOSDisk of this VirtualMachineScaleSetOSDisk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def caching(self):
        """Gets the caching of this VirtualMachineScaleSetOSDisk.


        :return: The caching of this VirtualMachineScaleSetOSDisk.
        :rtype: Caching
        """
        return self._caching

    @caching.setter
    def caching(self, caching):
        """Sets the caching of this VirtualMachineScaleSetOSDisk.


        :param caching: The caching of this VirtualMachineScaleSetOSDisk.
        :type caching: Caching
        """

        self._caching = caching

    @property
    def create_option(self):
        """Gets the create_option of this VirtualMachineScaleSetOSDisk.


        :return: The create_option of this VirtualMachineScaleSetOSDisk.
        :rtype: CreateOption
        """
        return self._create_option

    @create_option.setter
    def create_option(self, create_option):
        """Sets the create_option of this VirtualMachineScaleSetOSDisk.


        :param create_option: The create_option of this VirtualMachineScaleSetOSDisk.
        :type create_option: CreateOption
        """
        if create_option is None:
            raise ValueError("Invalid value for `create_option`, must not be `None`")

        self._create_option = create_option

    @property
    def image(self):
        """Gets the image of this VirtualMachineScaleSetOSDisk.


        :return: The image of this VirtualMachineScaleSetOSDisk.
        :rtype: VirtualHardDisk
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this VirtualMachineScaleSetOSDisk.


        :param image: The image of this VirtualMachineScaleSetOSDisk.
        :type image: VirtualHardDisk
        """

        self._image = image

    @property
    def managed_disk(self):
        """Gets the managed_disk of this VirtualMachineScaleSetOSDisk.


        :return: The managed_disk of this VirtualMachineScaleSetOSDisk.
        :rtype: VirtualMachineScaleSetManagedDiskParameters
        """
        return self._managed_disk

    @managed_disk.setter
    def managed_disk(self, managed_disk):
        """Sets the managed_disk of this VirtualMachineScaleSetOSDisk.


        :param managed_disk: The managed_disk of this VirtualMachineScaleSetOSDisk.
        :type managed_disk: VirtualMachineScaleSetManagedDiskParameters
        """

        self._managed_disk = managed_disk

    @property
    def name(self):
        """Gets the name of this VirtualMachineScaleSetOSDisk.

        The disk name.

        :return: The name of this VirtualMachineScaleSetOSDisk.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VirtualMachineScaleSetOSDisk.

        The disk name.

        :param name: The name of this VirtualMachineScaleSetOSDisk.
        :type name: str
        """

        self._name = name

    @property
    def os_type(self):
        """Gets the os_type of this VirtualMachineScaleSetOSDisk.

        This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**

        :return: The os_type of this VirtualMachineScaleSetOSDisk.
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this VirtualMachineScaleSetOSDisk.

        This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**

        :param os_type: The os_type of this VirtualMachineScaleSetOSDisk.
        :type os_type: str
        """
        allowed_values = ["Windows", "Linux"]  # noqa: E501
        if os_type not in allowed_values:
            raise ValueError(
                "Invalid value for `os_type` ({0}), must be one of {1}"
                .format(os_type, allowed_values)
            )

        self._os_type = os_type

    @property
    def vhd_containers(self):
        """Gets the vhd_containers of this VirtualMachineScaleSetOSDisk.

        The list of virtual hard disk container uris.

        :return: The vhd_containers of this VirtualMachineScaleSetOSDisk.
        :rtype: List[str]
        """
        return self._vhd_containers

    @vhd_containers.setter
    def vhd_containers(self, vhd_containers):
        """Sets the vhd_containers of this VirtualMachineScaleSetOSDisk.

        The list of virtual hard disk container uris.

        :param vhd_containers: The vhd_containers of this VirtualMachineScaleSetOSDisk.
        :type vhd_containers: List[str]
        """

        self._vhd_containers = vhd_containers
