# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.caching import Caching
from openapi_server.models.create_option import CreateOption
from openapi_server.models.virtual_machine_scale_set_managed_disk_parameters import VirtualMachineScaleSetManagedDiskParameters
from openapi_server import util


class VirtualMachineScaleSetDataDisk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, caching: Caching=None, create_option: CreateOption=None, disk_size_gb: int=None, lun: int=None, managed_disk: VirtualMachineScaleSetManagedDiskParameters=None, name: str=None):
        """VirtualMachineScaleSetDataDisk - a model defined in OpenAPI

        :param caching: The caching of this VirtualMachineScaleSetDataDisk.
        :param create_option: The create_option of this VirtualMachineScaleSetDataDisk.
        :param disk_size_gb: The disk_size_gb of this VirtualMachineScaleSetDataDisk.
        :param lun: The lun of this VirtualMachineScaleSetDataDisk.
        :param managed_disk: The managed_disk of this VirtualMachineScaleSetDataDisk.
        :param name: The name of this VirtualMachineScaleSetDataDisk.
        """
        self.openapi_types = {
            'caching': Caching,
            'create_option': CreateOption,
            'disk_size_gb': int,
            'lun': int,
            'managed_disk': VirtualMachineScaleSetManagedDiskParameters,
            'name': str
        }

        self.attribute_map = {
            'caching': 'caching',
            'create_option': 'createOption',
            'disk_size_gb': 'diskSizeGB',
            'lun': 'lun',
            'managed_disk': 'managedDisk',
            'name': 'name'
        }

        self._caching = caching
        self._create_option = create_option
        self._disk_size_gb = disk_size_gb
        self._lun = lun
        self._managed_disk = managed_disk
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualMachineScaleSetDataDisk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualMachineScaleSetDataDisk of this VirtualMachineScaleSetDataDisk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def caching(self):
        """Gets the caching of this VirtualMachineScaleSetDataDisk.


        :return: The caching of this VirtualMachineScaleSetDataDisk.
        :rtype: Caching
        """
        return self._caching

    @caching.setter
    def caching(self, caching):
        """Sets the caching of this VirtualMachineScaleSetDataDisk.


        :param caching: The caching of this VirtualMachineScaleSetDataDisk.
        :type caching: Caching
        """

        self._caching = caching

    @property
    def create_option(self):
        """Gets the create_option of this VirtualMachineScaleSetDataDisk.


        :return: The create_option of this VirtualMachineScaleSetDataDisk.
        :rtype: CreateOption
        """
        return self._create_option

    @create_option.setter
    def create_option(self, create_option):
        """Sets the create_option of this VirtualMachineScaleSetDataDisk.


        :param create_option: The create_option of this VirtualMachineScaleSetDataDisk.
        :type create_option: CreateOption
        """
        if create_option is None:
            raise ValueError("Invalid value for `create_option`, must not be `None`")

        self._create_option = create_option

    @property
    def disk_size_gb(self):
        """Gets the disk_size_gb of this VirtualMachineScaleSetDataDisk.

        Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB

        :return: The disk_size_gb of this VirtualMachineScaleSetDataDisk.
        :rtype: int
        """
        return self._disk_size_gb

    @disk_size_gb.setter
    def disk_size_gb(self, disk_size_gb):
        """Sets the disk_size_gb of this VirtualMachineScaleSetDataDisk.

        Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB

        :param disk_size_gb: The disk_size_gb of this VirtualMachineScaleSetDataDisk.
        :type disk_size_gb: int
        """

        self._disk_size_gb = disk_size_gb

    @property
    def lun(self):
        """Gets the lun of this VirtualMachineScaleSetDataDisk.

        Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.

        :return: The lun of this VirtualMachineScaleSetDataDisk.
        :rtype: int
        """
        return self._lun

    @lun.setter
    def lun(self, lun):
        """Sets the lun of this VirtualMachineScaleSetDataDisk.

        Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.

        :param lun: The lun of this VirtualMachineScaleSetDataDisk.
        :type lun: int
        """
        if lun is None:
            raise ValueError("Invalid value for `lun`, must not be `None`")

        self._lun = lun

    @property
    def managed_disk(self):
        """Gets the managed_disk of this VirtualMachineScaleSetDataDisk.


        :return: The managed_disk of this VirtualMachineScaleSetDataDisk.
        :rtype: VirtualMachineScaleSetManagedDiskParameters
        """
        return self._managed_disk

    @managed_disk.setter
    def managed_disk(self, managed_disk):
        """Sets the managed_disk of this VirtualMachineScaleSetDataDisk.


        :param managed_disk: The managed_disk of this VirtualMachineScaleSetDataDisk.
        :type managed_disk: VirtualMachineScaleSetManagedDiskParameters
        """

        self._managed_disk = managed_disk

    @property
    def name(self):
        """Gets the name of this VirtualMachineScaleSetDataDisk.

        The disk name.

        :return: The name of this VirtualMachineScaleSetDataDisk.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VirtualMachineScaleSetDataDisk.

        The disk name.

        :param name: The name of this VirtualMachineScaleSetDataDisk.
        :type name: str
        """

        self._name = name
