# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sub_resource import SubResource
from openapi_server import util


class ImageDataDisk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blob_uri: str=None, caching: str=None, disk_size_gb: int=None, lun: int=None, managed_disk: SubResource=None, snapshot: SubResource=None):
        """ImageDataDisk - a model defined in OpenAPI

        :param blob_uri: The blob_uri of this ImageDataDisk.
        :param caching: The caching of this ImageDataDisk.
        :param disk_size_gb: The disk_size_gb of this ImageDataDisk.
        :param lun: The lun of this ImageDataDisk.
        :param managed_disk: The managed_disk of this ImageDataDisk.
        :param snapshot: The snapshot of this ImageDataDisk.
        """
        self.openapi_types = {
            'blob_uri': str,
            'caching': str,
            'disk_size_gb': int,
            'lun': int,
            'managed_disk': SubResource,
            'snapshot': SubResource
        }

        self.attribute_map = {
            'blob_uri': 'blobUri',
            'caching': 'caching',
            'disk_size_gb': 'diskSizeGB',
            'lun': 'lun',
            'managed_disk': 'managedDisk',
            'snapshot': 'snapshot'
        }

        self._blob_uri = blob_uri
        self._caching = caching
        self._disk_size_gb = disk_size_gb
        self._lun = lun
        self._managed_disk = managed_disk
        self._snapshot = snapshot

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageDataDisk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageDataDisk of this ImageDataDisk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blob_uri(self):
        """Gets the blob_uri of this ImageDataDisk.

        The Virtual Hard Disk.

        :return: The blob_uri of this ImageDataDisk.
        :rtype: str
        """
        return self._blob_uri

    @blob_uri.setter
    def blob_uri(self, blob_uri):
        """Sets the blob_uri of this ImageDataDisk.

        The Virtual Hard Disk.

        :param blob_uri: The blob_uri of this ImageDataDisk.
        :type blob_uri: str
        """

        self._blob_uri = blob_uri

    @property
    def caching(self):
        """Gets the caching of this ImageDataDisk.

        Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**

        :return: The caching of this ImageDataDisk.
        :rtype: str
        """
        return self._caching

    @caching.setter
    def caching(self, caching):
        """Sets the caching of this ImageDataDisk.

        Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**

        :param caching: The caching of this ImageDataDisk.
        :type caching: str
        """
        allowed_values = ["None", "ReadOnly", "ReadWrite"]  # noqa: E501
        if caching not in allowed_values:
            raise ValueError(
                "Invalid value for `caching` ({0}), must be one of {1}"
                .format(caching, allowed_values)
            )

        self._caching = caching

    @property
    def disk_size_gb(self):
        """Gets the disk_size_gb of this ImageDataDisk.

        Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB

        :return: The disk_size_gb of this ImageDataDisk.
        :rtype: int
        """
        return self._disk_size_gb

    @disk_size_gb.setter
    def disk_size_gb(self, disk_size_gb):
        """Sets the disk_size_gb of this ImageDataDisk.

        Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB

        :param disk_size_gb: The disk_size_gb of this ImageDataDisk.
        :type disk_size_gb: int
        """

        self._disk_size_gb = disk_size_gb

    @property
    def lun(self):
        """Gets the lun of this ImageDataDisk.

        Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.

        :return: The lun of this ImageDataDisk.
        :rtype: int
        """
        return self._lun

    @lun.setter
    def lun(self, lun):
        """Sets the lun of this ImageDataDisk.

        Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.

        :param lun: The lun of this ImageDataDisk.
        :type lun: int
        """
        if lun is None:
            raise ValueError("Invalid value for `lun`, must not be `None`")

        self._lun = lun

    @property
    def managed_disk(self):
        """Gets the managed_disk of this ImageDataDisk.


        :return: The managed_disk of this ImageDataDisk.
        :rtype: SubResource
        """
        return self._managed_disk

    @managed_disk.setter
    def managed_disk(self, managed_disk):
        """Sets the managed_disk of this ImageDataDisk.


        :param managed_disk: The managed_disk of this ImageDataDisk.
        :type managed_disk: SubResource
        """

        self._managed_disk = managed_disk

    @property
    def snapshot(self):
        """Gets the snapshot of this ImageDataDisk.


        :return: The snapshot of this ImageDataDisk.
        :rtype: SubResource
        """
        return self._snapshot

    @snapshot.setter
    def snapshot(self, snapshot):
        """Sets the snapshot of this ImageDataDisk.


        :param snapshot: The snapshot of this ImageDataDisk.
        :type snapshot: SubResource
        """

        self._snapshot = snapshot
