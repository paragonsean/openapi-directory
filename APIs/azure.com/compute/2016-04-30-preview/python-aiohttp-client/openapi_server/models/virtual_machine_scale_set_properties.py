# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.upgrade_policy import UpgradePolicy
from openapi_server.models.virtual_machine_scale_set_vm_profile import VirtualMachineScaleSetVMProfile
from openapi_server import util


class VirtualMachineScaleSetProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, over_provision: bool=None, provisioning_state: str=None, single_placement_group: bool=None, upgrade_policy: UpgradePolicy=None, virtual_machine_profile: VirtualMachineScaleSetVMProfile=None):
        """VirtualMachineScaleSetProperties - a model defined in OpenAPI

        :param over_provision: The over_provision of this VirtualMachineScaleSetProperties.
        :param provisioning_state: The provisioning_state of this VirtualMachineScaleSetProperties.
        :param single_placement_group: The single_placement_group of this VirtualMachineScaleSetProperties.
        :param upgrade_policy: The upgrade_policy of this VirtualMachineScaleSetProperties.
        :param virtual_machine_profile: The virtual_machine_profile of this VirtualMachineScaleSetProperties.
        """
        self.openapi_types = {
            'over_provision': bool,
            'provisioning_state': str,
            'single_placement_group': bool,
            'upgrade_policy': UpgradePolicy,
            'virtual_machine_profile': VirtualMachineScaleSetVMProfile
        }

        self.attribute_map = {
            'over_provision': 'overProvision',
            'provisioning_state': 'provisioningState',
            'single_placement_group': 'singlePlacementGroup',
            'upgrade_policy': 'upgradePolicy',
            'virtual_machine_profile': 'virtualMachineProfile'
        }

        self._over_provision = over_provision
        self._provisioning_state = provisioning_state
        self._single_placement_group = single_placement_group
        self._upgrade_policy = upgrade_policy
        self._virtual_machine_profile = virtual_machine_profile

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualMachineScaleSetProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualMachineScaleSetProperties of this VirtualMachineScaleSetProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def over_provision(self):
        """Gets the over_provision of this VirtualMachineScaleSetProperties.

        Specifies whether the Virtual Machine Scale Set should be overprovisioned.

        :return: The over_provision of this VirtualMachineScaleSetProperties.
        :rtype: bool
        """
        return self._over_provision

    @over_provision.setter
    def over_provision(self, over_provision):
        """Sets the over_provision of this VirtualMachineScaleSetProperties.

        Specifies whether the Virtual Machine Scale Set should be overprovisioned.

        :param over_provision: The over_provision of this VirtualMachineScaleSetProperties.
        :type over_provision: bool
        """

        self._over_provision = over_provision

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this VirtualMachineScaleSetProperties.

        The provisioning state, which only appears in the response.

        :return: The provisioning_state of this VirtualMachineScaleSetProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this VirtualMachineScaleSetProperties.

        The provisioning state, which only appears in the response.

        :param provisioning_state: The provisioning_state of this VirtualMachineScaleSetProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def single_placement_group(self):
        """Gets the single_placement_group of this VirtualMachineScaleSetProperties.

        When true this limits the scale set to a single placement group, of max size 100 virtual machines.

        :return: The single_placement_group of this VirtualMachineScaleSetProperties.
        :rtype: bool
        """
        return self._single_placement_group

    @single_placement_group.setter
    def single_placement_group(self, single_placement_group):
        """Sets the single_placement_group of this VirtualMachineScaleSetProperties.

        When true this limits the scale set to a single placement group, of max size 100 virtual machines.

        :param single_placement_group: The single_placement_group of this VirtualMachineScaleSetProperties.
        :type single_placement_group: bool
        """

        self._single_placement_group = single_placement_group

    @property
    def upgrade_policy(self):
        """Gets the upgrade_policy of this VirtualMachineScaleSetProperties.


        :return: The upgrade_policy of this VirtualMachineScaleSetProperties.
        :rtype: UpgradePolicy
        """
        return self._upgrade_policy

    @upgrade_policy.setter
    def upgrade_policy(self, upgrade_policy):
        """Sets the upgrade_policy of this VirtualMachineScaleSetProperties.


        :param upgrade_policy: The upgrade_policy of this VirtualMachineScaleSetProperties.
        :type upgrade_policy: UpgradePolicy
        """

        self._upgrade_policy = upgrade_policy

    @property
    def virtual_machine_profile(self):
        """Gets the virtual_machine_profile of this VirtualMachineScaleSetProperties.


        :return: The virtual_machine_profile of this VirtualMachineScaleSetProperties.
        :rtype: VirtualMachineScaleSetVMProfile
        """
        return self._virtual_machine_profile

    @virtual_machine_profile.setter
    def virtual_machine_profile(self, virtual_machine_profile):
        """Sets the virtual_machine_profile of this VirtualMachineScaleSetProperties.


        :param virtual_machine_profile: The virtual_machine_profile of this VirtualMachineScaleSetProperties.
        :type virtual_machine_profile: VirtualMachineScaleSetVMProfile
        """

        self._virtual_machine_profile = virtual_machine_profile
