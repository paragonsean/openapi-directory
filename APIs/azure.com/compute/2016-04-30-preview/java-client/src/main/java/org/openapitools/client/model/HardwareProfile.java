/*
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2016-04-30-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the hardware settings for the virtual machine.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:49:25.262195-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HardwareProfile {
  /**
   * Specifies the size of the virtual machine. For more information about virtual machine sizes, see [Sizes for virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-sizes?toc&#x3D;%2fazure%2fvirtual-machines%2fwindows%2ftoc.json). &lt;br&gt;&lt;br&gt; The available VM sizes depend on region and availability set. For a list of available sizes use these APIs:  &lt;br&gt;&lt;br&gt; [List all available virtual machine sizes in an availability set](virtualmachines-list-sizes-availability-set.md) &lt;br&gt;&lt;br&gt; [List all available virtual machine sizes in a region](virtualmachines-list-sizes-region.md) &lt;br&gt;&lt;br&gt; [List all available virtual machine sizes for resizing](virtualmachines-list-sizes-for-resizing.md)
   */
  @JsonAdapter(VmSizeEnum.Adapter.class)
  public enum VmSizeEnum {
    BASIC_A0("Basic_A0"),
    
    BASIC_A1("Basic_A1"),
    
    BASIC_A2("Basic_A2"),
    
    BASIC_A3("Basic_A3"),
    
    BASIC_A4("Basic_A4"),
    
    STANDARD_A0("Standard_A0"),
    
    STANDARD_A1("Standard_A1"),
    
    STANDARD_A2("Standard_A2"),
    
    STANDARD_A3("Standard_A3"),
    
    STANDARD_A4("Standard_A4"),
    
    STANDARD_A5("Standard_A5"),
    
    STANDARD_A6("Standard_A6"),
    
    STANDARD_A7("Standard_A7"),
    
    STANDARD_A8("Standard_A8"),
    
    STANDARD_A9("Standard_A9"),
    
    STANDARD_A10("Standard_A10"),
    
    STANDARD_A11("Standard_A11"),
    
    STANDARD_D1("Standard_D1"),
    
    STANDARD_D2("Standard_D2"),
    
    STANDARD_D3("Standard_D3"),
    
    STANDARD_D4("Standard_D4"),
    
    STANDARD_D11("Standard_D11"),
    
    STANDARD_D12("Standard_D12"),
    
    STANDARD_D13("Standard_D13"),
    
    STANDARD_D14("Standard_D14"),
    
    STANDARD_D1_V2("Standard_D1_v2"),
    
    STANDARD_D2_V2("Standard_D2_v2"),
    
    STANDARD_D3_V2("Standard_D3_v2"),
    
    STANDARD_D4_V2("Standard_D4_v2"),
    
    STANDARD_D5_V2("Standard_D5_v2"),
    
    STANDARD_D11_V2("Standard_D11_v2"),
    
    STANDARD_D12_V2("Standard_D12_v2"),
    
    STANDARD_D13_V2("Standard_D13_v2"),
    
    STANDARD_D14_V2("Standard_D14_v2"),
    
    STANDARD_D15_V2("Standard_D15_v2"),
    
    STANDARD_DS1("Standard_DS1"),
    
    STANDARD_DS2("Standard_DS2"),
    
    STANDARD_DS3("Standard_DS3"),
    
    STANDARD_DS4("Standard_DS4"),
    
    STANDARD_DS11("Standard_DS11"),
    
    STANDARD_DS12("Standard_DS12"),
    
    STANDARD_DS13("Standard_DS13"),
    
    STANDARD_DS14("Standard_DS14"),
    
    STANDARD_DS1_V2("Standard_DS1_v2"),
    
    STANDARD_DS2_V2("Standard_DS2_v2"),
    
    STANDARD_DS3_V2("Standard_DS3_v2"),
    
    STANDARD_DS4_V2("Standard_DS4_v2"),
    
    STANDARD_DS5_V2("Standard_DS5_v2"),
    
    STANDARD_DS11_V2("Standard_DS11_v2"),
    
    STANDARD_DS12_V2("Standard_DS12_v2"),
    
    STANDARD_DS13_V2("Standard_DS13_v2"),
    
    STANDARD_DS14_V2("Standard_DS14_v2"),
    
    STANDARD_DS15_V2("Standard_DS15_v2"),
    
    STANDARD_G1("Standard_G1"),
    
    STANDARD_G2("Standard_G2"),
    
    STANDARD_G3("Standard_G3"),
    
    STANDARD_G4("Standard_G4"),
    
    STANDARD_G5("Standard_G5"),
    
    STANDARD_GS1("Standard_GS1"),
    
    STANDARD_GS2("Standard_GS2"),
    
    STANDARD_GS3("Standard_GS3"),
    
    STANDARD_GS4("Standard_GS4"),
    
    STANDARD_GS5("Standard_GS5");

    private String value;

    VmSizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VmSizeEnum fromValue(String value) {
      for (VmSizeEnum b : VmSizeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VmSizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VmSizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VmSizeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VmSizeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VmSizeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VM_SIZE = "vmSize";
  @SerializedName(SERIALIZED_NAME_VM_SIZE)
  private VmSizeEnum vmSize;

  public HardwareProfile() {
  }

  public HardwareProfile vmSize(VmSizeEnum vmSize) {
    this.vmSize = vmSize;
    return this;
  }

  /**
   * Specifies the size of the virtual machine. For more information about virtual machine sizes, see [Sizes for virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-sizes?toc&#x3D;%2fazure%2fvirtual-machines%2fwindows%2ftoc.json). &lt;br&gt;&lt;br&gt; The available VM sizes depend on region and availability set. For a list of available sizes use these APIs:  &lt;br&gt;&lt;br&gt; [List all available virtual machine sizes in an availability set](virtualmachines-list-sizes-availability-set.md) &lt;br&gt;&lt;br&gt; [List all available virtual machine sizes in a region](virtualmachines-list-sizes-region.md) &lt;br&gt;&lt;br&gt; [List all available virtual machine sizes for resizing](virtualmachines-list-sizes-for-resizing.md)
   * @return vmSize
   */
  @javax.annotation.Nullable
  public VmSizeEnum getVmSize() {
    return vmSize;
  }

  public void setVmSize(VmSizeEnum vmSize) {
    this.vmSize = vmSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HardwareProfile hardwareProfile = (HardwareProfile) o;
    return Objects.equals(this.vmSize, hardwareProfile.vmSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vmSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HardwareProfile {\n");
    sb.append("    vmSize: ").append(toIndentedString(vmSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("vmSize");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HardwareProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HardwareProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HardwareProfile is not found in the empty JSON string", HardwareProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HardwareProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HardwareProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("vmSize") != null && !jsonObj.get("vmSize").isJsonNull()) && !jsonObj.get("vmSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmSize").toString()));
      }
      // validate the optional field `vmSize`
      if (jsonObj.get("vmSize") != null && !jsonObj.get("vmSize").isJsonNull()) {
        VmSizeEnum.validateJsonElement(jsonObj.get("vmSize"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HardwareProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HardwareProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HardwareProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HardwareProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<HardwareProfile>() {
           @Override
           public void write(JsonWriter out, HardwareProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HardwareProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HardwareProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HardwareProfile
   * @throws IOException if the JSON string is invalid with respect to HardwareProfile
   */
  public static HardwareProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HardwareProfile.class);
  }

  /**
   * Convert an instance of HardwareProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

