/*
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2016-04-30-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Caching;
import org.openapitools.client.model.CreateOption;
import org.openapitools.client.model.ManagedDiskParameters;
import org.openapitools.client.model.VirtualHardDisk;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a data disk.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:49:25.262195-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataDisk {
  public static final String SERIALIZED_NAME_CACHING = "caching";
  @SerializedName(SERIALIZED_NAME_CACHING)
  private Caching caching;

  public static final String SERIALIZED_NAME_CREATE_OPTION = "createOption";
  @SerializedName(SERIALIZED_NAME_CREATE_OPTION)
  private CreateOption createOption;

  public static final String SERIALIZED_NAME_DISK_SIZE_G_B = "diskSizeGB";
  @SerializedName(SERIALIZED_NAME_DISK_SIZE_G_B)
  private Integer diskSizeGB;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private VirtualHardDisk image;

  public static final String SERIALIZED_NAME_LUN = "lun";
  @SerializedName(SERIALIZED_NAME_LUN)
  private Integer lun;

  public static final String SERIALIZED_NAME_MANAGED_DISK = "managedDisk";
  @SerializedName(SERIALIZED_NAME_MANAGED_DISK)
  private ManagedDiskParameters managedDisk;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_VHD = "vhd";
  @SerializedName(SERIALIZED_NAME_VHD)
  private VirtualHardDisk vhd;

  public DataDisk() {
  }

  public DataDisk caching(Caching caching) {
    this.caching = caching;
    return this;
  }

  /**
   * Get caching
   * @return caching
   */
  @javax.annotation.Nullable
  public Caching getCaching() {
    return caching;
  }

  public void setCaching(Caching caching) {
    this.caching = caching;
  }


  public DataDisk createOption(CreateOption createOption) {
    this.createOption = createOption;
    return this;
  }

  /**
   * Get createOption
   * @return createOption
   */
  @javax.annotation.Nonnull
  public CreateOption getCreateOption() {
    return createOption;
  }

  public void setCreateOption(CreateOption createOption) {
    this.createOption = createOption;
  }


  public DataDisk diskSizeGB(Integer diskSizeGB) {
    this.diskSizeGB = diskSizeGB;
    return this;
  }

  /**
   * Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. &lt;br&gt;&lt;br&gt; This value cannot be larger than 1023 GB
   * @return diskSizeGB
   */
  @javax.annotation.Nullable
  public Integer getDiskSizeGB() {
    return diskSizeGB;
  }

  public void setDiskSizeGB(Integer diskSizeGB) {
    this.diskSizeGB = diskSizeGB;
  }


  public DataDisk image(VirtualHardDisk image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public VirtualHardDisk getImage() {
    return image;
  }

  public void setImage(VirtualHardDisk image) {
    this.image = image;
  }


  public DataDisk lun(Integer lun) {
    this.lun = lun;
    return this;
  }

  /**
   * Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
   * @return lun
   */
  @javax.annotation.Nonnull
  public Integer getLun() {
    return lun;
  }

  public void setLun(Integer lun) {
    this.lun = lun;
  }


  public DataDisk managedDisk(ManagedDiskParameters managedDisk) {
    this.managedDisk = managedDisk;
    return this;
  }

  /**
   * Get managedDisk
   * @return managedDisk
   */
  @javax.annotation.Nullable
  public ManagedDiskParameters getManagedDisk() {
    return managedDisk;
  }

  public void setManagedDisk(ManagedDiskParameters managedDisk) {
    this.managedDisk = managedDisk;
  }


  public DataDisk name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The disk name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DataDisk vhd(VirtualHardDisk vhd) {
    this.vhd = vhd;
    return this;
  }

  /**
   * Get vhd
   * @return vhd
   */
  @javax.annotation.Nullable
  public VirtualHardDisk getVhd() {
    return vhd;
  }

  public void setVhd(VirtualHardDisk vhd) {
    this.vhd = vhd;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataDisk dataDisk = (DataDisk) o;
    return Objects.equals(this.caching, dataDisk.caching) &&
        Objects.equals(this.createOption, dataDisk.createOption) &&
        Objects.equals(this.diskSizeGB, dataDisk.diskSizeGB) &&
        Objects.equals(this.image, dataDisk.image) &&
        Objects.equals(this.lun, dataDisk.lun) &&
        Objects.equals(this.managedDisk, dataDisk.managedDisk) &&
        Objects.equals(this.name, dataDisk.name) &&
        Objects.equals(this.vhd, dataDisk.vhd);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caching, createOption, diskSizeGB, image, lun, managedDisk, name, vhd);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataDisk {\n");
    sb.append("    caching: ").append(toIndentedString(caching)).append("\n");
    sb.append("    createOption: ").append(toIndentedString(createOption)).append("\n");
    sb.append("    diskSizeGB: ").append(toIndentedString(diskSizeGB)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    lun: ").append(toIndentedString(lun)).append("\n");
    sb.append("    managedDisk: ").append(toIndentedString(managedDisk)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    vhd: ").append(toIndentedString(vhd)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("caching");
    openapiFields.add("createOption");
    openapiFields.add("diskSizeGB");
    openapiFields.add("image");
    openapiFields.add("lun");
    openapiFields.add("managedDisk");
    openapiFields.add("name");
    openapiFields.add("vhd");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("createOption");
    openapiRequiredFields.add("lun");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataDisk
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataDisk.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataDisk is not found in the empty JSON string", DataDisk.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataDisk.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataDisk` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DataDisk.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `caching`
      if (jsonObj.get("caching") != null && !jsonObj.get("caching").isJsonNull()) {
        Caching.validateJsonElement(jsonObj.get("caching"));
      }
      // validate the required field `createOption`
      CreateOption.validateJsonElement(jsonObj.get("createOption"));
      // validate the optional field `image`
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        VirtualHardDisk.validateJsonElement(jsonObj.get("image"));
      }
      // validate the optional field `managedDisk`
      if (jsonObj.get("managedDisk") != null && !jsonObj.get("managedDisk").isJsonNull()) {
        ManagedDiskParameters.validateJsonElement(jsonObj.get("managedDisk"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `vhd`
      if (jsonObj.get("vhd") != null && !jsonObj.get("vhd").isJsonNull()) {
        VirtualHardDisk.validateJsonElement(jsonObj.get("vhd"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataDisk.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataDisk' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataDisk> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataDisk.class));

       return (TypeAdapter<T>) new TypeAdapter<DataDisk>() {
           @Override
           public void write(JsonWriter out, DataDisk value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataDisk read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataDisk given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataDisk
   * @throws IOException if the JSON string is invalid with respect to DataDisk
   */
  public static DataDisk fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataDisk.class);
  }

  /**
   * Convert an instance of DataDisk to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

