/*
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2016-04-30-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SubResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a data disk.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:49:25.262195-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImageDataDisk {
  public static final String SERIALIZED_NAME_BLOB_URI = "blobUri";
  @SerializedName(SERIALIZED_NAME_BLOB_URI)
  private String blobUri;

  /**
   * Specifies the caching requirements. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **None** &lt;br&gt;&lt;br&gt; **ReadOnly** &lt;br&gt;&lt;br&gt; **ReadWrite** &lt;br&gt;&lt;br&gt; Default: **None for Standard storage. ReadOnly for Premium storage**
   */
  @JsonAdapter(CachingEnum.Adapter.class)
  public enum CachingEnum {
    NONE("None"),
    
    READ_ONLY("ReadOnly"),
    
    READ_WRITE("ReadWrite");

    private String value;

    CachingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CachingEnum fromValue(String value) {
      for (CachingEnum b : CachingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CachingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CachingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CachingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CachingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CachingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CACHING = "caching";
  @SerializedName(SERIALIZED_NAME_CACHING)
  private CachingEnum caching;

  public static final String SERIALIZED_NAME_DISK_SIZE_G_B = "diskSizeGB";
  @SerializedName(SERIALIZED_NAME_DISK_SIZE_G_B)
  private Integer diskSizeGB;

  public static final String SERIALIZED_NAME_LUN = "lun";
  @SerializedName(SERIALIZED_NAME_LUN)
  private Integer lun;

  public static final String SERIALIZED_NAME_MANAGED_DISK = "managedDisk";
  @SerializedName(SERIALIZED_NAME_MANAGED_DISK)
  private SubResource managedDisk;

  public static final String SERIALIZED_NAME_SNAPSHOT = "snapshot";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT)
  private SubResource snapshot;

  public ImageDataDisk() {
  }

  public ImageDataDisk blobUri(String blobUri) {
    this.blobUri = blobUri;
    return this;
  }

  /**
   * The Virtual Hard Disk.
   * @return blobUri
   */
  @javax.annotation.Nullable
  public String getBlobUri() {
    return blobUri;
  }

  public void setBlobUri(String blobUri) {
    this.blobUri = blobUri;
  }


  public ImageDataDisk caching(CachingEnum caching) {
    this.caching = caching;
    return this;
  }

  /**
   * Specifies the caching requirements. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **None** &lt;br&gt;&lt;br&gt; **ReadOnly** &lt;br&gt;&lt;br&gt; **ReadWrite** &lt;br&gt;&lt;br&gt; Default: **None for Standard storage. ReadOnly for Premium storage**
   * @return caching
   */
  @javax.annotation.Nullable
  public CachingEnum getCaching() {
    return caching;
  }

  public void setCaching(CachingEnum caching) {
    this.caching = caching;
  }


  public ImageDataDisk diskSizeGB(Integer diskSizeGB) {
    this.diskSizeGB = diskSizeGB;
    return this;
  }

  /**
   * Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. &lt;br&gt;&lt;br&gt; This value cannot be larger than 1023 GB
   * @return diskSizeGB
   */
  @javax.annotation.Nullable
  public Integer getDiskSizeGB() {
    return diskSizeGB;
  }

  public void setDiskSizeGB(Integer diskSizeGB) {
    this.diskSizeGB = diskSizeGB;
  }


  public ImageDataDisk lun(Integer lun) {
    this.lun = lun;
    return this;
  }

  /**
   * Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
   * @return lun
   */
  @javax.annotation.Nonnull
  public Integer getLun() {
    return lun;
  }

  public void setLun(Integer lun) {
    this.lun = lun;
  }


  public ImageDataDisk managedDisk(SubResource managedDisk) {
    this.managedDisk = managedDisk;
    return this;
  }

  /**
   * Get managedDisk
   * @return managedDisk
   */
  @javax.annotation.Nullable
  public SubResource getManagedDisk() {
    return managedDisk;
  }

  public void setManagedDisk(SubResource managedDisk) {
    this.managedDisk = managedDisk;
  }


  public ImageDataDisk snapshot(SubResource snapshot) {
    this.snapshot = snapshot;
    return this;
  }

  /**
   * Get snapshot
   * @return snapshot
   */
  @javax.annotation.Nullable
  public SubResource getSnapshot() {
    return snapshot;
  }

  public void setSnapshot(SubResource snapshot) {
    this.snapshot = snapshot;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageDataDisk imageDataDisk = (ImageDataDisk) o;
    return Objects.equals(this.blobUri, imageDataDisk.blobUri) &&
        Objects.equals(this.caching, imageDataDisk.caching) &&
        Objects.equals(this.diskSizeGB, imageDataDisk.diskSizeGB) &&
        Objects.equals(this.lun, imageDataDisk.lun) &&
        Objects.equals(this.managedDisk, imageDataDisk.managedDisk) &&
        Objects.equals(this.snapshot, imageDataDisk.snapshot);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blobUri, caching, diskSizeGB, lun, managedDisk, snapshot);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageDataDisk {\n");
    sb.append("    blobUri: ").append(toIndentedString(blobUri)).append("\n");
    sb.append("    caching: ").append(toIndentedString(caching)).append("\n");
    sb.append("    diskSizeGB: ").append(toIndentedString(diskSizeGB)).append("\n");
    sb.append("    lun: ").append(toIndentedString(lun)).append("\n");
    sb.append("    managedDisk: ").append(toIndentedString(managedDisk)).append("\n");
    sb.append("    snapshot: ").append(toIndentedString(snapshot)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blobUri");
    openapiFields.add("caching");
    openapiFields.add("diskSizeGB");
    openapiFields.add("lun");
    openapiFields.add("managedDisk");
    openapiFields.add("snapshot");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("lun");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImageDataDisk
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImageDataDisk.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImageDataDisk is not found in the empty JSON string", ImageDataDisk.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImageDataDisk.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImageDataDisk` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ImageDataDisk.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("blobUri") != null && !jsonObj.get("blobUri").isJsonNull()) && !jsonObj.get("blobUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blobUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blobUri").toString()));
      }
      if ((jsonObj.get("caching") != null && !jsonObj.get("caching").isJsonNull()) && !jsonObj.get("caching").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caching` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caching").toString()));
      }
      // validate the optional field `caching`
      if (jsonObj.get("caching") != null && !jsonObj.get("caching").isJsonNull()) {
        CachingEnum.validateJsonElement(jsonObj.get("caching"));
      }
      // validate the optional field `managedDisk`
      if (jsonObj.get("managedDisk") != null && !jsonObj.get("managedDisk").isJsonNull()) {
        SubResource.validateJsonElement(jsonObj.get("managedDisk"));
      }
      // validate the optional field `snapshot`
      if (jsonObj.get("snapshot") != null && !jsonObj.get("snapshot").isJsonNull()) {
        SubResource.validateJsonElement(jsonObj.get("snapshot"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImageDataDisk.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImageDataDisk' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImageDataDisk> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImageDataDisk.class));

       return (TypeAdapter<T>) new TypeAdapter<ImageDataDisk>() {
           @Override
           public void write(JsonWriter out, ImageDataDisk value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImageDataDisk read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImageDataDisk given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImageDataDisk
   * @throws IOException if the JSON string is invalid with respect to ImageDataDisk
   */
  public static ImageDataDisk fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImageDataDisk.class);
  }

  /**
   * Convert an instance of ImageDataDisk to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

