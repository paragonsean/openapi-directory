/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2016-04-30-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWinRMListener.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWinRMListener::OAIWinRMListener(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWinRMListener::OAIWinRMListener() {
    this->initializeModel();
}

OAIWinRMListener::~OAIWinRMListener() {}

void OAIWinRMListener::initializeModel() {

    m_certificate_url_isSet = false;
    m_certificate_url_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;
}

void OAIWinRMListener::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWinRMListener::fromJsonObject(QJsonObject json) {

    m_certificate_url_isValid = ::OpenAPI::fromJsonValue(m_certificate_url, json[QString("certificateUrl")]);
    m_certificate_url_isSet = !json[QString("certificateUrl")].isNull() && m_certificate_url_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;
}

QString OAIWinRMListener::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWinRMListener::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_url_isSet) {
        obj.insert(QString("certificateUrl"), ::OpenAPI::toJsonValue(m_certificate_url));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    return obj;
}

QString OAIWinRMListener::getCertificateUrl() const {
    return m_certificate_url;
}
void OAIWinRMListener::setCertificateUrl(const QString &certificate_url) {
    m_certificate_url = certificate_url;
    m_certificate_url_isSet = true;
}

bool OAIWinRMListener::is_certificate_url_Set() const{
    return m_certificate_url_isSet;
}

bool OAIWinRMListener::is_certificate_url_Valid() const{
    return m_certificate_url_isValid;
}

QString OAIWinRMListener::getProtocol() const {
    return m_protocol;
}
void OAIWinRMListener::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIWinRMListener::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIWinRMListener::is_protocol_Valid() const{
    return m_protocol_isValid;
}

bool OAIWinRMListener::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWinRMListener::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
