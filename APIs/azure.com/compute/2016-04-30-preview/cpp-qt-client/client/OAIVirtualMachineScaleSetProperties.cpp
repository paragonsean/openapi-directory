/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2016-04-30-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualMachineScaleSetProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualMachineScaleSetProperties::OAIVirtualMachineScaleSetProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualMachineScaleSetProperties::OAIVirtualMachineScaleSetProperties() {
    this->initializeModel();
}

OAIVirtualMachineScaleSetProperties::~OAIVirtualMachineScaleSetProperties() {}

void OAIVirtualMachineScaleSetProperties::initializeModel() {

    m_over_provision_isSet = false;
    m_over_provision_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_single_placement_group_isSet = false;
    m_single_placement_group_isValid = false;

    m_upgrade_policy_isSet = false;
    m_upgrade_policy_isValid = false;

    m_virtual_machine_profile_isSet = false;
    m_virtual_machine_profile_isValid = false;
}

void OAIVirtualMachineScaleSetProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualMachineScaleSetProperties::fromJsonObject(QJsonObject json) {

    m_over_provision_isValid = ::OpenAPI::fromJsonValue(m_over_provision, json[QString("overProvision")]);
    m_over_provision_isSet = !json[QString("overProvision")].isNull() && m_over_provision_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_single_placement_group_isValid = ::OpenAPI::fromJsonValue(m_single_placement_group, json[QString("singlePlacementGroup")]);
    m_single_placement_group_isSet = !json[QString("singlePlacementGroup")].isNull() && m_single_placement_group_isValid;

    m_upgrade_policy_isValid = ::OpenAPI::fromJsonValue(m_upgrade_policy, json[QString("upgradePolicy")]);
    m_upgrade_policy_isSet = !json[QString("upgradePolicy")].isNull() && m_upgrade_policy_isValid;

    m_virtual_machine_profile_isValid = ::OpenAPI::fromJsonValue(m_virtual_machine_profile, json[QString("virtualMachineProfile")]);
    m_virtual_machine_profile_isSet = !json[QString("virtualMachineProfile")].isNull() && m_virtual_machine_profile_isValid;
}

QString OAIVirtualMachineScaleSetProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualMachineScaleSetProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_over_provision_isSet) {
        obj.insert(QString("overProvision"), ::OpenAPI::toJsonValue(m_over_provision));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_single_placement_group_isSet) {
        obj.insert(QString("singlePlacementGroup"), ::OpenAPI::toJsonValue(m_single_placement_group));
    }
    if (m_upgrade_policy.isSet()) {
        obj.insert(QString("upgradePolicy"), ::OpenAPI::toJsonValue(m_upgrade_policy));
    }
    if (m_virtual_machine_profile.isSet()) {
        obj.insert(QString("virtualMachineProfile"), ::OpenAPI::toJsonValue(m_virtual_machine_profile));
    }
    return obj;
}

bool OAIVirtualMachineScaleSetProperties::isOverProvision() const {
    return m_over_provision;
}
void OAIVirtualMachineScaleSetProperties::setOverProvision(const bool &over_provision) {
    m_over_provision = over_provision;
    m_over_provision_isSet = true;
}

bool OAIVirtualMachineScaleSetProperties::is_over_provision_Set() const{
    return m_over_provision_isSet;
}

bool OAIVirtualMachineScaleSetProperties::is_over_provision_Valid() const{
    return m_over_provision_isValid;
}

QString OAIVirtualMachineScaleSetProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIVirtualMachineScaleSetProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIVirtualMachineScaleSetProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIVirtualMachineScaleSetProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIVirtualMachineScaleSetProperties::isSinglePlacementGroup() const {
    return m_single_placement_group;
}
void OAIVirtualMachineScaleSetProperties::setSinglePlacementGroup(const bool &single_placement_group) {
    m_single_placement_group = single_placement_group;
    m_single_placement_group_isSet = true;
}

bool OAIVirtualMachineScaleSetProperties::is_single_placement_group_Set() const{
    return m_single_placement_group_isSet;
}

bool OAIVirtualMachineScaleSetProperties::is_single_placement_group_Valid() const{
    return m_single_placement_group_isValid;
}

OAIUpgradePolicy OAIVirtualMachineScaleSetProperties::getUpgradePolicy() const {
    return m_upgrade_policy;
}
void OAIVirtualMachineScaleSetProperties::setUpgradePolicy(const OAIUpgradePolicy &upgrade_policy) {
    m_upgrade_policy = upgrade_policy;
    m_upgrade_policy_isSet = true;
}

bool OAIVirtualMachineScaleSetProperties::is_upgrade_policy_Set() const{
    return m_upgrade_policy_isSet;
}

bool OAIVirtualMachineScaleSetProperties::is_upgrade_policy_Valid() const{
    return m_upgrade_policy_isValid;
}

OAIVirtualMachineScaleSetVMProfile OAIVirtualMachineScaleSetProperties::getVirtualMachineProfile() const {
    return m_virtual_machine_profile;
}
void OAIVirtualMachineScaleSetProperties::setVirtualMachineProfile(const OAIVirtualMachineScaleSetVMProfile &virtual_machine_profile) {
    m_virtual_machine_profile = virtual_machine_profile;
    m_virtual_machine_profile_isSet = true;
}

bool OAIVirtualMachineScaleSetProperties::is_virtual_machine_profile_Set() const{
    return m_virtual_machine_profile_isSet;
}

bool OAIVirtualMachineScaleSetProperties::is_virtual_machine_profile_Valid() const{
    return m_virtual_machine_profile_isValid;
}

bool OAIVirtualMachineScaleSetProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_over_provision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_placement_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_machine_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualMachineScaleSetProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
