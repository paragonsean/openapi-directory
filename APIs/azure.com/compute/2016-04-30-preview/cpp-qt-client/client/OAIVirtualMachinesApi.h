/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2016-04-30-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVirtualMachinesApi_H
#define OAI_OAIVirtualMachinesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIOperationStatusResponse.h"
#include "OAIVirtualMachine.h"
#include "OAIVirtualMachineCaptureParameters.h"
#include "OAIVirtualMachineCaptureResult.h"
#include "OAIVirtualMachineListResult.h"
#include "OAIVirtualMachineSizeListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVirtualMachinesApi : public QObject {
    Q_OBJECT

public:
    OAIVirtualMachinesApi(const int timeOut = 0);
    ~OAIVirtualMachinesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIVirtualMachineCaptureParameters [required]
    */
    virtual void virtualMachinesCapture(const QString &resource_group_name, const QString &vm_name, const QString &api_version, const QString &subscription_id, const OAIVirtualMachineCaptureParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualMachinesConvertToManagedDisks(const QString &resource_group_name, const QString &vm_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIVirtualMachine [required]
    */
    virtual void virtualMachinesCreateOrUpdate(const QString &resource_group_name, const QString &vm_name, const QString &api_version, const QString &subscription_id, const OAIVirtualMachine &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualMachinesDeallocate(const QString &resource_group_name, const QString &vm_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualMachinesDelete(const QString &resource_group_name, const QString &vm_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualMachinesGeneralize(const QString &resource_group_name, const QString &vm_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void virtualMachinesGet(const QString &resource_group_name, const QString &vm_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualMachinesList(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualMachinesListAll(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualMachinesListAvailableSizes(const QString &resource_group_name, const QString &vm_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualMachinesPowerOff(const QString &resource_group_name, const QString &vm_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualMachinesRedeploy(const QString &resource_group_name, const QString &vm_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualMachinesRestart(const QString &resource_group_name, const QString &vm_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualMachinesStart(const QString &resource_group_name, const QString &vm_name, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void virtualMachinesCaptureCallback(OAIHttpRequestWorker *worker);
    void virtualMachinesConvertToManagedDisksCallback(OAIHttpRequestWorker *worker);
    void virtualMachinesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualMachinesDeallocateCallback(OAIHttpRequestWorker *worker);
    void virtualMachinesDeleteCallback(OAIHttpRequestWorker *worker);
    void virtualMachinesGeneralizeCallback(OAIHttpRequestWorker *worker);
    void virtualMachinesGetCallback(OAIHttpRequestWorker *worker);
    void virtualMachinesListCallback(OAIHttpRequestWorker *worker);
    void virtualMachinesListAllCallback(OAIHttpRequestWorker *worker);
    void virtualMachinesListAvailableSizesCallback(OAIHttpRequestWorker *worker);
    void virtualMachinesPowerOffCallback(OAIHttpRequestWorker *worker);
    void virtualMachinesRedeployCallback(OAIHttpRequestWorker *worker);
    void virtualMachinesRestartCallback(OAIHttpRequestWorker *worker);
    void virtualMachinesStartCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void virtualMachinesCaptureSignal(OAIVirtualMachineCaptureResult summary);
    void virtualMachinesConvertToManagedDisksSignal(OAIOperationStatusResponse summary);
    void virtualMachinesCreateOrUpdateSignal(OAIVirtualMachine summary);
    void virtualMachinesDeallocateSignal(OAIOperationStatusResponse summary);
    void virtualMachinesDeleteSignal(OAIOperationStatusResponse summary);
    void virtualMachinesGeneralizeSignal(OAIOperationStatusResponse summary);
    void virtualMachinesGetSignal(OAIVirtualMachine summary);
    void virtualMachinesListSignal(OAIVirtualMachineListResult summary);
    void virtualMachinesListAllSignal(OAIVirtualMachineListResult summary);
    void virtualMachinesListAvailableSizesSignal(OAIVirtualMachineSizeListResult summary);
    void virtualMachinesPowerOffSignal(OAIOperationStatusResponse summary);
    void virtualMachinesRedeploySignal(OAIOperationStatusResponse summary);
    void virtualMachinesRestartSignal(OAIOperationStatusResponse summary);
    void virtualMachinesStartSignal(OAIOperationStatusResponse summary);


    void virtualMachinesCaptureSignalFull(OAIHttpRequestWorker *worker, OAIVirtualMachineCaptureResult summary);
    void virtualMachinesConvertToManagedDisksSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatusResponse summary);
    void virtualMachinesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualMachine summary);
    void virtualMachinesDeallocateSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatusResponse summary);
    void virtualMachinesDeleteSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatusResponse summary);
    void virtualMachinesGeneralizeSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatusResponse summary);
    void virtualMachinesGetSignalFull(OAIHttpRequestWorker *worker, OAIVirtualMachine summary);
    void virtualMachinesListSignalFull(OAIHttpRequestWorker *worker, OAIVirtualMachineListResult summary);
    void virtualMachinesListAllSignalFull(OAIHttpRequestWorker *worker, OAIVirtualMachineListResult summary);
    void virtualMachinesListAvailableSizesSignalFull(OAIHttpRequestWorker *worker, OAIVirtualMachineSizeListResult summary);
    void virtualMachinesPowerOffSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatusResponse summary);
    void virtualMachinesRedeploySignalFull(OAIHttpRequestWorker *worker, OAIOperationStatusResponse summary);
    void virtualMachinesRestartSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatusResponse summary);
    void virtualMachinesStartSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatusResponse summary);

    Q_DECL_DEPRECATED_X("Use virtualMachinesCaptureSignalError() instead")
    void virtualMachinesCaptureSignalE(OAIVirtualMachineCaptureResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesCaptureSignalError(OAIVirtualMachineCaptureResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesConvertToManagedDisksSignalError() instead")
    void virtualMachinesConvertToManagedDisksSignalE(OAIOperationStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesConvertToManagedDisksSignalError(OAIOperationStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesCreateOrUpdateSignalError() instead")
    void virtualMachinesCreateOrUpdateSignalE(OAIVirtualMachine summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesCreateOrUpdateSignalError(OAIVirtualMachine summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesDeallocateSignalError() instead")
    void virtualMachinesDeallocateSignalE(OAIOperationStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesDeallocateSignalError(OAIOperationStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesDeleteSignalError() instead")
    void virtualMachinesDeleteSignalE(OAIOperationStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesDeleteSignalError(OAIOperationStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesGeneralizeSignalError() instead")
    void virtualMachinesGeneralizeSignalE(OAIOperationStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesGeneralizeSignalError(OAIOperationStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesGetSignalError() instead")
    void virtualMachinesGetSignalE(OAIVirtualMachine summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesGetSignalError(OAIVirtualMachine summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesListSignalError() instead")
    void virtualMachinesListSignalE(OAIVirtualMachineListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesListSignalError(OAIVirtualMachineListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesListAllSignalError() instead")
    void virtualMachinesListAllSignalE(OAIVirtualMachineListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesListAllSignalError(OAIVirtualMachineListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesListAvailableSizesSignalError() instead")
    void virtualMachinesListAvailableSizesSignalE(OAIVirtualMachineSizeListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesListAvailableSizesSignalError(OAIVirtualMachineSizeListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesPowerOffSignalError() instead")
    void virtualMachinesPowerOffSignalE(OAIOperationStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesPowerOffSignalError(OAIOperationStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesRedeploySignalError() instead")
    void virtualMachinesRedeploySignalE(OAIOperationStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesRedeploySignalError(OAIOperationStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesRestartSignalError() instead")
    void virtualMachinesRestartSignalE(OAIOperationStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesRestartSignalError(OAIOperationStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesStartSignalError() instead")
    void virtualMachinesStartSignalE(OAIOperationStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesStartSignalError(OAIOperationStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use virtualMachinesCaptureSignalErrorFull() instead")
    void virtualMachinesCaptureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesCaptureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesConvertToManagedDisksSignalErrorFull() instead")
    void virtualMachinesConvertToManagedDisksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesConvertToManagedDisksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesCreateOrUpdateSignalErrorFull() instead")
    void virtualMachinesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesDeallocateSignalErrorFull() instead")
    void virtualMachinesDeallocateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesDeallocateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesDeleteSignalErrorFull() instead")
    void virtualMachinesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesGeneralizeSignalErrorFull() instead")
    void virtualMachinesGeneralizeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesGeneralizeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesGetSignalErrorFull() instead")
    void virtualMachinesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesListSignalErrorFull() instead")
    void virtualMachinesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesListAllSignalErrorFull() instead")
    void virtualMachinesListAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesListAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesListAvailableSizesSignalErrorFull() instead")
    void virtualMachinesListAvailableSizesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesListAvailableSizesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesPowerOffSignalErrorFull() instead")
    void virtualMachinesPowerOffSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesPowerOffSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesRedeploySignalErrorFull() instead")
    void virtualMachinesRedeploySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesRedeploySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesRestartSignalErrorFull() instead")
    void virtualMachinesRestartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesRestartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesStartSignalErrorFull() instead")
    void virtualMachinesStartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesStartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
