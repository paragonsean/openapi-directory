/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2016-04-30-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAvailabilitySetProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAvailabilitySetProperties::OAIAvailabilitySetProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAvailabilitySetProperties::OAIAvailabilitySetProperties() {
    this->initializeModel();
}

OAIAvailabilitySetProperties::~OAIAvailabilitySetProperties() {}

void OAIAvailabilitySetProperties::initializeModel() {

    m_managed_isSet = false;
    m_managed_isValid = false;

    m_platform_fault_domain_count_isSet = false;
    m_platform_fault_domain_count_isValid = false;

    m_platform_update_domain_count_isSet = false;
    m_platform_update_domain_count_isValid = false;

    m_statuses_isSet = false;
    m_statuses_isValid = false;

    m_virtual_machines_isSet = false;
    m_virtual_machines_isValid = false;
}

void OAIAvailabilitySetProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAvailabilitySetProperties::fromJsonObject(QJsonObject json) {

    m_managed_isValid = ::OpenAPI::fromJsonValue(m_managed, json[QString("managed")]);
    m_managed_isSet = !json[QString("managed")].isNull() && m_managed_isValid;

    m_platform_fault_domain_count_isValid = ::OpenAPI::fromJsonValue(m_platform_fault_domain_count, json[QString("platformFaultDomainCount")]);
    m_platform_fault_domain_count_isSet = !json[QString("platformFaultDomainCount")].isNull() && m_platform_fault_domain_count_isValid;

    m_platform_update_domain_count_isValid = ::OpenAPI::fromJsonValue(m_platform_update_domain_count, json[QString("platformUpdateDomainCount")]);
    m_platform_update_domain_count_isSet = !json[QString("platformUpdateDomainCount")].isNull() && m_platform_update_domain_count_isValid;

    m_statuses_isValid = ::OpenAPI::fromJsonValue(m_statuses, json[QString("statuses")]);
    m_statuses_isSet = !json[QString("statuses")].isNull() && m_statuses_isValid;

    m_virtual_machines_isValid = ::OpenAPI::fromJsonValue(m_virtual_machines, json[QString("virtualMachines")]);
    m_virtual_machines_isSet = !json[QString("virtualMachines")].isNull() && m_virtual_machines_isValid;
}

QString OAIAvailabilitySetProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAvailabilitySetProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_managed_isSet) {
        obj.insert(QString("managed"), ::OpenAPI::toJsonValue(m_managed));
    }
    if (m_platform_fault_domain_count_isSet) {
        obj.insert(QString("platformFaultDomainCount"), ::OpenAPI::toJsonValue(m_platform_fault_domain_count));
    }
    if (m_platform_update_domain_count_isSet) {
        obj.insert(QString("platformUpdateDomainCount"), ::OpenAPI::toJsonValue(m_platform_update_domain_count));
    }
    if (m_statuses.size() > 0) {
        obj.insert(QString("statuses"), ::OpenAPI::toJsonValue(m_statuses));
    }
    if (m_virtual_machines.size() > 0) {
        obj.insert(QString("virtualMachines"), ::OpenAPI::toJsonValue(m_virtual_machines));
    }
    return obj;
}

bool OAIAvailabilitySetProperties::isManaged() const {
    return m_managed;
}
void OAIAvailabilitySetProperties::setManaged(const bool &managed) {
    m_managed = managed;
    m_managed_isSet = true;
}

bool OAIAvailabilitySetProperties::is_managed_Set() const{
    return m_managed_isSet;
}

bool OAIAvailabilitySetProperties::is_managed_Valid() const{
    return m_managed_isValid;
}

qint32 OAIAvailabilitySetProperties::getPlatformFaultDomainCount() const {
    return m_platform_fault_domain_count;
}
void OAIAvailabilitySetProperties::setPlatformFaultDomainCount(const qint32 &platform_fault_domain_count) {
    m_platform_fault_domain_count = platform_fault_domain_count;
    m_platform_fault_domain_count_isSet = true;
}

bool OAIAvailabilitySetProperties::is_platform_fault_domain_count_Set() const{
    return m_platform_fault_domain_count_isSet;
}

bool OAIAvailabilitySetProperties::is_platform_fault_domain_count_Valid() const{
    return m_platform_fault_domain_count_isValid;
}

qint32 OAIAvailabilitySetProperties::getPlatformUpdateDomainCount() const {
    return m_platform_update_domain_count;
}
void OAIAvailabilitySetProperties::setPlatformUpdateDomainCount(const qint32 &platform_update_domain_count) {
    m_platform_update_domain_count = platform_update_domain_count;
    m_platform_update_domain_count_isSet = true;
}

bool OAIAvailabilitySetProperties::is_platform_update_domain_count_Set() const{
    return m_platform_update_domain_count_isSet;
}

bool OAIAvailabilitySetProperties::is_platform_update_domain_count_Valid() const{
    return m_platform_update_domain_count_isValid;
}

QList<OAIInstanceViewStatus> OAIAvailabilitySetProperties::getStatuses() const {
    return m_statuses;
}
void OAIAvailabilitySetProperties::setStatuses(const QList<OAIInstanceViewStatus> &statuses) {
    m_statuses = statuses;
    m_statuses_isSet = true;
}

bool OAIAvailabilitySetProperties::is_statuses_Set() const{
    return m_statuses_isSet;
}

bool OAIAvailabilitySetProperties::is_statuses_Valid() const{
    return m_statuses_isValid;
}

QList<OAISubResource> OAIAvailabilitySetProperties::getVirtualMachines() const {
    return m_virtual_machines;
}
void OAIAvailabilitySetProperties::setVirtualMachines(const QList<OAISubResource> &virtual_machines) {
    m_virtual_machines = virtual_machines;
    m_virtual_machines_isSet = true;
}

bool OAIAvailabilitySetProperties::is_virtual_machines_Set() const{
    return m_virtual_machines_isSet;
}

bool OAIAvailabilitySetProperties::is_virtual_machines_Valid() const{
    return m_virtual_machines_isValid;
}

bool OAIAvailabilitySetProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_managed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_fault_domain_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_update_domain_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statuses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_machines.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAvailabilitySetProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
