/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2017-03-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ComputeManagementClient);
  }
}(this, function(expect, ComputeManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ComputeManagementClient.VirtualMachinesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VirtualMachinesApi', function() {
    describe('virtualMachinesCapture', function() {
      it('should call virtualMachinesCapture successfully', function(done) {
        //uncomment below and update the code to test virtualMachinesCapture
        //instance.virtualMachinesCapture(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachinesConvertToManagedDisks', function() {
      it('should call virtualMachinesConvertToManagedDisks successfully', function(done) {
        //uncomment below and update the code to test virtualMachinesConvertToManagedDisks
        //instance.virtualMachinesConvertToManagedDisks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachinesCreateOrUpdate', function() {
      it('should call virtualMachinesCreateOrUpdate successfully', function(done) {
        //uncomment below and update the code to test virtualMachinesCreateOrUpdate
        //instance.virtualMachinesCreateOrUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachinesDeallocate', function() {
      it('should call virtualMachinesDeallocate successfully', function(done) {
        //uncomment below and update the code to test virtualMachinesDeallocate
        //instance.virtualMachinesDeallocate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachinesDelete', function() {
      it('should call virtualMachinesDelete successfully', function(done) {
        //uncomment below and update the code to test virtualMachinesDelete
        //instance.virtualMachinesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachinesGeneralize', function() {
      it('should call virtualMachinesGeneralize successfully', function(done) {
        //uncomment below and update the code to test virtualMachinesGeneralize
        //instance.virtualMachinesGeneralize(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachinesGet', function() {
      it('should call virtualMachinesGet successfully', function(done) {
        //uncomment below and update the code to test virtualMachinesGet
        //instance.virtualMachinesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachinesInstanceView', function() {
      it('should call virtualMachinesInstanceView successfully', function(done) {
        //uncomment below and update the code to test virtualMachinesInstanceView
        //instance.virtualMachinesInstanceView(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachinesList', function() {
      it('should call virtualMachinesList successfully', function(done) {
        //uncomment below and update the code to test virtualMachinesList
        //instance.virtualMachinesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachinesListAll', function() {
      it('should call virtualMachinesListAll successfully', function(done) {
        //uncomment below and update the code to test virtualMachinesListAll
        //instance.virtualMachinesListAll(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachinesListAvailableSizes', function() {
      it('should call virtualMachinesListAvailableSizes successfully', function(done) {
        //uncomment below and update the code to test virtualMachinesListAvailableSizes
        //instance.virtualMachinesListAvailableSizes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachinesListByLocation', function() {
      it('should call virtualMachinesListByLocation successfully', function(done) {
        //uncomment below and update the code to test virtualMachinesListByLocation
        //instance.virtualMachinesListByLocation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachinesPerformMaintenance', function() {
      it('should call virtualMachinesPerformMaintenance successfully', function(done) {
        //uncomment below and update the code to test virtualMachinesPerformMaintenance
        //instance.virtualMachinesPerformMaintenance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachinesPowerOff', function() {
      it('should call virtualMachinesPowerOff successfully', function(done) {
        //uncomment below and update the code to test virtualMachinesPowerOff
        //instance.virtualMachinesPowerOff(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachinesRedeploy', function() {
      it('should call virtualMachinesRedeploy successfully', function(done) {
        //uncomment below and update the code to test virtualMachinesRedeploy
        //instance.virtualMachinesRedeploy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachinesRestart', function() {
      it('should call virtualMachinesRestart successfully', function(done) {
        //uncomment below and update the code to test virtualMachinesRestart
        //instance.virtualMachinesRestart(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachinesStart', function() {
      it('should call virtualMachinesStart successfully', function(done) {
        //uncomment below and update the code to test virtualMachinesStart
        //instance.virtualMachinesStart(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
