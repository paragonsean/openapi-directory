/*
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2017-03-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.OperationStatusResponse;
import org.openapitools.client.model.VirtualMachine;
import org.openapitools.client.model.VirtualMachineCaptureParameters;
import org.openapitools.client.model.VirtualMachineCaptureResult;
import org.openapitools.client.model.VirtualMachineInstanceView;
import org.openapitools.client.model.VirtualMachineListResult;
import org.openapitools.client.model.VirtualMachineSizeListResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VirtualMachinesApi
 */
@Disabled
public class VirtualMachinesApiTest {

    private final VirtualMachinesApi api = new VirtualMachinesApi();

    /**
     * Captures the VM by copying virtual hard disks of the VM and outputs a template that can be used to create similar VMs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualMachinesCaptureTest() throws ApiException {
        String resourceGroupName = null;
        String vmName = null;
        String apiVersion = null;
        String subscriptionId = null;
        VirtualMachineCaptureParameters parameters = null;
        VirtualMachineCaptureResult response = api.virtualMachinesCapture(resourceGroupName, vmName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Converts virtual machine disks from blob-based to managed disks. Virtual machine must be stop-deallocated before invoking this operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualMachinesConvertToManagedDisksTest() throws ApiException {
        String resourceGroupName = null;
        String vmName = null;
        String apiVersion = null;
        String subscriptionId = null;
        OperationStatusResponse response = api.virtualMachinesConvertToManagedDisks(resourceGroupName, vmName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * The operation to create or update a virtual machine.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualMachinesCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String vmName = null;
        String apiVersion = null;
        String subscriptionId = null;
        VirtualMachine parameters = null;
        VirtualMachine response = api.virtualMachinesCreateOrUpdate(resourceGroupName, vmName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Shuts down the virtual machine and releases the compute resources. You are not billed for the compute resources that this virtual machine uses.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualMachinesDeallocateTest() throws ApiException {
        String resourceGroupName = null;
        String vmName = null;
        String apiVersion = null;
        String subscriptionId = null;
        OperationStatusResponse response = api.virtualMachinesDeallocate(resourceGroupName, vmName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * The operation to delete a virtual machine.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualMachinesDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String vmName = null;
        String apiVersion = null;
        String subscriptionId = null;
        OperationStatusResponse response = api.virtualMachinesDelete(resourceGroupName, vmName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Sets the state of the virtual machine to generalized.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualMachinesGeneralizeTest() throws ApiException {
        String resourceGroupName = null;
        String vmName = null;
        String apiVersion = null;
        String subscriptionId = null;
        OperationStatusResponse response = api.virtualMachinesGeneralize(resourceGroupName, vmName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Retrieves information about the model view or the instance view of a virtual machine.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualMachinesGetTest() throws ApiException {
        String resourceGroupName = null;
        String vmName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String $expand = null;
        VirtualMachine response = api.virtualMachinesGet(resourceGroupName, vmName, apiVersion, subscriptionId, $expand);
        // TODO: test validations
    }

    /**
     * Retrieves information about the run-time state of a virtual machine.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualMachinesInstanceViewTest() throws ApiException {
        String resourceGroupName = null;
        String vmName = null;
        String apiVersion = null;
        String subscriptionId = null;
        VirtualMachineInstanceView response = api.virtualMachinesInstanceView(resourceGroupName, vmName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists all of the virtual machines in the specified resource group. Use the nextLink property in the response to get the next page of virtual machines.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualMachinesListTest() throws ApiException {
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        VirtualMachineListResult response = api.virtualMachinesList(resourceGroupName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists all of the virtual machines in the specified subscription. Use the nextLink property in the response to get the next page of virtual machines.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualMachinesListAllTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        VirtualMachineListResult response = api.virtualMachinesListAll(apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists all available virtual machine sizes to which the specified virtual machine can be resized.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualMachinesListAvailableSizesTest() throws ApiException {
        String resourceGroupName = null;
        String vmName = null;
        String apiVersion = null;
        String subscriptionId = null;
        VirtualMachineSizeListResult response = api.virtualMachinesListAvailableSizes(resourceGroupName, vmName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets all the virtual machines under the specified subscription for the specified location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualMachinesListByLocationTest() throws ApiException {
        String location = null;
        String apiVersion = null;
        String subscriptionId = null;
        VirtualMachineListResult response = api.virtualMachinesListByLocation(location, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * The operation to perform maintenance on a virtual machine.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualMachinesPerformMaintenanceTest() throws ApiException {
        String resourceGroupName = null;
        String vmName = null;
        String apiVersion = null;
        String subscriptionId = null;
        OperationStatusResponse response = api.virtualMachinesPerformMaintenance(resourceGroupName, vmName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * The operation to power off (stop) a virtual machine. The virtual machine can be restarted with the same provisioned resources. You are still charged for this virtual machine.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualMachinesPowerOffTest() throws ApiException {
        String resourceGroupName = null;
        String vmName = null;
        String apiVersion = null;
        String subscriptionId = null;
        OperationStatusResponse response = api.virtualMachinesPowerOff(resourceGroupName, vmName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Shuts down the virtual machine, moves it to a new node, and powers it back on.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualMachinesRedeployTest() throws ApiException {
        String resourceGroupName = null;
        String vmName = null;
        String apiVersion = null;
        String subscriptionId = null;
        OperationStatusResponse response = api.virtualMachinesRedeploy(resourceGroupName, vmName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * The operation to restart a virtual machine.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualMachinesRestartTest() throws ApiException {
        String resourceGroupName = null;
        String vmName = null;
        String apiVersion = null;
        String subscriptionId = null;
        OperationStatusResponse response = api.virtualMachinesRestart(resourceGroupName, vmName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * The operation to start a virtual machine.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualMachinesStartTest() throws ApiException {
        String resourceGroupName = null;
        String vmName = null;
        String apiVersion = null;
        String subscriptionId = null;
        OperationStatusResponse response = api.virtualMachinesStart(resourceGroupName, vmName, apiVersion, subscriptionId);
        // TODO: test validations
    }

}
