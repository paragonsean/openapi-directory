# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.upgrade_policy import UpgradePolicy
from openapi_server.models.virtual_machine_scale_set_update_vm_profile import VirtualMachineScaleSetUpdateVMProfile
from openapi_server import util


class VirtualMachineScaleSetUpdateProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, overprovision: bool=None, single_placement_group: bool=None, upgrade_policy: UpgradePolicy=None, virtual_machine_profile: VirtualMachineScaleSetUpdateVMProfile=None):
        """VirtualMachineScaleSetUpdateProperties - a model defined in OpenAPI

        :param overprovision: The overprovision of this VirtualMachineScaleSetUpdateProperties.
        :param single_placement_group: The single_placement_group of this VirtualMachineScaleSetUpdateProperties.
        :param upgrade_policy: The upgrade_policy of this VirtualMachineScaleSetUpdateProperties.
        :param virtual_machine_profile: The virtual_machine_profile of this VirtualMachineScaleSetUpdateProperties.
        """
        self.openapi_types = {
            'overprovision': bool,
            'single_placement_group': bool,
            'upgrade_policy': UpgradePolicy,
            'virtual_machine_profile': VirtualMachineScaleSetUpdateVMProfile
        }

        self.attribute_map = {
            'overprovision': 'overprovision',
            'single_placement_group': 'singlePlacementGroup',
            'upgrade_policy': 'upgradePolicy',
            'virtual_machine_profile': 'virtualMachineProfile'
        }

        self._overprovision = overprovision
        self._single_placement_group = single_placement_group
        self._upgrade_policy = upgrade_policy
        self._virtual_machine_profile = virtual_machine_profile

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualMachineScaleSetUpdateProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualMachineScaleSetUpdateProperties of this VirtualMachineScaleSetUpdateProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def overprovision(self):
        """Gets the overprovision of this VirtualMachineScaleSetUpdateProperties.

        Specifies whether the Virtual Machine Scale Set should be overprovisioned.

        :return: The overprovision of this VirtualMachineScaleSetUpdateProperties.
        :rtype: bool
        """
        return self._overprovision

    @overprovision.setter
    def overprovision(self, overprovision):
        """Sets the overprovision of this VirtualMachineScaleSetUpdateProperties.

        Specifies whether the Virtual Machine Scale Set should be overprovisioned.

        :param overprovision: The overprovision of this VirtualMachineScaleSetUpdateProperties.
        :type overprovision: bool
        """

        self._overprovision = overprovision

    @property
    def single_placement_group(self):
        """Gets the single_placement_group of this VirtualMachineScaleSetUpdateProperties.

        When true this limits the scale set to a single placement group, of max size 100 virtual machines.

        :return: The single_placement_group of this VirtualMachineScaleSetUpdateProperties.
        :rtype: bool
        """
        return self._single_placement_group

    @single_placement_group.setter
    def single_placement_group(self, single_placement_group):
        """Sets the single_placement_group of this VirtualMachineScaleSetUpdateProperties.

        When true this limits the scale set to a single placement group, of max size 100 virtual machines.

        :param single_placement_group: The single_placement_group of this VirtualMachineScaleSetUpdateProperties.
        :type single_placement_group: bool
        """

        self._single_placement_group = single_placement_group

    @property
    def upgrade_policy(self):
        """Gets the upgrade_policy of this VirtualMachineScaleSetUpdateProperties.


        :return: The upgrade_policy of this VirtualMachineScaleSetUpdateProperties.
        :rtype: UpgradePolicy
        """
        return self._upgrade_policy

    @upgrade_policy.setter
    def upgrade_policy(self, upgrade_policy):
        """Sets the upgrade_policy of this VirtualMachineScaleSetUpdateProperties.


        :param upgrade_policy: The upgrade_policy of this VirtualMachineScaleSetUpdateProperties.
        :type upgrade_policy: UpgradePolicy
        """

        self._upgrade_policy = upgrade_policy

    @property
    def virtual_machine_profile(self):
        """Gets the virtual_machine_profile of this VirtualMachineScaleSetUpdateProperties.


        :return: The virtual_machine_profile of this VirtualMachineScaleSetUpdateProperties.
        :rtype: VirtualMachineScaleSetUpdateVMProfile
        """
        return self._virtual_machine_profile

    @virtual_machine_profile.setter
    def virtual_machine_profile(self, virtual_machine_profile):
        """Sets the virtual_machine_profile of this VirtualMachineScaleSetUpdateProperties.


        :param virtual_machine_profile: The virtual_machine_profile of this VirtualMachineScaleSetUpdateProperties.
        :type virtual_machine_profile: VirtualMachineScaleSetUpdateVMProfile
        """

        self._virtual_machine_profile = virtual_machine_profile
