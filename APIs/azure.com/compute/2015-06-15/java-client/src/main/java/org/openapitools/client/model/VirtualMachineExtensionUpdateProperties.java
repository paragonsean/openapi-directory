/*
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2015-06-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the properties of a Virtual Machine Extension.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:49:29.108852-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VirtualMachineExtensionUpdateProperties {
  public static final String SERIALIZED_NAME_AUTO_UPGRADE_MINOR_VERSION = "autoUpgradeMinorVersion";
  @SerializedName(SERIALIZED_NAME_AUTO_UPGRADE_MINOR_VERSION)
  private Boolean autoUpgradeMinorVersion;

  public static final String SERIALIZED_NAME_FORCE_UPDATE_TAG = "forceUpdateTag";
  @SerializedName(SERIALIZED_NAME_FORCE_UPDATE_TAG)
  private String forceUpdateTag;

  public static final String SERIALIZED_NAME_PROTECTED_SETTINGS = "protectedSettings";
  @SerializedName(SERIALIZED_NAME_PROTECTED_SETTINGS)
  private Object protectedSettings;

  public static final String SERIALIZED_NAME_PUBLISHER = "publisher";
  @SerializedName(SERIALIZED_NAME_PUBLISHER)
  private String publisher;

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private Object settings;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_TYPE_HANDLER_VERSION = "typeHandlerVersion";
  @SerializedName(SERIALIZED_NAME_TYPE_HANDLER_VERSION)
  private String typeHandlerVersion;

  public VirtualMachineExtensionUpdateProperties() {
  }

  public VirtualMachineExtensionUpdateProperties autoUpgradeMinorVersion(Boolean autoUpgradeMinorVersion) {
    this.autoUpgradeMinorVersion = autoUpgradeMinorVersion;
    return this;
  }

  /**
   * Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
   * @return autoUpgradeMinorVersion
   */
  @javax.annotation.Nullable
  public Boolean getAutoUpgradeMinorVersion() {
    return autoUpgradeMinorVersion;
  }

  public void setAutoUpgradeMinorVersion(Boolean autoUpgradeMinorVersion) {
    this.autoUpgradeMinorVersion = autoUpgradeMinorVersion;
  }


  public VirtualMachineExtensionUpdateProperties forceUpdateTag(String forceUpdateTag) {
    this.forceUpdateTag = forceUpdateTag;
    return this;
  }

  /**
   * How the extension handler should be forced to update even if the extension configuration has not changed.
   * @return forceUpdateTag
   */
  @javax.annotation.Nullable
  public String getForceUpdateTag() {
    return forceUpdateTag;
  }

  public void setForceUpdateTag(String forceUpdateTag) {
    this.forceUpdateTag = forceUpdateTag;
  }


  public VirtualMachineExtensionUpdateProperties protectedSettings(Object protectedSettings) {
    this.protectedSettings = protectedSettings;
    return this;
  }

  /**
   * The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
   * @return protectedSettings
   */
  @javax.annotation.Nullable
  public Object getProtectedSettings() {
    return protectedSettings;
  }

  public void setProtectedSettings(Object protectedSettings) {
    this.protectedSettings = protectedSettings;
  }


  public VirtualMachineExtensionUpdateProperties publisher(String publisher) {
    this.publisher = publisher;
    return this;
  }

  /**
   * The name of the extension handler publisher.
   * @return publisher
   */
  @javax.annotation.Nullable
  public String getPublisher() {
    return publisher;
  }

  public void setPublisher(String publisher) {
    this.publisher = publisher;
  }


  public VirtualMachineExtensionUpdateProperties settings(Object settings) {
    this.settings = settings;
    return this;
  }

  /**
   * Json formatted public settings for the extension.
   * @return settings
   */
  @javax.annotation.Nullable
  public Object getSettings() {
    return settings;
  }

  public void setSettings(Object settings) {
    this.settings = settings;
  }


  public VirtualMachineExtensionUpdateProperties type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Specifies the type of the extension; an example is \&quot;CustomScriptExtension\&quot;.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public VirtualMachineExtensionUpdateProperties typeHandlerVersion(String typeHandlerVersion) {
    this.typeHandlerVersion = typeHandlerVersion;
    return this;
  }

  /**
   * Specifies the version of the script handler.
   * @return typeHandlerVersion
   */
  @javax.annotation.Nullable
  public String getTypeHandlerVersion() {
    return typeHandlerVersion;
  }

  public void setTypeHandlerVersion(String typeHandlerVersion) {
    this.typeHandlerVersion = typeHandlerVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualMachineExtensionUpdateProperties virtualMachineExtensionUpdateProperties = (VirtualMachineExtensionUpdateProperties) o;
    return Objects.equals(this.autoUpgradeMinorVersion, virtualMachineExtensionUpdateProperties.autoUpgradeMinorVersion) &&
        Objects.equals(this.forceUpdateTag, virtualMachineExtensionUpdateProperties.forceUpdateTag) &&
        Objects.equals(this.protectedSettings, virtualMachineExtensionUpdateProperties.protectedSettings) &&
        Objects.equals(this.publisher, virtualMachineExtensionUpdateProperties.publisher) &&
        Objects.equals(this.settings, virtualMachineExtensionUpdateProperties.settings) &&
        Objects.equals(this.type, virtualMachineExtensionUpdateProperties.type) &&
        Objects.equals(this.typeHandlerVersion, virtualMachineExtensionUpdateProperties.typeHandlerVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoUpgradeMinorVersion, forceUpdateTag, protectedSettings, publisher, settings, type, typeHandlerVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualMachineExtensionUpdateProperties {\n");
    sb.append("    autoUpgradeMinorVersion: ").append(toIndentedString(autoUpgradeMinorVersion)).append("\n");
    sb.append("    forceUpdateTag: ").append(toIndentedString(forceUpdateTag)).append("\n");
    sb.append("    protectedSettings: ").append(toIndentedString(protectedSettings)).append("\n");
    sb.append("    publisher: ").append(toIndentedString(publisher)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    typeHandlerVersion: ").append(toIndentedString(typeHandlerVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoUpgradeMinorVersion");
    openapiFields.add("forceUpdateTag");
    openapiFields.add("protectedSettings");
    openapiFields.add("publisher");
    openapiFields.add("settings");
    openapiFields.add("type");
    openapiFields.add("typeHandlerVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualMachineExtensionUpdateProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualMachineExtensionUpdateProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualMachineExtensionUpdateProperties is not found in the empty JSON string", VirtualMachineExtensionUpdateProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualMachineExtensionUpdateProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualMachineExtensionUpdateProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("forceUpdateTag") != null && !jsonObj.get("forceUpdateTag").isJsonNull()) && !jsonObj.get("forceUpdateTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forceUpdateTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forceUpdateTag").toString()));
      }
      if ((jsonObj.get("publisher") != null && !jsonObj.get("publisher").isJsonNull()) && !jsonObj.get("publisher").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisher` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisher").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("typeHandlerVersion") != null && !jsonObj.get("typeHandlerVersion").isJsonNull()) && !jsonObj.get("typeHandlerVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeHandlerVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeHandlerVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualMachineExtensionUpdateProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualMachineExtensionUpdateProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualMachineExtensionUpdateProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualMachineExtensionUpdateProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualMachineExtensionUpdateProperties>() {
           @Override
           public void write(JsonWriter out, VirtualMachineExtensionUpdateProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualMachineExtensionUpdateProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualMachineExtensionUpdateProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualMachineExtensionUpdateProperties
   * @throws IOException if the JSON string is invalid with respect to VirtualMachineExtensionUpdateProperties
   */
  public static VirtualMachineExtensionUpdateProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualMachineExtensionUpdateProperties.class);
  }

  /**
   * Convert an instance of VirtualMachineExtensionUpdateProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

