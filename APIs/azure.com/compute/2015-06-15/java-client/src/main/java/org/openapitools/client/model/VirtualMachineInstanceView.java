/*
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2015-06-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BootDiagnosticsInstanceView;
import org.openapitools.client.model.DiskInstanceView;
import org.openapitools.client.model.InstanceViewStatus;
import org.openapitools.client.model.VirtualMachineAgentInstanceView;
import org.openapitools.client.model.VirtualMachineExtensionInstanceView;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The instance view of a virtual machine.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:49:29.108852-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VirtualMachineInstanceView {
  public static final String SERIALIZED_NAME_BOOT_DIAGNOSTICS = "bootDiagnostics";
  @SerializedName(SERIALIZED_NAME_BOOT_DIAGNOSTICS)
  private BootDiagnosticsInstanceView bootDiagnostics;

  public static final String SERIALIZED_NAME_DISKS = "disks";
  @SerializedName(SERIALIZED_NAME_DISKS)
  private List<DiskInstanceView> disks = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXTENSIONS = "extensions";
  @SerializedName(SERIALIZED_NAME_EXTENSIONS)
  private List<VirtualMachineExtensionInstanceView> extensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLATFORM_FAULT_DOMAIN = "platformFaultDomain";
  @SerializedName(SERIALIZED_NAME_PLATFORM_FAULT_DOMAIN)
  private Integer platformFaultDomain;

  public static final String SERIALIZED_NAME_PLATFORM_UPDATE_DOMAIN = "platformUpdateDomain";
  @SerializedName(SERIALIZED_NAME_PLATFORM_UPDATE_DOMAIN)
  private Integer platformUpdateDomain;

  public static final String SERIALIZED_NAME_RDP_THUMB_PRINT = "rdpThumbPrint";
  @SerializedName(SERIALIZED_NAME_RDP_THUMB_PRINT)
  private String rdpThumbPrint;

  public static final String SERIALIZED_NAME_STATUSES = "statuses";
  @SerializedName(SERIALIZED_NAME_STATUSES)
  private List<InstanceViewStatus> statuses = new ArrayList<>();

  public static final String SERIALIZED_NAME_VM_AGENT = "vmAgent";
  @SerializedName(SERIALIZED_NAME_VM_AGENT)
  private VirtualMachineAgentInstanceView vmAgent;

  public VirtualMachineInstanceView() {
  }

  public VirtualMachineInstanceView bootDiagnostics(BootDiagnosticsInstanceView bootDiagnostics) {
    this.bootDiagnostics = bootDiagnostics;
    return this;
  }

  /**
   * Get bootDiagnostics
   * @return bootDiagnostics
   */
  @javax.annotation.Nullable
  public BootDiagnosticsInstanceView getBootDiagnostics() {
    return bootDiagnostics;
  }

  public void setBootDiagnostics(BootDiagnosticsInstanceView bootDiagnostics) {
    this.bootDiagnostics = bootDiagnostics;
  }


  public VirtualMachineInstanceView disks(List<DiskInstanceView> disks) {
    this.disks = disks;
    return this;
  }

  public VirtualMachineInstanceView addDisksItem(DiskInstanceView disksItem) {
    if (this.disks == null) {
      this.disks = new ArrayList<>();
    }
    this.disks.add(disksItem);
    return this;
  }

  /**
   * The virtual machine disk information.
   * @return disks
   */
  @javax.annotation.Nullable
  public List<DiskInstanceView> getDisks() {
    return disks;
  }

  public void setDisks(List<DiskInstanceView> disks) {
    this.disks = disks;
  }


  public VirtualMachineInstanceView extensions(List<VirtualMachineExtensionInstanceView> extensions) {
    this.extensions = extensions;
    return this;
  }

  public VirtualMachineInstanceView addExtensionsItem(VirtualMachineExtensionInstanceView extensionsItem) {
    if (this.extensions == null) {
      this.extensions = new ArrayList<>();
    }
    this.extensions.add(extensionsItem);
    return this;
  }

  /**
   * The extensions information.
   * @return extensions
   */
  @javax.annotation.Nullable
  public List<VirtualMachineExtensionInstanceView> getExtensions() {
    return extensions;
  }

  public void setExtensions(List<VirtualMachineExtensionInstanceView> extensions) {
    this.extensions = extensions;
  }


  public VirtualMachineInstanceView platformFaultDomain(Integer platformFaultDomain) {
    this.platformFaultDomain = platformFaultDomain;
    return this;
  }

  /**
   * Specifies the fault domain of the virtual machine.
   * @return platformFaultDomain
   */
  @javax.annotation.Nullable
  public Integer getPlatformFaultDomain() {
    return platformFaultDomain;
  }

  public void setPlatformFaultDomain(Integer platformFaultDomain) {
    this.platformFaultDomain = platformFaultDomain;
  }


  public VirtualMachineInstanceView platformUpdateDomain(Integer platformUpdateDomain) {
    this.platformUpdateDomain = platformUpdateDomain;
    return this;
  }

  /**
   * Specifies the update domain of the virtual machine.
   * @return platformUpdateDomain
   */
  @javax.annotation.Nullable
  public Integer getPlatformUpdateDomain() {
    return platformUpdateDomain;
  }

  public void setPlatformUpdateDomain(Integer platformUpdateDomain) {
    this.platformUpdateDomain = platformUpdateDomain;
  }


  public VirtualMachineInstanceView rdpThumbPrint(String rdpThumbPrint) {
    this.rdpThumbPrint = rdpThumbPrint;
    return this;
  }

  /**
   * The Remote desktop certificate thumbprint.
   * @return rdpThumbPrint
   */
  @javax.annotation.Nullable
  public String getRdpThumbPrint() {
    return rdpThumbPrint;
  }

  public void setRdpThumbPrint(String rdpThumbPrint) {
    this.rdpThumbPrint = rdpThumbPrint;
  }


  public VirtualMachineInstanceView statuses(List<InstanceViewStatus> statuses) {
    this.statuses = statuses;
    return this;
  }

  public VirtualMachineInstanceView addStatusesItem(InstanceViewStatus statusesItem) {
    if (this.statuses == null) {
      this.statuses = new ArrayList<>();
    }
    this.statuses.add(statusesItem);
    return this;
  }

  /**
   * The resource status information.
   * @return statuses
   */
  @javax.annotation.Nullable
  public List<InstanceViewStatus> getStatuses() {
    return statuses;
  }

  public void setStatuses(List<InstanceViewStatus> statuses) {
    this.statuses = statuses;
  }


  public VirtualMachineInstanceView vmAgent(VirtualMachineAgentInstanceView vmAgent) {
    this.vmAgent = vmAgent;
    return this;
  }

  /**
   * Get vmAgent
   * @return vmAgent
   */
  @javax.annotation.Nullable
  public VirtualMachineAgentInstanceView getVmAgent() {
    return vmAgent;
  }

  public void setVmAgent(VirtualMachineAgentInstanceView vmAgent) {
    this.vmAgent = vmAgent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualMachineInstanceView virtualMachineInstanceView = (VirtualMachineInstanceView) o;
    return Objects.equals(this.bootDiagnostics, virtualMachineInstanceView.bootDiagnostics) &&
        Objects.equals(this.disks, virtualMachineInstanceView.disks) &&
        Objects.equals(this.extensions, virtualMachineInstanceView.extensions) &&
        Objects.equals(this.platformFaultDomain, virtualMachineInstanceView.platformFaultDomain) &&
        Objects.equals(this.platformUpdateDomain, virtualMachineInstanceView.platformUpdateDomain) &&
        Objects.equals(this.rdpThumbPrint, virtualMachineInstanceView.rdpThumbPrint) &&
        Objects.equals(this.statuses, virtualMachineInstanceView.statuses) &&
        Objects.equals(this.vmAgent, virtualMachineInstanceView.vmAgent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bootDiagnostics, disks, extensions, platformFaultDomain, platformUpdateDomain, rdpThumbPrint, statuses, vmAgent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualMachineInstanceView {\n");
    sb.append("    bootDiagnostics: ").append(toIndentedString(bootDiagnostics)).append("\n");
    sb.append("    disks: ").append(toIndentedString(disks)).append("\n");
    sb.append("    extensions: ").append(toIndentedString(extensions)).append("\n");
    sb.append("    platformFaultDomain: ").append(toIndentedString(platformFaultDomain)).append("\n");
    sb.append("    platformUpdateDomain: ").append(toIndentedString(platformUpdateDomain)).append("\n");
    sb.append("    rdpThumbPrint: ").append(toIndentedString(rdpThumbPrint)).append("\n");
    sb.append("    statuses: ").append(toIndentedString(statuses)).append("\n");
    sb.append("    vmAgent: ").append(toIndentedString(vmAgent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bootDiagnostics");
    openapiFields.add("disks");
    openapiFields.add("extensions");
    openapiFields.add("platformFaultDomain");
    openapiFields.add("platformUpdateDomain");
    openapiFields.add("rdpThumbPrint");
    openapiFields.add("statuses");
    openapiFields.add("vmAgent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualMachineInstanceView
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualMachineInstanceView.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualMachineInstanceView is not found in the empty JSON string", VirtualMachineInstanceView.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualMachineInstanceView.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualMachineInstanceView` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bootDiagnostics`
      if (jsonObj.get("bootDiagnostics") != null && !jsonObj.get("bootDiagnostics").isJsonNull()) {
        BootDiagnosticsInstanceView.validateJsonElement(jsonObj.get("bootDiagnostics"));
      }
      if (jsonObj.get("disks") != null && !jsonObj.get("disks").isJsonNull()) {
        JsonArray jsonArraydisks = jsonObj.getAsJsonArray("disks");
        if (jsonArraydisks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("disks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `disks` to be an array in the JSON string but got `%s`", jsonObj.get("disks").toString()));
          }

          // validate the optional field `disks` (array)
          for (int i = 0; i < jsonArraydisks.size(); i++) {
            DiskInstanceView.validateJsonElement(jsonArraydisks.get(i));
          };
        }
      }
      if (jsonObj.get("extensions") != null && !jsonObj.get("extensions").isJsonNull()) {
        JsonArray jsonArrayextensions = jsonObj.getAsJsonArray("extensions");
        if (jsonArrayextensions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("extensions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `extensions` to be an array in the JSON string but got `%s`", jsonObj.get("extensions").toString()));
          }

          // validate the optional field `extensions` (array)
          for (int i = 0; i < jsonArrayextensions.size(); i++) {
            VirtualMachineExtensionInstanceView.validateJsonElement(jsonArrayextensions.get(i));
          };
        }
      }
      if ((jsonObj.get("rdpThumbPrint") != null && !jsonObj.get("rdpThumbPrint").isJsonNull()) && !jsonObj.get("rdpThumbPrint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rdpThumbPrint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rdpThumbPrint").toString()));
      }
      if (jsonObj.get("statuses") != null && !jsonObj.get("statuses").isJsonNull()) {
        JsonArray jsonArraystatuses = jsonObj.getAsJsonArray("statuses");
        if (jsonArraystatuses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("statuses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `statuses` to be an array in the JSON string but got `%s`", jsonObj.get("statuses").toString()));
          }

          // validate the optional field `statuses` (array)
          for (int i = 0; i < jsonArraystatuses.size(); i++) {
            InstanceViewStatus.validateJsonElement(jsonArraystatuses.get(i));
          };
        }
      }
      // validate the optional field `vmAgent`
      if (jsonObj.get("vmAgent") != null && !jsonObj.get("vmAgent").isJsonNull()) {
        VirtualMachineAgentInstanceView.validateJsonElement(jsonObj.get("vmAgent"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualMachineInstanceView.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualMachineInstanceView' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualMachineInstanceView> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualMachineInstanceView.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualMachineInstanceView>() {
           @Override
           public void write(JsonWriter out, VirtualMachineInstanceView value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualMachineInstanceView read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualMachineInstanceView given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualMachineInstanceView
   * @throws IOException if the JSON string is invalid with respect to VirtualMachineInstanceView
   */
  public static VirtualMachineInstanceView fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualMachineInstanceView.class);
  }

  /**
   * Convert an instance of VirtualMachineInstanceView to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

