/*
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2015-06-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InstanceViewStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The instance view of a virtual machine extension.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:49:29.108852-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VirtualMachineExtensionInstanceView {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATUSES = "statuses";
  @SerializedName(SERIALIZED_NAME_STATUSES)
  private List<InstanceViewStatus> statuses = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBSTATUSES = "substatuses";
  @SerializedName(SERIALIZED_NAME_SUBSTATUSES)
  private List<InstanceViewStatus> substatuses = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_TYPE_HANDLER_VERSION = "typeHandlerVersion";
  @SerializedName(SERIALIZED_NAME_TYPE_HANDLER_VERSION)
  private String typeHandlerVersion;

  public VirtualMachineExtensionInstanceView() {
  }

  public VirtualMachineExtensionInstanceView name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The virtual machine extension name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public VirtualMachineExtensionInstanceView statuses(List<InstanceViewStatus> statuses) {
    this.statuses = statuses;
    return this;
  }

  public VirtualMachineExtensionInstanceView addStatusesItem(InstanceViewStatus statusesItem) {
    if (this.statuses == null) {
      this.statuses = new ArrayList<>();
    }
    this.statuses.add(statusesItem);
    return this;
  }

  /**
   * The resource status information.
   * @return statuses
   */
  @javax.annotation.Nullable
  public List<InstanceViewStatus> getStatuses() {
    return statuses;
  }

  public void setStatuses(List<InstanceViewStatus> statuses) {
    this.statuses = statuses;
  }


  public VirtualMachineExtensionInstanceView substatuses(List<InstanceViewStatus> substatuses) {
    this.substatuses = substatuses;
    return this;
  }

  public VirtualMachineExtensionInstanceView addSubstatusesItem(InstanceViewStatus substatusesItem) {
    if (this.substatuses == null) {
      this.substatuses = new ArrayList<>();
    }
    this.substatuses.add(substatusesItem);
    return this;
  }

  /**
   * The resource status information.
   * @return substatuses
   */
  @javax.annotation.Nullable
  public List<InstanceViewStatus> getSubstatuses() {
    return substatuses;
  }

  public void setSubstatuses(List<InstanceViewStatus> substatuses) {
    this.substatuses = substatuses;
  }


  public VirtualMachineExtensionInstanceView type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Specifies the type of the extension; an example is \&quot;CustomScriptExtension\&quot;.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public VirtualMachineExtensionInstanceView typeHandlerVersion(String typeHandlerVersion) {
    this.typeHandlerVersion = typeHandlerVersion;
    return this;
  }

  /**
   * Specifies the version of the script handler.
   * @return typeHandlerVersion
   */
  @javax.annotation.Nullable
  public String getTypeHandlerVersion() {
    return typeHandlerVersion;
  }

  public void setTypeHandlerVersion(String typeHandlerVersion) {
    this.typeHandlerVersion = typeHandlerVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualMachineExtensionInstanceView virtualMachineExtensionInstanceView = (VirtualMachineExtensionInstanceView) o;
    return Objects.equals(this.name, virtualMachineExtensionInstanceView.name) &&
        Objects.equals(this.statuses, virtualMachineExtensionInstanceView.statuses) &&
        Objects.equals(this.substatuses, virtualMachineExtensionInstanceView.substatuses) &&
        Objects.equals(this.type, virtualMachineExtensionInstanceView.type) &&
        Objects.equals(this.typeHandlerVersion, virtualMachineExtensionInstanceView.typeHandlerVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, statuses, substatuses, type, typeHandlerVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualMachineExtensionInstanceView {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    statuses: ").append(toIndentedString(statuses)).append("\n");
    sb.append("    substatuses: ").append(toIndentedString(substatuses)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    typeHandlerVersion: ").append(toIndentedString(typeHandlerVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("statuses");
    openapiFields.add("substatuses");
    openapiFields.add("type");
    openapiFields.add("typeHandlerVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualMachineExtensionInstanceView
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualMachineExtensionInstanceView.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualMachineExtensionInstanceView is not found in the empty JSON string", VirtualMachineExtensionInstanceView.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualMachineExtensionInstanceView.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualMachineExtensionInstanceView` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("statuses") != null && !jsonObj.get("statuses").isJsonNull()) {
        JsonArray jsonArraystatuses = jsonObj.getAsJsonArray("statuses");
        if (jsonArraystatuses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("statuses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `statuses` to be an array in the JSON string but got `%s`", jsonObj.get("statuses").toString()));
          }

          // validate the optional field `statuses` (array)
          for (int i = 0; i < jsonArraystatuses.size(); i++) {
            InstanceViewStatus.validateJsonElement(jsonArraystatuses.get(i));
          };
        }
      }
      if (jsonObj.get("substatuses") != null && !jsonObj.get("substatuses").isJsonNull()) {
        JsonArray jsonArraysubstatuses = jsonObj.getAsJsonArray("substatuses");
        if (jsonArraysubstatuses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("substatuses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `substatuses` to be an array in the JSON string but got `%s`", jsonObj.get("substatuses").toString()));
          }

          // validate the optional field `substatuses` (array)
          for (int i = 0; i < jsonArraysubstatuses.size(); i++) {
            InstanceViewStatus.validateJsonElement(jsonArraysubstatuses.get(i));
          };
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("typeHandlerVersion") != null && !jsonObj.get("typeHandlerVersion").isJsonNull()) && !jsonObj.get("typeHandlerVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeHandlerVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeHandlerVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualMachineExtensionInstanceView.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualMachineExtensionInstanceView' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualMachineExtensionInstanceView> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualMachineExtensionInstanceView.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualMachineExtensionInstanceView>() {
           @Override
           public void write(JsonWriter out, VirtualMachineExtensionInstanceView value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualMachineExtensionInstanceView read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualMachineExtensionInstanceView given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualMachineExtensionInstanceView
   * @throws IOException if the JSON string is invalid with respect to VirtualMachineExtensionInstanceView
   */
  public static VirtualMachineExtensionInstanceView fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualMachineExtensionInstanceView.class);
  }

  /**
   * Convert an instance of VirtualMachineExtensionInstanceView to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

