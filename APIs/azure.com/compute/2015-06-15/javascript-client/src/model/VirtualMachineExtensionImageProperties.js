/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2015-06-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VirtualMachineExtensionImageProperties model module.
 * @module model/VirtualMachineExtensionImageProperties
 * @version 2015-06-15
 */
class VirtualMachineExtensionImageProperties {
    /**
     * Constructs a new <code>VirtualMachineExtensionImageProperties</code>.
     * Describes the properties of a Virtual Machine Extension Image.
     * @alias module:model/VirtualMachineExtensionImageProperties
     * @param computeRole {String} The type of role (IaaS or PaaS) this extension supports.
     * @param handlerSchema {String} The schema defined by publisher, where extension consumers should provide settings in a matching schema.
     * @param operatingSystem {String} The operating system this extension supports.
     */
    constructor(computeRole, handlerSchema, operatingSystem) { 
        
        VirtualMachineExtensionImageProperties.initialize(this, computeRole, handlerSchema, operatingSystem);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, computeRole, handlerSchema, operatingSystem) { 
        obj['computeRole'] = computeRole;
        obj['handlerSchema'] = handlerSchema;
        obj['operatingSystem'] = operatingSystem;
    }

    /**
     * Constructs a <code>VirtualMachineExtensionImageProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VirtualMachineExtensionImageProperties} obj Optional instance to populate.
     * @return {module:model/VirtualMachineExtensionImageProperties} The populated <code>VirtualMachineExtensionImageProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VirtualMachineExtensionImageProperties();

            if (data.hasOwnProperty('computeRole')) {
                obj['computeRole'] = ApiClient.convertToType(data['computeRole'], 'String');
            }
            if (data.hasOwnProperty('handlerSchema')) {
                obj['handlerSchema'] = ApiClient.convertToType(data['handlerSchema'], 'String');
            }
            if (data.hasOwnProperty('operatingSystem')) {
                obj['operatingSystem'] = ApiClient.convertToType(data['operatingSystem'], 'String');
            }
            if (data.hasOwnProperty('supportsMultipleExtensions')) {
                obj['supportsMultipleExtensions'] = ApiClient.convertToType(data['supportsMultipleExtensions'], 'Boolean');
            }
            if (data.hasOwnProperty('vmScaleSetEnabled')) {
                obj['vmScaleSetEnabled'] = ApiClient.convertToType(data['vmScaleSetEnabled'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VirtualMachineExtensionImageProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VirtualMachineExtensionImageProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VirtualMachineExtensionImageProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['computeRole'] && !(typeof data['computeRole'] === 'string' || data['computeRole'] instanceof String)) {
            throw new Error("Expected the field `computeRole` to be a primitive type in the JSON string but got " + data['computeRole']);
        }
        // ensure the json data is a string
        if (data['handlerSchema'] && !(typeof data['handlerSchema'] === 'string' || data['handlerSchema'] instanceof String)) {
            throw new Error("Expected the field `handlerSchema` to be a primitive type in the JSON string but got " + data['handlerSchema']);
        }
        // ensure the json data is a string
        if (data['operatingSystem'] && !(typeof data['operatingSystem'] === 'string' || data['operatingSystem'] instanceof String)) {
            throw new Error("Expected the field `operatingSystem` to be a primitive type in the JSON string but got " + data['operatingSystem']);
        }

        return true;
    }


}

VirtualMachineExtensionImageProperties.RequiredProperties = ["computeRole", "handlerSchema", "operatingSystem"];

/**
 * The type of role (IaaS or PaaS) this extension supports.
 * @member {String} computeRole
 */
VirtualMachineExtensionImageProperties.prototype['computeRole'] = undefined;

/**
 * The schema defined by publisher, where extension consumers should provide settings in a matching schema.
 * @member {String} handlerSchema
 */
VirtualMachineExtensionImageProperties.prototype['handlerSchema'] = undefined;

/**
 * The operating system this extension supports.
 * @member {String} operatingSystem
 */
VirtualMachineExtensionImageProperties.prototype['operatingSystem'] = undefined;

/**
 * Whether the handler can support multiple extensions.
 * @member {Boolean} supportsMultipleExtensions
 */
VirtualMachineExtensionImageProperties.prototype['supportsMultipleExtensions'] = undefined;

/**
 * Whether the extension can be used on xRP VMScaleSets. By default existing extensions are usable on scalesets, but there might be cases where a publisher wants to explicitly indicate the extension is only enabled for CRP VMs but not VMSS.
 * @member {Boolean} vmScaleSetEnabled
 */
VirtualMachineExtensionImageProperties.prototype['vmScaleSetEnabled'] = undefined;






export default VirtualMachineExtensionImageProperties;

