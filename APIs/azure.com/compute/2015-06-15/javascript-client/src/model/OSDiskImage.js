/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2015-06-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OSDiskImage model module.
 * @module model/OSDiskImage
 * @version 2015-06-15
 */
class OSDiskImage {
    /**
     * Constructs a new <code>OSDiskImage</code>.
     * Contains the os disk image information.
     * @alias module:model/OSDiskImage
     * @param operatingSystem {module:model/OSDiskImage.OperatingSystemEnum} The operating system of the osDiskImage.
     */
    constructor(operatingSystem) { 
        
        OSDiskImage.initialize(this, operatingSystem);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, operatingSystem) { 
        obj['operatingSystem'] = operatingSystem;
    }

    /**
     * Constructs a <code>OSDiskImage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OSDiskImage} obj Optional instance to populate.
     * @return {module:model/OSDiskImage} The populated <code>OSDiskImage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OSDiskImage();

            if (data.hasOwnProperty('operatingSystem')) {
                obj['operatingSystem'] = ApiClient.convertToType(data['operatingSystem'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OSDiskImage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OSDiskImage</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OSDiskImage.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['operatingSystem'] && !(typeof data['operatingSystem'] === 'string' || data['operatingSystem'] instanceof String)) {
            throw new Error("Expected the field `operatingSystem` to be a primitive type in the JSON string but got " + data['operatingSystem']);
        }

        return true;
    }


}

OSDiskImage.RequiredProperties = ["operatingSystem"];

/**
 * The operating system of the osDiskImage.
 * @member {module:model/OSDiskImage.OperatingSystemEnum} operatingSystem
 */
OSDiskImage.prototype['operatingSystem'] = undefined;





/**
 * Allowed values for the <code>operatingSystem</code> property.
 * @enum {String}
 * @readonly
 */
OSDiskImage['OperatingSystemEnum'] = {

    /**
     * value: "Windows"
     * @const
     */
    "Windows": "Windows",

    /**
     * value: "Linux"
     * @const
     */
    "Linux": "Linux"
};



export default OSDiskImage;

