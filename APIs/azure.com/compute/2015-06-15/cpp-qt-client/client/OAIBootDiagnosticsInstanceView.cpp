/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2015-06-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBootDiagnosticsInstanceView.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBootDiagnosticsInstanceView::OAIBootDiagnosticsInstanceView(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBootDiagnosticsInstanceView::OAIBootDiagnosticsInstanceView() {
    this->initializeModel();
}

OAIBootDiagnosticsInstanceView::~OAIBootDiagnosticsInstanceView() {}

void OAIBootDiagnosticsInstanceView::initializeModel() {

    m_console_screenshot_blob_uri_isSet = false;
    m_console_screenshot_blob_uri_isValid = false;

    m_serial_console_log_blob_uri_isSet = false;
    m_serial_console_log_blob_uri_isValid = false;
}

void OAIBootDiagnosticsInstanceView::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBootDiagnosticsInstanceView::fromJsonObject(QJsonObject json) {

    m_console_screenshot_blob_uri_isValid = ::OpenAPI::fromJsonValue(m_console_screenshot_blob_uri, json[QString("consoleScreenshotBlobUri")]);
    m_console_screenshot_blob_uri_isSet = !json[QString("consoleScreenshotBlobUri")].isNull() && m_console_screenshot_blob_uri_isValid;

    m_serial_console_log_blob_uri_isValid = ::OpenAPI::fromJsonValue(m_serial_console_log_blob_uri, json[QString("serialConsoleLogBlobUri")]);
    m_serial_console_log_blob_uri_isSet = !json[QString("serialConsoleLogBlobUri")].isNull() && m_serial_console_log_blob_uri_isValid;
}

QString OAIBootDiagnosticsInstanceView::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBootDiagnosticsInstanceView::asJsonObject() const {
    QJsonObject obj;
    if (m_console_screenshot_blob_uri_isSet) {
        obj.insert(QString("consoleScreenshotBlobUri"), ::OpenAPI::toJsonValue(m_console_screenshot_blob_uri));
    }
    if (m_serial_console_log_blob_uri_isSet) {
        obj.insert(QString("serialConsoleLogBlobUri"), ::OpenAPI::toJsonValue(m_serial_console_log_blob_uri));
    }
    return obj;
}

QString OAIBootDiagnosticsInstanceView::getConsoleScreenshotBlobUri() const {
    return m_console_screenshot_blob_uri;
}
void OAIBootDiagnosticsInstanceView::setConsoleScreenshotBlobUri(const QString &console_screenshot_blob_uri) {
    m_console_screenshot_blob_uri = console_screenshot_blob_uri;
    m_console_screenshot_blob_uri_isSet = true;
}

bool OAIBootDiagnosticsInstanceView::is_console_screenshot_blob_uri_Set() const{
    return m_console_screenshot_blob_uri_isSet;
}

bool OAIBootDiagnosticsInstanceView::is_console_screenshot_blob_uri_Valid() const{
    return m_console_screenshot_blob_uri_isValid;
}

QString OAIBootDiagnosticsInstanceView::getSerialConsoleLogBlobUri() const {
    return m_serial_console_log_blob_uri;
}
void OAIBootDiagnosticsInstanceView::setSerialConsoleLogBlobUri(const QString &serial_console_log_blob_uri) {
    m_serial_console_log_blob_uri = serial_console_log_blob_uri;
    m_serial_console_log_blob_uri_isSet = true;
}

bool OAIBootDiagnosticsInstanceView::is_serial_console_log_blob_uri_Set() const{
    return m_serial_console_log_blob_uri_isSet;
}

bool OAIBootDiagnosticsInstanceView::is_serial_console_log_blob_uri_Valid() const{
    return m_serial_console_log_blob_uri_isValid;
}

bool OAIBootDiagnosticsInstanceView::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_console_screenshot_blob_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_console_log_blob_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBootDiagnosticsInstanceView::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
