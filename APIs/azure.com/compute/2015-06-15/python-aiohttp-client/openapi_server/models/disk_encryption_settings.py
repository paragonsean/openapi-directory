# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.key_vault_key_reference import KeyVaultKeyReference
from openapi_server.models.key_vault_secret_reference import KeyVaultSecretReference
from openapi_server import util


class DiskEncryptionSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disk_encryption_key: KeyVaultSecretReference=None, enabled: bool=None, key_encryption_key: KeyVaultKeyReference=None):
        """DiskEncryptionSettings - a model defined in OpenAPI

        :param disk_encryption_key: The disk_encryption_key of this DiskEncryptionSettings.
        :param enabled: The enabled of this DiskEncryptionSettings.
        :param key_encryption_key: The key_encryption_key of this DiskEncryptionSettings.
        """
        self.openapi_types = {
            'disk_encryption_key': KeyVaultSecretReference,
            'enabled': bool,
            'key_encryption_key': KeyVaultKeyReference
        }

        self.attribute_map = {
            'disk_encryption_key': 'diskEncryptionKey',
            'enabled': 'enabled',
            'key_encryption_key': 'keyEncryptionKey'
        }

        self._disk_encryption_key = disk_encryption_key
        self._enabled = enabled
        self._key_encryption_key = key_encryption_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiskEncryptionSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiskEncryptionSettings of this DiskEncryptionSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disk_encryption_key(self):
        """Gets the disk_encryption_key of this DiskEncryptionSettings.


        :return: The disk_encryption_key of this DiskEncryptionSettings.
        :rtype: KeyVaultSecretReference
        """
        return self._disk_encryption_key

    @disk_encryption_key.setter
    def disk_encryption_key(self, disk_encryption_key):
        """Sets the disk_encryption_key of this DiskEncryptionSettings.


        :param disk_encryption_key: The disk_encryption_key of this DiskEncryptionSettings.
        :type disk_encryption_key: KeyVaultSecretReference
        """
        if disk_encryption_key is None:
            raise ValueError("Invalid value for `disk_encryption_key`, must not be `None`")

        self._disk_encryption_key = disk_encryption_key

    @property
    def enabled(self):
        """Gets the enabled of this DiskEncryptionSettings.

        Specifies whether disk encryption should be enabled on the virtual machine.

        :return: The enabled of this DiskEncryptionSettings.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this DiskEncryptionSettings.

        Specifies whether disk encryption should be enabled on the virtual machine.

        :param enabled: The enabled of this DiskEncryptionSettings.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def key_encryption_key(self):
        """Gets the key_encryption_key of this DiskEncryptionSettings.


        :return: The key_encryption_key of this DiskEncryptionSettings.
        :rtype: KeyVaultKeyReference
        """
        return self._key_encryption_key

    @key_encryption_key.setter
    def key_encryption_key(self, key_encryption_key):
        """Sets the key_encryption_key of this DiskEncryptionSettings.


        :param key_encryption_key: The key_encryption_key of this DiskEncryptionSettings.
        :type key_encryption_key: KeyVaultKeyReference
        """

        self._key_encryption_key = key_encryption_key
