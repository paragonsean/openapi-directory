# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_entity_reference import ApiEntityReference
from openapi_server.models.sub_resource import SubResource
from openapi_server import util


class VirtualMachineScaleSetIPConfigurationProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, load_balancer_backend_address_pools: List[SubResource]=None, load_balancer_inbound_nat_pools: List[SubResource]=None, subnet: ApiEntityReference=None):
        """VirtualMachineScaleSetIPConfigurationProperties - a model defined in OpenAPI

        :param load_balancer_backend_address_pools: The load_balancer_backend_address_pools of this VirtualMachineScaleSetIPConfigurationProperties.
        :param load_balancer_inbound_nat_pools: The load_balancer_inbound_nat_pools of this VirtualMachineScaleSetIPConfigurationProperties.
        :param subnet: The subnet of this VirtualMachineScaleSetIPConfigurationProperties.
        """
        self.openapi_types = {
            'load_balancer_backend_address_pools': List[SubResource],
            'load_balancer_inbound_nat_pools': List[SubResource],
            'subnet': ApiEntityReference
        }

        self.attribute_map = {
            'load_balancer_backend_address_pools': 'loadBalancerBackendAddressPools',
            'load_balancer_inbound_nat_pools': 'loadBalancerInboundNatPools',
            'subnet': 'subnet'
        }

        self._load_balancer_backend_address_pools = load_balancer_backend_address_pools
        self._load_balancer_inbound_nat_pools = load_balancer_inbound_nat_pools
        self._subnet = subnet

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualMachineScaleSetIPConfigurationProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualMachineScaleSetIPConfigurationProperties of this VirtualMachineScaleSetIPConfigurationProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def load_balancer_backend_address_pools(self):
        """Gets the load_balancer_backend_address_pools of this VirtualMachineScaleSetIPConfigurationProperties.

        The load balancer backend address pools.

        :return: The load_balancer_backend_address_pools of this VirtualMachineScaleSetIPConfigurationProperties.
        :rtype: List[SubResource]
        """
        return self._load_balancer_backend_address_pools

    @load_balancer_backend_address_pools.setter
    def load_balancer_backend_address_pools(self, load_balancer_backend_address_pools):
        """Sets the load_balancer_backend_address_pools of this VirtualMachineScaleSetIPConfigurationProperties.

        The load balancer backend address pools.

        :param load_balancer_backend_address_pools: The load_balancer_backend_address_pools of this VirtualMachineScaleSetIPConfigurationProperties.
        :type load_balancer_backend_address_pools: List[SubResource]
        """

        self._load_balancer_backend_address_pools = load_balancer_backend_address_pools

    @property
    def load_balancer_inbound_nat_pools(self):
        """Gets the load_balancer_inbound_nat_pools of this VirtualMachineScaleSetIPConfigurationProperties.

        The load balancer inbound nat pools.

        :return: The load_balancer_inbound_nat_pools of this VirtualMachineScaleSetIPConfigurationProperties.
        :rtype: List[SubResource]
        """
        return self._load_balancer_inbound_nat_pools

    @load_balancer_inbound_nat_pools.setter
    def load_balancer_inbound_nat_pools(self, load_balancer_inbound_nat_pools):
        """Sets the load_balancer_inbound_nat_pools of this VirtualMachineScaleSetIPConfigurationProperties.

        The load balancer inbound nat pools.

        :param load_balancer_inbound_nat_pools: The load_balancer_inbound_nat_pools of this VirtualMachineScaleSetIPConfigurationProperties.
        :type load_balancer_inbound_nat_pools: List[SubResource]
        """

        self._load_balancer_inbound_nat_pools = load_balancer_inbound_nat_pools

    @property
    def subnet(self):
        """Gets the subnet of this VirtualMachineScaleSetIPConfigurationProperties.


        :return: The subnet of this VirtualMachineScaleSetIPConfigurationProperties.
        :rtype: ApiEntityReference
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """Sets the subnet of this VirtualMachineScaleSetIPConfigurationProperties.


        :param subnet: The subnet of this VirtualMachineScaleSetIPConfigurationProperties.
        :type subnet: ApiEntityReference
        """
        if subnet is None:
            raise ValueError("Invalid value for `subnet`, must not be `None`")

        self._subnet = subnet
