# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WinRMListener(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate_url: str=None, protocol: str=None):
        """WinRMListener - a model defined in OpenAPI

        :param certificate_url: The certificate_url of this WinRMListener.
        :param protocol: The protocol of this WinRMListener.
        """
        self.openapi_types = {
            'certificate_url': str,
            'protocol': str
        }

        self.attribute_map = {
            'certificate_url': 'certificateUrl',
            'protocol': 'protocol'
        }

        self._certificate_url = certificate_url
        self._protocol = protocol

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WinRMListener':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WinRMListener of this WinRMListener.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate_url(self):
        """Gets the certificate_url of this WinRMListener.

        This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be It is the Base64 encoding of the following JSON Object which is encoded in UTF-8: <br><br> {<br>  \"data\":\"<Base64-encoded-certificate>\",<br>  \"dataType\":\"pfx\",<br>  \"password\":\"<pfx-file-password>\"<br>}

        :return: The certificate_url of this WinRMListener.
        :rtype: str
        """
        return self._certificate_url

    @certificate_url.setter
    def certificate_url(self, certificate_url):
        """Sets the certificate_url of this WinRMListener.

        This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be It is the Base64 encoding of the following JSON Object which is encoded in UTF-8: <br><br> {<br>  \"data\":\"<Base64-encoded-certificate>\",<br>  \"dataType\":\"pfx\",<br>  \"password\":\"<pfx-file-password>\"<br>}

        :param certificate_url: The certificate_url of this WinRMListener.
        :type certificate_url: str
        """

        self._certificate_url = certificate_url

    @property
    def protocol(self):
        """Gets the protocol of this WinRMListener.

        Specifies the protocol of listener. <br><br> Possible values are: <br>**http** <br><br> **https**

        :return: The protocol of this WinRMListener.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this WinRMListener.

        Specifies the protocol of listener. <br><br> Possible values are: <br>**http** <br><br> **https**

        :param protocol: The protocol of this WinRMListener.
        :type protocol: str
        """
        allowed_values = ["Http", "Https"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol
