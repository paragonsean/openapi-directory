# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.automatic_repairs_policy import AutomaticRepairsPolicy
from openapi_server.models.sub_resource import SubResource
from openapi_server.models.upgrade_policy import UpgradePolicy
from openapi_server.models.virtual_machine_scale_set_vm_profile import VirtualMachineScaleSetVMProfile
from openapi_server import util


class VirtualMachineScaleSetProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, automatic_repairs_policy: AutomaticRepairsPolicy=None, do_not_run_extensions_on_overprovisioned_vms: bool=None, overprovision: bool=None, platform_fault_domain_count: int=None, provisioning_state: str=None, proximity_placement_group: SubResource=None, single_placement_group: bool=None, unique_id: str=None, upgrade_policy: UpgradePolicy=None, virtual_machine_profile: VirtualMachineScaleSetVMProfile=None, zone_balance: bool=None):
        """VirtualMachineScaleSetProperties - a model defined in OpenAPI

        :param automatic_repairs_policy: The automatic_repairs_policy of this VirtualMachineScaleSetProperties.
        :param do_not_run_extensions_on_overprovisioned_vms: The do_not_run_extensions_on_overprovisioned_vms of this VirtualMachineScaleSetProperties.
        :param overprovision: The overprovision of this VirtualMachineScaleSetProperties.
        :param platform_fault_domain_count: The platform_fault_domain_count of this VirtualMachineScaleSetProperties.
        :param provisioning_state: The provisioning_state of this VirtualMachineScaleSetProperties.
        :param proximity_placement_group: The proximity_placement_group of this VirtualMachineScaleSetProperties.
        :param single_placement_group: The single_placement_group of this VirtualMachineScaleSetProperties.
        :param unique_id: The unique_id of this VirtualMachineScaleSetProperties.
        :param upgrade_policy: The upgrade_policy of this VirtualMachineScaleSetProperties.
        :param virtual_machine_profile: The virtual_machine_profile of this VirtualMachineScaleSetProperties.
        :param zone_balance: The zone_balance of this VirtualMachineScaleSetProperties.
        """
        self.openapi_types = {
            'automatic_repairs_policy': AutomaticRepairsPolicy,
            'do_not_run_extensions_on_overprovisioned_vms': bool,
            'overprovision': bool,
            'platform_fault_domain_count': int,
            'provisioning_state': str,
            'proximity_placement_group': SubResource,
            'single_placement_group': bool,
            'unique_id': str,
            'upgrade_policy': UpgradePolicy,
            'virtual_machine_profile': VirtualMachineScaleSetVMProfile,
            'zone_balance': bool
        }

        self.attribute_map = {
            'automatic_repairs_policy': 'automaticRepairsPolicy',
            'do_not_run_extensions_on_overprovisioned_vms': 'doNotRunExtensionsOnOverprovisionedVMs',
            'overprovision': 'overprovision',
            'platform_fault_domain_count': 'platformFaultDomainCount',
            'provisioning_state': 'provisioningState',
            'proximity_placement_group': 'proximityPlacementGroup',
            'single_placement_group': 'singlePlacementGroup',
            'unique_id': 'uniqueId',
            'upgrade_policy': 'upgradePolicy',
            'virtual_machine_profile': 'virtualMachineProfile',
            'zone_balance': 'zoneBalance'
        }

        self._automatic_repairs_policy = automatic_repairs_policy
        self._do_not_run_extensions_on_overprovisioned_vms = do_not_run_extensions_on_overprovisioned_vms
        self._overprovision = overprovision
        self._platform_fault_domain_count = platform_fault_domain_count
        self._provisioning_state = provisioning_state
        self._proximity_placement_group = proximity_placement_group
        self._single_placement_group = single_placement_group
        self._unique_id = unique_id
        self._upgrade_policy = upgrade_policy
        self._virtual_machine_profile = virtual_machine_profile
        self._zone_balance = zone_balance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualMachineScaleSetProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualMachineScaleSetProperties of this VirtualMachineScaleSetProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def automatic_repairs_policy(self):
        """Gets the automatic_repairs_policy of this VirtualMachineScaleSetProperties.


        :return: The automatic_repairs_policy of this VirtualMachineScaleSetProperties.
        :rtype: AutomaticRepairsPolicy
        """
        return self._automatic_repairs_policy

    @automatic_repairs_policy.setter
    def automatic_repairs_policy(self, automatic_repairs_policy):
        """Sets the automatic_repairs_policy of this VirtualMachineScaleSetProperties.


        :param automatic_repairs_policy: The automatic_repairs_policy of this VirtualMachineScaleSetProperties.
        :type automatic_repairs_policy: AutomaticRepairsPolicy
        """

        self._automatic_repairs_policy = automatic_repairs_policy

    @property
    def do_not_run_extensions_on_overprovisioned_vms(self):
        """Gets the do_not_run_extensions_on_overprovisioned_vms of this VirtualMachineScaleSetProperties.

        When Overprovision is enabled, extensions are launched only on the requested number of VMs which are finally kept. This property will hence ensure that the extensions do not run on the extra overprovisioned VMs.

        :return: The do_not_run_extensions_on_overprovisioned_vms of this VirtualMachineScaleSetProperties.
        :rtype: bool
        """
        return self._do_not_run_extensions_on_overprovisioned_vms

    @do_not_run_extensions_on_overprovisioned_vms.setter
    def do_not_run_extensions_on_overprovisioned_vms(self, do_not_run_extensions_on_overprovisioned_vms):
        """Sets the do_not_run_extensions_on_overprovisioned_vms of this VirtualMachineScaleSetProperties.

        When Overprovision is enabled, extensions are launched only on the requested number of VMs which are finally kept. This property will hence ensure that the extensions do not run on the extra overprovisioned VMs.

        :param do_not_run_extensions_on_overprovisioned_vms: The do_not_run_extensions_on_overprovisioned_vms of this VirtualMachineScaleSetProperties.
        :type do_not_run_extensions_on_overprovisioned_vms: bool
        """

        self._do_not_run_extensions_on_overprovisioned_vms = do_not_run_extensions_on_overprovisioned_vms

    @property
    def overprovision(self):
        """Gets the overprovision of this VirtualMachineScaleSetProperties.

        Specifies whether the Virtual Machine Scale Set should be overprovisioned.

        :return: The overprovision of this VirtualMachineScaleSetProperties.
        :rtype: bool
        """
        return self._overprovision

    @overprovision.setter
    def overprovision(self, overprovision):
        """Sets the overprovision of this VirtualMachineScaleSetProperties.

        Specifies whether the Virtual Machine Scale Set should be overprovisioned.

        :param overprovision: The overprovision of this VirtualMachineScaleSetProperties.
        :type overprovision: bool
        """

        self._overprovision = overprovision

    @property
    def platform_fault_domain_count(self):
        """Gets the platform_fault_domain_count of this VirtualMachineScaleSetProperties.

        Fault Domain count for each placement group.

        :return: The platform_fault_domain_count of this VirtualMachineScaleSetProperties.
        :rtype: int
        """
        return self._platform_fault_domain_count

    @platform_fault_domain_count.setter
    def platform_fault_domain_count(self, platform_fault_domain_count):
        """Sets the platform_fault_domain_count of this VirtualMachineScaleSetProperties.

        Fault Domain count for each placement group.

        :param platform_fault_domain_count: The platform_fault_domain_count of this VirtualMachineScaleSetProperties.
        :type platform_fault_domain_count: int
        """

        self._platform_fault_domain_count = platform_fault_domain_count

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this VirtualMachineScaleSetProperties.

        The provisioning state, which only appears in the response.

        :return: The provisioning_state of this VirtualMachineScaleSetProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this VirtualMachineScaleSetProperties.

        The provisioning state, which only appears in the response.

        :param provisioning_state: The provisioning_state of this VirtualMachineScaleSetProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def proximity_placement_group(self):
        """Gets the proximity_placement_group of this VirtualMachineScaleSetProperties.


        :return: The proximity_placement_group of this VirtualMachineScaleSetProperties.
        :rtype: SubResource
        """
        return self._proximity_placement_group

    @proximity_placement_group.setter
    def proximity_placement_group(self, proximity_placement_group):
        """Sets the proximity_placement_group of this VirtualMachineScaleSetProperties.


        :param proximity_placement_group: The proximity_placement_group of this VirtualMachineScaleSetProperties.
        :type proximity_placement_group: SubResource
        """

        self._proximity_placement_group = proximity_placement_group

    @property
    def single_placement_group(self):
        """Gets the single_placement_group of this VirtualMachineScaleSetProperties.

        When true this limits the scale set to a single placement group, of max size 100 virtual machines.

        :return: The single_placement_group of this VirtualMachineScaleSetProperties.
        :rtype: bool
        """
        return self._single_placement_group

    @single_placement_group.setter
    def single_placement_group(self, single_placement_group):
        """Sets the single_placement_group of this VirtualMachineScaleSetProperties.

        When true this limits the scale set to a single placement group, of max size 100 virtual machines.

        :param single_placement_group: The single_placement_group of this VirtualMachineScaleSetProperties.
        :type single_placement_group: bool
        """

        self._single_placement_group = single_placement_group

    @property
    def unique_id(self):
        """Gets the unique_id of this VirtualMachineScaleSetProperties.

        Specifies the ID which uniquely identifies a Virtual Machine Scale Set.

        :return: The unique_id of this VirtualMachineScaleSetProperties.
        :rtype: str
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this VirtualMachineScaleSetProperties.

        Specifies the ID which uniquely identifies a Virtual Machine Scale Set.

        :param unique_id: The unique_id of this VirtualMachineScaleSetProperties.
        :type unique_id: str
        """

        self._unique_id = unique_id

    @property
    def upgrade_policy(self):
        """Gets the upgrade_policy of this VirtualMachineScaleSetProperties.


        :return: The upgrade_policy of this VirtualMachineScaleSetProperties.
        :rtype: UpgradePolicy
        """
        return self._upgrade_policy

    @upgrade_policy.setter
    def upgrade_policy(self, upgrade_policy):
        """Sets the upgrade_policy of this VirtualMachineScaleSetProperties.


        :param upgrade_policy: The upgrade_policy of this VirtualMachineScaleSetProperties.
        :type upgrade_policy: UpgradePolicy
        """

        self._upgrade_policy = upgrade_policy

    @property
    def virtual_machine_profile(self):
        """Gets the virtual_machine_profile of this VirtualMachineScaleSetProperties.


        :return: The virtual_machine_profile of this VirtualMachineScaleSetProperties.
        :rtype: VirtualMachineScaleSetVMProfile
        """
        return self._virtual_machine_profile

    @virtual_machine_profile.setter
    def virtual_machine_profile(self, virtual_machine_profile):
        """Sets the virtual_machine_profile of this VirtualMachineScaleSetProperties.


        :param virtual_machine_profile: The virtual_machine_profile of this VirtualMachineScaleSetProperties.
        :type virtual_machine_profile: VirtualMachineScaleSetVMProfile
        """

        self._virtual_machine_profile = virtual_machine_profile

    @property
    def zone_balance(self):
        """Gets the zone_balance of this VirtualMachineScaleSetProperties.

        Whether to force strictly even Virtual Machine distribution cross x-zones in case there is zone outage.

        :return: The zone_balance of this VirtualMachineScaleSetProperties.
        :rtype: bool
        """
        return self._zone_balance

    @zone_balance.setter
    def zone_balance(self, zone_balance):
        """Sets the zone_balance of this VirtualMachineScaleSetProperties.

        Whether to force strictly even Virtual Machine distribution cross x-zones in case there is zone outage.

        :param zone_balance: The zone_balance of this VirtualMachineScaleSetProperties.
        :type zone_balance: bool
        """

        self._zone_balance = zone_balance
