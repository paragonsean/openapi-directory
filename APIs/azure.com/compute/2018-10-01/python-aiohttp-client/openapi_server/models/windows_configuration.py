# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.additional_unattend_content import AdditionalUnattendContent
from openapi_server.models.win_rm_configuration import WinRMConfiguration
from openapi_server import util


class WindowsConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_unattend_content: List[AdditionalUnattendContent]=None, enable_automatic_updates: bool=None, provision_vm_agent: bool=None, time_zone: str=None, win_rm: WinRMConfiguration=None):
        """WindowsConfiguration - a model defined in OpenAPI

        :param additional_unattend_content: The additional_unattend_content of this WindowsConfiguration.
        :param enable_automatic_updates: The enable_automatic_updates of this WindowsConfiguration.
        :param provision_vm_agent: The provision_vm_agent of this WindowsConfiguration.
        :param time_zone: The time_zone of this WindowsConfiguration.
        :param win_rm: The win_rm of this WindowsConfiguration.
        """
        self.openapi_types = {
            'additional_unattend_content': List[AdditionalUnattendContent],
            'enable_automatic_updates': bool,
            'provision_vm_agent': bool,
            'time_zone': str,
            'win_rm': WinRMConfiguration
        }

        self.attribute_map = {
            'additional_unattend_content': 'additionalUnattendContent',
            'enable_automatic_updates': 'enableAutomaticUpdates',
            'provision_vm_agent': 'provisionVMAgent',
            'time_zone': 'timeZone',
            'win_rm': 'winRM'
        }

        self._additional_unattend_content = additional_unattend_content
        self._enable_automatic_updates = enable_automatic_updates
        self._provision_vm_agent = provision_vm_agent
        self._time_zone = time_zone
        self._win_rm = win_rm

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WindowsConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WindowsConfiguration of this WindowsConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_unattend_content(self):
        """Gets the additional_unattend_content of this WindowsConfiguration.

        Specifies additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup.

        :return: The additional_unattend_content of this WindowsConfiguration.
        :rtype: List[AdditionalUnattendContent]
        """
        return self._additional_unattend_content

    @additional_unattend_content.setter
    def additional_unattend_content(self, additional_unattend_content):
        """Sets the additional_unattend_content of this WindowsConfiguration.

        Specifies additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup.

        :param additional_unattend_content: The additional_unattend_content of this WindowsConfiguration.
        :type additional_unattend_content: List[AdditionalUnattendContent]
        """

        self._additional_unattend_content = additional_unattend_content

    @property
    def enable_automatic_updates(self):
        """Gets the enable_automatic_updates of this WindowsConfiguration.

        Indicates whether virtual machine is enabled for automatic Windows updates. Default value is true. <br><br> For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning.

        :return: The enable_automatic_updates of this WindowsConfiguration.
        :rtype: bool
        """
        return self._enable_automatic_updates

    @enable_automatic_updates.setter
    def enable_automatic_updates(self, enable_automatic_updates):
        """Sets the enable_automatic_updates of this WindowsConfiguration.

        Indicates whether virtual machine is enabled for automatic Windows updates. Default value is true. <br><br> For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning.

        :param enable_automatic_updates: The enable_automatic_updates of this WindowsConfiguration.
        :type enable_automatic_updates: bool
        """

        self._enable_automatic_updates = enable_automatic_updates

    @property
    def provision_vm_agent(self):
        """Gets the provision_vm_agent of this WindowsConfiguration.

        Indicates whether virtual machine agent should be provisioned on the virtual machine. <br><br> When this property is not specified in the request body, default behavior is to set it to true.  This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later.

        :return: The provision_vm_agent of this WindowsConfiguration.
        :rtype: bool
        """
        return self._provision_vm_agent

    @provision_vm_agent.setter
    def provision_vm_agent(self, provision_vm_agent):
        """Sets the provision_vm_agent of this WindowsConfiguration.

        Indicates whether virtual machine agent should be provisioned on the virtual machine. <br><br> When this property is not specified in the request body, default behavior is to set it to true.  This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later.

        :param provision_vm_agent: The provision_vm_agent of this WindowsConfiguration.
        :type provision_vm_agent: bool
        """

        self._provision_vm_agent = provision_vm_agent

    @property
    def time_zone(self):
        """Gets the time_zone of this WindowsConfiguration.

        Specifies the time zone of the virtual machine. e.g. \"Pacific Standard Time\"

        :return: The time_zone of this WindowsConfiguration.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this WindowsConfiguration.

        Specifies the time zone of the virtual machine. e.g. \"Pacific Standard Time\"

        :param time_zone: The time_zone of this WindowsConfiguration.
        :type time_zone: str
        """

        self._time_zone = time_zone

    @property
    def win_rm(self):
        """Gets the win_rm of this WindowsConfiguration.


        :return: The win_rm of this WindowsConfiguration.
        :rtype: WinRMConfiguration
        """
        return self._win_rm

    @win_rm.setter
    def win_rm(self, win_rm):
        """Sets the win_rm of this WindowsConfiguration.


        :param win_rm: The win_rm of this WindowsConfiguration.
        :type win_rm: WinRMConfiguration
        """

        self._win_rm = win_rm
