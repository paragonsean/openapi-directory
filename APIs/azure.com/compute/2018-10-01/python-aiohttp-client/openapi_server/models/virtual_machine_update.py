# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.plan import Plan
from openapi_server.models.virtual_machine_identity import VirtualMachineIdentity
from openapi_server.models.virtual_machine_properties import VirtualMachineProperties
from openapi_server import util


class VirtualMachineUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identity: VirtualMachineIdentity=None, plan: Plan=None, properties: VirtualMachineProperties=None, zones: List[str]=None, tags: Dict[str, str]=None):
        """VirtualMachineUpdate - a model defined in OpenAPI

        :param identity: The identity of this VirtualMachineUpdate.
        :param plan: The plan of this VirtualMachineUpdate.
        :param properties: The properties of this VirtualMachineUpdate.
        :param zones: The zones of this VirtualMachineUpdate.
        :param tags: The tags of this VirtualMachineUpdate.
        """
        self.openapi_types = {
            'identity': VirtualMachineIdentity,
            'plan': Plan,
            'properties': VirtualMachineProperties,
            'zones': List[str],
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'identity': 'identity',
            'plan': 'plan',
            'properties': 'properties',
            'zones': 'zones',
            'tags': 'tags'
        }

        self._identity = identity
        self._plan = plan
        self._properties = properties
        self._zones = zones
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualMachineUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualMachineUpdate of this VirtualMachineUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identity(self):
        """Gets the identity of this VirtualMachineUpdate.


        :return: The identity of this VirtualMachineUpdate.
        :rtype: VirtualMachineIdentity
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this VirtualMachineUpdate.


        :param identity: The identity of this VirtualMachineUpdate.
        :type identity: VirtualMachineIdentity
        """

        self._identity = identity

    @property
    def plan(self):
        """Gets the plan of this VirtualMachineUpdate.


        :return: The plan of this VirtualMachineUpdate.
        :rtype: Plan
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this VirtualMachineUpdate.


        :param plan: The plan of this VirtualMachineUpdate.
        :type plan: Plan
        """

        self._plan = plan

    @property
    def properties(self):
        """Gets the properties of this VirtualMachineUpdate.


        :return: The properties of this VirtualMachineUpdate.
        :rtype: VirtualMachineProperties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this VirtualMachineUpdate.


        :param properties: The properties of this VirtualMachineUpdate.
        :type properties: VirtualMachineProperties
        """

        self._properties = properties

    @property
    def zones(self):
        """Gets the zones of this VirtualMachineUpdate.

        The virtual machine zones.

        :return: The zones of this VirtualMachineUpdate.
        :rtype: List[str]
        """
        return self._zones

    @zones.setter
    def zones(self, zones):
        """Sets the zones of this VirtualMachineUpdate.

        The virtual machine zones.

        :param zones: The zones of this VirtualMachineUpdate.
        :type zones: List[str]
        """

        self._zones = zones

    @property
    def tags(self):
        """Gets the tags of this VirtualMachineUpdate.

        Resource tags

        :return: The tags of this VirtualMachineUpdate.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this VirtualMachineUpdate.

        Resource tags

        :param tags: The tags of this VirtualMachineUpdate.
        :type tags: Dict[str, str]
        """

        self._tags = tags
