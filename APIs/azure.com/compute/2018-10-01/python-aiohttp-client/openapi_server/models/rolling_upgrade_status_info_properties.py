# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_error import ApiError
from openapi_server.models.rolling_upgrade_policy import RollingUpgradePolicy
from openapi_server.models.rolling_upgrade_progress_info import RollingUpgradeProgressInfo
from openapi_server.models.rolling_upgrade_running_status import RollingUpgradeRunningStatus
from openapi_server import util


class RollingUpgradeStatusInfoProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error: ApiError=None, policy: RollingUpgradePolicy=None, progress: RollingUpgradeProgressInfo=None, running_status: RollingUpgradeRunningStatus=None):
        """RollingUpgradeStatusInfoProperties - a model defined in OpenAPI

        :param error: The error of this RollingUpgradeStatusInfoProperties.
        :param policy: The policy of this RollingUpgradeStatusInfoProperties.
        :param progress: The progress of this RollingUpgradeStatusInfoProperties.
        :param running_status: The running_status of this RollingUpgradeStatusInfoProperties.
        """
        self.openapi_types = {
            'error': ApiError,
            'policy': RollingUpgradePolicy,
            'progress': RollingUpgradeProgressInfo,
            'running_status': RollingUpgradeRunningStatus
        }

        self.attribute_map = {
            'error': 'error',
            'policy': 'policy',
            'progress': 'progress',
            'running_status': 'runningStatus'
        }

        self._error = error
        self._policy = policy
        self._progress = progress
        self._running_status = running_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RollingUpgradeStatusInfoProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RollingUpgradeStatusInfoProperties of this RollingUpgradeStatusInfoProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error(self):
        """Gets the error of this RollingUpgradeStatusInfoProperties.


        :return: The error of this RollingUpgradeStatusInfoProperties.
        :rtype: ApiError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this RollingUpgradeStatusInfoProperties.


        :param error: The error of this RollingUpgradeStatusInfoProperties.
        :type error: ApiError
        """

        self._error = error

    @property
    def policy(self):
        """Gets the policy of this RollingUpgradeStatusInfoProperties.


        :return: The policy of this RollingUpgradeStatusInfoProperties.
        :rtype: RollingUpgradePolicy
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this RollingUpgradeStatusInfoProperties.


        :param policy: The policy of this RollingUpgradeStatusInfoProperties.
        :type policy: RollingUpgradePolicy
        """

        self._policy = policy

    @property
    def progress(self):
        """Gets the progress of this RollingUpgradeStatusInfoProperties.


        :return: The progress of this RollingUpgradeStatusInfoProperties.
        :rtype: RollingUpgradeProgressInfo
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this RollingUpgradeStatusInfoProperties.


        :param progress: The progress of this RollingUpgradeStatusInfoProperties.
        :type progress: RollingUpgradeProgressInfo
        """

        self._progress = progress

    @property
    def running_status(self):
        """Gets the running_status of this RollingUpgradeStatusInfoProperties.


        :return: The running_status of this RollingUpgradeStatusInfoProperties.
        :rtype: RollingUpgradeRunningStatus
        """
        return self._running_status

    @running_status.setter
    def running_status(self, running_status):
        """Sets the running_status of this RollingUpgradeStatusInfoProperties.


        :param running_status: The running_status of this RollingUpgradeStatusInfoProperties.
        :type running_status: RollingUpgradeRunningStatus
        """

        self._running_status = running_status
