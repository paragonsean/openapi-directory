# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VirtualMachineScaleSetExtensionProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_upgrade_minor_version: bool=None, force_update_tag: str=None, protected_settings: object=None, provision_after_extensions: List[str]=None, provisioning_state: str=None, publisher: str=None, settings: object=None, type: str=None, type_handler_version: str=None):
        """VirtualMachineScaleSetExtensionProperties - a model defined in OpenAPI

        :param auto_upgrade_minor_version: The auto_upgrade_minor_version of this VirtualMachineScaleSetExtensionProperties.
        :param force_update_tag: The force_update_tag of this VirtualMachineScaleSetExtensionProperties.
        :param protected_settings: The protected_settings of this VirtualMachineScaleSetExtensionProperties.
        :param provision_after_extensions: The provision_after_extensions of this VirtualMachineScaleSetExtensionProperties.
        :param provisioning_state: The provisioning_state of this VirtualMachineScaleSetExtensionProperties.
        :param publisher: The publisher of this VirtualMachineScaleSetExtensionProperties.
        :param settings: The settings of this VirtualMachineScaleSetExtensionProperties.
        :param type: The type of this VirtualMachineScaleSetExtensionProperties.
        :param type_handler_version: The type_handler_version of this VirtualMachineScaleSetExtensionProperties.
        """
        self.openapi_types = {
            'auto_upgrade_minor_version': bool,
            'force_update_tag': str,
            'protected_settings': object,
            'provision_after_extensions': List[str],
            'provisioning_state': str,
            'publisher': str,
            'settings': object,
            'type': str,
            'type_handler_version': str
        }

        self.attribute_map = {
            'auto_upgrade_minor_version': 'autoUpgradeMinorVersion',
            'force_update_tag': 'forceUpdateTag',
            'protected_settings': 'protectedSettings',
            'provision_after_extensions': 'provisionAfterExtensions',
            'provisioning_state': 'provisioningState',
            'publisher': 'publisher',
            'settings': 'settings',
            'type': 'type',
            'type_handler_version': 'typeHandlerVersion'
        }

        self._auto_upgrade_minor_version = auto_upgrade_minor_version
        self._force_update_tag = force_update_tag
        self._protected_settings = protected_settings
        self._provision_after_extensions = provision_after_extensions
        self._provisioning_state = provisioning_state
        self._publisher = publisher
        self._settings = settings
        self._type = type
        self._type_handler_version = type_handler_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualMachineScaleSetExtensionProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualMachineScaleSetExtensionProperties of this VirtualMachineScaleSetExtensionProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_upgrade_minor_version(self):
        """Gets the auto_upgrade_minor_version of this VirtualMachineScaleSetExtensionProperties.

        Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.

        :return: The auto_upgrade_minor_version of this VirtualMachineScaleSetExtensionProperties.
        :rtype: bool
        """
        return self._auto_upgrade_minor_version

    @auto_upgrade_minor_version.setter
    def auto_upgrade_minor_version(self, auto_upgrade_minor_version):
        """Sets the auto_upgrade_minor_version of this VirtualMachineScaleSetExtensionProperties.

        Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.

        :param auto_upgrade_minor_version: The auto_upgrade_minor_version of this VirtualMachineScaleSetExtensionProperties.
        :type auto_upgrade_minor_version: bool
        """

        self._auto_upgrade_minor_version = auto_upgrade_minor_version

    @property
    def force_update_tag(self):
        """Gets the force_update_tag of this VirtualMachineScaleSetExtensionProperties.

        If a value is provided and is different from the previous value, the extension handler will be forced to update even if the extension configuration has not changed.

        :return: The force_update_tag of this VirtualMachineScaleSetExtensionProperties.
        :rtype: str
        """
        return self._force_update_tag

    @force_update_tag.setter
    def force_update_tag(self, force_update_tag):
        """Sets the force_update_tag of this VirtualMachineScaleSetExtensionProperties.

        If a value is provided and is different from the previous value, the extension handler will be forced to update even if the extension configuration has not changed.

        :param force_update_tag: The force_update_tag of this VirtualMachineScaleSetExtensionProperties.
        :type force_update_tag: str
        """

        self._force_update_tag = force_update_tag

    @property
    def protected_settings(self):
        """Gets the protected_settings of this VirtualMachineScaleSetExtensionProperties.

        The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.

        :return: The protected_settings of this VirtualMachineScaleSetExtensionProperties.
        :rtype: object
        """
        return self._protected_settings

    @protected_settings.setter
    def protected_settings(self, protected_settings):
        """Sets the protected_settings of this VirtualMachineScaleSetExtensionProperties.

        The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.

        :param protected_settings: The protected_settings of this VirtualMachineScaleSetExtensionProperties.
        :type protected_settings: object
        """

        self._protected_settings = protected_settings

    @property
    def provision_after_extensions(self):
        """Gets the provision_after_extensions of this VirtualMachineScaleSetExtensionProperties.

        Collection of extension names after which this extension needs to be provisioned.

        :return: The provision_after_extensions of this VirtualMachineScaleSetExtensionProperties.
        :rtype: List[str]
        """
        return self._provision_after_extensions

    @provision_after_extensions.setter
    def provision_after_extensions(self, provision_after_extensions):
        """Sets the provision_after_extensions of this VirtualMachineScaleSetExtensionProperties.

        Collection of extension names after which this extension needs to be provisioned.

        :param provision_after_extensions: The provision_after_extensions of this VirtualMachineScaleSetExtensionProperties.
        :type provision_after_extensions: List[str]
        """

        self._provision_after_extensions = provision_after_extensions

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this VirtualMachineScaleSetExtensionProperties.

        The provisioning state, which only appears in the response.

        :return: The provisioning_state of this VirtualMachineScaleSetExtensionProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this VirtualMachineScaleSetExtensionProperties.

        The provisioning state, which only appears in the response.

        :param provisioning_state: The provisioning_state of this VirtualMachineScaleSetExtensionProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def publisher(self):
        """Gets the publisher of this VirtualMachineScaleSetExtensionProperties.

        The name of the extension handler publisher.

        :return: The publisher of this VirtualMachineScaleSetExtensionProperties.
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this VirtualMachineScaleSetExtensionProperties.

        The name of the extension handler publisher.

        :param publisher: The publisher of this VirtualMachineScaleSetExtensionProperties.
        :type publisher: str
        """

        self._publisher = publisher

    @property
    def settings(self):
        """Gets the settings of this VirtualMachineScaleSetExtensionProperties.

        Json formatted public settings for the extension.

        :return: The settings of this VirtualMachineScaleSetExtensionProperties.
        :rtype: object
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this VirtualMachineScaleSetExtensionProperties.

        Json formatted public settings for the extension.

        :param settings: The settings of this VirtualMachineScaleSetExtensionProperties.
        :type settings: object
        """

        self._settings = settings

    @property
    def type(self):
        """Gets the type of this VirtualMachineScaleSetExtensionProperties.

        Specifies the type of the extension; an example is \"CustomScriptExtension\".

        :return: The type of this VirtualMachineScaleSetExtensionProperties.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VirtualMachineScaleSetExtensionProperties.

        Specifies the type of the extension; an example is \"CustomScriptExtension\".

        :param type: The type of this VirtualMachineScaleSetExtensionProperties.
        :type type: str
        """

        self._type = type

    @property
    def type_handler_version(self):
        """Gets the type_handler_version of this VirtualMachineScaleSetExtensionProperties.

        Specifies the version of the script handler.

        :return: The type_handler_version of this VirtualMachineScaleSetExtensionProperties.
        :rtype: str
        """
        return self._type_handler_version

    @type_handler_version.setter
    def type_handler_version(self, type_handler_version):
        """Sets the type_handler_version of this VirtualMachineScaleSetExtensionProperties.

        Specifies the version of the script handler.

        :param type_handler_version: The type_handler_version of this VirtualMachineScaleSetExtensionProperties.
        :type type_handler_version: str
        """

        self._type_handler_version = type_handler_version
