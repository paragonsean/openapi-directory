# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RollingUpgradePolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_batch_instance_percent: int=None, max_unhealthy_instance_percent: int=None, max_unhealthy_upgraded_instance_percent: int=None, pause_time_between_batches: str=None):
        """RollingUpgradePolicy - a model defined in OpenAPI

        :param max_batch_instance_percent: The max_batch_instance_percent of this RollingUpgradePolicy.
        :param max_unhealthy_instance_percent: The max_unhealthy_instance_percent of this RollingUpgradePolicy.
        :param max_unhealthy_upgraded_instance_percent: The max_unhealthy_upgraded_instance_percent of this RollingUpgradePolicy.
        :param pause_time_between_batches: The pause_time_between_batches of this RollingUpgradePolicy.
        """
        self.openapi_types = {
            'max_batch_instance_percent': int,
            'max_unhealthy_instance_percent': int,
            'max_unhealthy_upgraded_instance_percent': int,
            'pause_time_between_batches': str
        }

        self.attribute_map = {
            'max_batch_instance_percent': 'maxBatchInstancePercent',
            'max_unhealthy_instance_percent': 'maxUnhealthyInstancePercent',
            'max_unhealthy_upgraded_instance_percent': 'maxUnhealthyUpgradedInstancePercent',
            'pause_time_between_batches': 'pauseTimeBetweenBatches'
        }

        self._max_batch_instance_percent = max_batch_instance_percent
        self._max_unhealthy_instance_percent = max_unhealthy_instance_percent
        self._max_unhealthy_upgraded_instance_percent = max_unhealthy_upgraded_instance_percent
        self._pause_time_between_batches = pause_time_between_batches

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RollingUpgradePolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RollingUpgradePolicy of this RollingUpgradePolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_batch_instance_percent(self):
        """Gets the max_batch_instance_percent of this RollingUpgradePolicy.

        The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. The default value for this parameter is 20%.

        :return: The max_batch_instance_percent of this RollingUpgradePolicy.
        :rtype: int
        """
        return self._max_batch_instance_percent

    @max_batch_instance_percent.setter
    def max_batch_instance_percent(self, max_batch_instance_percent):
        """Sets the max_batch_instance_percent of this RollingUpgradePolicy.

        The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. The default value for this parameter is 20%.

        :param max_batch_instance_percent: The max_batch_instance_percent of this RollingUpgradePolicy.
        :type max_batch_instance_percent: int
        """
        if max_batch_instance_percent is not None and max_batch_instance_percent > 100:
            raise ValueError("Invalid value for `max_batch_instance_percent`, must be a value less than or equal to `100`")
        if max_batch_instance_percent is not None and max_batch_instance_percent < 5:
            raise ValueError("Invalid value for `max_batch_instance_percent`, must be a value greater than or equal to `5`")

        self._max_batch_instance_percent = max_batch_instance_percent

    @property
    def max_unhealthy_instance_percent(self):
        """Gets the max_unhealthy_instance_percent of this RollingUpgradePolicy.

        The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. The default value for this parameter is 20%.

        :return: The max_unhealthy_instance_percent of this RollingUpgradePolicy.
        :rtype: int
        """
        return self._max_unhealthy_instance_percent

    @max_unhealthy_instance_percent.setter
    def max_unhealthy_instance_percent(self, max_unhealthy_instance_percent):
        """Sets the max_unhealthy_instance_percent of this RollingUpgradePolicy.

        The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. The default value for this parameter is 20%.

        :param max_unhealthy_instance_percent: The max_unhealthy_instance_percent of this RollingUpgradePolicy.
        :type max_unhealthy_instance_percent: int
        """
        if max_unhealthy_instance_percent is not None and max_unhealthy_instance_percent > 100:
            raise ValueError("Invalid value for `max_unhealthy_instance_percent`, must be a value less than or equal to `100`")
        if max_unhealthy_instance_percent is not None and max_unhealthy_instance_percent < 5:
            raise ValueError("Invalid value for `max_unhealthy_instance_percent`, must be a value greater than or equal to `5`")

        self._max_unhealthy_instance_percent = max_unhealthy_instance_percent

    @property
    def max_unhealthy_upgraded_instance_percent(self):
        """Gets the max_unhealthy_upgraded_instance_percent of this RollingUpgradePolicy.

        The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The default value for this parameter is 20%.

        :return: The max_unhealthy_upgraded_instance_percent of this RollingUpgradePolicy.
        :rtype: int
        """
        return self._max_unhealthy_upgraded_instance_percent

    @max_unhealthy_upgraded_instance_percent.setter
    def max_unhealthy_upgraded_instance_percent(self, max_unhealthy_upgraded_instance_percent):
        """Sets the max_unhealthy_upgraded_instance_percent of this RollingUpgradePolicy.

        The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The default value for this parameter is 20%.

        :param max_unhealthy_upgraded_instance_percent: The max_unhealthy_upgraded_instance_percent of this RollingUpgradePolicy.
        :type max_unhealthy_upgraded_instance_percent: int
        """
        if max_unhealthy_upgraded_instance_percent is not None and max_unhealthy_upgraded_instance_percent > 100:
            raise ValueError("Invalid value for `max_unhealthy_upgraded_instance_percent`, must be a value less than or equal to `100`")
        if max_unhealthy_upgraded_instance_percent is not None and max_unhealthy_upgraded_instance_percent < 0:
            raise ValueError("Invalid value for `max_unhealthy_upgraded_instance_percent`, must be a value greater than or equal to `0`")

        self._max_unhealthy_upgraded_instance_percent = max_unhealthy_upgraded_instance_percent

    @property
    def pause_time_between_batches(self):
        """Gets the pause_time_between_batches of this RollingUpgradePolicy.

        The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format. The default value is 0 seconds (PT0S).

        :return: The pause_time_between_batches of this RollingUpgradePolicy.
        :rtype: str
        """
        return self._pause_time_between_batches

    @pause_time_between_batches.setter
    def pause_time_between_batches(self, pause_time_between_batches):
        """Sets the pause_time_between_batches of this RollingUpgradePolicy.

        The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format. The default value is 0 seconds (PT0S).

        :param pause_time_between_batches: The pause_time_between_batches of this RollingUpgradePolicy.
        :type pause_time_between_batches: str
        """

        self._pause_time_between_batches = pause_time_between_batches
