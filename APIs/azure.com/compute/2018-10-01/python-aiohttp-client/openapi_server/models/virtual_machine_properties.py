# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.additional_capabilities import AdditionalCapabilities
from openapi_server.models.diagnostics_profile import DiagnosticsProfile
from openapi_server.models.hardware_profile import HardwareProfile
from openapi_server.models.network_profile import NetworkProfile
from openapi_server.models.os_profile import OSProfile
from openapi_server.models.storage_profile import StorageProfile
from openapi_server.models.sub_resource import SubResource
from openapi_server.models.virtual_machine_instance_view import VirtualMachineInstanceView
from openapi_server import util


class VirtualMachineProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_capabilities: AdditionalCapabilities=None, availability_set: SubResource=None, diagnostics_profile: DiagnosticsProfile=None, hardware_profile: HardwareProfile=None, instance_view: VirtualMachineInstanceView=None, license_type: str=None, network_profile: NetworkProfile=None, os_profile: OSProfile=None, provisioning_state: str=None, proximity_placement_group: SubResource=None, storage_profile: StorageProfile=None, vm_id: str=None):
        """VirtualMachineProperties - a model defined in OpenAPI

        :param additional_capabilities: The additional_capabilities of this VirtualMachineProperties.
        :param availability_set: The availability_set of this VirtualMachineProperties.
        :param diagnostics_profile: The diagnostics_profile of this VirtualMachineProperties.
        :param hardware_profile: The hardware_profile of this VirtualMachineProperties.
        :param instance_view: The instance_view of this VirtualMachineProperties.
        :param license_type: The license_type of this VirtualMachineProperties.
        :param network_profile: The network_profile of this VirtualMachineProperties.
        :param os_profile: The os_profile of this VirtualMachineProperties.
        :param provisioning_state: The provisioning_state of this VirtualMachineProperties.
        :param proximity_placement_group: The proximity_placement_group of this VirtualMachineProperties.
        :param storage_profile: The storage_profile of this VirtualMachineProperties.
        :param vm_id: The vm_id of this VirtualMachineProperties.
        """
        self.openapi_types = {
            'additional_capabilities': AdditionalCapabilities,
            'availability_set': SubResource,
            'diagnostics_profile': DiagnosticsProfile,
            'hardware_profile': HardwareProfile,
            'instance_view': VirtualMachineInstanceView,
            'license_type': str,
            'network_profile': NetworkProfile,
            'os_profile': OSProfile,
            'provisioning_state': str,
            'proximity_placement_group': SubResource,
            'storage_profile': StorageProfile,
            'vm_id': str
        }

        self.attribute_map = {
            'additional_capabilities': 'additionalCapabilities',
            'availability_set': 'availabilitySet',
            'diagnostics_profile': 'diagnosticsProfile',
            'hardware_profile': 'hardwareProfile',
            'instance_view': 'instanceView',
            'license_type': 'licenseType',
            'network_profile': 'networkProfile',
            'os_profile': 'osProfile',
            'provisioning_state': 'provisioningState',
            'proximity_placement_group': 'proximityPlacementGroup',
            'storage_profile': 'storageProfile',
            'vm_id': 'vmId'
        }

        self._additional_capabilities = additional_capabilities
        self._availability_set = availability_set
        self._diagnostics_profile = diagnostics_profile
        self._hardware_profile = hardware_profile
        self._instance_view = instance_view
        self._license_type = license_type
        self._network_profile = network_profile
        self._os_profile = os_profile
        self._provisioning_state = provisioning_state
        self._proximity_placement_group = proximity_placement_group
        self._storage_profile = storage_profile
        self._vm_id = vm_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualMachineProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualMachineProperties of this VirtualMachineProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_capabilities(self):
        """Gets the additional_capabilities of this VirtualMachineProperties.


        :return: The additional_capabilities of this VirtualMachineProperties.
        :rtype: AdditionalCapabilities
        """
        return self._additional_capabilities

    @additional_capabilities.setter
    def additional_capabilities(self, additional_capabilities):
        """Sets the additional_capabilities of this VirtualMachineProperties.


        :param additional_capabilities: The additional_capabilities of this VirtualMachineProperties.
        :type additional_capabilities: AdditionalCapabilities
        """

        self._additional_capabilities = additional_capabilities

    @property
    def availability_set(self):
        """Gets the availability_set of this VirtualMachineProperties.


        :return: The availability_set of this VirtualMachineProperties.
        :rtype: SubResource
        """
        return self._availability_set

    @availability_set.setter
    def availability_set(self, availability_set):
        """Sets the availability_set of this VirtualMachineProperties.


        :param availability_set: The availability_set of this VirtualMachineProperties.
        :type availability_set: SubResource
        """

        self._availability_set = availability_set

    @property
    def diagnostics_profile(self):
        """Gets the diagnostics_profile of this VirtualMachineProperties.


        :return: The diagnostics_profile of this VirtualMachineProperties.
        :rtype: DiagnosticsProfile
        """
        return self._diagnostics_profile

    @diagnostics_profile.setter
    def diagnostics_profile(self, diagnostics_profile):
        """Sets the diagnostics_profile of this VirtualMachineProperties.


        :param diagnostics_profile: The diagnostics_profile of this VirtualMachineProperties.
        :type diagnostics_profile: DiagnosticsProfile
        """

        self._diagnostics_profile = diagnostics_profile

    @property
    def hardware_profile(self):
        """Gets the hardware_profile of this VirtualMachineProperties.


        :return: The hardware_profile of this VirtualMachineProperties.
        :rtype: HardwareProfile
        """
        return self._hardware_profile

    @hardware_profile.setter
    def hardware_profile(self, hardware_profile):
        """Sets the hardware_profile of this VirtualMachineProperties.


        :param hardware_profile: The hardware_profile of this VirtualMachineProperties.
        :type hardware_profile: HardwareProfile
        """

        self._hardware_profile = hardware_profile

    @property
    def instance_view(self):
        """Gets the instance_view of this VirtualMachineProperties.


        :return: The instance_view of this VirtualMachineProperties.
        :rtype: VirtualMachineInstanceView
        """
        return self._instance_view

    @instance_view.setter
    def instance_view(self, instance_view):
        """Sets the instance_view of this VirtualMachineProperties.


        :param instance_view: The instance_view of this VirtualMachineProperties.
        :type instance_view: VirtualMachineInstanceView
        """

        self._instance_view = instance_view

    @property
    def license_type(self):
        """Gets the license_type of this VirtualMachineProperties.

        Specifies that the image or disk that is being used was licensed on-premises. This element is only used for images that contain the Windows Server operating system. <br><br> Possible values are: <br><br> Windows_Client <br><br> Windows_Server <br><br> If this element is included in a request for an update, the value must match the initial value. This value cannot be updated. <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> Minimum api-version: 2015-06-15

        :return: The license_type of this VirtualMachineProperties.
        :rtype: str
        """
        return self._license_type

    @license_type.setter
    def license_type(self, license_type):
        """Sets the license_type of this VirtualMachineProperties.

        Specifies that the image or disk that is being used was licensed on-premises. This element is only used for images that contain the Windows Server operating system. <br><br> Possible values are: <br><br> Windows_Client <br><br> Windows_Server <br><br> If this element is included in a request for an update, the value must match the initial value. This value cannot be updated. <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> Minimum api-version: 2015-06-15

        :param license_type: The license_type of this VirtualMachineProperties.
        :type license_type: str
        """

        self._license_type = license_type

    @property
    def network_profile(self):
        """Gets the network_profile of this VirtualMachineProperties.


        :return: The network_profile of this VirtualMachineProperties.
        :rtype: NetworkProfile
        """
        return self._network_profile

    @network_profile.setter
    def network_profile(self, network_profile):
        """Sets the network_profile of this VirtualMachineProperties.


        :param network_profile: The network_profile of this VirtualMachineProperties.
        :type network_profile: NetworkProfile
        """

        self._network_profile = network_profile

    @property
    def os_profile(self):
        """Gets the os_profile of this VirtualMachineProperties.


        :return: The os_profile of this VirtualMachineProperties.
        :rtype: OSProfile
        """
        return self._os_profile

    @os_profile.setter
    def os_profile(self, os_profile):
        """Sets the os_profile of this VirtualMachineProperties.


        :param os_profile: The os_profile of this VirtualMachineProperties.
        :type os_profile: OSProfile
        """

        self._os_profile = os_profile

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this VirtualMachineProperties.

        The provisioning state, which only appears in the response.

        :return: The provisioning_state of this VirtualMachineProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this VirtualMachineProperties.

        The provisioning state, which only appears in the response.

        :param provisioning_state: The provisioning_state of this VirtualMachineProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def proximity_placement_group(self):
        """Gets the proximity_placement_group of this VirtualMachineProperties.


        :return: The proximity_placement_group of this VirtualMachineProperties.
        :rtype: SubResource
        """
        return self._proximity_placement_group

    @proximity_placement_group.setter
    def proximity_placement_group(self, proximity_placement_group):
        """Sets the proximity_placement_group of this VirtualMachineProperties.


        :param proximity_placement_group: The proximity_placement_group of this VirtualMachineProperties.
        :type proximity_placement_group: SubResource
        """

        self._proximity_placement_group = proximity_placement_group

    @property
    def storage_profile(self):
        """Gets the storage_profile of this VirtualMachineProperties.


        :return: The storage_profile of this VirtualMachineProperties.
        :rtype: StorageProfile
        """
        return self._storage_profile

    @storage_profile.setter
    def storage_profile(self, storage_profile):
        """Sets the storage_profile of this VirtualMachineProperties.


        :param storage_profile: The storage_profile of this VirtualMachineProperties.
        :type storage_profile: StorageProfile
        """

        self._storage_profile = storage_profile

    @property
    def vm_id(self):
        """Gets the vm_id of this VirtualMachineProperties.

        Specifies the VM unique ID which is a 128-bits identifier that is encoded and stored in all Azure IaaS VMs SMBIOS and can be read using platform BIOS commands.

        :return: The vm_id of this VirtualMachineProperties.
        :rtype: str
        """
        return self._vm_id

    @vm_id.setter
    def vm_id(self, vm_id):
        """Sets the vm_id of this VirtualMachineProperties.

        Specifies the VM unique ID which is a 128-bits identifier that is encoded and stored in all Azure IaaS VMs SMBIOS and can be read using platform BIOS commands.

        :param vm_id: The vm_id of this VirtualMachineProperties.
        :type vm_id: str
        """

        self._vm_id = vm_id
