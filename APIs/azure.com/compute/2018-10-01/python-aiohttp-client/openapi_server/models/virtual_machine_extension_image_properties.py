# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VirtualMachineExtensionImageProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compute_role: str=None, handler_schema: str=None, operating_system: str=None, supports_multiple_extensions: bool=None, vm_scale_set_enabled: bool=None):
        """VirtualMachineExtensionImageProperties - a model defined in OpenAPI

        :param compute_role: The compute_role of this VirtualMachineExtensionImageProperties.
        :param handler_schema: The handler_schema of this VirtualMachineExtensionImageProperties.
        :param operating_system: The operating_system of this VirtualMachineExtensionImageProperties.
        :param supports_multiple_extensions: The supports_multiple_extensions of this VirtualMachineExtensionImageProperties.
        :param vm_scale_set_enabled: The vm_scale_set_enabled of this VirtualMachineExtensionImageProperties.
        """
        self.openapi_types = {
            'compute_role': str,
            'handler_schema': str,
            'operating_system': str,
            'supports_multiple_extensions': bool,
            'vm_scale_set_enabled': bool
        }

        self.attribute_map = {
            'compute_role': 'computeRole',
            'handler_schema': 'handlerSchema',
            'operating_system': 'operatingSystem',
            'supports_multiple_extensions': 'supportsMultipleExtensions',
            'vm_scale_set_enabled': 'vmScaleSetEnabled'
        }

        self._compute_role = compute_role
        self._handler_schema = handler_schema
        self._operating_system = operating_system
        self._supports_multiple_extensions = supports_multiple_extensions
        self._vm_scale_set_enabled = vm_scale_set_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualMachineExtensionImageProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualMachineExtensionImageProperties of this VirtualMachineExtensionImageProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compute_role(self):
        """Gets the compute_role of this VirtualMachineExtensionImageProperties.

        The type of role (IaaS or PaaS) this extension supports.

        :return: The compute_role of this VirtualMachineExtensionImageProperties.
        :rtype: str
        """
        return self._compute_role

    @compute_role.setter
    def compute_role(self, compute_role):
        """Sets the compute_role of this VirtualMachineExtensionImageProperties.

        The type of role (IaaS or PaaS) this extension supports.

        :param compute_role: The compute_role of this VirtualMachineExtensionImageProperties.
        :type compute_role: str
        """
        if compute_role is None:
            raise ValueError("Invalid value for `compute_role`, must not be `None`")

        self._compute_role = compute_role

    @property
    def handler_schema(self):
        """Gets the handler_schema of this VirtualMachineExtensionImageProperties.

        The schema defined by publisher, where extension consumers should provide settings in a matching schema.

        :return: The handler_schema of this VirtualMachineExtensionImageProperties.
        :rtype: str
        """
        return self._handler_schema

    @handler_schema.setter
    def handler_schema(self, handler_schema):
        """Sets the handler_schema of this VirtualMachineExtensionImageProperties.

        The schema defined by publisher, where extension consumers should provide settings in a matching schema.

        :param handler_schema: The handler_schema of this VirtualMachineExtensionImageProperties.
        :type handler_schema: str
        """
        if handler_schema is None:
            raise ValueError("Invalid value for `handler_schema`, must not be `None`")

        self._handler_schema = handler_schema

    @property
    def operating_system(self):
        """Gets the operating_system of this VirtualMachineExtensionImageProperties.

        The operating system this extension supports.

        :return: The operating_system of this VirtualMachineExtensionImageProperties.
        :rtype: str
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this VirtualMachineExtensionImageProperties.

        The operating system this extension supports.

        :param operating_system: The operating_system of this VirtualMachineExtensionImageProperties.
        :type operating_system: str
        """
        if operating_system is None:
            raise ValueError("Invalid value for `operating_system`, must not be `None`")

        self._operating_system = operating_system

    @property
    def supports_multiple_extensions(self):
        """Gets the supports_multiple_extensions of this VirtualMachineExtensionImageProperties.

        Whether the handler can support multiple extensions.

        :return: The supports_multiple_extensions of this VirtualMachineExtensionImageProperties.
        :rtype: bool
        """
        return self._supports_multiple_extensions

    @supports_multiple_extensions.setter
    def supports_multiple_extensions(self, supports_multiple_extensions):
        """Sets the supports_multiple_extensions of this VirtualMachineExtensionImageProperties.

        Whether the handler can support multiple extensions.

        :param supports_multiple_extensions: The supports_multiple_extensions of this VirtualMachineExtensionImageProperties.
        :type supports_multiple_extensions: bool
        """

        self._supports_multiple_extensions = supports_multiple_extensions

    @property
    def vm_scale_set_enabled(self):
        """Gets the vm_scale_set_enabled of this VirtualMachineExtensionImageProperties.

        Whether the extension can be used on xRP VMScaleSets. By default existing extensions are usable on scalesets, but there might be cases where a publisher wants to explicitly indicate the extension is only enabled for CRP VMs but not VMSS.

        :return: The vm_scale_set_enabled of this VirtualMachineExtensionImageProperties.
        :rtype: bool
        """
        return self._vm_scale_set_enabled

    @vm_scale_set_enabled.setter
    def vm_scale_set_enabled(self, vm_scale_set_enabled):
        """Sets the vm_scale_set_enabled of this VirtualMachineExtensionImageProperties.

        Whether the extension can be used on xRP VMScaleSets. By default existing extensions are usable on scalesets, but there might be cases where a publisher wants to explicitly indicate the extension is only enabled for CRP VMs but not VMSS.

        :param vm_scale_set_enabled: The vm_scale_set_enabled of this VirtualMachineExtensionImageProperties.
        :type vm_scale_set_enabled: bool
        """

        self._vm_scale_set_enabled = vm_scale_set_enabled
