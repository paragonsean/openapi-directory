/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAvailabilitySetsApi_H
#define OAI_OAIAvailabilitySetsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAvailabilitySet.h"
#include "OAIAvailabilitySetListResult.h"
#include "OAIAvailabilitySetUpdate.h"
#include "OAIVirtualMachineSizeListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAvailabilitySetsApi : public QObject {
    Q_OBJECT

public:
    OAIAvailabilitySetsApi(const int timeOut = 0);
    ~OAIAvailabilitySetsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  availability_set_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIAvailabilitySet [required]
    */
    virtual void availabilitySetsCreateOrUpdate(const QString &resource_group_name, const QString &availability_set_name, const QString &api_version, const QString &subscription_id, const OAIAvailabilitySet &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  availability_set_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void availabilitySetsDelete(const QString &resource_group_name, const QString &availability_set_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  availability_set_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void availabilitySetsGet(const QString &resource_group_name, const QString &availability_set_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void availabilitySetsList(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  availability_set_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void availabilitySetsListAvailableSizes(const QString &resource_group_name, const QString &availability_set_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void availabilitySetsListBySubscription(const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  availability_set_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIAvailabilitySetUpdate [required]
    */
    virtual void availabilitySetsUpdate(const QString &resource_group_name, const QString &availability_set_name, const QString &api_version, const QString &subscription_id, const OAIAvailabilitySetUpdate &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void availabilitySetsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void availabilitySetsDeleteCallback(OAIHttpRequestWorker *worker);
    void availabilitySetsGetCallback(OAIHttpRequestWorker *worker);
    void availabilitySetsListCallback(OAIHttpRequestWorker *worker);
    void availabilitySetsListAvailableSizesCallback(OAIHttpRequestWorker *worker);
    void availabilitySetsListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void availabilitySetsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void availabilitySetsCreateOrUpdateSignal(OAIAvailabilitySet summary);
    void availabilitySetsDeleteSignal();
    void availabilitySetsGetSignal(OAIAvailabilitySet summary);
    void availabilitySetsListSignal(OAIAvailabilitySetListResult summary);
    void availabilitySetsListAvailableSizesSignal(OAIVirtualMachineSizeListResult summary);
    void availabilitySetsListBySubscriptionSignal(OAIAvailabilitySetListResult summary);
    void availabilitySetsUpdateSignal(OAIAvailabilitySet summary);


    void availabilitySetsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAvailabilitySet summary);
    void availabilitySetsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void availabilitySetsGetSignalFull(OAIHttpRequestWorker *worker, OAIAvailabilitySet summary);
    void availabilitySetsListSignalFull(OAIHttpRequestWorker *worker, OAIAvailabilitySetListResult summary);
    void availabilitySetsListAvailableSizesSignalFull(OAIHttpRequestWorker *worker, OAIVirtualMachineSizeListResult summary);
    void availabilitySetsListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIAvailabilitySetListResult summary);
    void availabilitySetsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAvailabilitySet summary);

    Q_DECL_DEPRECATED_X("Use availabilitySetsCreateOrUpdateSignalError() instead")
    void availabilitySetsCreateOrUpdateSignalE(OAIAvailabilitySet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void availabilitySetsCreateOrUpdateSignalError(OAIAvailabilitySet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use availabilitySetsDeleteSignalError() instead")
    void availabilitySetsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void availabilitySetsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use availabilitySetsGetSignalError() instead")
    void availabilitySetsGetSignalE(OAIAvailabilitySet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void availabilitySetsGetSignalError(OAIAvailabilitySet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use availabilitySetsListSignalError() instead")
    void availabilitySetsListSignalE(OAIAvailabilitySetListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void availabilitySetsListSignalError(OAIAvailabilitySetListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use availabilitySetsListAvailableSizesSignalError() instead")
    void availabilitySetsListAvailableSizesSignalE(OAIVirtualMachineSizeListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void availabilitySetsListAvailableSizesSignalError(OAIVirtualMachineSizeListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use availabilitySetsListBySubscriptionSignalError() instead")
    void availabilitySetsListBySubscriptionSignalE(OAIAvailabilitySetListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void availabilitySetsListBySubscriptionSignalError(OAIAvailabilitySetListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use availabilitySetsUpdateSignalError() instead")
    void availabilitySetsUpdateSignalE(OAIAvailabilitySet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void availabilitySetsUpdateSignalError(OAIAvailabilitySet summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use availabilitySetsCreateOrUpdateSignalErrorFull() instead")
    void availabilitySetsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void availabilitySetsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use availabilitySetsDeleteSignalErrorFull() instead")
    void availabilitySetsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void availabilitySetsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use availabilitySetsGetSignalErrorFull() instead")
    void availabilitySetsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void availabilitySetsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use availabilitySetsListSignalErrorFull() instead")
    void availabilitySetsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void availabilitySetsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use availabilitySetsListAvailableSizesSignalErrorFull() instead")
    void availabilitySetsListAvailableSizesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void availabilitySetsListAvailableSizesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use availabilitySetsListBySubscriptionSignalErrorFull() instead")
    void availabilitySetsListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void availabilitySetsListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use availabilitySetsUpdateSignalErrorFull() instead")
    void availabilitySetsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void availabilitySetsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
