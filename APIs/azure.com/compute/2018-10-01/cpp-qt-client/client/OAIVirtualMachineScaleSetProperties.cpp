/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualMachineScaleSetProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualMachineScaleSetProperties::OAIVirtualMachineScaleSetProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualMachineScaleSetProperties::OAIVirtualMachineScaleSetProperties() {
    this->initializeModel();
}

OAIVirtualMachineScaleSetProperties::~OAIVirtualMachineScaleSetProperties() {}

void OAIVirtualMachineScaleSetProperties::initializeModel() {

    m_automatic_repairs_policy_isSet = false;
    m_automatic_repairs_policy_isValid = false;

    m_do_not_run_extensions_on_overprovisioned_vms_isSet = false;
    m_do_not_run_extensions_on_overprovisioned_vms_isValid = false;

    m_overprovision_isSet = false;
    m_overprovision_isValid = false;

    m_platform_fault_domain_count_isSet = false;
    m_platform_fault_domain_count_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_proximity_placement_group_isSet = false;
    m_proximity_placement_group_isValid = false;

    m_single_placement_group_isSet = false;
    m_single_placement_group_isValid = false;

    m_unique_id_isSet = false;
    m_unique_id_isValid = false;

    m_upgrade_policy_isSet = false;
    m_upgrade_policy_isValid = false;

    m_virtual_machine_profile_isSet = false;
    m_virtual_machine_profile_isValid = false;

    m_zone_balance_isSet = false;
    m_zone_balance_isValid = false;
}

void OAIVirtualMachineScaleSetProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualMachineScaleSetProperties::fromJsonObject(QJsonObject json) {

    m_automatic_repairs_policy_isValid = ::OpenAPI::fromJsonValue(m_automatic_repairs_policy, json[QString("automaticRepairsPolicy")]);
    m_automatic_repairs_policy_isSet = !json[QString("automaticRepairsPolicy")].isNull() && m_automatic_repairs_policy_isValid;

    m_do_not_run_extensions_on_overprovisioned_vms_isValid = ::OpenAPI::fromJsonValue(m_do_not_run_extensions_on_overprovisioned_vms, json[QString("doNotRunExtensionsOnOverprovisionedVMs")]);
    m_do_not_run_extensions_on_overprovisioned_vms_isSet = !json[QString("doNotRunExtensionsOnOverprovisionedVMs")].isNull() && m_do_not_run_extensions_on_overprovisioned_vms_isValid;

    m_overprovision_isValid = ::OpenAPI::fromJsonValue(m_overprovision, json[QString("overprovision")]);
    m_overprovision_isSet = !json[QString("overprovision")].isNull() && m_overprovision_isValid;

    m_platform_fault_domain_count_isValid = ::OpenAPI::fromJsonValue(m_platform_fault_domain_count, json[QString("platformFaultDomainCount")]);
    m_platform_fault_domain_count_isSet = !json[QString("platformFaultDomainCount")].isNull() && m_platform_fault_domain_count_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_proximity_placement_group_isValid = ::OpenAPI::fromJsonValue(m_proximity_placement_group, json[QString("proximityPlacementGroup")]);
    m_proximity_placement_group_isSet = !json[QString("proximityPlacementGroup")].isNull() && m_proximity_placement_group_isValid;

    m_single_placement_group_isValid = ::OpenAPI::fromJsonValue(m_single_placement_group, json[QString("singlePlacementGroup")]);
    m_single_placement_group_isSet = !json[QString("singlePlacementGroup")].isNull() && m_single_placement_group_isValid;

    m_unique_id_isValid = ::OpenAPI::fromJsonValue(m_unique_id, json[QString("uniqueId")]);
    m_unique_id_isSet = !json[QString("uniqueId")].isNull() && m_unique_id_isValid;

    m_upgrade_policy_isValid = ::OpenAPI::fromJsonValue(m_upgrade_policy, json[QString("upgradePolicy")]);
    m_upgrade_policy_isSet = !json[QString("upgradePolicy")].isNull() && m_upgrade_policy_isValid;

    m_virtual_machine_profile_isValid = ::OpenAPI::fromJsonValue(m_virtual_machine_profile, json[QString("virtualMachineProfile")]);
    m_virtual_machine_profile_isSet = !json[QString("virtualMachineProfile")].isNull() && m_virtual_machine_profile_isValid;

    m_zone_balance_isValid = ::OpenAPI::fromJsonValue(m_zone_balance, json[QString("zoneBalance")]);
    m_zone_balance_isSet = !json[QString("zoneBalance")].isNull() && m_zone_balance_isValid;
}

QString OAIVirtualMachineScaleSetProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualMachineScaleSetProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_automatic_repairs_policy.isSet()) {
        obj.insert(QString("automaticRepairsPolicy"), ::OpenAPI::toJsonValue(m_automatic_repairs_policy));
    }
    if (m_do_not_run_extensions_on_overprovisioned_vms_isSet) {
        obj.insert(QString("doNotRunExtensionsOnOverprovisionedVMs"), ::OpenAPI::toJsonValue(m_do_not_run_extensions_on_overprovisioned_vms));
    }
    if (m_overprovision_isSet) {
        obj.insert(QString("overprovision"), ::OpenAPI::toJsonValue(m_overprovision));
    }
    if (m_platform_fault_domain_count_isSet) {
        obj.insert(QString("platformFaultDomainCount"), ::OpenAPI::toJsonValue(m_platform_fault_domain_count));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_proximity_placement_group.isSet()) {
        obj.insert(QString("proximityPlacementGroup"), ::OpenAPI::toJsonValue(m_proximity_placement_group));
    }
    if (m_single_placement_group_isSet) {
        obj.insert(QString("singlePlacementGroup"), ::OpenAPI::toJsonValue(m_single_placement_group));
    }
    if (m_unique_id_isSet) {
        obj.insert(QString("uniqueId"), ::OpenAPI::toJsonValue(m_unique_id));
    }
    if (m_upgrade_policy.isSet()) {
        obj.insert(QString("upgradePolicy"), ::OpenAPI::toJsonValue(m_upgrade_policy));
    }
    if (m_virtual_machine_profile.isSet()) {
        obj.insert(QString("virtualMachineProfile"), ::OpenAPI::toJsonValue(m_virtual_machine_profile));
    }
    if (m_zone_balance_isSet) {
        obj.insert(QString("zoneBalance"), ::OpenAPI::toJsonValue(m_zone_balance));
    }
    return obj;
}

OAIAutomaticRepairsPolicy OAIVirtualMachineScaleSetProperties::getAutomaticRepairsPolicy() const {
    return m_automatic_repairs_policy;
}
void OAIVirtualMachineScaleSetProperties::setAutomaticRepairsPolicy(const OAIAutomaticRepairsPolicy &automatic_repairs_policy) {
    m_automatic_repairs_policy = automatic_repairs_policy;
    m_automatic_repairs_policy_isSet = true;
}

bool OAIVirtualMachineScaleSetProperties::is_automatic_repairs_policy_Set() const{
    return m_automatic_repairs_policy_isSet;
}

bool OAIVirtualMachineScaleSetProperties::is_automatic_repairs_policy_Valid() const{
    return m_automatic_repairs_policy_isValid;
}

bool OAIVirtualMachineScaleSetProperties::isDoNotRunExtensionsOnOverprovisionedVms() const {
    return m_do_not_run_extensions_on_overprovisioned_vms;
}
void OAIVirtualMachineScaleSetProperties::setDoNotRunExtensionsOnOverprovisionedVms(const bool &do_not_run_extensions_on_overprovisioned_vms) {
    m_do_not_run_extensions_on_overprovisioned_vms = do_not_run_extensions_on_overprovisioned_vms;
    m_do_not_run_extensions_on_overprovisioned_vms_isSet = true;
}

bool OAIVirtualMachineScaleSetProperties::is_do_not_run_extensions_on_overprovisioned_vms_Set() const{
    return m_do_not_run_extensions_on_overprovisioned_vms_isSet;
}

bool OAIVirtualMachineScaleSetProperties::is_do_not_run_extensions_on_overprovisioned_vms_Valid() const{
    return m_do_not_run_extensions_on_overprovisioned_vms_isValid;
}

bool OAIVirtualMachineScaleSetProperties::isOverprovision() const {
    return m_overprovision;
}
void OAIVirtualMachineScaleSetProperties::setOverprovision(const bool &overprovision) {
    m_overprovision = overprovision;
    m_overprovision_isSet = true;
}

bool OAIVirtualMachineScaleSetProperties::is_overprovision_Set() const{
    return m_overprovision_isSet;
}

bool OAIVirtualMachineScaleSetProperties::is_overprovision_Valid() const{
    return m_overprovision_isValid;
}

qint32 OAIVirtualMachineScaleSetProperties::getPlatformFaultDomainCount() const {
    return m_platform_fault_domain_count;
}
void OAIVirtualMachineScaleSetProperties::setPlatformFaultDomainCount(const qint32 &platform_fault_domain_count) {
    m_platform_fault_domain_count = platform_fault_domain_count;
    m_platform_fault_domain_count_isSet = true;
}

bool OAIVirtualMachineScaleSetProperties::is_platform_fault_domain_count_Set() const{
    return m_platform_fault_domain_count_isSet;
}

bool OAIVirtualMachineScaleSetProperties::is_platform_fault_domain_count_Valid() const{
    return m_platform_fault_domain_count_isValid;
}

QString OAIVirtualMachineScaleSetProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIVirtualMachineScaleSetProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIVirtualMachineScaleSetProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIVirtualMachineScaleSetProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAISubResource OAIVirtualMachineScaleSetProperties::getProximityPlacementGroup() const {
    return m_proximity_placement_group;
}
void OAIVirtualMachineScaleSetProperties::setProximityPlacementGroup(const OAISubResource &proximity_placement_group) {
    m_proximity_placement_group = proximity_placement_group;
    m_proximity_placement_group_isSet = true;
}

bool OAIVirtualMachineScaleSetProperties::is_proximity_placement_group_Set() const{
    return m_proximity_placement_group_isSet;
}

bool OAIVirtualMachineScaleSetProperties::is_proximity_placement_group_Valid() const{
    return m_proximity_placement_group_isValid;
}

bool OAIVirtualMachineScaleSetProperties::isSinglePlacementGroup() const {
    return m_single_placement_group;
}
void OAIVirtualMachineScaleSetProperties::setSinglePlacementGroup(const bool &single_placement_group) {
    m_single_placement_group = single_placement_group;
    m_single_placement_group_isSet = true;
}

bool OAIVirtualMachineScaleSetProperties::is_single_placement_group_Set() const{
    return m_single_placement_group_isSet;
}

bool OAIVirtualMachineScaleSetProperties::is_single_placement_group_Valid() const{
    return m_single_placement_group_isValid;
}

QString OAIVirtualMachineScaleSetProperties::getUniqueId() const {
    return m_unique_id;
}
void OAIVirtualMachineScaleSetProperties::setUniqueId(const QString &unique_id) {
    m_unique_id = unique_id;
    m_unique_id_isSet = true;
}

bool OAIVirtualMachineScaleSetProperties::is_unique_id_Set() const{
    return m_unique_id_isSet;
}

bool OAIVirtualMachineScaleSetProperties::is_unique_id_Valid() const{
    return m_unique_id_isValid;
}

OAIUpgradePolicy OAIVirtualMachineScaleSetProperties::getUpgradePolicy() const {
    return m_upgrade_policy;
}
void OAIVirtualMachineScaleSetProperties::setUpgradePolicy(const OAIUpgradePolicy &upgrade_policy) {
    m_upgrade_policy = upgrade_policy;
    m_upgrade_policy_isSet = true;
}

bool OAIVirtualMachineScaleSetProperties::is_upgrade_policy_Set() const{
    return m_upgrade_policy_isSet;
}

bool OAIVirtualMachineScaleSetProperties::is_upgrade_policy_Valid() const{
    return m_upgrade_policy_isValid;
}

OAIVirtualMachineScaleSetVMProfile OAIVirtualMachineScaleSetProperties::getVirtualMachineProfile() const {
    return m_virtual_machine_profile;
}
void OAIVirtualMachineScaleSetProperties::setVirtualMachineProfile(const OAIVirtualMachineScaleSetVMProfile &virtual_machine_profile) {
    m_virtual_machine_profile = virtual_machine_profile;
    m_virtual_machine_profile_isSet = true;
}

bool OAIVirtualMachineScaleSetProperties::is_virtual_machine_profile_Set() const{
    return m_virtual_machine_profile_isSet;
}

bool OAIVirtualMachineScaleSetProperties::is_virtual_machine_profile_Valid() const{
    return m_virtual_machine_profile_isValid;
}

bool OAIVirtualMachineScaleSetProperties::isZoneBalance() const {
    return m_zone_balance;
}
void OAIVirtualMachineScaleSetProperties::setZoneBalance(const bool &zone_balance) {
    m_zone_balance = zone_balance;
    m_zone_balance_isSet = true;
}

bool OAIVirtualMachineScaleSetProperties::is_zone_balance_Set() const{
    return m_zone_balance_isSet;
}

bool OAIVirtualMachineScaleSetProperties::is_zone_balance_Valid() const{
    return m_zone_balance_isValid;
}

bool OAIVirtualMachineScaleSetProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_automatic_repairs_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_do_not_run_extensions_on_overprovisioned_vms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overprovision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_fault_domain_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proximity_placement_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_placement_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_machine_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_balance_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualMachineScaleSetProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
