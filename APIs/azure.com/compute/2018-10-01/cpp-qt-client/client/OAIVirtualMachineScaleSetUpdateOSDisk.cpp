/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualMachineScaleSetUpdateOSDisk.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualMachineScaleSetUpdateOSDisk::OAIVirtualMachineScaleSetUpdateOSDisk(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualMachineScaleSetUpdateOSDisk::OAIVirtualMachineScaleSetUpdateOSDisk() {
    this->initializeModel();
}

OAIVirtualMachineScaleSetUpdateOSDisk::~OAIVirtualMachineScaleSetUpdateOSDisk() {}

void OAIVirtualMachineScaleSetUpdateOSDisk::initializeModel() {

    m_caching_isSet = false;
    m_caching_isValid = false;

    m_disk_size_gb_isSet = false;
    m_disk_size_gb_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_managed_disk_isSet = false;
    m_managed_disk_isValid = false;

    m_vhd_containers_isSet = false;
    m_vhd_containers_isValid = false;

    m_write_accelerator_enabled_isSet = false;
    m_write_accelerator_enabled_isValid = false;
}

void OAIVirtualMachineScaleSetUpdateOSDisk::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualMachineScaleSetUpdateOSDisk::fromJsonObject(QJsonObject json) {

    m_caching_isValid = ::OpenAPI::fromJsonValue(m_caching, json[QString("caching")]);
    m_caching_isSet = !json[QString("caching")].isNull() && m_caching_isValid;

    m_disk_size_gb_isValid = ::OpenAPI::fromJsonValue(m_disk_size_gb, json[QString("diskSizeGB")]);
    m_disk_size_gb_isSet = !json[QString("diskSizeGB")].isNull() && m_disk_size_gb_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_managed_disk_isValid = ::OpenAPI::fromJsonValue(m_managed_disk, json[QString("managedDisk")]);
    m_managed_disk_isSet = !json[QString("managedDisk")].isNull() && m_managed_disk_isValid;

    m_vhd_containers_isValid = ::OpenAPI::fromJsonValue(m_vhd_containers, json[QString("vhdContainers")]);
    m_vhd_containers_isSet = !json[QString("vhdContainers")].isNull() && m_vhd_containers_isValid;

    m_write_accelerator_enabled_isValid = ::OpenAPI::fromJsonValue(m_write_accelerator_enabled, json[QString("writeAcceleratorEnabled")]);
    m_write_accelerator_enabled_isSet = !json[QString("writeAcceleratorEnabled")].isNull() && m_write_accelerator_enabled_isValid;
}

QString OAIVirtualMachineScaleSetUpdateOSDisk::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualMachineScaleSetUpdateOSDisk::asJsonObject() const {
    QJsonObject obj;
    if (m_caching.isSet()) {
        obj.insert(QString("caching"), ::OpenAPI::toJsonValue(m_caching));
    }
    if (m_disk_size_gb_isSet) {
        obj.insert(QString("diskSizeGB"), ::OpenAPI::toJsonValue(m_disk_size_gb));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_managed_disk.isSet()) {
        obj.insert(QString("managedDisk"), ::OpenAPI::toJsonValue(m_managed_disk));
    }
    if (m_vhd_containers.size() > 0) {
        obj.insert(QString("vhdContainers"), ::OpenAPI::toJsonValue(m_vhd_containers));
    }
    if (m_write_accelerator_enabled_isSet) {
        obj.insert(QString("writeAcceleratorEnabled"), ::OpenAPI::toJsonValue(m_write_accelerator_enabled));
    }
    return obj;
}

OAICaching OAIVirtualMachineScaleSetUpdateOSDisk::getCaching() const {
    return m_caching;
}
void OAIVirtualMachineScaleSetUpdateOSDisk::setCaching(const OAICaching &caching) {
    m_caching = caching;
    m_caching_isSet = true;
}

bool OAIVirtualMachineScaleSetUpdateOSDisk::is_caching_Set() const{
    return m_caching_isSet;
}

bool OAIVirtualMachineScaleSetUpdateOSDisk::is_caching_Valid() const{
    return m_caching_isValid;
}

qint32 OAIVirtualMachineScaleSetUpdateOSDisk::getDiskSizeGb() const {
    return m_disk_size_gb;
}
void OAIVirtualMachineScaleSetUpdateOSDisk::setDiskSizeGb(const qint32 &disk_size_gb) {
    m_disk_size_gb = disk_size_gb;
    m_disk_size_gb_isSet = true;
}

bool OAIVirtualMachineScaleSetUpdateOSDisk::is_disk_size_gb_Set() const{
    return m_disk_size_gb_isSet;
}

bool OAIVirtualMachineScaleSetUpdateOSDisk::is_disk_size_gb_Valid() const{
    return m_disk_size_gb_isValid;
}

OAIVirtualHardDisk OAIVirtualMachineScaleSetUpdateOSDisk::getImage() const {
    return m_image;
}
void OAIVirtualMachineScaleSetUpdateOSDisk::setImage(const OAIVirtualHardDisk &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIVirtualMachineScaleSetUpdateOSDisk::is_image_Set() const{
    return m_image_isSet;
}

bool OAIVirtualMachineScaleSetUpdateOSDisk::is_image_Valid() const{
    return m_image_isValid;
}

OAIVirtualMachineScaleSetManagedDiskParameters OAIVirtualMachineScaleSetUpdateOSDisk::getManagedDisk() const {
    return m_managed_disk;
}
void OAIVirtualMachineScaleSetUpdateOSDisk::setManagedDisk(const OAIVirtualMachineScaleSetManagedDiskParameters &managed_disk) {
    m_managed_disk = managed_disk;
    m_managed_disk_isSet = true;
}

bool OAIVirtualMachineScaleSetUpdateOSDisk::is_managed_disk_Set() const{
    return m_managed_disk_isSet;
}

bool OAIVirtualMachineScaleSetUpdateOSDisk::is_managed_disk_Valid() const{
    return m_managed_disk_isValid;
}

QList<QString> OAIVirtualMachineScaleSetUpdateOSDisk::getVhdContainers() const {
    return m_vhd_containers;
}
void OAIVirtualMachineScaleSetUpdateOSDisk::setVhdContainers(const QList<QString> &vhd_containers) {
    m_vhd_containers = vhd_containers;
    m_vhd_containers_isSet = true;
}

bool OAIVirtualMachineScaleSetUpdateOSDisk::is_vhd_containers_Set() const{
    return m_vhd_containers_isSet;
}

bool OAIVirtualMachineScaleSetUpdateOSDisk::is_vhd_containers_Valid() const{
    return m_vhd_containers_isValid;
}

bool OAIVirtualMachineScaleSetUpdateOSDisk::isWriteAcceleratorEnabled() const {
    return m_write_accelerator_enabled;
}
void OAIVirtualMachineScaleSetUpdateOSDisk::setWriteAcceleratorEnabled(const bool &write_accelerator_enabled) {
    m_write_accelerator_enabled = write_accelerator_enabled;
    m_write_accelerator_enabled_isSet = true;
}

bool OAIVirtualMachineScaleSetUpdateOSDisk::is_write_accelerator_enabled_Set() const{
    return m_write_accelerator_enabled_isSet;
}

bool OAIVirtualMachineScaleSetUpdateOSDisk::is_write_accelerator_enabled_Valid() const{
    return m_write_accelerator_enabled_isValid;
}

bool OAIVirtualMachineScaleSetUpdateOSDisk::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_caching.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_size_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_disk.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vhd_containers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_accelerator_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualMachineScaleSetUpdateOSDisk::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
