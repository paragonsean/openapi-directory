/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOSDiskImage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOSDiskImage::OAIOSDiskImage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOSDiskImage::OAIOSDiskImage() {
    this->initializeModel();
}

OAIOSDiskImage::~OAIOSDiskImage() {}

void OAIOSDiskImage::initializeModel() {

    m_operating_system_isSet = false;
    m_operating_system_isValid = false;
}

void OAIOSDiskImage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOSDiskImage::fromJsonObject(QJsonObject json) {

    m_operating_system_isValid = ::OpenAPI::fromJsonValue(m_operating_system, json[QString("operatingSystem")]);
    m_operating_system_isSet = !json[QString("operatingSystem")].isNull() && m_operating_system_isValid;
}

QString OAIOSDiskImage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOSDiskImage::asJsonObject() const {
    QJsonObject obj;
    if (m_operating_system_isSet) {
        obj.insert(QString("operatingSystem"), ::OpenAPI::toJsonValue(m_operating_system));
    }
    return obj;
}

QString OAIOSDiskImage::getOperatingSystem() const {
    return m_operating_system;
}
void OAIOSDiskImage::setOperatingSystem(const QString &operating_system) {
    m_operating_system = operating_system;
    m_operating_system_isSet = true;
}

bool OAIOSDiskImage::is_operating_system_Set() const{
    return m_operating_system_isSet;
}

bool OAIOSDiskImage::is_operating_system_Valid() const{
    return m_operating_system_isValid;
}

bool OAIOSDiskImage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_operating_system_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOSDiskImage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_operating_system_isValid && true;
}

} // namespace OpenAPI
