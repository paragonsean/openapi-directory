/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVaultCertificate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVaultCertificate::OAIVaultCertificate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVaultCertificate::OAIVaultCertificate() {
    this->initializeModel();
}

OAIVaultCertificate::~OAIVaultCertificate() {}

void OAIVaultCertificate::initializeModel() {

    m_certificate_store_isSet = false;
    m_certificate_store_isValid = false;

    m_certificate_url_isSet = false;
    m_certificate_url_isValid = false;
}

void OAIVaultCertificate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVaultCertificate::fromJsonObject(QJsonObject json) {

    m_certificate_store_isValid = ::OpenAPI::fromJsonValue(m_certificate_store, json[QString("certificateStore")]);
    m_certificate_store_isSet = !json[QString("certificateStore")].isNull() && m_certificate_store_isValid;

    m_certificate_url_isValid = ::OpenAPI::fromJsonValue(m_certificate_url, json[QString("certificateUrl")]);
    m_certificate_url_isSet = !json[QString("certificateUrl")].isNull() && m_certificate_url_isValid;
}

QString OAIVaultCertificate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVaultCertificate::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_store_isSet) {
        obj.insert(QString("certificateStore"), ::OpenAPI::toJsonValue(m_certificate_store));
    }
    if (m_certificate_url_isSet) {
        obj.insert(QString("certificateUrl"), ::OpenAPI::toJsonValue(m_certificate_url));
    }
    return obj;
}

QString OAIVaultCertificate::getCertificateStore() const {
    return m_certificate_store;
}
void OAIVaultCertificate::setCertificateStore(const QString &certificate_store) {
    m_certificate_store = certificate_store;
    m_certificate_store_isSet = true;
}

bool OAIVaultCertificate::is_certificate_store_Set() const{
    return m_certificate_store_isSet;
}

bool OAIVaultCertificate::is_certificate_store_Valid() const{
    return m_certificate_store_isValid;
}

QString OAIVaultCertificate::getCertificateUrl() const {
    return m_certificate_url;
}
void OAIVaultCertificate::setCertificateUrl(const QString &certificate_url) {
    m_certificate_url = certificate_url;
    m_certificate_url_isSet = true;
}

bool OAIVaultCertificate::is_certificate_url_Set() const{
    return m_certificate_url_isSet;
}

bool OAIVaultCertificate::is_certificate_url_Valid() const{
    return m_certificate_url_isValid;
}

bool OAIVaultCertificate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_store_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVaultCertificate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
