/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIImagesApi_H
#define OAI_OAIImagesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIImage.h"
#include "OAIImageListResult.h"
#include "OAIImageUpdate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIImagesApi : public QObject {
    Q_OBJECT

public:
    OAIImagesApi(const int timeOut = 0);
    ~OAIImagesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  image_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIImage [required]
    */
    virtual void imagesCreateOrUpdate(const QString &resource_group_name, const QString &image_name, const QString &api_version, const QString &subscription_id, const OAIImage &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  image_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void imagesDelete(const QString &resource_group_name, const QString &image_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  image_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void imagesGet(const QString &resource_group_name, const QString &image_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void imagesList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void imagesListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  image_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIImageUpdate [required]
    */
    virtual void imagesUpdate(const QString &resource_group_name, const QString &image_name, const QString &api_version, const QString &subscription_id, const OAIImageUpdate &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void imagesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void imagesDeleteCallback(OAIHttpRequestWorker *worker);
    void imagesGetCallback(OAIHttpRequestWorker *worker);
    void imagesListCallback(OAIHttpRequestWorker *worker);
    void imagesListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void imagesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void imagesCreateOrUpdateSignal(OAIImage summary);
    void imagesDeleteSignal();
    void imagesGetSignal(OAIImage summary);
    void imagesListSignal(OAIImageListResult summary);
    void imagesListByResourceGroupSignal(OAIImageListResult summary);
    void imagesUpdateSignal(OAIImage summary);


    void imagesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIImage summary);
    void imagesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void imagesGetSignalFull(OAIHttpRequestWorker *worker, OAIImage summary);
    void imagesListSignalFull(OAIHttpRequestWorker *worker, OAIImageListResult summary);
    void imagesListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIImageListResult summary);
    void imagesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIImage summary);

    Q_DECL_DEPRECATED_X("Use imagesCreateOrUpdateSignalError() instead")
    void imagesCreateOrUpdateSignalE(OAIImage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void imagesCreateOrUpdateSignalError(OAIImage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imagesDeleteSignalError() instead")
    void imagesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void imagesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imagesGetSignalError() instead")
    void imagesGetSignalE(OAIImage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void imagesGetSignalError(OAIImage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imagesListSignalError() instead")
    void imagesListSignalE(OAIImageListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void imagesListSignalError(OAIImageListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imagesListByResourceGroupSignalError() instead")
    void imagesListByResourceGroupSignalE(OAIImageListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void imagesListByResourceGroupSignalError(OAIImageListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imagesUpdateSignalError() instead")
    void imagesUpdateSignalE(OAIImage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void imagesUpdateSignalError(OAIImage summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use imagesCreateOrUpdateSignalErrorFull() instead")
    void imagesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void imagesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imagesDeleteSignalErrorFull() instead")
    void imagesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void imagesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imagesGetSignalErrorFull() instead")
    void imagesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void imagesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imagesListSignalErrorFull() instead")
    void imagesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void imagesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imagesListByResourceGroupSignalErrorFull() instead")
    void imagesListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void imagesListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imagesUpdateSignalErrorFull() instead")
    void imagesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void imagesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
