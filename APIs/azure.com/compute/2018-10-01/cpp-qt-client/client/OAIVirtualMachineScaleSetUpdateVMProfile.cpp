/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualMachineScaleSetUpdateVMProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualMachineScaleSetUpdateVMProfile::OAIVirtualMachineScaleSetUpdateVMProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualMachineScaleSetUpdateVMProfile::OAIVirtualMachineScaleSetUpdateVMProfile() {
    this->initializeModel();
}

OAIVirtualMachineScaleSetUpdateVMProfile::~OAIVirtualMachineScaleSetUpdateVMProfile() {}

void OAIVirtualMachineScaleSetUpdateVMProfile::initializeModel() {

    m_diagnostics_profile_isSet = false;
    m_diagnostics_profile_isValid = false;

    m_extension_profile_isSet = false;
    m_extension_profile_isValid = false;

    m_license_type_isSet = false;
    m_license_type_isValid = false;

    m_network_profile_isSet = false;
    m_network_profile_isValid = false;

    m_os_profile_isSet = false;
    m_os_profile_isValid = false;

    m_storage_profile_isSet = false;
    m_storage_profile_isValid = false;
}

void OAIVirtualMachineScaleSetUpdateVMProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualMachineScaleSetUpdateVMProfile::fromJsonObject(QJsonObject json) {

    m_diagnostics_profile_isValid = ::OpenAPI::fromJsonValue(m_diagnostics_profile, json[QString("diagnosticsProfile")]);
    m_diagnostics_profile_isSet = !json[QString("diagnosticsProfile")].isNull() && m_diagnostics_profile_isValid;

    m_extension_profile_isValid = ::OpenAPI::fromJsonValue(m_extension_profile, json[QString("extensionProfile")]);
    m_extension_profile_isSet = !json[QString("extensionProfile")].isNull() && m_extension_profile_isValid;

    m_license_type_isValid = ::OpenAPI::fromJsonValue(m_license_type, json[QString("licenseType")]);
    m_license_type_isSet = !json[QString("licenseType")].isNull() && m_license_type_isValid;

    m_network_profile_isValid = ::OpenAPI::fromJsonValue(m_network_profile, json[QString("networkProfile")]);
    m_network_profile_isSet = !json[QString("networkProfile")].isNull() && m_network_profile_isValid;

    m_os_profile_isValid = ::OpenAPI::fromJsonValue(m_os_profile, json[QString("osProfile")]);
    m_os_profile_isSet = !json[QString("osProfile")].isNull() && m_os_profile_isValid;

    m_storage_profile_isValid = ::OpenAPI::fromJsonValue(m_storage_profile, json[QString("storageProfile")]);
    m_storage_profile_isSet = !json[QString("storageProfile")].isNull() && m_storage_profile_isValid;
}

QString OAIVirtualMachineScaleSetUpdateVMProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualMachineScaleSetUpdateVMProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_diagnostics_profile.isSet()) {
        obj.insert(QString("diagnosticsProfile"), ::OpenAPI::toJsonValue(m_diagnostics_profile));
    }
    if (m_extension_profile.isSet()) {
        obj.insert(QString("extensionProfile"), ::OpenAPI::toJsonValue(m_extension_profile));
    }
    if (m_license_type_isSet) {
        obj.insert(QString("licenseType"), ::OpenAPI::toJsonValue(m_license_type));
    }
    if (m_network_profile.isSet()) {
        obj.insert(QString("networkProfile"), ::OpenAPI::toJsonValue(m_network_profile));
    }
    if (m_os_profile.isSet()) {
        obj.insert(QString("osProfile"), ::OpenAPI::toJsonValue(m_os_profile));
    }
    if (m_storage_profile.isSet()) {
        obj.insert(QString("storageProfile"), ::OpenAPI::toJsonValue(m_storage_profile));
    }
    return obj;
}

OAIDiagnosticsProfile OAIVirtualMachineScaleSetUpdateVMProfile::getDiagnosticsProfile() const {
    return m_diagnostics_profile;
}
void OAIVirtualMachineScaleSetUpdateVMProfile::setDiagnosticsProfile(const OAIDiagnosticsProfile &diagnostics_profile) {
    m_diagnostics_profile = diagnostics_profile;
    m_diagnostics_profile_isSet = true;
}

bool OAIVirtualMachineScaleSetUpdateVMProfile::is_diagnostics_profile_Set() const{
    return m_diagnostics_profile_isSet;
}

bool OAIVirtualMachineScaleSetUpdateVMProfile::is_diagnostics_profile_Valid() const{
    return m_diagnostics_profile_isValid;
}

OAIVirtualMachineScaleSetExtensionProfile OAIVirtualMachineScaleSetUpdateVMProfile::getExtensionProfile() const {
    return m_extension_profile;
}
void OAIVirtualMachineScaleSetUpdateVMProfile::setExtensionProfile(const OAIVirtualMachineScaleSetExtensionProfile &extension_profile) {
    m_extension_profile = extension_profile;
    m_extension_profile_isSet = true;
}

bool OAIVirtualMachineScaleSetUpdateVMProfile::is_extension_profile_Set() const{
    return m_extension_profile_isSet;
}

bool OAIVirtualMachineScaleSetUpdateVMProfile::is_extension_profile_Valid() const{
    return m_extension_profile_isValid;
}

QString OAIVirtualMachineScaleSetUpdateVMProfile::getLicenseType() const {
    return m_license_type;
}
void OAIVirtualMachineScaleSetUpdateVMProfile::setLicenseType(const QString &license_type) {
    m_license_type = license_type;
    m_license_type_isSet = true;
}

bool OAIVirtualMachineScaleSetUpdateVMProfile::is_license_type_Set() const{
    return m_license_type_isSet;
}

bool OAIVirtualMachineScaleSetUpdateVMProfile::is_license_type_Valid() const{
    return m_license_type_isValid;
}

OAIVirtualMachineScaleSetUpdateNetworkProfile OAIVirtualMachineScaleSetUpdateVMProfile::getNetworkProfile() const {
    return m_network_profile;
}
void OAIVirtualMachineScaleSetUpdateVMProfile::setNetworkProfile(const OAIVirtualMachineScaleSetUpdateNetworkProfile &network_profile) {
    m_network_profile = network_profile;
    m_network_profile_isSet = true;
}

bool OAIVirtualMachineScaleSetUpdateVMProfile::is_network_profile_Set() const{
    return m_network_profile_isSet;
}

bool OAIVirtualMachineScaleSetUpdateVMProfile::is_network_profile_Valid() const{
    return m_network_profile_isValid;
}

OAIVirtualMachineScaleSetUpdateOSProfile OAIVirtualMachineScaleSetUpdateVMProfile::getOsProfile() const {
    return m_os_profile;
}
void OAIVirtualMachineScaleSetUpdateVMProfile::setOsProfile(const OAIVirtualMachineScaleSetUpdateOSProfile &os_profile) {
    m_os_profile = os_profile;
    m_os_profile_isSet = true;
}

bool OAIVirtualMachineScaleSetUpdateVMProfile::is_os_profile_Set() const{
    return m_os_profile_isSet;
}

bool OAIVirtualMachineScaleSetUpdateVMProfile::is_os_profile_Valid() const{
    return m_os_profile_isValid;
}

OAIVirtualMachineScaleSetUpdateStorageProfile OAIVirtualMachineScaleSetUpdateVMProfile::getStorageProfile() const {
    return m_storage_profile;
}
void OAIVirtualMachineScaleSetUpdateVMProfile::setStorageProfile(const OAIVirtualMachineScaleSetUpdateStorageProfile &storage_profile) {
    m_storage_profile = storage_profile;
    m_storage_profile_isSet = true;
}

bool OAIVirtualMachineScaleSetUpdateVMProfile::is_storage_profile_Set() const{
    return m_storage_profile_isSet;
}

bool OAIVirtualMachineScaleSetUpdateVMProfile::is_storage_profile_Valid() const{
    return m_storage_profile_isValid;
}

bool OAIVirtualMachineScaleSetUpdateVMProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_diagnostics_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualMachineScaleSetUpdateVMProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
