/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualMachineScaleSetExtensionProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualMachineScaleSetExtensionProperties::OAIVirtualMachineScaleSetExtensionProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualMachineScaleSetExtensionProperties::OAIVirtualMachineScaleSetExtensionProperties() {
    this->initializeModel();
}

OAIVirtualMachineScaleSetExtensionProperties::~OAIVirtualMachineScaleSetExtensionProperties() {}

void OAIVirtualMachineScaleSetExtensionProperties::initializeModel() {

    m_auto_upgrade_minor_version_isSet = false;
    m_auto_upgrade_minor_version_isValid = false;

    m_force_update_tag_isSet = false;
    m_force_update_tag_isValid = false;

    m_protected_settings_isSet = false;
    m_protected_settings_isValid = false;

    m_provision_after_extensions_isSet = false;
    m_provision_after_extensions_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_publisher_isSet = false;
    m_publisher_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_type_handler_version_isSet = false;
    m_type_handler_version_isValid = false;
}

void OAIVirtualMachineScaleSetExtensionProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualMachineScaleSetExtensionProperties::fromJsonObject(QJsonObject json) {

    m_auto_upgrade_minor_version_isValid = ::OpenAPI::fromJsonValue(m_auto_upgrade_minor_version, json[QString("autoUpgradeMinorVersion")]);
    m_auto_upgrade_minor_version_isSet = !json[QString("autoUpgradeMinorVersion")].isNull() && m_auto_upgrade_minor_version_isValid;

    m_force_update_tag_isValid = ::OpenAPI::fromJsonValue(m_force_update_tag, json[QString("forceUpdateTag")]);
    m_force_update_tag_isSet = !json[QString("forceUpdateTag")].isNull() && m_force_update_tag_isValid;

    m_protected_settings_isValid = ::OpenAPI::fromJsonValue(m_protected_settings, json[QString("protectedSettings")]);
    m_protected_settings_isSet = !json[QString("protectedSettings")].isNull() && m_protected_settings_isValid;

    m_provision_after_extensions_isValid = ::OpenAPI::fromJsonValue(m_provision_after_extensions, json[QString("provisionAfterExtensions")]);
    m_provision_after_extensions_isSet = !json[QString("provisionAfterExtensions")].isNull() && m_provision_after_extensions_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_publisher_isValid = ::OpenAPI::fromJsonValue(m_publisher, json[QString("publisher")]);
    m_publisher_isSet = !json[QString("publisher")].isNull() && m_publisher_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_type_handler_version_isValid = ::OpenAPI::fromJsonValue(m_type_handler_version, json[QString("typeHandlerVersion")]);
    m_type_handler_version_isSet = !json[QString("typeHandlerVersion")].isNull() && m_type_handler_version_isValid;
}

QString OAIVirtualMachineScaleSetExtensionProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualMachineScaleSetExtensionProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_upgrade_minor_version_isSet) {
        obj.insert(QString("autoUpgradeMinorVersion"), ::OpenAPI::toJsonValue(m_auto_upgrade_minor_version));
    }
    if (m_force_update_tag_isSet) {
        obj.insert(QString("forceUpdateTag"), ::OpenAPI::toJsonValue(m_force_update_tag));
    }
    if (m_protected_settings_isSet) {
        obj.insert(QString("protectedSettings"), ::OpenAPI::toJsonValue(m_protected_settings));
    }
    if (m_provision_after_extensions.size() > 0) {
        obj.insert(QString("provisionAfterExtensions"), ::OpenAPI::toJsonValue(m_provision_after_extensions));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_publisher_isSet) {
        obj.insert(QString("publisher"), ::OpenAPI::toJsonValue(m_publisher));
    }
    if (m_settings_isSet) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_type_handler_version_isSet) {
        obj.insert(QString("typeHandlerVersion"), ::OpenAPI::toJsonValue(m_type_handler_version));
    }
    return obj;
}

bool OAIVirtualMachineScaleSetExtensionProperties::isAutoUpgradeMinorVersion() const {
    return m_auto_upgrade_minor_version;
}
void OAIVirtualMachineScaleSetExtensionProperties::setAutoUpgradeMinorVersion(const bool &auto_upgrade_minor_version) {
    m_auto_upgrade_minor_version = auto_upgrade_minor_version;
    m_auto_upgrade_minor_version_isSet = true;
}

bool OAIVirtualMachineScaleSetExtensionProperties::is_auto_upgrade_minor_version_Set() const{
    return m_auto_upgrade_minor_version_isSet;
}

bool OAIVirtualMachineScaleSetExtensionProperties::is_auto_upgrade_minor_version_Valid() const{
    return m_auto_upgrade_minor_version_isValid;
}

QString OAIVirtualMachineScaleSetExtensionProperties::getForceUpdateTag() const {
    return m_force_update_tag;
}
void OAIVirtualMachineScaleSetExtensionProperties::setForceUpdateTag(const QString &force_update_tag) {
    m_force_update_tag = force_update_tag;
    m_force_update_tag_isSet = true;
}

bool OAIVirtualMachineScaleSetExtensionProperties::is_force_update_tag_Set() const{
    return m_force_update_tag_isSet;
}

bool OAIVirtualMachineScaleSetExtensionProperties::is_force_update_tag_Valid() const{
    return m_force_update_tag_isValid;
}

OAIObject OAIVirtualMachineScaleSetExtensionProperties::getProtectedSettings() const {
    return m_protected_settings;
}
void OAIVirtualMachineScaleSetExtensionProperties::setProtectedSettings(const OAIObject &protected_settings) {
    m_protected_settings = protected_settings;
    m_protected_settings_isSet = true;
}

bool OAIVirtualMachineScaleSetExtensionProperties::is_protected_settings_Set() const{
    return m_protected_settings_isSet;
}

bool OAIVirtualMachineScaleSetExtensionProperties::is_protected_settings_Valid() const{
    return m_protected_settings_isValid;
}

QList<QString> OAIVirtualMachineScaleSetExtensionProperties::getProvisionAfterExtensions() const {
    return m_provision_after_extensions;
}
void OAIVirtualMachineScaleSetExtensionProperties::setProvisionAfterExtensions(const QList<QString> &provision_after_extensions) {
    m_provision_after_extensions = provision_after_extensions;
    m_provision_after_extensions_isSet = true;
}

bool OAIVirtualMachineScaleSetExtensionProperties::is_provision_after_extensions_Set() const{
    return m_provision_after_extensions_isSet;
}

bool OAIVirtualMachineScaleSetExtensionProperties::is_provision_after_extensions_Valid() const{
    return m_provision_after_extensions_isValid;
}

QString OAIVirtualMachineScaleSetExtensionProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIVirtualMachineScaleSetExtensionProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIVirtualMachineScaleSetExtensionProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIVirtualMachineScaleSetExtensionProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIVirtualMachineScaleSetExtensionProperties::getPublisher() const {
    return m_publisher;
}
void OAIVirtualMachineScaleSetExtensionProperties::setPublisher(const QString &publisher) {
    m_publisher = publisher;
    m_publisher_isSet = true;
}

bool OAIVirtualMachineScaleSetExtensionProperties::is_publisher_Set() const{
    return m_publisher_isSet;
}

bool OAIVirtualMachineScaleSetExtensionProperties::is_publisher_Valid() const{
    return m_publisher_isValid;
}

OAIObject OAIVirtualMachineScaleSetExtensionProperties::getSettings() const {
    return m_settings;
}
void OAIVirtualMachineScaleSetExtensionProperties::setSettings(const OAIObject &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAIVirtualMachineScaleSetExtensionProperties::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIVirtualMachineScaleSetExtensionProperties::is_settings_Valid() const{
    return m_settings_isValid;
}

QString OAIVirtualMachineScaleSetExtensionProperties::getType() const {
    return m_type;
}
void OAIVirtualMachineScaleSetExtensionProperties::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIVirtualMachineScaleSetExtensionProperties::is_type_Set() const{
    return m_type_isSet;
}

bool OAIVirtualMachineScaleSetExtensionProperties::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIVirtualMachineScaleSetExtensionProperties::getTypeHandlerVersion() const {
    return m_type_handler_version;
}
void OAIVirtualMachineScaleSetExtensionProperties::setTypeHandlerVersion(const QString &type_handler_version) {
    m_type_handler_version = type_handler_version;
    m_type_handler_version_isSet = true;
}

bool OAIVirtualMachineScaleSetExtensionProperties::is_type_handler_version_Set() const{
    return m_type_handler_version_isSet;
}

bool OAIVirtualMachineScaleSetExtensionProperties::is_type_handler_version_Valid() const{
    return m_type_handler_version_isValid;
}

bool OAIVirtualMachineScaleSetExtensionProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_upgrade_minor_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_update_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protected_settings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provision_after_extensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_handler_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualMachineScaleSetExtensionProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
