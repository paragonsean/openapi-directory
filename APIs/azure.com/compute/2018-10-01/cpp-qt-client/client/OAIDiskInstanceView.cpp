/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiskInstanceView.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiskInstanceView::OAIDiskInstanceView(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiskInstanceView::OAIDiskInstanceView() {
    this->initializeModel();
}

OAIDiskInstanceView::~OAIDiskInstanceView() {}

void OAIDiskInstanceView::initializeModel() {

    m_encryption_settings_isSet = false;
    m_encryption_settings_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_statuses_isSet = false;
    m_statuses_isValid = false;
}

void OAIDiskInstanceView::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiskInstanceView::fromJsonObject(QJsonObject json) {

    m_encryption_settings_isValid = ::OpenAPI::fromJsonValue(m_encryption_settings, json[QString("encryptionSettings")]);
    m_encryption_settings_isSet = !json[QString("encryptionSettings")].isNull() && m_encryption_settings_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_statuses_isValid = ::OpenAPI::fromJsonValue(m_statuses, json[QString("statuses")]);
    m_statuses_isSet = !json[QString("statuses")].isNull() && m_statuses_isValid;
}

QString OAIDiskInstanceView::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiskInstanceView::asJsonObject() const {
    QJsonObject obj;
    if (m_encryption_settings.size() > 0) {
        obj.insert(QString("encryptionSettings"), ::OpenAPI::toJsonValue(m_encryption_settings));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_statuses.size() > 0) {
        obj.insert(QString("statuses"), ::OpenAPI::toJsonValue(m_statuses));
    }
    return obj;
}

QList<OAIDiskEncryptionSettings> OAIDiskInstanceView::getEncryptionSettings() const {
    return m_encryption_settings;
}
void OAIDiskInstanceView::setEncryptionSettings(const QList<OAIDiskEncryptionSettings> &encryption_settings) {
    m_encryption_settings = encryption_settings;
    m_encryption_settings_isSet = true;
}

bool OAIDiskInstanceView::is_encryption_settings_Set() const{
    return m_encryption_settings_isSet;
}

bool OAIDiskInstanceView::is_encryption_settings_Valid() const{
    return m_encryption_settings_isValid;
}

QString OAIDiskInstanceView::getName() const {
    return m_name;
}
void OAIDiskInstanceView::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDiskInstanceView::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDiskInstanceView::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIInstanceViewStatus> OAIDiskInstanceView::getStatuses() const {
    return m_statuses;
}
void OAIDiskInstanceView::setStatuses(const QList<OAIInstanceViewStatus> &statuses) {
    m_statuses = statuses;
    m_statuses_isSet = true;
}

bool OAIDiskInstanceView::is_statuses_Set() const{
    return m_statuses_isSet;
}

bool OAIDiskInstanceView::is_statuses_Valid() const{
    return m_statuses_isValid;
}

bool OAIDiskInstanceView::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encryption_settings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statuses.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiskInstanceView::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
