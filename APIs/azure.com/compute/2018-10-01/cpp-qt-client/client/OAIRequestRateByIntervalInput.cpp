/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequestRateByIntervalInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequestRateByIntervalInput::OAIRequestRateByIntervalInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequestRateByIntervalInput::OAIRequestRateByIntervalInput() {
    this->initializeModel();
}

OAIRequestRateByIntervalInput::~OAIRequestRateByIntervalInput() {}

void OAIRequestRateByIntervalInput::initializeModel() {

    m_interval_length_isSet = false;
    m_interval_length_isValid = false;

    m_blob_container_sas_uri_isSet = false;
    m_blob_container_sas_uri_isValid = false;

    m_from_time_isSet = false;
    m_from_time_isValid = false;

    m_group_by_operation_name_isSet = false;
    m_group_by_operation_name_isValid = false;

    m_group_by_resource_name_isSet = false;
    m_group_by_resource_name_isValid = false;

    m_group_by_throttle_policy_isSet = false;
    m_group_by_throttle_policy_isValid = false;

    m_to_time_isSet = false;
    m_to_time_isValid = false;
}

void OAIRequestRateByIntervalInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequestRateByIntervalInput::fromJsonObject(QJsonObject json) {

    m_interval_length_isValid = ::OpenAPI::fromJsonValue(m_interval_length, json[QString("intervalLength")]);
    m_interval_length_isSet = !json[QString("intervalLength")].isNull() && m_interval_length_isValid;

    m_blob_container_sas_uri_isValid = ::OpenAPI::fromJsonValue(m_blob_container_sas_uri, json[QString("blobContainerSasUri")]);
    m_blob_container_sas_uri_isSet = !json[QString("blobContainerSasUri")].isNull() && m_blob_container_sas_uri_isValid;

    m_from_time_isValid = ::OpenAPI::fromJsonValue(m_from_time, json[QString("fromTime")]);
    m_from_time_isSet = !json[QString("fromTime")].isNull() && m_from_time_isValid;

    m_group_by_operation_name_isValid = ::OpenAPI::fromJsonValue(m_group_by_operation_name, json[QString("groupByOperationName")]);
    m_group_by_operation_name_isSet = !json[QString("groupByOperationName")].isNull() && m_group_by_operation_name_isValid;

    m_group_by_resource_name_isValid = ::OpenAPI::fromJsonValue(m_group_by_resource_name, json[QString("groupByResourceName")]);
    m_group_by_resource_name_isSet = !json[QString("groupByResourceName")].isNull() && m_group_by_resource_name_isValid;

    m_group_by_throttle_policy_isValid = ::OpenAPI::fromJsonValue(m_group_by_throttle_policy, json[QString("groupByThrottlePolicy")]);
    m_group_by_throttle_policy_isSet = !json[QString("groupByThrottlePolicy")].isNull() && m_group_by_throttle_policy_isValid;

    m_to_time_isValid = ::OpenAPI::fromJsonValue(m_to_time, json[QString("toTime")]);
    m_to_time_isSet = !json[QString("toTime")].isNull() && m_to_time_isValid;
}

QString OAIRequestRateByIntervalInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequestRateByIntervalInput::asJsonObject() const {
    QJsonObject obj;
    if (m_interval_length_isSet) {
        obj.insert(QString("intervalLength"), ::OpenAPI::toJsonValue(m_interval_length));
    }
    if (m_blob_container_sas_uri_isSet) {
        obj.insert(QString("blobContainerSasUri"), ::OpenAPI::toJsonValue(m_blob_container_sas_uri));
    }
    if (m_from_time_isSet) {
        obj.insert(QString("fromTime"), ::OpenAPI::toJsonValue(m_from_time));
    }
    if (m_group_by_operation_name_isSet) {
        obj.insert(QString("groupByOperationName"), ::OpenAPI::toJsonValue(m_group_by_operation_name));
    }
    if (m_group_by_resource_name_isSet) {
        obj.insert(QString("groupByResourceName"), ::OpenAPI::toJsonValue(m_group_by_resource_name));
    }
    if (m_group_by_throttle_policy_isSet) {
        obj.insert(QString("groupByThrottlePolicy"), ::OpenAPI::toJsonValue(m_group_by_throttle_policy));
    }
    if (m_to_time_isSet) {
        obj.insert(QString("toTime"), ::OpenAPI::toJsonValue(m_to_time));
    }
    return obj;
}

QString OAIRequestRateByIntervalInput::getIntervalLength() const {
    return m_interval_length;
}
void OAIRequestRateByIntervalInput::setIntervalLength(const QString &interval_length) {
    m_interval_length = interval_length;
    m_interval_length_isSet = true;
}

bool OAIRequestRateByIntervalInput::is_interval_length_Set() const{
    return m_interval_length_isSet;
}

bool OAIRequestRateByIntervalInput::is_interval_length_Valid() const{
    return m_interval_length_isValid;
}

QString OAIRequestRateByIntervalInput::getBlobContainerSasUri() const {
    return m_blob_container_sas_uri;
}
void OAIRequestRateByIntervalInput::setBlobContainerSasUri(const QString &blob_container_sas_uri) {
    m_blob_container_sas_uri = blob_container_sas_uri;
    m_blob_container_sas_uri_isSet = true;
}

bool OAIRequestRateByIntervalInput::is_blob_container_sas_uri_Set() const{
    return m_blob_container_sas_uri_isSet;
}

bool OAIRequestRateByIntervalInput::is_blob_container_sas_uri_Valid() const{
    return m_blob_container_sas_uri_isValid;
}

QDateTime OAIRequestRateByIntervalInput::getFromTime() const {
    return m_from_time;
}
void OAIRequestRateByIntervalInput::setFromTime(const QDateTime &from_time) {
    m_from_time = from_time;
    m_from_time_isSet = true;
}

bool OAIRequestRateByIntervalInput::is_from_time_Set() const{
    return m_from_time_isSet;
}

bool OAIRequestRateByIntervalInput::is_from_time_Valid() const{
    return m_from_time_isValid;
}

bool OAIRequestRateByIntervalInput::isGroupByOperationName() const {
    return m_group_by_operation_name;
}
void OAIRequestRateByIntervalInput::setGroupByOperationName(const bool &group_by_operation_name) {
    m_group_by_operation_name = group_by_operation_name;
    m_group_by_operation_name_isSet = true;
}

bool OAIRequestRateByIntervalInput::is_group_by_operation_name_Set() const{
    return m_group_by_operation_name_isSet;
}

bool OAIRequestRateByIntervalInput::is_group_by_operation_name_Valid() const{
    return m_group_by_operation_name_isValid;
}

bool OAIRequestRateByIntervalInput::isGroupByResourceName() const {
    return m_group_by_resource_name;
}
void OAIRequestRateByIntervalInput::setGroupByResourceName(const bool &group_by_resource_name) {
    m_group_by_resource_name = group_by_resource_name;
    m_group_by_resource_name_isSet = true;
}

bool OAIRequestRateByIntervalInput::is_group_by_resource_name_Set() const{
    return m_group_by_resource_name_isSet;
}

bool OAIRequestRateByIntervalInput::is_group_by_resource_name_Valid() const{
    return m_group_by_resource_name_isValid;
}

bool OAIRequestRateByIntervalInput::isGroupByThrottlePolicy() const {
    return m_group_by_throttle_policy;
}
void OAIRequestRateByIntervalInput::setGroupByThrottlePolicy(const bool &group_by_throttle_policy) {
    m_group_by_throttle_policy = group_by_throttle_policy;
    m_group_by_throttle_policy_isSet = true;
}

bool OAIRequestRateByIntervalInput::is_group_by_throttle_policy_Set() const{
    return m_group_by_throttle_policy_isSet;
}

bool OAIRequestRateByIntervalInput::is_group_by_throttle_policy_Valid() const{
    return m_group_by_throttle_policy_isValid;
}

QDateTime OAIRequestRateByIntervalInput::getToTime() const {
    return m_to_time;
}
void OAIRequestRateByIntervalInput::setToTime(const QDateTime &to_time) {
    m_to_time = to_time;
    m_to_time_isSet = true;
}

bool OAIRequestRateByIntervalInput::is_to_time_Set() const{
    return m_to_time_isSet;
}

bool OAIRequestRateByIntervalInput::is_to_time_Valid() const{
    return m_to_time_isValid;
}

bool OAIRequestRateByIntervalInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_interval_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blob_container_sas_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_by_operation_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_by_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_by_throttle_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequestRateByIntervalInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_interval_length_isValid && m_blob_container_sas_uri_isValid && m_from_time_isValid && m_to_time_isValid && true;
}

} // namespace OpenAPI
