/*
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DiskEncryptionSettings;
import org.openapitools.client.model.InstanceViewStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The instance view of the disk.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:49:21.335968-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DiskInstanceView {
  public static final String SERIALIZED_NAME_ENCRYPTION_SETTINGS = "encryptionSettings";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_SETTINGS)
  private List<DiskEncryptionSettings> encryptionSettings = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATUSES = "statuses";
  @SerializedName(SERIALIZED_NAME_STATUSES)
  private List<InstanceViewStatus> statuses = new ArrayList<>();

  public DiskInstanceView() {
  }

  public DiskInstanceView encryptionSettings(List<DiskEncryptionSettings> encryptionSettings) {
    this.encryptionSettings = encryptionSettings;
    return this;
  }

  public DiskInstanceView addEncryptionSettingsItem(DiskEncryptionSettings encryptionSettingsItem) {
    if (this.encryptionSettings == null) {
      this.encryptionSettings = new ArrayList<>();
    }
    this.encryptionSettings.add(encryptionSettingsItem);
    return this;
  }

  /**
   * Specifies the encryption settings for the OS Disk. &lt;br&gt;&lt;br&gt; Minimum api-version: 2015-06-15
   * @return encryptionSettings
   */
  @javax.annotation.Nullable
  public List<DiskEncryptionSettings> getEncryptionSettings() {
    return encryptionSettings;
  }

  public void setEncryptionSettings(List<DiskEncryptionSettings> encryptionSettings) {
    this.encryptionSettings = encryptionSettings;
  }


  public DiskInstanceView name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The disk name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DiskInstanceView statuses(List<InstanceViewStatus> statuses) {
    this.statuses = statuses;
    return this;
  }

  public DiskInstanceView addStatusesItem(InstanceViewStatus statusesItem) {
    if (this.statuses == null) {
      this.statuses = new ArrayList<>();
    }
    this.statuses.add(statusesItem);
    return this;
  }

  /**
   * The resource status information.
   * @return statuses
   */
  @javax.annotation.Nullable
  public List<InstanceViewStatus> getStatuses() {
    return statuses;
  }

  public void setStatuses(List<InstanceViewStatus> statuses) {
    this.statuses = statuses;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiskInstanceView diskInstanceView = (DiskInstanceView) o;
    return Objects.equals(this.encryptionSettings, diskInstanceView.encryptionSettings) &&
        Objects.equals(this.name, diskInstanceView.name) &&
        Objects.equals(this.statuses, diskInstanceView.statuses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(encryptionSettings, name, statuses);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiskInstanceView {\n");
    sb.append("    encryptionSettings: ").append(toIndentedString(encryptionSettings)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    statuses: ").append(toIndentedString(statuses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("encryptionSettings");
    openapiFields.add("name");
    openapiFields.add("statuses");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DiskInstanceView
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiskInstanceView.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiskInstanceView is not found in the empty JSON string", DiskInstanceView.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DiskInstanceView.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiskInstanceView` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("encryptionSettings") != null && !jsonObj.get("encryptionSettings").isJsonNull()) {
        JsonArray jsonArrayencryptionSettings = jsonObj.getAsJsonArray("encryptionSettings");
        if (jsonArrayencryptionSettings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("encryptionSettings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `encryptionSettings` to be an array in the JSON string but got `%s`", jsonObj.get("encryptionSettings").toString()));
          }

          // validate the optional field `encryptionSettings` (array)
          for (int i = 0; i < jsonArrayencryptionSettings.size(); i++) {
            DiskEncryptionSettings.validateJsonElement(jsonArrayencryptionSettings.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("statuses") != null && !jsonObj.get("statuses").isJsonNull()) {
        JsonArray jsonArraystatuses = jsonObj.getAsJsonArray("statuses");
        if (jsonArraystatuses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("statuses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `statuses` to be an array in the JSON string but got `%s`", jsonObj.get("statuses").toString()));
          }

          // validate the optional field `statuses` (array)
          for (int i = 0; i < jsonArraystatuses.size(); i++) {
            InstanceViewStatus.validateJsonElement(jsonArraystatuses.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiskInstanceView.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiskInstanceView' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiskInstanceView> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiskInstanceView.class));

       return (TypeAdapter<T>) new TypeAdapter<DiskInstanceView>() {
           @Override
           public void write(JsonWriter out, DiskInstanceView value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiskInstanceView read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DiskInstanceView given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DiskInstanceView
   * @throws IOException if the JSON string is invalid with respect to DiskInstanceView
   */
  public static DiskInstanceView fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiskInstanceView.class);
  }

  /**
   * Convert an instance of DiskInstanceView to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

