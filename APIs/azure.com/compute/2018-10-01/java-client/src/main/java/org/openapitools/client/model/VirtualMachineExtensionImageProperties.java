/*
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the properties of a Virtual Machine Extension Image.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:49:21.335968-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VirtualMachineExtensionImageProperties {
  public static final String SERIALIZED_NAME_COMPUTE_ROLE = "computeRole";
  @SerializedName(SERIALIZED_NAME_COMPUTE_ROLE)
  private String computeRole;

  public static final String SERIALIZED_NAME_HANDLER_SCHEMA = "handlerSchema";
  @SerializedName(SERIALIZED_NAME_HANDLER_SCHEMA)
  private String handlerSchema;

  public static final String SERIALIZED_NAME_OPERATING_SYSTEM = "operatingSystem";
  @SerializedName(SERIALIZED_NAME_OPERATING_SYSTEM)
  private String operatingSystem;

  public static final String SERIALIZED_NAME_SUPPORTS_MULTIPLE_EXTENSIONS = "supportsMultipleExtensions";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_MULTIPLE_EXTENSIONS)
  private Boolean supportsMultipleExtensions;

  public static final String SERIALIZED_NAME_VM_SCALE_SET_ENABLED = "vmScaleSetEnabled";
  @SerializedName(SERIALIZED_NAME_VM_SCALE_SET_ENABLED)
  private Boolean vmScaleSetEnabled;

  public VirtualMachineExtensionImageProperties() {
  }

  public VirtualMachineExtensionImageProperties computeRole(String computeRole) {
    this.computeRole = computeRole;
    return this;
  }

  /**
   * The type of role (IaaS or PaaS) this extension supports.
   * @return computeRole
   */
  @javax.annotation.Nonnull
  public String getComputeRole() {
    return computeRole;
  }

  public void setComputeRole(String computeRole) {
    this.computeRole = computeRole;
  }


  public VirtualMachineExtensionImageProperties handlerSchema(String handlerSchema) {
    this.handlerSchema = handlerSchema;
    return this;
  }

  /**
   * The schema defined by publisher, where extension consumers should provide settings in a matching schema.
   * @return handlerSchema
   */
  @javax.annotation.Nonnull
  public String getHandlerSchema() {
    return handlerSchema;
  }

  public void setHandlerSchema(String handlerSchema) {
    this.handlerSchema = handlerSchema;
  }


  public VirtualMachineExtensionImageProperties operatingSystem(String operatingSystem) {
    this.operatingSystem = operatingSystem;
    return this;
  }

  /**
   * The operating system this extension supports.
   * @return operatingSystem
   */
  @javax.annotation.Nonnull
  public String getOperatingSystem() {
    return operatingSystem;
  }

  public void setOperatingSystem(String operatingSystem) {
    this.operatingSystem = operatingSystem;
  }


  public VirtualMachineExtensionImageProperties supportsMultipleExtensions(Boolean supportsMultipleExtensions) {
    this.supportsMultipleExtensions = supportsMultipleExtensions;
    return this;
  }

  /**
   * Whether the handler can support multiple extensions.
   * @return supportsMultipleExtensions
   */
  @javax.annotation.Nullable
  public Boolean getSupportsMultipleExtensions() {
    return supportsMultipleExtensions;
  }

  public void setSupportsMultipleExtensions(Boolean supportsMultipleExtensions) {
    this.supportsMultipleExtensions = supportsMultipleExtensions;
  }


  public VirtualMachineExtensionImageProperties vmScaleSetEnabled(Boolean vmScaleSetEnabled) {
    this.vmScaleSetEnabled = vmScaleSetEnabled;
    return this;
  }

  /**
   * Whether the extension can be used on xRP VMScaleSets. By default existing extensions are usable on scalesets, but there might be cases where a publisher wants to explicitly indicate the extension is only enabled for CRP VMs but not VMSS.
   * @return vmScaleSetEnabled
   */
  @javax.annotation.Nullable
  public Boolean getVmScaleSetEnabled() {
    return vmScaleSetEnabled;
  }

  public void setVmScaleSetEnabled(Boolean vmScaleSetEnabled) {
    this.vmScaleSetEnabled = vmScaleSetEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualMachineExtensionImageProperties virtualMachineExtensionImageProperties = (VirtualMachineExtensionImageProperties) o;
    return Objects.equals(this.computeRole, virtualMachineExtensionImageProperties.computeRole) &&
        Objects.equals(this.handlerSchema, virtualMachineExtensionImageProperties.handlerSchema) &&
        Objects.equals(this.operatingSystem, virtualMachineExtensionImageProperties.operatingSystem) &&
        Objects.equals(this.supportsMultipleExtensions, virtualMachineExtensionImageProperties.supportsMultipleExtensions) &&
        Objects.equals(this.vmScaleSetEnabled, virtualMachineExtensionImageProperties.vmScaleSetEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(computeRole, handlerSchema, operatingSystem, supportsMultipleExtensions, vmScaleSetEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualMachineExtensionImageProperties {\n");
    sb.append("    computeRole: ").append(toIndentedString(computeRole)).append("\n");
    sb.append("    handlerSchema: ").append(toIndentedString(handlerSchema)).append("\n");
    sb.append("    operatingSystem: ").append(toIndentedString(operatingSystem)).append("\n");
    sb.append("    supportsMultipleExtensions: ").append(toIndentedString(supportsMultipleExtensions)).append("\n");
    sb.append("    vmScaleSetEnabled: ").append(toIndentedString(vmScaleSetEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("computeRole");
    openapiFields.add("handlerSchema");
    openapiFields.add("operatingSystem");
    openapiFields.add("supportsMultipleExtensions");
    openapiFields.add("vmScaleSetEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("computeRole");
    openapiRequiredFields.add("handlerSchema");
    openapiRequiredFields.add("operatingSystem");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualMachineExtensionImageProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualMachineExtensionImageProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualMachineExtensionImageProperties is not found in the empty JSON string", VirtualMachineExtensionImageProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualMachineExtensionImageProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualMachineExtensionImageProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VirtualMachineExtensionImageProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("computeRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `computeRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("computeRole").toString()));
      }
      if (!jsonObj.get("handlerSchema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `handlerSchema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("handlerSchema").toString()));
      }
      if (!jsonObj.get("operatingSystem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operatingSystem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operatingSystem").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualMachineExtensionImageProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualMachineExtensionImageProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualMachineExtensionImageProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualMachineExtensionImageProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualMachineExtensionImageProperties>() {
           @Override
           public void write(JsonWriter out, VirtualMachineExtensionImageProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualMachineExtensionImageProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualMachineExtensionImageProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualMachineExtensionImageProperties
   * @throws IOException if the JSON string is invalid with respect to VirtualMachineExtensionImageProperties
   */
  public static VirtualMachineExtensionImageProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualMachineExtensionImageProperties.class);
  }

  /**
   * Convert an instance of VirtualMachineExtensionImageProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

