/*
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AdditionalCapabilities;
import org.openapitools.client.model.DiagnosticsProfile;
import org.openapitools.client.model.HardwareProfile;
import org.openapitools.client.model.NetworkProfile;
import org.openapitools.client.model.OSProfile;
import org.openapitools.client.model.StorageProfile;
import org.openapitools.client.model.SubResource;
import org.openapitools.client.model.VirtualMachineScaleSetVMInstanceView;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the properties of a virtual machine scale set virtual machine.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:49:21.335968-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VirtualMachineScaleSetVMProperties {
  public static final String SERIALIZED_NAME_ADDITIONAL_CAPABILITIES = "additionalCapabilities";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_CAPABILITIES)
  private AdditionalCapabilities additionalCapabilities;

  public static final String SERIALIZED_NAME_AVAILABILITY_SET = "availabilitySet";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_SET)
  private SubResource availabilitySet;

  public static final String SERIALIZED_NAME_DIAGNOSTICS_PROFILE = "diagnosticsProfile";
  @SerializedName(SERIALIZED_NAME_DIAGNOSTICS_PROFILE)
  private DiagnosticsProfile diagnosticsProfile;

  public static final String SERIALIZED_NAME_HARDWARE_PROFILE = "hardwareProfile";
  @SerializedName(SERIALIZED_NAME_HARDWARE_PROFILE)
  private HardwareProfile hardwareProfile;

  public static final String SERIALIZED_NAME_INSTANCE_VIEW = "instanceView";
  @SerializedName(SERIALIZED_NAME_INSTANCE_VIEW)
  private VirtualMachineScaleSetVMInstanceView instanceView;

  public static final String SERIALIZED_NAME_LATEST_MODEL_APPLIED = "latestModelApplied";
  @SerializedName(SERIALIZED_NAME_LATEST_MODEL_APPLIED)
  private Boolean latestModelApplied;

  public static final String SERIALIZED_NAME_LICENSE_TYPE = "licenseType";
  @SerializedName(SERIALIZED_NAME_LICENSE_TYPE)
  private String licenseType;

  public static final String SERIALIZED_NAME_NETWORK_PROFILE = "networkProfile";
  @SerializedName(SERIALIZED_NAME_NETWORK_PROFILE)
  private NetworkProfile networkProfile;

  public static final String SERIALIZED_NAME_OS_PROFILE = "osProfile";
  @SerializedName(SERIALIZED_NAME_OS_PROFILE)
  private OSProfile osProfile;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_STORAGE_PROFILE = "storageProfile";
  @SerializedName(SERIALIZED_NAME_STORAGE_PROFILE)
  private StorageProfile storageProfile;

  public static final String SERIALIZED_NAME_VM_ID = "vmId";
  @SerializedName(SERIALIZED_NAME_VM_ID)
  private String vmId;

  public VirtualMachineScaleSetVMProperties() {
  }

  public VirtualMachineScaleSetVMProperties(
     Boolean latestModelApplied, 
     String provisioningState, 
     String vmId
  ) {
    this();
    this.latestModelApplied = latestModelApplied;
    this.provisioningState = provisioningState;
    this.vmId = vmId;
  }

  public VirtualMachineScaleSetVMProperties additionalCapabilities(AdditionalCapabilities additionalCapabilities) {
    this.additionalCapabilities = additionalCapabilities;
    return this;
  }

  /**
   * Get additionalCapabilities
   * @return additionalCapabilities
   */
  @javax.annotation.Nullable
  public AdditionalCapabilities getAdditionalCapabilities() {
    return additionalCapabilities;
  }

  public void setAdditionalCapabilities(AdditionalCapabilities additionalCapabilities) {
    this.additionalCapabilities = additionalCapabilities;
  }


  public VirtualMachineScaleSetVMProperties availabilitySet(SubResource availabilitySet) {
    this.availabilitySet = availabilitySet;
    return this;
  }

  /**
   * Get availabilitySet
   * @return availabilitySet
   */
  @javax.annotation.Nullable
  public SubResource getAvailabilitySet() {
    return availabilitySet;
  }

  public void setAvailabilitySet(SubResource availabilitySet) {
    this.availabilitySet = availabilitySet;
  }


  public VirtualMachineScaleSetVMProperties diagnosticsProfile(DiagnosticsProfile diagnosticsProfile) {
    this.diagnosticsProfile = diagnosticsProfile;
    return this;
  }

  /**
   * Get diagnosticsProfile
   * @return diagnosticsProfile
   */
  @javax.annotation.Nullable
  public DiagnosticsProfile getDiagnosticsProfile() {
    return diagnosticsProfile;
  }

  public void setDiagnosticsProfile(DiagnosticsProfile diagnosticsProfile) {
    this.diagnosticsProfile = diagnosticsProfile;
  }


  public VirtualMachineScaleSetVMProperties hardwareProfile(HardwareProfile hardwareProfile) {
    this.hardwareProfile = hardwareProfile;
    return this;
  }

  /**
   * Get hardwareProfile
   * @return hardwareProfile
   */
  @javax.annotation.Nullable
  public HardwareProfile getHardwareProfile() {
    return hardwareProfile;
  }

  public void setHardwareProfile(HardwareProfile hardwareProfile) {
    this.hardwareProfile = hardwareProfile;
  }


  public VirtualMachineScaleSetVMProperties instanceView(VirtualMachineScaleSetVMInstanceView instanceView) {
    this.instanceView = instanceView;
    return this;
  }

  /**
   * Get instanceView
   * @return instanceView
   */
  @javax.annotation.Nullable
  public VirtualMachineScaleSetVMInstanceView getInstanceView() {
    return instanceView;
  }

  public void setInstanceView(VirtualMachineScaleSetVMInstanceView instanceView) {
    this.instanceView = instanceView;
  }


  /**
   * Specifies whether the latest model has been applied to the virtual machine.
   * @return latestModelApplied
   */
  @javax.annotation.Nullable
  public Boolean getLatestModelApplied() {
    return latestModelApplied;
  }



  public VirtualMachineScaleSetVMProperties licenseType(String licenseType) {
    this.licenseType = licenseType;
    return this;
  }

  /**
   * Specifies that the image or disk that is being used was licensed on-premises. This element is only used for images that contain the Windows Server operating system. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; Windows_Client &lt;br&gt;&lt;br&gt; Windows_Server &lt;br&gt;&lt;br&gt; If this element is included in a request for an update, the value must match the initial value. This value cannot be updated. &lt;br&gt;&lt;br&gt; For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing?toc&#x3D;%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) &lt;br&gt;&lt;br&gt; Minimum api-version: 2015-06-15
   * @return licenseType
   */
  @javax.annotation.Nullable
  public String getLicenseType() {
    return licenseType;
  }

  public void setLicenseType(String licenseType) {
    this.licenseType = licenseType;
  }


  public VirtualMachineScaleSetVMProperties networkProfile(NetworkProfile networkProfile) {
    this.networkProfile = networkProfile;
    return this;
  }

  /**
   * Get networkProfile
   * @return networkProfile
   */
  @javax.annotation.Nullable
  public NetworkProfile getNetworkProfile() {
    return networkProfile;
  }

  public void setNetworkProfile(NetworkProfile networkProfile) {
    this.networkProfile = networkProfile;
  }


  public VirtualMachineScaleSetVMProperties osProfile(OSProfile osProfile) {
    this.osProfile = osProfile;
    return this;
  }

  /**
   * Get osProfile
   * @return osProfile
   */
  @javax.annotation.Nullable
  public OSProfile getOsProfile() {
    return osProfile;
  }

  public void setOsProfile(OSProfile osProfile) {
    this.osProfile = osProfile;
  }


  /**
   * The provisioning state, which only appears in the response.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }



  public VirtualMachineScaleSetVMProperties storageProfile(StorageProfile storageProfile) {
    this.storageProfile = storageProfile;
    return this;
  }

  /**
   * Get storageProfile
   * @return storageProfile
   */
  @javax.annotation.Nullable
  public StorageProfile getStorageProfile() {
    return storageProfile;
  }

  public void setStorageProfile(StorageProfile storageProfile) {
    this.storageProfile = storageProfile;
  }


  /**
   * Azure VM unique ID.
   * @return vmId
   */
  @javax.annotation.Nullable
  public String getVmId() {
    return vmId;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualMachineScaleSetVMProperties virtualMachineScaleSetVMProperties = (VirtualMachineScaleSetVMProperties) o;
    return Objects.equals(this.additionalCapabilities, virtualMachineScaleSetVMProperties.additionalCapabilities) &&
        Objects.equals(this.availabilitySet, virtualMachineScaleSetVMProperties.availabilitySet) &&
        Objects.equals(this.diagnosticsProfile, virtualMachineScaleSetVMProperties.diagnosticsProfile) &&
        Objects.equals(this.hardwareProfile, virtualMachineScaleSetVMProperties.hardwareProfile) &&
        Objects.equals(this.instanceView, virtualMachineScaleSetVMProperties.instanceView) &&
        Objects.equals(this.latestModelApplied, virtualMachineScaleSetVMProperties.latestModelApplied) &&
        Objects.equals(this.licenseType, virtualMachineScaleSetVMProperties.licenseType) &&
        Objects.equals(this.networkProfile, virtualMachineScaleSetVMProperties.networkProfile) &&
        Objects.equals(this.osProfile, virtualMachineScaleSetVMProperties.osProfile) &&
        Objects.equals(this.provisioningState, virtualMachineScaleSetVMProperties.provisioningState) &&
        Objects.equals(this.storageProfile, virtualMachineScaleSetVMProperties.storageProfile) &&
        Objects.equals(this.vmId, virtualMachineScaleSetVMProperties.vmId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalCapabilities, availabilitySet, diagnosticsProfile, hardwareProfile, instanceView, latestModelApplied, licenseType, networkProfile, osProfile, provisioningState, storageProfile, vmId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualMachineScaleSetVMProperties {\n");
    sb.append("    additionalCapabilities: ").append(toIndentedString(additionalCapabilities)).append("\n");
    sb.append("    availabilitySet: ").append(toIndentedString(availabilitySet)).append("\n");
    sb.append("    diagnosticsProfile: ").append(toIndentedString(diagnosticsProfile)).append("\n");
    sb.append("    hardwareProfile: ").append(toIndentedString(hardwareProfile)).append("\n");
    sb.append("    instanceView: ").append(toIndentedString(instanceView)).append("\n");
    sb.append("    latestModelApplied: ").append(toIndentedString(latestModelApplied)).append("\n");
    sb.append("    licenseType: ").append(toIndentedString(licenseType)).append("\n");
    sb.append("    networkProfile: ").append(toIndentedString(networkProfile)).append("\n");
    sb.append("    osProfile: ").append(toIndentedString(osProfile)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    storageProfile: ").append(toIndentedString(storageProfile)).append("\n");
    sb.append("    vmId: ").append(toIndentedString(vmId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalCapabilities");
    openapiFields.add("availabilitySet");
    openapiFields.add("diagnosticsProfile");
    openapiFields.add("hardwareProfile");
    openapiFields.add("instanceView");
    openapiFields.add("latestModelApplied");
    openapiFields.add("licenseType");
    openapiFields.add("networkProfile");
    openapiFields.add("osProfile");
    openapiFields.add("provisioningState");
    openapiFields.add("storageProfile");
    openapiFields.add("vmId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualMachineScaleSetVMProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualMachineScaleSetVMProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualMachineScaleSetVMProperties is not found in the empty JSON string", VirtualMachineScaleSetVMProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualMachineScaleSetVMProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualMachineScaleSetVMProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `additionalCapabilities`
      if (jsonObj.get("additionalCapabilities") != null && !jsonObj.get("additionalCapabilities").isJsonNull()) {
        AdditionalCapabilities.validateJsonElement(jsonObj.get("additionalCapabilities"));
      }
      // validate the optional field `availabilitySet`
      if (jsonObj.get("availabilitySet") != null && !jsonObj.get("availabilitySet").isJsonNull()) {
        SubResource.validateJsonElement(jsonObj.get("availabilitySet"));
      }
      // validate the optional field `diagnosticsProfile`
      if (jsonObj.get("diagnosticsProfile") != null && !jsonObj.get("diagnosticsProfile").isJsonNull()) {
        DiagnosticsProfile.validateJsonElement(jsonObj.get("diagnosticsProfile"));
      }
      // validate the optional field `hardwareProfile`
      if (jsonObj.get("hardwareProfile") != null && !jsonObj.get("hardwareProfile").isJsonNull()) {
        HardwareProfile.validateJsonElement(jsonObj.get("hardwareProfile"));
      }
      // validate the optional field `instanceView`
      if (jsonObj.get("instanceView") != null && !jsonObj.get("instanceView").isJsonNull()) {
        VirtualMachineScaleSetVMInstanceView.validateJsonElement(jsonObj.get("instanceView"));
      }
      if ((jsonObj.get("licenseType") != null && !jsonObj.get("licenseType").isJsonNull()) && !jsonObj.get("licenseType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `licenseType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("licenseType").toString()));
      }
      // validate the optional field `networkProfile`
      if (jsonObj.get("networkProfile") != null && !jsonObj.get("networkProfile").isJsonNull()) {
        NetworkProfile.validateJsonElement(jsonObj.get("networkProfile"));
      }
      // validate the optional field `osProfile`
      if (jsonObj.get("osProfile") != null && !jsonObj.get("osProfile").isJsonNull()) {
        OSProfile.validateJsonElement(jsonObj.get("osProfile"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `storageProfile`
      if (jsonObj.get("storageProfile") != null && !jsonObj.get("storageProfile").isJsonNull()) {
        StorageProfile.validateJsonElement(jsonObj.get("storageProfile"));
      }
      if ((jsonObj.get("vmId") != null && !jsonObj.get("vmId").isJsonNull()) && !jsonObj.get("vmId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualMachineScaleSetVMProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualMachineScaleSetVMProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualMachineScaleSetVMProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualMachineScaleSetVMProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualMachineScaleSetVMProperties>() {
           @Override
           public void write(JsonWriter out, VirtualMachineScaleSetVMProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualMachineScaleSetVMProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualMachineScaleSetVMProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualMachineScaleSetVMProperties
   * @throws IOException if the JSON string is invalid with respect to VirtualMachineScaleSetVMProperties
   */
  public static VirtualMachineScaleSetVMProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualMachineScaleSetVMProperties.class);
  }

  /**
   * Convert an instance of VirtualMachineScaleSetVMProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

