/*
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The configuration parameters used for performing automatic OS upgrade.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:49:21.335968-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AutomaticOSUpgradePolicy {
  public static final String SERIALIZED_NAME_DISABLE_AUTOMATIC_ROLLBACK = "disableAutomaticRollback";
  @SerializedName(SERIALIZED_NAME_DISABLE_AUTOMATIC_ROLLBACK)
  private Boolean disableAutomaticRollback;

  public static final String SERIALIZED_NAME_ENABLE_AUTOMATIC_O_S_UPGRADE = "enableAutomaticOSUpgrade";
  @SerializedName(SERIALIZED_NAME_ENABLE_AUTOMATIC_O_S_UPGRADE)
  private Boolean enableAutomaticOSUpgrade;

  public AutomaticOSUpgradePolicy() {
  }

  public AutomaticOSUpgradePolicy disableAutomaticRollback(Boolean disableAutomaticRollback) {
    this.disableAutomaticRollback = disableAutomaticRollback;
    return this;
  }

  /**
   * Whether OS image rollback feature should be disabled. Default value is false.
   * @return disableAutomaticRollback
   */
  @javax.annotation.Nullable
  public Boolean getDisableAutomaticRollback() {
    return disableAutomaticRollback;
  }

  public void setDisableAutomaticRollback(Boolean disableAutomaticRollback) {
    this.disableAutomaticRollback = disableAutomaticRollback;
  }


  public AutomaticOSUpgradePolicy enableAutomaticOSUpgrade(Boolean enableAutomaticOSUpgrade) {
    this.enableAutomaticOSUpgrade = enableAutomaticOSUpgrade;
    return this;
  }

  /**
   * Indicates whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer version of the OS image becomes available. Default value is false. If this is set to true for Windows based scale sets, recommendation is to set [enableAutomaticUpdates](https://docs.microsoft.com/dotnet/api/microsoft.azure.management.compute.models.windowsconfiguration.enableautomaticupdates?view&#x3D;azure-dotnet) to false.
   * @return enableAutomaticOSUpgrade
   */
  @javax.annotation.Nullable
  public Boolean getEnableAutomaticOSUpgrade() {
    return enableAutomaticOSUpgrade;
  }

  public void setEnableAutomaticOSUpgrade(Boolean enableAutomaticOSUpgrade) {
    this.enableAutomaticOSUpgrade = enableAutomaticOSUpgrade;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutomaticOSUpgradePolicy automaticOSUpgradePolicy = (AutomaticOSUpgradePolicy) o;
    return Objects.equals(this.disableAutomaticRollback, automaticOSUpgradePolicy.disableAutomaticRollback) &&
        Objects.equals(this.enableAutomaticOSUpgrade, automaticOSUpgradePolicy.enableAutomaticOSUpgrade);
  }

  @Override
  public int hashCode() {
    return Objects.hash(disableAutomaticRollback, enableAutomaticOSUpgrade);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutomaticOSUpgradePolicy {\n");
    sb.append("    disableAutomaticRollback: ").append(toIndentedString(disableAutomaticRollback)).append("\n");
    sb.append("    enableAutomaticOSUpgrade: ").append(toIndentedString(enableAutomaticOSUpgrade)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("disableAutomaticRollback");
    openapiFields.add("enableAutomaticOSUpgrade");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AutomaticOSUpgradePolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AutomaticOSUpgradePolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutomaticOSUpgradePolicy is not found in the empty JSON string", AutomaticOSUpgradePolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AutomaticOSUpgradePolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutomaticOSUpgradePolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutomaticOSUpgradePolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutomaticOSUpgradePolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutomaticOSUpgradePolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutomaticOSUpgradePolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<AutomaticOSUpgradePolicy>() {
           @Override
           public void write(JsonWriter out, AutomaticOSUpgradePolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutomaticOSUpgradePolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AutomaticOSUpgradePolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AutomaticOSUpgradePolicy
   * @throws IOException if the JSON string is invalid with respect to AutomaticOSUpgradePolicy
   */
  public static AutomaticOSUpgradePolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutomaticOSUpgradePolicy.class);
  }

  /**
   * Convert an instance of AutomaticOSUpgradePolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

