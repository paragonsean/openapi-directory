/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VirtualMachineSize model module.
 * @module model/VirtualMachineSize
 * @version 2018-10-01
 */
class VirtualMachineSize {
    /**
     * Constructs a new <code>VirtualMachineSize</code>.
     * Describes the properties of a VM size.
     * @alias module:model/VirtualMachineSize
     */
    constructor() { 
        
        VirtualMachineSize.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VirtualMachineSize</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VirtualMachineSize} obj Optional instance to populate.
     * @return {module:model/VirtualMachineSize} The populated <code>VirtualMachineSize</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VirtualMachineSize();

            if (data.hasOwnProperty('maxDataDiskCount')) {
                obj['maxDataDiskCount'] = ApiClient.convertToType(data['maxDataDiskCount'], 'Number');
            }
            if (data.hasOwnProperty('memoryInMB')) {
                obj['memoryInMB'] = ApiClient.convertToType(data['memoryInMB'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('numberOfCores')) {
                obj['numberOfCores'] = ApiClient.convertToType(data['numberOfCores'], 'Number');
            }
            if (data.hasOwnProperty('osDiskSizeInMB')) {
                obj['osDiskSizeInMB'] = ApiClient.convertToType(data['osDiskSizeInMB'], 'Number');
            }
            if (data.hasOwnProperty('resourceDiskSizeInMB')) {
                obj['resourceDiskSizeInMB'] = ApiClient.convertToType(data['resourceDiskSizeInMB'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VirtualMachineSize</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VirtualMachineSize</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * The maximum number of data disks that can be attached to the virtual machine size.
 * @member {Number} maxDataDiskCount
 */
VirtualMachineSize.prototype['maxDataDiskCount'] = undefined;

/**
 * The amount of memory, in MB, supported by the virtual machine size.
 * @member {Number} memoryInMB
 */
VirtualMachineSize.prototype['memoryInMB'] = undefined;

/**
 * The name of the virtual machine size.
 * @member {String} name
 */
VirtualMachineSize.prototype['name'] = undefined;

/**
 * The number of cores supported by the virtual machine size.
 * @member {Number} numberOfCores
 */
VirtualMachineSize.prototype['numberOfCores'] = undefined;

/**
 * The OS disk size, in MB, allowed by the virtual machine size.
 * @member {Number} osDiskSizeInMB
 */
VirtualMachineSize.prototype['osDiskSizeInMB'] = undefined;

/**
 * The resource disk size, in MB, allowed by the virtual machine size.
 * @member {Number} resourceDiskSizeInMB
 */
VirtualMachineSize.prototype['resourceDiskSizeInMB'] = undefined;






export default VirtualMachineSize;

