/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataDiskImage from './DataDiskImage';
import OSDiskImage from './OSDiskImage';
import PurchasePlan from './PurchasePlan';

/**
 * The VirtualMachineImageProperties model module.
 * @module model/VirtualMachineImageProperties
 * @version 2018-04-01
 */
class VirtualMachineImageProperties {
    /**
     * Constructs a new <code>VirtualMachineImageProperties</code>.
     * Describes the properties of a Virtual Machine Image.
     * @alias module:model/VirtualMachineImageProperties
     */
    constructor() { 
        
        VirtualMachineImageProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VirtualMachineImageProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VirtualMachineImageProperties} obj Optional instance to populate.
     * @return {module:model/VirtualMachineImageProperties} The populated <code>VirtualMachineImageProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VirtualMachineImageProperties();

            if (data.hasOwnProperty('dataDiskImages')) {
                obj['dataDiskImages'] = ApiClient.convertToType(data['dataDiskImages'], [DataDiskImage]);
            }
            if (data.hasOwnProperty('osDiskImage')) {
                obj['osDiskImage'] = OSDiskImage.constructFromObject(data['osDiskImage']);
            }
            if (data.hasOwnProperty('plan')) {
                obj['plan'] = PurchasePlan.constructFromObject(data['plan']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VirtualMachineImageProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VirtualMachineImageProperties</code>.
     */
    static validateJSON(data) {
        if (data['dataDiskImages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dataDiskImages'])) {
                throw new Error("Expected the field `dataDiskImages` to be an array in the JSON data but got " + data['dataDiskImages']);
            }
            // validate the optional field `dataDiskImages` (array)
            for (const item of data['dataDiskImages']) {
                DataDiskImage.validateJSON(item);
            };
        }
        // validate the optional field `osDiskImage`
        if (data['osDiskImage']) { // data not null
          OSDiskImage.validateJSON(data['osDiskImage']);
        }
        // validate the optional field `plan`
        if (data['plan']) { // data not null
          PurchasePlan.validateJSON(data['plan']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/DataDiskImage>} dataDiskImages
 */
VirtualMachineImageProperties.prototype['dataDiskImages'] = undefined;

/**
 * @member {module:model/OSDiskImage} osDiskImage
 */
VirtualMachineImageProperties.prototype['osDiskImage'] = undefined;

/**
 * @member {module:model/PurchasePlan} plan
 */
VirtualMachineImageProperties.prototype['plan'] = undefined;






export default VirtualMachineImageProperties;

