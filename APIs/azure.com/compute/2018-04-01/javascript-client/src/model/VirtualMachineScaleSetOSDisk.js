/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Caching from './Caching';
import CreateOption from './CreateOption';
import VirtualHardDisk from './VirtualHardDisk';
import VirtualMachineScaleSetManagedDiskParameters from './VirtualMachineScaleSetManagedDiskParameters';

/**
 * The VirtualMachineScaleSetOSDisk model module.
 * @module model/VirtualMachineScaleSetOSDisk
 * @version 2018-04-01
 */
class VirtualMachineScaleSetOSDisk {
    /**
     * Constructs a new <code>VirtualMachineScaleSetOSDisk</code>.
     * Describes a virtual machine scale set operating system disk.
     * @alias module:model/VirtualMachineScaleSetOSDisk
     * @param createOption {module:model/CreateOption} 
     */
    constructor(createOption) { 
        
        VirtualMachineScaleSetOSDisk.initialize(this, createOption);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createOption) { 
        obj['createOption'] = createOption;
    }

    /**
     * Constructs a <code>VirtualMachineScaleSetOSDisk</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VirtualMachineScaleSetOSDisk} obj Optional instance to populate.
     * @return {module:model/VirtualMachineScaleSetOSDisk} The populated <code>VirtualMachineScaleSetOSDisk</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VirtualMachineScaleSetOSDisk();

            if (data.hasOwnProperty('caching')) {
                obj['caching'] = Caching.constructFromObject(data['caching']);
            }
            if (data.hasOwnProperty('createOption')) {
                obj['createOption'] = CreateOption.constructFromObject(data['createOption']);
            }
            if (data.hasOwnProperty('diskSizeGB')) {
                obj['diskSizeGB'] = ApiClient.convertToType(data['diskSizeGB'], 'Number');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = VirtualHardDisk.constructFromObject(data['image']);
            }
            if (data.hasOwnProperty('managedDisk')) {
                obj['managedDisk'] = VirtualMachineScaleSetManagedDiskParameters.constructFromObject(data['managedDisk']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('osType')) {
                obj['osType'] = ApiClient.convertToType(data['osType'], 'String');
            }
            if (data.hasOwnProperty('vhdContainers')) {
                obj['vhdContainers'] = ApiClient.convertToType(data['vhdContainers'], ['String']);
            }
            if (data.hasOwnProperty('writeAcceleratorEnabled')) {
                obj['writeAcceleratorEnabled'] = ApiClient.convertToType(data['writeAcceleratorEnabled'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VirtualMachineScaleSetOSDisk</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VirtualMachineScaleSetOSDisk</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VirtualMachineScaleSetOSDisk.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `image`
        if (data['image']) { // data not null
          VirtualHardDisk.validateJSON(data['image']);
        }
        // validate the optional field `managedDisk`
        if (data['managedDisk']) { // data not null
          VirtualMachineScaleSetManagedDiskParameters.validateJSON(data['managedDisk']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['osType'] && !(typeof data['osType'] === 'string' || data['osType'] instanceof String)) {
            throw new Error("Expected the field `osType` to be a primitive type in the JSON string but got " + data['osType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['vhdContainers'])) {
            throw new Error("Expected the field `vhdContainers` to be an array in the JSON data but got " + data['vhdContainers']);
        }

        return true;
    }


}

VirtualMachineScaleSetOSDisk.RequiredProperties = ["createOption"];

/**
 * @member {module:model/Caching} caching
 */
VirtualMachineScaleSetOSDisk.prototype['caching'] = undefined;

/**
 * @member {module:model/CreateOption} createOption
 */
VirtualMachineScaleSetOSDisk.prototype['createOption'] = undefined;

/**
 * Specifies the size of the operating system disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
 * @member {Number} diskSizeGB
 */
VirtualMachineScaleSetOSDisk.prototype['diskSizeGB'] = undefined;

/**
 * @member {module:model/VirtualHardDisk} image
 */
VirtualMachineScaleSetOSDisk.prototype['image'] = undefined;

/**
 * @member {module:model/VirtualMachineScaleSetManagedDiskParameters} managedDisk
 */
VirtualMachineScaleSetOSDisk.prototype['managedDisk'] = undefined;

/**
 * The disk name.
 * @member {String} name
 */
VirtualMachineScaleSetOSDisk.prototype['name'] = undefined;

/**
 * This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**
 * @member {module:model/VirtualMachineScaleSetOSDisk.OsTypeEnum} osType
 */
VirtualMachineScaleSetOSDisk.prototype['osType'] = undefined;

/**
 * Specifies the container urls that are used to store operating system disks for the scale set.
 * @member {Array.<String>} vhdContainers
 */
VirtualMachineScaleSetOSDisk.prototype['vhdContainers'] = undefined;

/**
 * Specifies whether writeAccelerator should be enabled or disabled on the disk.
 * @member {Boolean} writeAcceleratorEnabled
 */
VirtualMachineScaleSetOSDisk.prototype['writeAcceleratorEnabled'] = undefined;





/**
 * Allowed values for the <code>osType</code> property.
 * @enum {String}
 * @readonly
 */
VirtualMachineScaleSetOSDisk['OsTypeEnum'] = {

    /**
     * value: "Windows"
     * @const
     */
    "Windows": "Windows",

    /**
     * value: "Linux"
     * @const
     */
    "Linux": "Linux"
};



export default VirtualMachineScaleSetOSDisk;

