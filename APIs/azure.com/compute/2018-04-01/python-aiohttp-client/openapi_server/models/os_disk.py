# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.caching import Caching
from openapi_server.models.create_option import CreateOption
from openapi_server.models.disk_encryption_settings import DiskEncryptionSettings
from openapi_server.models.managed_disk_parameters import ManagedDiskParameters
from openapi_server.models.virtual_hard_disk import VirtualHardDisk
from openapi_server import util


class OSDisk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, caching: Caching=None, create_option: CreateOption=None, disk_size_gb: int=None, encryption_settings: DiskEncryptionSettings=None, image: VirtualHardDisk=None, managed_disk: ManagedDiskParameters=None, name: str=None, os_type: str=None, vhd: VirtualHardDisk=None, write_accelerator_enabled: bool=None):
        """OSDisk - a model defined in OpenAPI

        :param caching: The caching of this OSDisk.
        :param create_option: The create_option of this OSDisk.
        :param disk_size_gb: The disk_size_gb of this OSDisk.
        :param encryption_settings: The encryption_settings of this OSDisk.
        :param image: The image of this OSDisk.
        :param managed_disk: The managed_disk of this OSDisk.
        :param name: The name of this OSDisk.
        :param os_type: The os_type of this OSDisk.
        :param vhd: The vhd of this OSDisk.
        :param write_accelerator_enabled: The write_accelerator_enabled of this OSDisk.
        """
        self.openapi_types = {
            'caching': Caching,
            'create_option': CreateOption,
            'disk_size_gb': int,
            'encryption_settings': DiskEncryptionSettings,
            'image': VirtualHardDisk,
            'managed_disk': ManagedDiskParameters,
            'name': str,
            'os_type': str,
            'vhd': VirtualHardDisk,
            'write_accelerator_enabled': bool
        }

        self.attribute_map = {
            'caching': 'caching',
            'create_option': 'createOption',
            'disk_size_gb': 'diskSizeGB',
            'encryption_settings': 'encryptionSettings',
            'image': 'image',
            'managed_disk': 'managedDisk',
            'name': 'name',
            'os_type': 'osType',
            'vhd': 'vhd',
            'write_accelerator_enabled': 'writeAcceleratorEnabled'
        }

        self._caching = caching
        self._create_option = create_option
        self._disk_size_gb = disk_size_gb
        self._encryption_settings = encryption_settings
        self._image = image
        self._managed_disk = managed_disk
        self._name = name
        self._os_type = os_type
        self._vhd = vhd
        self._write_accelerator_enabled = write_accelerator_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OSDisk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OSDisk of this OSDisk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def caching(self):
        """Gets the caching of this OSDisk.


        :return: The caching of this OSDisk.
        :rtype: Caching
        """
        return self._caching

    @caching.setter
    def caching(self, caching):
        """Sets the caching of this OSDisk.


        :param caching: The caching of this OSDisk.
        :type caching: Caching
        """

        self._caching = caching

    @property
    def create_option(self):
        """Gets the create_option of this OSDisk.


        :return: The create_option of this OSDisk.
        :rtype: CreateOption
        """
        return self._create_option

    @create_option.setter
    def create_option(self, create_option):
        """Sets the create_option of this OSDisk.


        :param create_option: The create_option of this OSDisk.
        :type create_option: CreateOption
        """
        if create_option is None:
            raise ValueError("Invalid value for `create_option`, must not be `None`")

        self._create_option = create_option

    @property
    def disk_size_gb(self):
        """Gets the disk_size_gb of this OSDisk.

        Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB

        :return: The disk_size_gb of this OSDisk.
        :rtype: int
        """
        return self._disk_size_gb

    @disk_size_gb.setter
    def disk_size_gb(self, disk_size_gb):
        """Sets the disk_size_gb of this OSDisk.

        Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB

        :param disk_size_gb: The disk_size_gb of this OSDisk.
        :type disk_size_gb: int
        """

        self._disk_size_gb = disk_size_gb

    @property
    def encryption_settings(self):
        """Gets the encryption_settings of this OSDisk.


        :return: The encryption_settings of this OSDisk.
        :rtype: DiskEncryptionSettings
        """
        return self._encryption_settings

    @encryption_settings.setter
    def encryption_settings(self, encryption_settings):
        """Sets the encryption_settings of this OSDisk.


        :param encryption_settings: The encryption_settings of this OSDisk.
        :type encryption_settings: DiskEncryptionSettings
        """

        self._encryption_settings = encryption_settings

    @property
    def image(self):
        """Gets the image of this OSDisk.


        :return: The image of this OSDisk.
        :rtype: VirtualHardDisk
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this OSDisk.


        :param image: The image of this OSDisk.
        :type image: VirtualHardDisk
        """

        self._image = image

    @property
    def managed_disk(self):
        """Gets the managed_disk of this OSDisk.


        :return: The managed_disk of this OSDisk.
        :rtype: ManagedDiskParameters
        """
        return self._managed_disk

    @managed_disk.setter
    def managed_disk(self, managed_disk):
        """Sets the managed_disk of this OSDisk.


        :param managed_disk: The managed_disk of this OSDisk.
        :type managed_disk: ManagedDiskParameters
        """

        self._managed_disk = managed_disk

    @property
    def name(self):
        """Gets the name of this OSDisk.

        The disk name.

        :return: The name of this OSDisk.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OSDisk.

        The disk name.

        :param name: The name of this OSDisk.
        :type name: str
        """

        self._name = name

    @property
    def os_type(self):
        """Gets the os_type of this OSDisk.

        This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**

        :return: The os_type of this OSDisk.
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this OSDisk.

        This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**

        :param os_type: The os_type of this OSDisk.
        :type os_type: str
        """
        allowed_values = ["Windows", "Linux"]  # noqa: E501
        if os_type not in allowed_values:
            raise ValueError(
                "Invalid value for `os_type` ({0}), must be one of {1}"
                .format(os_type, allowed_values)
            )

        self._os_type = os_type

    @property
    def vhd(self):
        """Gets the vhd of this OSDisk.


        :return: The vhd of this OSDisk.
        :rtype: VirtualHardDisk
        """
        return self._vhd

    @vhd.setter
    def vhd(self, vhd):
        """Sets the vhd of this OSDisk.


        :param vhd: The vhd of this OSDisk.
        :type vhd: VirtualHardDisk
        """

        self._vhd = vhd

    @property
    def write_accelerator_enabled(self):
        """Gets the write_accelerator_enabled of this OSDisk.

        Specifies whether writeAccelerator should be enabled or disabled on the disk.

        :return: The write_accelerator_enabled of this OSDisk.
        :rtype: bool
        """
        return self._write_accelerator_enabled

    @write_accelerator_enabled.setter
    def write_accelerator_enabled(self, write_accelerator_enabled):
        """Sets the write_accelerator_enabled of this OSDisk.

        Specifies whether writeAccelerator should be enabled or disabled on the disk.

        :param write_accelerator_enabled: The write_accelerator_enabled of this OSDisk.
        :type write_accelerator_enabled: bool
        """

        self._write_accelerator_enabled = write_accelerator_enabled
