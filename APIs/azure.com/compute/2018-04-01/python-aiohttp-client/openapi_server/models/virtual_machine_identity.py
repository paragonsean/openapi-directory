# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VirtualMachineIdentity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identity_ids: List[str]=None, principal_id: str=None, tenant_id: str=None, type: str=None):
        """VirtualMachineIdentity - a model defined in OpenAPI

        :param identity_ids: The identity_ids of this VirtualMachineIdentity.
        :param principal_id: The principal_id of this VirtualMachineIdentity.
        :param tenant_id: The tenant_id of this VirtualMachineIdentity.
        :param type: The type of this VirtualMachineIdentity.
        """
        self.openapi_types = {
            'identity_ids': List[str],
            'principal_id': str,
            'tenant_id': str,
            'type': str
        }

        self.attribute_map = {
            'identity_ids': 'identityIds',
            'principal_id': 'principalId',
            'tenant_id': 'tenantId',
            'type': 'type'
        }

        self._identity_ids = identity_ids
        self._principal_id = principal_id
        self._tenant_id = tenant_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualMachineIdentity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualMachineIdentity of this VirtualMachineIdentity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identity_ids(self):
        """Gets the identity_ids of this VirtualMachineIdentity.

        The list of user identities associated with the Virtual Machine. The user identity references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/identities/{identityName}'.

        :return: The identity_ids of this VirtualMachineIdentity.
        :rtype: List[str]
        """
        return self._identity_ids

    @identity_ids.setter
    def identity_ids(self, identity_ids):
        """Sets the identity_ids of this VirtualMachineIdentity.

        The list of user identities associated with the Virtual Machine. The user identity references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/identities/{identityName}'.

        :param identity_ids: The identity_ids of this VirtualMachineIdentity.
        :type identity_ids: List[str]
        """

        self._identity_ids = identity_ids

    @property
    def principal_id(self):
        """Gets the principal_id of this VirtualMachineIdentity.

        The principal id of virtual machine identity. This property will only be provided for a system assigned identity.

        :return: The principal_id of this VirtualMachineIdentity.
        :rtype: str
        """
        return self._principal_id

    @principal_id.setter
    def principal_id(self, principal_id):
        """Sets the principal_id of this VirtualMachineIdentity.

        The principal id of virtual machine identity. This property will only be provided for a system assigned identity.

        :param principal_id: The principal_id of this VirtualMachineIdentity.
        :type principal_id: str
        """

        self._principal_id = principal_id

    @property
    def tenant_id(self):
        """Gets the tenant_id of this VirtualMachineIdentity.

        The tenant id associated with the virtual machine. This property will only be provided for a system assigned identity.

        :return: The tenant_id of this VirtualMachineIdentity.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this VirtualMachineIdentity.

        The tenant id associated with the virtual machine. This property will only be provided for a system assigned identity.

        :param tenant_id: The tenant_id of this VirtualMachineIdentity.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id

    @property
    def type(self):
        """Gets the type of this VirtualMachineIdentity.

        The type of identity used for the virtual machine. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine.

        :return: The type of this VirtualMachineIdentity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VirtualMachineIdentity.

        The type of identity used for the virtual machine. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine.

        :param type: The type of this VirtualMachineIdentity.
        :type type: str
        """
        allowed_values = ["SystemAssigned", "UserAssigned", "SystemAssigned, UserAssigned", "None"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
