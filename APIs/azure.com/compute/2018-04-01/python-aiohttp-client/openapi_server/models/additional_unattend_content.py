# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdditionalUnattendContent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, component_name: str=None, content: str=None, pass_name: str=None, setting_name: str=None):
        """AdditionalUnattendContent - a model defined in OpenAPI

        :param component_name: The component_name of this AdditionalUnattendContent.
        :param content: The content of this AdditionalUnattendContent.
        :param pass_name: The pass_name of this AdditionalUnattendContent.
        :param setting_name: The setting_name of this AdditionalUnattendContent.
        """
        self.openapi_types = {
            'component_name': str,
            'content': str,
            'pass_name': str,
            'setting_name': str
        }

        self.attribute_map = {
            'component_name': 'componentName',
            'content': 'content',
            'pass_name': 'passName',
            'setting_name': 'settingName'
        }

        self._component_name = component_name
        self._content = content
        self._pass_name = pass_name
        self._setting_name = setting_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdditionalUnattendContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdditionalUnattendContent of this AdditionalUnattendContent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def component_name(self):
        """Gets the component_name of this AdditionalUnattendContent.

        The component name. Currently, the only allowable value is Microsoft-Windows-Shell-Setup.

        :return: The component_name of this AdditionalUnattendContent.
        :rtype: str
        """
        return self._component_name

    @component_name.setter
    def component_name(self, component_name):
        """Sets the component_name of this AdditionalUnattendContent.

        The component name. Currently, the only allowable value is Microsoft-Windows-Shell-Setup.

        :param component_name: The component_name of this AdditionalUnattendContent.
        :type component_name: str
        """
        allowed_values = ["Microsoft-Windows-Shell-Setup"]  # noqa: E501
        if component_name not in allowed_values:
            raise ValueError(
                "Invalid value for `component_name` ({0}), must be one of {1}"
                .format(component_name, allowed_values)
            )

        self._component_name = component_name

    @property
    def content(self):
        """Gets the content of this AdditionalUnattendContent.

        Specifies the XML formatted content that is added to the unattend.xml file for the specified path and component. The XML must be less than 4KB and must include the root element for the setting or feature that is being inserted.

        :return: The content of this AdditionalUnattendContent.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this AdditionalUnattendContent.

        Specifies the XML formatted content that is added to the unattend.xml file for the specified path and component. The XML must be less than 4KB and must include the root element for the setting or feature that is being inserted.

        :param content: The content of this AdditionalUnattendContent.
        :type content: str
        """

        self._content = content

    @property
    def pass_name(self):
        """Gets the pass_name of this AdditionalUnattendContent.

        The pass name. Currently, the only allowable value is OobeSystem.

        :return: The pass_name of this AdditionalUnattendContent.
        :rtype: str
        """
        return self._pass_name

    @pass_name.setter
    def pass_name(self, pass_name):
        """Sets the pass_name of this AdditionalUnattendContent.

        The pass name. Currently, the only allowable value is OobeSystem.

        :param pass_name: The pass_name of this AdditionalUnattendContent.
        :type pass_name: str
        """
        allowed_values = ["OobeSystem"]  # noqa: E501
        if pass_name not in allowed_values:
            raise ValueError(
                "Invalid value for `pass_name` ({0}), must be one of {1}"
                .format(pass_name, allowed_values)
            )

        self._pass_name = pass_name

    @property
    def setting_name(self):
        """Gets the setting_name of this AdditionalUnattendContent.

        Specifies the name of the setting to which the content applies. Possible values are: FirstLogonCommands and AutoLogon.

        :return: The setting_name of this AdditionalUnattendContent.
        :rtype: str
        """
        return self._setting_name

    @setting_name.setter
    def setting_name(self, setting_name):
        """Sets the setting_name of this AdditionalUnattendContent.

        Specifies the name of the setting to which the content applies. Possible values are: FirstLogonCommands and AutoLogon.

        :param setting_name: The setting_name of this AdditionalUnattendContent.
        :type setting_name: str
        """
        allowed_values = ["AutoLogon", "FirstLogonCommands"]  # noqa: E501
        if setting_name not in allowed_values:
            raise ValueError(
                "Invalid value for `setting_name` ({0}), must be one of {1}"
                .format(setting_name, allowed_values)
            )

        self._setting_name = setting_name
