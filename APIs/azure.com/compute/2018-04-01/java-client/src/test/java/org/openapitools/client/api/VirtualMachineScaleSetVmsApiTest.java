/*
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.VirtualMachineScaleSetVM;
import org.openapitools.client.model.VirtualMachineScaleSetVMInstanceView;
import org.openapitools.client.model.VirtualMachineScaleSetVMListResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VirtualMachineScaleSetVmsApi
 */
@Disabled
public class VirtualMachineScaleSetVmsApiTest {

    private final VirtualMachineScaleSetVmsApi api = new VirtualMachineScaleSetVmsApi();

    /**
     * Deallocates a specific virtual machine in a VM scale set. Shuts down the virtual machine and releases the compute resources it uses. You are not billed for the compute resources of this virtual machine once it is deallocated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualMachineScaleSetVMsDeallocateTest() throws ApiException {
        String resourceGroupName = null;
        String vmScaleSetName = null;
        String instanceId = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.virtualMachineScaleSetVMsDeallocate(resourceGroupName, vmScaleSetName, instanceId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Deletes a virtual machine from a VM scale set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualMachineScaleSetVMsDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String vmScaleSetName = null;
        String instanceId = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.virtualMachineScaleSetVMsDelete(resourceGroupName, vmScaleSetName, instanceId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets a virtual machine from a VM scale set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualMachineScaleSetVMsGetTest() throws ApiException {
        String resourceGroupName = null;
        String vmScaleSetName = null;
        String instanceId = null;
        String apiVersion = null;
        String subscriptionId = null;
        VirtualMachineScaleSetVM response = api.virtualMachineScaleSetVMsGet(resourceGroupName, vmScaleSetName, instanceId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the status of a virtual machine from a VM scale set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualMachineScaleSetVMsGetInstanceViewTest() throws ApiException {
        String resourceGroupName = null;
        String vmScaleSetName = null;
        String instanceId = null;
        String apiVersion = null;
        String subscriptionId = null;
        VirtualMachineScaleSetVMInstanceView response = api.virtualMachineScaleSetVMsGetInstanceView(resourceGroupName, vmScaleSetName, instanceId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets a list of all virtual machines in a VM scale sets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualMachineScaleSetVMsListTest() throws ApiException {
        String resourceGroupName = null;
        String virtualMachineScaleSetName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        String $select = null;
        String $expand = null;
        VirtualMachineScaleSetVMListResult response = api.virtualMachineScaleSetVMsList(resourceGroupName, virtualMachineScaleSetName, apiVersion, subscriptionId, $filter, $select, $expand);
        // TODO: test validations
    }

    /**
     * Performs maintenance on a virtual machine in a VM scale set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualMachineScaleSetVMsPerformMaintenanceTest() throws ApiException {
        String resourceGroupName = null;
        String vmScaleSetName = null;
        String instanceId = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.virtualMachineScaleSetVMsPerformMaintenance(resourceGroupName, vmScaleSetName, instanceId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Power off (stop) a virtual machine in a VM scale set. Note that resources are still attached and you are getting charged for the resources. Instead, use deallocate to release resources and avoid charges.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualMachineScaleSetVMsPowerOffTest() throws ApiException {
        String resourceGroupName = null;
        String vmScaleSetName = null;
        String instanceId = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.virtualMachineScaleSetVMsPowerOff(resourceGroupName, vmScaleSetName, instanceId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Shuts down the virtual machine in the virtual machine scale set, moves it to a new node, and powers it back on.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualMachineScaleSetVMsRedeployTest() throws ApiException {
        String resourceGroupName = null;
        String vmScaleSetName = null;
        String instanceId = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.virtualMachineScaleSetVMsRedeploy(resourceGroupName, vmScaleSetName, instanceId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Reimages (upgrade the operating system) a specific virtual machine in a VM scale set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualMachineScaleSetVMsReimageTest() throws ApiException {
        String resourceGroupName = null;
        String vmScaleSetName = null;
        String instanceId = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.virtualMachineScaleSetVMsReimage(resourceGroupName, vmScaleSetName, instanceId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Allows you to re-image all the disks ( including data disks ) in the a VM scale set instance. This operation is only supported for managed disks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualMachineScaleSetVMsReimageAllTest() throws ApiException {
        String resourceGroupName = null;
        String vmScaleSetName = null;
        String instanceId = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.virtualMachineScaleSetVMsReimageAll(resourceGroupName, vmScaleSetName, instanceId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Restarts a virtual machine in a VM scale set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualMachineScaleSetVMsRestartTest() throws ApiException {
        String resourceGroupName = null;
        String vmScaleSetName = null;
        String instanceId = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.virtualMachineScaleSetVMsRestart(resourceGroupName, vmScaleSetName, instanceId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Starts a virtual machine in a VM scale set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualMachineScaleSetVMsStartTest() throws ApiException {
        String resourceGroupName = null;
        String vmScaleSetName = null;
        String instanceId = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.virtualMachineScaleSetVMsStart(resourceGroupName, vmScaleSetName, instanceId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Updates a virtual machine of a VM scale set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualMachineScaleSetVMsUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String vmScaleSetName = null;
        String instanceId = null;
        String apiVersion = null;
        String subscriptionId = null;
        VirtualMachineScaleSetVM parameters = null;
        VirtualMachineScaleSetVM response = api.virtualMachineScaleSetVMsUpdate(resourceGroupName, vmScaleSetName, instanceId, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

}
