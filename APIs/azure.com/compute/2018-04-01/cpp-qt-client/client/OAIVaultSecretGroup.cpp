/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVaultSecretGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVaultSecretGroup::OAIVaultSecretGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVaultSecretGroup::OAIVaultSecretGroup() {
    this->initializeModel();
}

OAIVaultSecretGroup::~OAIVaultSecretGroup() {}

void OAIVaultSecretGroup::initializeModel() {

    m_source_vault_isSet = false;
    m_source_vault_isValid = false;

    m_vault_certificates_isSet = false;
    m_vault_certificates_isValid = false;
}

void OAIVaultSecretGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVaultSecretGroup::fromJsonObject(QJsonObject json) {

    m_source_vault_isValid = ::OpenAPI::fromJsonValue(m_source_vault, json[QString("sourceVault")]);
    m_source_vault_isSet = !json[QString("sourceVault")].isNull() && m_source_vault_isValid;

    m_vault_certificates_isValid = ::OpenAPI::fromJsonValue(m_vault_certificates, json[QString("vaultCertificates")]);
    m_vault_certificates_isSet = !json[QString("vaultCertificates")].isNull() && m_vault_certificates_isValid;
}

QString OAIVaultSecretGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVaultSecretGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_source_vault.isSet()) {
        obj.insert(QString("sourceVault"), ::OpenAPI::toJsonValue(m_source_vault));
    }
    if (m_vault_certificates.size() > 0) {
        obj.insert(QString("vaultCertificates"), ::OpenAPI::toJsonValue(m_vault_certificates));
    }
    return obj;
}

OAISubResource OAIVaultSecretGroup::getSourceVault() const {
    return m_source_vault;
}
void OAIVaultSecretGroup::setSourceVault(const OAISubResource &source_vault) {
    m_source_vault = source_vault;
    m_source_vault_isSet = true;
}

bool OAIVaultSecretGroup::is_source_vault_Set() const{
    return m_source_vault_isSet;
}

bool OAIVaultSecretGroup::is_source_vault_Valid() const{
    return m_source_vault_isValid;
}

QList<OAIVaultCertificate> OAIVaultSecretGroup::getVaultCertificates() const {
    return m_vault_certificates;
}
void OAIVaultSecretGroup::setVaultCertificates(const QList<OAIVaultCertificate> &vault_certificates) {
    m_vault_certificates = vault_certificates;
    m_vault_certificates_isSet = true;
}

bool OAIVaultSecretGroup::is_vault_certificates_Set() const{
    return m_vault_certificates_isSet;
}

bool OAIVaultSecretGroup::is_vault_certificates_Valid() const{
    return m_vault_certificates_isValid;
}

bool OAIVaultSecretGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_vault.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vault_certificates.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVaultSecretGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
