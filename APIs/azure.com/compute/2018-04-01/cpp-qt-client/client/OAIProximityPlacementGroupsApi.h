/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProximityPlacementGroupsApi_H
#define OAI_OAIProximityPlacementGroupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIProximityPlacementGroup.h"
#include "OAIProximityPlacementGroupListResult.h"
#include "OAIProximityPlacementGroupUpdate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProximityPlacementGroupsApi : public QObject {
    Q_OBJECT

public:
    OAIProximityPlacementGroupsApi(const int timeOut = 0);
    ~OAIProximityPlacementGroupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  proximity_placement_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIProximityPlacementGroup [required]
    */
    virtual void proximityPlacementGroupsCreateOrUpdate(const QString &resource_group_name, const QString &proximity_placement_group_name, const QString &api_version, const QString &subscription_id, const OAIProximityPlacementGroup &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  proximity_placement_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void proximityPlacementGroupsDelete(const QString &resource_group_name, const QString &proximity_placement_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  proximity_placement_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void proximityPlacementGroupsGet(const QString &resource_group_name, const QString &proximity_placement_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void proximityPlacementGroupsListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void proximityPlacementGroupsListBySubscription(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  proximity_placement_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIProximityPlacementGroupUpdate [required]
    */
    virtual void proximityPlacementGroupsUpdate(const QString &resource_group_name, const QString &proximity_placement_group_name, const QString &api_version, const QString &subscription_id, const OAIProximityPlacementGroupUpdate &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void proximityPlacementGroupsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void proximityPlacementGroupsDeleteCallback(OAIHttpRequestWorker *worker);
    void proximityPlacementGroupsGetCallback(OAIHttpRequestWorker *worker);
    void proximityPlacementGroupsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void proximityPlacementGroupsListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void proximityPlacementGroupsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void proximityPlacementGroupsCreateOrUpdateSignal(OAIProximityPlacementGroup summary);
    void proximityPlacementGroupsDeleteSignal();
    void proximityPlacementGroupsGetSignal(OAIProximityPlacementGroup summary);
    void proximityPlacementGroupsListByResourceGroupSignal(OAIProximityPlacementGroupListResult summary);
    void proximityPlacementGroupsListBySubscriptionSignal(OAIProximityPlacementGroupListResult summary);
    void proximityPlacementGroupsUpdateSignal(OAIProximityPlacementGroup summary);


    void proximityPlacementGroupsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIProximityPlacementGroup summary);
    void proximityPlacementGroupsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void proximityPlacementGroupsGetSignalFull(OAIHttpRequestWorker *worker, OAIProximityPlacementGroup summary);
    void proximityPlacementGroupsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIProximityPlacementGroupListResult summary);
    void proximityPlacementGroupsListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIProximityPlacementGroupListResult summary);
    void proximityPlacementGroupsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIProximityPlacementGroup summary);

    Q_DECL_DEPRECATED_X("Use proximityPlacementGroupsCreateOrUpdateSignalError() instead")
    void proximityPlacementGroupsCreateOrUpdateSignalE(OAIProximityPlacementGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void proximityPlacementGroupsCreateOrUpdateSignalError(OAIProximityPlacementGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proximityPlacementGroupsDeleteSignalError() instead")
    void proximityPlacementGroupsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void proximityPlacementGroupsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proximityPlacementGroupsGetSignalError() instead")
    void proximityPlacementGroupsGetSignalE(OAIProximityPlacementGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void proximityPlacementGroupsGetSignalError(OAIProximityPlacementGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proximityPlacementGroupsListByResourceGroupSignalError() instead")
    void proximityPlacementGroupsListByResourceGroupSignalE(OAIProximityPlacementGroupListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void proximityPlacementGroupsListByResourceGroupSignalError(OAIProximityPlacementGroupListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proximityPlacementGroupsListBySubscriptionSignalError() instead")
    void proximityPlacementGroupsListBySubscriptionSignalE(OAIProximityPlacementGroupListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void proximityPlacementGroupsListBySubscriptionSignalError(OAIProximityPlacementGroupListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proximityPlacementGroupsUpdateSignalError() instead")
    void proximityPlacementGroupsUpdateSignalE(OAIProximityPlacementGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void proximityPlacementGroupsUpdateSignalError(OAIProximityPlacementGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use proximityPlacementGroupsCreateOrUpdateSignalErrorFull() instead")
    void proximityPlacementGroupsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proximityPlacementGroupsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proximityPlacementGroupsDeleteSignalErrorFull() instead")
    void proximityPlacementGroupsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proximityPlacementGroupsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proximityPlacementGroupsGetSignalErrorFull() instead")
    void proximityPlacementGroupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proximityPlacementGroupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proximityPlacementGroupsListByResourceGroupSignalErrorFull() instead")
    void proximityPlacementGroupsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proximityPlacementGroupsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proximityPlacementGroupsListBySubscriptionSignalErrorFull() instead")
    void proximityPlacementGroupsListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proximityPlacementGroupsListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proximityPlacementGroupsUpdateSignalErrorFull() instead")
    void proximityPlacementGroupsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proximityPlacementGroupsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
