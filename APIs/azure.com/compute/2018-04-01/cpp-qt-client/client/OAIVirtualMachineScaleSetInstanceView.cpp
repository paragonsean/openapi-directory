/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualMachineScaleSetInstanceView.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualMachineScaleSetInstanceView::OAIVirtualMachineScaleSetInstanceView(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualMachineScaleSetInstanceView::OAIVirtualMachineScaleSetInstanceView() {
    this->initializeModel();
}

OAIVirtualMachineScaleSetInstanceView::~OAIVirtualMachineScaleSetInstanceView() {}

void OAIVirtualMachineScaleSetInstanceView::initializeModel() {

    m_extensions_isSet = false;
    m_extensions_isValid = false;

    m_statuses_isSet = false;
    m_statuses_isValid = false;

    m_virtual_machine_isSet = false;
    m_virtual_machine_isValid = false;
}

void OAIVirtualMachineScaleSetInstanceView::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualMachineScaleSetInstanceView::fromJsonObject(QJsonObject json) {

    m_extensions_isValid = ::OpenAPI::fromJsonValue(m_extensions, json[QString("extensions")]);
    m_extensions_isSet = !json[QString("extensions")].isNull() && m_extensions_isValid;

    m_statuses_isValid = ::OpenAPI::fromJsonValue(m_statuses, json[QString("statuses")]);
    m_statuses_isSet = !json[QString("statuses")].isNull() && m_statuses_isValid;

    m_virtual_machine_isValid = ::OpenAPI::fromJsonValue(m_virtual_machine, json[QString("virtualMachine")]);
    m_virtual_machine_isSet = !json[QString("virtualMachine")].isNull() && m_virtual_machine_isValid;
}

QString OAIVirtualMachineScaleSetInstanceView::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualMachineScaleSetInstanceView::asJsonObject() const {
    QJsonObject obj;
    if (m_extensions.size() > 0) {
        obj.insert(QString("extensions"), ::OpenAPI::toJsonValue(m_extensions));
    }
    if (m_statuses.size() > 0) {
        obj.insert(QString("statuses"), ::OpenAPI::toJsonValue(m_statuses));
    }
    if (m_virtual_machine.isSet()) {
        obj.insert(QString("virtualMachine"), ::OpenAPI::toJsonValue(m_virtual_machine));
    }
    return obj;
}

QList<OAIVirtualMachineScaleSetVMExtensionsSummary> OAIVirtualMachineScaleSetInstanceView::getExtensions() const {
    return m_extensions;
}
void OAIVirtualMachineScaleSetInstanceView::setExtensions(const QList<OAIVirtualMachineScaleSetVMExtensionsSummary> &extensions) {
    m_extensions = extensions;
    m_extensions_isSet = true;
}

bool OAIVirtualMachineScaleSetInstanceView::is_extensions_Set() const{
    return m_extensions_isSet;
}

bool OAIVirtualMachineScaleSetInstanceView::is_extensions_Valid() const{
    return m_extensions_isValid;
}

QList<OAIInstanceViewStatus> OAIVirtualMachineScaleSetInstanceView::getStatuses() const {
    return m_statuses;
}
void OAIVirtualMachineScaleSetInstanceView::setStatuses(const QList<OAIInstanceViewStatus> &statuses) {
    m_statuses = statuses;
    m_statuses_isSet = true;
}

bool OAIVirtualMachineScaleSetInstanceView::is_statuses_Set() const{
    return m_statuses_isSet;
}

bool OAIVirtualMachineScaleSetInstanceView::is_statuses_Valid() const{
    return m_statuses_isValid;
}

OAIVirtualMachineScaleSetInstanceViewStatusesSummary OAIVirtualMachineScaleSetInstanceView::getVirtualMachine() const {
    return m_virtual_machine;
}
void OAIVirtualMachineScaleSetInstanceView::setVirtualMachine(const OAIVirtualMachineScaleSetInstanceViewStatusesSummary &virtual_machine) {
    m_virtual_machine = virtual_machine;
    m_virtual_machine_isSet = true;
}

bool OAIVirtualMachineScaleSetInstanceView::is_virtual_machine_Set() const{
    return m_virtual_machine_isSet;
}

bool OAIVirtualMachineScaleSetInstanceView::is_virtual_machine_Valid() const{
    return m_virtual_machine_isValid;
}

bool OAIVirtualMachineScaleSetInstanceView::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_extensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_statuses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_machine.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualMachineScaleSetInstanceView::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
