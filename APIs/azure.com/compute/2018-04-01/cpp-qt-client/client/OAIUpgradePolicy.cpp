/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpgradePolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpgradePolicy::OAIUpgradePolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpgradePolicy::OAIUpgradePolicy() {
    this->initializeModel();
}

OAIUpgradePolicy::~OAIUpgradePolicy() {}

void OAIUpgradePolicy::initializeModel() {

    m_auto_os_upgrade_policy_isSet = false;
    m_auto_os_upgrade_policy_isValid = false;

    m_automatic_os_upgrade_isSet = false;
    m_automatic_os_upgrade_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_rolling_upgrade_policy_isSet = false;
    m_rolling_upgrade_policy_isValid = false;
}

void OAIUpgradePolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpgradePolicy::fromJsonObject(QJsonObject json) {

    m_auto_os_upgrade_policy_isValid = ::OpenAPI::fromJsonValue(m_auto_os_upgrade_policy, json[QString("autoOSUpgradePolicy")]);
    m_auto_os_upgrade_policy_isSet = !json[QString("autoOSUpgradePolicy")].isNull() && m_auto_os_upgrade_policy_isValid;

    m_automatic_os_upgrade_isValid = ::OpenAPI::fromJsonValue(m_automatic_os_upgrade, json[QString("automaticOSUpgrade")]);
    m_automatic_os_upgrade_isSet = !json[QString("automaticOSUpgrade")].isNull() && m_automatic_os_upgrade_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_rolling_upgrade_policy_isValid = ::OpenAPI::fromJsonValue(m_rolling_upgrade_policy, json[QString("rollingUpgradePolicy")]);
    m_rolling_upgrade_policy_isSet = !json[QString("rollingUpgradePolicy")].isNull() && m_rolling_upgrade_policy_isValid;
}

QString OAIUpgradePolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpgradePolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_os_upgrade_policy.isSet()) {
        obj.insert(QString("autoOSUpgradePolicy"), ::OpenAPI::toJsonValue(m_auto_os_upgrade_policy));
    }
    if (m_automatic_os_upgrade_isSet) {
        obj.insert(QString("automaticOSUpgrade"), ::OpenAPI::toJsonValue(m_automatic_os_upgrade));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_rolling_upgrade_policy.isSet()) {
        obj.insert(QString("rollingUpgradePolicy"), ::OpenAPI::toJsonValue(m_rolling_upgrade_policy));
    }
    return obj;
}

OAIAutoOSUpgradePolicy OAIUpgradePolicy::getAutoOsUpgradePolicy() const {
    return m_auto_os_upgrade_policy;
}
void OAIUpgradePolicy::setAutoOsUpgradePolicy(const OAIAutoOSUpgradePolicy &auto_os_upgrade_policy) {
    m_auto_os_upgrade_policy = auto_os_upgrade_policy;
    m_auto_os_upgrade_policy_isSet = true;
}

bool OAIUpgradePolicy::is_auto_os_upgrade_policy_Set() const{
    return m_auto_os_upgrade_policy_isSet;
}

bool OAIUpgradePolicy::is_auto_os_upgrade_policy_Valid() const{
    return m_auto_os_upgrade_policy_isValid;
}

bool OAIUpgradePolicy::isAutomaticOsUpgrade() const {
    return m_automatic_os_upgrade;
}
void OAIUpgradePolicy::setAutomaticOsUpgrade(const bool &automatic_os_upgrade) {
    m_automatic_os_upgrade = automatic_os_upgrade;
    m_automatic_os_upgrade_isSet = true;
}

bool OAIUpgradePolicy::is_automatic_os_upgrade_Set() const{
    return m_automatic_os_upgrade_isSet;
}

bool OAIUpgradePolicy::is_automatic_os_upgrade_Valid() const{
    return m_automatic_os_upgrade_isValid;
}

QString OAIUpgradePolicy::getMode() const {
    return m_mode;
}
void OAIUpgradePolicy::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIUpgradePolicy::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIUpgradePolicy::is_mode_Valid() const{
    return m_mode_isValid;
}

OAIRollingUpgradePolicy OAIUpgradePolicy::getRollingUpgradePolicy() const {
    return m_rolling_upgrade_policy;
}
void OAIUpgradePolicy::setRollingUpgradePolicy(const OAIRollingUpgradePolicy &rolling_upgrade_policy) {
    m_rolling_upgrade_policy = rolling_upgrade_policy;
    m_rolling_upgrade_policy_isSet = true;
}

bool OAIUpgradePolicy::is_rolling_upgrade_policy_Set() const{
    return m_rolling_upgrade_policy_isSet;
}

bool OAIUpgradePolicy::is_rolling_upgrade_policy_Valid() const{
    return m_rolling_upgrade_policy_isValid;
}

bool OAIUpgradePolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_os_upgrade_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_automatic_os_upgrade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rolling_upgrade_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpgradePolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
