/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRollingUpgradeProgressInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRollingUpgradeProgressInfo::OAIRollingUpgradeProgressInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRollingUpgradeProgressInfo::OAIRollingUpgradeProgressInfo() {
    this->initializeModel();
}

OAIRollingUpgradeProgressInfo::~OAIRollingUpgradeProgressInfo() {}

void OAIRollingUpgradeProgressInfo::initializeModel() {

    m_failed_instance_count_isSet = false;
    m_failed_instance_count_isValid = false;

    m_in_progress_instance_count_isSet = false;
    m_in_progress_instance_count_isValid = false;

    m_pending_instance_count_isSet = false;
    m_pending_instance_count_isValid = false;

    m_successful_instance_count_isSet = false;
    m_successful_instance_count_isValid = false;
}

void OAIRollingUpgradeProgressInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRollingUpgradeProgressInfo::fromJsonObject(QJsonObject json) {

    m_failed_instance_count_isValid = ::OpenAPI::fromJsonValue(m_failed_instance_count, json[QString("failedInstanceCount")]);
    m_failed_instance_count_isSet = !json[QString("failedInstanceCount")].isNull() && m_failed_instance_count_isValid;

    m_in_progress_instance_count_isValid = ::OpenAPI::fromJsonValue(m_in_progress_instance_count, json[QString("inProgressInstanceCount")]);
    m_in_progress_instance_count_isSet = !json[QString("inProgressInstanceCount")].isNull() && m_in_progress_instance_count_isValid;

    m_pending_instance_count_isValid = ::OpenAPI::fromJsonValue(m_pending_instance_count, json[QString("pendingInstanceCount")]);
    m_pending_instance_count_isSet = !json[QString("pendingInstanceCount")].isNull() && m_pending_instance_count_isValid;

    m_successful_instance_count_isValid = ::OpenAPI::fromJsonValue(m_successful_instance_count, json[QString("successfulInstanceCount")]);
    m_successful_instance_count_isSet = !json[QString("successfulInstanceCount")].isNull() && m_successful_instance_count_isValid;
}

QString OAIRollingUpgradeProgressInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRollingUpgradeProgressInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_failed_instance_count_isSet) {
        obj.insert(QString("failedInstanceCount"), ::OpenAPI::toJsonValue(m_failed_instance_count));
    }
    if (m_in_progress_instance_count_isSet) {
        obj.insert(QString("inProgressInstanceCount"), ::OpenAPI::toJsonValue(m_in_progress_instance_count));
    }
    if (m_pending_instance_count_isSet) {
        obj.insert(QString("pendingInstanceCount"), ::OpenAPI::toJsonValue(m_pending_instance_count));
    }
    if (m_successful_instance_count_isSet) {
        obj.insert(QString("successfulInstanceCount"), ::OpenAPI::toJsonValue(m_successful_instance_count));
    }
    return obj;
}

qint32 OAIRollingUpgradeProgressInfo::getFailedInstanceCount() const {
    return m_failed_instance_count;
}
void OAIRollingUpgradeProgressInfo::setFailedInstanceCount(const qint32 &failed_instance_count) {
    m_failed_instance_count = failed_instance_count;
    m_failed_instance_count_isSet = true;
}

bool OAIRollingUpgradeProgressInfo::is_failed_instance_count_Set() const{
    return m_failed_instance_count_isSet;
}

bool OAIRollingUpgradeProgressInfo::is_failed_instance_count_Valid() const{
    return m_failed_instance_count_isValid;
}

qint32 OAIRollingUpgradeProgressInfo::getInProgressInstanceCount() const {
    return m_in_progress_instance_count;
}
void OAIRollingUpgradeProgressInfo::setInProgressInstanceCount(const qint32 &in_progress_instance_count) {
    m_in_progress_instance_count = in_progress_instance_count;
    m_in_progress_instance_count_isSet = true;
}

bool OAIRollingUpgradeProgressInfo::is_in_progress_instance_count_Set() const{
    return m_in_progress_instance_count_isSet;
}

bool OAIRollingUpgradeProgressInfo::is_in_progress_instance_count_Valid() const{
    return m_in_progress_instance_count_isValid;
}

qint32 OAIRollingUpgradeProgressInfo::getPendingInstanceCount() const {
    return m_pending_instance_count;
}
void OAIRollingUpgradeProgressInfo::setPendingInstanceCount(const qint32 &pending_instance_count) {
    m_pending_instance_count = pending_instance_count;
    m_pending_instance_count_isSet = true;
}

bool OAIRollingUpgradeProgressInfo::is_pending_instance_count_Set() const{
    return m_pending_instance_count_isSet;
}

bool OAIRollingUpgradeProgressInfo::is_pending_instance_count_Valid() const{
    return m_pending_instance_count_isValid;
}

qint32 OAIRollingUpgradeProgressInfo::getSuccessfulInstanceCount() const {
    return m_successful_instance_count;
}
void OAIRollingUpgradeProgressInfo::setSuccessfulInstanceCount(const qint32 &successful_instance_count) {
    m_successful_instance_count = successful_instance_count;
    m_successful_instance_count_isSet = true;
}

bool OAIRollingUpgradeProgressInfo::is_successful_instance_count_Set() const{
    return m_successful_instance_count_isSet;
}

bool OAIRollingUpgradeProgressInfo::is_successful_instance_count_Valid() const{
    return m_successful_instance_count_isValid;
}

bool OAIRollingUpgradeProgressInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failed_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_progress_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_successful_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRollingUpgradeProgressInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
