/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdditionalUnattendContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdditionalUnattendContent::OAIAdditionalUnattendContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdditionalUnattendContent::OAIAdditionalUnattendContent() {
    this->initializeModel();
}

OAIAdditionalUnattendContent::~OAIAdditionalUnattendContent() {}

void OAIAdditionalUnattendContent::initializeModel() {

    m_component_name_isSet = false;
    m_component_name_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_pass_name_isSet = false;
    m_pass_name_isValid = false;

    m_setting_name_isSet = false;
    m_setting_name_isValid = false;
}

void OAIAdditionalUnattendContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdditionalUnattendContent::fromJsonObject(QJsonObject json) {

    m_component_name_isValid = ::OpenAPI::fromJsonValue(m_component_name, json[QString("componentName")]);
    m_component_name_isSet = !json[QString("componentName")].isNull() && m_component_name_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_pass_name_isValid = ::OpenAPI::fromJsonValue(m_pass_name, json[QString("passName")]);
    m_pass_name_isSet = !json[QString("passName")].isNull() && m_pass_name_isValid;

    m_setting_name_isValid = ::OpenAPI::fromJsonValue(m_setting_name, json[QString("settingName")]);
    m_setting_name_isSet = !json[QString("settingName")].isNull() && m_setting_name_isValid;
}

QString OAIAdditionalUnattendContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdditionalUnattendContent::asJsonObject() const {
    QJsonObject obj;
    if (m_component_name_isSet) {
        obj.insert(QString("componentName"), ::OpenAPI::toJsonValue(m_component_name));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_pass_name_isSet) {
        obj.insert(QString("passName"), ::OpenAPI::toJsonValue(m_pass_name));
    }
    if (m_setting_name_isSet) {
        obj.insert(QString("settingName"), ::OpenAPI::toJsonValue(m_setting_name));
    }
    return obj;
}

QString OAIAdditionalUnattendContent::getComponentName() const {
    return m_component_name;
}
void OAIAdditionalUnattendContent::setComponentName(const QString &component_name) {
    m_component_name = component_name;
    m_component_name_isSet = true;
}

bool OAIAdditionalUnattendContent::is_component_name_Set() const{
    return m_component_name_isSet;
}

bool OAIAdditionalUnattendContent::is_component_name_Valid() const{
    return m_component_name_isValid;
}

QString OAIAdditionalUnattendContent::getContent() const {
    return m_content;
}
void OAIAdditionalUnattendContent::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIAdditionalUnattendContent::is_content_Set() const{
    return m_content_isSet;
}

bool OAIAdditionalUnattendContent::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIAdditionalUnattendContent::getPassName() const {
    return m_pass_name;
}
void OAIAdditionalUnattendContent::setPassName(const QString &pass_name) {
    m_pass_name = pass_name;
    m_pass_name_isSet = true;
}

bool OAIAdditionalUnattendContent::is_pass_name_Set() const{
    return m_pass_name_isSet;
}

bool OAIAdditionalUnattendContent::is_pass_name_Valid() const{
    return m_pass_name_isValid;
}

QString OAIAdditionalUnattendContent::getSettingName() const {
    return m_setting_name;
}
void OAIAdditionalUnattendContent::setSettingName(const QString &setting_name) {
    m_setting_name = setting_name;
    m_setting_name_isSet = true;
}

bool OAIAdditionalUnattendContent::is_setting_name_Set() const{
    return m_setting_name_isSet;
}

bool OAIAdditionalUnattendContent::is_setting_name_Valid() const{
    return m_setting_name_isValid;
}

bool OAIAdditionalUnattendContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_component_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pass_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_setting_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdditionalUnattendContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
