/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualMachineAgentInstanceView.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualMachineAgentInstanceView::OAIVirtualMachineAgentInstanceView(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualMachineAgentInstanceView::OAIVirtualMachineAgentInstanceView() {
    this->initializeModel();
}

OAIVirtualMachineAgentInstanceView::~OAIVirtualMachineAgentInstanceView() {}

void OAIVirtualMachineAgentInstanceView::initializeModel() {

    m_extension_handlers_isSet = false;
    m_extension_handlers_isValid = false;

    m_statuses_isSet = false;
    m_statuses_isValid = false;

    m_vm_agent_version_isSet = false;
    m_vm_agent_version_isValid = false;
}

void OAIVirtualMachineAgentInstanceView::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualMachineAgentInstanceView::fromJsonObject(QJsonObject json) {

    m_extension_handlers_isValid = ::OpenAPI::fromJsonValue(m_extension_handlers, json[QString("extensionHandlers")]);
    m_extension_handlers_isSet = !json[QString("extensionHandlers")].isNull() && m_extension_handlers_isValid;

    m_statuses_isValid = ::OpenAPI::fromJsonValue(m_statuses, json[QString("statuses")]);
    m_statuses_isSet = !json[QString("statuses")].isNull() && m_statuses_isValid;

    m_vm_agent_version_isValid = ::OpenAPI::fromJsonValue(m_vm_agent_version, json[QString("vmAgentVersion")]);
    m_vm_agent_version_isSet = !json[QString("vmAgentVersion")].isNull() && m_vm_agent_version_isValid;
}

QString OAIVirtualMachineAgentInstanceView::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualMachineAgentInstanceView::asJsonObject() const {
    QJsonObject obj;
    if (m_extension_handlers.size() > 0) {
        obj.insert(QString("extensionHandlers"), ::OpenAPI::toJsonValue(m_extension_handlers));
    }
    if (m_statuses.size() > 0) {
        obj.insert(QString("statuses"), ::OpenAPI::toJsonValue(m_statuses));
    }
    if (m_vm_agent_version_isSet) {
        obj.insert(QString("vmAgentVersion"), ::OpenAPI::toJsonValue(m_vm_agent_version));
    }
    return obj;
}

QList<OAIVirtualMachineExtensionHandlerInstanceView> OAIVirtualMachineAgentInstanceView::getExtensionHandlers() const {
    return m_extension_handlers;
}
void OAIVirtualMachineAgentInstanceView::setExtensionHandlers(const QList<OAIVirtualMachineExtensionHandlerInstanceView> &extension_handlers) {
    m_extension_handlers = extension_handlers;
    m_extension_handlers_isSet = true;
}

bool OAIVirtualMachineAgentInstanceView::is_extension_handlers_Set() const{
    return m_extension_handlers_isSet;
}

bool OAIVirtualMachineAgentInstanceView::is_extension_handlers_Valid() const{
    return m_extension_handlers_isValid;
}

QList<OAIInstanceViewStatus> OAIVirtualMachineAgentInstanceView::getStatuses() const {
    return m_statuses;
}
void OAIVirtualMachineAgentInstanceView::setStatuses(const QList<OAIInstanceViewStatus> &statuses) {
    m_statuses = statuses;
    m_statuses_isSet = true;
}

bool OAIVirtualMachineAgentInstanceView::is_statuses_Set() const{
    return m_statuses_isSet;
}

bool OAIVirtualMachineAgentInstanceView::is_statuses_Valid() const{
    return m_statuses_isValid;
}

QString OAIVirtualMachineAgentInstanceView::getVmAgentVersion() const {
    return m_vm_agent_version;
}
void OAIVirtualMachineAgentInstanceView::setVmAgentVersion(const QString &vm_agent_version) {
    m_vm_agent_version = vm_agent_version;
    m_vm_agent_version_isSet = true;
}

bool OAIVirtualMachineAgentInstanceView::is_vm_agent_version_Set() const{
    return m_vm_agent_version_isSet;
}

bool OAIVirtualMachineAgentInstanceView::is_vm_agent_version_Valid() const{
    return m_vm_agent_version_isValid;
}

bool OAIVirtualMachineAgentInstanceView::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_extension_handlers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_statuses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_agent_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualMachineAgentInstanceView::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
