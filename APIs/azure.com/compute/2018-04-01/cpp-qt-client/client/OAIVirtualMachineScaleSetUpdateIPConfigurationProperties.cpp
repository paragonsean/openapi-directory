/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualMachineScaleSetUpdateIPConfigurationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::OAIVirtualMachineScaleSetUpdateIPConfigurationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::OAIVirtualMachineScaleSetUpdateIPConfigurationProperties() {
    this->initializeModel();
}

OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::~OAIVirtualMachineScaleSetUpdateIPConfigurationProperties() {}

void OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::initializeModel() {

    m_application_gateway_backend_address_pools_isSet = false;
    m_application_gateway_backend_address_pools_isValid = false;

    m_load_balancer_backend_address_pools_isSet = false;
    m_load_balancer_backend_address_pools_isValid = false;

    m_load_balancer_inbound_nat_pools_isSet = false;
    m_load_balancer_inbound_nat_pools_isValid = false;

    m_primary_isSet = false;
    m_primary_isValid = false;

    m_private_ip_address_version_isSet = false;
    m_private_ip_address_version_isValid = false;

    m_public_ip_address_configuration_isSet = false;
    m_public_ip_address_configuration_isValid = false;

    m_subnet_isSet = false;
    m_subnet_isValid = false;
}

void OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::fromJsonObject(QJsonObject json) {

    m_application_gateway_backend_address_pools_isValid = ::OpenAPI::fromJsonValue(m_application_gateway_backend_address_pools, json[QString("applicationGatewayBackendAddressPools")]);
    m_application_gateway_backend_address_pools_isSet = !json[QString("applicationGatewayBackendAddressPools")].isNull() && m_application_gateway_backend_address_pools_isValid;

    m_load_balancer_backend_address_pools_isValid = ::OpenAPI::fromJsonValue(m_load_balancer_backend_address_pools, json[QString("loadBalancerBackendAddressPools")]);
    m_load_balancer_backend_address_pools_isSet = !json[QString("loadBalancerBackendAddressPools")].isNull() && m_load_balancer_backend_address_pools_isValid;

    m_load_balancer_inbound_nat_pools_isValid = ::OpenAPI::fromJsonValue(m_load_balancer_inbound_nat_pools, json[QString("loadBalancerInboundNatPools")]);
    m_load_balancer_inbound_nat_pools_isSet = !json[QString("loadBalancerInboundNatPools")].isNull() && m_load_balancer_inbound_nat_pools_isValid;

    m_primary_isValid = ::OpenAPI::fromJsonValue(m_primary, json[QString("primary")]);
    m_primary_isSet = !json[QString("primary")].isNull() && m_primary_isValid;

    m_private_ip_address_version_isValid = ::OpenAPI::fromJsonValue(m_private_ip_address_version, json[QString("privateIPAddressVersion")]);
    m_private_ip_address_version_isSet = !json[QString("privateIPAddressVersion")].isNull() && m_private_ip_address_version_isValid;

    m_public_ip_address_configuration_isValid = ::OpenAPI::fromJsonValue(m_public_ip_address_configuration, json[QString("publicIPAddressConfiguration")]);
    m_public_ip_address_configuration_isSet = !json[QString("publicIPAddressConfiguration")].isNull() && m_public_ip_address_configuration_isValid;

    m_subnet_isValid = ::OpenAPI::fromJsonValue(m_subnet, json[QString("subnet")]);
    m_subnet_isSet = !json[QString("subnet")].isNull() && m_subnet_isValid;
}

QString OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_application_gateway_backend_address_pools.size() > 0) {
        obj.insert(QString("applicationGatewayBackendAddressPools"), ::OpenAPI::toJsonValue(m_application_gateway_backend_address_pools));
    }
    if (m_load_balancer_backend_address_pools.size() > 0) {
        obj.insert(QString("loadBalancerBackendAddressPools"), ::OpenAPI::toJsonValue(m_load_balancer_backend_address_pools));
    }
    if (m_load_balancer_inbound_nat_pools.size() > 0) {
        obj.insert(QString("loadBalancerInboundNatPools"), ::OpenAPI::toJsonValue(m_load_balancer_inbound_nat_pools));
    }
    if (m_primary_isSet) {
        obj.insert(QString("primary"), ::OpenAPI::toJsonValue(m_primary));
    }
    if (m_private_ip_address_version_isSet) {
        obj.insert(QString("privateIPAddressVersion"), ::OpenAPI::toJsonValue(m_private_ip_address_version));
    }
    if (m_public_ip_address_configuration.isSet()) {
        obj.insert(QString("publicIPAddressConfiguration"), ::OpenAPI::toJsonValue(m_public_ip_address_configuration));
    }
    if (m_subnet.isSet()) {
        obj.insert(QString("subnet"), ::OpenAPI::toJsonValue(m_subnet));
    }
    return obj;
}

QList<OAISubResource> OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::getApplicationGatewayBackendAddressPools() const {
    return m_application_gateway_backend_address_pools;
}
void OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::setApplicationGatewayBackendAddressPools(const QList<OAISubResource> &application_gateway_backend_address_pools) {
    m_application_gateway_backend_address_pools = application_gateway_backend_address_pools;
    m_application_gateway_backend_address_pools_isSet = true;
}

bool OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::is_application_gateway_backend_address_pools_Set() const{
    return m_application_gateway_backend_address_pools_isSet;
}

bool OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::is_application_gateway_backend_address_pools_Valid() const{
    return m_application_gateway_backend_address_pools_isValid;
}

QList<OAISubResource> OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::getLoadBalancerBackendAddressPools() const {
    return m_load_balancer_backend_address_pools;
}
void OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::setLoadBalancerBackendAddressPools(const QList<OAISubResource> &load_balancer_backend_address_pools) {
    m_load_balancer_backend_address_pools = load_balancer_backend_address_pools;
    m_load_balancer_backend_address_pools_isSet = true;
}

bool OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::is_load_balancer_backend_address_pools_Set() const{
    return m_load_balancer_backend_address_pools_isSet;
}

bool OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::is_load_balancer_backend_address_pools_Valid() const{
    return m_load_balancer_backend_address_pools_isValid;
}

QList<OAISubResource> OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::getLoadBalancerInboundNatPools() const {
    return m_load_balancer_inbound_nat_pools;
}
void OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::setLoadBalancerInboundNatPools(const QList<OAISubResource> &load_balancer_inbound_nat_pools) {
    m_load_balancer_inbound_nat_pools = load_balancer_inbound_nat_pools;
    m_load_balancer_inbound_nat_pools_isSet = true;
}

bool OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::is_load_balancer_inbound_nat_pools_Set() const{
    return m_load_balancer_inbound_nat_pools_isSet;
}

bool OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::is_load_balancer_inbound_nat_pools_Valid() const{
    return m_load_balancer_inbound_nat_pools_isValid;
}

bool OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::isPrimary() const {
    return m_primary;
}
void OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::setPrimary(const bool &primary) {
    m_primary = primary;
    m_primary_isSet = true;
}

bool OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::is_primary_Set() const{
    return m_primary_isSet;
}

bool OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::is_primary_Valid() const{
    return m_primary_isValid;
}

QString OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::getPrivateIpAddressVersion() const {
    return m_private_ip_address_version;
}
void OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::setPrivateIpAddressVersion(const QString &private_ip_address_version) {
    m_private_ip_address_version = private_ip_address_version;
    m_private_ip_address_version_isSet = true;
}

bool OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::is_private_ip_address_version_Set() const{
    return m_private_ip_address_version_isSet;
}

bool OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::is_private_ip_address_version_Valid() const{
    return m_private_ip_address_version_isValid;
}

OAIVirtualMachineScaleSetUpdatePublicIPAddressConfiguration OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::getPublicIpAddressConfiguration() const {
    return m_public_ip_address_configuration;
}
void OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::setPublicIpAddressConfiguration(const OAIVirtualMachineScaleSetUpdatePublicIPAddressConfiguration &public_ip_address_configuration) {
    m_public_ip_address_configuration = public_ip_address_configuration;
    m_public_ip_address_configuration_isSet = true;
}

bool OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::is_public_ip_address_configuration_Set() const{
    return m_public_ip_address_configuration_isSet;
}

bool OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::is_public_ip_address_configuration_Valid() const{
    return m_public_ip_address_configuration_isValid;
}

OAIApiEntityReference OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::getSubnet() const {
    return m_subnet;
}
void OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::setSubnet(const OAIApiEntityReference &subnet) {
    m_subnet = subnet;
    m_subnet_isSet = true;
}

bool OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::is_subnet_Set() const{
    return m_subnet_isSet;
}

bool OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::is_subnet_Valid() const{
    return m_subnet_isValid;
}

bool OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_gateway_backend_address_pools.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancer_backend_address_pools.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancer_inbound_nat_pools.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_ip_address_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_ip_address_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualMachineScaleSetUpdateIPConfigurationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
