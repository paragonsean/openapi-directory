/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualMachineProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualMachineProperties::OAIVirtualMachineProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualMachineProperties::OAIVirtualMachineProperties() {
    this->initializeModel();
}

OAIVirtualMachineProperties::~OAIVirtualMachineProperties() {}

void OAIVirtualMachineProperties::initializeModel() {

    m_availability_set_isSet = false;
    m_availability_set_isValid = false;

    m_diagnostics_profile_isSet = false;
    m_diagnostics_profile_isValid = false;

    m_hardware_profile_isSet = false;
    m_hardware_profile_isValid = false;

    m_instance_view_isSet = false;
    m_instance_view_isValid = false;

    m_license_type_isSet = false;
    m_license_type_isValid = false;

    m_network_profile_isSet = false;
    m_network_profile_isValid = false;

    m_os_profile_isSet = false;
    m_os_profile_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_proximity_placement_group_isSet = false;
    m_proximity_placement_group_isValid = false;

    m_storage_profile_isSet = false;
    m_storage_profile_isValid = false;

    m_vm_id_isSet = false;
    m_vm_id_isValid = false;
}

void OAIVirtualMachineProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualMachineProperties::fromJsonObject(QJsonObject json) {

    m_availability_set_isValid = ::OpenAPI::fromJsonValue(m_availability_set, json[QString("availabilitySet")]);
    m_availability_set_isSet = !json[QString("availabilitySet")].isNull() && m_availability_set_isValid;

    m_diagnostics_profile_isValid = ::OpenAPI::fromJsonValue(m_diagnostics_profile, json[QString("diagnosticsProfile")]);
    m_diagnostics_profile_isSet = !json[QString("diagnosticsProfile")].isNull() && m_diagnostics_profile_isValid;

    m_hardware_profile_isValid = ::OpenAPI::fromJsonValue(m_hardware_profile, json[QString("hardwareProfile")]);
    m_hardware_profile_isSet = !json[QString("hardwareProfile")].isNull() && m_hardware_profile_isValid;

    m_instance_view_isValid = ::OpenAPI::fromJsonValue(m_instance_view, json[QString("instanceView")]);
    m_instance_view_isSet = !json[QString("instanceView")].isNull() && m_instance_view_isValid;

    m_license_type_isValid = ::OpenAPI::fromJsonValue(m_license_type, json[QString("licenseType")]);
    m_license_type_isSet = !json[QString("licenseType")].isNull() && m_license_type_isValid;

    m_network_profile_isValid = ::OpenAPI::fromJsonValue(m_network_profile, json[QString("networkProfile")]);
    m_network_profile_isSet = !json[QString("networkProfile")].isNull() && m_network_profile_isValid;

    m_os_profile_isValid = ::OpenAPI::fromJsonValue(m_os_profile, json[QString("osProfile")]);
    m_os_profile_isSet = !json[QString("osProfile")].isNull() && m_os_profile_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_proximity_placement_group_isValid = ::OpenAPI::fromJsonValue(m_proximity_placement_group, json[QString("proximityPlacementGroup")]);
    m_proximity_placement_group_isSet = !json[QString("proximityPlacementGroup")].isNull() && m_proximity_placement_group_isValid;

    m_storage_profile_isValid = ::OpenAPI::fromJsonValue(m_storage_profile, json[QString("storageProfile")]);
    m_storage_profile_isSet = !json[QString("storageProfile")].isNull() && m_storage_profile_isValid;

    m_vm_id_isValid = ::OpenAPI::fromJsonValue(m_vm_id, json[QString("vmId")]);
    m_vm_id_isSet = !json[QString("vmId")].isNull() && m_vm_id_isValid;
}

QString OAIVirtualMachineProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualMachineProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_availability_set.isSet()) {
        obj.insert(QString("availabilitySet"), ::OpenAPI::toJsonValue(m_availability_set));
    }
    if (m_diagnostics_profile.isSet()) {
        obj.insert(QString("diagnosticsProfile"), ::OpenAPI::toJsonValue(m_diagnostics_profile));
    }
    if (m_hardware_profile.isSet()) {
        obj.insert(QString("hardwareProfile"), ::OpenAPI::toJsonValue(m_hardware_profile));
    }
    if (m_instance_view.isSet()) {
        obj.insert(QString("instanceView"), ::OpenAPI::toJsonValue(m_instance_view));
    }
    if (m_license_type_isSet) {
        obj.insert(QString("licenseType"), ::OpenAPI::toJsonValue(m_license_type));
    }
    if (m_network_profile.isSet()) {
        obj.insert(QString("networkProfile"), ::OpenAPI::toJsonValue(m_network_profile));
    }
    if (m_os_profile.isSet()) {
        obj.insert(QString("osProfile"), ::OpenAPI::toJsonValue(m_os_profile));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_proximity_placement_group.isSet()) {
        obj.insert(QString("proximityPlacementGroup"), ::OpenAPI::toJsonValue(m_proximity_placement_group));
    }
    if (m_storage_profile.isSet()) {
        obj.insert(QString("storageProfile"), ::OpenAPI::toJsonValue(m_storage_profile));
    }
    if (m_vm_id_isSet) {
        obj.insert(QString("vmId"), ::OpenAPI::toJsonValue(m_vm_id));
    }
    return obj;
}

OAISubResource OAIVirtualMachineProperties::getAvailabilitySet() const {
    return m_availability_set;
}
void OAIVirtualMachineProperties::setAvailabilitySet(const OAISubResource &availability_set) {
    m_availability_set = availability_set;
    m_availability_set_isSet = true;
}

bool OAIVirtualMachineProperties::is_availability_set_Set() const{
    return m_availability_set_isSet;
}

bool OAIVirtualMachineProperties::is_availability_set_Valid() const{
    return m_availability_set_isValid;
}

OAIDiagnosticsProfile OAIVirtualMachineProperties::getDiagnosticsProfile() const {
    return m_diagnostics_profile;
}
void OAIVirtualMachineProperties::setDiagnosticsProfile(const OAIDiagnosticsProfile &diagnostics_profile) {
    m_diagnostics_profile = diagnostics_profile;
    m_diagnostics_profile_isSet = true;
}

bool OAIVirtualMachineProperties::is_diagnostics_profile_Set() const{
    return m_diagnostics_profile_isSet;
}

bool OAIVirtualMachineProperties::is_diagnostics_profile_Valid() const{
    return m_diagnostics_profile_isValid;
}

OAIHardwareProfile OAIVirtualMachineProperties::getHardwareProfile() const {
    return m_hardware_profile;
}
void OAIVirtualMachineProperties::setHardwareProfile(const OAIHardwareProfile &hardware_profile) {
    m_hardware_profile = hardware_profile;
    m_hardware_profile_isSet = true;
}

bool OAIVirtualMachineProperties::is_hardware_profile_Set() const{
    return m_hardware_profile_isSet;
}

bool OAIVirtualMachineProperties::is_hardware_profile_Valid() const{
    return m_hardware_profile_isValid;
}

OAIVirtualMachineInstanceView OAIVirtualMachineProperties::getInstanceView() const {
    return m_instance_view;
}
void OAIVirtualMachineProperties::setInstanceView(const OAIVirtualMachineInstanceView &instance_view) {
    m_instance_view = instance_view;
    m_instance_view_isSet = true;
}

bool OAIVirtualMachineProperties::is_instance_view_Set() const{
    return m_instance_view_isSet;
}

bool OAIVirtualMachineProperties::is_instance_view_Valid() const{
    return m_instance_view_isValid;
}

QString OAIVirtualMachineProperties::getLicenseType() const {
    return m_license_type;
}
void OAIVirtualMachineProperties::setLicenseType(const QString &license_type) {
    m_license_type = license_type;
    m_license_type_isSet = true;
}

bool OAIVirtualMachineProperties::is_license_type_Set() const{
    return m_license_type_isSet;
}

bool OAIVirtualMachineProperties::is_license_type_Valid() const{
    return m_license_type_isValid;
}

OAINetworkProfile OAIVirtualMachineProperties::getNetworkProfile() const {
    return m_network_profile;
}
void OAIVirtualMachineProperties::setNetworkProfile(const OAINetworkProfile &network_profile) {
    m_network_profile = network_profile;
    m_network_profile_isSet = true;
}

bool OAIVirtualMachineProperties::is_network_profile_Set() const{
    return m_network_profile_isSet;
}

bool OAIVirtualMachineProperties::is_network_profile_Valid() const{
    return m_network_profile_isValid;
}

OAIOSProfile OAIVirtualMachineProperties::getOsProfile() const {
    return m_os_profile;
}
void OAIVirtualMachineProperties::setOsProfile(const OAIOSProfile &os_profile) {
    m_os_profile = os_profile;
    m_os_profile_isSet = true;
}

bool OAIVirtualMachineProperties::is_os_profile_Set() const{
    return m_os_profile_isSet;
}

bool OAIVirtualMachineProperties::is_os_profile_Valid() const{
    return m_os_profile_isValid;
}

QString OAIVirtualMachineProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIVirtualMachineProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIVirtualMachineProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIVirtualMachineProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAISubResource OAIVirtualMachineProperties::getProximityPlacementGroup() const {
    return m_proximity_placement_group;
}
void OAIVirtualMachineProperties::setProximityPlacementGroup(const OAISubResource &proximity_placement_group) {
    m_proximity_placement_group = proximity_placement_group;
    m_proximity_placement_group_isSet = true;
}

bool OAIVirtualMachineProperties::is_proximity_placement_group_Set() const{
    return m_proximity_placement_group_isSet;
}

bool OAIVirtualMachineProperties::is_proximity_placement_group_Valid() const{
    return m_proximity_placement_group_isValid;
}

OAIStorageProfile OAIVirtualMachineProperties::getStorageProfile() const {
    return m_storage_profile;
}
void OAIVirtualMachineProperties::setStorageProfile(const OAIStorageProfile &storage_profile) {
    m_storage_profile = storage_profile;
    m_storage_profile_isSet = true;
}

bool OAIVirtualMachineProperties::is_storage_profile_Set() const{
    return m_storage_profile_isSet;
}

bool OAIVirtualMachineProperties::is_storage_profile_Valid() const{
    return m_storage_profile_isValid;
}

QString OAIVirtualMachineProperties::getVmId() const {
    return m_vm_id;
}
void OAIVirtualMachineProperties::setVmId(const QString &vm_id) {
    m_vm_id = vm_id;
    m_vm_id_isSet = true;
}

bool OAIVirtualMachineProperties::is_vm_id_Set() const{
    return m_vm_id_isSet;
}

bool OAIVirtualMachineProperties::is_vm_id_Valid() const{
    return m_vm_id_isValid;
}

bool OAIVirtualMachineProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability_set.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_diagnostics_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hardware_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_view.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proximity_placement_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualMachineProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
