/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2018-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualMachineScaleSetVMProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualMachineScaleSetVMProfile::OAIVirtualMachineScaleSetVMProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualMachineScaleSetVMProfile::OAIVirtualMachineScaleSetVMProfile() {
    this->initializeModel();
}

OAIVirtualMachineScaleSetVMProfile::~OAIVirtualMachineScaleSetVMProfile() {}

void OAIVirtualMachineScaleSetVMProfile::initializeModel() {

    m_diagnostics_profile_isSet = false;
    m_diagnostics_profile_isValid = false;

    m_eviction_policy_isSet = false;
    m_eviction_policy_isValid = false;

    m_extension_profile_isSet = false;
    m_extension_profile_isValid = false;

    m_license_type_isSet = false;
    m_license_type_isValid = false;

    m_network_profile_isSet = false;
    m_network_profile_isValid = false;

    m_os_profile_isSet = false;
    m_os_profile_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_storage_profile_isSet = false;
    m_storage_profile_isValid = false;
}

void OAIVirtualMachineScaleSetVMProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualMachineScaleSetVMProfile::fromJsonObject(QJsonObject json) {

    m_diagnostics_profile_isValid = ::OpenAPI::fromJsonValue(m_diagnostics_profile, json[QString("diagnosticsProfile")]);
    m_diagnostics_profile_isSet = !json[QString("diagnosticsProfile")].isNull() && m_diagnostics_profile_isValid;

    m_eviction_policy_isValid = ::OpenAPI::fromJsonValue(m_eviction_policy, json[QString("evictionPolicy")]);
    m_eviction_policy_isSet = !json[QString("evictionPolicy")].isNull() && m_eviction_policy_isValid;

    m_extension_profile_isValid = ::OpenAPI::fromJsonValue(m_extension_profile, json[QString("extensionProfile")]);
    m_extension_profile_isSet = !json[QString("extensionProfile")].isNull() && m_extension_profile_isValid;

    m_license_type_isValid = ::OpenAPI::fromJsonValue(m_license_type, json[QString("licenseType")]);
    m_license_type_isSet = !json[QString("licenseType")].isNull() && m_license_type_isValid;

    m_network_profile_isValid = ::OpenAPI::fromJsonValue(m_network_profile, json[QString("networkProfile")]);
    m_network_profile_isSet = !json[QString("networkProfile")].isNull() && m_network_profile_isValid;

    m_os_profile_isValid = ::OpenAPI::fromJsonValue(m_os_profile, json[QString("osProfile")]);
    m_os_profile_isSet = !json[QString("osProfile")].isNull() && m_os_profile_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_storage_profile_isValid = ::OpenAPI::fromJsonValue(m_storage_profile, json[QString("storageProfile")]);
    m_storage_profile_isSet = !json[QString("storageProfile")].isNull() && m_storage_profile_isValid;
}

QString OAIVirtualMachineScaleSetVMProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualMachineScaleSetVMProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_diagnostics_profile.isSet()) {
        obj.insert(QString("diagnosticsProfile"), ::OpenAPI::toJsonValue(m_diagnostics_profile));
    }
    if (m_eviction_policy_isSet) {
        obj.insert(QString("evictionPolicy"), ::OpenAPI::toJsonValue(m_eviction_policy));
    }
    if (m_extension_profile.isSet()) {
        obj.insert(QString("extensionProfile"), ::OpenAPI::toJsonValue(m_extension_profile));
    }
    if (m_license_type_isSet) {
        obj.insert(QString("licenseType"), ::OpenAPI::toJsonValue(m_license_type));
    }
    if (m_network_profile.isSet()) {
        obj.insert(QString("networkProfile"), ::OpenAPI::toJsonValue(m_network_profile));
    }
    if (m_os_profile.isSet()) {
        obj.insert(QString("osProfile"), ::OpenAPI::toJsonValue(m_os_profile));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_storage_profile.isSet()) {
        obj.insert(QString("storageProfile"), ::OpenAPI::toJsonValue(m_storage_profile));
    }
    return obj;
}

OAIDiagnosticsProfile OAIVirtualMachineScaleSetVMProfile::getDiagnosticsProfile() const {
    return m_diagnostics_profile;
}
void OAIVirtualMachineScaleSetVMProfile::setDiagnosticsProfile(const OAIDiagnosticsProfile &diagnostics_profile) {
    m_diagnostics_profile = diagnostics_profile;
    m_diagnostics_profile_isSet = true;
}

bool OAIVirtualMachineScaleSetVMProfile::is_diagnostics_profile_Set() const{
    return m_diagnostics_profile_isSet;
}

bool OAIVirtualMachineScaleSetVMProfile::is_diagnostics_profile_Valid() const{
    return m_diagnostics_profile_isValid;
}

QString OAIVirtualMachineScaleSetVMProfile::getEvictionPolicy() const {
    return m_eviction_policy;
}
void OAIVirtualMachineScaleSetVMProfile::setEvictionPolicy(const QString &eviction_policy) {
    m_eviction_policy = eviction_policy;
    m_eviction_policy_isSet = true;
}

bool OAIVirtualMachineScaleSetVMProfile::is_eviction_policy_Set() const{
    return m_eviction_policy_isSet;
}

bool OAIVirtualMachineScaleSetVMProfile::is_eviction_policy_Valid() const{
    return m_eviction_policy_isValid;
}

OAIVirtualMachineScaleSetExtensionProfile OAIVirtualMachineScaleSetVMProfile::getExtensionProfile() const {
    return m_extension_profile;
}
void OAIVirtualMachineScaleSetVMProfile::setExtensionProfile(const OAIVirtualMachineScaleSetExtensionProfile &extension_profile) {
    m_extension_profile = extension_profile;
    m_extension_profile_isSet = true;
}

bool OAIVirtualMachineScaleSetVMProfile::is_extension_profile_Set() const{
    return m_extension_profile_isSet;
}

bool OAIVirtualMachineScaleSetVMProfile::is_extension_profile_Valid() const{
    return m_extension_profile_isValid;
}

QString OAIVirtualMachineScaleSetVMProfile::getLicenseType() const {
    return m_license_type;
}
void OAIVirtualMachineScaleSetVMProfile::setLicenseType(const QString &license_type) {
    m_license_type = license_type;
    m_license_type_isSet = true;
}

bool OAIVirtualMachineScaleSetVMProfile::is_license_type_Set() const{
    return m_license_type_isSet;
}

bool OAIVirtualMachineScaleSetVMProfile::is_license_type_Valid() const{
    return m_license_type_isValid;
}

OAIVirtualMachineScaleSetNetworkProfile OAIVirtualMachineScaleSetVMProfile::getNetworkProfile() const {
    return m_network_profile;
}
void OAIVirtualMachineScaleSetVMProfile::setNetworkProfile(const OAIVirtualMachineScaleSetNetworkProfile &network_profile) {
    m_network_profile = network_profile;
    m_network_profile_isSet = true;
}

bool OAIVirtualMachineScaleSetVMProfile::is_network_profile_Set() const{
    return m_network_profile_isSet;
}

bool OAIVirtualMachineScaleSetVMProfile::is_network_profile_Valid() const{
    return m_network_profile_isValid;
}

OAIVirtualMachineScaleSetOSProfile OAIVirtualMachineScaleSetVMProfile::getOsProfile() const {
    return m_os_profile;
}
void OAIVirtualMachineScaleSetVMProfile::setOsProfile(const OAIVirtualMachineScaleSetOSProfile &os_profile) {
    m_os_profile = os_profile;
    m_os_profile_isSet = true;
}

bool OAIVirtualMachineScaleSetVMProfile::is_os_profile_Set() const{
    return m_os_profile_isSet;
}

bool OAIVirtualMachineScaleSetVMProfile::is_os_profile_Valid() const{
    return m_os_profile_isValid;
}

QString OAIVirtualMachineScaleSetVMProfile::getPriority() const {
    return m_priority;
}
void OAIVirtualMachineScaleSetVMProfile::setPriority(const QString &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIVirtualMachineScaleSetVMProfile::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIVirtualMachineScaleSetVMProfile::is_priority_Valid() const{
    return m_priority_isValid;
}

OAIVirtualMachineScaleSetStorageProfile OAIVirtualMachineScaleSetVMProfile::getStorageProfile() const {
    return m_storage_profile;
}
void OAIVirtualMachineScaleSetVMProfile::setStorageProfile(const OAIVirtualMachineScaleSetStorageProfile &storage_profile) {
    m_storage_profile = storage_profile;
    m_storage_profile_isSet = true;
}

bool OAIVirtualMachineScaleSetVMProfile::is_storage_profile_Set() const{
    return m_storage_profile_isSet;
}

bool OAIVirtualMachineScaleSetVMProfile::is_storage_profile_Valid() const{
    return m_storage_profile_isValid;
}

bool OAIVirtualMachineScaleSetVMProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_diagnostics_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_eviction_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualMachineScaleSetVMProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
