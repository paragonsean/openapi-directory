# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AutomaticRepairsPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, grace_period: str=None):
        """AutomaticRepairsPolicy - a model defined in OpenAPI

        :param enabled: The enabled of this AutomaticRepairsPolicy.
        :param grace_period: The grace_period of this AutomaticRepairsPolicy.
        """
        self.openapi_types = {
            'enabled': bool,
            'grace_period': str
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'grace_period': 'gracePeriod'
        }

        self._enabled = enabled
        self._grace_period = grace_period

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutomaticRepairsPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutomaticRepairsPolicy of this AutomaticRepairsPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this AutomaticRepairsPolicy.

        Specifies whether automatic repairs should be enabled on the virtual machine scale set. The default value is false.

        :return: The enabled of this AutomaticRepairsPolicy.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AutomaticRepairsPolicy.

        Specifies whether automatic repairs should be enabled on the virtual machine scale set. The default value is false.

        :param enabled: The enabled of this AutomaticRepairsPolicy.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def grace_period(self):
        """Gets the grace_period of this AutomaticRepairsPolicy.

        The amount of time for which automatic repairs are suspended due to a state change on VM. The grace time starts after the state change has completed. This helps avoid premature or accidental repairs. The time duration should be specified in ISO 8601 format. The minimum allowed grace period is 30 minutes (PT30M), which is also the default value.

        :return: The grace_period of this AutomaticRepairsPolicy.
        :rtype: str
        """
        return self._grace_period

    @grace_period.setter
    def grace_period(self, grace_period):
        """Sets the grace_period of this AutomaticRepairsPolicy.

        The amount of time for which automatic repairs are suspended due to a state change on VM. The grace time starts after the state change has completed. This helps avoid premature or accidental repairs. The time duration should be specified in ISO 8601 format. The minimum allowed grace period is 30 minutes (PT30M), which is also the default value.

        :param grace_period: The grace_period of this AutomaticRepairsPolicy.
        :type grace_period: str
        """

        self._grace_period = grace_period
