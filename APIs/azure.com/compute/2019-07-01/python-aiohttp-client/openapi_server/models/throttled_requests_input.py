# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ThrottledRequestsInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blob_container_sas_uri: str=None, from_time: datetime=None, group_by_operation_name: bool=None, group_by_resource_name: bool=None, group_by_throttle_policy: bool=None, to_time: datetime=None):
        """ThrottledRequestsInput - a model defined in OpenAPI

        :param blob_container_sas_uri: The blob_container_sas_uri of this ThrottledRequestsInput.
        :param from_time: The from_time of this ThrottledRequestsInput.
        :param group_by_operation_name: The group_by_operation_name of this ThrottledRequestsInput.
        :param group_by_resource_name: The group_by_resource_name of this ThrottledRequestsInput.
        :param group_by_throttle_policy: The group_by_throttle_policy of this ThrottledRequestsInput.
        :param to_time: The to_time of this ThrottledRequestsInput.
        """
        self.openapi_types = {
            'blob_container_sas_uri': str,
            'from_time': datetime,
            'group_by_operation_name': bool,
            'group_by_resource_name': bool,
            'group_by_throttle_policy': bool,
            'to_time': datetime
        }

        self.attribute_map = {
            'blob_container_sas_uri': 'blobContainerSasUri',
            'from_time': 'fromTime',
            'group_by_operation_name': 'groupByOperationName',
            'group_by_resource_name': 'groupByResourceName',
            'group_by_throttle_policy': 'groupByThrottlePolicy',
            'to_time': 'toTime'
        }

        self._blob_container_sas_uri = blob_container_sas_uri
        self._from_time = from_time
        self._group_by_operation_name = group_by_operation_name
        self._group_by_resource_name = group_by_resource_name
        self._group_by_throttle_policy = group_by_throttle_policy
        self._to_time = to_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ThrottledRequestsInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ThrottledRequestsInput of this ThrottledRequestsInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blob_container_sas_uri(self):
        """Gets the blob_container_sas_uri of this ThrottledRequestsInput.

        SAS Uri of the logging blob container to which LogAnalytics Api writes output logs to.

        :return: The blob_container_sas_uri of this ThrottledRequestsInput.
        :rtype: str
        """
        return self._blob_container_sas_uri

    @blob_container_sas_uri.setter
    def blob_container_sas_uri(self, blob_container_sas_uri):
        """Sets the blob_container_sas_uri of this ThrottledRequestsInput.

        SAS Uri of the logging blob container to which LogAnalytics Api writes output logs to.

        :param blob_container_sas_uri: The blob_container_sas_uri of this ThrottledRequestsInput.
        :type blob_container_sas_uri: str
        """
        if blob_container_sas_uri is None:
            raise ValueError("Invalid value for `blob_container_sas_uri`, must not be `None`")

        self._blob_container_sas_uri = blob_container_sas_uri

    @property
    def from_time(self):
        """Gets the from_time of this ThrottledRequestsInput.

        From time of the query

        :return: The from_time of this ThrottledRequestsInput.
        :rtype: datetime
        """
        return self._from_time

    @from_time.setter
    def from_time(self, from_time):
        """Sets the from_time of this ThrottledRequestsInput.

        From time of the query

        :param from_time: The from_time of this ThrottledRequestsInput.
        :type from_time: datetime
        """
        if from_time is None:
            raise ValueError("Invalid value for `from_time`, must not be `None`")

        self._from_time = from_time

    @property
    def group_by_operation_name(self):
        """Gets the group_by_operation_name of this ThrottledRequestsInput.

        Group query result by Operation Name.

        :return: The group_by_operation_name of this ThrottledRequestsInput.
        :rtype: bool
        """
        return self._group_by_operation_name

    @group_by_operation_name.setter
    def group_by_operation_name(self, group_by_operation_name):
        """Sets the group_by_operation_name of this ThrottledRequestsInput.

        Group query result by Operation Name.

        :param group_by_operation_name: The group_by_operation_name of this ThrottledRequestsInput.
        :type group_by_operation_name: bool
        """

        self._group_by_operation_name = group_by_operation_name

    @property
    def group_by_resource_name(self):
        """Gets the group_by_resource_name of this ThrottledRequestsInput.

        Group query result by Resource Name.

        :return: The group_by_resource_name of this ThrottledRequestsInput.
        :rtype: bool
        """
        return self._group_by_resource_name

    @group_by_resource_name.setter
    def group_by_resource_name(self, group_by_resource_name):
        """Sets the group_by_resource_name of this ThrottledRequestsInput.

        Group query result by Resource Name.

        :param group_by_resource_name: The group_by_resource_name of this ThrottledRequestsInput.
        :type group_by_resource_name: bool
        """

        self._group_by_resource_name = group_by_resource_name

    @property
    def group_by_throttle_policy(self):
        """Gets the group_by_throttle_policy of this ThrottledRequestsInput.

        Group query result by Throttle Policy applied.

        :return: The group_by_throttle_policy of this ThrottledRequestsInput.
        :rtype: bool
        """
        return self._group_by_throttle_policy

    @group_by_throttle_policy.setter
    def group_by_throttle_policy(self, group_by_throttle_policy):
        """Sets the group_by_throttle_policy of this ThrottledRequestsInput.

        Group query result by Throttle Policy applied.

        :param group_by_throttle_policy: The group_by_throttle_policy of this ThrottledRequestsInput.
        :type group_by_throttle_policy: bool
        """

        self._group_by_throttle_policy = group_by_throttle_policy

    @property
    def to_time(self):
        """Gets the to_time of this ThrottledRequestsInput.

        To time of the query

        :return: The to_time of this ThrottledRequestsInput.
        :rtype: datetime
        """
        return self._to_time

    @to_time.setter
    def to_time(self, to_time):
        """Sets the to_time of this ThrottledRequestsInput.

        To time of the query

        :param to_time: The to_time of this ThrottledRequestsInput.
        :type to_time: datetime
        """
        if to_time is None:
            raise ValueError("Invalid value for `to_time`, must not be `None`")

        self._to_time = to_time
