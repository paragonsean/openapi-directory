# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AutomaticOSUpgradeProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, automatic_os_upgrade_supported: bool=None):
        """AutomaticOSUpgradeProperties - a model defined in OpenAPI

        :param automatic_os_upgrade_supported: The automatic_os_upgrade_supported of this AutomaticOSUpgradeProperties.
        """
        self.openapi_types = {
            'automatic_os_upgrade_supported': bool
        }

        self.attribute_map = {
            'automatic_os_upgrade_supported': 'automaticOSUpgradeSupported'
        }

        self._automatic_os_upgrade_supported = automatic_os_upgrade_supported

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutomaticOSUpgradeProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutomaticOSUpgradeProperties of this AutomaticOSUpgradeProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def automatic_os_upgrade_supported(self):
        """Gets the automatic_os_upgrade_supported of this AutomaticOSUpgradeProperties.

        Specifies whether automatic OS upgrade is supported on the image.

        :return: The automatic_os_upgrade_supported of this AutomaticOSUpgradeProperties.
        :rtype: bool
        """
        return self._automatic_os_upgrade_supported

    @automatic_os_upgrade_supported.setter
    def automatic_os_upgrade_supported(self, automatic_os_upgrade_supported):
        """Sets the automatic_os_upgrade_supported of this AutomaticOSUpgradeProperties.

        Specifies whether automatic OS upgrade is supported on the image.

        :param automatic_os_upgrade_supported: The automatic_os_upgrade_supported of this AutomaticOSUpgradeProperties.
        :type automatic_os_upgrade_supported: bool
        """
        if automatic_os_upgrade_supported is None:
            raise ValueError("Invalid value for `automatic_os_upgrade_supported`, must not be `None`")

        self._automatic_os_upgrade_supported = automatic_os_upgrade_supported
