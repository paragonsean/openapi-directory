# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.instance_view_status import InstanceViewStatus
from openapi_server import util


class VirtualMachineExtensionInstanceView(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, statuses: List[InstanceViewStatus]=None, substatuses: List[InstanceViewStatus]=None, type: str=None, type_handler_version: str=None):
        """VirtualMachineExtensionInstanceView - a model defined in OpenAPI

        :param name: The name of this VirtualMachineExtensionInstanceView.
        :param statuses: The statuses of this VirtualMachineExtensionInstanceView.
        :param substatuses: The substatuses of this VirtualMachineExtensionInstanceView.
        :param type: The type of this VirtualMachineExtensionInstanceView.
        :param type_handler_version: The type_handler_version of this VirtualMachineExtensionInstanceView.
        """
        self.openapi_types = {
            'name': str,
            'statuses': List[InstanceViewStatus],
            'substatuses': List[InstanceViewStatus],
            'type': str,
            'type_handler_version': str
        }

        self.attribute_map = {
            'name': 'name',
            'statuses': 'statuses',
            'substatuses': 'substatuses',
            'type': 'type',
            'type_handler_version': 'typeHandlerVersion'
        }

        self._name = name
        self._statuses = statuses
        self._substatuses = substatuses
        self._type = type
        self._type_handler_version = type_handler_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualMachineExtensionInstanceView':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualMachineExtensionInstanceView of this VirtualMachineExtensionInstanceView.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this VirtualMachineExtensionInstanceView.

        The virtual machine extension name.

        :return: The name of this VirtualMachineExtensionInstanceView.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VirtualMachineExtensionInstanceView.

        The virtual machine extension name.

        :param name: The name of this VirtualMachineExtensionInstanceView.
        :type name: str
        """

        self._name = name

    @property
    def statuses(self):
        """Gets the statuses of this VirtualMachineExtensionInstanceView.

        The resource status information.

        :return: The statuses of this VirtualMachineExtensionInstanceView.
        :rtype: List[InstanceViewStatus]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this VirtualMachineExtensionInstanceView.

        The resource status information.

        :param statuses: The statuses of this VirtualMachineExtensionInstanceView.
        :type statuses: List[InstanceViewStatus]
        """

        self._statuses = statuses

    @property
    def substatuses(self):
        """Gets the substatuses of this VirtualMachineExtensionInstanceView.

        The resource status information.

        :return: The substatuses of this VirtualMachineExtensionInstanceView.
        :rtype: List[InstanceViewStatus]
        """
        return self._substatuses

    @substatuses.setter
    def substatuses(self, substatuses):
        """Sets the substatuses of this VirtualMachineExtensionInstanceView.

        The resource status information.

        :param substatuses: The substatuses of this VirtualMachineExtensionInstanceView.
        :type substatuses: List[InstanceViewStatus]
        """

        self._substatuses = substatuses

    @property
    def type(self):
        """Gets the type of this VirtualMachineExtensionInstanceView.

        Specifies the type of the extension; an example is \"CustomScriptExtension\".

        :return: The type of this VirtualMachineExtensionInstanceView.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VirtualMachineExtensionInstanceView.

        Specifies the type of the extension; an example is \"CustomScriptExtension\".

        :param type: The type of this VirtualMachineExtensionInstanceView.
        :type type: str
        """

        self._type = type

    @property
    def type_handler_version(self):
        """Gets the type_handler_version of this VirtualMachineExtensionInstanceView.

        Specifies the version of the script handler.

        :return: The type_handler_version of this VirtualMachineExtensionInstanceView.
        :rtype: str
        """
        return self._type_handler_version

    @type_handler_version.setter
    def type_handler_version(self, type_handler_version):
        """Sets the type_handler_version of this VirtualMachineExtensionInstanceView.

        Specifies the version of the script handler.

        :param type_handler_version: The type_handler_version of this VirtualMachineExtensionInstanceView.
        :type type_handler_version: str
        """

        self._type_handler_version = type_handler_version
