# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.disk_encryption_set_parameters import DiskEncryptionSetParameters
from openapi_server.models.storage_account_type import StorageAccountType
from openapi_server.models.sub_resource import SubResource
from openapi_server import util


class ImageDisk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blob_uri: str=None, caching: str=None, disk_encryption_set: DiskEncryptionSetParameters=None, disk_size_gb: int=None, managed_disk: SubResource=None, snapshot: SubResource=None, storage_account_type: StorageAccountType=None):
        """ImageDisk - a model defined in OpenAPI

        :param blob_uri: The blob_uri of this ImageDisk.
        :param caching: The caching of this ImageDisk.
        :param disk_encryption_set: The disk_encryption_set of this ImageDisk.
        :param disk_size_gb: The disk_size_gb of this ImageDisk.
        :param managed_disk: The managed_disk of this ImageDisk.
        :param snapshot: The snapshot of this ImageDisk.
        :param storage_account_type: The storage_account_type of this ImageDisk.
        """
        self.openapi_types = {
            'blob_uri': str,
            'caching': str,
            'disk_encryption_set': DiskEncryptionSetParameters,
            'disk_size_gb': int,
            'managed_disk': SubResource,
            'snapshot': SubResource,
            'storage_account_type': StorageAccountType
        }

        self.attribute_map = {
            'blob_uri': 'blobUri',
            'caching': 'caching',
            'disk_encryption_set': 'diskEncryptionSet',
            'disk_size_gb': 'diskSizeGB',
            'managed_disk': 'managedDisk',
            'snapshot': 'snapshot',
            'storage_account_type': 'storageAccountType'
        }

        self._blob_uri = blob_uri
        self._caching = caching
        self._disk_encryption_set = disk_encryption_set
        self._disk_size_gb = disk_size_gb
        self._managed_disk = managed_disk
        self._snapshot = snapshot
        self._storage_account_type = storage_account_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageDisk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageDisk of this ImageDisk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blob_uri(self):
        """Gets the blob_uri of this ImageDisk.

        The Virtual Hard Disk.

        :return: The blob_uri of this ImageDisk.
        :rtype: str
        """
        return self._blob_uri

    @blob_uri.setter
    def blob_uri(self, blob_uri):
        """Sets the blob_uri of this ImageDisk.

        The Virtual Hard Disk.

        :param blob_uri: The blob_uri of this ImageDisk.
        :type blob_uri: str
        """

        self._blob_uri = blob_uri

    @property
    def caching(self):
        """Gets the caching of this ImageDisk.

        Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**

        :return: The caching of this ImageDisk.
        :rtype: str
        """
        return self._caching

    @caching.setter
    def caching(self, caching):
        """Sets the caching of this ImageDisk.

        Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**

        :param caching: The caching of this ImageDisk.
        :type caching: str
        """
        allowed_values = ["None", "ReadOnly", "ReadWrite"]  # noqa: E501
        if caching not in allowed_values:
            raise ValueError(
                "Invalid value for `caching` ({0}), must be one of {1}"
                .format(caching, allowed_values)
            )

        self._caching = caching

    @property
    def disk_encryption_set(self):
        """Gets the disk_encryption_set of this ImageDisk.


        :return: The disk_encryption_set of this ImageDisk.
        :rtype: DiskEncryptionSetParameters
        """
        return self._disk_encryption_set

    @disk_encryption_set.setter
    def disk_encryption_set(self, disk_encryption_set):
        """Sets the disk_encryption_set of this ImageDisk.


        :param disk_encryption_set: The disk_encryption_set of this ImageDisk.
        :type disk_encryption_set: DiskEncryptionSetParameters
        """

        self._disk_encryption_set = disk_encryption_set

    @property
    def disk_size_gb(self):
        """Gets the disk_size_gb of this ImageDisk.

        Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB

        :return: The disk_size_gb of this ImageDisk.
        :rtype: int
        """
        return self._disk_size_gb

    @disk_size_gb.setter
    def disk_size_gb(self, disk_size_gb):
        """Sets the disk_size_gb of this ImageDisk.

        Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB

        :param disk_size_gb: The disk_size_gb of this ImageDisk.
        :type disk_size_gb: int
        """

        self._disk_size_gb = disk_size_gb

    @property
    def managed_disk(self):
        """Gets the managed_disk of this ImageDisk.


        :return: The managed_disk of this ImageDisk.
        :rtype: SubResource
        """
        return self._managed_disk

    @managed_disk.setter
    def managed_disk(self, managed_disk):
        """Sets the managed_disk of this ImageDisk.


        :param managed_disk: The managed_disk of this ImageDisk.
        :type managed_disk: SubResource
        """

        self._managed_disk = managed_disk

    @property
    def snapshot(self):
        """Gets the snapshot of this ImageDisk.


        :return: The snapshot of this ImageDisk.
        :rtype: SubResource
        """
        return self._snapshot

    @snapshot.setter
    def snapshot(self, snapshot):
        """Sets the snapshot of this ImageDisk.


        :param snapshot: The snapshot of this ImageDisk.
        :type snapshot: SubResource
        """

        self._snapshot = snapshot

    @property
    def storage_account_type(self):
        """Gets the storage_account_type of this ImageDisk.


        :return: The storage_account_type of this ImageDisk.
        :rtype: StorageAccountType
        """
        return self._storage_account_type

    @storage_account_type.setter
    def storage_account_type(self, storage_account_type):
        """Sets the storage_account_type of this ImageDisk.


        :param storage_account_type: The storage_account_type of this ImageDisk.
        :type storage_account_type: StorageAccountType
        """

        self._storage_account_type = storage_account_type
