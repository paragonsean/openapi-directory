# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScaleInPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rules: List[str]=None):
        """ScaleInPolicy - a model defined in OpenAPI

        :param rules: The rules of this ScaleInPolicy.
        """
        self.openapi_types = {
            'rules': List[str]
        }

        self.attribute_map = {
            'rules': 'rules'
        }

        self._rules = rules

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScaleInPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScaleInPolicy of this ScaleInPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rules(self):
        """Gets the rules of this ScaleInPolicy.

        The rules to be followed when scaling-in a virtual machine scale set. <br><br> Possible values are: <br><br> **Default** When a virtual machine scale set is scaled in, the scale set will first be balanced across zones if it is a zonal scale set. Then, it will be balanced across Fault Domains as far as possible. Within each Fault Domain, the virtual machines chosen for removal will be the newest ones that are not protected from scale-in. <br><br> **OldestVM** When a virtual machine scale set is being scaled-in, the oldest virtual machines that are not protected from scale-in will be chosen for removal. For zonal virtual machine scale sets, the scale set will first be balanced across zones. Within each zone, the oldest virtual machines that are not protected will be chosen for removal. <br><br> **NewestVM** When a virtual machine scale set is being scaled-in, the newest virtual machines that are not protected from scale-in will be chosen for removal. For zonal virtual machine scale sets, the scale set will first be balanced across zones. Within each zone, the newest virtual machines that are not protected will be chosen for removal. <br><br>

        :return: The rules of this ScaleInPolicy.
        :rtype: List[str]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this ScaleInPolicy.

        The rules to be followed when scaling-in a virtual machine scale set. <br><br> Possible values are: <br><br> **Default** When a virtual machine scale set is scaled in, the scale set will first be balanced across zones if it is a zonal scale set. Then, it will be balanced across Fault Domains as far as possible. Within each Fault Domain, the virtual machines chosen for removal will be the newest ones that are not protected from scale-in. <br><br> **OldestVM** When a virtual machine scale set is being scaled-in, the oldest virtual machines that are not protected from scale-in will be chosen for removal. For zonal virtual machine scale sets, the scale set will first be balanced across zones. Within each zone, the oldest virtual machines that are not protected will be chosen for removal. <br><br> **NewestVM** When a virtual machine scale set is being scaled-in, the newest virtual machines that are not protected from scale-in will be chosen for removal. For zonal virtual machine scale sets, the scale set will first be balanced across zones. Within each zone, the newest virtual machines that are not protected will be chosen for removal. <br><br>

        :param rules: The rules of this ScaleInPolicy.
        :type rules: List[str]
        """
        allowed_values = ["Default", "OldestVM", "NewestVM"]  # noqa: E501
        if not set(rules).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `rules` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(rules) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._rules = rules
