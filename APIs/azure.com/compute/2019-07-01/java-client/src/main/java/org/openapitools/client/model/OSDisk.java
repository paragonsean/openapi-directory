/*
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Caching;
import org.openapitools.client.model.CreateOption;
import org.openapitools.client.model.DiffDiskSettings;
import org.openapitools.client.model.DiskEncryptionSettings;
import org.openapitools.client.model.ManagedDiskParameters;
import org.openapitools.client.model.VirtualHardDisk;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies information about the operating system disk used by the virtual machine. &lt;br&gt;&lt;br&gt; For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc&#x3D;%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:49:39.629468-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OSDisk {
  public static final String SERIALIZED_NAME_CACHING = "caching";
  @SerializedName(SERIALIZED_NAME_CACHING)
  private Caching caching;

  public static final String SERIALIZED_NAME_CREATE_OPTION = "createOption";
  @SerializedName(SERIALIZED_NAME_CREATE_OPTION)
  private CreateOption createOption;

  public static final String SERIALIZED_NAME_DIFF_DISK_SETTINGS = "diffDiskSettings";
  @SerializedName(SERIALIZED_NAME_DIFF_DISK_SETTINGS)
  private DiffDiskSettings diffDiskSettings;

  public static final String SERIALIZED_NAME_DISK_SIZE_G_B = "diskSizeGB";
  @SerializedName(SERIALIZED_NAME_DISK_SIZE_G_B)
  private Integer diskSizeGB;

  public static final String SERIALIZED_NAME_ENCRYPTION_SETTINGS = "encryptionSettings";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_SETTINGS)
  private DiskEncryptionSettings encryptionSettings;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private VirtualHardDisk image;

  public static final String SERIALIZED_NAME_MANAGED_DISK = "managedDisk";
  @SerializedName(SERIALIZED_NAME_MANAGED_DISK)
  private ManagedDiskParameters managedDisk;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **Windows** &lt;br&gt;&lt;br&gt; **Linux**
   */
  @JsonAdapter(OsTypeEnum.Adapter.class)
  public enum OsTypeEnum {
    WINDOWS("Windows"),
    
    LINUX("Linux");

    private String value;

    OsTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OsTypeEnum fromValue(String value) {
      for (OsTypeEnum b : OsTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OsTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OsTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OsTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OsTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OsTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OS_TYPE = "osType";
  @SerializedName(SERIALIZED_NAME_OS_TYPE)
  private OsTypeEnum osType;

  public static final String SERIALIZED_NAME_VHD = "vhd";
  @SerializedName(SERIALIZED_NAME_VHD)
  private VirtualHardDisk vhd;

  public static final String SERIALIZED_NAME_WRITE_ACCELERATOR_ENABLED = "writeAcceleratorEnabled";
  @SerializedName(SERIALIZED_NAME_WRITE_ACCELERATOR_ENABLED)
  private Boolean writeAcceleratorEnabled;

  public OSDisk() {
  }

  public OSDisk caching(Caching caching) {
    this.caching = caching;
    return this;
  }

  /**
   * Get caching
   * @return caching
   */
  @javax.annotation.Nullable
  public Caching getCaching() {
    return caching;
  }

  public void setCaching(Caching caching) {
    this.caching = caching;
  }


  public OSDisk createOption(CreateOption createOption) {
    this.createOption = createOption;
    return this;
  }

  /**
   * Get createOption
   * @return createOption
   */
  @javax.annotation.Nonnull
  public CreateOption getCreateOption() {
    return createOption;
  }

  public void setCreateOption(CreateOption createOption) {
    this.createOption = createOption;
  }


  public OSDisk diffDiskSettings(DiffDiskSettings diffDiskSettings) {
    this.diffDiskSettings = diffDiskSettings;
    return this;
  }

  /**
   * Get diffDiskSettings
   * @return diffDiskSettings
   */
  @javax.annotation.Nullable
  public DiffDiskSettings getDiffDiskSettings() {
    return diffDiskSettings;
  }

  public void setDiffDiskSettings(DiffDiskSettings diffDiskSettings) {
    this.diffDiskSettings = diffDiskSettings;
  }


  public OSDisk diskSizeGB(Integer diskSizeGB) {
    this.diskSizeGB = diskSizeGB;
    return this;
  }

  /**
   * Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. &lt;br&gt;&lt;br&gt; This value cannot be larger than 1023 GB
   * @return diskSizeGB
   */
  @javax.annotation.Nullable
  public Integer getDiskSizeGB() {
    return diskSizeGB;
  }

  public void setDiskSizeGB(Integer diskSizeGB) {
    this.diskSizeGB = diskSizeGB;
  }


  public OSDisk encryptionSettings(DiskEncryptionSettings encryptionSettings) {
    this.encryptionSettings = encryptionSettings;
    return this;
  }

  /**
   * Get encryptionSettings
   * @return encryptionSettings
   */
  @javax.annotation.Nullable
  public DiskEncryptionSettings getEncryptionSettings() {
    return encryptionSettings;
  }

  public void setEncryptionSettings(DiskEncryptionSettings encryptionSettings) {
    this.encryptionSettings = encryptionSettings;
  }


  public OSDisk image(VirtualHardDisk image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public VirtualHardDisk getImage() {
    return image;
  }

  public void setImage(VirtualHardDisk image) {
    this.image = image;
  }


  public OSDisk managedDisk(ManagedDiskParameters managedDisk) {
    this.managedDisk = managedDisk;
    return this;
  }

  /**
   * Get managedDisk
   * @return managedDisk
   */
  @javax.annotation.Nullable
  public ManagedDiskParameters getManagedDisk() {
    return managedDisk;
  }

  public void setManagedDisk(ManagedDiskParameters managedDisk) {
    this.managedDisk = managedDisk;
  }


  public OSDisk name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The disk name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public OSDisk osType(OsTypeEnum osType) {
    this.osType = osType;
    return this;
  }

  /**
   * This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **Windows** &lt;br&gt;&lt;br&gt; **Linux**
   * @return osType
   */
  @javax.annotation.Nullable
  public OsTypeEnum getOsType() {
    return osType;
  }

  public void setOsType(OsTypeEnum osType) {
    this.osType = osType;
  }


  public OSDisk vhd(VirtualHardDisk vhd) {
    this.vhd = vhd;
    return this;
  }

  /**
   * Get vhd
   * @return vhd
   */
  @javax.annotation.Nullable
  public VirtualHardDisk getVhd() {
    return vhd;
  }

  public void setVhd(VirtualHardDisk vhd) {
    this.vhd = vhd;
  }


  public OSDisk writeAcceleratorEnabled(Boolean writeAcceleratorEnabled) {
    this.writeAcceleratorEnabled = writeAcceleratorEnabled;
    return this;
  }

  /**
   * Specifies whether writeAccelerator should be enabled or disabled on the disk.
   * @return writeAcceleratorEnabled
   */
  @javax.annotation.Nullable
  public Boolean getWriteAcceleratorEnabled() {
    return writeAcceleratorEnabled;
  }

  public void setWriteAcceleratorEnabled(Boolean writeAcceleratorEnabled) {
    this.writeAcceleratorEnabled = writeAcceleratorEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OSDisk osDisk = (OSDisk) o;
    return Objects.equals(this.caching, osDisk.caching) &&
        Objects.equals(this.createOption, osDisk.createOption) &&
        Objects.equals(this.diffDiskSettings, osDisk.diffDiskSettings) &&
        Objects.equals(this.diskSizeGB, osDisk.diskSizeGB) &&
        Objects.equals(this.encryptionSettings, osDisk.encryptionSettings) &&
        Objects.equals(this.image, osDisk.image) &&
        Objects.equals(this.managedDisk, osDisk.managedDisk) &&
        Objects.equals(this.name, osDisk.name) &&
        Objects.equals(this.osType, osDisk.osType) &&
        Objects.equals(this.vhd, osDisk.vhd) &&
        Objects.equals(this.writeAcceleratorEnabled, osDisk.writeAcceleratorEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caching, createOption, diffDiskSettings, diskSizeGB, encryptionSettings, image, managedDisk, name, osType, vhd, writeAcceleratorEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OSDisk {\n");
    sb.append("    caching: ").append(toIndentedString(caching)).append("\n");
    sb.append("    createOption: ").append(toIndentedString(createOption)).append("\n");
    sb.append("    diffDiskSettings: ").append(toIndentedString(diffDiskSettings)).append("\n");
    sb.append("    diskSizeGB: ").append(toIndentedString(diskSizeGB)).append("\n");
    sb.append("    encryptionSettings: ").append(toIndentedString(encryptionSettings)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    managedDisk: ").append(toIndentedString(managedDisk)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("    vhd: ").append(toIndentedString(vhd)).append("\n");
    sb.append("    writeAcceleratorEnabled: ").append(toIndentedString(writeAcceleratorEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("caching");
    openapiFields.add("createOption");
    openapiFields.add("diffDiskSettings");
    openapiFields.add("diskSizeGB");
    openapiFields.add("encryptionSettings");
    openapiFields.add("image");
    openapiFields.add("managedDisk");
    openapiFields.add("name");
    openapiFields.add("osType");
    openapiFields.add("vhd");
    openapiFields.add("writeAcceleratorEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("createOption");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OSDisk
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OSDisk.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OSDisk is not found in the empty JSON string", OSDisk.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OSDisk.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OSDisk` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OSDisk.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `caching`
      if (jsonObj.get("caching") != null && !jsonObj.get("caching").isJsonNull()) {
        Caching.validateJsonElement(jsonObj.get("caching"));
      }
      // validate the required field `createOption`
      CreateOption.validateJsonElement(jsonObj.get("createOption"));
      // validate the optional field `diffDiskSettings`
      if (jsonObj.get("diffDiskSettings") != null && !jsonObj.get("diffDiskSettings").isJsonNull()) {
        DiffDiskSettings.validateJsonElement(jsonObj.get("diffDiskSettings"));
      }
      // validate the optional field `encryptionSettings`
      if (jsonObj.get("encryptionSettings") != null && !jsonObj.get("encryptionSettings").isJsonNull()) {
        DiskEncryptionSettings.validateJsonElement(jsonObj.get("encryptionSettings"));
      }
      // validate the optional field `image`
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        VirtualHardDisk.validateJsonElement(jsonObj.get("image"));
      }
      // validate the optional field `managedDisk`
      if (jsonObj.get("managedDisk") != null && !jsonObj.get("managedDisk").isJsonNull()) {
        ManagedDiskParameters.validateJsonElement(jsonObj.get("managedDisk"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("osType") != null && !jsonObj.get("osType").isJsonNull()) && !jsonObj.get("osType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osType").toString()));
      }
      // validate the optional field `osType`
      if (jsonObj.get("osType") != null && !jsonObj.get("osType").isJsonNull()) {
        OsTypeEnum.validateJsonElement(jsonObj.get("osType"));
      }
      // validate the optional field `vhd`
      if (jsonObj.get("vhd") != null && !jsonObj.get("vhd").isJsonNull()) {
        VirtualHardDisk.validateJsonElement(jsonObj.get("vhd"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OSDisk.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OSDisk' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OSDisk> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OSDisk.class));

       return (TypeAdapter<T>) new TypeAdapter<OSDisk>() {
           @Override
           public void write(JsonWriter out, OSDisk value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OSDisk read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OSDisk given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OSDisk
   * @throws IOException if the JSON string is invalid with respect to OSDisk
   */
  public static OSDisk fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OSDisk.class);
  }

  /**
   * Convert an instance of OSDisk to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

