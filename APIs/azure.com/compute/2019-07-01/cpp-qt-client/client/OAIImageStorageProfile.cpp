/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageStorageProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageStorageProfile::OAIImageStorageProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageStorageProfile::OAIImageStorageProfile() {
    this->initializeModel();
}

OAIImageStorageProfile::~OAIImageStorageProfile() {}

void OAIImageStorageProfile::initializeModel() {

    m_data_disks_isSet = false;
    m_data_disks_isValid = false;

    m_os_disk_isSet = false;
    m_os_disk_isValid = false;

    m_zone_resilient_isSet = false;
    m_zone_resilient_isValid = false;
}

void OAIImageStorageProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageStorageProfile::fromJsonObject(QJsonObject json) {

    m_data_disks_isValid = ::OpenAPI::fromJsonValue(m_data_disks, json[QString("dataDisks")]);
    m_data_disks_isSet = !json[QString("dataDisks")].isNull() && m_data_disks_isValid;

    m_os_disk_isValid = ::OpenAPI::fromJsonValue(m_os_disk, json[QString("osDisk")]);
    m_os_disk_isSet = !json[QString("osDisk")].isNull() && m_os_disk_isValid;

    m_zone_resilient_isValid = ::OpenAPI::fromJsonValue(m_zone_resilient, json[QString("zoneResilient")]);
    m_zone_resilient_isSet = !json[QString("zoneResilient")].isNull() && m_zone_resilient_isValid;
}

QString OAIImageStorageProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageStorageProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_data_disks.size() > 0) {
        obj.insert(QString("dataDisks"), ::OpenAPI::toJsonValue(m_data_disks));
    }
    if (m_os_disk.isSet()) {
        obj.insert(QString("osDisk"), ::OpenAPI::toJsonValue(m_os_disk));
    }
    if (m_zone_resilient_isSet) {
        obj.insert(QString("zoneResilient"), ::OpenAPI::toJsonValue(m_zone_resilient));
    }
    return obj;
}

QList<OAIImageDataDisk> OAIImageStorageProfile::getDataDisks() const {
    return m_data_disks;
}
void OAIImageStorageProfile::setDataDisks(const QList<OAIImageDataDisk> &data_disks) {
    m_data_disks = data_disks;
    m_data_disks_isSet = true;
}

bool OAIImageStorageProfile::is_data_disks_Set() const{
    return m_data_disks_isSet;
}

bool OAIImageStorageProfile::is_data_disks_Valid() const{
    return m_data_disks_isValid;
}

OAIImageOSDisk OAIImageStorageProfile::getOsDisk() const {
    return m_os_disk;
}
void OAIImageStorageProfile::setOsDisk(const OAIImageOSDisk &os_disk) {
    m_os_disk = os_disk;
    m_os_disk_isSet = true;
}

bool OAIImageStorageProfile::is_os_disk_Set() const{
    return m_os_disk_isSet;
}

bool OAIImageStorageProfile::is_os_disk_Valid() const{
    return m_os_disk_isValid;
}

bool OAIImageStorageProfile::isZoneResilient() const {
    return m_zone_resilient;
}
void OAIImageStorageProfile::setZoneResilient(const bool &zone_resilient) {
    m_zone_resilient = zone_resilient;
    m_zone_resilient_isSet = true;
}

bool OAIImageStorageProfile::is_zone_resilient_Set() const{
    return m_zone_resilient_isSet;
}

bool OAIImageStorageProfile::is_zone_resilient_Valid() const{
    return m_zone_resilient_isValid;
}

bool OAIImageStorageProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_disks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_disk.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_resilient_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageStorageProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
