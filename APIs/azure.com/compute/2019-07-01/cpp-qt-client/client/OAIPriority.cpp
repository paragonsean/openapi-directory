/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPriority.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPriority::OAIPriority(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPriority::OAIPriority() {
    this->initializeModel();
}

OAIPriority::~OAIPriority() {}

void OAIPriority::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPriority::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPriority::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Regular", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPriority::REGULAR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Low", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPriority::LOW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Spot", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPriority::SPOT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPriority::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPriority::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPriority::REGULAR:
            val = "Regular";
            break;
        case eOAIPriority::LOW:
            val = "Low";
            break;
        case eOAIPriority::SPOT:
            val = "Spot";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPriority::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPriority::eOAIPriority OAIPriority::getValue() const {
    return m_value;
}

void OAIPriority::setValue(const OAIPriority::eOAIPriority& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPriority::isSet() const {
    
    return m_value_isSet;
}

bool OAIPriority::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
