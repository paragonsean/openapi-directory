/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDedicatedHostInstanceView.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDedicatedHostInstanceView::OAIDedicatedHostInstanceView(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDedicatedHostInstanceView::OAIDedicatedHostInstanceView() {
    this->initializeModel();
}

OAIDedicatedHostInstanceView::~OAIDedicatedHostInstanceView() {}

void OAIDedicatedHostInstanceView::initializeModel() {

    m_asset_id_isSet = false;
    m_asset_id_isValid = false;

    m_available_capacity_isSet = false;
    m_available_capacity_isValid = false;

    m_statuses_isSet = false;
    m_statuses_isValid = false;
}

void OAIDedicatedHostInstanceView::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDedicatedHostInstanceView::fromJsonObject(QJsonObject json) {

    m_asset_id_isValid = ::OpenAPI::fromJsonValue(m_asset_id, json[QString("assetId")]);
    m_asset_id_isSet = !json[QString("assetId")].isNull() && m_asset_id_isValid;

    m_available_capacity_isValid = ::OpenAPI::fromJsonValue(m_available_capacity, json[QString("availableCapacity")]);
    m_available_capacity_isSet = !json[QString("availableCapacity")].isNull() && m_available_capacity_isValid;

    m_statuses_isValid = ::OpenAPI::fromJsonValue(m_statuses, json[QString("statuses")]);
    m_statuses_isSet = !json[QString("statuses")].isNull() && m_statuses_isValid;
}

QString OAIDedicatedHostInstanceView::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDedicatedHostInstanceView::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_id_isSet) {
        obj.insert(QString("assetId"), ::OpenAPI::toJsonValue(m_asset_id));
    }
    if (m_available_capacity.isSet()) {
        obj.insert(QString("availableCapacity"), ::OpenAPI::toJsonValue(m_available_capacity));
    }
    if (m_statuses.size() > 0) {
        obj.insert(QString("statuses"), ::OpenAPI::toJsonValue(m_statuses));
    }
    return obj;
}

QString OAIDedicatedHostInstanceView::getAssetId() const {
    return m_asset_id;
}
void OAIDedicatedHostInstanceView::setAssetId(const QString &asset_id) {
    m_asset_id = asset_id;
    m_asset_id_isSet = true;
}

bool OAIDedicatedHostInstanceView::is_asset_id_Set() const{
    return m_asset_id_isSet;
}

bool OAIDedicatedHostInstanceView::is_asset_id_Valid() const{
    return m_asset_id_isValid;
}

OAIDedicatedHostAvailableCapacity OAIDedicatedHostInstanceView::getAvailableCapacity() const {
    return m_available_capacity;
}
void OAIDedicatedHostInstanceView::setAvailableCapacity(const OAIDedicatedHostAvailableCapacity &available_capacity) {
    m_available_capacity = available_capacity;
    m_available_capacity_isSet = true;
}

bool OAIDedicatedHostInstanceView::is_available_capacity_Set() const{
    return m_available_capacity_isSet;
}

bool OAIDedicatedHostInstanceView::is_available_capacity_Valid() const{
    return m_available_capacity_isValid;
}

QList<OAIInstanceViewStatus> OAIDedicatedHostInstanceView::getStatuses() const {
    return m_statuses;
}
void OAIDedicatedHostInstanceView::setStatuses(const QList<OAIInstanceViewStatus> &statuses) {
    m_statuses = statuses;
    m_statuses_isSet = true;
}

bool OAIDedicatedHostInstanceView::is_statuses_Set() const{
    return m_statuses_isSet;
}

bool OAIDedicatedHostInstanceView::is_statuses_Valid() const{
    return m_statuses_isValid;
}

bool OAIDedicatedHostInstanceView::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_capacity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_statuses.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDedicatedHostInstanceView::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
