/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpgradeOperationHistoricalStatusInfoProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpgradeOperationHistoricalStatusInfoProperties::OAIUpgradeOperationHistoricalStatusInfoProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpgradeOperationHistoricalStatusInfoProperties::OAIUpgradeOperationHistoricalStatusInfoProperties() {
    this->initializeModel();
}

OAIUpgradeOperationHistoricalStatusInfoProperties::~OAIUpgradeOperationHistoricalStatusInfoProperties() {}

void OAIUpgradeOperationHistoricalStatusInfoProperties::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;

    m_progress_isSet = false;
    m_progress_isValid = false;

    m_rollback_info_isSet = false;
    m_rollback_info_isValid = false;

    m_running_status_isSet = false;
    m_running_status_isValid = false;

    m_started_by_isSet = false;
    m_started_by_isValid = false;

    m_target_image_reference_isSet = false;
    m_target_image_reference_isValid = false;
}

void OAIUpgradeOperationHistoricalStatusInfoProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpgradeOperationHistoricalStatusInfoProperties::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_progress_isValid = ::OpenAPI::fromJsonValue(m_progress, json[QString("progress")]);
    m_progress_isSet = !json[QString("progress")].isNull() && m_progress_isValid;

    m_rollback_info_isValid = ::OpenAPI::fromJsonValue(m_rollback_info, json[QString("rollbackInfo")]);
    m_rollback_info_isSet = !json[QString("rollbackInfo")].isNull() && m_rollback_info_isValid;

    m_running_status_isValid = ::OpenAPI::fromJsonValue(m_running_status, json[QString("runningStatus")]);
    m_running_status_isSet = !json[QString("runningStatus")].isNull() && m_running_status_isValid;

    m_started_by_isValid = ::OpenAPI::fromJsonValue(m_started_by, json[QString("startedBy")]);
    m_started_by_isSet = !json[QString("startedBy")].isNull() && m_started_by_isValid;

    m_target_image_reference_isValid = ::OpenAPI::fromJsonValue(m_target_image_reference, json[QString("targetImageReference")]);
    m_target_image_reference_isSet = !json[QString("targetImageReference")].isNull() && m_target_image_reference_isValid;
}

QString OAIUpgradeOperationHistoricalStatusInfoProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpgradeOperationHistoricalStatusInfoProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_progress.isSet()) {
        obj.insert(QString("progress"), ::OpenAPI::toJsonValue(m_progress));
    }
    if (m_rollback_info.isSet()) {
        obj.insert(QString("rollbackInfo"), ::OpenAPI::toJsonValue(m_rollback_info));
    }
    if (m_running_status.isSet()) {
        obj.insert(QString("runningStatus"), ::OpenAPI::toJsonValue(m_running_status));
    }
    if (m_started_by_isSet) {
        obj.insert(QString("startedBy"), ::OpenAPI::toJsonValue(m_started_by));
    }
    if (m_target_image_reference.isSet()) {
        obj.insert(QString("targetImageReference"), ::OpenAPI::toJsonValue(m_target_image_reference));
    }
    return obj;
}

OAIApiError OAIUpgradeOperationHistoricalStatusInfoProperties::getError() const {
    return m_error;
}
void OAIUpgradeOperationHistoricalStatusInfoProperties::setError(const OAIApiError &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIUpgradeOperationHistoricalStatusInfoProperties::is_error_Set() const{
    return m_error_isSet;
}

bool OAIUpgradeOperationHistoricalStatusInfoProperties::is_error_Valid() const{
    return m_error_isValid;
}

OAIRollingUpgradeProgressInfo OAIUpgradeOperationHistoricalStatusInfoProperties::getProgress() const {
    return m_progress;
}
void OAIUpgradeOperationHistoricalStatusInfoProperties::setProgress(const OAIRollingUpgradeProgressInfo &progress) {
    m_progress = progress;
    m_progress_isSet = true;
}

bool OAIUpgradeOperationHistoricalStatusInfoProperties::is_progress_Set() const{
    return m_progress_isSet;
}

bool OAIUpgradeOperationHistoricalStatusInfoProperties::is_progress_Valid() const{
    return m_progress_isValid;
}

OAIRollbackStatusInfo OAIUpgradeOperationHistoricalStatusInfoProperties::getRollbackInfo() const {
    return m_rollback_info;
}
void OAIUpgradeOperationHistoricalStatusInfoProperties::setRollbackInfo(const OAIRollbackStatusInfo &rollback_info) {
    m_rollback_info = rollback_info;
    m_rollback_info_isSet = true;
}

bool OAIUpgradeOperationHistoricalStatusInfoProperties::is_rollback_info_Set() const{
    return m_rollback_info_isSet;
}

bool OAIUpgradeOperationHistoricalStatusInfoProperties::is_rollback_info_Valid() const{
    return m_rollback_info_isValid;
}

OAIUpgradeOperationHistoryStatus OAIUpgradeOperationHistoricalStatusInfoProperties::getRunningStatus() const {
    return m_running_status;
}
void OAIUpgradeOperationHistoricalStatusInfoProperties::setRunningStatus(const OAIUpgradeOperationHistoryStatus &running_status) {
    m_running_status = running_status;
    m_running_status_isSet = true;
}

bool OAIUpgradeOperationHistoricalStatusInfoProperties::is_running_status_Set() const{
    return m_running_status_isSet;
}

bool OAIUpgradeOperationHistoricalStatusInfoProperties::is_running_status_Valid() const{
    return m_running_status_isValid;
}

QString OAIUpgradeOperationHistoricalStatusInfoProperties::getStartedBy() const {
    return m_started_by;
}
void OAIUpgradeOperationHistoricalStatusInfoProperties::setStartedBy(const QString &started_by) {
    m_started_by = started_by;
    m_started_by_isSet = true;
}

bool OAIUpgradeOperationHistoricalStatusInfoProperties::is_started_by_Set() const{
    return m_started_by_isSet;
}

bool OAIUpgradeOperationHistoricalStatusInfoProperties::is_started_by_Valid() const{
    return m_started_by_isValid;
}

OAIImageReference OAIUpgradeOperationHistoricalStatusInfoProperties::getTargetImageReference() const {
    return m_target_image_reference;
}
void OAIUpgradeOperationHistoricalStatusInfoProperties::setTargetImageReference(const OAIImageReference &target_image_reference) {
    m_target_image_reference = target_image_reference;
    m_target_image_reference_isSet = true;
}

bool OAIUpgradeOperationHistoricalStatusInfoProperties::is_target_image_reference_Set() const{
    return m_target_image_reference_isSet;
}

bool OAIUpgradeOperationHistoricalStatusInfoProperties::is_target_image_reference_Valid() const{
    return m_target_image_reference_isValid;
}

bool OAIUpgradeOperationHistoricalStatusInfoProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollback_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_running_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_image_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpgradeOperationHistoricalStatusInfoProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
