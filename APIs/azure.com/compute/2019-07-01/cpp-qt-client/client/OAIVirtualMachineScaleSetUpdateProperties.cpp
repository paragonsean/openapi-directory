/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualMachineScaleSetUpdateProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualMachineScaleSetUpdateProperties::OAIVirtualMachineScaleSetUpdateProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualMachineScaleSetUpdateProperties::OAIVirtualMachineScaleSetUpdateProperties() {
    this->initializeModel();
}

OAIVirtualMachineScaleSetUpdateProperties::~OAIVirtualMachineScaleSetUpdateProperties() {}

void OAIVirtualMachineScaleSetUpdateProperties::initializeModel() {

    m_additional_capabilities_isSet = false;
    m_additional_capabilities_isValid = false;

    m_automatic_repairs_policy_isSet = false;
    m_automatic_repairs_policy_isValid = false;

    m_do_not_run_extensions_on_overprovisioned_vms_isSet = false;
    m_do_not_run_extensions_on_overprovisioned_vms_isValid = false;

    m_overprovision_isSet = false;
    m_overprovision_isValid = false;

    m_proximity_placement_group_isSet = false;
    m_proximity_placement_group_isValid = false;

    m_scale_in_policy_isSet = false;
    m_scale_in_policy_isValid = false;

    m_single_placement_group_isSet = false;
    m_single_placement_group_isValid = false;

    m_upgrade_policy_isSet = false;
    m_upgrade_policy_isValid = false;

    m_virtual_machine_profile_isSet = false;
    m_virtual_machine_profile_isValid = false;
}

void OAIVirtualMachineScaleSetUpdateProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualMachineScaleSetUpdateProperties::fromJsonObject(QJsonObject json) {

    m_additional_capabilities_isValid = ::OpenAPI::fromJsonValue(m_additional_capabilities, json[QString("additionalCapabilities")]);
    m_additional_capabilities_isSet = !json[QString("additionalCapabilities")].isNull() && m_additional_capabilities_isValid;

    m_automatic_repairs_policy_isValid = ::OpenAPI::fromJsonValue(m_automatic_repairs_policy, json[QString("automaticRepairsPolicy")]);
    m_automatic_repairs_policy_isSet = !json[QString("automaticRepairsPolicy")].isNull() && m_automatic_repairs_policy_isValid;

    m_do_not_run_extensions_on_overprovisioned_vms_isValid = ::OpenAPI::fromJsonValue(m_do_not_run_extensions_on_overprovisioned_vms, json[QString("doNotRunExtensionsOnOverprovisionedVMs")]);
    m_do_not_run_extensions_on_overprovisioned_vms_isSet = !json[QString("doNotRunExtensionsOnOverprovisionedVMs")].isNull() && m_do_not_run_extensions_on_overprovisioned_vms_isValid;

    m_overprovision_isValid = ::OpenAPI::fromJsonValue(m_overprovision, json[QString("overprovision")]);
    m_overprovision_isSet = !json[QString("overprovision")].isNull() && m_overprovision_isValid;

    m_proximity_placement_group_isValid = ::OpenAPI::fromJsonValue(m_proximity_placement_group, json[QString("proximityPlacementGroup")]);
    m_proximity_placement_group_isSet = !json[QString("proximityPlacementGroup")].isNull() && m_proximity_placement_group_isValid;

    m_scale_in_policy_isValid = ::OpenAPI::fromJsonValue(m_scale_in_policy, json[QString("scaleInPolicy")]);
    m_scale_in_policy_isSet = !json[QString("scaleInPolicy")].isNull() && m_scale_in_policy_isValid;

    m_single_placement_group_isValid = ::OpenAPI::fromJsonValue(m_single_placement_group, json[QString("singlePlacementGroup")]);
    m_single_placement_group_isSet = !json[QString("singlePlacementGroup")].isNull() && m_single_placement_group_isValid;

    m_upgrade_policy_isValid = ::OpenAPI::fromJsonValue(m_upgrade_policy, json[QString("upgradePolicy")]);
    m_upgrade_policy_isSet = !json[QString("upgradePolicy")].isNull() && m_upgrade_policy_isValid;

    m_virtual_machine_profile_isValid = ::OpenAPI::fromJsonValue(m_virtual_machine_profile, json[QString("virtualMachineProfile")]);
    m_virtual_machine_profile_isSet = !json[QString("virtualMachineProfile")].isNull() && m_virtual_machine_profile_isValid;
}

QString OAIVirtualMachineScaleSetUpdateProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualMachineScaleSetUpdateProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_capabilities.isSet()) {
        obj.insert(QString("additionalCapabilities"), ::OpenAPI::toJsonValue(m_additional_capabilities));
    }
    if (m_automatic_repairs_policy.isSet()) {
        obj.insert(QString("automaticRepairsPolicy"), ::OpenAPI::toJsonValue(m_automatic_repairs_policy));
    }
    if (m_do_not_run_extensions_on_overprovisioned_vms_isSet) {
        obj.insert(QString("doNotRunExtensionsOnOverprovisionedVMs"), ::OpenAPI::toJsonValue(m_do_not_run_extensions_on_overprovisioned_vms));
    }
    if (m_overprovision_isSet) {
        obj.insert(QString("overprovision"), ::OpenAPI::toJsonValue(m_overprovision));
    }
    if (m_proximity_placement_group.isSet()) {
        obj.insert(QString("proximityPlacementGroup"), ::OpenAPI::toJsonValue(m_proximity_placement_group));
    }
    if (m_scale_in_policy.isSet()) {
        obj.insert(QString("scaleInPolicy"), ::OpenAPI::toJsonValue(m_scale_in_policy));
    }
    if (m_single_placement_group_isSet) {
        obj.insert(QString("singlePlacementGroup"), ::OpenAPI::toJsonValue(m_single_placement_group));
    }
    if (m_upgrade_policy.isSet()) {
        obj.insert(QString("upgradePolicy"), ::OpenAPI::toJsonValue(m_upgrade_policy));
    }
    if (m_virtual_machine_profile.isSet()) {
        obj.insert(QString("virtualMachineProfile"), ::OpenAPI::toJsonValue(m_virtual_machine_profile));
    }
    return obj;
}

OAIAdditionalCapabilities OAIVirtualMachineScaleSetUpdateProperties::getAdditionalCapabilities() const {
    return m_additional_capabilities;
}
void OAIVirtualMachineScaleSetUpdateProperties::setAdditionalCapabilities(const OAIAdditionalCapabilities &additional_capabilities) {
    m_additional_capabilities = additional_capabilities;
    m_additional_capabilities_isSet = true;
}

bool OAIVirtualMachineScaleSetUpdateProperties::is_additional_capabilities_Set() const{
    return m_additional_capabilities_isSet;
}

bool OAIVirtualMachineScaleSetUpdateProperties::is_additional_capabilities_Valid() const{
    return m_additional_capabilities_isValid;
}

OAIAutomaticRepairsPolicy OAIVirtualMachineScaleSetUpdateProperties::getAutomaticRepairsPolicy() const {
    return m_automatic_repairs_policy;
}
void OAIVirtualMachineScaleSetUpdateProperties::setAutomaticRepairsPolicy(const OAIAutomaticRepairsPolicy &automatic_repairs_policy) {
    m_automatic_repairs_policy = automatic_repairs_policy;
    m_automatic_repairs_policy_isSet = true;
}

bool OAIVirtualMachineScaleSetUpdateProperties::is_automatic_repairs_policy_Set() const{
    return m_automatic_repairs_policy_isSet;
}

bool OAIVirtualMachineScaleSetUpdateProperties::is_automatic_repairs_policy_Valid() const{
    return m_automatic_repairs_policy_isValid;
}

bool OAIVirtualMachineScaleSetUpdateProperties::isDoNotRunExtensionsOnOverprovisionedVms() const {
    return m_do_not_run_extensions_on_overprovisioned_vms;
}
void OAIVirtualMachineScaleSetUpdateProperties::setDoNotRunExtensionsOnOverprovisionedVms(const bool &do_not_run_extensions_on_overprovisioned_vms) {
    m_do_not_run_extensions_on_overprovisioned_vms = do_not_run_extensions_on_overprovisioned_vms;
    m_do_not_run_extensions_on_overprovisioned_vms_isSet = true;
}

bool OAIVirtualMachineScaleSetUpdateProperties::is_do_not_run_extensions_on_overprovisioned_vms_Set() const{
    return m_do_not_run_extensions_on_overprovisioned_vms_isSet;
}

bool OAIVirtualMachineScaleSetUpdateProperties::is_do_not_run_extensions_on_overprovisioned_vms_Valid() const{
    return m_do_not_run_extensions_on_overprovisioned_vms_isValid;
}

bool OAIVirtualMachineScaleSetUpdateProperties::isOverprovision() const {
    return m_overprovision;
}
void OAIVirtualMachineScaleSetUpdateProperties::setOverprovision(const bool &overprovision) {
    m_overprovision = overprovision;
    m_overprovision_isSet = true;
}

bool OAIVirtualMachineScaleSetUpdateProperties::is_overprovision_Set() const{
    return m_overprovision_isSet;
}

bool OAIVirtualMachineScaleSetUpdateProperties::is_overprovision_Valid() const{
    return m_overprovision_isValid;
}

OAISubResource OAIVirtualMachineScaleSetUpdateProperties::getProximityPlacementGroup() const {
    return m_proximity_placement_group;
}
void OAIVirtualMachineScaleSetUpdateProperties::setProximityPlacementGroup(const OAISubResource &proximity_placement_group) {
    m_proximity_placement_group = proximity_placement_group;
    m_proximity_placement_group_isSet = true;
}

bool OAIVirtualMachineScaleSetUpdateProperties::is_proximity_placement_group_Set() const{
    return m_proximity_placement_group_isSet;
}

bool OAIVirtualMachineScaleSetUpdateProperties::is_proximity_placement_group_Valid() const{
    return m_proximity_placement_group_isValid;
}

OAIScaleInPolicy OAIVirtualMachineScaleSetUpdateProperties::getScaleInPolicy() const {
    return m_scale_in_policy;
}
void OAIVirtualMachineScaleSetUpdateProperties::setScaleInPolicy(const OAIScaleInPolicy &scale_in_policy) {
    m_scale_in_policy = scale_in_policy;
    m_scale_in_policy_isSet = true;
}

bool OAIVirtualMachineScaleSetUpdateProperties::is_scale_in_policy_Set() const{
    return m_scale_in_policy_isSet;
}

bool OAIVirtualMachineScaleSetUpdateProperties::is_scale_in_policy_Valid() const{
    return m_scale_in_policy_isValid;
}

bool OAIVirtualMachineScaleSetUpdateProperties::isSinglePlacementGroup() const {
    return m_single_placement_group;
}
void OAIVirtualMachineScaleSetUpdateProperties::setSinglePlacementGroup(const bool &single_placement_group) {
    m_single_placement_group = single_placement_group;
    m_single_placement_group_isSet = true;
}

bool OAIVirtualMachineScaleSetUpdateProperties::is_single_placement_group_Set() const{
    return m_single_placement_group_isSet;
}

bool OAIVirtualMachineScaleSetUpdateProperties::is_single_placement_group_Valid() const{
    return m_single_placement_group_isValid;
}

OAIUpgradePolicy OAIVirtualMachineScaleSetUpdateProperties::getUpgradePolicy() const {
    return m_upgrade_policy;
}
void OAIVirtualMachineScaleSetUpdateProperties::setUpgradePolicy(const OAIUpgradePolicy &upgrade_policy) {
    m_upgrade_policy = upgrade_policy;
    m_upgrade_policy_isSet = true;
}

bool OAIVirtualMachineScaleSetUpdateProperties::is_upgrade_policy_Set() const{
    return m_upgrade_policy_isSet;
}

bool OAIVirtualMachineScaleSetUpdateProperties::is_upgrade_policy_Valid() const{
    return m_upgrade_policy_isValid;
}

OAIVirtualMachineScaleSetUpdateVMProfile OAIVirtualMachineScaleSetUpdateProperties::getVirtualMachineProfile() const {
    return m_virtual_machine_profile;
}
void OAIVirtualMachineScaleSetUpdateProperties::setVirtualMachineProfile(const OAIVirtualMachineScaleSetUpdateVMProfile &virtual_machine_profile) {
    m_virtual_machine_profile = virtual_machine_profile;
    m_virtual_machine_profile_isSet = true;
}

bool OAIVirtualMachineScaleSetUpdateProperties::is_virtual_machine_profile_Set() const{
    return m_virtual_machine_profile_isSet;
}

bool OAIVirtualMachineScaleSetUpdateProperties::is_virtual_machine_profile_Valid() const{
    return m_virtual_machine_profile_isValid;
}

bool OAIVirtualMachineScaleSetUpdateProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_capabilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_automatic_repairs_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_do_not_run_extensions_on_overprovisioned_vms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overprovision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proximity_placement_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_in_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_placement_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_machine_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualMachineScaleSetUpdateProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
