/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageDisk.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageDisk::OAIImageDisk(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageDisk::OAIImageDisk() {
    this->initializeModel();
}

OAIImageDisk::~OAIImageDisk() {}

void OAIImageDisk::initializeModel() {

    m_blob_uri_isSet = false;
    m_blob_uri_isValid = false;

    m_caching_isSet = false;
    m_caching_isValid = false;

    m_disk_encryption_set_isSet = false;
    m_disk_encryption_set_isValid = false;

    m_disk_size_gb_isSet = false;
    m_disk_size_gb_isValid = false;

    m_managed_disk_isSet = false;
    m_managed_disk_isValid = false;

    m_snapshot_isSet = false;
    m_snapshot_isValid = false;

    m_storage_account_type_isSet = false;
    m_storage_account_type_isValid = false;
}

void OAIImageDisk::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageDisk::fromJsonObject(QJsonObject json) {

    m_blob_uri_isValid = ::OpenAPI::fromJsonValue(m_blob_uri, json[QString("blobUri")]);
    m_blob_uri_isSet = !json[QString("blobUri")].isNull() && m_blob_uri_isValid;

    m_caching_isValid = ::OpenAPI::fromJsonValue(m_caching, json[QString("caching")]);
    m_caching_isSet = !json[QString("caching")].isNull() && m_caching_isValid;

    m_disk_encryption_set_isValid = ::OpenAPI::fromJsonValue(m_disk_encryption_set, json[QString("diskEncryptionSet")]);
    m_disk_encryption_set_isSet = !json[QString("diskEncryptionSet")].isNull() && m_disk_encryption_set_isValid;

    m_disk_size_gb_isValid = ::OpenAPI::fromJsonValue(m_disk_size_gb, json[QString("diskSizeGB")]);
    m_disk_size_gb_isSet = !json[QString("diskSizeGB")].isNull() && m_disk_size_gb_isValid;

    m_managed_disk_isValid = ::OpenAPI::fromJsonValue(m_managed_disk, json[QString("managedDisk")]);
    m_managed_disk_isSet = !json[QString("managedDisk")].isNull() && m_managed_disk_isValid;

    m_snapshot_isValid = ::OpenAPI::fromJsonValue(m_snapshot, json[QString("snapshot")]);
    m_snapshot_isSet = !json[QString("snapshot")].isNull() && m_snapshot_isValid;

    m_storage_account_type_isValid = ::OpenAPI::fromJsonValue(m_storage_account_type, json[QString("storageAccountType")]);
    m_storage_account_type_isSet = !json[QString("storageAccountType")].isNull() && m_storage_account_type_isValid;
}

QString OAIImageDisk::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageDisk::asJsonObject() const {
    QJsonObject obj;
    if (m_blob_uri_isSet) {
        obj.insert(QString("blobUri"), ::OpenAPI::toJsonValue(m_blob_uri));
    }
    if (m_caching_isSet) {
        obj.insert(QString("caching"), ::OpenAPI::toJsonValue(m_caching));
    }
    if (m_disk_encryption_set.isSet()) {
        obj.insert(QString("diskEncryptionSet"), ::OpenAPI::toJsonValue(m_disk_encryption_set));
    }
    if (m_disk_size_gb_isSet) {
        obj.insert(QString("diskSizeGB"), ::OpenAPI::toJsonValue(m_disk_size_gb));
    }
    if (m_managed_disk.isSet()) {
        obj.insert(QString("managedDisk"), ::OpenAPI::toJsonValue(m_managed_disk));
    }
    if (m_snapshot.isSet()) {
        obj.insert(QString("snapshot"), ::OpenAPI::toJsonValue(m_snapshot));
    }
    if (m_storage_account_type.isSet()) {
        obj.insert(QString("storageAccountType"), ::OpenAPI::toJsonValue(m_storage_account_type));
    }
    return obj;
}

QString OAIImageDisk::getBlobUri() const {
    return m_blob_uri;
}
void OAIImageDisk::setBlobUri(const QString &blob_uri) {
    m_blob_uri = blob_uri;
    m_blob_uri_isSet = true;
}

bool OAIImageDisk::is_blob_uri_Set() const{
    return m_blob_uri_isSet;
}

bool OAIImageDisk::is_blob_uri_Valid() const{
    return m_blob_uri_isValid;
}

QString OAIImageDisk::getCaching() const {
    return m_caching;
}
void OAIImageDisk::setCaching(const QString &caching) {
    m_caching = caching;
    m_caching_isSet = true;
}

bool OAIImageDisk::is_caching_Set() const{
    return m_caching_isSet;
}

bool OAIImageDisk::is_caching_Valid() const{
    return m_caching_isValid;
}

OAIDiskEncryptionSetParameters OAIImageDisk::getDiskEncryptionSet() const {
    return m_disk_encryption_set;
}
void OAIImageDisk::setDiskEncryptionSet(const OAIDiskEncryptionSetParameters &disk_encryption_set) {
    m_disk_encryption_set = disk_encryption_set;
    m_disk_encryption_set_isSet = true;
}

bool OAIImageDisk::is_disk_encryption_set_Set() const{
    return m_disk_encryption_set_isSet;
}

bool OAIImageDisk::is_disk_encryption_set_Valid() const{
    return m_disk_encryption_set_isValid;
}

qint32 OAIImageDisk::getDiskSizeGb() const {
    return m_disk_size_gb;
}
void OAIImageDisk::setDiskSizeGb(const qint32 &disk_size_gb) {
    m_disk_size_gb = disk_size_gb;
    m_disk_size_gb_isSet = true;
}

bool OAIImageDisk::is_disk_size_gb_Set() const{
    return m_disk_size_gb_isSet;
}

bool OAIImageDisk::is_disk_size_gb_Valid() const{
    return m_disk_size_gb_isValid;
}

OAISubResource OAIImageDisk::getManagedDisk() const {
    return m_managed_disk;
}
void OAIImageDisk::setManagedDisk(const OAISubResource &managed_disk) {
    m_managed_disk = managed_disk;
    m_managed_disk_isSet = true;
}

bool OAIImageDisk::is_managed_disk_Set() const{
    return m_managed_disk_isSet;
}

bool OAIImageDisk::is_managed_disk_Valid() const{
    return m_managed_disk_isValid;
}

OAISubResource OAIImageDisk::getSnapshot() const {
    return m_snapshot;
}
void OAIImageDisk::setSnapshot(const OAISubResource &snapshot) {
    m_snapshot = snapshot;
    m_snapshot_isSet = true;
}

bool OAIImageDisk::is_snapshot_Set() const{
    return m_snapshot_isSet;
}

bool OAIImageDisk::is_snapshot_Valid() const{
    return m_snapshot_isValid;
}

OAIStorageAccountType OAIImageDisk::getStorageAccountType() const {
    return m_storage_account_type;
}
void OAIImageDisk::setStorageAccountType(const OAIStorageAccountType &storage_account_type) {
    m_storage_account_type = storage_account_type;
    m_storage_account_type_isSet = true;
}

bool OAIImageDisk::is_storage_account_type_Set() const{
    return m_storage_account_type_isSet;
}

bool OAIImageDisk::is_storage_account_type_Valid() const{
    return m_storage_account_type_isValid;
}

bool OAIImageDisk::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blob_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caching_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_encryption_set.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_size_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_disk.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageDisk::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
