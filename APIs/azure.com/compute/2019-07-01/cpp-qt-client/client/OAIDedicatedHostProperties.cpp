/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDedicatedHostProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDedicatedHostProperties::OAIDedicatedHostProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDedicatedHostProperties::OAIDedicatedHostProperties() {
    this->initializeModel();
}

OAIDedicatedHostProperties::~OAIDedicatedHostProperties() {}

void OAIDedicatedHostProperties::initializeModel() {

    m_auto_replace_on_failure_isSet = false;
    m_auto_replace_on_failure_isValid = false;

    m_host_id_isSet = false;
    m_host_id_isValid = false;

    m_instance_view_isSet = false;
    m_instance_view_isValid = false;

    m_license_type_isSet = false;
    m_license_type_isValid = false;

    m_platform_fault_domain_isSet = false;
    m_platform_fault_domain_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_provisioning_time_isSet = false;
    m_provisioning_time_isValid = false;

    m_virtual_machines_isSet = false;
    m_virtual_machines_isValid = false;
}

void OAIDedicatedHostProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDedicatedHostProperties::fromJsonObject(QJsonObject json) {

    m_auto_replace_on_failure_isValid = ::OpenAPI::fromJsonValue(m_auto_replace_on_failure, json[QString("autoReplaceOnFailure")]);
    m_auto_replace_on_failure_isSet = !json[QString("autoReplaceOnFailure")].isNull() && m_auto_replace_on_failure_isValid;

    m_host_id_isValid = ::OpenAPI::fromJsonValue(m_host_id, json[QString("hostId")]);
    m_host_id_isSet = !json[QString("hostId")].isNull() && m_host_id_isValid;

    m_instance_view_isValid = ::OpenAPI::fromJsonValue(m_instance_view, json[QString("instanceView")]);
    m_instance_view_isSet = !json[QString("instanceView")].isNull() && m_instance_view_isValid;

    m_license_type_isValid = ::OpenAPI::fromJsonValue(m_license_type, json[QString("licenseType")]);
    m_license_type_isSet = !json[QString("licenseType")].isNull() && m_license_type_isValid;

    m_platform_fault_domain_isValid = ::OpenAPI::fromJsonValue(m_platform_fault_domain, json[QString("platformFaultDomain")]);
    m_platform_fault_domain_isSet = !json[QString("platformFaultDomain")].isNull() && m_platform_fault_domain_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_provisioning_time_isValid = ::OpenAPI::fromJsonValue(m_provisioning_time, json[QString("provisioningTime")]);
    m_provisioning_time_isSet = !json[QString("provisioningTime")].isNull() && m_provisioning_time_isValid;

    m_virtual_machines_isValid = ::OpenAPI::fromJsonValue(m_virtual_machines, json[QString("virtualMachines")]);
    m_virtual_machines_isSet = !json[QString("virtualMachines")].isNull() && m_virtual_machines_isValid;
}

QString OAIDedicatedHostProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDedicatedHostProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_replace_on_failure_isSet) {
        obj.insert(QString("autoReplaceOnFailure"), ::OpenAPI::toJsonValue(m_auto_replace_on_failure));
    }
    if (m_host_id_isSet) {
        obj.insert(QString("hostId"), ::OpenAPI::toJsonValue(m_host_id));
    }
    if (m_instance_view.isSet()) {
        obj.insert(QString("instanceView"), ::OpenAPI::toJsonValue(m_instance_view));
    }
    if (m_license_type.isSet()) {
        obj.insert(QString("licenseType"), ::OpenAPI::toJsonValue(m_license_type));
    }
    if (m_platform_fault_domain_isSet) {
        obj.insert(QString("platformFaultDomain"), ::OpenAPI::toJsonValue(m_platform_fault_domain));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_provisioning_time_isSet) {
        obj.insert(QString("provisioningTime"), ::OpenAPI::toJsonValue(m_provisioning_time));
    }
    if (m_virtual_machines.size() > 0) {
        obj.insert(QString("virtualMachines"), ::OpenAPI::toJsonValue(m_virtual_machines));
    }
    return obj;
}

bool OAIDedicatedHostProperties::isAutoReplaceOnFailure() const {
    return m_auto_replace_on_failure;
}
void OAIDedicatedHostProperties::setAutoReplaceOnFailure(const bool &auto_replace_on_failure) {
    m_auto_replace_on_failure = auto_replace_on_failure;
    m_auto_replace_on_failure_isSet = true;
}

bool OAIDedicatedHostProperties::is_auto_replace_on_failure_Set() const{
    return m_auto_replace_on_failure_isSet;
}

bool OAIDedicatedHostProperties::is_auto_replace_on_failure_Valid() const{
    return m_auto_replace_on_failure_isValid;
}

QString OAIDedicatedHostProperties::getHostId() const {
    return m_host_id;
}
void OAIDedicatedHostProperties::setHostId(const QString &host_id) {
    m_host_id = host_id;
    m_host_id_isSet = true;
}

bool OAIDedicatedHostProperties::is_host_id_Set() const{
    return m_host_id_isSet;
}

bool OAIDedicatedHostProperties::is_host_id_Valid() const{
    return m_host_id_isValid;
}

OAIDedicatedHostInstanceView OAIDedicatedHostProperties::getInstanceView() const {
    return m_instance_view;
}
void OAIDedicatedHostProperties::setInstanceView(const OAIDedicatedHostInstanceView &instance_view) {
    m_instance_view = instance_view;
    m_instance_view_isSet = true;
}

bool OAIDedicatedHostProperties::is_instance_view_Set() const{
    return m_instance_view_isSet;
}

bool OAIDedicatedHostProperties::is_instance_view_Valid() const{
    return m_instance_view_isValid;
}

OAIDedicatedHostLicenseType OAIDedicatedHostProperties::getLicenseType() const {
    return m_license_type;
}
void OAIDedicatedHostProperties::setLicenseType(const OAIDedicatedHostLicenseType &license_type) {
    m_license_type = license_type;
    m_license_type_isSet = true;
}

bool OAIDedicatedHostProperties::is_license_type_Set() const{
    return m_license_type_isSet;
}

bool OAIDedicatedHostProperties::is_license_type_Valid() const{
    return m_license_type_isValid;
}

qint32 OAIDedicatedHostProperties::getPlatformFaultDomain() const {
    return m_platform_fault_domain;
}
void OAIDedicatedHostProperties::setPlatformFaultDomain(const qint32 &platform_fault_domain) {
    m_platform_fault_domain = platform_fault_domain;
    m_platform_fault_domain_isSet = true;
}

bool OAIDedicatedHostProperties::is_platform_fault_domain_Set() const{
    return m_platform_fault_domain_isSet;
}

bool OAIDedicatedHostProperties::is_platform_fault_domain_Valid() const{
    return m_platform_fault_domain_isValid;
}

QString OAIDedicatedHostProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIDedicatedHostProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIDedicatedHostProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIDedicatedHostProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QDateTime OAIDedicatedHostProperties::getProvisioningTime() const {
    return m_provisioning_time;
}
void OAIDedicatedHostProperties::setProvisioningTime(const QDateTime &provisioning_time) {
    m_provisioning_time = provisioning_time;
    m_provisioning_time_isSet = true;
}

bool OAIDedicatedHostProperties::is_provisioning_time_Set() const{
    return m_provisioning_time_isSet;
}

bool OAIDedicatedHostProperties::is_provisioning_time_Valid() const{
    return m_provisioning_time_isValid;
}

QList<OAISubResourceReadOnly> OAIDedicatedHostProperties::getVirtualMachines() const {
    return m_virtual_machines;
}
void OAIDedicatedHostProperties::setVirtualMachines(const QList<OAISubResourceReadOnly> &virtual_machines) {
    m_virtual_machines = virtual_machines;
    m_virtual_machines_isSet = true;
}

bool OAIDedicatedHostProperties::is_virtual_machines_Set() const{
    return m_virtual_machines_isSet;
}

bool OAIDedicatedHostProperties::is_virtual_machines_Valid() const{
    return m_virtual_machines_isValid;
}

bool OAIDedicatedHostProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_replace_on_failure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_view.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_fault_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_machines.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDedicatedHostProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
