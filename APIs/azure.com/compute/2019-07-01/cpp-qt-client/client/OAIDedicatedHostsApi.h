/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDedicatedHostsApi_H
#define OAI_OAIDedicatedHostsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDedicatedHost.h"
#include "OAIDedicatedHostUpdate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDedicatedHostsApi : public QObject {
    Q_OBJECT

public:
    OAIDedicatedHostsApi(const int timeOut = 0);
    ~OAIDedicatedHostsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  host_group_name QString [required]
    * @param[in]  host_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIDedicatedHost [required]
    */
    virtual void dedicatedHostsCreateOrUpdate(const QString &resource_group_name, const QString &host_group_name, const QString &host_name, const QString &api_version, const QString &subscription_id, const OAIDedicatedHost &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  host_group_name QString [required]
    * @param[in]  host_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void dedicatedHostsDelete(const QString &resource_group_name, const QString &host_group_name, const QString &host_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  host_group_name QString [required]
    * @param[in]  host_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void dedicatedHostsGet(const QString &resource_group_name, const QString &host_group_name, const QString &host_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  host_group_name QString [required]
    * @param[in]  host_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIDedicatedHostUpdate [required]
    */
    virtual void dedicatedHostsUpdate(const QString &resource_group_name, const QString &host_group_name, const QString &host_name, const QString &api_version, const QString &subscription_id, const OAIDedicatedHostUpdate &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dedicatedHostsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void dedicatedHostsDeleteCallback(OAIHttpRequestWorker *worker);
    void dedicatedHostsGetCallback(OAIHttpRequestWorker *worker);
    void dedicatedHostsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void dedicatedHostsCreateOrUpdateSignal(OAIDedicatedHost summary);
    void dedicatedHostsDeleteSignal();
    void dedicatedHostsGetSignal(OAIDedicatedHost summary);
    void dedicatedHostsUpdateSignal(OAIDedicatedHost summary);


    void dedicatedHostsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDedicatedHost summary);
    void dedicatedHostsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dedicatedHostsGetSignalFull(OAIHttpRequestWorker *worker, OAIDedicatedHost summary);
    void dedicatedHostsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDedicatedHost summary);

    Q_DECL_DEPRECATED_X("Use dedicatedHostsCreateOrUpdateSignalError() instead")
    void dedicatedHostsCreateOrUpdateSignalE(OAIDedicatedHost summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedHostsCreateOrUpdateSignalError(OAIDedicatedHost summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dedicatedHostsDeleteSignalError() instead")
    void dedicatedHostsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedHostsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dedicatedHostsGetSignalError() instead")
    void dedicatedHostsGetSignalE(OAIDedicatedHost summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedHostsGetSignalError(OAIDedicatedHost summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dedicatedHostsUpdateSignalError() instead")
    void dedicatedHostsUpdateSignalE(OAIDedicatedHost summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedHostsUpdateSignalError(OAIDedicatedHost summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use dedicatedHostsCreateOrUpdateSignalErrorFull() instead")
    void dedicatedHostsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedHostsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dedicatedHostsDeleteSignalErrorFull() instead")
    void dedicatedHostsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedHostsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dedicatedHostsGetSignalErrorFull() instead")
    void dedicatedHostsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedHostsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dedicatedHostsUpdateSignalErrorFull() instead")
    void dedicatedHostsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedHostsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
