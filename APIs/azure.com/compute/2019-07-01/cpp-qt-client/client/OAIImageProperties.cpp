/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageProperties::OAIImageProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageProperties::OAIImageProperties() {
    this->initializeModel();
}

OAIImageProperties::~OAIImageProperties() {}

void OAIImageProperties::initializeModel() {

    m_hyper_v_generation_isSet = false;
    m_hyper_v_generation_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_source_virtual_machine_isSet = false;
    m_source_virtual_machine_isValid = false;

    m_storage_profile_isSet = false;
    m_storage_profile_isValid = false;
}

void OAIImageProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageProperties::fromJsonObject(QJsonObject json) {

    m_hyper_v_generation_isValid = ::OpenAPI::fromJsonValue(m_hyper_v_generation, json[QString("hyperVGeneration")]);
    m_hyper_v_generation_isSet = !json[QString("hyperVGeneration")].isNull() && m_hyper_v_generation_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_source_virtual_machine_isValid = ::OpenAPI::fromJsonValue(m_source_virtual_machine, json[QString("sourceVirtualMachine")]);
    m_source_virtual_machine_isSet = !json[QString("sourceVirtualMachine")].isNull() && m_source_virtual_machine_isValid;

    m_storage_profile_isValid = ::OpenAPI::fromJsonValue(m_storage_profile, json[QString("storageProfile")]);
    m_storage_profile_isSet = !json[QString("storageProfile")].isNull() && m_storage_profile_isValid;
}

QString OAIImageProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_hyper_v_generation.isSet()) {
        obj.insert(QString("hyperVGeneration"), ::OpenAPI::toJsonValue(m_hyper_v_generation));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_source_virtual_machine.isSet()) {
        obj.insert(QString("sourceVirtualMachine"), ::OpenAPI::toJsonValue(m_source_virtual_machine));
    }
    if (m_storage_profile.isSet()) {
        obj.insert(QString("storageProfile"), ::OpenAPI::toJsonValue(m_storage_profile));
    }
    return obj;
}

OAIHyperVGenerationType OAIImageProperties::getHyperVGeneration() const {
    return m_hyper_v_generation;
}
void OAIImageProperties::setHyperVGeneration(const OAIHyperVGenerationType &hyper_v_generation) {
    m_hyper_v_generation = hyper_v_generation;
    m_hyper_v_generation_isSet = true;
}

bool OAIImageProperties::is_hyper_v_generation_Set() const{
    return m_hyper_v_generation_isSet;
}

bool OAIImageProperties::is_hyper_v_generation_Valid() const{
    return m_hyper_v_generation_isValid;
}

QString OAIImageProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIImageProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIImageProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIImageProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAISubResource OAIImageProperties::getSourceVirtualMachine() const {
    return m_source_virtual_machine;
}
void OAIImageProperties::setSourceVirtualMachine(const OAISubResource &source_virtual_machine) {
    m_source_virtual_machine = source_virtual_machine;
    m_source_virtual_machine_isSet = true;
}

bool OAIImageProperties::is_source_virtual_machine_Set() const{
    return m_source_virtual_machine_isSet;
}

bool OAIImageProperties::is_source_virtual_machine_Valid() const{
    return m_source_virtual_machine_isValid;
}

OAIImageStorageProfile OAIImageProperties::getStorageProfile() const {
    return m_storage_profile;
}
void OAIImageProperties::setStorageProfile(const OAIImageStorageProfile &storage_profile) {
    m_storage_profile = storage_profile;
    m_storage_profile_isSet = true;
}

bool OAIImageProperties::is_storage_profile_Set() const{
    return m_storage_profile_isSet;
}

bool OAIImageProperties::is_storage_profile_Valid() const{
    return m_storage_profile_isValid;
}

bool OAIImageProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hyper_v_generation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_virtual_machine.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
