/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWindowsConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWindowsConfiguration::OAIWindowsConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWindowsConfiguration::OAIWindowsConfiguration() {
    this->initializeModel();
}

OAIWindowsConfiguration::~OAIWindowsConfiguration() {}

void OAIWindowsConfiguration::initializeModel() {

    m_additional_unattend_content_isSet = false;
    m_additional_unattend_content_isValid = false;

    m_enable_automatic_updates_isSet = false;
    m_enable_automatic_updates_isValid = false;

    m_provision_vm_agent_isSet = false;
    m_provision_vm_agent_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_win_rm_isSet = false;
    m_win_rm_isValid = false;
}

void OAIWindowsConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWindowsConfiguration::fromJsonObject(QJsonObject json) {

    m_additional_unattend_content_isValid = ::OpenAPI::fromJsonValue(m_additional_unattend_content, json[QString("additionalUnattendContent")]);
    m_additional_unattend_content_isSet = !json[QString("additionalUnattendContent")].isNull() && m_additional_unattend_content_isValid;

    m_enable_automatic_updates_isValid = ::OpenAPI::fromJsonValue(m_enable_automatic_updates, json[QString("enableAutomaticUpdates")]);
    m_enable_automatic_updates_isSet = !json[QString("enableAutomaticUpdates")].isNull() && m_enable_automatic_updates_isValid;

    m_provision_vm_agent_isValid = ::OpenAPI::fromJsonValue(m_provision_vm_agent, json[QString("provisionVMAgent")]);
    m_provision_vm_agent_isSet = !json[QString("provisionVMAgent")].isNull() && m_provision_vm_agent_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;

    m_win_rm_isValid = ::OpenAPI::fromJsonValue(m_win_rm, json[QString("winRM")]);
    m_win_rm_isSet = !json[QString("winRM")].isNull() && m_win_rm_isValid;
}

QString OAIWindowsConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWindowsConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_unattend_content.size() > 0) {
        obj.insert(QString("additionalUnattendContent"), ::OpenAPI::toJsonValue(m_additional_unattend_content));
    }
    if (m_enable_automatic_updates_isSet) {
        obj.insert(QString("enableAutomaticUpdates"), ::OpenAPI::toJsonValue(m_enable_automatic_updates));
    }
    if (m_provision_vm_agent_isSet) {
        obj.insert(QString("provisionVMAgent"), ::OpenAPI::toJsonValue(m_provision_vm_agent));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_win_rm.isSet()) {
        obj.insert(QString("winRM"), ::OpenAPI::toJsonValue(m_win_rm));
    }
    return obj;
}

QList<OAIAdditionalUnattendContent> OAIWindowsConfiguration::getAdditionalUnattendContent() const {
    return m_additional_unattend_content;
}
void OAIWindowsConfiguration::setAdditionalUnattendContent(const QList<OAIAdditionalUnattendContent> &additional_unattend_content) {
    m_additional_unattend_content = additional_unattend_content;
    m_additional_unattend_content_isSet = true;
}

bool OAIWindowsConfiguration::is_additional_unattend_content_Set() const{
    return m_additional_unattend_content_isSet;
}

bool OAIWindowsConfiguration::is_additional_unattend_content_Valid() const{
    return m_additional_unattend_content_isValid;
}

bool OAIWindowsConfiguration::isEnableAutomaticUpdates() const {
    return m_enable_automatic_updates;
}
void OAIWindowsConfiguration::setEnableAutomaticUpdates(const bool &enable_automatic_updates) {
    m_enable_automatic_updates = enable_automatic_updates;
    m_enable_automatic_updates_isSet = true;
}

bool OAIWindowsConfiguration::is_enable_automatic_updates_Set() const{
    return m_enable_automatic_updates_isSet;
}

bool OAIWindowsConfiguration::is_enable_automatic_updates_Valid() const{
    return m_enable_automatic_updates_isValid;
}

bool OAIWindowsConfiguration::isProvisionVmAgent() const {
    return m_provision_vm_agent;
}
void OAIWindowsConfiguration::setProvisionVmAgent(const bool &provision_vm_agent) {
    m_provision_vm_agent = provision_vm_agent;
    m_provision_vm_agent_isSet = true;
}

bool OAIWindowsConfiguration::is_provision_vm_agent_Set() const{
    return m_provision_vm_agent_isSet;
}

bool OAIWindowsConfiguration::is_provision_vm_agent_Valid() const{
    return m_provision_vm_agent_isValid;
}

QString OAIWindowsConfiguration::getTimeZone() const {
    return m_time_zone;
}
void OAIWindowsConfiguration::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIWindowsConfiguration::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIWindowsConfiguration::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

OAIWinRMConfiguration OAIWindowsConfiguration::getWinRm() const {
    return m_win_rm;
}
void OAIWindowsConfiguration::setWinRm(const OAIWinRMConfiguration &win_rm) {
    m_win_rm = win_rm;
    m_win_rm_isSet = true;
}

bool OAIWindowsConfiguration::is_win_rm_Set() const{
    return m_win_rm_isSet;
}

bool OAIWindowsConfiguration::is_win_rm_Valid() const{
    return m_win_rm_isValid;
}

bool OAIWindowsConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_unattend_content.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_automatic_updates_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provision_vm_agent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_win_rm.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWindowsConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
