/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVirtualMachineScaleSetVMExtensionsApi_H
#define OAI_OAIVirtualMachineScaleSetVMExtensionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAIVirtualMachineExtension.h"
#include "OAIVirtualMachineExtensionUpdate.h"
#include "OAIVirtualMachineExtensionsListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVirtualMachineScaleSetVMExtensionsApi : public QObject {
    Q_OBJECT

public:
    OAIVirtualMachineScaleSetVMExtensionsApi(const int timeOut = 0);
    ~OAIVirtualMachineScaleSetVMExtensionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_scale_set_name QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  vm_extension_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  extension_parameters OAIVirtualMachineExtension [required]
    */
    virtual void virtualMachineScaleSetVMExtensionsCreateOrUpdate(const QString &resource_group_name, const QString &vm_scale_set_name, const QString &instance_id, const QString &vm_extension_name, const QString &api_version, const QString &subscription_id, const OAIVirtualMachineExtension &extension_parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_scale_set_name QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  vm_extension_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualMachineScaleSetVMExtensionsDelete(const QString &resource_group_name, const QString &vm_scale_set_name, const QString &instance_id, const QString &vm_extension_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_scale_set_name QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  vm_extension_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void virtualMachineScaleSetVMExtensionsGet(const QString &resource_group_name, const QString &vm_scale_set_name, const QString &instance_id, const QString &vm_extension_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_scale_set_name QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void virtualMachineScaleSetVMExtensionsList(const QString &resource_group_name, const QString &vm_scale_set_name, const QString &instance_id, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_scale_set_name QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  vm_extension_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  extension_parameters OAIVirtualMachineExtensionUpdate [required]
    */
    virtual void virtualMachineScaleSetVMExtensionsUpdate(const QString &resource_group_name, const QString &vm_scale_set_name, const QString &instance_id, const QString &vm_extension_name, const QString &api_version, const QString &subscription_id, const OAIVirtualMachineExtensionUpdate &extension_parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void virtualMachineScaleSetVMExtensionsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetVMExtensionsDeleteCallback(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetVMExtensionsGetCallback(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetVMExtensionsListCallback(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetVMExtensionsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void virtualMachineScaleSetVMExtensionsCreateOrUpdateSignal(OAIVirtualMachineExtension summary);
    void virtualMachineScaleSetVMExtensionsDeleteSignal();
    void virtualMachineScaleSetVMExtensionsGetSignal(OAIVirtualMachineExtension summary);
    void virtualMachineScaleSetVMExtensionsListSignal(OAIVirtualMachineExtensionsListResult summary);
    void virtualMachineScaleSetVMExtensionsUpdateSignal(OAIVirtualMachineExtension summary);


    void virtualMachineScaleSetVMExtensionsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualMachineExtension summary);
    void virtualMachineScaleSetVMExtensionsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetVMExtensionsGetSignalFull(OAIHttpRequestWorker *worker, OAIVirtualMachineExtension summary);
    void virtualMachineScaleSetVMExtensionsListSignalFull(OAIHttpRequestWorker *worker, OAIVirtualMachineExtensionsListResult summary);
    void virtualMachineScaleSetVMExtensionsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualMachineExtension summary);

    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetVMExtensionsCreateOrUpdateSignalError() instead")
    void virtualMachineScaleSetVMExtensionsCreateOrUpdateSignalE(OAIVirtualMachineExtension summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetVMExtensionsCreateOrUpdateSignalError(OAIVirtualMachineExtension summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetVMExtensionsDeleteSignalError() instead")
    void virtualMachineScaleSetVMExtensionsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetVMExtensionsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetVMExtensionsGetSignalError() instead")
    void virtualMachineScaleSetVMExtensionsGetSignalE(OAIVirtualMachineExtension summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetVMExtensionsGetSignalError(OAIVirtualMachineExtension summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetVMExtensionsListSignalError() instead")
    void virtualMachineScaleSetVMExtensionsListSignalE(OAIVirtualMachineExtensionsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetVMExtensionsListSignalError(OAIVirtualMachineExtensionsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetVMExtensionsUpdateSignalError() instead")
    void virtualMachineScaleSetVMExtensionsUpdateSignalE(OAIVirtualMachineExtension summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetVMExtensionsUpdateSignalError(OAIVirtualMachineExtension summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetVMExtensionsCreateOrUpdateSignalErrorFull() instead")
    void virtualMachineScaleSetVMExtensionsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetVMExtensionsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetVMExtensionsDeleteSignalErrorFull() instead")
    void virtualMachineScaleSetVMExtensionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetVMExtensionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetVMExtensionsGetSignalErrorFull() instead")
    void virtualMachineScaleSetVMExtensionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetVMExtensionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetVMExtensionsListSignalErrorFull() instead")
    void virtualMachineScaleSetVMExtensionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetVMExtensionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetVMExtensionsUpdateSignalErrorFull() instead")
    void virtualMachineScaleSetVMExtensionsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetVMExtensionsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
