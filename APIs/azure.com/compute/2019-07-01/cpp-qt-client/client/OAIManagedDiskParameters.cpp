/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagedDiskParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagedDiskParameters::OAIManagedDiskParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagedDiskParameters::OAIManagedDiskParameters() {
    this->initializeModel();
}

OAIManagedDiskParameters::~OAIManagedDiskParameters() {}

void OAIManagedDiskParameters::initializeModel() {

    m_disk_encryption_set_isSet = false;
    m_disk_encryption_set_isValid = false;

    m_storage_account_type_isSet = false;
    m_storage_account_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAIManagedDiskParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagedDiskParameters::fromJsonObject(QJsonObject json) {

    m_disk_encryption_set_isValid = ::OpenAPI::fromJsonValue(m_disk_encryption_set, json[QString("diskEncryptionSet")]);
    m_disk_encryption_set_isSet = !json[QString("diskEncryptionSet")].isNull() && m_disk_encryption_set_isValid;

    m_storage_account_type_isValid = ::OpenAPI::fromJsonValue(m_storage_account_type, json[QString("storageAccountType")]);
    m_storage_account_type_isSet = !json[QString("storageAccountType")].isNull() && m_storage_account_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAIManagedDiskParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagedDiskParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_disk_encryption_set.isSet()) {
        obj.insert(QString("diskEncryptionSet"), ::OpenAPI::toJsonValue(m_disk_encryption_set));
    }
    if (m_storage_account_type.isSet()) {
        obj.insert(QString("storageAccountType"), ::OpenAPI::toJsonValue(m_storage_account_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

OAIDiskEncryptionSetParameters OAIManagedDiskParameters::getDiskEncryptionSet() const {
    return m_disk_encryption_set;
}
void OAIManagedDiskParameters::setDiskEncryptionSet(const OAIDiskEncryptionSetParameters &disk_encryption_set) {
    m_disk_encryption_set = disk_encryption_set;
    m_disk_encryption_set_isSet = true;
}

bool OAIManagedDiskParameters::is_disk_encryption_set_Set() const{
    return m_disk_encryption_set_isSet;
}

bool OAIManagedDiskParameters::is_disk_encryption_set_Valid() const{
    return m_disk_encryption_set_isValid;
}

OAIStorageAccountType OAIManagedDiskParameters::getStorageAccountType() const {
    return m_storage_account_type;
}
void OAIManagedDiskParameters::setStorageAccountType(const OAIStorageAccountType &storage_account_type) {
    m_storage_account_type = storage_account_type;
    m_storage_account_type_isSet = true;
}

bool OAIManagedDiskParameters::is_storage_account_type_Set() const{
    return m_storage_account_type_isSet;
}

bool OAIManagedDiskParameters::is_storage_account_type_Valid() const{
    return m_storage_account_type_isValid;
}

QString OAIManagedDiskParameters::getId() const {
    return m_id;
}
void OAIManagedDiskParameters::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIManagedDiskParameters::is_id_Set() const{
    return m_id_isSet;
}

bool OAIManagedDiskParameters::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIManagedDiskParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disk_encryption_set.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagedDiskParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
