/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataDisk.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataDisk::OAIDataDisk(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataDisk::OAIDataDisk() {
    this->initializeModel();
}

OAIDataDisk::~OAIDataDisk() {}

void OAIDataDisk::initializeModel() {

    m_caching_isSet = false;
    m_caching_isValid = false;

    m_create_option_isSet = false;
    m_create_option_isValid = false;

    m_disk_iops_read_write_isSet = false;
    m_disk_iops_read_write_isValid = false;

    m_disk_m_bps_read_write_isSet = false;
    m_disk_m_bps_read_write_isValid = false;

    m_disk_size_gb_isSet = false;
    m_disk_size_gb_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_lun_isSet = false;
    m_lun_isValid = false;

    m_managed_disk_isSet = false;
    m_managed_disk_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_to_be_detached_isSet = false;
    m_to_be_detached_isValid = false;

    m_vhd_isSet = false;
    m_vhd_isValid = false;

    m_write_accelerator_enabled_isSet = false;
    m_write_accelerator_enabled_isValid = false;
}

void OAIDataDisk::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataDisk::fromJsonObject(QJsonObject json) {

    m_caching_isValid = ::OpenAPI::fromJsonValue(m_caching, json[QString("caching")]);
    m_caching_isSet = !json[QString("caching")].isNull() && m_caching_isValid;

    m_create_option_isValid = ::OpenAPI::fromJsonValue(m_create_option, json[QString("createOption")]);
    m_create_option_isSet = !json[QString("createOption")].isNull() && m_create_option_isValid;

    m_disk_iops_read_write_isValid = ::OpenAPI::fromJsonValue(m_disk_iops_read_write, json[QString("diskIOPSReadWrite")]);
    m_disk_iops_read_write_isSet = !json[QString("diskIOPSReadWrite")].isNull() && m_disk_iops_read_write_isValid;

    m_disk_m_bps_read_write_isValid = ::OpenAPI::fromJsonValue(m_disk_m_bps_read_write, json[QString("diskMBpsReadWrite")]);
    m_disk_m_bps_read_write_isSet = !json[QString("diskMBpsReadWrite")].isNull() && m_disk_m_bps_read_write_isValid;

    m_disk_size_gb_isValid = ::OpenAPI::fromJsonValue(m_disk_size_gb, json[QString("diskSizeGB")]);
    m_disk_size_gb_isSet = !json[QString("diskSizeGB")].isNull() && m_disk_size_gb_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_lun_isValid = ::OpenAPI::fromJsonValue(m_lun, json[QString("lun")]);
    m_lun_isSet = !json[QString("lun")].isNull() && m_lun_isValid;

    m_managed_disk_isValid = ::OpenAPI::fromJsonValue(m_managed_disk, json[QString("managedDisk")]);
    m_managed_disk_isSet = !json[QString("managedDisk")].isNull() && m_managed_disk_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_to_be_detached_isValid = ::OpenAPI::fromJsonValue(m_to_be_detached, json[QString("toBeDetached")]);
    m_to_be_detached_isSet = !json[QString("toBeDetached")].isNull() && m_to_be_detached_isValid;

    m_vhd_isValid = ::OpenAPI::fromJsonValue(m_vhd, json[QString("vhd")]);
    m_vhd_isSet = !json[QString("vhd")].isNull() && m_vhd_isValid;

    m_write_accelerator_enabled_isValid = ::OpenAPI::fromJsonValue(m_write_accelerator_enabled, json[QString("writeAcceleratorEnabled")]);
    m_write_accelerator_enabled_isSet = !json[QString("writeAcceleratorEnabled")].isNull() && m_write_accelerator_enabled_isValid;
}

QString OAIDataDisk::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataDisk::asJsonObject() const {
    QJsonObject obj;
    if (m_caching.isSet()) {
        obj.insert(QString("caching"), ::OpenAPI::toJsonValue(m_caching));
    }
    if (m_create_option.isSet()) {
        obj.insert(QString("createOption"), ::OpenAPI::toJsonValue(m_create_option));
    }
    if (m_disk_iops_read_write_isSet) {
        obj.insert(QString("diskIOPSReadWrite"), ::OpenAPI::toJsonValue(m_disk_iops_read_write));
    }
    if (m_disk_m_bps_read_write_isSet) {
        obj.insert(QString("diskMBpsReadWrite"), ::OpenAPI::toJsonValue(m_disk_m_bps_read_write));
    }
    if (m_disk_size_gb_isSet) {
        obj.insert(QString("diskSizeGB"), ::OpenAPI::toJsonValue(m_disk_size_gb));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_lun_isSet) {
        obj.insert(QString("lun"), ::OpenAPI::toJsonValue(m_lun));
    }
    if (m_managed_disk.isSet()) {
        obj.insert(QString("managedDisk"), ::OpenAPI::toJsonValue(m_managed_disk));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_to_be_detached_isSet) {
        obj.insert(QString("toBeDetached"), ::OpenAPI::toJsonValue(m_to_be_detached));
    }
    if (m_vhd.isSet()) {
        obj.insert(QString("vhd"), ::OpenAPI::toJsonValue(m_vhd));
    }
    if (m_write_accelerator_enabled_isSet) {
        obj.insert(QString("writeAcceleratorEnabled"), ::OpenAPI::toJsonValue(m_write_accelerator_enabled));
    }
    return obj;
}

OAICaching OAIDataDisk::getCaching() const {
    return m_caching;
}
void OAIDataDisk::setCaching(const OAICaching &caching) {
    m_caching = caching;
    m_caching_isSet = true;
}

bool OAIDataDisk::is_caching_Set() const{
    return m_caching_isSet;
}

bool OAIDataDisk::is_caching_Valid() const{
    return m_caching_isValid;
}

OAICreateOption OAIDataDisk::getCreateOption() const {
    return m_create_option;
}
void OAIDataDisk::setCreateOption(const OAICreateOption &create_option) {
    m_create_option = create_option;
    m_create_option_isSet = true;
}

bool OAIDataDisk::is_create_option_Set() const{
    return m_create_option_isSet;
}

bool OAIDataDisk::is_create_option_Valid() const{
    return m_create_option_isValid;
}

qint64 OAIDataDisk::getDiskIopsReadWrite() const {
    return m_disk_iops_read_write;
}
void OAIDataDisk::setDiskIopsReadWrite(const qint64 &disk_iops_read_write) {
    m_disk_iops_read_write = disk_iops_read_write;
    m_disk_iops_read_write_isSet = true;
}

bool OAIDataDisk::is_disk_iops_read_write_Set() const{
    return m_disk_iops_read_write_isSet;
}

bool OAIDataDisk::is_disk_iops_read_write_Valid() const{
    return m_disk_iops_read_write_isValid;
}

qint64 OAIDataDisk::getDiskMBpsReadWrite() const {
    return m_disk_m_bps_read_write;
}
void OAIDataDisk::setDiskMBpsReadWrite(const qint64 &disk_m_bps_read_write) {
    m_disk_m_bps_read_write = disk_m_bps_read_write;
    m_disk_m_bps_read_write_isSet = true;
}

bool OAIDataDisk::is_disk_m_bps_read_write_Set() const{
    return m_disk_m_bps_read_write_isSet;
}

bool OAIDataDisk::is_disk_m_bps_read_write_Valid() const{
    return m_disk_m_bps_read_write_isValid;
}

qint32 OAIDataDisk::getDiskSizeGb() const {
    return m_disk_size_gb;
}
void OAIDataDisk::setDiskSizeGb(const qint32 &disk_size_gb) {
    m_disk_size_gb = disk_size_gb;
    m_disk_size_gb_isSet = true;
}

bool OAIDataDisk::is_disk_size_gb_Set() const{
    return m_disk_size_gb_isSet;
}

bool OAIDataDisk::is_disk_size_gb_Valid() const{
    return m_disk_size_gb_isValid;
}

OAIVirtualHardDisk OAIDataDisk::getImage() const {
    return m_image;
}
void OAIDataDisk::setImage(const OAIVirtualHardDisk &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIDataDisk::is_image_Set() const{
    return m_image_isSet;
}

bool OAIDataDisk::is_image_Valid() const{
    return m_image_isValid;
}

qint32 OAIDataDisk::getLun() const {
    return m_lun;
}
void OAIDataDisk::setLun(const qint32 &lun) {
    m_lun = lun;
    m_lun_isSet = true;
}

bool OAIDataDisk::is_lun_Set() const{
    return m_lun_isSet;
}

bool OAIDataDisk::is_lun_Valid() const{
    return m_lun_isValid;
}

OAIManagedDiskParameters OAIDataDisk::getManagedDisk() const {
    return m_managed_disk;
}
void OAIDataDisk::setManagedDisk(const OAIManagedDiskParameters &managed_disk) {
    m_managed_disk = managed_disk;
    m_managed_disk_isSet = true;
}

bool OAIDataDisk::is_managed_disk_Set() const{
    return m_managed_disk_isSet;
}

bool OAIDataDisk::is_managed_disk_Valid() const{
    return m_managed_disk_isValid;
}

QString OAIDataDisk::getName() const {
    return m_name;
}
void OAIDataDisk::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDataDisk::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDataDisk::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIDataDisk::isToBeDetached() const {
    return m_to_be_detached;
}
void OAIDataDisk::setToBeDetached(const bool &to_be_detached) {
    m_to_be_detached = to_be_detached;
    m_to_be_detached_isSet = true;
}

bool OAIDataDisk::is_to_be_detached_Set() const{
    return m_to_be_detached_isSet;
}

bool OAIDataDisk::is_to_be_detached_Valid() const{
    return m_to_be_detached_isValid;
}

OAIVirtualHardDisk OAIDataDisk::getVhd() const {
    return m_vhd;
}
void OAIDataDisk::setVhd(const OAIVirtualHardDisk &vhd) {
    m_vhd = vhd;
    m_vhd_isSet = true;
}

bool OAIDataDisk::is_vhd_Set() const{
    return m_vhd_isSet;
}

bool OAIDataDisk::is_vhd_Valid() const{
    return m_vhd_isValid;
}

bool OAIDataDisk::isWriteAcceleratorEnabled() const {
    return m_write_accelerator_enabled;
}
void OAIDataDisk::setWriteAcceleratorEnabled(const bool &write_accelerator_enabled) {
    m_write_accelerator_enabled = write_accelerator_enabled;
    m_write_accelerator_enabled_isSet = true;
}

bool OAIDataDisk::is_write_accelerator_enabled_Set() const{
    return m_write_accelerator_enabled_isSet;
}

bool OAIDataDisk::is_write_accelerator_enabled_Valid() const{
    return m_write_accelerator_enabled_isValid;
}

bool OAIDataDisk::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_caching.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_iops_read_write_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_m_bps_read_write_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_size_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lun_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_disk.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_be_detached_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vhd.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_accelerator_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataDisk::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_create_option_isValid && m_lun_isValid && true;
}

} // namespace OpenAPI
