/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDedicatedHostProperties.h
 *
 * Properties of the dedicated host.
 */

#ifndef OAIDedicatedHostProperties_H
#define OAIDedicatedHostProperties_H

#include <QJsonObject>

#include "OAIDedicatedHostInstanceView.h"
#include "OAIDedicatedHostLicenseType.h"
#include "OAISubResourceReadOnly.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDedicatedHostInstanceView;
class OAISubResourceReadOnly;

class OAIDedicatedHostProperties : public OAIObject {
public:
    OAIDedicatedHostProperties();
    OAIDedicatedHostProperties(QString json);
    ~OAIDedicatedHostProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAutoReplaceOnFailure() const;
    void setAutoReplaceOnFailure(const bool &auto_replace_on_failure);
    bool is_auto_replace_on_failure_Set() const;
    bool is_auto_replace_on_failure_Valid() const;

    QString getHostId() const;
    void setHostId(const QString &host_id);
    bool is_host_id_Set() const;
    bool is_host_id_Valid() const;

    OAIDedicatedHostInstanceView getInstanceView() const;
    void setInstanceView(const OAIDedicatedHostInstanceView &instance_view);
    bool is_instance_view_Set() const;
    bool is_instance_view_Valid() const;

    OAIDedicatedHostLicenseType getLicenseType() const;
    void setLicenseType(const OAIDedicatedHostLicenseType &license_type);
    bool is_license_type_Set() const;
    bool is_license_type_Valid() const;

    qint32 getPlatformFaultDomain() const;
    void setPlatformFaultDomain(const qint32 &platform_fault_domain);
    bool is_platform_fault_domain_Set() const;
    bool is_platform_fault_domain_Valid() const;

    QString getProvisioningState() const;
    void setProvisioningState(const QString &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    QDateTime getProvisioningTime() const;
    void setProvisioningTime(const QDateTime &provisioning_time);
    bool is_provisioning_time_Set() const;
    bool is_provisioning_time_Valid() const;

    QList<OAISubResourceReadOnly> getVirtualMachines() const;
    void setVirtualMachines(const QList<OAISubResourceReadOnly> &virtual_machines);
    bool is_virtual_machines_Set() const;
    bool is_virtual_machines_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_auto_replace_on_failure;
    bool m_auto_replace_on_failure_isSet;
    bool m_auto_replace_on_failure_isValid;

    QString m_host_id;
    bool m_host_id_isSet;
    bool m_host_id_isValid;

    OAIDedicatedHostInstanceView m_instance_view;
    bool m_instance_view_isSet;
    bool m_instance_view_isValid;

    OAIDedicatedHostLicenseType m_license_type;
    bool m_license_type_isSet;
    bool m_license_type_isValid;

    qint32 m_platform_fault_domain;
    bool m_platform_fault_domain_isSet;
    bool m_platform_fault_domain_isValid;

    QString m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;

    QDateTime m_provisioning_time;
    bool m_provisioning_time_isSet;
    bool m_provisioning_time_isValid;

    QList<OAISubResourceReadOnly> m_virtual_machines;
    bool m_virtual_machines_isSet;
    bool m_virtual_machines_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDedicatedHostProperties)

#endif // OAIDedicatedHostProperties_H
