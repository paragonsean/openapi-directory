/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ComputeManagementClient);
  }
}(this, function(expect, ComputeManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ComputeManagementClient.VirtualMachineScaleSetsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VirtualMachineScaleSetsApi', function() {
    describe('virtualMachineScaleSetsConvertToSinglePlacementGroup', function() {
      it('should call virtualMachineScaleSetsConvertToSinglePlacementGroup successfully', function(done) {
        //uncomment below and update the code to test virtualMachineScaleSetsConvertToSinglePlacementGroup
        //instance.virtualMachineScaleSetsConvertToSinglePlacementGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachineScaleSetsCreateOrUpdate', function() {
      it('should call virtualMachineScaleSetsCreateOrUpdate successfully', function(done) {
        //uncomment below and update the code to test virtualMachineScaleSetsCreateOrUpdate
        //instance.virtualMachineScaleSetsCreateOrUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachineScaleSetsDeallocate', function() {
      it('should call virtualMachineScaleSetsDeallocate successfully', function(done) {
        //uncomment below and update the code to test virtualMachineScaleSetsDeallocate
        //instance.virtualMachineScaleSetsDeallocate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachineScaleSetsDelete', function() {
      it('should call virtualMachineScaleSetsDelete successfully', function(done) {
        //uncomment below and update the code to test virtualMachineScaleSetsDelete
        //instance.virtualMachineScaleSetsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachineScaleSetsDeleteInstances', function() {
      it('should call virtualMachineScaleSetsDeleteInstances successfully', function(done) {
        //uncomment below and update the code to test virtualMachineScaleSetsDeleteInstances
        //instance.virtualMachineScaleSetsDeleteInstances(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachineScaleSetsForceRecoveryServiceFabricPlatformUpdateDomainWalk', function() {
      it('should call virtualMachineScaleSetsForceRecoveryServiceFabricPlatformUpdateDomainWalk successfully', function(done) {
        //uncomment below and update the code to test virtualMachineScaleSetsForceRecoveryServiceFabricPlatformUpdateDomainWalk
        //instance.virtualMachineScaleSetsForceRecoveryServiceFabricPlatformUpdateDomainWalk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachineScaleSetsGet', function() {
      it('should call virtualMachineScaleSetsGet successfully', function(done) {
        //uncomment below and update the code to test virtualMachineScaleSetsGet
        //instance.virtualMachineScaleSetsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachineScaleSetsGetInstanceView', function() {
      it('should call virtualMachineScaleSetsGetInstanceView successfully', function(done) {
        //uncomment below and update the code to test virtualMachineScaleSetsGetInstanceView
        //instance.virtualMachineScaleSetsGetInstanceView(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachineScaleSetsGetOSUpgradeHistory', function() {
      it('should call virtualMachineScaleSetsGetOSUpgradeHistory successfully', function(done) {
        //uncomment below and update the code to test virtualMachineScaleSetsGetOSUpgradeHistory
        //instance.virtualMachineScaleSetsGetOSUpgradeHistory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachineScaleSetsList', function() {
      it('should call virtualMachineScaleSetsList successfully', function(done) {
        //uncomment below and update the code to test virtualMachineScaleSetsList
        //instance.virtualMachineScaleSetsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachineScaleSetsListAll', function() {
      it('should call virtualMachineScaleSetsListAll successfully', function(done) {
        //uncomment below and update the code to test virtualMachineScaleSetsListAll
        //instance.virtualMachineScaleSetsListAll(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachineScaleSetsListSkus', function() {
      it('should call virtualMachineScaleSetsListSkus successfully', function(done) {
        //uncomment below and update the code to test virtualMachineScaleSetsListSkus
        //instance.virtualMachineScaleSetsListSkus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachineScaleSetsPerformMaintenance', function() {
      it('should call virtualMachineScaleSetsPerformMaintenance successfully', function(done) {
        //uncomment below and update the code to test virtualMachineScaleSetsPerformMaintenance
        //instance.virtualMachineScaleSetsPerformMaintenance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachineScaleSetsPowerOff', function() {
      it('should call virtualMachineScaleSetsPowerOff successfully', function(done) {
        //uncomment below and update the code to test virtualMachineScaleSetsPowerOff
        //instance.virtualMachineScaleSetsPowerOff(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachineScaleSetsRedeploy', function() {
      it('should call virtualMachineScaleSetsRedeploy successfully', function(done) {
        //uncomment below and update the code to test virtualMachineScaleSetsRedeploy
        //instance.virtualMachineScaleSetsRedeploy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachineScaleSetsReimage', function() {
      it('should call virtualMachineScaleSetsReimage successfully', function(done) {
        //uncomment below and update the code to test virtualMachineScaleSetsReimage
        //instance.virtualMachineScaleSetsReimage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachineScaleSetsReimageAll', function() {
      it('should call virtualMachineScaleSetsReimageAll successfully', function(done) {
        //uncomment below and update the code to test virtualMachineScaleSetsReimageAll
        //instance.virtualMachineScaleSetsReimageAll(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachineScaleSetsRestart', function() {
      it('should call virtualMachineScaleSetsRestart successfully', function(done) {
        //uncomment below and update the code to test virtualMachineScaleSetsRestart
        //instance.virtualMachineScaleSetsRestart(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachineScaleSetsStart', function() {
      it('should call virtualMachineScaleSetsStart successfully', function(done) {
        //uncomment below and update the code to test virtualMachineScaleSetsStart
        //instance.virtualMachineScaleSetsStart(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachineScaleSetsUpdate', function() {
      it('should call virtualMachineScaleSetsUpdate successfully', function(done) {
        //uncomment below and update the code to test virtualMachineScaleSetsUpdate
        //instance.virtualMachineScaleSetsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachineScaleSetsUpdateInstances', function() {
      it('should call virtualMachineScaleSetsUpdateInstances successfully', function(done) {
        //uncomment below and update the code to test virtualMachineScaleSetsUpdateInstances
        //instance.virtualMachineScaleSetsUpdateInstances(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
