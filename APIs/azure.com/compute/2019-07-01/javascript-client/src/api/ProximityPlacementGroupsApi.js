/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProximityPlacementGroup from '../model/ProximityPlacementGroup';
import ProximityPlacementGroupListResult from '../model/ProximityPlacementGroupListResult';
import ProximityPlacementGroupUpdate from '../model/ProximityPlacementGroupUpdate';

/**
* ProximityPlacementGroups service.
* @module api/ProximityPlacementGroupsApi
* @version 2019-07-01
*/
export default class ProximityPlacementGroupsApi {

    /**
    * Constructs a new ProximityPlacementGroupsApi. 
    * @alias module:api/ProximityPlacementGroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the proximityPlacementGroupsCreateOrUpdate operation.
     * @callback module:api/ProximityPlacementGroupsApi~proximityPlacementGroupsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProximityPlacementGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a proximity placement group.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} proximityPlacementGroupName The name of the proximity placement group.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/ProximityPlacementGroup} parameters Parameters supplied to the Create Proximity Placement Group operation.
     * @param {module:api/ProximityPlacementGroupsApi~proximityPlacementGroupsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProximityPlacementGroup}
     */
    proximityPlacementGroupsCreateOrUpdate(resourceGroupName, proximityPlacementGroupName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling proximityPlacementGroupsCreateOrUpdate");
      }
      // verify the required parameter 'proximityPlacementGroupName' is set
      if (proximityPlacementGroupName === undefined || proximityPlacementGroupName === null) {
        throw new Error("Missing the required parameter 'proximityPlacementGroupName' when calling proximityPlacementGroupsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling proximityPlacementGroupsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling proximityPlacementGroupsCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling proximityPlacementGroupsCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'proximityPlacementGroupName': proximityPlacementGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProximityPlacementGroup;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/proximityPlacementGroups/{proximityPlacementGroupName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proximityPlacementGroupsDelete operation.
     * @callback module:api/ProximityPlacementGroupsApi~proximityPlacementGroupsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a proximity placement group.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} proximityPlacementGroupName The name of the proximity placement group.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ProximityPlacementGroupsApi~proximityPlacementGroupsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    proximityPlacementGroupsDelete(resourceGroupName, proximityPlacementGroupName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling proximityPlacementGroupsDelete");
      }
      // verify the required parameter 'proximityPlacementGroupName' is set
      if (proximityPlacementGroupName === undefined || proximityPlacementGroupName === null) {
        throw new Error("Missing the required parameter 'proximityPlacementGroupName' when calling proximityPlacementGroupsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling proximityPlacementGroupsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling proximityPlacementGroupsDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'proximityPlacementGroupName': proximityPlacementGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/proximityPlacementGroups/{proximityPlacementGroupName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proximityPlacementGroupsGet operation.
     * @callback module:api/ProximityPlacementGroupsApi~proximityPlacementGroupsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProximityPlacementGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about a proximity placement group .
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} proximityPlacementGroupName The name of the proximity placement group.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {Object} opts Optional parameters
     * @param {String} [includeColocationStatus] includeColocationStatus=true enables fetching the colocation status of all the resources in the proximity placement group.
     * @param {module:api/ProximityPlacementGroupsApi~proximityPlacementGroupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProximityPlacementGroup}
     */
    proximityPlacementGroupsGet(resourceGroupName, proximityPlacementGroupName, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling proximityPlacementGroupsGet");
      }
      // verify the required parameter 'proximityPlacementGroupName' is set
      if (proximityPlacementGroupName === undefined || proximityPlacementGroupName === null) {
        throw new Error("Missing the required parameter 'proximityPlacementGroupName' when calling proximityPlacementGroupsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling proximityPlacementGroupsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling proximityPlacementGroupsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'proximityPlacementGroupName': proximityPlacementGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'includeColocationStatus': opts['includeColocationStatus'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProximityPlacementGroup;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/proximityPlacementGroups/{proximityPlacementGroupName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proximityPlacementGroupsListByResourceGroup operation.
     * @callback module:api/ProximityPlacementGroupsApi~proximityPlacementGroupsListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProximityPlacementGroupListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all proximity placement groups in a resource group.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ProximityPlacementGroupsApi~proximityPlacementGroupsListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProximityPlacementGroupListResult}
     */
    proximityPlacementGroupsListByResourceGroup(resourceGroupName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling proximityPlacementGroupsListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling proximityPlacementGroupsListByResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling proximityPlacementGroupsListByResourceGroup");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProximityPlacementGroupListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/proximityPlacementGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proximityPlacementGroupsListBySubscription operation.
     * @callback module:api/ProximityPlacementGroupsApi~proximityPlacementGroupsListBySubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProximityPlacementGroupListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all proximity placement groups in a subscription.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ProximityPlacementGroupsApi~proximityPlacementGroupsListBySubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProximityPlacementGroupListResult}
     */
    proximityPlacementGroupsListBySubscription(apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling proximityPlacementGroupsListBySubscription");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling proximityPlacementGroupsListBySubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProximityPlacementGroupListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Compute/proximityPlacementGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proximityPlacementGroupsUpdate operation.
     * @callback module:api/ProximityPlacementGroupsApi~proximityPlacementGroupsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProximityPlacementGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a proximity placement group.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} proximityPlacementGroupName The name of the proximity placement group.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/ProximityPlacementGroupUpdate} parameters Parameters supplied to the Update Proximity Placement Group operation.
     * @param {module:api/ProximityPlacementGroupsApi~proximityPlacementGroupsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProximityPlacementGroup}
     */
    proximityPlacementGroupsUpdate(resourceGroupName, proximityPlacementGroupName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling proximityPlacementGroupsUpdate");
      }
      // verify the required parameter 'proximityPlacementGroupName' is set
      if (proximityPlacementGroupName === undefined || proximityPlacementGroupName === null) {
        throw new Error("Missing the required parameter 'proximityPlacementGroupName' when calling proximityPlacementGroupsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling proximityPlacementGroupsUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling proximityPlacementGroupsUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling proximityPlacementGroupsUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'proximityPlacementGroupName': proximityPlacementGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProximityPlacementGroup;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/proximityPlacementGroups/{proximityPlacementGroupName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
