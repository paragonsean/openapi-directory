/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DedicatedHost from '../model/DedicatedHost';
import DedicatedHostUpdate from '../model/DedicatedHostUpdate';

/**
* DedicatedHosts service.
* @module api/DedicatedHostsApi
* @version 2019-07-01
*/
export default class DedicatedHostsApi {

    /**
    * Constructs a new DedicatedHostsApi. 
    * @alias module:api/DedicatedHostsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dedicatedHostsCreateOrUpdate operation.
     * @callback module:api/DedicatedHostsApi~dedicatedHostsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DedicatedHost} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a dedicated host .
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} hostGroupName The name of the dedicated host group.
     * @param {String} hostName The name of the dedicated host .
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/DedicatedHost} parameters Parameters supplied to the Create Dedicated Host.
     * @param {module:api/DedicatedHostsApi~dedicatedHostsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DedicatedHost}
     */
    dedicatedHostsCreateOrUpdate(resourceGroupName, hostGroupName, hostName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dedicatedHostsCreateOrUpdate");
      }
      // verify the required parameter 'hostGroupName' is set
      if (hostGroupName === undefined || hostGroupName === null) {
        throw new Error("Missing the required parameter 'hostGroupName' when calling dedicatedHostsCreateOrUpdate");
      }
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling dedicatedHostsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dedicatedHostsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dedicatedHostsCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling dedicatedHostsCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'hostGroupName': hostGroupName,
        'hostName': hostName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DedicatedHost;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}/hosts/{hostName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dedicatedHostsDelete operation.
     * @callback module:api/DedicatedHostsApi~dedicatedHostsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a dedicated host.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} hostGroupName The name of the dedicated host group.
     * @param {String} hostName The name of the dedicated host.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/DedicatedHostsApi~dedicatedHostsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dedicatedHostsDelete(resourceGroupName, hostGroupName, hostName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dedicatedHostsDelete");
      }
      // verify the required parameter 'hostGroupName' is set
      if (hostGroupName === undefined || hostGroupName === null) {
        throw new Error("Missing the required parameter 'hostGroupName' when calling dedicatedHostsDelete");
      }
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling dedicatedHostsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dedicatedHostsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dedicatedHostsDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'hostGroupName': hostGroupName,
        'hostName': hostName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}/hosts/{hostName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dedicatedHostsGet operation.
     * @callback module:api/DedicatedHostsApi~dedicatedHostsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DedicatedHost} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about a dedicated host.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} hostGroupName The name of the dedicated host group.
     * @param {String} hostName The name of the dedicated host.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [expand] The expand expression to apply on the operation.
     * @param {module:api/DedicatedHostsApi~dedicatedHostsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DedicatedHost}
     */
    dedicatedHostsGet(resourceGroupName, hostGroupName, hostName, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dedicatedHostsGet");
      }
      // verify the required parameter 'hostGroupName' is set
      if (hostGroupName === undefined || hostGroupName === null) {
        throw new Error("Missing the required parameter 'hostGroupName' when calling dedicatedHostsGet");
      }
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling dedicatedHostsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dedicatedHostsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dedicatedHostsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'hostGroupName': hostGroupName,
        'hostName': hostName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$expand': opts['expand'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DedicatedHost;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}/hosts/{hostName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dedicatedHostsUpdate operation.
     * @callback module:api/DedicatedHostsApi~dedicatedHostsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DedicatedHost} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an dedicated host .
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} hostGroupName The name of the dedicated host group.
     * @param {String} hostName The name of the dedicated host .
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/DedicatedHostUpdate} parameters Parameters supplied to the Update Dedicated Host operation.
     * @param {module:api/DedicatedHostsApi~dedicatedHostsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DedicatedHost}
     */
    dedicatedHostsUpdate(resourceGroupName, hostGroupName, hostName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dedicatedHostsUpdate");
      }
      // verify the required parameter 'hostGroupName' is set
      if (hostGroupName === undefined || hostGroupName === null) {
        throw new Error("Missing the required parameter 'hostGroupName' when calling dedicatedHostsUpdate");
      }
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling dedicatedHostsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dedicatedHostsUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dedicatedHostsUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling dedicatedHostsUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'hostGroupName': hostGroupName,
        'hostName': hostName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DedicatedHost;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}/hosts/{hostName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
