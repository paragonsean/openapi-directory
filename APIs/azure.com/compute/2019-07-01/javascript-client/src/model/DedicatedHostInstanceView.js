/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DedicatedHostAvailableCapacity from './DedicatedHostAvailableCapacity';
import InstanceViewStatus from './InstanceViewStatus';

/**
 * The DedicatedHostInstanceView model module.
 * @module model/DedicatedHostInstanceView
 * @version 2019-07-01
 */
class DedicatedHostInstanceView {
    /**
     * Constructs a new <code>DedicatedHostInstanceView</code>.
     * The instance view of a dedicated host.
     * @alias module:model/DedicatedHostInstanceView
     */
    constructor() { 
        
        DedicatedHostInstanceView.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DedicatedHostInstanceView</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DedicatedHostInstanceView} obj Optional instance to populate.
     * @return {module:model/DedicatedHostInstanceView} The populated <code>DedicatedHostInstanceView</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DedicatedHostInstanceView();

            if (data.hasOwnProperty('assetId')) {
                obj['assetId'] = ApiClient.convertToType(data['assetId'], 'String');
            }
            if (data.hasOwnProperty('availableCapacity')) {
                obj['availableCapacity'] = DedicatedHostAvailableCapacity.constructFromObject(data['availableCapacity']);
            }
            if (data.hasOwnProperty('statuses')) {
                obj['statuses'] = ApiClient.convertToType(data['statuses'], [InstanceViewStatus]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DedicatedHostInstanceView</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DedicatedHostInstanceView</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['assetId'] && !(typeof data['assetId'] === 'string' || data['assetId'] instanceof String)) {
            throw new Error("Expected the field `assetId` to be a primitive type in the JSON string but got " + data['assetId']);
        }
        // validate the optional field `availableCapacity`
        if (data['availableCapacity']) { // data not null
          DedicatedHostAvailableCapacity.validateJSON(data['availableCapacity']);
        }
        if (data['statuses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['statuses'])) {
                throw new Error("Expected the field `statuses` to be an array in the JSON data but got " + data['statuses']);
            }
            // validate the optional field `statuses` (array)
            for (const item of data['statuses']) {
                InstanceViewStatus.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Specifies the unique id of the dedicated physical machine on which the dedicated host resides.
 * @member {String} assetId
 */
DedicatedHostInstanceView.prototype['assetId'] = undefined;

/**
 * @member {module:model/DedicatedHostAvailableCapacity} availableCapacity
 */
DedicatedHostInstanceView.prototype['availableCapacity'] = undefined;

/**
 * The resource status information.
 * @member {Array.<module:model/InstanceViewStatus>} statuses
 */
DedicatedHostInstanceView.prototype['statuses'] = undefined;






export default DedicatedHostInstanceView;

