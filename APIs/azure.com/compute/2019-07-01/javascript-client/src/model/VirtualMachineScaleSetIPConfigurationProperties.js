/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApiEntityReference from './ApiEntityReference';
import SubResource from './SubResource';
import VirtualMachineScaleSetPublicIPAddressConfiguration from './VirtualMachineScaleSetPublicIPAddressConfiguration';

/**
 * The VirtualMachineScaleSetIPConfigurationProperties model module.
 * @module model/VirtualMachineScaleSetIPConfigurationProperties
 * @version 2019-07-01
 */
class VirtualMachineScaleSetIPConfigurationProperties {
    /**
     * Constructs a new <code>VirtualMachineScaleSetIPConfigurationProperties</code>.
     * Describes a virtual machine scale set network profile&#39;s IP configuration properties.
     * @alias module:model/VirtualMachineScaleSetIPConfigurationProperties
     */
    constructor() { 
        
        VirtualMachineScaleSetIPConfigurationProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VirtualMachineScaleSetIPConfigurationProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VirtualMachineScaleSetIPConfigurationProperties} obj Optional instance to populate.
     * @return {module:model/VirtualMachineScaleSetIPConfigurationProperties} The populated <code>VirtualMachineScaleSetIPConfigurationProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VirtualMachineScaleSetIPConfigurationProperties();

            if (data.hasOwnProperty('applicationGatewayBackendAddressPools')) {
                obj['applicationGatewayBackendAddressPools'] = ApiClient.convertToType(data['applicationGatewayBackendAddressPools'], [SubResource]);
            }
            if (data.hasOwnProperty('applicationSecurityGroups')) {
                obj['applicationSecurityGroups'] = ApiClient.convertToType(data['applicationSecurityGroups'], [SubResource]);
            }
            if (data.hasOwnProperty('loadBalancerBackendAddressPools')) {
                obj['loadBalancerBackendAddressPools'] = ApiClient.convertToType(data['loadBalancerBackendAddressPools'], [SubResource]);
            }
            if (data.hasOwnProperty('loadBalancerInboundNatPools')) {
                obj['loadBalancerInboundNatPools'] = ApiClient.convertToType(data['loadBalancerInboundNatPools'], [SubResource]);
            }
            if (data.hasOwnProperty('primary')) {
                obj['primary'] = ApiClient.convertToType(data['primary'], 'Boolean');
            }
            if (data.hasOwnProperty('privateIPAddressVersion')) {
                obj['privateIPAddressVersion'] = ApiClient.convertToType(data['privateIPAddressVersion'], 'String');
            }
            if (data.hasOwnProperty('publicIPAddressConfiguration')) {
                obj['publicIPAddressConfiguration'] = VirtualMachineScaleSetPublicIPAddressConfiguration.constructFromObject(data['publicIPAddressConfiguration']);
            }
            if (data.hasOwnProperty('subnet')) {
                obj['subnet'] = ApiEntityReference.constructFromObject(data['subnet']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VirtualMachineScaleSetIPConfigurationProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VirtualMachineScaleSetIPConfigurationProperties</code>.
     */
    static validateJSON(data) {
        if (data['applicationGatewayBackendAddressPools']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['applicationGatewayBackendAddressPools'])) {
                throw new Error("Expected the field `applicationGatewayBackendAddressPools` to be an array in the JSON data but got " + data['applicationGatewayBackendAddressPools']);
            }
            // validate the optional field `applicationGatewayBackendAddressPools` (array)
            for (const item of data['applicationGatewayBackendAddressPools']) {
                SubResource.validateJSON(item);
            };
        }
        if (data['applicationSecurityGroups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['applicationSecurityGroups'])) {
                throw new Error("Expected the field `applicationSecurityGroups` to be an array in the JSON data but got " + data['applicationSecurityGroups']);
            }
            // validate the optional field `applicationSecurityGroups` (array)
            for (const item of data['applicationSecurityGroups']) {
                SubResource.validateJSON(item);
            };
        }
        if (data['loadBalancerBackendAddressPools']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['loadBalancerBackendAddressPools'])) {
                throw new Error("Expected the field `loadBalancerBackendAddressPools` to be an array in the JSON data but got " + data['loadBalancerBackendAddressPools']);
            }
            // validate the optional field `loadBalancerBackendAddressPools` (array)
            for (const item of data['loadBalancerBackendAddressPools']) {
                SubResource.validateJSON(item);
            };
        }
        if (data['loadBalancerInboundNatPools']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['loadBalancerInboundNatPools'])) {
                throw new Error("Expected the field `loadBalancerInboundNatPools` to be an array in the JSON data but got " + data['loadBalancerInboundNatPools']);
            }
            // validate the optional field `loadBalancerInboundNatPools` (array)
            for (const item of data['loadBalancerInboundNatPools']) {
                SubResource.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['privateIPAddressVersion'] && !(typeof data['privateIPAddressVersion'] === 'string' || data['privateIPAddressVersion'] instanceof String)) {
            throw new Error("Expected the field `privateIPAddressVersion` to be a primitive type in the JSON string but got " + data['privateIPAddressVersion']);
        }
        // validate the optional field `publicIPAddressConfiguration`
        if (data['publicIPAddressConfiguration']) { // data not null
          VirtualMachineScaleSetPublicIPAddressConfiguration.validateJSON(data['publicIPAddressConfiguration']);
        }
        // validate the optional field `subnet`
        if (data['subnet']) { // data not null
          ApiEntityReference.validateJSON(data['subnet']);
        }

        return true;
    }


}



/**
 * Specifies an array of references to backend address pools of application gateways. A scale set can reference backend address pools of multiple application gateways. Multiple scale sets cannot use the same application gateway.
 * @member {Array.<module:model/SubResource>} applicationGatewayBackendAddressPools
 */
VirtualMachineScaleSetIPConfigurationProperties.prototype['applicationGatewayBackendAddressPools'] = undefined;

/**
 * Specifies an array of references to application security group.
 * @member {Array.<module:model/SubResource>} applicationSecurityGroups
 */
VirtualMachineScaleSetIPConfigurationProperties.prototype['applicationSecurityGroups'] = undefined;

/**
 * Specifies an array of references to backend address pools of load balancers. A scale set can reference backend address pools of one public and one internal load balancer. Multiple scale sets cannot use the same load balancer.
 * @member {Array.<module:model/SubResource>} loadBalancerBackendAddressPools
 */
VirtualMachineScaleSetIPConfigurationProperties.prototype['loadBalancerBackendAddressPools'] = undefined;

/**
 * Specifies an array of references to inbound Nat pools of the load balancers. A scale set can reference inbound nat pools of one public and one internal load balancer. Multiple scale sets cannot use the same load balancer
 * @member {Array.<module:model/SubResource>} loadBalancerInboundNatPools
 */
VirtualMachineScaleSetIPConfigurationProperties.prototype['loadBalancerInboundNatPools'] = undefined;

/**
 * Specifies the primary network interface in case the virtual machine has more than 1 network interface.
 * @member {Boolean} primary
 */
VirtualMachineScaleSetIPConfigurationProperties.prototype['primary'] = undefined;

/**
 * Available from Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and 'IPv6'.
 * @member {module:model/VirtualMachineScaleSetIPConfigurationProperties.PrivateIPAddressVersionEnum} privateIPAddressVersion
 */
VirtualMachineScaleSetIPConfigurationProperties.prototype['privateIPAddressVersion'] = undefined;

/**
 * @member {module:model/VirtualMachineScaleSetPublicIPAddressConfiguration} publicIPAddressConfiguration
 */
VirtualMachineScaleSetIPConfigurationProperties.prototype['publicIPAddressConfiguration'] = undefined;

/**
 * @member {module:model/ApiEntityReference} subnet
 */
VirtualMachineScaleSetIPConfigurationProperties.prototype['subnet'] = undefined;





/**
 * Allowed values for the <code>privateIPAddressVersion</code> property.
 * @enum {String}
 * @readonly
 */
VirtualMachineScaleSetIPConfigurationProperties['PrivateIPAddressVersionEnum'] = {

    /**
     * value: "IPv4"
     * @const
     */
    "IPv4": "IPv4",

    /**
     * value: "IPv6"
     * @const
     */
    "IPv6": "IPv6"
};



export default VirtualMachineScaleSetIPConfigurationProperties;

