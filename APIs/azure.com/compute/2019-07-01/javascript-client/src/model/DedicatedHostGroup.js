/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DedicatedHostGroupProperties from './DedicatedHostGroupProperties';
import Resource from './Resource';

/**
 * The DedicatedHostGroup model module.
 * @module model/DedicatedHostGroup
 * @version 2019-07-01
 */
class DedicatedHostGroup {
    /**
     * Constructs a new <code>DedicatedHostGroup</code>.
     * Specifies information about the dedicated host group that the dedicated hosts should be assigned to. &lt;br&gt;&lt;br&gt; Currently, a dedicated host can only be added to a dedicated host group at creation time. An existing dedicated host cannot be added to another dedicated host group.
     * @alias module:model/DedicatedHostGroup
     * @implements module:model/Resource
     * @param location {String} Resource location
     */
    constructor(location) { 
        Resource.initialize(this, location);
        DedicatedHostGroup.initialize(this, location);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, location) { 
        obj['location'] = location;
    }

    /**
     * Constructs a <code>DedicatedHostGroup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DedicatedHostGroup} obj Optional instance to populate.
     * @return {module:model/DedicatedHostGroup} The populated <code>DedicatedHostGroup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DedicatedHostGroup();
            Resource.constructFromObject(data, obj);

            if (data.hasOwnProperty('properties')) {
                obj['properties'] = DedicatedHostGroupProperties.constructFromObject(data['properties']);
            }
            if (data.hasOwnProperty('zones')) {
                obj['zones'] = ApiClient.convertToType(data['zones'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DedicatedHostGroup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DedicatedHostGroup</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DedicatedHostGroup.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `properties`
        if (data['properties']) { // data not null
          DedicatedHostGroupProperties.validateJSON(data['properties']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['zones'])) {
            throw new Error("Expected the field `zones` to be an array in the JSON data but got " + data['zones']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

DedicatedHostGroup.RequiredProperties = ["location"];

/**
 * @member {module:model/DedicatedHostGroupProperties} properties
 */
DedicatedHostGroup.prototype['properties'] = undefined;

/**
 * Availability Zone to use for this host group. Only single zone is supported. The zone can be assigned only during creation. If not provided, the group supports all zones in the region. If provided, enforces each host in the group to be in the same zone.
 * @member {Array.<String>} zones
 */
DedicatedHostGroup.prototype['zones'] = undefined;

/**
 * Resource Id
 * @member {String} id
 */
DedicatedHostGroup.prototype['id'] = undefined;

/**
 * Resource location
 * @member {String} location
 */
DedicatedHostGroup.prototype['location'] = undefined;

/**
 * Resource name
 * @member {String} name
 */
DedicatedHostGroup.prototype['name'] = undefined;

/**
 * Resource tags
 * @member {Object.<String, String>} tags
 */
DedicatedHostGroup.prototype['tags'] = undefined;

/**
 * Resource type
 * @member {String} type
 */
DedicatedHostGroup.prototype['type'] = undefined;


// Implement Resource interface:
/**
 * Resource Id
 * @member {String} id
 */
Resource.prototype['id'] = undefined;
/**
 * Resource location
 * @member {String} location
 */
Resource.prototype['location'] = undefined;
/**
 * Resource name
 * @member {String} name
 */
Resource.prototype['name'] = undefined;
/**
 * Resource tags
 * @member {Object.<String, String>} tags
 */
Resource.prototype['tags'] = undefined;
/**
 * Resource type
 * @member {String} type
 */
Resource.prototype['type'] = undefined;




export default DedicatedHostGroup;

