/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SubResource from './SubResource';

/**
 * The KeyVaultKeyReference model module.
 * @module model/KeyVaultKeyReference
 * @version 2019-07-01
 */
class KeyVaultKeyReference {
    /**
     * Constructs a new <code>KeyVaultKeyReference</code>.
     * Describes a reference to Key Vault Key
     * @alias module:model/KeyVaultKeyReference
     * @param keyUrl {String} The URL referencing a key encryption key in Key Vault.
     * @param sourceVault {module:model/SubResource} 
     */
    constructor(keyUrl, sourceVault) { 
        
        KeyVaultKeyReference.initialize(this, keyUrl, sourceVault);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, keyUrl, sourceVault) { 
        obj['keyUrl'] = keyUrl;
        obj['sourceVault'] = sourceVault;
    }

    /**
     * Constructs a <code>KeyVaultKeyReference</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KeyVaultKeyReference} obj Optional instance to populate.
     * @return {module:model/KeyVaultKeyReference} The populated <code>KeyVaultKeyReference</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KeyVaultKeyReference();

            if (data.hasOwnProperty('keyUrl')) {
                obj['keyUrl'] = ApiClient.convertToType(data['keyUrl'], 'String');
            }
            if (data.hasOwnProperty('sourceVault')) {
                obj['sourceVault'] = SubResource.constructFromObject(data['sourceVault']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KeyVaultKeyReference</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KeyVaultKeyReference</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of KeyVaultKeyReference.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['keyUrl'] && !(typeof data['keyUrl'] === 'string' || data['keyUrl'] instanceof String)) {
            throw new Error("Expected the field `keyUrl` to be a primitive type in the JSON string but got " + data['keyUrl']);
        }
        // validate the optional field `sourceVault`
        if (data['sourceVault']) { // data not null
          SubResource.validateJSON(data['sourceVault']);
        }

        return true;
    }


}

KeyVaultKeyReference.RequiredProperties = ["keyUrl", "sourceVault"];

/**
 * The URL referencing a key encryption key in Key Vault.
 * @member {String} keyUrl
 */
KeyVaultKeyReference.prototype['keyUrl'] = undefined;

/**
 * @member {module:model/SubResource} sourceVault
 */
KeyVaultKeyReference.prototype['sourceVault'] = undefined;






export default KeyVaultKeyReference;

