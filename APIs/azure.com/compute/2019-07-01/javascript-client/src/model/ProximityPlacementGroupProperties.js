/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InstanceViewStatus from './InstanceViewStatus';
import SubResourceWithColocationStatus from './SubResourceWithColocationStatus';

/**
 * The ProximityPlacementGroupProperties model module.
 * @module model/ProximityPlacementGroupProperties
 * @version 2019-07-01
 */
class ProximityPlacementGroupProperties {
    /**
     * Constructs a new <code>ProximityPlacementGroupProperties</code>.
     * Describes the properties of a Proximity Placement Group.
     * @alias module:model/ProximityPlacementGroupProperties
     */
    constructor() { 
        
        ProximityPlacementGroupProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProximityPlacementGroupProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProximityPlacementGroupProperties} obj Optional instance to populate.
     * @return {module:model/ProximityPlacementGroupProperties} The populated <code>ProximityPlacementGroupProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProximityPlacementGroupProperties();

            if (data.hasOwnProperty('availabilitySets')) {
                obj['availabilitySets'] = ApiClient.convertToType(data['availabilitySets'], [SubResourceWithColocationStatus]);
            }
            if (data.hasOwnProperty('colocationStatus')) {
                obj['colocationStatus'] = InstanceViewStatus.constructFromObject(data['colocationStatus']);
            }
            if (data.hasOwnProperty('proximityPlacementGroupType')) {
                obj['proximityPlacementGroupType'] = ApiClient.convertToType(data['proximityPlacementGroupType'], 'String');
            }
            if (data.hasOwnProperty('virtualMachineScaleSets')) {
                obj['virtualMachineScaleSets'] = ApiClient.convertToType(data['virtualMachineScaleSets'], [SubResourceWithColocationStatus]);
            }
            if (data.hasOwnProperty('virtualMachines')) {
                obj['virtualMachines'] = ApiClient.convertToType(data['virtualMachines'], [SubResourceWithColocationStatus]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProximityPlacementGroupProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProximityPlacementGroupProperties</code>.
     */
    static validateJSON(data) {
        if (data['availabilitySets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['availabilitySets'])) {
                throw new Error("Expected the field `availabilitySets` to be an array in the JSON data but got " + data['availabilitySets']);
            }
            // validate the optional field `availabilitySets` (array)
            for (const item of data['availabilitySets']) {
                SubResourceWithColocationStatus.validateJSON(item);
            };
        }
        // validate the optional field `colocationStatus`
        if (data['colocationStatus']) { // data not null
          InstanceViewStatus.validateJSON(data['colocationStatus']);
        }
        // ensure the json data is a string
        if (data['proximityPlacementGroupType'] && !(typeof data['proximityPlacementGroupType'] === 'string' || data['proximityPlacementGroupType'] instanceof String)) {
            throw new Error("Expected the field `proximityPlacementGroupType` to be a primitive type in the JSON string but got " + data['proximityPlacementGroupType']);
        }
        if (data['virtualMachineScaleSets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['virtualMachineScaleSets'])) {
                throw new Error("Expected the field `virtualMachineScaleSets` to be an array in the JSON data but got " + data['virtualMachineScaleSets']);
            }
            // validate the optional field `virtualMachineScaleSets` (array)
            for (const item of data['virtualMachineScaleSets']) {
                SubResourceWithColocationStatus.validateJSON(item);
            };
        }
        if (data['virtualMachines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['virtualMachines'])) {
                throw new Error("Expected the field `virtualMachines` to be an array in the JSON data but got " + data['virtualMachines']);
            }
            // validate the optional field `virtualMachines` (array)
            for (const item of data['virtualMachines']) {
                SubResourceWithColocationStatus.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * A list of references to all availability sets in the proximity placement group.
 * @member {Array.<module:model/SubResourceWithColocationStatus>} availabilitySets
 */
ProximityPlacementGroupProperties.prototype['availabilitySets'] = undefined;

/**
 * @member {module:model/InstanceViewStatus} colocationStatus
 */
ProximityPlacementGroupProperties.prototype['colocationStatus'] = undefined;

/**
 * Specifies the type of the proximity placement group. <br><br> Possible values are: <br><br> **Standard** : Co-locate resources within an Azure region or Availability Zone. <br><br> **Ultra** : For future use.
 * @member {module:model/ProximityPlacementGroupProperties.ProximityPlacementGroupTypeEnum} proximityPlacementGroupType
 */
ProximityPlacementGroupProperties.prototype['proximityPlacementGroupType'] = undefined;

/**
 * A list of references to all virtual machine scale sets in the proximity placement group.
 * @member {Array.<module:model/SubResourceWithColocationStatus>} virtualMachineScaleSets
 */
ProximityPlacementGroupProperties.prototype['virtualMachineScaleSets'] = undefined;

/**
 * A list of references to all virtual machines in the proximity placement group.
 * @member {Array.<module:model/SubResourceWithColocationStatus>} virtualMachines
 */
ProximityPlacementGroupProperties.prototype['virtualMachines'] = undefined;





/**
 * Allowed values for the <code>proximityPlacementGroupType</code> property.
 * @enum {String}
 * @readonly
 */
ProximityPlacementGroupProperties['ProximityPlacementGroupTypeEnum'] = {

    /**
     * value: "Standard"
     * @const
     */
    "Standard": "Standard",

    /**
     * value: "Ultra"
     * @const
     */
    "Ultra": "Ultra"
};



export default ProximityPlacementGroupProperties;

