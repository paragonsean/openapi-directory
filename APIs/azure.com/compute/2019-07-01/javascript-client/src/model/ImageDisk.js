/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DiskEncryptionSetParameters from './DiskEncryptionSetParameters';
import StorageAccountType from './StorageAccountType';
import SubResource from './SubResource';

/**
 * The ImageDisk model module.
 * @module model/ImageDisk
 * @version 2019-07-01
 */
class ImageDisk {
    /**
     * Constructs a new <code>ImageDisk</code>.
     * Describes a image disk.
     * @alias module:model/ImageDisk
     */
    constructor() { 
        
        ImageDisk.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImageDisk</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageDisk} obj Optional instance to populate.
     * @return {module:model/ImageDisk} The populated <code>ImageDisk</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageDisk();

            if (data.hasOwnProperty('blobUri')) {
                obj['blobUri'] = ApiClient.convertToType(data['blobUri'], 'String');
            }
            if (data.hasOwnProperty('caching')) {
                obj['caching'] = ApiClient.convertToType(data['caching'], 'String');
            }
            if (data.hasOwnProperty('diskEncryptionSet')) {
                obj['diskEncryptionSet'] = DiskEncryptionSetParameters.constructFromObject(data['diskEncryptionSet']);
            }
            if (data.hasOwnProperty('diskSizeGB')) {
                obj['diskSizeGB'] = ApiClient.convertToType(data['diskSizeGB'], 'Number');
            }
            if (data.hasOwnProperty('managedDisk')) {
                obj['managedDisk'] = SubResource.constructFromObject(data['managedDisk']);
            }
            if (data.hasOwnProperty('snapshot')) {
                obj['snapshot'] = SubResource.constructFromObject(data['snapshot']);
            }
            if (data.hasOwnProperty('storageAccountType')) {
                obj['storageAccountType'] = StorageAccountType.constructFromObject(data['storageAccountType']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageDisk</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageDisk</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['blobUri'] && !(typeof data['blobUri'] === 'string' || data['blobUri'] instanceof String)) {
            throw new Error("Expected the field `blobUri` to be a primitive type in the JSON string but got " + data['blobUri']);
        }
        // ensure the json data is a string
        if (data['caching'] && !(typeof data['caching'] === 'string' || data['caching'] instanceof String)) {
            throw new Error("Expected the field `caching` to be a primitive type in the JSON string but got " + data['caching']);
        }
        // validate the optional field `diskEncryptionSet`
        if (data['diskEncryptionSet']) { // data not null
          DiskEncryptionSetParameters.validateJSON(data['diskEncryptionSet']);
        }
        // validate the optional field `managedDisk`
        if (data['managedDisk']) { // data not null
          SubResource.validateJSON(data['managedDisk']);
        }
        // validate the optional field `snapshot`
        if (data['snapshot']) { // data not null
          SubResource.validateJSON(data['snapshot']);
        }

        return true;
    }


}



/**
 * The Virtual Hard Disk.
 * @member {String} blobUri
 */
ImageDisk.prototype['blobUri'] = undefined;

/**
 * Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**
 * @member {module:model/ImageDisk.CachingEnum} caching
 */
ImageDisk.prototype['caching'] = undefined;

/**
 * @member {module:model/DiskEncryptionSetParameters} diskEncryptionSet
 */
ImageDisk.prototype['diskEncryptionSet'] = undefined;

/**
 * Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
 * @member {Number} diskSizeGB
 */
ImageDisk.prototype['diskSizeGB'] = undefined;

/**
 * @member {module:model/SubResource} managedDisk
 */
ImageDisk.prototype['managedDisk'] = undefined;

/**
 * @member {module:model/SubResource} snapshot
 */
ImageDisk.prototype['snapshot'] = undefined;

/**
 * @member {module:model/StorageAccountType} storageAccountType
 */
ImageDisk.prototype['storageAccountType'] = undefined;





/**
 * Allowed values for the <code>caching</code> property.
 * @enum {String}
 * @readonly
 */
ImageDisk['CachingEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "ReadOnly"
     * @const
     */
    "ReadOnly": "ReadOnly",

    /**
     * value: "ReadWrite"
     * @const
     */
    "ReadWrite": "ReadWrite"
};



export default ImageDisk;

