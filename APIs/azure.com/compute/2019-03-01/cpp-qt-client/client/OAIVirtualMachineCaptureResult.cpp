/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualMachineCaptureResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualMachineCaptureResult::OAIVirtualMachineCaptureResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualMachineCaptureResult::OAIVirtualMachineCaptureResult() {
    this->initializeModel();
}

OAIVirtualMachineCaptureResult::~OAIVirtualMachineCaptureResult() {}

void OAIVirtualMachineCaptureResult::initializeModel() {

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_content_version_isSet = false;
    m_content_version_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAIVirtualMachineCaptureResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualMachineCaptureResult::fromJsonObject(QJsonObject json) {

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("$schema")]);
    m_schema_isSet = !json[QString("$schema")].isNull() && m_schema_isValid;

    m_content_version_isValid = ::OpenAPI::fromJsonValue(m_content_version, json[QString("contentVersion")]);
    m_content_version_isSet = !json[QString("contentVersion")].isNull() && m_content_version_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAIVirtualMachineCaptureResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualMachineCaptureResult::asJsonObject() const {
    QJsonObject obj;
    if (m_schema_isSet) {
        obj.insert(QString("$schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_content_version_isSet) {
        obj.insert(QString("contentVersion"), ::OpenAPI::toJsonValue(m_content_version));
    }
    if (m_parameters_isSet) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_resources.size() > 0) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

QString OAIVirtualMachineCaptureResult::getSchema() const {
    return m_schema;
}
void OAIVirtualMachineCaptureResult::setSchema(const QString &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIVirtualMachineCaptureResult::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIVirtualMachineCaptureResult::is_schema_Valid() const{
    return m_schema_isValid;
}

QString OAIVirtualMachineCaptureResult::getContentVersion() const {
    return m_content_version;
}
void OAIVirtualMachineCaptureResult::setContentVersion(const QString &content_version) {
    m_content_version = content_version;
    m_content_version_isSet = true;
}

bool OAIVirtualMachineCaptureResult::is_content_version_Set() const{
    return m_content_version_isSet;
}

bool OAIVirtualMachineCaptureResult::is_content_version_Valid() const{
    return m_content_version_isValid;
}

OAIObject OAIVirtualMachineCaptureResult::getParameters() const {
    return m_parameters;
}
void OAIVirtualMachineCaptureResult::setParameters(const OAIObject &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIVirtualMachineCaptureResult::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIVirtualMachineCaptureResult::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QList<OAIObject> OAIVirtualMachineCaptureResult::getResources() const {
    return m_resources;
}
void OAIVirtualMachineCaptureResult::setResources(const QList<OAIObject> &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIVirtualMachineCaptureResult::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIVirtualMachineCaptureResult::is_resources_Valid() const{
    return m_resources_isValid;
}

QString OAIVirtualMachineCaptureResult::getId() const {
    return m_id;
}
void OAIVirtualMachineCaptureResult::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIVirtualMachineCaptureResult::is_id_Set() const{
    return m_id_isSet;
}

bool OAIVirtualMachineCaptureResult::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIVirtualMachineCaptureResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualMachineCaptureResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
