/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOSDisk.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOSDisk::OAIOSDisk(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOSDisk::OAIOSDisk() {
    this->initializeModel();
}

OAIOSDisk::~OAIOSDisk() {}

void OAIOSDisk::initializeModel() {

    m_caching_isSet = false;
    m_caching_isValid = false;

    m_create_option_isSet = false;
    m_create_option_isValid = false;

    m_diff_disk_settings_isSet = false;
    m_diff_disk_settings_isValid = false;

    m_disk_size_gb_isSet = false;
    m_disk_size_gb_isValid = false;

    m_encryption_settings_isSet = false;
    m_encryption_settings_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_managed_disk_isSet = false;
    m_managed_disk_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_os_type_isSet = false;
    m_os_type_isValid = false;

    m_vhd_isSet = false;
    m_vhd_isValid = false;

    m_write_accelerator_enabled_isSet = false;
    m_write_accelerator_enabled_isValid = false;
}

void OAIOSDisk::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOSDisk::fromJsonObject(QJsonObject json) {

    m_caching_isValid = ::OpenAPI::fromJsonValue(m_caching, json[QString("caching")]);
    m_caching_isSet = !json[QString("caching")].isNull() && m_caching_isValid;

    m_create_option_isValid = ::OpenAPI::fromJsonValue(m_create_option, json[QString("createOption")]);
    m_create_option_isSet = !json[QString("createOption")].isNull() && m_create_option_isValid;

    m_diff_disk_settings_isValid = ::OpenAPI::fromJsonValue(m_diff_disk_settings, json[QString("diffDiskSettings")]);
    m_diff_disk_settings_isSet = !json[QString("diffDiskSettings")].isNull() && m_diff_disk_settings_isValid;

    m_disk_size_gb_isValid = ::OpenAPI::fromJsonValue(m_disk_size_gb, json[QString("diskSizeGB")]);
    m_disk_size_gb_isSet = !json[QString("diskSizeGB")].isNull() && m_disk_size_gb_isValid;

    m_encryption_settings_isValid = ::OpenAPI::fromJsonValue(m_encryption_settings, json[QString("encryptionSettings")]);
    m_encryption_settings_isSet = !json[QString("encryptionSettings")].isNull() && m_encryption_settings_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_managed_disk_isValid = ::OpenAPI::fromJsonValue(m_managed_disk, json[QString("managedDisk")]);
    m_managed_disk_isSet = !json[QString("managedDisk")].isNull() && m_managed_disk_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;

    m_vhd_isValid = ::OpenAPI::fromJsonValue(m_vhd, json[QString("vhd")]);
    m_vhd_isSet = !json[QString("vhd")].isNull() && m_vhd_isValid;

    m_write_accelerator_enabled_isValid = ::OpenAPI::fromJsonValue(m_write_accelerator_enabled, json[QString("writeAcceleratorEnabled")]);
    m_write_accelerator_enabled_isSet = !json[QString("writeAcceleratorEnabled")].isNull() && m_write_accelerator_enabled_isValid;
}

QString OAIOSDisk::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOSDisk::asJsonObject() const {
    QJsonObject obj;
    if (m_caching.isSet()) {
        obj.insert(QString("caching"), ::OpenAPI::toJsonValue(m_caching));
    }
    if (m_create_option.isSet()) {
        obj.insert(QString("createOption"), ::OpenAPI::toJsonValue(m_create_option));
    }
    if (m_diff_disk_settings.isSet()) {
        obj.insert(QString("diffDiskSettings"), ::OpenAPI::toJsonValue(m_diff_disk_settings));
    }
    if (m_disk_size_gb_isSet) {
        obj.insert(QString("diskSizeGB"), ::OpenAPI::toJsonValue(m_disk_size_gb));
    }
    if (m_encryption_settings.isSet()) {
        obj.insert(QString("encryptionSettings"), ::OpenAPI::toJsonValue(m_encryption_settings));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_managed_disk.isSet()) {
        obj.insert(QString("managedDisk"), ::OpenAPI::toJsonValue(m_managed_disk));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_os_type_isSet) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    if (m_vhd.isSet()) {
        obj.insert(QString("vhd"), ::OpenAPI::toJsonValue(m_vhd));
    }
    if (m_write_accelerator_enabled_isSet) {
        obj.insert(QString("writeAcceleratorEnabled"), ::OpenAPI::toJsonValue(m_write_accelerator_enabled));
    }
    return obj;
}

OAICaching OAIOSDisk::getCaching() const {
    return m_caching;
}
void OAIOSDisk::setCaching(const OAICaching &caching) {
    m_caching = caching;
    m_caching_isSet = true;
}

bool OAIOSDisk::is_caching_Set() const{
    return m_caching_isSet;
}

bool OAIOSDisk::is_caching_Valid() const{
    return m_caching_isValid;
}

OAICreateOption OAIOSDisk::getCreateOption() const {
    return m_create_option;
}
void OAIOSDisk::setCreateOption(const OAICreateOption &create_option) {
    m_create_option = create_option;
    m_create_option_isSet = true;
}

bool OAIOSDisk::is_create_option_Set() const{
    return m_create_option_isSet;
}

bool OAIOSDisk::is_create_option_Valid() const{
    return m_create_option_isValid;
}

OAIDiffDiskSettings OAIOSDisk::getDiffDiskSettings() const {
    return m_diff_disk_settings;
}
void OAIOSDisk::setDiffDiskSettings(const OAIDiffDiskSettings &diff_disk_settings) {
    m_diff_disk_settings = diff_disk_settings;
    m_diff_disk_settings_isSet = true;
}

bool OAIOSDisk::is_diff_disk_settings_Set() const{
    return m_diff_disk_settings_isSet;
}

bool OAIOSDisk::is_diff_disk_settings_Valid() const{
    return m_diff_disk_settings_isValid;
}

qint32 OAIOSDisk::getDiskSizeGb() const {
    return m_disk_size_gb;
}
void OAIOSDisk::setDiskSizeGb(const qint32 &disk_size_gb) {
    m_disk_size_gb = disk_size_gb;
    m_disk_size_gb_isSet = true;
}

bool OAIOSDisk::is_disk_size_gb_Set() const{
    return m_disk_size_gb_isSet;
}

bool OAIOSDisk::is_disk_size_gb_Valid() const{
    return m_disk_size_gb_isValid;
}

OAIDiskEncryptionSettings OAIOSDisk::getEncryptionSettings() const {
    return m_encryption_settings;
}
void OAIOSDisk::setEncryptionSettings(const OAIDiskEncryptionSettings &encryption_settings) {
    m_encryption_settings = encryption_settings;
    m_encryption_settings_isSet = true;
}

bool OAIOSDisk::is_encryption_settings_Set() const{
    return m_encryption_settings_isSet;
}

bool OAIOSDisk::is_encryption_settings_Valid() const{
    return m_encryption_settings_isValid;
}

OAIVirtualHardDisk OAIOSDisk::getImage() const {
    return m_image;
}
void OAIOSDisk::setImage(const OAIVirtualHardDisk &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIOSDisk::is_image_Set() const{
    return m_image_isSet;
}

bool OAIOSDisk::is_image_Valid() const{
    return m_image_isValid;
}

OAIManagedDiskParameters OAIOSDisk::getManagedDisk() const {
    return m_managed_disk;
}
void OAIOSDisk::setManagedDisk(const OAIManagedDiskParameters &managed_disk) {
    m_managed_disk = managed_disk;
    m_managed_disk_isSet = true;
}

bool OAIOSDisk::is_managed_disk_Set() const{
    return m_managed_disk_isSet;
}

bool OAIOSDisk::is_managed_disk_Valid() const{
    return m_managed_disk_isValid;
}

QString OAIOSDisk::getName() const {
    return m_name;
}
void OAIOSDisk::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOSDisk::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOSDisk::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOSDisk::getOsType() const {
    return m_os_type;
}
void OAIOSDisk::setOsType(const QString &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAIOSDisk::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAIOSDisk::is_os_type_Valid() const{
    return m_os_type_isValid;
}

OAIVirtualHardDisk OAIOSDisk::getVhd() const {
    return m_vhd;
}
void OAIOSDisk::setVhd(const OAIVirtualHardDisk &vhd) {
    m_vhd = vhd;
    m_vhd_isSet = true;
}

bool OAIOSDisk::is_vhd_Set() const{
    return m_vhd_isSet;
}

bool OAIOSDisk::is_vhd_Valid() const{
    return m_vhd_isValid;
}

bool OAIOSDisk::isWriteAcceleratorEnabled() const {
    return m_write_accelerator_enabled;
}
void OAIOSDisk::setWriteAcceleratorEnabled(const bool &write_accelerator_enabled) {
    m_write_accelerator_enabled = write_accelerator_enabled;
    m_write_accelerator_enabled_isSet = true;
}

bool OAIOSDisk::is_write_accelerator_enabled_Set() const{
    return m_write_accelerator_enabled_isSet;
}

bool OAIOSDisk::is_write_accelerator_enabled_Valid() const{
    return m_write_accelerator_enabled_isValid;
}

bool OAIOSDisk::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_caching.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_diff_disk_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_size_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_disk.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vhd.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_accelerator_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOSDisk::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_create_option_isValid && true;
}

} // namespace OpenAPI
