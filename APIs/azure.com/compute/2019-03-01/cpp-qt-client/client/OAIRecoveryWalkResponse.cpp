/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecoveryWalkResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecoveryWalkResponse::OAIRecoveryWalkResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecoveryWalkResponse::OAIRecoveryWalkResponse() {
    this->initializeModel();
}

OAIRecoveryWalkResponse::~OAIRecoveryWalkResponse() {}

void OAIRecoveryWalkResponse::initializeModel() {

    m_next_platform_update_domain_isSet = false;
    m_next_platform_update_domain_isValid = false;

    m_walk_performed_isSet = false;
    m_walk_performed_isValid = false;
}

void OAIRecoveryWalkResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecoveryWalkResponse::fromJsonObject(QJsonObject json) {

    m_next_platform_update_domain_isValid = ::OpenAPI::fromJsonValue(m_next_platform_update_domain, json[QString("nextPlatformUpdateDomain")]);
    m_next_platform_update_domain_isSet = !json[QString("nextPlatformUpdateDomain")].isNull() && m_next_platform_update_domain_isValid;

    m_walk_performed_isValid = ::OpenAPI::fromJsonValue(m_walk_performed, json[QString("walkPerformed")]);
    m_walk_performed_isSet = !json[QString("walkPerformed")].isNull() && m_walk_performed_isValid;
}

QString OAIRecoveryWalkResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecoveryWalkResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_platform_update_domain_isSet) {
        obj.insert(QString("nextPlatformUpdateDomain"), ::OpenAPI::toJsonValue(m_next_platform_update_domain));
    }
    if (m_walk_performed_isSet) {
        obj.insert(QString("walkPerformed"), ::OpenAPI::toJsonValue(m_walk_performed));
    }
    return obj;
}

qint32 OAIRecoveryWalkResponse::getNextPlatformUpdateDomain() const {
    return m_next_platform_update_domain;
}
void OAIRecoveryWalkResponse::setNextPlatformUpdateDomain(const qint32 &next_platform_update_domain) {
    m_next_platform_update_domain = next_platform_update_domain;
    m_next_platform_update_domain_isSet = true;
}

bool OAIRecoveryWalkResponse::is_next_platform_update_domain_Set() const{
    return m_next_platform_update_domain_isSet;
}

bool OAIRecoveryWalkResponse::is_next_platform_update_domain_Valid() const{
    return m_next_platform_update_domain_isValid;
}

bool OAIRecoveryWalkResponse::isWalkPerformed() const {
    return m_walk_performed;
}
void OAIRecoveryWalkResponse::setWalkPerformed(const bool &walk_performed) {
    m_walk_performed = walk_performed;
    m_walk_performed_isSet = true;
}

bool OAIRecoveryWalkResponse::is_walk_performed_Set() const{
    return m_walk_performed_isSet;
}

bool OAIRecoveryWalkResponse::is_walk_performed_Valid() const{
    return m_walk_performed_isValid;
}

bool OAIRecoveryWalkResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_platform_update_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_walk_performed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecoveryWalkResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
