/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDedicatedHostGroupProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDedicatedHostGroupProperties::OAIDedicatedHostGroupProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDedicatedHostGroupProperties::OAIDedicatedHostGroupProperties() {
    this->initializeModel();
}

OAIDedicatedHostGroupProperties::~OAIDedicatedHostGroupProperties() {}

void OAIDedicatedHostGroupProperties::initializeModel() {

    m_hosts_isSet = false;
    m_hosts_isValid = false;

    m_platform_fault_domain_count_isSet = false;
    m_platform_fault_domain_count_isValid = false;
}

void OAIDedicatedHostGroupProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDedicatedHostGroupProperties::fromJsonObject(QJsonObject json) {

    m_hosts_isValid = ::OpenAPI::fromJsonValue(m_hosts, json[QString("hosts")]);
    m_hosts_isSet = !json[QString("hosts")].isNull() && m_hosts_isValid;

    m_platform_fault_domain_count_isValid = ::OpenAPI::fromJsonValue(m_platform_fault_domain_count, json[QString("platformFaultDomainCount")]);
    m_platform_fault_domain_count_isSet = !json[QString("platformFaultDomainCount")].isNull() && m_platform_fault_domain_count_isValid;
}

QString OAIDedicatedHostGroupProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDedicatedHostGroupProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_hosts.size() > 0) {
        obj.insert(QString("hosts"), ::OpenAPI::toJsonValue(m_hosts));
    }
    if (m_platform_fault_domain_count_isSet) {
        obj.insert(QString("platformFaultDomainCount"), ::OpenAPI::toJsonValue(m_platform_fault_domain_count));
    }
    return obj;
}

QList<OAISubResourceReadOnly> OAIDedicatedHostGroupProperties::getHosts() const {
    return m_hosts;
}
void OAIDedicatedHostGroupProperties::setHosts(const QList<OAISubResourceReadOnly> &hosts) {
    m_hosts = hosts;
    m_hosts_isSet = true;
}

bool OAIDedicatedHostGroupProperties::is_hosts_Set() const{
    return m_hosts_isSet;
}

bool OAIDedicatedHostGroupProperties::is_hosts_Valid() const{
    return m_hosts_isValid;
}

qint32 OAIDedicatedHostGroupProperties::getPlatformFaultDomainCount() const {
    return m_platform_fault_domain_count;
}
void OAIDedicatedHostGroupProperties::setPlatformFaultDomainCount(const qint32 &platform_fault_domain_count) {
    m_platform_fault_domain_count = platform_fault_domain_count;
    m_platform_fault_domain_count_isSet = true;
}

bool OAIDedicatedHostGroupProperties::is_platform_fault_domain_count_Set() const{
    return m_platform_fault_domain_count_isSet;
}

bool OAIDedicatedHostGroupProperties::is_platform_fault_domain_count_Valid() const{
    return m_platform_fault_domain_count_isValid;
}

bool OAIDedicatedHostGroupProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hosts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_fault_domain_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDedicatedHostGroupProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_platform_fault_domain_count_isValid && true;
}

} // namespace OpenAPI
