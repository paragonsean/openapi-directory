/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutomaticOSUpgradePolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutomaticOSUpgradePolicy::OAIAutomaticOSUpgradePolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutomaticOSUpgradePolicy::OAIAutomaticOSUpgradePolicy() {
    this->initializeModel();
}

OAIAutomaticOSUpgradePolicy::~OAIAutomaticOSUpgradePolicy() {}

void OAIAutomaticOSUpgradePolicy::initializeModel() {

    m_disable_automatic_rollback_isSet = false;
    m_disable_automatic_rollback_isValid = false;

    m_enable_automatic_os_upgrade_isSet = false;
    m_enable_automatic_os_upgrade_isValid = false;
}

void OAIAutomaticOSUpgradePolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutomaticOSUpgradePolicy::fromJsonObject(QJsonObject json) {

    m_disable_automatic_rollback_isValid = ::OpenAPI::fromJsonValue(m_disable_automatic_rollback, json[QString("disableAutomaticRollback")]);
    m_disable_automatic_rollback_isSet = !json[QString("disableAutomaticRollback")].isNull() && m_disable_automatic_rollback_isValid;

    m_enable_automatic_os_upgrade_isValid = ::OpenAPI::fromJsonValue(m_enable_automatic_os_upgrade, json[QString("enableAutomaticOSUpgrade")]);
    m_enable_automatic_os_upgrade_isSet = !json[QString("enableAutomaticOSUpgrade")].isNull() && m_enable_automatic_os_upgrade_isValid;
}

QString OAIAutomaticOSUpgradePolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutomaticOSUpgradePolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_disable_automatic_rollback_isSet) {
        obj.insert(QString("disableAutomaticRollback"), ::OpenAPI::toJsonValue(m_disable_automatic_rollback));
    }
    if (m_enable_automatic_os_upgrade_isSet) {
        obj.insert(QString("enableAutomaticOSUpgrade"), ::OpenAPI::toJsonValue(m_enable_automatic_os_upgrade));
    }
    return obj;
}

bool OAIAutomaticOSUpgradePolicy::isDisableAutomaticRollback() const {
    return m_disable_automatic_rollback;
}
void OAIAutomaticOSUpgradePolicy::setDisableAutomaticRollback(const bool &disable_automatic_rollback) {
    m_disable_automatic_rollback = disable_automatic_rollback;
    m_disable_automatic_rollback_isSet = true;
}

bool OAIAutomaticOSUpgradePolicy::is_disable_automatic_rollback_Set() const{
    return m_disable_automatic_rollback_isSet;
}

bool OAIAutomaticOSUpgradePolicy::is_disable_automatic_rollback_Valid() const{
    return m_disable_automatic_rollback_isValid;
}

bool OAIAutomaticOSUpgradePolicy::isEnableAutomaticOsUpgrade() const {
    return m_enable_automatic_os_upgrade;
}
void OAIAutomaticOSUpgradePolicy::setEnableAutomaticOsUpgrade(const bool &enable_automatic_os_upgrade) {
    m_enable_automatic_os_upgrade = enable_automatic_os_upgrade;
    m_enable_automatic_os_upgrade_isSet = true;
}

bool OAIAutomaticOSUpgradePolicy::is_enable_automatic_os_upgrade_Set() const{
    return m_enable_automatic_os_upgrade_isSet;
}

bool OAIAutomaticOSUpgradePolicy::is_enable_automatic_os_upgrade_Valid() const{
    return m_enable_automatic_os_upgrade_isValid;
}

bool OAIAutomaticOSUpgradePolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disable_automatic_rollback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_automatic_os_upgrade_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutomaticOSUpgradePolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
