/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualMachineCaptureParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualMachineCaptureParameters::OAIVirtualMachineCaptureParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualMachineCaptureParameters::OAIVirtualMachineCaptureParameters() {
    this->initializeModel();
}

OAIVirtualMachineCaptureParameters::~OAIVirtualMachineCaptureParameters() {}

void OAIVirtualMachineCaptureParameters::initializeModel() {

    m_destination_container_name_isSet = false;
    m_destination_container_name_isValid = false;

    m_overwrite_vhds_isSet = false;
    m_overwrite_vhds_isValid = false;

    m_vhd_prefix_isSet = false;
    m_vhd_prefix_isValid = false;
}

void OAIVirtualMachineCaptureParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualMachineCaptureParameters::fromJsonObject(QJsonObject json) {

    m_destination_container_name_isValid = ::OpenAPI::fromJsonValue(m_destination_container_name, json[QString("destinationContainerName")]);
    m_destination_container_name_isSet = !json[QString("destinationContainerName")].isNull() && m_destination_container_name_isValid;

    m_overwrite_vhds_isValid = ::OpenAPI::fromJsonValue(m_overwrite_vhds, json[QString("overwriteVhds")]);
    m_overwrite_vhds_isSet = !json[QString("overwriteVhds")].isNull() && m_overwrite_vhds_isValid;

    m_vhd_prefix_isValid = ::OpenAPI::fromJsonValue(m_vhd_prefix, json[QString("vhdPrefix")]);
    m_vhd_prefix_isSet = !json[QString("vhdPrefix")].isNull() && m_vhd_prefix_isValid;
}

QString OAIVirtualMachineCaptureParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualMachineCaptureParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_container_name_isSet) {
        obj.insert(QString("destinationContainerName"), ::OpenAPI::toJsonValue(m_destination_container_name));
    }
    if (m_overwrite_vhds_isSet) {
        obj.insert(QString("overwriteVhds"), ::OpenAPI::toJsonValue(m_overwrite_vhds));
    }
    if (m_vhd_prefix_isSet) {
        obj.insert(QString("vhdPrefix"), ::OpenAPI::toJsonValue(m_vhd_prefix));
    }
    return obj;
}

QString OAIVirtualMachineCaptureParameters::getDestinationContainerName() const {
    return m_destination_container_name;
}
void OAIVirtualMachineCaptureParameters::setDestinationContainerName(const QString &destination_container_name) {
    m_destination_container_name = destination_container_name;
    m_destination_container_name_isSet = true;
}

bool OAIVirtualMachineCaptureParameters::is_destination_container_name_Set() const{
    return m_destination_container_name_isSet;
}

bool OAIVirtualMachineCaptureParameters::is_destination_container_name_Valid() const{
    return m_destination_container_name_isValid;
}

bool OAIVirtualMachineCaptureParameters::isOverwriteVhds() const {
    return m_overwrite_vhds;
}
void OAIVirtualMachineCaptureParameters::setOverwriteVhds(const bool &overwrite_vhds) {
    m_overwrite_vhds = overwrite_vhds;
    m_overwrite_vhds_isSet = true;
}

bool OAIVirtualMachineCaptureParameters::is_overwrite_vhds_Set() const{
    return m_overwrite_vhds_isSet;
}

bool OAIVirtualMachineCaptureParameters::is_overwrite_vhds_Valid() const{
    return m_overwrite_vhds_isValid;
}

QString OAIVirtualMachineCaptureParameters::getVhdPrefix() const {
    return m_vhd_prefix;
}
void OAIVirtualMachineCaptureParameters::setVhdPrefix(const QString &vhd_prefix) {
    m_vhd_prefix = vhd_prefix;
    m_vhd_prefix_isSet = true;
}

bool OAIVirtualMachineCaptureParameters::is_vhd_prefix_Set() const{
    return m_vhd_prefix_isSet;
}

bool OAIVirtualMachineCaptureParameters::is_vhd_prefix_Valid() const{
    return m_vhd_prefix_isValid;
}

bool OAIVirtualMachineCaptureParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_container_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overwrite_vhds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vhd_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualMachineCaptureParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_destination_container_name_isValid && m_overwrite_vhds_isValid && m_vhd_prefix_isValid && true;
}

} // namespace OpenAPI
