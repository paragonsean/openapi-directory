/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualMachineSize.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualMachineSize::OAIVirtualMachineSize(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualMachineSize::OAIVirtualMachineSize() {
    this->initializeModel();
}

OAIVirtualMachineSize::~OAIVirtualMachineSize() {}

void OAIVirtualMachineSize::initializeModel() {

    m_max_data_disk_count_isSet = false;
    m_max_data_disk_count_isValid = false;

    m_memory_in_mb_isSet = false;
    m_memory_in_mb_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_of_cores_isSet = false;
    m_number_of_cores_isValid = false;

    m_os_disk_size_in_mb_isSet = false;
    m_os_disk_size_in_mb_isValid = false;

    m_resource_disk_size_in_mb_isSet = false;
    m_resource_disk_size_in_mb_isValid = false;
}

void OAIVirtualMachineSize::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualMachineSize::fromJsonObject(QJsonObject json) {

    m_max_data_disk_count_isValid = ::OpenAPI::fromJsonValue(m_max_data_disk_count, json[QString("maxDataDiskCount")]);
    m_max_data_disk_count_isSet = !json[QString("maxDataDiskCount")].isNull() && m_max_data_disk_count_isValid;

    m_memory_in_mb_isValid = ::OpenAPI::fromJsonValue(m_memory_in_mb, json[QString("memoryInMB")]);
    m_memory_in_mb_isSet = !json[QString("memoryInMB")].isNull() && m_memory_in_mb_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_of_cores_isValid = ::OpenAPI::fromJsonValue(m_number_of_cores, json[QString("numberOfCores")]);
    m_number_of_cores_isSet = !json[QString("numberOfCores")].isNull() && m_number_of_cores_isValid;

    m_os_disk_size_in_mb_isValid = ::OpenAPI::fromJsonValue(m_os_disk_size_in_mb, json[QString("osDiskSizeInMB")]);
    m_os_disk_size_in_mb_isSet = !json[QString("osDiskSizeInMB")].isNull() && m_os_disk_size_in_mb_isValid;

    m_resource_disk_size_in_mb_isValid = ::OpenAPI::fromJsonValue(m_resource_disk_size_in_mb, json[QString("resourceDiskSizeInMB")]);
    m_resource_disk_size_in_mb_isSet = !json[QString("resourceDiskSizeInMB")].isNull() && m_resource_disk_size_in_mb_isValid;
}

QString OAIVirtualMachineSize::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualMachineSize::asJsonObject() const {
    QJsonObject obj;
    if (m_max_data_disk_count_isSet) {
        obj.insert(QString("maxDataDiskCount"), ::OpenAPI::toJsonValue(m_max_data_disk_count));
    }
    if (m_memory_in_mb_isSet) {
        obj.insert(QString("memoryInMB"), ::OpenAPI::toJsonValue(m_memory_in_mb));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_of_cores_isSet) {
        obj.insert(QString("numberOfCores"), ::OpenAPI::toJsonValue(m_number_of_cores));
    }
    if (m_os_disk_size_in_mb_isSet) {
        obj.insert(QString("osDiskSizeInMB"), ::OpenAPI::toJsonValue(m_os_disk_size_in_mb));
    }
    if (m_resource_disk_size_in_mb_isSet) {
        obj.insert(QString("resourceDiskSizeInMB"), ::OpenAPI::toJsonValue(m_resource_disk_size_in_mb));
    }
    return obj;
}

qint32 OAIVirtualMachineSize::getMaxDataDiskCount() const {
    return m_max_data_disk_count;
}
void OAIVirtualMachineSize::setMaxDataDiskCount(const qint32 &max_data_disk_count) {
    m_max_data_disk_count = max_data_disk_count;
    m_max_data_disk_count_isSet = true;
}

bool OAIVirtualMachineSize::is_max_data_disk_count_Set() const{
    return m_max_data_disk_count_isSet;
}

bool OAIVirtualMachineSize::is_max_data_disk_count_Valid() const{
    return m_max_data_disk_count_isValid;
}

qint32 OAIVirtualMachineSize::getMemoryInMb() const {
    return m_memory_in_mb;
}
void OAIVirtualMachineSize::setMemoryInMb(const qint32 &memory_in_mb) {
    m_memory_in_mb = memory_in_mb;
    m_memory_in_mb_isSet = true;
}

bool OAIVirtualMachineSize::is_memory_in_mb_Set() const{
    return m_memory_in_mb_isSet;
}

bool OAIVirtualMachineSize::is_memory_in_mb_Valid() const{
    return m_memory_in_mb_isValid;
}

QString OAIVirtualMachineSize::getName() const {
    return m_name;
}
void OAIVirtualMachineSize::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVirtualMachineSize::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVirtualMachineSize::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIVirtualMachineSize::getNumberOfCores() const {
    return m_number_of_cores;
}
void OAIVirtualMachineSize::setNumberOfCores(const qint32 &number_of_cores) {
    m_number_of_cores = number_of_cores;
    m_number_of_cores_isSet = true;
}

bool OAIVirtualMachineSize::is_number_of_cores_Set() const{
    return m_number_of_cores_isSet;
}

bool OAIVirtualMachineSize::is_number_of_cores_Valid() const{
    return m_number_of_cores_isValid;
}

qint32 OAIVirtualMachineSize::getOsDiskSizeInMb() const {
    return m_os_disk_size_in_mb;
}
void OAIVirtualMachineSize::setOsDiskSizeInMb(const qint32 &os_disk_size_in_mb) {
    m_os_disk_size_in_mb = os_disk_size_in_mb;
    m_os_disk_size_in_mb_isSet = true;
}

bool OAIVirtualMachineSize::is_os_disk_size_in_mb_Set() const{
    return m_os_disk_size_in_mb_isSet;
}

bool OAIVirtualMachineSize::is_os_disk_size_in_mb_Valid() const{
    return m_os_disk_size_in_mb_isValid;
}

qint32 OAIVirtualMachineSize::getResourceDiskSizeInMb() const {
    return m_resource_disk_size_in_mb;
}
void OAIVirtualMachineSize::setResourceDiskSizeInMb(const qint32 &resource_disk_size_in_mb) {
    m_resource_disk_size_in_mb = resource_disk_size_in_mb;
    m_resource_disk_size_in_mb_isSet = true;
}

bool OAIVirtualMachineSize::is_resource_disk_size_in_mb_Set() const{
    return m_resource_disk_size_in_mb_isSet;
}

bool OAIVirtualMachineSize::is_resource_disk_size_in_mb_Valid() const{
    return m_resource_disk_size_in_mb_isValid;
}

bool OAIVirtualMachineSize::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_data_disk_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_in_mb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_cores_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_disk_size_in_mb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_disk_size_in_mb_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualMachineSize::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
