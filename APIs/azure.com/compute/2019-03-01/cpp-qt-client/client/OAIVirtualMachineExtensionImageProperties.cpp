/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualMachineExtensionImageProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualMachineExtensionImageProperties::OAIVirtualMachineExtensionImageProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualMachineExtensionImageProperties::OAIVirtualMachineExtensionImageProperties() {
    this->initializeModel();
}

OAIVirtualMachineExtensionImageProperties::~OAIVirtualMachineExtensionImageProperties() {}

void OAIVirtualMachineExtensionImageProperties::initializeModel() {

    m_compute_role_isSet = false;
    m_compute_role_isValid = false;

    m_handler_schema_isSet = false;
    m_handler_schema_isValid = false;

    m_operating_system_isSet = false;
    m_operating_system_isValid = false;

    m_supports_multiple_extensions_isSet = false;
    m_supports_multiple_extensions_isValid = false;

    m_vm_scale_set_enabled_isSet = false;
    m_vm_scale_set_enabled_isValid = false;
}

void OAIVirtualMachineExtensionImageProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualMachineExtensionImageProperties::fromJsonObject(QJsonObject json) {

    m_compute_role_isValid = ::OpenAPI::fromJsonValue(m_compute_role, json[QString("computeRole")]);
    m_compute_role_isSet = !json[QString("computeRole")].isNull() && m_compute_role_isValid;

    m_handler_schema_isValid = ::OpenAPI::fromJsonValue(m_handler_schema, json[QString("handlerSchema")]);
    m_handler_schema_isSet = !json[QString("handlerSchema")].isNull() && m_handler_schema_isValid;

    m_operating_system_isValid = ::OpenAPI::fromJsonValue(m_operating_system, json[QString("operatingSystem")]);
    m_operating_system_isSet = !json[QString("operatingSystem")].isNull() && m_operating_system_isValid;

    m_supports_multiple_extensions_isValid = ::OpenAPI::fromJsonValue(m_supports_multiple_extensions, json[QString("supportsMultipleExtensions")]);
    m_supports_multiple_extensions_isSet = !json[QString("supportsMultipleExtensions")].isNull() && m_supports_multiple_extensions_isValid;

    m_vm_scale_set_enabled_isValid = ::OpenAPI::fromJsonValue(m_vm_scale_set_enabled, json[QString("vmScaleSetEnabled")]);
    m_vm_scale_set_enabled_isSet = !json[QString("vmScaleSetEnabled")].isNull() && m_vm_scale_set_enabled_isValid;
}

QString OAIVirtualMachineExtensionImageProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualMachineExtensionImageProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_compute_role_isSet) {
        obj.insert(QString("computeRole"), ::OpenAPI::toJsonValue(m_compute_role));
    }
    if (m_handler_schema_isSet) {
        obj.insert(QString("handlerSchema"), ::OpenAPI::toJsonValue(m_handler_schema));
    }
    if (m_operating_system_isSet) {
        obj.insert(QString("operatingSystem"), ::OpenAPI::toJsonValue(m_operating_system));
    }
    if (m_supports_multiple_extensions_isSet) {
        obj.insert(QString("supportsMultipleExtensions"), ::OpenAPI::toJsonValue(m_supports_multiple_extensions));
    }
    if (m_vm_scale_set_enabled_isSet) {
        obj.insert(QString("vmScaleSetEnabled"), ::OpenAPI::toJsonValue(m_vm_scale_set_enabled));
    }
    return obj;
}

QString OAIVirtualMachineExtensionImageProperties::getComputeRole() const {
    return m_compute_role;
}
void OAIVirtualMachineExtensionImageProperties::setComputeRole(const QString &compute_role) {
    m_compute_role = compute_role;
    m_compute_role_isSet = true;
}

bool OAIVirtualMachineExtensionImageProperties::is_compute_role_Set() const{
    return m_compute_role_isSet;
}

bool OAIVirtualMachineExtensionImageProperties::is_compute_role_Valid() const{
    return m_compute_role_isValid;
}

QString OAIVirtualMachineExtensionImageProperties::getHandlerSchema() const {
    return m_handler_schema;
}
void OAIVirtualMachineExtensionImageProperties::setHandlerSchema(const QString &handler_schema) {
    m_handler_schema = handler_schema;
    m_handler_schema_isSet = true;
}

bool OAIVirtualMachineExtensionImageProperties::is_handler_schema_Set() const{
    return m_handler_schema_isSet;
}

bool OAIVirtualMachineExtensionImageProperties::is_handler_schema_Valid() const{
    return m_handler_schema_isValid;
}

QString OAIVirtualMachineExtensionImageProperties::getOperatingSystem() const {
    return m_operating_system;
}
void OAIVirtualMachineExtensionImageProperties::setOperatingSystem(const QString &operating_system) {
    m_operating_system = operating_system;
    m_operating_system_isSet = true;
}

bool OAIVirtualMachineExtensionImageProperties::is_operating_system_Set() const{
    return m_operating_system_isSet;
}

bool OAIVirtualMachineExtensionImageProperties::is_operating_system_Valid() const{
    return m_operating_system_isValid;
}

bool OAIVirtualMachineExtensionImageProperties::isSupportsMultipleExtensions() const {
    return m_supports_multiple_extensions;
}
void OAIVirtualMachineExtensionImageProperties::setSupportsMultipleExtensions(const bool &supports_multiple_extensions) {
    m_supports_multiple_extensions = supports_multiple_extensions;
    m_supports_multiple_extensions_isSet = true;
}

bool OAIVirtualMachineExtensionImageProperties::is_supports_multiple_extensions_Set() const{
    return m_supports_multiple_extensions_isSet;
}

bool OAIVirtualMachineExtensionImageProperties::is_supports_multiple_extensions_Valid() const{
    return m_supports_multiple_extensions_isValid;
}

bool OAIVirtualMachineExtensionImageProperties::isVmScaleSetEnabled() const {
    return m_vm_scale_set_enabled;
}
void OAIVirtualMachineExtensionImageProperties::setVmScaleSetEnabled(const bool &vm_scale_set_enabled) {
    m_vm_scale_set_enabled = vm_scale_set_enabled;
    m_vm_scale_set_enabled_isSet = true;
}

bool OAIVirtualMachineExtensionImageProperties::is_vm_scale_set_enabled_Set() const{
    return m_vm_scale_set_enabled_isSet;
}

bool OAIVirtualMachineExtensionImageProperties::is_vm_scale_set_enabled_Valid() const{
    return m_vm_scale_set_enabled_isValid;
}

bool OAIVirtualMachineExtensionImageProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compute_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_handler_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_multiple_extensions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_scale_set_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualMachineExtensionImageProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_compute_role_isValid && m_handler_schema_isValid && m_operating_system_isValid && true;
}

} // namespace OpenAPI
