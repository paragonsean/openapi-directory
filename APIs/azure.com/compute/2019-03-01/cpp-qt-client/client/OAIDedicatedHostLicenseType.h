/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDedicatedHostLicenseType.h
 *
 * Specifies the software license type that will be applied to the VMs deployed on the dedicated host. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **None** &lt;br&gt;&lt;br&gt; **Windows_Server_Hybrid** &lt;br&gt;&lt;br&gt; **Windows_Server_Perpetual** &lt;br&gt;&lt;br&gt; Default: **None**
 */

#ifndef OAIDedicatedHostLicenseType_H
#define OAIDedicatedHostLicenseType_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDedicatedHostLicenseType : public OAIEnum {
public:
    OAIDedicatedHostLicenseType();
    OAIDedicatedHostLicenseType(QString json);
    ~OAIDedicatedHostLicenseType() override;

    QString asJson() const override;
    QJsonValue asJsonValue() const override;
    void fromJsonValue(QJsonValue json) override;
    void fromJson(QString jsonString) override;

    enum class eOAIDedicatedHostLicenseType {
        INVALID_VALUE_OPENAPI_GENERATED = 0,
        NONE, 
        WINDOWS_SERVER_HYBRID, 
        WINDOWS_SERVER_PERPETUAL
    };
    OAIDedicatedHostLicenseType::eOAIDedicatedHostLicenseType getValue() const;
    void setValue(const OAIDedicatedHostLicenseType::eOAIDedicatedHostLicenseType& value);
    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    eOAIDedicatedHostLicenseType m_value;
    bool m_value_isSet;
    bool m_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDedicatedHostLicenseType)

#endif // OAIDedicatedHostLicenseType_H
