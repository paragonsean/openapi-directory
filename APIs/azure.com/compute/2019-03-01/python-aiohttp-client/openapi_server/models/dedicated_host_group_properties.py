# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sub_resource_read_only import SubResourceReadOnly
from openapi_server import util


class DedicatedHostGroupProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hosts: List[SubResourceReadOnly]=None, platform_fault_domain_count: int=None):
        """DedicatedHostGroupProperties - a model defined in OpenAPI

        :param hosts: The hosts of this DedicatedHostGroupProperties.
        :param platform_fault_domain_count: The platform_fault_domain_count of this DedicatedHostGroupProperties.
        """
        self.openapi_types = {
            'hosts': List[SubResourceReadOnly],
            'platform_fault_domain_count': int
        }

        self.attribute_map = {
            'hosts': 'hosts',
            'platform_fault_domain_count': 'platformFaultDomainCount'
        }

        self._hosts = hosts
        self._platform_fault_domain_count = platform_fault_domain_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DedicatedHostGroupProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DedicatedHostGroupProperties of this DedicatedHostGroupProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hosts(self):
        """Gets the hosts of this DedicatedHostGroupProperties.

        A list of references to all dedicated hosts in the dedicated host group.

        :return: The hosts of this DedicatedHostGroupProperties.
        :rtype: List[SubResourceReadOnly]
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this DedicatedHostGroupProperties.

        A list of references to all dedicated hosts in the dedicated host group.

        :param hosts: The hosts of this DedicatedHostGroupProperties.
        :type hosts: List[SubResourceReadOnly]
        """

        self._hosts = hosts

    @property
    def platform_fault_domain_count(self):
        """Gets the platform_fault_domain_count of this DedicatedHostGroupProperties.

        Number of fault domains that the host group can span.

        :return: The platform_fault_domain_count of this DedicatedHostGroupProperties.
        :rtype: int
        """
        return self._platform_fault_domain_count

    @platform_fault_domain_count.setter
    def platform_fault_domain_count(self, platform_fault_domain_count):
        """Sets the platform_fault_domain_count of this DedicatedHostGroupProperties.

        Number of fault domains that the host group can span.

        :param platform_fault_domain_count: The platform_fault_domain_count of this DedicatedHostGroupProperties.
        :type platform_fault_domain_count: int
        """
        if platform_fault_domain_count is None:
            raise ValueError("Invalid value for `platform_fault_domain_count`, must not be `None`")
        if platform_fault_domain_count is not None and platform_fault_domain_count > 3:
            raise ValueError("Invalid value for `platform_fault_domain_count`, must be a value less than or equal to `3`")
        if platform_fault_domain_count is not None and platform_fault_domain_count < 1:
            raise ValueError("Invalid value for `platform_fault_domain_count`, must be a value greater than or equal to `1`")

        self._platform_fault_domain_count = platform_fault_domain_count
