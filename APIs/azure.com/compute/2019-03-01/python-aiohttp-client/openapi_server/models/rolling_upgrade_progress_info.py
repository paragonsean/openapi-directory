# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RollingUpgradeProgressInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, failed_instance_count: int=None, in_progress_instance_count: int=None, pending_instance_count: int=None, successful_instance_count: int=None):
        """RollingUpgradeProgressInfo - a model defined in OpenAPI

        :param failed_instance_count: The failed_instance_count of this RollingUpgradeProgressInfo.
        :param in_progress_instance_count: The in_progress_instance_count of this RollingUpgradeProgressInfo.
        :param pending_instance_count: The pending_instance_count of this RollingUpgradeProgressInfo.
        :param successful_instance_count: The successful_instance_count of this RollingUpgradeProgressInfo.
        """
        self.openapi_types = {
            'failed_instance_count': int,
            'in_progress_instance_count': int,
            'pending_instance_count': int,
            'successful_instance_count': int
        }

        self.attribute_map = {
            'failed_instance_count': 'failedInstanceCount',
            'in_progress_instance_count': 'inProgressInstanceCount',
            'pending_instance_count': 'pendingInstanceCount',
            'successful_instance_count': 'successfulInstanceCount'
        }

        self._failed_instance_count = failed_instance_count
        self._in_progress_instance_count = in_progress_instance_count
        self._pending_instance_count = pending_instance_count
        self._successful_instance_count = successful_instance_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RollingUpgradeProgressInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RollingUpgradeProgressInfo of this RollingUpgradeProgressInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def failed_instance_count(self):
        """Gets the failed_instance_count of this RollingUpgradeProgressInfo.

        The number of instances that have failed to be upgraded successfully.

        :return: The failed_instance_count of this RollingUpgradeProgressInfo.
        :rtype: int
        """
        return self._failed_instance_count

    @failed_instance_count.setter
    def failed_instance_count(self, failed_instance_count):
        """Sets the failed_instance_count of this RollingUpgradeProgressInfo.

        The number of instances that have failed to be upgraded successfully.

        :param failed_instance_count: The failed_instance_count of this RollingUpgradeProgressInfo.
        :type failed_instance_count: int
        """

        self._failed_instance_count = failed_instance_count

    @property
    def in_progress_instance_count(self):
        """Gets the in_progress_instance_count of this RollingUpgradeProgressInfo.

        The number of instances that are currently being upgraded.

        :return: The in_progress_instance_count of this RollingUpgradeProgressInfo.
        :rtype: int
        """
        return self._in_progress_instance_count

    @in_progress_instance_count.setter
    def in_progress_instance_count(self, in_progress_instance_count):
        """Sets the in_progress_instance_count of this RollingUpgradeProgressInfo.

        The number of instances that are currently being upgraded.

        :param in_progress_instance_count: The in_progress_instance_count of this RollingUpgradeProgressInfo.
        :type in_progress_instance_count: int
        """

        self._in_progress_instance_count = in_progress_instance_count

    @property
    def pending_instance_count(self):
        """Gets the pending_instance_count of this RollingUpgradeProgressInfo.

        The number of instances that have not yet begun to be upgraded.

        :return: The pending_instance_count of this RollingUpgradeProgressInfo.
        :rtype: int
        """
        return self._pending_instance_count

    @pending_instance_count.setter
    def pending_instance_count(self, pending_instance_count):
        """Sets the pending_instance_count of this RollingUpgradeProgressInfo.

        The number of instances that have not yet begun to be upgraded.

        :param pending_instance_count: The pending_instance_count of this RollingUpgradeProgressInfo.
        :type pending_instance_count: int
        """

        self._pending_instance_count = pending_instance_count

    @property
    def successful_instance_count(self):
        """Gets the successful_instance_count of this RollingUpgradeProgressInfo.

        The number of instances that have been successfully upgraded.

        :return: The successful_instance_count of this RollingUpgradeProgressInfo.
        :rtype: int
        """
        return self._successful_instance_count

    @successful_instance_count.setter
    def successful_instance_count(self, successful_instance_count):
        """Sets the successful_instance_count of this RollingUpgradeProgressInfo.

        The number of instances that have been successfully upgraded.

        :param successful_instance_count: The successful_instance_count of this RollingUpgradeProgressInfo.
        :type successful_instance_count: int
        """

        self._successful_instance_count = successful_instance_count
