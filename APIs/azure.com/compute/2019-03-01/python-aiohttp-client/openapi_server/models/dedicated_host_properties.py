# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dedicated_host_instance_view import DedicatedHostInstanceView
from openapi_server.models.dedicated_host_license_type import DedicatedHostLicenseType
from openapi_server.models.sub_resource_read_only import SubResourceReadOnly
from openapi_server import util


class DedicatedHostProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_replace_on_failure: bool=None, host_id: str=None, instance_view: DedicatedHostInstanceView=None, license_type: DedicatedHostLicenseType=None, platform_fault_domain: int=None, provisioning_state: str=None, provisioning_time: datetime=None, virtual_machines: List[SubResourceReadOnly]=None):
        """DedicatedHostProperties - a model defined in OpenAPI

        :param auto_replace_on_failure: The auto_replace_on_failure of this DedicatedHostProperties.
        :param host_id: The host_id of this DedicatedHostProperties.
        :param instance_view: The instance_view of this DedicatedHostProperties.
        :param license_type: The license_type of this DedicatedHostProperties.
        :param platform_fault_domain: The platform_fault_domain of this DedicatedHostProperties.
        :param provisioning_state: The provisioning_state of this DedicatedHostProperties.
        :param provisioning_time: The provisioning_time of this DedicatedHostProperties.
        :param virtual_machines: The virtual_machines of this DedicatedHostProperties.
        """
        self.openapi_types = {
            'auto_replace_on_failure': bool,
            'host_id': str,
            'instance_view': DedicatedHostInstanceView,
            'license_type': DedicatedHostLicenseType,
            'platform_fault_domain': int,
            'provisioning_state': str,
            'provisioning_time': datetime,
            'virtual_machines': List[SubResourceReadOnly]
        }

        self.attribute_map = {
            'auto_replace_on_failure': 'autoReplaceOnFailure',
            'host_id': 'hostId',
            'instance_view': 'instanceView',
            'license_type': 'licenseType',
            'platform_fault_domain': 'platformFaultDomain',
            'provisioning_state': 'provisioningState',
            'provisioning_time': 'provisioningTime',
            'virtual_machines': 'virtualMachines'
        }

        self._auto_replace_on_failure = auto_replace_on_failure
        self._host_id = host_id
        self._instance_view = instance_view
        self._license_type = license_type
        self._platform_fault_domain = platform_fault_domain
        self._provisioning_state = provisioning_state
        self._provisioning_time = provisioning_time
        self._virtual_machines = virtual_machines

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DedicatedHostProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DedicatedHostProperties of this DedicatedHostProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_replace_on_failure(self):
        """Gets the auto_replace_on_failure of this DedicatedHostProperties.

        Specifies whether the dedicated host should be replaced automatically in case of a failure. The value is defaulted to 'true' when not provided.

        :return: The auto_replace_on_failure of this DedicatedHostProperties.
        :rtype: bool
        """
        return self._auto_replace_on_failure

    @auto_replace_on_failure.setter
    def auto_replace_on_failure(self, auto_replace_on_failure):
        """Sets the auto_replace_on_failure of this DedicatedHostProperties.

        Specifies whether the dedicated host should be replaced automatically in case of a failure. The value is defaulted to 'true' when not provided.

        :param auto_replace_on_failure: The auto_replace_on_failure of this DedicatedHostProperties.
        :type auto_replace_on_failure: bool
        """

        self._auto_replace_on_failure = auto_replace_on_failure

    @property
    def host_id(self):
        """Gets the host_id of this DedicatedHostProperties.

        A unique id generated and assigned to the dedicated host by the platform. <br><br> Does not change throughout the lifetime of the host.

        :return: The host_id of this DedicatedHostProperties.
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this DedicatedHostProperties.

        A unique id generated and assigned to the dedicated host by the platform. <br><br> Does not change throughout the lifetime of the host.

        :param host_id: The host_id of this DedicatedHostProperties.
        :type host_id: str
        """

        self._host_id = host_id

    @property
    def instance_view(self):
        """Gets the instance_view of this DedicatedHostProperties.


        :return: The instance_view of this DedicatedHostProperties.
        :rtype: DedicatedHostInstanceView
        """
        return self._instance_view

    @instance_view.setter
    def instance_view(self, instance_view):
        """Sets the instance_view of this DedicatedHostProperties.


        :param instance_view: The instance_view of this DedicatedHostProperties.
        :type instance_view: DedicatedHostInstanceView
        """

        self._instance_view = instance_view

    @property
    def license_type(self):
        """Gets the license_type of this DedicatedHostProperties.


        :return: The license_type of this DedicatedHostProperties.
        :rtype: DedicatedHostLicenseType
        """
        return self._license_type

    @license_type.setter
    def license_type(self, license_type):
        """Sets the license_type of this DedicatedHostProperties.


        :param license_type: The license_type of this DedicatedHostProperties.
        :type license_type: DedicatedHostLicenseType
        """

        self._license_type = license_type

    @property
    def platform_fault_domain(self):
        """Gets the platform_fault_domain of this DedicatedHostProperties.

        Fault domain of the dedicated host within a dedicated host group.

        :return: The platform_fault_domain of this DedicatedHostProperties.
        :rtype: int
        """
        return self._platform_fault_domain

    @platform_fault_domain.setter
    def platform_fault_domain(self, platform_fault_domain):
        """Sets the platform_fault_domain of this DedicatedHostProperties.

        Fault domain of the dedicated host within a dedicated host group.

        :param platform_fault_domain: The platform_fault_domain of this DedicatedHostProperties.
        :type platform_fault_domain: int
        """
        if platform_fault_domain is not None and platform_fault_domain > 2:
            raise ValueError("Invalid value for `platform_fault_domain`, must be a value less than or equal to `2`")
        if platform_fault_domain is not None and platform_fault_domain < 0:
            raise ValueError("Invalid value for `platform_fault_domain`, must be a value greater than or equal to `0`")

        self._platform_fault_domain = platform_fault_domain

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this DedicatedHostProperties.

        The provisioning state, which only appears in the response.

        :return: The provisioning_state of this DedicatedHostProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this DedicatedHostProperties.

        The provisioning state, which only appears in the response.

        :param provisioning_state: The provisioning_state of this DedicatedHostProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def provisioning_time(self):
        """Gets the provisioning_time of this DedicatedHostProperties.

        The date when the host was first provisioned.

        :return: The provisioning_time of this DedicatedHostProperties.
        :rtype: datetime
        """
        return self._provisioning_time

    @provisioning_time.setter
    def provisioning_time(self, provisioning_time):
        """Sets the provisioning_time of this DedicatedHostProperties.

        The date when the host was first provisioned.

        :param provisioning_time: The provisioning_time of this DedicatedHostProperties.
        :type provisioning_time: datetime
        """

        self._provisioning_time = provisioning_time

    @property
    def virtual_machines(self):
        """Gets the virtual_machines of this DedicatedHostProperties.

        A list of references to all virtual machines in the Dedicated Host.

        :return: The virtual_machines of this DedicatedHostProperties.
        :rtype: List[SubResourceReadOnly]
        """
        return self._virtual_machines

    @virtual_machines.setter
    def virtual_machines(self, virtual_machines):
        """Sets the virtual_machines of this DedicatedHostProperties.

        A list of references to all virtual machines in the Dedicated Host.

        :param virtual_machines: The virtual_machines of this DedicatedHostProperties.
        :type virtual_machines: List[SubResourceReadOnly]
        """

        self._virtual_machines = virtual_machines
