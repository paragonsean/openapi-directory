# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dedicated_host_group_properties import DedicatedHostGroupProperties
from openapi_server import util


class DedicatedHostGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, properties: DedicatedHostGroupProperties=None, zones: List[str]=None, id: str=None, location: str=None, name: str=None, tags: Dict[str, str]=None, type: str=None):
        """DedicatedHostGroup - a model defined in OpenAPI

        :param properties: The properties of this DedicatedHostGroup.
        :param zones: The zones of this DedicatedHostGroup.
        :param id: The id of this DedicatedHostGroup.
        :param location: The location of this DedicatedHostGroup.
        :param name: The name of this DedicatedHostGroup.
        :param tags: The tags of this DedicatedHostGroup.
        :param type: The type of this DedicatedHostGroup.
        """
        self.openapi_types = {
            'properties': DedicatedHostGroupProperties,
            'zones': List[str],
            'id': str,
            'location': str,
            'name': str,
            'tags': Dict[str, str],
            'type': str
        }

        self.attribute_map = {
            'properties': 'properties',
            'zones': 'zones',
            'id': 'id',
            'location': 'location',
            'name': 'name',
            'tags': 'tags',
            'type': 'type'
        }

        self._properties = properties
        self._zones = zones
        self._id = id
        self._location = location
        self._name = name
        self._tags = tags
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DedicatedHostGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DedicatedHostGroup of this DedicatedHostGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def properties(self):
        """Gets the properties of this DedicatedHostGroup.


        :return: The properties of this DedicatedHostGroup.
        :rtype: DedicatedHostGroupProperties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this DedicatedHostGroup.


        :param properties: The properties of this DedicatedHostGroup.
        :type properties: DedicatedHostGroupProperties
        """

        self._properties = properties

    @property
    def zones(self):
        """Gets the zones of this DedicatedHostGroup.

        Availability Zone to use for this host group. Only single zone is supported. The zone can be assigned only during creation. If not provided, the group supports all zones in the region. If provided, enforces each host in the group to be in the same zone.

        :return: The zones of this DedicatedHostGroup.
        :rtype: List[str]
        """
        return self._zones

    @zones.setter
    def zones(self, zones):
        """Sets the zones of this DedicatedHostGroup.

        Availability Zone to use for this host group. Only single zone is supported. The zone can be assigned only during creation. If not provided, the group supports all zones in the region. If provided, enforces each host in the group to be in the same zone.

        :param zones: The zones of this DedicatedHostGroup.
        :type zones: List[str]
        """

        self._zones = zones

    @property
    def id(self):
        """Gets the id of this DedicatedHostGroup.

        Resource Id

        :return: The id of this DedicatedHostGroup.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DedicatedHostGroup.

        Resource Id

        :param id: The id of this DedicatedHostGroup.
        :type id: str
        """

        self._id = id

    @property
    def location(self):
        """Gets the location of this DedicatedHostGroup.

        Resource location

        :return: The location of this DedicatedHostGroup.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this DedicatedHostGroup.

        Resource location

        :param location: The location of this DedicatedHostGroup.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def name(self):
        """Gets the name of this DedicatedHostGroup.

        Resource name

        :return: The name of this DedicatedHostGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DedicatedHostGroup.

        Resource name

        :param name: The name of this DedicatedHostGroup.
        :type name: str
        """

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this DedicatedHostGroup.

        Resource tags

        :return: The tags of this DedicatedHostGroup.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DedicatedHostGroup.

        Resource tags

        :param tags: The tags of this DedicatedHostGroup.
        :type tags: Dict[str, str]
        """

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this DedicatedHostGroup.

        Resource type

        :return: The type of this DedicatedHostGroup.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DedicatedHostGroup.

        Resource type

        :param type: The type of this DedicatedHostGroup.
        :type type: str
        """

        self._type = type
