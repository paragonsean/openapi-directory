# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dedicated_host_available_capacity import DedicatedHostAvailableCapacity
from openapi_server.models.instance_view_status import InstanceViewStatus
from openapi_server import util


class DedicatedHostInstanceView(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_id: str=None, available_capacity: DedicatedHostAvailableCapacity=None, statuses: List[InstanceViewStatus]=None):
        """DedicatedHostInstanceView - a model defined in OpenAPI

        :param asset_id: The asset_id of this DedicatedHostInstanceView.
        :param available_capacity: The available_capacity of this DedicatedHostInstanceView.
        :param statuses: The statuses of this DedicatedHostInstanceView.
        """
        self.openapi_types = {
            'asset_id': str,
            'available_capacity': DedicatedHostAvailableCapacity,
            'statuses': List[InstanceViewStatus]
        }

        self.attribute_map = {
            'asset_id': 'assetId',
            'available_capacity': 'availableCapacity',
            'statuses': 'statuses'
        }

        self._asset_id = asset_id
        self._available_capacity = available_capacity
        self._statuses = statuses

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DedicatedHostInstanceView':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DedicatedHostInstanceView of this DedicatedHostInstanceView.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_id(self):
        """Gets the asset_id of this DedicatedHostInstanceView.

        Specifies the unique id of the dedicated physical machine on which the dedicated host resides.

        :return: The asset_id of this DedicatedHostInstanceView.
        :rtype: str
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this DedicatedHostInstanceView.

        Specifies the unique id of the dedicated physical machine on which the dedicated host resides.

        :param asset_id: The asset_id of this DedicatedHostInstanceView.
        :type asset_id: str
        """

        self._asset_id = asset_id

    @property
    def available_capacity(self):
        """Gets the available_capacity of this DedicatedHostInstanceView.


        :return: The available_capacity of this DedicatedHostInstanceView.
        :rtype: DedicatedHostAvailableCapacity
        """
        return self._available_capacity

    @available_capacity.setter
    def available_capacity(self, available_capacity):
        """Sets the available_capacity of this DedicatedHostInstanceView.


        :param available_capacity: The available_capacity of this DedicatedHostInstanceView.
        :type available_capacity: DedicatedHostAvailableCapacity
        """

        self._available_capacity = available_capacity

    @property
    def statuses(self):
        """Gets the statuses of this DedicatedHostInstanceView.

        The resource status information.

        :return: The statuses of this DedicatedHostInstanceView.
        :rtype: List[InstanceViewStatus]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this DedicatedHostInstanceView.

        The resource status information.

        :param statuses: The statuses of this DedicatedHostInstanceView.
        :type statuses: List[InstanceViewStatus]
        """

        self._statuses = statuses
