/*
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DedicatedHostInstanceView;
import org.openapitools.client.model.DedicatedHostLicenseType;
import org.openapitools.client.model.SubResourceReadOnly;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of the dedicated host.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:49:11.499765-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DedicatedHostProperties {
  public static final String SERIALIZED_NAME_AUTO_REPLACE_ON_FAILURE = "autoReplaceOnFailure";
  @SerializedName(SERIALIZED_NAME_AUTO_REPLACE_ON_FAILURE)
  private Boolean autoReplaceOnFailure;

  public static final String SERIALIZED_NAME_HOST_ID = "hostId";
  @SerializedName(SERIALIZED_NAME_HOST_ID)
  private String hostId;

  public static final String SERIALIZED_NAME_INSTANCE_VIEW = "instanceView";
  @SerializedName(SERIALIZED_NAME_INSTANCE_VIEW)
  private DedicatedHostInstanceView instanceView;

  public static final String SERIALIZED_NAME_LICENSE_TYPE = "licenseType";
  @SerializedName(SERIALIZED_NAME_LICENSE_TYPE)
  private DedicatedHostLicenseType licenseType;

  public static final String SERIALIZED_NAME_PLATFORM_FAULT_DOMAIN = "platformFaultDomain";
  @SerializedName(SERIALIZED_NAME_PLATFORM_FAULT_DOMAIN)
  private Integer platformFaultDomain;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_PROVISIONING_TIME = "provisioningTime";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_TIME)
  private OffsetDateTime provisioningTime;

  public static final String SERIALIZED_NAME_VIRTUAL_MACHINES = "virtualMachines";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_MACHINES)
  private List<SubResourceReadOnly> virtualMachines = new ArrayList<>();

  public DedicatedHostProperties() {
  }

  public DedicatedHostProperties(
     String hostId, 
     String provisioningState, 
     OffsetDateTime provisioningTime, 
     List<SubResourceReadOnly> virtualMachines
  ) {
    this();
    this.hostId = hostId;
    this.provisioningState = provisioningState;
    this.provisioningTime = provisioningTime;
    this.virtualMachines = virtualMachines;
  }

  public DedicatedHostProperties autoReplaceOnFailure(Boolean autoReplaceOnFailure) {
    this.autoReplaceOnFailure = autoReplaceOnFailure;
    return this;
  }

  /**
   * Specifies whether the dedicated host should be replaced automatically in case of a failure. The value is defaulted to &#39;true&#39; when not provided.
   * @return autoReplaceOnFailure
   */
  @javax.annotation.Nullable
  public Boolean getAutoReplaceOnFailure() {
    return autoReplaceOnFailure;
  }

  public void setAutoReplaceOnFailure(Boolean autoReplaceOnFailure) {
    this.autoReplaceOnFailure = autoReplaceOnFailure;
  }


  /**
   * A unique id generated and assigned to the dedicated host by the platform. &lt;br&gt;&lt;br&gt; Does not change throughout the lifetime of the host.
   * @return hostId
   */
  @javax.annotation.Nullable
  public String getHostId() {
    return hostId;
  }



  public DedicatedHostProperties instanceView(DedicatedHostInstanceView instanceView) {
    this.instanceView = instanceView;
    return this;
  }

  /**
   * Get instanceView
   * @return instanceView
   */
  @javax.annotation.Nullable
  public DedicatedHostInstanceView getInstanceView() {
    return instanceView;
  }

  public void setInstanceView(DedicatedHostInstanceView instanceView) {
    this.instanceView = instanceView;
  }


  public DedicatedHostProperties licenseType(DedicatedHostLicenseType licenseType) {
    this.licenseType = licenseType;
    return this;
  }

  /**
   * Get licenseType
   * @return licenseType
   */
  @javax.annotation.Nullable
  public DedicatedHostLicenseType getLicenseType() {
    return licenseType;
  }

  public void setLicenseType(DedicatedHostLicenseType licenseType) {
    this.licenseType = licenseType;
  }


  public DedicatedHostProperties platformFaultDomain(Integer platformFaultDomain) {
    this.platformFaultDomain = platformFaultDomain;
    return this;
  }

  /**
   * Fault domain of the dedicated host within a dedicated host group.
   * minimum: 0
   * maximum: 2
   * @return platformFaultDomain
   */
  @javax.annotation.Nullable
  public Integer getPlatformFaultDomain() {
    return platformFaultDomain;
  }

  public void setPlatformFaultDomain(Integer platformFaultDomain) {
    this.platformFaultDomain = platformFaultDomain;
  }


  /**
   * The provisioning state, which only appears in the response.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }



  /**
   * The date when the host was first provisioned.
   * @return provisioningTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getProvisioningTime() {
    return provisioningTime;
  }



  /**
   * A list of references to all virtual machines in the Dedicated Host.
   * @return virtualMachines
   */
  @javax.annotation.Nullable
  public List<SubResourceReadOnly> getVirtualMachines() {
    return virtualMachines;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DedicatedHostProperties dedicatedHostProperties = (DedicatedHostProperties) o;
    return Objects.equals(this.autoReplaceOnFailure, dedicatedHostProperties.autoReplaceOnFailure) &&
        Objects.equals(this.hostId, dedicatedHostProperties.hostId) &&
        Objects.equals(this.instanceView, dedicatedHostProperties.instanceView) &&
        Objects.equals(this.licenseType, dedicatedHostProperties.licenseType) &&
        Objects.equals(this.platformFaultDomain, dedicatedHostProperties.platformFaultDomain) &&
        Objects.equals(this.provisioningState, dedicatedHostProperties.provisioningState) &&
        Objects.equals(this.provisioningTime, dedicatedHostProperties.provisioningTime) &&
        Objects.equals(this.virtualMachines, dedicatedHostProperties.virtualMachines);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoReplaceOnFailure, hostId, instanceView, licenseType, platformFaultDomain, provisioningState, provisioningTime, virtualMachines);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DedicatedHostProperties {\n");
    sb.append("    autoReplaceOnFailure: ").append(toIndentedString(autoReplaceOnFailure)).append("\n");
    sb.append("    hostId: ").append(toIndentedString(hostId)).append("\n");
    sb.append("    instanceView: ").append(toIndentedString(instanceView)).append("\n");
    sb.append("    licenseType: ").append(toIndentedString(licenseType)).append("\n");
    sb.append("    platformFaultDomain: ").append(toIndentedString(platformFaultDomain)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    provisioningTime: ").append(toIndentedString(provisioningTime)).append("\n");
    sb.append("    virtualMachines: ").append(toIndentedString(virtualMachines)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoReplaceOnFailure");
    openapiFields.add("hostId");
    openapiFields.add("instanceView");
    openapiFields.add("licenseType");
    openapiFields.add("platformFaultDomain");
    openapiFields.add("provisioningState");
    openapiFields.add("provisioningTime");
    openapiFields.add("virtualMachines");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DedicatedHostProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DedicatedHostProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DedicatedHostProperties is not found in the empty JSON string", DedicatedHostProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DedicatedHostProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DedicatedHostProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("hostId") != null && !jsonObj.get("hostId").isJsonNull()) && !jsonObj.get("hostId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostId").toString()));
      }
      // validate the optional field `instanceView`
      if (jsonObj.get("instanceView") != null && !jsonObj.get("instanceView").isJsonNull()) {
        DedicatedHostInstanceView.validateJsonElement(jsonObj.get("instanceView"));
      }
      // validate the optional field `licenseType`
      if (jsonObj.get("licenseType") != null && !jsonObj.get("licenseType").isJsonNull()) {
        DedicatedHostLicenseType.validateJsonElement(jsonObj.get("licenseType"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if (jsonObj.get("virtualMachines") != null && !jsonObj.get("virtualMachines").isJsonNull()) {
        JsonArray jsonArrayvirtualMachines = jsonObj.getAsJsonArray("virtualMachines");
        if (jsonArrayvirtualMachines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("virtualMachines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `virtualMachines` to be an array in the JSON string but got `%s`", jsonObj.get("virtualMachines").toString()));
          }

          // validate the optional field `virtualMachines` (array)
          for (int i = 0; i < jsonArrayvirtualMachines.size(); i++) {
            SubResourceReadOnly.validateJsonElement(jsonArrayvirtualMachines.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DedicatedHostProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DedicatedHostProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DedicatedHostProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DedicatedHostProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DedicatedHostProperties>() {
           @Override
           public void write(JsonWriter out, DedicatedHostProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DedicatedHostProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DedicatedHostProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DedicatedHostProperties
   * @throws IOException if the JSON string is invalid with respect to DedicatedHostProperties
   */
  public static DedicatedHostProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DedicatedHostProperties.class);
  }

  /**
   * Convert an instance of DedicatedHostProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

