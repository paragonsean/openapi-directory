/*
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.StorageAccountType;
import org.openapitools.client.model.SubResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes an Operating System disk.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:49:11.499765-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImageOSDisk {
  public static final String SERIALIZED_NAME_BLOB_URI = "blobUri";
  @SerializedName(SERIALIZED_NAME_BLOB_URI)
  private String blobUri;

  /**
   * Specifies the caching requirements. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **None** &lt;br&gt;&lt;br&gt; **ReadOnly** &lt;br&gt;&lt;br&gt; **ReadWrite** &lt;br&gt;&lt;br&gt; Default: **None for Standard storage. ReadOnly for Premium storage**
   */
  @JsonAdapter(CachingEnum.Adapter.class)
  public enum CachingEnum {
    NONE("None"),
    
    READ_ONLY("ReadOnly"),
    
    READ_WRITE("ReadWrite");

    private String value;

    CachingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CachingEnum fromValue(String value) {
      for (CachingEnum b : CachingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CachingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CachingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CachingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CachingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CachingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CACHING = "caching";
  @SerializedName(SERIALIZED_NAME_CACHING)
  private CachingEnum caching;

  public static final String SERIALIZED_NAME_DISK_SIZE_G_B = "diskSizeGB";
  @SerializedName(SERIALIZED_NAME_DISK_SIZE_G_B)
  private Integer diskSizeGB;

  public static final String SERIALIZED_NAME_MANAGED_DISK = "managedDisk";
  @SerializedName(SERIALIZED_NAME_MANAGED_DISK)
  private SubResource managedDisk;

  /**
   * The OS State.
   */
  @JsonAdapter(OsStateEnum.Adapter.class)
  public enum OsStateEnum {
    GENERALIZED("Generalized"),
    
    SPECIALIZED("Specialized");

    private String value;

    OsStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OsStateEnum fromValue(String value) {
      for (OsStateEnum b : OsStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OsStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OsStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OsStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OsStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OsStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OS_STATE = "osState";
  @SerializedName(SERIALIZED_NAME_OS_STATE)
  private OsStateEnum osState;

  /**
   * This property allows you to specify the type of the OS that is included in the disk if creating a VM from a custom image. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **Windows** &lt;br&gt;&lt;br&gt; **Linux**
   */
  @JsonAdapter(OsTypeEnum.Adapter.class)
  public enum OsTypeEnum {
    WINDOWS("Windows"),
    
    LINUX("Linux");

    private String value;

    OsTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OsTypeEnum fromValue(String value) {
      for (OsTypeEnum b : OsTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OsTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OsTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OsTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OsTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OsTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OS_TYPE = "osType";
  @SerializedName(SERIALIZED_NAME_OS_TYPE)
  private OsTypeEnum osType;

  public static final String SERIALIZED_NAME_SNAPSHOT = "snapshot";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT)
  private SubResource snapshot;

  public static final String SERIALIZED_NAME_STORAGE_ACCOUNT_TYPE = "storageAccountType";
  @SerializedName(SERIALIZED_NAME_STORAGE_ACCOUNT_TYPE)
  private StorageAccountType storageAccountType;

  public ImageOSDisk() {
  }

  public ImageOSDisk blobUri(String blobUri) {
    this.blobUri = blobUri;
    return this;
  }

  /**
   * The Virtual Hard Disk.
   * @return blobUri
   */
  @javax.annotation.Nullable
  public String getBlobUri() {
    return blobUri;
  }

  public void setBlobUri(String blobUri) {
    this.blobUri = blobUri;
  }


  public ImageOSDisk caching(CachingEnum caching) {
    this.caching = caching;
    return this;
  }

  /**
   * Specifies the caching requirements. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **None** &lt;br&gt;&lt;br&gt; **ReadOnly** &lt;br&gt;&lt;br&gt; **ReadWrite** &lt;br&gt;&lt;br&gt; Default: **None for Standard storage. ReadOnly for Premium storage**
   * @return caching
   */
  @javax.annotation.Nullable
  public CachingEnum getCaching() {
    return caching;
  }

  public void setCaching(CachingEnum caching) {
    this.caching = caching;
  }


  public ImageOSDisk diskSizeGB(Integer diskSizeGB) {
    this.diskSizeGB = diskSizeGB;
    return this;
  }

  /**
   * Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. &lt;br&gt;&lt;br&gt; This value cannot be larger than 1023 GB
   * @return diskSizeGB
   */
  @javax.annotation.Nullable
  public Integer getDiskSizeGB() {
    return diskSizeGB;
  }

  public void setDiskSizeGB(Integer diskSizeGB) {
    this.diskSizeGB = diskSizeGB;
  }


  public ImageOSDisk managedDisk(SubResource managedDisk) {
    this.managedDisk = managedDisk;
    return this;
  }

  /**
   * Get managedDisk
   * @return managedDisk
   */
  @javax.annotation.Nullable
  public SubResource getManagedDisk() {
    return managedDisk;
  }

  public void setManagedDisk(SubResource managedDisk) {
    this.managedDisk = managedDisk;
  }


  public ImageOSDisk osState(OsStateEnum osState) {
    this.osState = osState;
    return this;
  }

  /**
   * The OS State.
   * @return osState
   */
  @javax.annotation.Nonnull
  public OsStateEnum getOsState() {
    return osState;
  }

  public void setOsState(OsStateEnum osState) {
    this.osState = osState;
  }


  public ImageOSDisk osType(OsTypeEnum osType) {
    this.osType = osType;
    return this;
  }

  /**
   * This property allows you to specify the type of the OS that is included in the disk if creating a VM from a custom image. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **Windows** &lt;br&gt;&lt;br&gt; **Linux**
   * @return osType
   */
  @javax.annotation.Nonnull
  public OsTypeEnum getOsType() {
    return osType;
  }

  public void setOsType(OsTypeEnum osType) {
    this.osType = osType;
  }


  public ImageOSDisk snapshot(SubResource snapshot) {
    this.snapshot = snapshot;
    return this;
  }

  /**
   * Get snapshot
   * @return snapshot
   */
  @javax.annotation.Nullable
  public SubResource getSnapshot() {
    return snapshot;
  }

  public void setSnapshot(SubResource snapshot) {
    this.snapshot = snapshot;
  }


  public ImageOSDisk storageAccountType(StorageAccountType storageAccountType) {
    this.storageAccountType = storageAccountType;
    return this;
  }

  /**
   * Get storageAccountType
   * @return storageAccountType
   */
  @javax.annotation.Nullable
  public StorageAccountType getStorageAccountType() {
    return storageAccountType;
  }

  public void setStorageAccountType(StorageAccountType storageAccountType) {
    this.storageAccountType = storageAccountType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageOSDisk imageOSDisk = (ImageOSDisk) o;
    return Objects.equals(this.blobUri, imageOSDisk.blobUri) &&
        Objects.equals(this.caching, imageOSDisk.caching) &&
        Objects.equals(this.diskSizeGB, imageOSDisk.diskSizeGB) &&
        Objects.equals(this.managedDisk, imageOSDisk.managedDisk) &&
        Objects.equals(this.osState, imageOSDisk.osState) &&
        Objects.equals(this.osType, imageOSDisk.osType) &&
        Objects.equals(this.snapshot, imageOSDisk.snapshot) &&
        Objects.equals(this.storageAccountType, imageOSDisk.storageAccountType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blobUri, caching, diskSizeGB, managedDisk, osState, osType, snapshot, storageAccountType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageOSDisk {\n");
    sb.append("    blobUri: ").append(toIndentedString(blobUri)).append("\n");
    sb.append("    caching: ").append(toIndentedString(caching)).append("\n");
    sb.append("    diskSizeGB: ").append(toIndentedString(diskSizeGB)).append("\n");
    sb.append("    managedDisk: ").append(toIndentedString(managedDisk)).append("\n");
    sb.append("    osState: ").append(toIndentedString(osState)).append("\n");
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("    snapshot: ").append(toIndentedString(snapshot)).append("\n");
    sb.append("    storageAccountType: ").append(toIndentedString(storageAccountType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blobUri");
    openapiFields.add("caching");
    openapiFields.add("diskSizeGB");
    openapiFields.add("managedDisk");
    openapiFields.add("osState");
    openapiFields.add("osType");
    openapiFields.add("snapshot");
    openapiFields.add("storageAccountType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("osState");
    openapiRequiredFields.add("osType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImageOSDisk
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImageOSDisk.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImageOSDisk is not found in the empty JSON string", ImageOSDisk.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImageOSDisk.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImageOSDisk` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ImageOSDisk.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("blobUri") != null && !jsonObj.get("blobUri").isJsonNull()) && !jsonObj.get("blobUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blobUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blobUri").toString()));
      }
      if ((jsonObj.get("caching") != null && !jsonObj.get("caching").isJsonNull()) && !jsonObj.get("caching").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caching` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caching").toString()));
      }
      // validate the optional field `caching`
      if (jsonObj.get("caching") != null && !jsonObj.get("caching").isJsonNull()) {
        CachingEnum.validateJsonElement(jsonObj.get("caching"));
      }
      // validate the optional field `managedDisk`
      if (jsonObj.get("managedDisk") != null && !jsonObj.get("managedDisk").isJsonNull()) {
        SubResource.validateJsonElement(jsonObj.get("managedDisk"));
      }
      if (!jsonObj.get("osState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osState").toString()));
      }
      // validate the required field `osState`
      OsStateEnum.validateJsonElement(jsonObj.get("osState"));
      if (!jsonObj.get("osType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osType").toString()));
      }
      // validate the required field `osType`
      OsTypeEnum.validateJsonElement(jsonObj.get("osType"));
      // validate the optional field `snapshot`
      if (jsonObj.get("snapshot") != null && !jsonObj.get("snapshot").isJsonNull()) {
        SubResource.validateJsonElement(jsonObj.get("snapshot"));
      }
      // validate the optional field `storageAccountType`
      if (jsonObj.get("storageAccountType") != null && !jsonObj.get("storageAccountType").isJsonNull()) {
        StorageAccountType.validateJsonElement(jsonObj.get("storageAccountType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImageOSDisk.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImageOSDisk' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImageOSDisk> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImageOSDisk.class));

       return (TypeAdapter<T>) new TypeAdapter<ImageOSDisk>() {
           @Override
           public void write(JsonWriter out, ImageOSDisk value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImageOSDisk read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImageOSDisk given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImageOSDisk
   * @throws IOException if the JSON string is invalid with respect to ImageOSDisk
   */
  public static ImageOSDisk fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImageOSDisk.class);
  }

  /**
   * Convert an instance of ImageOSDisk to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

