/*
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Output of virtual machine capture operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:49:11.499765-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VirtualMachineCaptureResult {
  public static final String SERIALIZED_NAME_$_SCHEMA = "$schema";
  @SerializedName(SERIALIZED_NAME_$_SCHEMA)
  private String $schema;

  public static final String SERIALIZED_NAME_CONTENT_VERSION = "contentVersion";
  @SerializedName(SERIALIZED_NAME_CONTENT_VERSION)
  private String contentVersion;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Object parameters;

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private List<Object> resources = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public VirtualMachineCaptureResult() {
  }

  public VirtualMachineCaptureResult(
     String $schema, 
     String contentVersion, 
     Object parameters, 
     List<Object> resources
  ) {
    this();
    this.$schema = $schema;
    this.contentVersion = contentVersion;
    this.parameters = parameters;
    this.resources = resources;
  }

  /**
   * the schema of the captured virtual machine
   * @return $schema
   */
  @javax.annotation.Nullable
  public String get$Schema() {
    return $schema;
  }



  /**
   * the version of the content
   * @return contentVersion
   */
  @javax.annotation.Nullable
  public String getContentVersion() {
    return contentVersion;
  }



  /**
   * parameters of the captured virtual machine
   * @return parameters
   */
  @javax.annotation.Nullable
  public Object getParameters() {
    return parameters;
  }



  /**
   * a list of resource items of the captured virtual machine
   * @return resources
   */
  @javax.annotation.Nullable
  public List<Object> getResources() {
    return resources;
  }



  public VirtualMachineCaptureResult id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Resource Id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualMachineCaptureResult virtualMachineCaptureResult = (VirtualMachineCaptureResult) o;
    return Objects.equals(this.$schema, virtualMachineCaptureResult.$schema) &&
        Objects.equals(this.contentVersion, virtualMachineCaptureResult.contentVersion) &&
        Objects.equals(this.parameters, virtualMachineCaptureResult.parameters) &&
        Objects.equals(this.resources, virtualMachineCaptureResult.resources) &&
        Objects.equals(this.id, virtualMachineCaptureResult.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash($schema, contentVersion, parameters, resources, id);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualMachineCaptureResult {\n");
    sb.append("    $schema: ").append(toIndentedString($schema)).append("\n");
    sb.append("    contentVersion: ").append(toIndentedString(contentVersion)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualMachineCaptureResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualMachineCaptureResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualMachineCaptureResult is not found in the empty JSON string", VirtualMachineCaptureResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualMachineCaptureResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualMachineCaptureResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("$schema") != null && !jsonObj.get("$schema").isJsonNull()) && !jsonObj.get("$schema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `$schema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("$schema").toString()));
      }
      if ((jsonObj.get("contentVersion") != null && !jsonObj.get("contentVersion").isJsonNull()) && !jsonObj.get("contentVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentVersion").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("resources") != null && !jsonObj.get("resources").isJsonNull() && !jsonObj.get("resources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `resources` to be an array in the JSON string but got `%s`", jsonObj.get("resources").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualMachineCaptureResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualMachineCaptureResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualMachineCaptureResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualMachineCaptureResult.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualMachineCaptureResult>() {
           @Override
           public void write(JsonWriter out, VirtualMachineCaptureResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualMachineCaptureResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualMachineCaptureResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualMachineCaptureResult
   * @throws IOException if the JSON string is invalid with respect to VirtualMachineCaptureResult
   */
  public static VirtualMachineCaptureResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualMachineCaptureResult.class);
  }

  /**
   * Convert an instance of VirtualMachineCaptureResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

