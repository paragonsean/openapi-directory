/*
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Api request input for LogAnalytics getRequestRateByInterval Api.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:49:11.499765-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RequestRateByIntervalInput {
  /**
   * Interval value in minutes used to create LogAnalytics call rate logs.
   */
  @JsonAdapter(IntervalLengthEnum.Adapter.class)
  public enum IntervalLengthEnum {
    THREE_MINS("ThreeMins"),
    
    FIVE_MINS("FiveMins"),
    
    THIRTY_MINS("ThirtyMins"),
    
    SIXTY_MINS("SixtyMins");

    private String value;

    IntervalLengthEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IntervalLengthEnum fromValue(String value) {
      for (IntervalLengthEnum b : IntervalLengthEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IntervalLengthEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IntervalLengthEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IntervalLengthEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IntervalLengthEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IntervalLengthEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INTERVAL_LENGTH = "intervalLength";
  @SerializedName(SERIALIZED_NAME_INTERVAL_LENGTH)
  private IntervalLengthEnum intervalLength;

  public static final String SERIALIZED_NAME_BLOB_CONTAINER_SAS_URI = "blobContainerSasUri";
  @SerializedName(SERIALIZED_NAME_BLOB_CONTAINER_SAS_URI)
  private String blobContainerSasUri;

  public static final String SERIALIZED_NAME_FROM_TIME = "fromTime";
  @SerializedName(SERIALIZED_NAME_FROM_TIME)
  private OffsetDateTime fromTime;

  public static final String SERIALIZED_NAME_GROUP_BY_OPERATION_NAME = "groupByOperationName";
  @SerializedName(SERIALIZED_NAME_GROUP_BY_OPERATION_NAME)
  private Boolean groupByOperationName;

  public static final String SERIALIZED_NAME_GROUP_BY_RESOURCE_NAME = "groupByResourceName";
  @SerializedName(SERIALIZED_NAME_GROUP_BY_RESOURCE_NAME)
  private Boolean groupByResourceName;

  public static final String SERIALIZED_NAME_GROUP_BY_THROTTLE_POLICY = "groupByThrottlePolicy";
  @SerializedName(SERIALIZED_NAME_GROUP_BY_THROTTLE_POLICY)
  private Boolean groupByThrottlePolicy;

  public static final String SERIALIZED_NAME_TO_TIME = "toTime";
  @SerializedName(SERIALIZED_NAME_TO_TIME)
  private OffsetDateTime toTime;

  public RequestRateByIntervalInput() {
  }

  public RequestRateByIntervalInput intervalLength(IntervalLengthEnum intervalLength) {
    this.intervalLength = intervalLength;
    return this;
  }

  /**
   * Interval value in minutes used to create LogAnalytics call rate logs.
   * @return intervalLength
   */
  @javax.annotation.Nonnull
  public IntervalLengthEnum getIntervalLength() {
    return intervalLength;
  }

  public void setIntervalLength(IntervalLengthEnum intervalLength) {
    this.intervalLength = intervalLength;
  }


  public RequestRateByIntervalInput blobContainerSasUri(String blobContainerSasUri) {
    this.blobContainerSasUri = blobContainerSasUri;
    return this;
  }

  /**
   * SAS Uri of the logging blob container to which LogAnalytics Api writes output logs to.
   * @return blobContainerSasUri
   */
  @javax.annotation.Nonnull
  public String getBlobContainerSasUri() {
    return blobContainerSasUri;
  }

  public void setBlobContainerSasUri(String blobContainerSasUri) {
    this.blobContainerSasUri = blobContainerSasUri;
  }


  public RequestRateByIntervalInput fromTime(OffsetDateTime fromTime) {
    this.fromTime = fromTime;
    return this;
  }

  /**
   * From time of the query
   * @return fromTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getFromTime() {
    return fromTime;
  }

  public void setFromTime(OffsetDateTime fromTime) {
    this.fromTime = fromTime;
  }


  public RequestRateByIntervalInput groupByOperationName(Boolean groupByOperationName) {
    this.groupByOperationName = groupByOperationName;
    return this;
  }

  /**
   * Group query result by Operation Name.
   * @return groupByOperationName
   */
  @javax.annotation.Nullable
  public Boolean getGroupByOperationName() {
    return groupByOperationName;
  }

  public void setGroupByOperationName(Boolean groupByOperationName) {
    this.groupByOperationName = groupByOperationName;
  }


  public RequestRateByIntervalInput groupByResourceName(Boolean groupByResourceName) {
    this.groupByResourceName = groupByResourceName;
    return this;
  }

  /**
   * Group query result by Resource Name.
   * @return groupByResourceName
   */
  @javax.annotation.Nullable
  public Boolean getGroupByResourceName() {
    return groupByResourceName;
  }

  public void setGroupByResourceName(Boolean groupByResourceName) {
    this.groupByResourceName = groupByResourceName;
  }


  public RequestRateByIntervalInput groupByThrottlePolicy(Boolean groupByThrottlePolicy) {
    this.groupByThrottlePolicy = groupByThrottlePolicy;
    return this;
  }

  /**
   * Group query result by Throttle Policy applied.
   * @return groupByThrottlePolicy
   */
  @javax.annotation.Nullable
  public Boolean getGroupByThrottlePolicy() {
    return groupByThrottlePolicy;
  }

  public void setGroupByThrottlePolicy(Boolean groupByThrottlePolicy) {
    this.groupByThrottlePolicy = groupByThrottlePolicy;
  }


  public RequestRateByIntervalInput toTime(OffsetDateTime toTime) {
    this.toTime = toTime;
    return this;
  }

  /**
   * To time of the query
   * @return toTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getToTime() {
    return toTime;
  }

  public void setToTime(OffsetDateTime toTime) {
    this.toTime = toTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestRateByIntervalInput requestRateByIntervalInput = (RequestRateByIntervalInput) o;
    return Objects.equals(this.intervalLength, requestRateByIntervalInput.intervalLength) &&
        Objects.equals(this.blobContainerSasUri, requestRateByIntervalInput.blobContainerSasUri) &&
        Objects.equals(this.fromTime, requestRateByIntervalInput.fromTime) &&
        Objects.equals(this.groupByOperationName, requestRateByIntervalInput.groupByOperationName) &&
        Objects.equals(this.groupByResourceName, requestRateByIntervalInput.groupByResourceName) &&
        Objects.equals(this.groupByThrottlePolicy, requestRateByIntervalInput.groupByThrottlePolicy) &&
        Objects.equals(this.toTime, requestRateByIntervalInput.toTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(intervalLength, blobContainerSasUri, fromTime, groupByOperationName, groupByResourceName, groupByThrottlePolicy, toTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestRateByIntervalInput {\n");
    sb.append("    intervalLength: ").append(toIndentedString(intervalLength)).append("\n");
    sb.append("    blobContainerSasUri: ").append(toIndentedString(blobContainerSasUri)).append("\n");
    sb.append("    fromTime: ").append(toIndentedString(fromTime)).append("\n");
    sb.append("    groupByOperationName: ").append(toIndentedString(groupByOperationName)).append("\n");
    sb.append("    groupByResourceName: ").append(toIndentedString(groupByResourceName)).append("\n");
    sb.append("    groupByThrottlePolicy: ").append(toIndentedString(groupByThrottlePolicy)).append("\n");
    sb.append("    toTime: ").append(toIndentedString(toTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blobContainerSasUri");
    openapiFields.add("fromTime");
    openapiFields.add("groupByOperationName");
    openapiFields.add("groupByResourceName");
    openapiFields.add("groupByThrottlePolicy");
    openapiFields.add("toTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("intervalLength");
    openapiRequiredFields.add("blobContainerSasUri");
    openapiRequiredFields.add("fromTime");
    openapiRequiredFields.add("toTime");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RequestRateByIntervalInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RequestRateByIntervalInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RequestRateByIntervalInput is not found in the empty JSON string", RequestRateByIntervalInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RequestRateByIntervalInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RequestRateByIntervalInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RequestRateByIntervalInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("intervalLength").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `intervalLength` to be a primitive type in the JSON string but got `%s`", jsonObj.get("intervalLength").toString()));
      }
      // validate the required field `intervalLength`
      IntervalLengthEnum.validateJsonElement(jsonObj.get("intervalLength"));
      if (!jsonObj.get("blobContainerSasUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blobContainerSasUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blobContainerSasUri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RequestRateByIntervalInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RequestRateByIntervalInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RequestRateByIntervalInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RequestRateByIntervalInput.class));

       return (TypeAdapter<T>) new TypeAdapter<RequestRateByIntervalInput>() {
           @Override
           public void write(JsonWriter out, RequestRateByIntervalInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RequestRateByIntervalInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RequestRateByIntervalInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RequestRateByIntervalInput
   * @throws IOException if the JSON string is invalid with respect to RequestRateByIntervalInput
   */
  public static RequestRateByIntervalInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RequestRateByIntervalInput.class);
  }

  /**
   * Convert an instance of RequestRateByIntervalInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

