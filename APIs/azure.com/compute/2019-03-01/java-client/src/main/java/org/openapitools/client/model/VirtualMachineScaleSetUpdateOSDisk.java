/*
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Caching;
import org.openapitools.client.model.VirtualHardDisk;
import org.openapitools.client.model.VirtualMachineScaleSetManagedDiskParameters;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes virtual machine scale set operating system disk Update Object. This should be used for Updating VMSS OS Disk.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:49:11.499765-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VirtualMachineScaleSetUpdateOSDisk {
  public static final String SERIALIZED_NAME_CACHING = "caching";
  @SerializedName(SERIALIZED_NAME_CACHING)
  private Caching caching;

  public static final String SERIALIZED_NAME_DISK_SIZE_G_B = "diskSizeGB";
  @SerializedName(SERIALIZED_NAME_DISK_SIZE_G_B)
  private Integer diskSizeGB;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private VirtualHardDisk image;

  public static final String SERIALIZED_NAME_MANAGED_DISK = "managedDisk";
  @SerializedName(SERIALIZED_NAME_MANAGED_DISK)
  private VirtualMachineScaleSetManagedDiskParameters managedDisk;

  public static final String SERIALIZED_NAME_VHD_CONTAINERS = "vhdContainers";
  @SerializedName(SERIALIZED_NAME_VHD_CONTAINERS)
  private List<String> vhdContainers = new ArrayList<>();

  public static final String SERIALIZED_NAME_WRITE_ACCELERATOR_ENABLED = "writeAcceleratorEnabled";
  @SerializedName(SERIALIZED_NAME_WRITE_ACCELERATOR_ENABLED)
  private Boolean writeAcceleratorEnabled;

  public VirtualMachineScaleSetUpdateOSDisk() {
  }

  public VirtualMachineScaleSetUpdateOSDisk caching(Caching caching) {
    this.caching = caching;
    return this;
  }

  /**
   * Get caching
   * @return caching
   */
  @javax.annotation.Nullable
  public Caching getCaching() {
    return caching;
  }

  public void setCaching(Caching caching) {
    this.caching = caching;
  }


  public VirtualMachineScaleSetUpdateOSDisk diskSizeGB(Integer diskSizeGB) {
    this.diskSizeGB = diskSizeGB;
    return this;
  }

  /**
   * Specifies the size of the operating system disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. &lt;br&gt;&lt;br&gt; This value cannot be larger than 1023 GB
   * @return diskSizeGB
   */
  @javax.annotation.Nullable
  public Integer getDiskSizeGB() {
    return diskSizeGB;
  }

  public void setDiskSizeGB(Integer diskSizeGB) {
    this.diskSizeGB = diskSizeGB;
  }


  public VirtualMachineScaleSetUpdateOSDisk image(VirtualHardDisk image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public VirtualHardDisk getImage() {
    return image;
  }

  public void setImage(VirtualHardDisk image) {
    this.image = image;
  }


  public VirtualMachineScaleSetUpdateOSDisk managedDisk(VirtualMachineScaleSetManagedDiskParameters managedDisk) {
    this.managedDisk = managedDisk;
    return this;
  }

  /**
   * Get managedDisk
   * @return managedDisk
   */
  @javax.annotation.Nullable
  public VirtualMachineScaleSetManagedDiskParameters getManagedDisk() {
    return managedDisk;
  }

  public void setManagedDisk(VirtualMachineScaleSetManagedDiskParameters managedDisk) {
    this.managedDisk = managedDisk;
  }


  public VirtualMachineScaleSetUpdateOSDisk vhdContainers(List<String> vhdContainers) {
    this.vhdContainers = vhdContainers;
    return this;
  }

  public VirtualMachineScaleSetUpdateOSDisk addVhdContainersItem(String vhdContainersItem) {
    if (this.vhdContainers == null) {
      this.vhdContainers = new ArrayList<>();
    }
    this.vhdContainers.add(vhdContainersItem);
    return this;
  }

  /**
   * The list of virtual hard disk container uris.
   * @return vhdContainers
   */
  @javax.annotation.Nullable
  public List<String> getVhdContainers() {
    return vhdContainers;
  }

  public void setVhdContainers(List<String> vhdContainers) {
    this.vhdContainers = vhdContainers;
  }


  public VirtualMachineScaleSetUpdateOSDisk writeAcceleratorEnabled(Boolean writeAcceleratorEnabled) {
    this.writeAcceleratorEnabled = writeAcceleratorEnabled;
    return this;
  }

  /**
   * Specifies whether writeAccelerator should be enabled or disabled on the disk.
   * @return writeAcceleratorEnabled
   */
  @javax.annotation.Nullable
  public Boolean getWriteAcceleratorEnabled() {
    return writeAcceleratorEnabled;
  }

  public void setWriteAcceleratorEnabled(Boolean writeAcceleratorEnabled) {
    this.writeAcceleratorEnabled = writeAcceleratorEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualMachineScaleSetUpdateOSDisk virtualMachineScaleSetUpdateOSDisk = (VirtualMachineScaleSetUpdateOSDisk) o;
    return Objects.equals(this.caching, virtualMachineScaleSetUpdateOSDisk.caching) &&
        Objects.equals(this.diskSizeGB, virtualMachineScaleSetUpdateOSDisk.diskSizeGB) &&
        Objects.equals(this.image, virtualMachineScaleSetUpdateOSDisk.image) &&
        Objects.equals(this.managedDisk, virtualMachineScaleSetUpdateOSDisk.managedDisk) &&
        Objects.equals(this.vhdContainers, virtualMachineScaleSetUpdateOSDisk.vhdContainers) &&
        Objects.equals(this.writeAcceleratorEnabled, virtualMachineScaleSetUpdateOSDisk.writeAcceleratorEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caching, diskSizeGB, image, managedDisk, vhdContainers, writeAcceleratorEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualMachineScaleSetUpdateOSDisk {\n");
    sb.append("    caching: ").append(toIndentedString(caching)).append("\n");
    sb.append("    diskSizeGB: ").append(toIndentedString(diskSizeGB)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    managedDisk: ").append(toIndentedString(managedDisk)).append("\n");
    sb.append("    vhdContainers: ").append(toIndentedString(vhdContainers)).append("\n");
    sb.append("    writeAcceleratorEnabled: ").append(toIndentedString(writeAcceleratorEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("caching");
    openapiFields.add("diskSizeGB");
    openapiFields.add("image");
    openapiFields.add("managedDisk");
    openapiFields.add("vhdContainers");
    openapiFields.add("writeAcceleratorEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualMachineScaleSetUpdateOSDisk
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualMachineScaleSetUpdateOSDisk.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualMachineScaleSetUpdateOSDisk is not found in the empty JSON string", VirtualMachineScaleSetUpdateOSDisk.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualMachineScaleSetUpdateOSDisk.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualMachineScaleSetUpdateOSDisk` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `caching`
      if (jsonObj.get("caching") != null && !jsonObj.get("caching").isJsonNull()) {
        Caching.validateJsonElement(jsonObj.get("caching"));
      }
      // validate the optional field `image`
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        VirtualHardDisk.validateJsonElement(jsonObj.get("image"));
      }
      // validate the optional field `managedDisk`
      if (jsonObj.get("managedDisk") != null && !jsonObj.get("managedDisk").isJsonNull()) {
        VirtualMachineScaleSetManagedDiskParameters.validateJsonElement(jsonObj.get("managedDisk"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("vhdContainers") != null && !jsonObj.get("vhdContainers").isJsonNull() && !jsonObj.get("vhdContainers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `vhdContainers` to be an array in the JSON string but got `%s`", jsonObj.get("vhdContainers").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualMachineScaleSetUpdateOSDisk.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualMachineScaleSetUpdateOSDisk' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualMachineScaleSetUpdateOSDisk> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualMachineScaleSetUpdateOSDisk.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualMachineScaleSetUpdateOSDisk>() {
           @Override
           public void write(JsonWriter out, VirtualMachineScaleSetUpdateOSDisk value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualMachineScaleSetUpdateOSDisk read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualMachineScaleSetUpdateOSDisk given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualMachineScaleSetUpdateOSDisk
   * @throws IOException if the JSON string is invalid with respect to VirtualMachineScaleSetUpdateOSDisk
   */
  public static VirtualMachineScaleSetUpdateOSDisk fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualMachineScaleSetUpdateOSDisk.class);
  }

  /**
   * Convert an instance of VirtualMachineScaleSetUpdateOSDisk to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

