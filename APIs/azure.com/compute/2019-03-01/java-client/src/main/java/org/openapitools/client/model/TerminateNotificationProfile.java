/*
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TerminateNotificationProfile
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:49:11.499765-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TerminateNotificationProfile {
  public static final String SERIALIZED_NAME_ENABLE = "enable";
  @SerializedName(SERIALIZED_NAME_ENABLE)
  private Boolean enable;

  public static final String SERIALIZED_NAME_NOT_BEFORE_TIMEOUT = "notBeforeTimeout";
  @SerializedName(SERIALIZED_NAME_NOT_BEFORE_TIMEOUT)
  private String notBeforeTimeout;

  public TerminateNotificationProfile() {
  }

  public TerminateNotificationProfile enable(Boolean enable) {
    this.enable = enable;
    return this;
  }

  /**
   * Specifies whether the Terminate Scheduled event is enabled or disabled.
   * @return enable
   */
  @javax.annotation.Nullable
  public Boolean getEnable() {
    return enable;
  }

  public void setEnable(Boolean enable) {
    this.enable = enable;
  }


  public TerminateNotificationProfile notBeforeTimeout(String notBeforeTimeout) {
    this.notBeforeTimeout = notBeforeTimeout;
    return this;
  }

  /**
   * Configurable length of time a Virtual Machine being deleted will have to potentially approve the Terminate Scheduled Event before the event is auto approved (timed out). The configuration must be specified in ISO 8601 format, the default value is 5 minutes (PT5M)
   * @return notBeforeTimeout
   */
  @javax.annotation.Nullable
  public String getNotBeforeTimeout() {
    return notBeforeTimeout;
  }

  public void setNotBeforeTimeout(String notBeforeTimeout) {
    this.notBeforeTimeout = notBeforeTimeout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TerminateNotificationProfile terminateNotificationProfile = (TerminateNotificationProfile) o;
    return Objects.equals(this.enable, terminateNotificationProfile.enable) &&
        Objects.equals(this.notBeforeTimeout, terminateNotificationProfile.notBeforeTimeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enable, notBeforeTimeout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TerminateNotificationProfile {\n");
    sb.append("    enable: ").append(toIndentedString(enable)).append("\n");
    sb.append("    notBeforeTimeout: ").append(toIndentedString(notBeforeTimeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enable");
    openapiFields.add("notBeforeTimeout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TerminateNotificationProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TerminateNotificationProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TerminateNotificationProfile is not found in the empty JSON string", TerminateNotificationProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TerminateNotificationProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TerminateNotificationProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("notBeforeTimeout") != null && !jsonObj.get("notBeforeTimeout").isJsonNull()) && !jsonObj.get("notBeforeTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notBeforeTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notBeforeTimeout").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TerminateNotificationProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TerminateNotificationProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TerminateNotificationProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TerminateNotificationProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<TerminateNotificationProfile>() {
           @Override
           public void write(JsonWriter out, TerminateNotificationProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TerminateNotificationProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TerminateNotificationProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TerminateNotificationProfile
   * @throws IOException if the JSON string is invalid with respect to TerminateNotificationProfile
   */
  public static TerminateNotificationProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TerminateNotificationProfile.class);
  }

  /**
   * Convert an instance of TerminateNotificationProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

