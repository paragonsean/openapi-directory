/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DedicatedHostInstanceView from './DedicatedHostInstanceView';
import DedicatedHostLicenseType from './DedicatedHostLicenseType';
import SubResourceReadOnly from './SubResourceReadOnly';

/**
 * The DedicatedHostProperties model module.
 * @module model/DedicatedHostProperties
 * @version 2019-03-01
 */
class DedicatedHostProperties {
    /**
     * Constructs a new <code>DedicatedHostProperties</code>.
     * Properties of the dedicated host.
     * @alias module:model/DedicatedHostProperties
     */
    constructor() { 
        
        DedicatedHostProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DedicatedHostProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DedicatedHostProperties} obj Optional instance to populate.
     * @return {module:model/DedicatedHostProperties} The populated <code>DedicatedHostProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DedicatedHostProperties();

            if (data.hasOwnProperty('autoReplaceOnFailure')) {
                obj['autoReplaceOnFailure'] = ApiClient.convertToType(data['autoReplaceOnFailure'], 'Boolean');
            }
            if (data.hasOwnProperty('hostId')) {
                obj['hostId'] = ApiClient.convertToType(data['hostId'], 'String');
            }
            if (data.hasOwnProperty('instanceView')) {
                obj['instanceView'] = DedicatedHostInstanceView.constructFromObject(data['instanceView']);
            }
            if (data.hasOwnProperty('licenseType')) {
                obj['licenseType'] = DedicatedHostLicenseType.constructFromObject(data['licenseType']);
            }
            if (data.hasOwnProperty('platformFaultDomain')) {
                obj['platformFaultDomain'] = ApiClient.convertToType(data['platformFaultDomain'], 'Number');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('provisioningTime')) {
                obj['provisioningTime'] = ApiClient.convertToType(data['provisioningTime'], 'Date');
            }
            if (data.hasOwnProperty('virtualMachines')) {
                obj['virtualMachines'] = ApiClient.convertToType(data['virtualMachines'], [SubResourceReadOnly]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DedicatedHostProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DedicatedHostProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['hostId'] && !(typeof data['hostId'] === 'string' || data['hostId'] instanceof String)) {
            throw new Error("Expected the field `hostId` to be a primitive type in the JSON string but got " + data['hostId']);
        }
        // validate the optional field `instanceView`
        if (data['instanceView']) { // data not null
          DedicatedHostInstanceView.validateJSON(data['instanceView']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        if (data['virtualMachines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['virtualMachines'])) {
                throw new Error("Expected the field `virtualMachines` to be an array in the JSON data but got " + data['virtualMachines']);
            }
            // validate the optional field `virtualMachines` (array)
            for (const item of data['virtualMachines']) {
                SubResourceReadOnly.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Specifies whether the dedicated host should be replaced automatically in case of a failure. The value is defaulted to 'true' when not provided.
 * @member {Boolean} autoReplaceOnFailure
 */
DedicatedHostProperties.prototype['autoReplaceOnFailure'] = undefined;

/**
 * A unique id generated and assigned to the dedicated host by the platform. <br><br> Does not change throughout the lifetime of the host.
 * @member {String} hostId
 */
DedicatedHostProperties.prototype['hostId'] = undefined;

/**
 * @member {module:model/DedicatedHostInstanceView} instanceView
 */
DedicatedHostProperties.prototype['instanceView'] = undefined;

/**
 * @member {module:model/DedicatedHostLicenseType} licenseType
 */
DedicatedHostProperties.prototype['licenseType'] = undefined;

/**
 * Fault domain of the dedicated host within a dedicated host group.
 * @member {Number} platformFaultDomain
 */
DedicatedHostProperties.prototype['platformFaultDomain'] = undefined;

/**
 * The provisioning state, which only appears in the response.
 * @member {String} provisioningState
 */
DedicatedHostProperties.prototype['provisioningState'] = undefined;

/**
 * The date when the host was first provisioned.
 * @member {Date} provisioningTime
 */
DedicatedHostProperties.prototype['provisioningTime'] = undefined;

/**
 * A list of references to all virtual machines in the Dedicated Host.
 * @member {Array.<module:model/SubResourceReadOnly>} virtualMachines
 */
DedicatedHostProperties.prototype['virtualMachines'] = undefined;






export default DedicatedHostProperties;

