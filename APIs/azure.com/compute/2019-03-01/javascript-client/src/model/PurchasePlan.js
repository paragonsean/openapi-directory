/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PurchasePlan model module.
 * @module model/PurchasePlan
 * @version 2019-03-01
 */
class PurchasePlan {
    /**
     * Constructs a new <code>PurchasePlan</code>.
     * Used for establishing the purchase context of any 3rd Party artifact through MarketPlace.
     * @alias module:model/PurchasePlan
     * @param name {String} The plan ID.
     * @param product {String} Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element.
     * @param publisher {String} The publisher ID.
     */
    constructor(name, product, publisher) { 
        
        PurchasePlan.initialize(this, name, product, publisher);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, product, publisher) { 
        obj['name'] = name;
        obj['product'] = product;
        obj['publisher'] = publisher;
    }

    /**
     * Constructs a <code>PurchasePlan</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PurchasePlan} obj Optional instance to populate.
     * @return {module:model/PurchasePlan} The populated <code>PurchasePlan</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PurchasePlan();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('product')) {
                obj['product'] = ApiClient.convertToType(data['product'], 'String');
            }
            if (data.hasOwnProperty('publisher')) {
                obj['publisher'] = ApiClient.convertToType(data['publisher'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PurchasePlan</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PurchasePlan</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PurchasePlan.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['product'] && !(typeof data['product'] === 'string' || data['product'] instanceof String)) {
            throw new Error("Expected the field `product` to be a primitive type in the JSON string but got " + data['product']);
        }
        // ensure the json data is a string
        if (data['publisher'] && !(typeof data['publisher'] === 'string' || data['publisher'] instanceof String)) {
            throw new Error("Expected the field `publisher` to be a primitive type in the JSON string but got " + data['publisher']);
        }

        return true;
    }


}

PurchasePlan.RequiredProperties = ["name", "product", "publisher"];

/**
 * The plan ID.
 * @member {String} name
 */
PurchasePlan.prototype['name'] = undefined;

/**
 * Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element.
 * @member {String} product
 */
PurchasePlan.prototype['product'] = undefined;

/**
 * The publisher ID.
 * @member {String} publisher
 */
PurchasePlan.prototype['publisher'] = undefined;






export default PurchasePlan;

