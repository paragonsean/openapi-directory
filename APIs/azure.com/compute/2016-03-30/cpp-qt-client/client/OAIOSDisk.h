/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2016-03-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOSDisk.h
 *
 * Specifies information about the operating system disk used by the virtual machine. &lt;br&gt;&lt;br&gt; For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc&#x3D;%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
 */

#ifndef OAIOSDisk_H
#define OAIOSDisk_H

#include <QJsonObject>

#include "OAICaching.h"
#include "OAICreateOption.h"
#include "OAIDiskEncryptionSettings.h"
#include "OAIVirtualHardDisk.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDiskEncryptionSettings;
class OAIVirtualHardDisk;

class OAIOSDisk : public OAIObject {
public:
    OAIOSDisk();
    OAIOSDisk(QString json);
    ~OAIOSDisk() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICaching getCaching() const;
    void setCaching(const OAICaching &caching);
    bool is_caching_Set() const;
    bool is_caching_Valid() const;

    OAICreateOption getCreateOption() const;
    void setCreateOption(const OAICreateOption &create_option);
    bool is_create_option_Set() const;
    bool is_create_option_Valid() const;

    qint32 getDiskSizeGb() const;
    void setDiskSizeGb(const qint32 &disk_size_gb);
    bool is_disk_size_gb_Set() const;
    bool is_disk_size_gb_Valid() const;

    OAIDiskEncryptionSettings getEncryptionSettings() const;
    void setEncryptionSettings(const OAIDiskEncryptionSettings &encryption_settings);
    bool is_encryption_settings_Set() const;
    bool is_encryption_settings_Valid() const;

    OAIVirtualHardDisk getImage() const;
    void setImage(const OAIVirtualHardDisk &image);
    bool is_image_Set() const;
    bool is_image_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getOsType() const;
    void setOsType(const QString &os_type);
    bool is_os_type_Set() const;
    bool is_os_type_Valid() const;

    OAIVirtualHardDisk getVhd() const;
    void setVhd(const OAIVirtualHardDisk &vhd);
    bool is_vhd_Set() const;
    bool is_vhd_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICaching m_caching;
    bool m_caching_isSet;
    bool m_caching_isValid;

    OAICreateOption m_create_option;
    bool m_create_option_isSet;
    bool m_create_option_isValid;

    qint32 m_disk_size_gb;
    bool m_disk_size_gb_isSet;
    bool m_disk_size_gb_isValid;

    OAIDiskEncryptionSettings m_encryption_settings;
    bool m_encryption_settings_isSet;
    bool m_encryption_settings_isValid;

    OAIVirtualHardDisk m_image;
    bool m_image_isSet;
    bool m_image_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_os_type;
    bool m_os_type_isSet;
    bool m_os_type_isValid;

    OAIVirtualHardDisk m_vhd;
    bool m_vhd_isSet;
    bool m_vhd_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOSDisk)

#endif // OAIOSDisk_H
