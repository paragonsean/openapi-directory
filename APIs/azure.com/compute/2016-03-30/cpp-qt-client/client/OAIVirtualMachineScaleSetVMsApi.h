/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2016-03-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVirtualMachineScaleSetVMsApi_H
#define OAI_OAIVirtualMachineScaleSetVMsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIOperationStatusResponse.h"
#include "OAIVirtualMachineScaleSetVM.h"
#include "OAIVirtualMachineScaleSetVMInstanceView.h"
#include "OAIVirtualMachineScaleSetVMListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVirtualMachineScaleSetVMsApi : public QObject {
    Q_OBJECT

public:
    OAIVirtualMachineScaleSetVMsApi(const int timeOut = 0);
    ~OAIVirtualMachineScaleSetVMsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_scale_set_name QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualMachineScaleSetVMsDeallocate(const QString &resource_group_name, const QString &vm_scale_set_name, const QString &instance_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_scale_set_name QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualMachineScaleSetVMsDelete(const QString &resource_group_name, const QString &vm_scale_set_name, const QString &instance_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_scale_set_name QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualMachineScaleSetVMsGet(const QString &resource_group_name, const QString &vm_scale_set_name, const QString &instance_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_scale_set_name QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualMachineScaleSetVMsGetInstanceView(const QString &resource_group_name, const QString &vm_scale_set_name, const QString &instance_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_machine_scale_set_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  select QString [optional]
    * @param[in]  expand QString [optional]
    */
    virtual void virtualMachineScaleSetVMsList(const QString &resource_group_name, const QString &virtual_machine_scale_set_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_scale_set_name QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualMachineScaleSetVMsPowerOff(const QString &resource_group_name, const QString &vm_scale_set_name, const QString &instance_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_scale_set_name QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualMachineScaleSetVMsReimage(const QString &resource_group_name, const QString &vm_scale_set_name, const QString &instance_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_scale_set_name QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualMachineScaleSetVMsRestart(const QString &resource_group_name, const QString &vm_scale_set_name, const QString &instance_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vm_scale_set_name QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualMachineScaleSetVMsStart(const QString &resource_group_name, const QString &vm_scale_set_name, const QString &instance_id, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void virtualMachineScaleSetVMsDeallocateCallback(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetVMsDeleteCallback(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetVMsGetCallback(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetVMsGetInstanceViewCallback(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetVMsListCallback(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetVMsPowerOffCallback(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetVMsReimageCallback(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetVMsRestartCallback(OAIHttpRequestWorker *worker);
    void virtualMachineScaleSetVMsStartCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void virtualMachineScaleSetVMsDeallocateSignal(OAIOperationStatusResponse summary);
    void virtualMachineScaleSetVMsDeleteSignal(OAIOperationStatusResponse summary);
    void virtualMachineScaleSetVMsGetSignal(OAIVirtualMachineScaleSetVM summary);
    void virtualMachineScaleSetVMsGetInstanceViewSignal(OAIVirtualMachineScaleSetVMInstanceView summary);
    void virtualMachineScaleSetVMsListSignal(OAIVirtualMachineScaleSetVMListResult summary);
    void virtualMachineScaleSetVMsPowerOffSignal(OAIOperationStatusResponse summary);
    void virtualMachineScaleSetVMsReimageSignal(OAIOperationStatusResponse summary);
    void virtualMachineScaleSetVMsRestartSignal(OAIOperationStatusResponse summary);
    void virtualMachineScaleSetVMsStartSignal(OAIOperationStatusResponse summary);


    void virtualMachineScaleSetVMsDeallocateSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatusResponse summary);
    void virtualMachineScaleSetVMsDeleteSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatusResponse summary);
    void virtualMachineScaleSetVMsGetSignalFull(OAIHttpRequestWorker *worker, OAIVirtualMachineScaleSetVM summary);
    void virtualMachineScaleSetVMsGetInstanceViewSignalFull(OAIHttpRequestWorker *worker, OAIVirtualMachineScaleSetVMInstanceView summary);
    void virtualMachineScaleSetVMsListSignalFull(OAIHttpRequestWorker *worker, OAIVirtualMachineScaleSetVMListResult summary);
    void virtualMachineScaleSetVMsPowerOffSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatusResponse summary);
    void virtualMachineScaleSetVMsReimageSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatusResponse summary);
    void virtualMachineScaleSetVMsRestartSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatusResponse summary);
    void virtualMachineScaleSetVMsStartSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatusResponse summary);

    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetVMsDeallocateSignalError() instead")
    void virtualMachineScaleSetVMsDeallocateSignalE(OAIOperationStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetVMsDeallocateSignalError(OAIOperationStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetVMsDeleteSignalError() instead")
    void virtualMachineScaleSetVMsDeleteSignalE(OAIOperationStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetVMsDeleteSignalError(OAIOperationStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetVMsGetSignalError() instead")
    void virtualMachineScaleSetVMsGetSignalE(OAIVirtualMachineScaleSetVM summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetVMsGetSignalError(OAIVirtualMachineScaleSetVM summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetVMsGetInstanceViewSignalError() instead")
    void virtualMachineScaleSetVMsGetInstanceViewSignalE(OAIVirtualMachineScaleSetVMInstanceView summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetVMsGetInstanceViewSignalError(OAIVirtualMachineScaleSetVMInstanceView summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetVMsListSignalError() instead")
    void virtualMachineScaleSetVMsListSignalE(OAIVirtualMachineScaleSetVMListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetVMsListSignalError(OAIVirtualMachineScaleSetVMListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetVMsPowerOffSignalError() instead")
    void virtualMachineScaleSetVMsPowerOffSignalE(OAIOperationStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetVMsPowerOffSignalError(OAIOperationStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetVMsReimageSignalError() instead")
    void virtualMachineScaleSetVMsReimageSignalE(OAIOperationStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetVMsReimageSignalError(OAIOperationStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetVMsRestartSignalError() instead")
    void virtualMachineScaleSetVMsRestartSignalE(OAIOperationStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetVMsRestartSignalError(OAIOperationStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetVMsStartSignalError() instead")
    void virtualMachineScaleSetVMsStartSignalE(OAIOperationStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetVMsStartSignalError(OAIOperationStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetVMsDeallocateSignalErrorFull() instead")
    void virtualMachineScaleSetVMsDeallocateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetVMsDeallocateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetVMsDeleteSignalErrorFull() instead")
    void virtualMachineScaleSetVMsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetVMsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetVMsGetSignalErrorFull() instead")
    void virtualMachineScaleSetVMsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetVMsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetVMsGetInstanceViewSignalErrorFull() instead")
    void virtualMachineScaleSetVMsGetInstanceViewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetVMsGetInstanceViewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetVMsListSignalErrorFull() instead")
    void virtualMachineScaleSetVMsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetVMsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetVMsPowerOffSignalErrorFull() instead")
    void virtualMachineScaleSetVMsPowerOffSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetVMsPowerOffSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetVMsReimageSignalErrorFull() instead")
    void virtualMachineScaleSetVMsReimageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetVMsReimageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetVMsRestartSignalErrorFull() instead")
    void virtualMachineScaleSetVMsRestartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetVMsRestartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineScaleSetVMsStartSignalErrorFull() instead")
    void virtualMachineScaleSetVMsStartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineScaleSetVMsStartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
