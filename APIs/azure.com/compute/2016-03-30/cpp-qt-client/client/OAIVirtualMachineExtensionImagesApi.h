/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2016-03-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVirtualMachineExtensionImagesApi_H
#define OAI_OAIVirtualMachineExtensionImagesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIVirtualMachineExtensionImage.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVirtualMachineExtensionImagesApi : public QObject {
    Q_OBJECT

public:
    OAIVirtualMachineExtensionImagesApi(const int timeOut = 0);
    ~OAIVirtualMachineExtensionImagesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  location QString [required]
    * @param[in]  publisher_name QString [required]
    * @param[in]  type QString [required]
    * @param[in]  version QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualMachineExtensionImagesGet(const QString &location, const QString &publisher_name, const QString &type, const QString &version, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  location QString [required]
    * @param[in]  publisher_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualMachineExtensionImagesListTypes(const QString &location, const QString &publisher_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  location QString [required]
    * @param[in]  publisher_name QString [required]
    * @param[in]  type QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  orderby QString [optional]
    */
    virtual void virtualMachineExtensionImagesListVersions(const QString &location, const QString &publisher_name, const QString &type, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void virtualMachineExtensionImagesGetCallback(OAIHttpRequestWorker *worker);
    void virtualMachineExtensionImagesListTypesCallback(OAIHttpRequestWorker *worker);
    void virtualMachineExtensionImagesListVersionsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void virtualMachineExtensionImagesGetSignal(OAIVirtualMachineExtensionImage summary);
    void virtualMachineExtensionImagesListTypesSignal(QList<OAIVirtualMachineExtensionImage> summary);
    void virtualMachineExtensionImagesListVersionsSignal(QList<OAIVirtualMachineExtensionImage> summary);


    void virtualMachineExtensionImagesGetSignalFull(OAIHttpRequestWorker *worker, OAIVirtualMachineExtensionImage summary);
    void virtualMachineExtensionImagesListTypesSignalFull(OAIHttpRequestWorker *worker, QList<OAIVirtualMachineExtensionImage> summary);
    void virtualMachineExtensionImagesListVersionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIVirtualMachineExtensionImage> summary);

    Q_DECL_DEPRECATED_X("Use virtualMachineExtensionImagesGetSignalError() instead")
    void virtualMachineExtensionImagesGetSignalE(OAIVirtualMachineExtensionImage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineExtensionImagesGetSignalError(OAIVirtualMachineExtensionImage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineExtensionImagesListTypesSignalError() instead")
    void virtualMachineExtensionImagesListTypesSignalE(QList<OAIVirtualMachineExtensionImage> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineExtensionImagesListTypesSignalError(QList<OAIVirtualMachineExtensionImage> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineExtensionImagesListVersionsSignalError() instead")
    void virtualMachineExtensionImagesListVersionsSignalE(QList<OAIVirtualMachineExtensionImage> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineExtensionImagesListVersionsSignalError(QList<OAIVirtualMachineExtensionImage> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use virtualMachineExtensionImagesGetSignalErrorFull() instead")
    void virtualMachineExtensionImagesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineExtensionImagesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineExtensionImagesListTypesSignalErrorFull() instead")
    void virtualMachineExtensionImagesListTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineExtensionImagesListTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineExtensionImagesListVersionsSignalErrorFull() instead")
    void virtualMachineExtensionImagesListVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineExtensionImagesListVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
