/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2016-03-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualMachineScaleSetVMInstanceView.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualMachineScaleSetVMInstanceView::OAIVirtualMachineScaleSetVMInstanceView(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualMachineScaleSetVMInstanceView::OAIVirtualMachineScaleSetVMInstanceView() {
    this->initializeModel();
}

OAIVirtualMachineScaleSetVMInstanceView::~OAIVirtualMachineScaleSetVMInstanceView() {}

void OAIVirtualMachineScaleSetVMInstanceView::initializeModel() {

    m_boot_diagnostics_isSet = false;
    m_boot_diagnostics_isValid = false;

    m_disks_isSet = false;
    m_disks_isValid = false;

    m_extensions_isSet = false;
    m_extensions_isValid = false;

    m_platform_fault_domain_isSet = false;
    m_platform_fault_domain_isValid = false;

    m_platform_update_domain_isSet = false;
    m_platform_update_domain_isValid = false;

    m_rdp_thumb_print_isSet = false;
    m_rdp_thumb_print_isValid = false;

    m_statuses_isSet = false;
    m_statuses_isValid = false;

    m_vm_agent_isSet = false;
    m_vm_agent_isValid = false;
}

void OAIVirtualMachineScaleSetVMInstanceView::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualMachineScaleSetVMInstanceView::fromJsonObject(QJsonObject json) {

    m_boot_diagnostics_isValid = ::OpenAPI::fromJsonValue(m_boot_diagnostics, json[QString("bootDiagnostics")]);
    m_boot_diagnostics_isSet = !json[QString("bootDiagnostics")].isNull() && m_boot_diagnostics_isValid;

    m_disks_isValid = ::OpenAPI::fromJsonValue(m_disks, json[QString("disks")]);
    m_disks_isSet = !json[QString("disks")].isNull() && m_disks_isValid;

    m_extensions_isValid = ::OpenAPI::fromJsonValue(m_extensions, json[QString("extensions")]);
    m_extensions_isSet = !json[QString("extensions")].isNull() && m_extensions_isValid;

    m_platform_fault_domain_isValid = ::OpenAPI::fromJsonValue(m_platform_fault_domain, json[QString("platformFaultDomain")]);
    m_platform_fault_domain_isSet = !json[QString("platformFaultDomain")].isNull() && m_platform_fault_domain_isValid;

    m_platform_update_domain_isValid = ::OpenAPI::fromJsonValue(m_platform_update_domain, json[QString("platformUpdateDomain")]);
    m_platform_update_domain_isSet = !json[QString("platformUpdateDomain")].isNull() && m_platform_update_domain_isValid;

    m_rdp_thumb_print_isValid = ::OpenAPI::fromJsonValue(m_rdp_thumb_print, json[QString("rdpThumbPrint")]);
    m_rdp_thumb_print_isSet = !json[QString("rdpThumbPrint")].isNull() && m_rdp_thumb_print_isValid;

    m_statuses_isValid = ::OpenAPI::fromJsonValue(m_statuses, json[QString("statuses")]);
    m_statuses_isSet = !json[QString("statuses")].isNull() && m_statuses_isValid;

    m_vm_agent_isValid = ::OpenAPI::fromJsonValue(m_vm_agent, json[QString("vmAgent")]);
    m_vm_agent_isSet = !json[QString("vmAgent")].isNull() && m_vm_agent_isValid;
}

QString OAIVirtualMachineScaleSetVMInstanceView::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualMachineScaleSetVMInstanceView::asJsonObject() const {
    QJsonObject obj;
    if (m_boot_diagnostics.isSet()) {
        obj.insert(QString("bootDiagnostics"), ::OpenAPI::toJsonValue(m_boot_diagnostics));
    }
    if (m_disks.size() > 0) {
        obj.insert(QString("disks"), ::OpenAPI::toJsonValue(m_disks));
    }
    if (m_extensions.size() > 0) {
        obj.insert(QString("extensions"), ::OpenAPI::toJsonValue(m_extensions));
    }
    if (m_platform_fault_domain_isSet) {
        obj.insert(QString("platformFaultDomain"), ::OpenAPI::toJsonValue(m_platform_fault_domain));
    }
    if (m_platform_update_domain_isSet) {
        obj.insert(QString("platformUpdateDomain"), ::OpenAPI::toJsonValue(m_platform_update_domain));
    }
    if (m_rdp_thumb_print_isSet) {
        obj.insert(QString("rdpThumbPrint"), ::OpenAPI::toJsonValue(m_rdp_thumb_print));
    }
    if (m_statuses.size() > 0) {
        obj.insert(QString("statuses"), ::OpenAPI::toJsonValue(m_statuses));
    }
    if (m_vm_agent.isSet()) {
        obj.insert(QString("vmAgent"), ::OpenAPI::toJsonValue(m_vm_agent));
    }
    return obj;
}

OAIBootDiagnosticsInstanceView OAIVirtualMachineScaleSetVMInstanceView::getBootDiagnostics() const {
    return m_boot_diagnostics;
}
void OAIVirtualMachineScaleSetVMInstanceView::setBootDiagnostics(const OAIBootDiagnosticsInstanceView &boot_diagnostics) {
    m_boot_diagnostics = boot_diagnostics;
    m_boot_diagnostics_isSet = true;
}

bool OAIVirtualMachineScaleSetVMInstanceView::is_boot_diagnostics_Set() const{
    return m_boot_diagnostics_isSet;
}

bool OAIVirtualMachineScaleSetVMInstanceView::is_boot_diagnostics_Valid() const{
    return m_boot_diagnostics_isValid;
}

QList<OAIDiskInstanceView> OAIVirtualMachineScaleSetVMInstanceView::getDisks() const {
    return m_disks;
}
void OAIVirtualMachineScaleSetVMInstanceView::setDisks(const QList<OAIDiskInstanceView> &disks) {
    m_disks = disks;
    m_disks_isSet = true;
}

bool OAIVirtualMachineScaleSetVMInstanceView::is_disks_Set() const{
    return m_disks_isSet;
}

bool OAIVirtualMachineScaleSetVMInstanceView::is_disks_Valid() const{
    return m_disks_isValid;
}

QList<OAIVirtualMachineExtensionInstanceView> OAIVirtualMachineScaleSetVMInstanceView::getExtensions() const {
    return m_extensions;
}
void OAIVirtualMachineScaleSetVMInstanceView::setExtensions(const QList<OAIVirtualMachineExtensionInstanceView> &extensions) {
    m_extensions = extensions;
    m_extensions_isSet = true;
}

bool OAIVirtualMachineScaleSetVMInstanceView::is_extensions_Set() const{
    return m_extensions_isSet;
}

bool OAIVirtualMachineScaleSetVMInstanceView::is_extensions_Valid() const{
    return m_extensions_isValid;
}

qint32 OAIVirtualMachineScaleSetVMInstanceView::getPlatformFaultDomain() const {
    return m_platform_fault_domain;
}
void OAIVirtualMachineScaleSetVMInstanceView::setPlatformFaultDomain(const qint32 &platform_fault_domain) {
    m_platform_fault_domain = platform_fault_domain;
    m_platform_fault_domain_isSet = true;
}

bool OAIVirtualMachineScaleSetVMInstanceView::is_platform_fault_domain_Set() const{
    return m_platform_fault_domain_isSet;
}

bool OAIVirtualMachineScaleSetVMInstanceView::is_platform_fault_domain_Valid() const{
    return m_platform_fault_domain_isValid;
}

qint32 OAIVirtualMachineScaleSetVMInstanceView::getPlatformUpdateDomain() const {
    return m_platform_update_domain;
}
void OAIVirtualMachineScaleSetVMInstanceView::setPlatformUpdateDomain(const qint32 &platform_update_domain) {
    m_platform_update_domain = platform_update_domain;
    m_platform_update_domain_isSet = true;
}

bool OAIVirtualMachineScaleSetVMInstanceView::is_platform_update_domain_Set() const{
    return m_platform_update_domain_isSet;
}

bool OAIVirtualMachineScaleSetVMInstanceView::is_platform_update_domain_Valid() const{
    return m_platform_update_domain_isValid;
}

QString OAIVirtualMachineScaleSetVMInstanceView::getRdpThumbPrint() const {
    return m_rdp_thumb_print;
}
void OAIVirtualMachineScaleSetVMInstanceView::setRdpThumbPrint(const QString &rdp_thumb_print) {
    m_rdp_thumb_print = rdp_thumb_print;
    m_rdp_thumb_print_isSet = true;
}

bool OAIVirtualMachineScaleSetVMInstanceView::is_rdp_thumb_print_Set() const{
    return m_rdp_thumb_print_isSet;
}

bool OAIVirtualMachineScaleSetVMInstanceView::is_rdp_thumb_print_Valid() const{
    return m_rdp_thumb_print_isValid;
}

QList<OAIInstanceViewStatus> OAIVirtualMachineScaleSetVMInstanceView::getStatuses() const {
    return m_statuses;
}
void OAIVirtualMachineScaleSetVMInstanceView::setStatuses(const QList<OAIInstanceViewStatus> &statuses) {
    m_statuses = statuses;
    m_statuses_isSet = true;
}

bool OAIVirtualMachineScaleSetVMInstanceView::is_statuses_Set() const{
    return m_statuses_isSet;
}

bool OAIVirtualMachineScaleSetVMInstanceView::is_statuses_Valid() const{
    return m_statuses_isValid;
}

OAIVirtualMachineAgentInstanceView OAIVirtualMachineScaleSetVMInstanceView::getVmAgent() const {
    return m_vm_agent;
}
void OAIVirtualMachineScaleSetVMInstanceView::setVmAgent(const OAIVirtualMachineAgentInstanceView &vm_agent) {
    m_vm_agent = vm_agent;
    m_vm_agent_isSet = true;
}

bool OAIVirtualMachineScaleSetVMInstanceView::is_vm_agent_Set() const{
    return m_vm_agent_isSet;
}

bool OAIVirtualMachineScaleSetVMInstanceView::is_vm_agent_Valid() const{
    return m_vm_agent_isValid;
}

bool OAIVirtualMachineScaleSetVMInstanceView::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_boot_diagnostics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_extensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_fault_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_update_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rdp_thumb_print_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statuses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_agent.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualMachineScaleSetVMInstanceView::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
