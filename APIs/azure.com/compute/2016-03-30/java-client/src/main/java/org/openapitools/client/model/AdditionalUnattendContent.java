/*
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2016-03-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies additional XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. Contents are defined by setting name, component name, and the pass in which the content is applied.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:49:17.936384-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdditionalUnattendContent {
  /**
   * The component name. Currently, the only allowable value is Microsoft-Windows-Shell-Setup.
   */
  @JsonAdapter(ComponentNameEnum.Adapter.class)
  public enum ComponentNameEnum {
    MICROSOFT_WINDOWS_SHELL_SETUP("Microsoft-Windows-Shell-Setup");

    private String value;

    ComponentNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ComponentNameEnum fromValue(String value) {
      for (ComponentNameEnum b : ComponentNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ComponentNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ComponentNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ComponentNameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ComponentNameEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ComponentNameEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMPONENT_NAME = "componentName";
  @SerializedName(SERIALIZED_NAME_COMPONENT_NAME)
  private ComponentNameEnum componentName;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  /**
   * The pass name. Currently, the only allowable value is OobeSystem.
   */
  @JsonAdapter(PassNameEnum.Adapter.class)
  public enum PassNameEnum {
    OOBE_SYSTEM("OobeSystem");

    private String value;

    PassNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PassNameEnum fromValue(String value) {
      for (PassNameEnum b : PassNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PassNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PassNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PassNameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PassNameEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PassNameEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PASS_NAME = "passName";
  @SerializedName(SERIALIZED_NAME_PASS_NAME)
  private PassNameEnum passName;

  /**
   * Specifies the name of the setting to which the content applies. Possible values are: FirstLogonCommands and AutoLogon.
   */
  @JsonAdapter(SettingNameEnum.Adapter.class)
  public enum SettingNameEnum {
    AUTO_LOGON("AutoLogon"),
    
    FIRST_LOGON_COMMANDS("FirstLogonCommands");

    private String value;

    SettingNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SettingNameEnum fromValue(String value) {
      for (SettingNameEnum b : SettingNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SettingNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SettingNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SettingNameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SettingNameEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SettingNameEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SETTING_NAME = "settingName";
  @SerializedName(SERIALIZED_NAME_SETTING_NAME)
  private SettingNameEnum settingName;

  public AdditionalUnattendContent() {
  }

  public AdditionalUnattendContent componentName(ComponentNameEnum componentName) {
    this.componentName = componentName;
    return this;
  }

  /**
   * The component name. Currently, the only allowable value is Microsoft-Windows-Shell-Setup.
   * @return componentName
   */
  @javax.annotation.Nullable
  public ComponentNameEnum getComponentName() {
    return componentName;
  }

  public void setComponentName(ComponentNameEnum componentName) {
    this.componentName = componentName;
  }


  public AdditionalUnattendContent content(String content) {
    this.content = content;
    return this;
  }

  /**
   * Specifies the XML formatted content that is added to the unattend.xml file for the specified path and component. The XML must be less than 4KB and must include the root element for the setting or feature that is being inserted.
   * @return content
   */
  @javax.annotation.Nullable
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public AdditionalUnattendContent passName(PassNameEnum passName) {
    this.passName = passName;
    return this;
  }

  /**
   * The pass name. Currently, the only allowable value is OobeSystem.
   * @return passName
   */
  @javax.annotation.Nullable
  public PassNameEnum getPassName() {
    return passName;
  }

  public void setPassName(PassNameEnum passName) {
    this.passName = passName;
  }


  public AdditionalUnattendContent settingName(SettingNameEnum settingName) {
    this.settingName = settingName;
    return this;
  }

  /**
   * Specifies the name of the setting to which the content applies. Possible values are: FirstLogonCommands and AutoLogon.
   * @return settingName
   */
  @javax.annotation.Nullable
  public SettingNameEnum getSettingName() {
    return settingName;
  }

  public void setSettingName(SettingNameEnum settingName) {
    this.settingName = settingName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdditionalUnattendContent additionalUnattendContent = (AdditionalUnattendContent) o;
    return Objects.equals(this.componentName, additionalUnattendContent.componentName) &&
        Objects.equals(this.content, additionalUnattendContent.content) &&
        Objects.equals(this.passName, additionalUnattendContent.passName) &&
        Objects.equals(this.settingName, additionalUnattendContent.settingName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(componentName, content, passName, settingName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdditionalUnattendContent {\n");
    sb.append("    componentName: ").append(toIndentedString(componentName)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    passName: ").append(toIndentedString(passName)).append("\n");
    sb.append("    settingName: ").append(toIndentedString(settingName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("componentName");
    openapiFields.add("content");
    openapiFields.add("passName");
    openapiFields.add("settingName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdditionalUnattendContent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdditionalUnattendContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdditionalUnattendContent is not found in the empty JSON string", AdditionalUnattendContent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdditionalUnattendContent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdditionalUnattendContent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("componentName") != null && !jsonObj.get("componentName").isJsonNull()) && !jsonObj.get("componentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `componentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("componentName").toString()));
      }
      // validate the optional field `componentName`
      if (jsonObj.get("componentName") != null && !jsonObj.get("componentName").isJsonNull()) {
        ComponentNameEnum.validateJsonElement(jsonObj.get("componentName"));
      }
      if ((jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) && !jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if ((jsonObj.get("passName") != null && !jsonObj.get("passName").isJsonNull()) && !jsonObj.get("passName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passName").toString()));
      }
      // validate the optional field `passName`
      if (jsonObj.get("passName") != null && !jsonObj.get("passName").isJsonNull()) {
        PassNameEnum.validateJsonElement(jsonObj.get("passName"));
      }
      if ((jsonObj.get("settingName") != null && !jsonObj.get("settingName").isJsonNull()) && !jsonObj.get("settingName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settingName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settingName").toString()));
      }
      // validate the optional field `settingName`
      if (jsonObj.get("settingName") != null && !jsonObj.get("settingName").isJsonNull()) {
        SettingNameEnum.validateJsonElement(jsonObj.get("settingName"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdditionalUnattendContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdditionalUnattendContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdditionalUnattendContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdditionalUnattendContent.class));

       return (TypeAdapter<T>) new TypeAdapter<AdditionalUnattendContent>() {
           @Override
           public void write(JsonWriter out, AdditionalUnattendContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdditionalUnattendContent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdditionalUnattendContent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdditionalUnattendContent
   * @throws IOException if the JSON string is invalid with respect to AdditionalUnattendContent
   */
  public static AdditionalUnattendContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdditionalUnattendContent.class);
  }

  /**
   * Convert an instance of AdditionalUnattendContent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

