/*
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2016-03-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InstanceViewStatus;
import org.openapitools.client.model.SubResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The instance view of a resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:49:17.936384-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AvailabilitySetProperties {
  public static final String SERIALIZED_NAME_PLATFORM_FAULT_DOMAIN_COUNT = "platformFaultDomainCount";
  @SerializedName(SERIALIZED_NAME_PLATFORM_FAULT_DOMAIN_COUNT)
  private Integer platformFaultDomainCount;

  public static final String SERIALIZED_NAME_PLATFORM_UPDATE_DOMAIN_COUNT = "platformUpdateDomainCount";
  @SerializedName(SERIALIZED_NAME_PLATFORM_UPDATE_DOMAIN_COUNT)
  private Integer platformUpdateDomainCount;

  public static final String SERIALIZED_NAME_STATUSES = "statuses";
  @SerializedName(SERIALIZED_NAME_STATUSES)
  private List<InstanceViewStatus> statuses = new ArrayList<>();

  public static final String SERIALIZED_NAME_VIRTUAL_MACHINES = "virtualMachines";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_MACHINES)
  private List<SubResource> virtualMachines = new ArrayList<>();

  public AvailabilitySetProperties() {
  }

  public AvailabilitySetProperties(
     List<InstanceViewStatus> statuses
  ) {
    this();
    this.statuses = statuses;
  }

  public AvailabilitySetProperties platformFaultDomainCount(Integer platformFaultDomainCount) {
    this.platformFaultDomainCount = platformFaultDomainCount;
    return this;
  }

  /**
   * Fault Domain count.
   * @return platformFaultDomainCount
   */
  @javax.annotation.Nullable
  public Integer getPlatformFaultDomainCount() {
    return platformFaultDomainCount;
  }

  public void setPlatformFaultDomainCount(Integer platformFaultDomainCount) {
    this.platformFaultDomainCount = platformFaultDomainCount;
  }


  public AvailabilitySetProperties platformUpdateDomainCount(Integer platformUpdateDomainCount) {
    this.platformUpdateDomainCount = platformUpdateDomainCount;
    return this;
  }

  /**
   * Update Domain count.
   * @return platformUpdateDomainCount
   */
  @javax.annotation.Nullable
  public Integer getPlatformUpdateDomainCount() {
    return platformUpdateDomainCount;
  }

  public void setPlatformUpdateDomainCount(Integer platformUpdateDomainCount) {
    this.platformUpdateDomainCount = platformUpdateDomainCount;
  }


  /**
   * The resource status information.
   * @return statuses
   */
  @javax.annotation.Nullable
  public List<InstanceViewStatus> getStatuses() {
    return statuses;
  }



  public AvailabilitySetProperties virtualMachines(List<SubResource> virtualMachines) {
    this.virtualMachines = virtualMachines;
    return this;
  }

  public AvailabilitySetProperties addVirtualMachinesItem(SubResource virtualMachinesItem) {
    if (this.virtualMachines == null) {
      this.virtualMachines = new ArrayList<>();
    }
    this.virtualMachines.add(virtualMachinesItem);
    return this;
  }

  /**
   * A list of references to all virtual machines in the availability set.
   * @return virtualMachines
   */
  @javax.annotation.Nullable
  public List<SubResource> getVirtualMachines() {
    return virtualMachines;
  }

  public void setVirtualMachines(List<SubResource> virtualMachines) {
    this.virtualMachines = virtualMachines;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AvailabilitySetProperties availabilitySetProperties = (AvailabilitySetProperties) o;
    return Objects.equals(this.platformFaultDomainCount, availabilitySetProperties.platformFaultDomainCount) &&
        Objects.equals(this.platformUpdateDomainCount, availabilitySetProperties.platformUpdateDomainCount) &&
        Objects.equals(this.statuses, availabilitySetProperties.statuses) &&
        Objects.equals(this.virtualMachines, availabilitySetProperties.virtualMachines);
  }

  @Override
  public int hashCode() {
    return Objects.hash(platformFaultDomainCount, platformUpdateDomainCount, statuses, virtualMachines);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AvailabilitySetProperties {\n");
    sb.append("    platformFaultDomainCount: ").append(toIndentedString(platformFaultDomainCount)).append("\n");
    sb.append("    platformUpdateDomainCount: ").append(toIndentedString(platformUpdateDomainCount)).append("\n");
    sb.append("    statuses: ").append(toIndentedString(statuses)).append("\n");
    sb.append("    virtualMachines: ").append(toIndentedString(virtualMachines)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("platformFaultDomainCount");
    openapiFields.add("platformUpdateDomainCount");
    openapiFields.add("statuses");
    openapiFields.add("virtualMachines");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AvailabilitySetProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AvailabilitySetProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AvailabilitySetProperties is not found in the empty JSON string", AvailabilitySetProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AvailabilitySetProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AvailabilitySetProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("statuses") != null && !jsonObj.get("statuses").isJsonNull()) {
        JsonArray jsonArraystatuses = jsonObj.getAsJsonArray("statuses");
        if (jsonArraystatuses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("statuses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `statuses` to be an array in the JSON string but got `%s`", jsonObj.get("statuses").toString()));
          }

          // validate the optional field `statuses` (array)
          for (int i = 0; i < jsonArraystatuses.size(); i++) {
            InstanceViewStatus.validateJsonElement(jsonArraystatuses.get(i));
          };
        }
      }
      if (jsonObj.get("virtualMachines") != null && !jsonObj.get("virtualMachines").isJsonNull()) {
        JsonArray jsonArrayvirtualMachines = jsonObj.getAsJsonArray("virtualMachines");
        if (jsonArrayvirtualMachines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("virtualMachines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `virtualMachines` to be an array in the JSON string but got `%s`", jsonObj.get("virtualMachines").toString()));
          }

          // validate the optional field `virtualMachines` (array)
          for (int i = 0; i < jsonArrayvirtualMachines.size(); i++) {
            SubResource.validateJsonElement(jsonArrayvirtualMachines.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AvailabilitySetProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AvailabilitySetProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AvailabilitySetProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AvailabilitySetProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<AvailabilitySetProperties>() {
           @Override
           public void write(JsonWriter out, AvailabilitySetProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AvailabilitySetProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AvailabilitySetProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AvailabilitySetProperties
   * @throws IOException if the JSON string is invalid with respect to AvailabilitySetProperties
   */
  public static AvailabilitySetProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AvailabilitySetProperties.class);
  }

  /**
   * Convert an instance of AvailabilitySetProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

