/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2016-03-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Caching from './Caching';
import CreateOption from './CreateOption';
import DiskEncryptionSettings from './DiskEncryptionSettings';
import VirtualHardDisk from './VirtualHardDisk';

/**
 * The OSDisk model module.
 * @module model/OSDisk
 * @version 2016-03-30
 */
class OSDisk {
    /**
     * Constructs a new <code>OSDisk</code>.
     * Specifies information about the operating system disk used by the virtual machine. &lt;br&gt;&lt;br&gt; For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc&#x3D;%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
     * @alias module:model/OSDisk
     * @param createOption {module:model/CreateOption} 
     * @param name {String} The disk name.
     * @param vhd {module:model/VirtualHardDisk} 
     */
    constructor(createOption, name, vhd) { 
        
        OSDisk.initialize(this, createOption, name, vhd);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createOption, name, vhd) { 
        obj['createOption'] = createOption;
        obj['name'] = name;
        obj['vhd'] = vhd;
    }

    /**
     * Constructs a <code>OSDisk</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OSDisk} obj Optional instance to populate.
     * @return {module:model/OSDisk} The populated <code>OSDisk</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OSDisk();

            if (data.hasOwnProperty('caching')) {
                obj['caching'] = Caching.constructFromObject(data['caching']);
            }
            if (data.hasOwnProperty('createOption')) {
                obj['createOption'] = CreateOption.constructFromObject(data['createOption']);
            }
            if (data.hasOwnProperty('diskSizeGB')) {
                obj['diskSizeGB'] = ApiClient.convertToType(data['diskSizeGB'], 'Number');
            }
            if (data.hasOwnProperty('encryptionSettings')) {
                obj['encryptionSettings'] = DiskEncryptionSettings.constructFromObject(data['encryptionSettings']);
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = VirtualHardDisk.constructFromObject(data['image']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('osType')) {
                obj['osType'] = ApiClient.convertToType(data['osType'], 'String');
            }
            if (data.hasOwnProperty('vhd')) {
                obj['vhd'] = VirtualHardDisk.constructFromObject(data['vhd']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OSDisk</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OSDisk</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OSDisk.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `encryptionSettings`
        if (data['encryptionSettings']) { // data not null
          DiskEncryptionSettings.validateJSON(data['encryptionSettings']);
        }
        // validate the optional field `image`
        if (data['image']) { // data not null
          VirtualHardDisk.validateJSON(data['image']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['osType'] && !(typeof data['osType'] === 'string' || data['osType'] instanceof String)) {
            throw new Error("Expected the field `osType` to be a primitive type in the JSON string but got " + data['osType']);
        }
        // validate the optional field `vhd`
        if (data['vhd']) { // data not null
          VirtualHardDisk.validateJSON(data['vhd']);
        }

        return true;
    }


}

OSDisk.RequiredProperties = ["createOption", "name", "vhd"];

/**
 * @member {module:model/Caching} caching
 */
OSDisk.prototype['caching'] = undefined;

/**
 * @member {module:model/CreateOption} createOption
 */
OSDisk.prototype['createOption'] = undefined;

/**
 * Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
 * @member {Number} diskSizeGB
 */
OSDisk.prototype['diskSizeGB'] = undefined;

/**
 * @member {module:model/DiskEncryptionSettings} encryptionSettings
 */
OSDisk.prototype['encryptionSettings'] = undefined;

/**
 * @member {module:model/VirtualHardDisk} image
 */
OSDisk.prototype['image'] = undefined;

/**
 * The disk name.
 * @member {String} name
 */
OSDisk.prototype['name'] = undefined;

/**
 * This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**
 * @member {module:model/OSDisk.OsTypeEnum} osType
 */
OSDisk.prototype['osType'] = undefined;

/**
 * @member {module:model/VirtualHardDisk} vhd
 */
OSDisk.prototype['vhd'] = undefined;





/**
 * Allowed values for the <code>osType</code> property.
 * @enum {String}
 * @readonly
 */
OSDisk['OsTypeEnum'] = {

    /**
     * value: "Windows"
     * @const
     */
    "Windows": "Windows",

    /**
     * value: "Linux"
     * @const
     */
    "Linux": "Linux"
};



export default OSDisk;

