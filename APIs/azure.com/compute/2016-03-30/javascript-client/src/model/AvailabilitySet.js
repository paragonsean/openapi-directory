/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2016-03-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AvailabilitySetProperties from './AvailabilitySetProperties';
import Resource from './Resource';

/**
 * The AvailabilitySet model module.
 * @module model/AvailabilitySet
 * @version 2016-03-30
 */
class AvailabilitySet {
    /**
     * Constructs a new <code>AvailabilitySet</code>.
     * Specifies information about the availability set that the virtual machine should be assigned to. Virtual machines specified in the same availability set are allocated to different nodes to maximize availability. For more information about availability sets, see [Manage the availability of virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-manage-availability?toc&#x3D;%2fazure%2fvirtual-machines%2fwindows%2ftoc.json). &lt;br&gt;&lt;br&gt; For more information on Azure planned maintenance, see [Planned maintenance for virtual machines in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-planned-maintenance?toc&#x3D;%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) &lt;br&gt;&lt;br&gt; Currently, a VM can only be added to availability set at creation time. An existing VM cannot be added to an availability set.
     * @alias module:model/AvailabilitySet
     * @implements module:model/Resource
     * @param location {String} Resource location
     */
    constructor(location) { 
        Resource.initialize(this, location);
        AvailabilitySet.initialize(this, location);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, location) { 
        obj['location'] = location;
    }

    /**
     * Constructs a <code>AvailabilitySet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AvailabilitySet} obj Optional instance to populate.
     * @return {module:model/AvailabilitySet} The populated <code>AvailabilitySet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AvailabilitySet();
            Resource.constructFromObject(data, obj);

            if (data.hasOwnProperty('properties')) {
                obj['properties'] = AvailabilitySetProperties.constructFromObject(data['properties']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AvailabilitySet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AvailabilitySet</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AvailabilitySet.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `properties`
        if (data['properties']) { // data not null
          AvailabilitySetProperties.validateJSON(data['properties']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

AvailabilitySet.RequiredProperties = ["location"];

/**
 * @member {module:model/AvailabilitySetProperties} properties
 */
AvailabilitySet.prototype['properties'] = undefined;

/**
 * Resource Id
 * @member {String} id
 */
AvailabilitySet.prototype['id'] = undefined;

/**
 * Resource location
 * @member {String} location
 */
AvailabilitySet.prototype['location'] = undefined;

/**
 * Resource name
 * @member {String} name
 */
AvailabilitySet.prototype['name'] = undefined;

/**
 * Resource tags
 * @member {Object.<String, String>} tags
 */
AvailabilitySet.prototype['tags'] = undefined;

/**
 * Resource type
 * @member {String} type
 */
AvailabilitySet.prototype['type'] = undefined;


// Implement Resource interface:
/**
 * Resource Id
 * @member {String} id
 */
Resource.prototype['id'] = undefined;
/**
 * Resource location
 * @member {String} location
 */
Resource.prototype['location'] = undefined;
/**
 * Resource name
 * @member {String} name
 */
Resource.prototype['name'] = undefined;
/**
 * Resource tags
 * @member {Object.<String, String>} tags
 */
Resource.prototype['tags'] = undefined;
/**
 * Resource type
 * @member {String} type
 */
Resource.prototype['type'] = undefined;




export default AvailabilitySet;

