/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2016-03-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VirtualMachineExtensionUpdateProperties model module.
 * @module model/VirtualMachineExtensionUpdateProperties
 * @version 2016-03-30
 */
class VirtualMachineExtensionUpdateProperties {
    /**
     * Constructs a new <code>VirtualMachineExtensionUpdateProperties</code>.
     * Describes the properties of a Virtual Machine Extension.
     * @alias module:model/VirtualMachineExtensionUpdateProperties
     */
    constructor() { 
        
        VirtualMachineExtensionUpdateProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VirtualMachineExtensionUpdateProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VirtualMachineExtensionUpdateProperties} obj Optional instance to populate.
     * @return {module:model/VirtualMachineExtensionUpdateProperties} The populated <code>VirtualMachineExtensionUpdateProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VirtualMachineExtensionUpdateProperties();

            if (data.hasOwnProperty('autoUpgradeMinorVersion')) {
                obj['autoUpgradeMinorVersion'] = ApiClient.convertToType(data['autoUpgradeMinorVersion'], 'Boolean');
            }
            if (data.hasOwnProperty('forceUpdateTag')) {
                obj['forceUpdateTag'] = ApiClient.convertToType(data['forceUpdateTag'], 'String');
            }
            if (data.hasOwnProperty('protectedSettings')) {
                obj['protectedSettings'] = ApiClient.convertToType(data['protectedSettings'], Object);
            }
            if (data.hasOwnProperty('publisher')) {
                obj['publisher'] = ApiClient.convertToType(data['publisher'], 'String');
            }
            if (data.hasOwnProperty('settings')) {
                obj['settings'] = ApiClient.convertToType(data['settings'], Object);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('typeHandlerVersion')) {
                obj['typeHandlerVersion'] = ApiClient.convertToType(data['typeHandlerVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VirtualMachineExtensionUpdateProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VirtualMachineExtensionUpdateProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['forceUpdateTag'] && !(typeof data['forceUpdateTag'] === 'string' || data['forceUpdateTag'] instanceof String)) {
            throw new Error("Expected the field `forceUpdateTag` to be a primitive type in the JSON string but got " + data['forceUpdateTag']);
        }
        // ensure the json data is a string
        if (data['publisher'] && !(typeof data['publisher'] === 'string' || data['publisher'] instanceof String)) {
            throw new Error("Expected the field `publisher` to be a primitive type in the JSON string but got " + data['publisher']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['typeHandlerVersion'] && !(typeof data['typeHandlerVersion'] === 'string' || data['typeHandlerVersion'] instanceof String)) {
            throw new Error("Expected the field `typeHandlerVersion` to be a primitive type in the JSON string but got " + data['typeHandlerVersion']);
        }

        return true;
    }


}



/**
 * Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
 * @member {Boolean} autoUpgradeMinorVersion
 */
VirtualMachineExtensionUpdateProperties.prototype['autoUpgradeMinorVersion'] = undefined;

/**
 * How the extension handler should be forced to update even if the extension configuration has not changed.
 * @member {String} forceUpdateTag
 */
VirtualMachineExtensionUpdateProperties.prototype['forceUpdateTag'] = undefined;

/**
 * The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
 * @member {Object} protectedSettings
 */
VirtualMachineExtensionUpdateProperties.prototype['protectedSettings'] = undefined;

/**
 * The name of the extension handler publisher.
 * @member {String} publisher
 */
VirtualMachineExtensionUpdateProperties.prototype['publisher'] = undefined;

/**
 * Json formatted public settings for the extension.
 * @member {Object} settings
 */
VirtualMachineExtensionUpdateProperties.prototype['settings'] = undefined;

/**
 * Specifies the type of the extension; an example is \"CustomScriptExtension\".
 * @member {String} type
 */
VirtualMachineExtensionUpdateProperties.prototype['type'] = undefined;

/**
 * Specifies the version of the script handler.
 * @member {String} typeHandlerVersion
 */
VirtualMachineExtensionUpdateProperties.prototype['typeHandlerVersion'] = undefined;






export default VirtualMachineExtensionUpdateProperties;

