/**
 * ComputeManagementClient
 * The Compute Management Client.
 *
 * The version of the OpenAPI document: 2016-03-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InstanceViewStatus from './InstanceViewStatus';

/**
 * The VirtualMachineExtensionInstanceView model module.
 * @module model/VirtualMachineExtensionInstanceView
 * @version 2016-03-30
 */
class VirtualMachineExtensionInstanceView {
    /**
     * Constructs a new <code>VirtualMachineExtensionInstanceView</code>.
     * The instance view of a virtual machine extension.
     * @alias module:model/VirtualMachineExtensionInstanceView
     */
    constructor() { 
        
        VirtualMachineExtensionInstanceView.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VirtualMachineExtensionInstanceView</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VirtualMachineExtensionInstanceView} obj Optional instance to populate.
     * @return {module:model/VirtualMachineExtensionInstanceView} The populated <code>VirtualMachineExtensionInstanceView</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VirtualMachineExtensionInstanceView();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('statuses')) {
                obj['statuses'] = ApiClient.convertToType(data['statuses'], [InstanceViewStatus]);
            }
            if (data.hasOwnProperty('substatuses')) {
                obj['substatuses'] = ApiClient.convertToType(data['substatuses'], [InstanceViewStatus]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('typeHandlerVersion')) {
                obj['typeHandlerVersion'] = ApiClient.convertToType(data['typeHandlerVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VirtualMachineExtensionInstanceView</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VirtualMachineExtensionInstanceView</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['statuses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['statuses'])) {
                throw new Error("Expected the field `statuses` to be an array in the JSON data but got " + data['statuses']);
            }
            // validate the optional field `statuses` (array)
            for (const item of data['statuses']) {
                InstanceViewStatus.validateJSON(item);
            };
        }
        if (data['substatuses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['substatuses'])) {
                throw new Error("Expected the field `substatuses` to be an array in the JSON data but got " + data['substatuses']);
            }
            // validate the optional field `substatuses` (array)
            for (const item of data['substatuses']) {
                InstanceViewStatus.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['typeHandlerVersion'] && !(typeof data['typeHandlerVersion'] === 'string' || data['typeHandlerVersion'] instanceof String)) {
            throw new Error("Expected the field `typeHandlerVersion` to be a primitive type in the JSON string but got " + data['typeHandlerVersion']);
        }

        return true;
    }


}



/**
 * The virtual machine extension name.
 * @member {String} name
 */
VirtualMachineExtensionInstanceView.prototype['name'] = undefined;

/**
 * The resource status information.
 * @member {Array.<module:model/InstanceViewStatus>} statuses
 */
VirtualMachineExtensionInstanceView.prototype['statuses'] = undefined;

/**
 * The resource status information.
 * @member {Array.<module:model/InstanceViewStatus>} substatuses
 */
VirtualMachineExtensionInstanceView.prototype['substatuses'] = undefined;

/**
 * Specifies the type of the extension; an example is \"CustomScriptExtension\".
 * @member {String} type
 */
VirtualMachineExtensionInstanceView.prototype['type'] = undefined;

/**
 * Specifies the version of the script handler.
 * @member {String} typeHandlerVersion
 */
VirtualMachineExtensionInstanceView.prototype['typeHandlerVersion'] = undefined;






export default VirtualMachineExtensionInstanceView;

