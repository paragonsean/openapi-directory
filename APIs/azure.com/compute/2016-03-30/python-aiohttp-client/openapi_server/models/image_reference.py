# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImageReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offer: str=None, publisher: str=None, sku: str=None, version: str=None):
        """ImageReference - a model defined in OpenAPI

        :param offer: The offer of this ImageReference.
        :param publisher: The publisher of this ImageReference.
        :param sku: The sku of this ImageReference.
        :param version: The version of this ImageReference.
        """
        self.openapi_types = {
            'offer': str,
            'publisher': str,
            'sku': str,
            'version': str
        }

        self.attribute_map = {
            'offer': 'offer',
            'publisher': 'publisher',
            'sku': 'sku',
            'version': 'version'
        }

        self._offer = offer
        self._publisher = publisher
        self._sku = sku
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageReference of this ImageReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offer(self):
        """Gets the offer of this ImageReference.

        Specifies the offer of the platform image or marketplace image used to create the virtual machine.

        :return: The offer of this ImageReference.
        :rtype: str
        """
        return self._offer

    @offer.setter
    def offer(self, offer):
        """Sets the offer of this ImageReference.

        Specifies the offer of the platform image or marketplace image used to create the virtual machine.

        :param offer: The offer of this ImageReference.
        :type offer: str
        """

        self._offer = offer

    @property
    def publisher(self):
        """Gets the publisher of this ImageReference.

        The image publisher.

        :return: The publisher of this ImageReference.
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this ImageReference.

        The image publisher.

        :param publisher: The publisher of this ImageReference.
        :type publisher: str
        """

        self._publisher = publisher

    @property
    def sku(self):
        """Gets the sku of this ImageReference.

        The image SKU.

        :return: The sku of this ImageReference.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this ImageReference.

        The image SKU.

        :param sku: The sku of this ImageReference.
        :type sku: str
        """

        self._sku = sku

    @property
    def version(self):
        """Gets the version of this ImageReference.

        Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available.

        :return: The version of this ImageReference.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ImageReference.

        Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available.

        :param version: The version of this ImageReference.
        :type version: str
        """

        self._version = version
