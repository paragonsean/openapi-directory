# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sub_resource import SubResource
from openapi_server import util


class KeyVaultKeyReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key_url: str=None, source_vault: SubResource=None):
        """KeyVaultKeyReference - a model defined in OpenAPI

        :param key_url: The key_url of this KeyVaultKeyReference.
        :param source_vault: The source_vault of this KeyVaultKeyReference.
        """
        self.openapi_types = {
            'key_url': str,
            'source_vault': SubResource
        }

        self.attribute_map = {
            'key_url': 'keyUrl',
            'source_vault': 'sourceVault'
        }

        self._key_url = key_url
        self._source_vault = source_vault

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeyVaultKeyReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeyVaultKeyReference of this KeyVaultKeyReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key_url(self):
        """Gets the key_url of this KeyVaultKeyReference.

        The URL referencing a key encryption key in Key Vault.

        :return: The key_url of this KeyVaultKeyReference.
        :rtype: str
        """
        return self._key_url

    @key_url.setter
    def key_url(self, key_url):
        """Sets the key_url of this KeyVaultKeyReference.

        The URL referencing a key encryption key in Key Vault.

        :param key_url: The key_url of this KeyVaultKeyReference.
        :type key_url: str
        """
        if key_url is None:
            raise ValueError("Invalid value for `key_url`, must not be `None`")

        self._key_url = key_url

    @property
    def source_vault(self):
        """Gets the source_vault of this KeyVaultKeyReference.


        :return: The source_vault of this KeyVaultKeyReference.
        :rtype: SubResource
        """
        return self._source_vault

    @source_vault.setter
    def source_vault(self, source_vault):
        """Sets the source_vault of this KeyVaultKeyReference.


        :param source_vault: The source_vault of this KeyVaultKeyReference.
        :type source_vault: SubResource
        """
        if source_vault is None:
            raise ValueError("Invalid value for `source_vault`, must not be `None`")

        self._source_vault = source_vault
