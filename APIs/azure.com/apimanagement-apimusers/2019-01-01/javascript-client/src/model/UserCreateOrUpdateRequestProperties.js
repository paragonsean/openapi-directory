/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on User entity in Azure API Management deployment. The User entity in API Management represents the developers that call the APIs of the products to which they are subscribed.
 *
 * The version of the OpenAPI document: 2019-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UserCreateOrUpdateRequestProperties model module.
 * @module model/UserCreateOrUpdateRequestProperties
 * @version 2019-01-01
 */
class UserCreateOrUpdateRequestProperties {
    /**
     * Constructs a new <code>UserCreateOrUpdateRequestProperties</code>.
     * Parameters supplied to the Create User operation.
     * @alias module:model/UserCreateOrUpdateRequestProperties
     * @param email {String} Email address. Must not be empty and must be unique within the service instance.
     * @param firstName {String} First name.
     * @param lastName {String} Last name.
     */
    constructor(email, firstName, lastName) { 
        
        UserCreateOrUpdateRequestProperties.initialize(this, email, firstName, lastName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, email, firstName, lastName) { 
        obj['email'] = email;
        obj['firstName'] = firstName;
        obj['lastName'] = lastName;
    }

    /**
     * Constructs a <code>UserCreateOrUpdateRequestProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserCreateOrUpdateRequestProperties} obj Optional instance to populate.
     * @return {module:model/UserCreateOrUpdateRequestProperties} The populated <code>UserCreateOrUpdateRequestProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserCreateOrUpdateRequestProperties();

            if (data.hasOwnProperty('appType')) {
                obj['appType'] = ApiClient.convertToType(data['appType'], 'String');
            }
            if (data.hasOwnProperty('confirmation')) {
                obj['confirmation'] = ApiClient.convertToType(data['confirmation'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserCreateOrUpdateRequestProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserCreateOrUpdateRequestProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserCreateOrUpdateRequestProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['appType'] && !(typeof data['appType'] === 'string' || data['appType'] instanceof String)) {
            throw new Error("Expected the field `appType` to be a primitive type in the JSON string but got " + data['appType']);
        }
        // ensure the json data is a string
        if (data['confirmation'] && !(typeof data['confirmation'] === 'string' || data['confirmation'] instanceof String)) {
            throw new Error("Expected the field `confirmation` to be a primitive type in the JSON string but got " + data['confirmation']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }

        return true;
    }


}

UserCreateOrUpdateRequestProperties.RequiredProperties = ["email", "firstName", "lastName"];

/**
 * Determines the type of application which send the create user request. Default is legacy portal.
 * @member {module:model/UserCreateOrUpdateRequestProperties.AppTypeEnum} appType
 */
UserCreateOrUpdateRequestProperties.prototype['appType'] = undefined;

/**
 * Determines the type of confirmation e-mail that will be sent to the newly created user.
 * @member {module:model/UserCreateOrUpdateRequestProperties.ConfirmationEnum} confirmation
 */
UserCreateOrUpdateRequestProperties.prototype['confirmation'] = undefined;

/**
 * Email address. Must not be empty and must be unique within the service instance.
 * @member {String} email
 */
UserCreateOrUpdateRequestProperties.prototype['email'] = undefined;

/**
 * First name.
 * @member {String} firstName
 */
UserCreateOrUpdateRequestProperties.prototype['firstName'] = undefined;

/**
 * Last name.
 * @member {String} lastName
 */
UserCreateOrUpdateRequestProperties.prototype['lastName'] = undefined;

/**
 * User Password. If no value is provided, a default password is generated.
 * @member {String} password
 */
UserCreateOrUpdateRequestProperties.prototype['password'] = undefined;





/**
 * Allowed values for the <code>appType</code> property.
 * @enum {String}
 * @readonly
 */
UserCreateOrUpdateRequestProperties['AppTypeEnum'] = {

    /**
     * value: "portal"
     * @const
     */
    "portal": "portal",

    /**
     * value: "developerPortal"
     * @const
     */
    "developerPortal": "developerPortal"
};


/**
 * Allowed values for the <code>confirmation</code> property.
 * @enum {String}
 * @readonly
 */
UserCreateOrUpdateRequestProperties['ConfirmationEnum'] = {

    /**
     * value: "signup"
     * @const
     */
    "signup": "signup",

    /**
     * value: "invite"
     * @const
     */
    "invite": "invite"
};



export default UserCreateOrUpdateRequestProperties;

