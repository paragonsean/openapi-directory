/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on User entity in Azure API Management deployment. The User entity in API Management represents the developers that call the APIs of the products to which they are subscribed.
 *
 * The version of the OpenAPI document: 2019-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApiManagementClient);
  }
}(this, function(expect, ApiManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ApiManagementClient.UserSubscriptionList200ResponseValueInnerProperties();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UserSubscriptionList200ResponseValueInnerProperties', function() {
    it('should create an instance of UserSubscriptionList200ResponseValueInnerProperties', function() {
      // uncomment below and update the code to test UserSubscriptionList200ResponseValueInnerProperties
      //var instance = new ApiManagementClient.UserSubscriptionList200ResponseValueInnerProperties();
      //expect(instance).to.be.a(ApiManagementClient.UserSubscriptionList200ResponseValueInnerProperties);
    });

    it('should have the property allowTracing (base name: "allowTracing")', function() {
      // uncomment below and update the code to test the property allowTracing
      //var instance = new ApiManagementClient.UserSubscriptionList200ResponseValueInnerProperties();
      //expect(instance).to.be();
    });

    it('should have the property createdDate (base name: "createdDate")', function() {
      // uncomment below and update the code to test the property createdDate
      //var instance = new ApiManagementClient.UserSubscriptionList200ResponseValueInnerProperties();
      //expect(instance).to.be();
    });

    it('should have the property displayName (base name: "displayName")', function() {
      // uncomment below and update the code to test the property displayName
      //var instance = new ApiManagementClient.UserSubscriptionList200ResponseValueInnerProperties();
      //expect(instance).to.be();
    });

    it('should have the property endDate (base name: "endDate")', function() {
      // uncomment below and update the code to test the property endDate
      //var instance = new ApiManagementClient.UserSubscriptionList200ResponseValueInnerProperties();
      //expect(instance).to.be();
    });

    it('should have the property expirationDate (base name: "expirationDate")', function() {
      // uncomment below and update the code to test the property expirationDate
      //var instance = new ApiManagementClient.UserSubscriptionList200ResponseValueInnerProperties();
      //expect(instance).to.be();
    });

    it('should have the property notificationDate (base name: "notificationDate")', function() {
      // uncomment below and update the code to test the property notificationDate
      //var instance = new ApiManagementClient.UserSubscriptionList200ResponseValueInnerProperties();
      //expect(instance).to.be();
    });

    it('should have the property ownerId (base name: "ownerId")', function() {
      // uncomment below and update the code to test the property ownerId
      //var instance = new ApiManagementClient.UserSubscriptionList200ResponseValueInnerProperties();
      //expect(instance).to.be();
    });

    it('should have the property primaryKey (base name: "primaryKey")', function() {
      // uncomment below and update the code to test the property primaryKey
      //var instance = new ApiManagementClient.UserSubscriptionList200ResponseValueInnerProperties();
      //expect(instance).to.be();
    });

    it('should have the property scope (base name: "scope")', function() {
      // uncomment below and update the code to test the property scope
      //var instance = new ApiManagementClient.UserSubscriptionList200ResponseValueInnerProperties();
      //expect(instance).to.be();
    });

    it('should have the property secondaryKey (base name: "secondaryKey")', function() {
      // uncomment below and update the code to test the property secondaryKey
      //var instance = new ApiManagementClient.UserSubscriptionList200ResponseValueInnerProperties();
      //expect(instance).to.be();
    });

    it('should have the property startDate (base name: "startDate")', function() {
      // uncomment below and update the code to test the property startDate
      //var instance = new ApiManagementClient.UserSubscriptionList200ResponseValueInnerProperties();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new ApiManagementClient.UserSubscriptionList200ResponseValueInnerProperties();
      //expect(instance).to.be();
    });

    it('should have the property stateComment (base name: "stateComment")', function() {
      // uncomment below and update the code to test the property stateComment
      //var instance = new ApiManagementClient.UserSubscriptionList200ResponseValueInnerProperties();
      //expect(instance).to.be();
    });

  });

}));
