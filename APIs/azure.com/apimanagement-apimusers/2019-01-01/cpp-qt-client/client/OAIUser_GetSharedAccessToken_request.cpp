/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on User entity in Azure API Management deployment. The User entity in API Management represents the developers that call the APIs of the products to which they are subscribed.
 *
 * The version of the OpenAPI document: 2019-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser_GetSharedAccessToken_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser_GetSharedAccessToken_request::OAIUser_GetSharedAccessToken_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser_GetSharedAccessToken_request::OAIUser_GetSharedAccessToken_request() {
    this->initializeModel();
}

OAIUser_GetSharedAccessToken_request::~OAIUser_GetSharedAccessToken_request() {}

void OAIUser_GetSharedAccessToken_request::initializeModel() {

    m_properties_isSet = false;
    m_properties_isValid = false;
}

void OAIUser_GetSharedAccessToken_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser_GetSharedAccessToken_request::fromJsonObject(QJsonObject json) {

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;
}

QString OAIUser_GetSharedAccessToken_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser_GetSharedAccessToken_request::asJsonObject() const {
    QJsonObject obj;
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    return obj;
}

OAIUser_GetSharedAccessToken_request_properties OAIUser_GetSharedAccessToken_request::getProperties() const {
    return m_properties;
}
void OAIUser_GetSharedAccessToken_request::setProperties(const OAIUser_GetSharedAccessToken_request_properties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIUser_GetSharedAccessToken_request::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIUser_GetSharedAccessToken_request::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAIUser_GetSharedAccessToken_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser_GetSharedAccessToken_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
