/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on User entity in Azure API Management deployment. The User entity in API Management represents the developers that call the APIs of the products to which they are subscribed.
 *
 * The version of the OpenAPI document: 2019-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserIdentities_List_200_response_value_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserIdentities_List_200_response_value_inner::OAIUserIdentities_List_200_response_value_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserIdentities_List_200_response_value_inner::OAIUserIdentities_List_200_response_value_inner() {
    this->initializeModel();
}

OAIUserIdentities_List_200_response_value_inner::~OAIUserIdentities_List_200_response_value_inner() {}

void OAIUserIdentities_List_200_response_value_inner::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;
}

void OAIUserIdentities_List_200_response_value_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserIdentities_List_200_response_value_inner::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;
}

QString OAIUserIdentities_List_200_response_value_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserIdentities_List_200_response_value_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    return obj;
}

QString OAIUserIdentities_List_200_response_value_inner::getId() const {
    return m_id;
}
void OAIUserIdentities_List_200_response_value_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserIdentities_List_200_response_value_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserIdentities_List_200_response_value_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUserIdentities_List_200_response_value_inner::getProvider() const {
    return m_provider;
}
void OAIUserIdentities_List_200_response_value_inner::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIUserIdentities_List_200_response_value_inner::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIUserIdentities_List_200_response_value_inner::is_provider_Valid() const{
    return m_provider_isValid;
}

bool OAIUserIdentities_List_200_response_value_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserIdentities_List_200_response_value_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
