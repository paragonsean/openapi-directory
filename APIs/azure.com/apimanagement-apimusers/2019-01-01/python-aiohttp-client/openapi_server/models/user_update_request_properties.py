# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserUpdateRequestProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, first_name: str=None, last_name: str=None, password: str=None):
        """UserUpdateRequestProperties - a model defined in OpenAPI

        :param email: The email of this UserUpdateRequestProperties.
        :param first_name: The first_name of this UserUpdateRequestProperties.
        :param last_name: The last_name of this UserUpdateRequestProperties.
        :param password: The password of this UserUpdateRequestProperties.
        """
        self.openapi_types = {
            'email': str,
            'first_name': str,
            'last_name': str,
            'password': str
        }

        self.attribute_map = {
            'email': 'email',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'password': 'password'
        }

        self._email = email
        self._first_name = first_name
        self._last_name = last_name
        self._password = password

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserUpdateRequestProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User_Update_request_properties of this UserUpdateRequestProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this UserUpdateRequestProperties.

        Email address. Must not be empty and must be unique within the service instance.

        :return: The email of this UserUpdateRequestProperties.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserUpdateRequestProperties.

        Email address. Must not be empty and must be unique within the service instance.

        :param email: The email of this UserUpdateRequestProperties.
        :type email: str
        """
        if email is not None and len(email) > 254:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `254`")
        if email is not None and len(email) < 1:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `1`")

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this UserUpdateRequestProperties.

        First name.

        :return: The first_name of this UserUpdateRequestProperties.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserUpdateRequestProperties.

        First name.

        :param first_name: The first_name of this UserUpdateRequestProperties.
        :type first_name: str
        """
        if first_name is not None and len(first_name) > 100:
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `100`")
        if first_name is not None and len(first_name) < 1:
            raise ValueError("Invalid value for `first_name`, length must be greater than or equal to `1`")

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UserUpdateRequestProperties.

        Last name.

        :return: The last_name of this UserUpdateRequestProperties.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserUpdateRequestProperties.

        Last name.

        :param last_name: The last_name of this UserUpdateRequestProperties.
        :type last_name: str
        """
        if last_name is not None and len(last_name) > 100:
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `100`")
        if last_name is not None and len(last_name) < 1:
            raise ValueError("Invalid value for `last_name`, length must be greater than or equal to `1`")

        self._last_name = last_name

    @property
    def password(self):
        """Gets the password of this UserUpdateRequestProperties.

        User Password.

        :return: The password of this UserUpdateRequestProperties.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UserUpdateRequestProperties.

        User Password.

        :param password: The password of this UserUpdateRequestProperties.
        :type password: str
        """

        self._password = password
