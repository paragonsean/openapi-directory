/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on User entity in Azure API Management deployment. The User entity in API Management represents the developers that call the APIs of the products to which they are subscribed.
 *
 * The version of the OpenAPI document: 2019-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.UserCreateOrUpdateRequest;
import org.openapitools.client.model.UserGet200Response;
import org.openapitools.client.model.UserListByService200Response;
import org.openapitools.client.model.UserListByServiceDefaultResponse;
import org.openapitools.client.model.UserUpdateRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
@Disabled
public class UserApiTest {

    private final UserApi api = new UserApi();

    /**
     * Creates or Updates a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String userId = null;
        String apiVersion = null;
        String subscriptionId = null;
        UserCreateOrUpdateRequest parameters = null;
        Boolean notify = null;
        String ifMatch = null;
        UserGet200Response response = api.userCreateOrUpdate(resourceGroupName, serviceName, userId, apiVersion, subscriptionId, parameters, notify, ifMatch);
        // TODO: test validations
    }

    /**
     * Deletes specific user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String userId = null;
        String ifMatch = null;
        String apiVersion = null;
        String subscriptionId = null;
        Boolean deleteSubscriptions = null;
        Boolean notify = null;
        String appType = null;
        api.userDelete(resourceGroupName, serviceName, userId, ifMatch, apiVersion, subscriptionId, deleteSubscriptions, notify, appType);
        // TODO: test validations
    }

    /**
     * Gets the details of the user specified by its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userGetTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String userId = null;
        String apiVersion = null;
        String subscriptionId = null;
        UserGet200Response response = api.userGet(resourceGroupName, serviceName, userId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the entity state (Etag) version of the user specified by its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userGetEntityTagTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String userId = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.userGetEntityTag(resourceGroupName, serviceName, userId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists a collection of registered users in the specified service instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userListByServiceTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        Boolean expandGroups = null;
        UserListByService200Response response = api.userListByService(resourceGroupName, serviceName, apiVersion, subscriptionId, $filter, $top, $skip, expandGroups);
        // TODO: test validations
    }

    /**
     * Updates the details of the user specified by its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String userId = null;
        String ifMatch = null;
        String apiVersion = null;
        String subscriptionId = null;
        UserUpdateRequest parameters = null;
        api.userUpdate(resourceGroupName, serviceName, userId, ifMatch, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

}
