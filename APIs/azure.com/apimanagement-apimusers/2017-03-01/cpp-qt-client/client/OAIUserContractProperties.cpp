/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on User entity in Azure API Management deployment. The User entity in API Management represents the developers that call the APIs of the products to which they are subscribed.
 *
 * The version of the OpenAPI document: 2017-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserContractProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserContractProperties::OAIUserContractProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserContractProperties::OAIUserContractProperties() {
    this->initializeModel();
}

OAIUserContractProperties::~OAIUserContractProperties() {}

void OAIUserContractProperties::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_registration_date_isSet = false;
    m_registration_date_isValid = false;

    m_identities_isSet = false;
    m_identities_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIUserContractProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserContractProperties::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_registration_date_isValid = ::OpenAPI::fromJsonValue(m_registration_date, json[QString("registrationDate")]);
    m_registration_date_isSet = !json[QString("registrationDate")].isNull() && m_registration_date_isValid;

    m_identities_isValid = ::OpenAPI::fromJsonValue(m_identities, json[QString("identities")]);
    m_identities_isSet = !json[QString("identities")].isNull() && m_identities_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIUserContractProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserContractProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_registration_date_isSet) {
        obj.insert(QString("registrationDate"), ::OpenAPI::toJsonValue(m_registration_date));
    }
    if (m_identities.size() > 0) {
        obj.insert(QString("identities"), ::OpenAPI::toJsonValue(m_identities));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIUserContractProperties::getEmail() const {
    return m_email;
}
void OAIUserContractProperties::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUserContractProperties::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUserContractProperties::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIUserContractProperties::getFirstName() const {
    return m_first_name;
}
void OAIUserContractProperties::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIUserContractProperties::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIUserContractProperties::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QList<OAIObject> OAIUserContractProperties::getGroups() const {
    return m_groups;
}
void OAIUserContractProperties::setGroups(const QList<OAIObject> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIUserContractProperties::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIUserContractProperties::is_groups_Valid() const{
    return m_groups_isValid;
}

QString OAIUserContractProperties::getLastName() const {
    return m_last_name;
}
void OAIUserContractProperties::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIUserContractProperties::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIUserContractProperties::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QDateTime OAIUserContractProperties::getRegistrationDate() const {
    return m_registration_date;
}
void OAIUserContractProperties::setRegistrationDate(const QDateTime &registration_date) {
    m_registration_date = registration_date;
    m_registration_date_isSet = true;
}

bool OAIUserContractProperties::is_registration_date_Set() const{
    return m_registration_date_isSet;
}

bool OAIUserContractProperties::is_registration_date_Valid() const{
    return m_registration_date_isValid;
}

QList<OAIUserIdentityContract> OAIUserContractProperties::getIdentities() const {
    return m_identities;
}
void OAIUserContractProperties::setIdentities(const QList<OAIUserIdentityContract> &identities) {
    m_identities = identities;
    m_identities_isSet = true;
}

bool OAIUserContractProperties::is_identities_Set() const{
    return m_identities_isSet;
}

bool OAIUserContractProperties::is_identities_Valid() const{
    return m_identities_isValid;
}

QString OAIUserContractProperties::getNote() const {
    return m_note;
}
void OAIUserContractProperties::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIUserContractProperties::is_note_Set() const{
    return m_note_isSet;
}

bool OAIUserContractProperties::is_note_Valid() const{
    return m_note_isValid;
}

QString OAIUserContractProperties::getState() const {
    return m_state;
}
void OAIUserContractProperties::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIUserContractProperties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIUserContractProperties::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIUserContractProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserContractProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
