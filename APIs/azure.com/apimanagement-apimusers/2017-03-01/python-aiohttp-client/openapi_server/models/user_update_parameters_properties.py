# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_identity_contract import UserIdentityContract
from openapi_server import util


class UserUpdateParametersProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, first_name: str=None, last_name: str=None, password: str=None, identities: List[UserIdentityContract]=None, note: str=None, state: str='active'):
        """UserUpdateParametersProperties - a model defined in OpenAPI

        :param email: The email of this UserUpdateParametersProperties.
        :param first_name: The first_name of this UserUpdateParametersProperties.
        :param last_name: The last_name of this UserUpdateParametersProperties.
        :param password: The password of this UserUpdateParametersProperties.
        :param identities: The identities of this UserUpdateParametersProperties.
        :param note: The note of this UserUpdateParametersProperties.
        :param state: The state of this UserUpdateParametersProperties.
        """
        self.openapi_types = {
            'email': str,
            'first_name': str,
            'last_name': str,
            'password': str,
            'identities': List[UserIdentityContract],
            'note': str,
            'state': str
        }

        self.attribute_map = {
            'email': 'email',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'password': 'password',
            'identities': 'identities',
            'note': 'note',
            'state': 'state'
        }

        self._email = email
        self._first_name = first_name
        self._last_name = last_name
        self._password = password
        self._identities = identities
        self._note = note
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserUpdateParametersProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserUpdateParametersProperties of this UserUpdateParametersProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this UserUpdateParametersProperties.

        Email address. Must not be empty and must be unique within the service instance.

        :return: The email of this UserUpdateParametersProperties.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserUpdateParametersProperties.

        Email address. Must not be empty and must be unique within the service instance.

        :param email: The email of this UserUpdateParametersProperties.
        :type email: str
        """
        if email is not None and len(email) > 254:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `254`")
        if email is not None and len(email) < 1:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `1`")

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this UserUpdateParametersProperties.

        First name.

        :return: The first_name of this UserUpdateParametersProperties.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserUpdateParametersProperties.

        First name.

        :param first_name: The first_name of this UserUpdateParametersProperties.
        :type first_name: str
        """
        if first_name is not None and len(first_name) > 100:
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `100`")
        if first_name is not None and len(first_name) < 1:
            raise ValueError("Invalid value for `first_name`, length must be greater than or equal to `1`")

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UserUpdateParametersProperties.

        Last name.

        :return: The last_name of this UserUpdateParametersProperties.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserUpdateParametersProperties.

        Last name.

        :param last_name: The last_name of this UserUpdateParametersProperties.
        :type last_name: str
        """
        if last_name is not None and len(last_name) > 100:
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `100`")
        if last_name is not None and len(last_name) < 1:
            raise ValueError("Invalid value for `last_name`, length must be greater than or equal to `1`")

        self._last_name = last_name

    @property
    def password(self):
        """Gets the password of this UserUpdateParametersProperties.

        User Password.

        :return: The password of this UserUpdateParametersProperties.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UserUpdateParametersProperties.

        User Password.

        :param password: The password of this UserUpdateParametersProperties.
        :type password: str
        """

        self._password = password

    @property
    def identities(self):
        """Gets the identities of this UserUpdateParametersProperties.

        Collection of user identities.

        :return: The identities of this UserUpdateParametersProperties.
        :rtype: List[UserIdentityContract]
        """
        return self._identities

    @identities.setter
    def identities(self, identities):
        """Sets the identities of this UserUpdateParametersProperties.

        Collection of user identities.

        :param identities: The identities of this UserUpdateParametersProperties.
        :type identities: List[UserIdentityContract]
        """

        self._identities = identities

    @property
    def note(self):
        """Gets the note of this UserUpdateParametersProperties.

        Optional note about a user set by the administrator.

        :return: The note of this UserUpdateParametersProperties.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this UserUpdateParametersProperties.

        Optional note about a user set by the administrator.

        :param note: The note of this UserUpdateParametersProperties.
        :type note: str
        """

        self._note = note

    @property
    def state(self):
        """Gets the state of this UserUpdateParametersProperties.

        Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.

        :return: The state of this UserUpdateParametersProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this UserUpdateParametersProperties.

        Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.

        :param state: The state of this UserUpdateParametersProperties.
        :type state: str
        """
        allowed_values = ["active", "blocked", "pending", "deleted"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
