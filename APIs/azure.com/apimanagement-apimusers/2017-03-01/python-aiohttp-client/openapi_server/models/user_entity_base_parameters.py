# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_identity_contract import UserIdentityContract
from openapi_server import util


class UserEntityBaseParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identities: List[UserIdentityContract]=None, note: str=None, state: str='active'):
        """UserEntityBaseParameters - a model defined in OpenAPI

        :param identities: The identities of this UserEntityBaseParameters.
        :param note: The note of this UserEntityBaseParameters.
        :param state: The state of this UserEntityBaseParameters.
        """
        self.openapi_types = {
            'identities': List[UserIdentityContract],
            'note': str,
            'state': str
        }

        self.attribute_map = {
            'identities': 'identities',
            'note': 'note',
            'state': 'state'
        }

        self._identities = identities
        self._note = note
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserEntityBaseParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserEntityBaseParameters of this UserEntityBaseParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identities(self):
        """Gets the identities of this UserEntityBaseParameters.

        Collection of user identities.

        :return: The identities of this UserEntityBaseParameters.
        :rtype: List[UserIdentityContract]
        """
        return self._identities

    @identities.setter
    def identities(self, identities):
        """Sets the identities of this UserEntityBaseParameters.

        Collection of user identities.

        :param identities: The identities of this UserEntityBaseParameters.
        :type identities: List[UserIdentityContract]
        """

        self._identities = identities

    @property
    def note(self):
        """Gets the note of this UserEntityBaseParameters.

        Optional note about a user set by the administrator.

        :return: The note of this UserEntityBaseParameters.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this UserEntityBaseParameters.

        Optional note about a user set by the administrator.

        :param note: The note of this UserEntityBaseParameters.
        :type note: str
        """

        self._note = note

    @property
    def state(self):
        """Gets the state of this UserEntityBaseParameters.

        Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.

        :return: The state of this UserEntityBaseParameters.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this UserEntityBaseParameters.

        Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.

        :param state: The state of this UserEntityBaseParameters.
        :type state: str
        """
        allowed_values = ["active", "blocked", "pending", "deleted"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
