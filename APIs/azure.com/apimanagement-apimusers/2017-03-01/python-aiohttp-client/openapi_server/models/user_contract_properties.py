# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_identity_contract import UserIdentityContract
from openapi_server import util


class UserContractProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, first_name: str=None, groups: List[object]=None, last_name: str=None, registration_date: datetime=None, identities: List[UserIdentityContract]=None, note: str=None, state: str='active'):
        """UserContractProperties - a model defined in OpenAPI

        :param email: The email of this UserContractProperties.
        :param first_name: The first_name of this UserContractProperties.
        :param groups: The groups of this UserContractProperties.
        :param last_name: The last_name of this UserContractProperties.
        :param registration_date: The registration_date of this UserContractProperties.
        :param identities: The identities of this UserContractProperties.
        :param note: The note of this UserContractProperties.
        :param state: The state of this UserContractProperties.
        """
        self.openapi_types = {
            'email': str,
            'first_name': str,
            'groups': List[object],
            'last_name': str,
            'registration_date': datetime,
            'identities': List[UserIdentityContract],
            'note': str,
            'state': str
        }

        self.attribute_map = {
            'email': 'email',
            'first_name': 'firstName',
            'groups': 'groups',
            'last_name': 'lastName',
            'registration_date': 'registrationDate',
            'identities': 'identities',
            'note': 'note',
            'state': 'state'
        }

        self._email = email
        self._first_name = first_name
        self._groups = groups
        self._last_name = last_name
        self._registration_date = registration_date
        self._identities = identities
        self._note = note
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserContractProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserContractProperties of this UserContractProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this UserContractProperties.

        Email address.

        :return: The email of this UserContractProperties.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserContractProperties.

        Email address.

        :param email: The email of this UserContractProperties.
        :type email: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this UserContractProperties.

        First name.

        :return: The first_name of this UserContractProperties.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserContractProperties.

        First name.

        :param first_name: The first_name of this UserContractProperties.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def groups(self):
        """Gets the groups of this UserContractProperties.

        Collection of groups user is part of.

        :return: The groups of this UserContractProperties.
        :rtype: List[object]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this UserContractProperties.

        Collection of groups user is part of.

        :param groups: The groups of this UserContractProperties.
        :type groups: List[object]
        """

        self._groups = groups

    @property
    def last_name(self):
        """Gets the last_name of this UserContractProperties.

        Last name.

        :return: The last_name of this UserContractProperties.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserContractProperties.

        Last name.

        :param last_name: The last_name of this UserContractProperties.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def registration_date(self):
        """Gets the registration_date of this UserContractProperties.

        Date of user registration. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :return: The registration_date of this UserContractProperties.
        :rtype: datetime
        """
        return self._registration_date

    @registration_date.setter
    def registration_date(self, registration_date):
        """Sets the registration_date of this UserContractProperties.

        Date of user registration. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :param registration_date: The registration_date of this UserContractProperties.
        :type registration_date: datetime
        """

        self._registration_date = registration_date

    @property
    def identities(self):
        """Gets the identities of this UserContractProperties.

        Collection of user identities.

        :return: The identities of this UserContractProperties.
        :rtype: List[UserIdentityContract]
        """
        return self._identities

    @identities.setter
    def identities(self, identities):
        """Sets the identities of this UserContractProperties.

        Collection of user identities.

        :param identities: The identities of this UserContractProperties.
        :type identities: List[UserIdentityContract]
        """

        self._identities = identities

    @property
    def note(self):
        """Gets the note of this UserContractProperties.

        Optional note about a user set by the administrator.

        :return: The note of this UserContractProperties.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this UserContractProperties.

        Optional note about a user set by the administrator.

        :param note: The note of this UserContractProperties.
        :type note: str
        """

        self._note = note

    @property
    def state(self):
        """Gets the state of this UserContractProperties.

        Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.

        :return: The state of this UserContractProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this UserContractProperties.

        Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.

        :param state: The state of this UserContractProperties.
        :type state: str
        """
        allowed_values = ["active", "blocked", "pending", "deleted"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
