/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on User entity in Azure API Management deployment. The User entity in API Management represents the developers that call the APIs of the products to which they are subscribed.
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CurrentUserIdentity;
import org.openapitools.client.model.GenerateSsoUrlResult;
import org.openapitools.client.model.UserCollection;
import org.openapitools.client.model.UserContract;
import org.openapitools.client.model.UserCreateParameters;
import org.openapitools.client.model.UserGetIdentityDefaultResponse;
import org.openapitools.client.model.UserTokenParameters;
import org.openapitools.client.model.UserTokenResult;
import org.openapitools.client.model.UserUpdateParameters;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * Creates or Updates a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String uid = null;
        String apiVersion = null;
        String subscriptionId = null;
        UserCreateParameters parameters = null;
        String ifMatch = null;
        UserContract response = api.userCreateOrUpdate(resourceGroupName, serviceName, uid, apiVersion, subscriptionId, parameters, ifMatch);
        // TODO: test validations
    }

    /**
     * Deletes specific user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String uid = null;
        String ifMatch = null;
        String apiVersion = null;
        String subscriptionId = null;
        Boolean deleteSubscriptions = null;
        Boolean notify = null;
        api.userDelete(resourceGroupName, serviceName, uid, ifMatch, apiVersion, subscriptionId, deleteSubscriptions, notify);
        // TODO: test validations
    }

    /**
     * Retrieves a redirection URL containing an authentication token for signing a given user into the developer portal.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userGenerateSsoUrlTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String uid = null;
        String apiVersion = null;
        String subscriptionId = null;
        GenerateSsoUrlResult response = api.userGenerateSsoUrl(resourceGroupName, serviceName, uid, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the details of the user specified by its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userGetTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String uid = null;
        String apiVersion = null;
        String subscriptionId = null;
        UserContract response = api.userGet(resourceGroupName, serviceName, uid, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the entity state (Etag) version of the user specified by its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userGetEntityTagTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String uid = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.userGetEntityTag(resourceGroupName, serviceName, uid, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Returns calling user identity information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userGetIdentityTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        CurrentUserIdentity response = api.userGetIdentity(resourceGroupName, serviceName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the Shared Access Authorization Token for the User.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userGetSharedAccessTokenTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String uid = null;
        String apiVersion = null;
        String subscriptionId = null;
        UserTokenParameters parameters = null;
        UserTokenResult response = api.userGetSharedAccessToken(resourceGroupName, serviceName, uid, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Lists a collection of registered users in the specified service instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userListByServiceTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        UserCollection response = api.userListByService(resourceGroupName, serviceName, apiVersion, subscriptionId, $filter, $top, $skip);
        // TODO: test validations
    }

    /**
     * Updates the details of the user specified by its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String uid = null;
        String ifMatch = null;
        String apiVersion = null;
        String subscriptionId = null;
        UserUpdateParameters parameters = null;
        api.userUpdate(resourceGroupName, serviceName, uid, ifMatch, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

}
