# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserTokenParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expiry: datetime=None, key_type: str='primary'):
        """UserTokenParameters - a model defined in OpenAPI

        :param expiry: The expiry of this UserTokenParameters.
        :param key_type: The key_type of this UserTokenParameters.
        """
        self.openapi_types = {
            'expiry': datetime,
            'key_type': str
        }

        self.attribute_map = {
            'expiry': 'expiry',
            'key_type': 'keyType'
        }

        self._expiry = expiry
        self._key_type = key_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserTokenParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserTokenParameters of this UserTokenParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expiry(self):
        """Gets the expiry of this UserTokenParameters.

        The Expiry time of the Token. Maximum token expiry time is set to 30 days. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :return: The expiry of this UserTokenParameters.
        :rtype: datetime
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this UserTokenParameters.

        The Expiry time of the Token. Maximum token expiry time is set to 30 days. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :param expiry: The expiry of this UserTokenParameters.
        :type expiry: datetime
        """
        if expiry is None:
            raise ValueError("Invalid value for `expiry`, must not be `None`")

        self._expiry = expiry

    @property
    def key_type(self):
        """Gets the key_type of this UserTokenParameters.

        The Key to be used to generate token for user.

        :return: The key_type of this UserTokenParameters.
        :rtype: str
        """
        return self._key_type

    @key_type.setter
    def key_type(self, key_type):
        """Sets the key_type of this UserTokenParameters.

        The Key to be used to generate token for user.

        :param key_type: The key_type of this UserTokenParameters.
        :type key_type: str
        """
        allowed_values = ["primary", "secondary"]  # noqa: E501
        if key_type not in allowed_values:
            raise ValueError(
                "Invalid value for `key_type` ({0}), must be one of {1}"
                .format(key_type, allowed_values)
            )

        self._key_type = key_type
