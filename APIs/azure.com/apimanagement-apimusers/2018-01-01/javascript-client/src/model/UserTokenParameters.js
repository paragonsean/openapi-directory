/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on User entity in Azure API Management deployment. The User entity in API Management represents the developers that call the APIs of the products to which they are subscribed.
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UserTokenParameters model module.
 * @module model/UserTokenParameters
 * @version 2018-01-01
 */
class UserTokenParameters {
    /**
     * Constructs a new <code>UserTokenParameters</code>.
     * Parameters supplied to the Get User Token operation.
     * @alias module:model/UserTokenParameters
     * @param expiry {Date} The Expiry time of the Token. Maximum token expiry time is set to 30 days. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 
     * @param keyType {module:model/UserTokenParameters.KeyTypeEnum} The Key to be used to generate token for user.
     */
    constructor(expiry, keyType) { 
        
        UserTokenParameters.initialize(this, expiry, keyType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, expiry, keyType) { 
        obj['expiry'] = expiry;
        obj['keyType'] = keyType || 'primary';
    }

    /**
     * Constructs a <code>UserTokenParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserTokenParameters} obj Optional instance to populate.
     * @return {module:model/UserTokenParameters} The populated <code>UserTokenParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserTokenParameters();

            if (data.hasOwnProperty('expiry')) {
                obj['expiry'] = ApiClient.convertToType(data['expiry'], 'Date');
            }
            if (data.hasOwnProperty('keyType')) {
                obj['keyType'] = ApiClient.convertToType(data['keyType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserTokenParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserTokenParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserTokenParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['keyType'] && !(typeof data['keyType'] === 'string' || data['keyType'] instanceof String)) {
            throw new Error("Expected the field `keyType` to be a primitive type in the JSON string but got " + data['keyType']);
        }

        return true;
    }


}

UserTokenParameters.RequiredProperties = ["expiry", "keyType"];

/**
 * The Expiry time of the Token. Maximum token expiry time is set to 30 days. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 
 * @member {Date} expiry
 */
UserTokenParameters.prototype['expiry'] = undefined;

/**
 * The Key to be used to generate token for user.
 * @member {module:model/UserTokenParameters.KeyTypeEnum} keyType
 * @default 'primary'
 */
UserTokenParameters.prototype['keyType'] = 'primary';





/**
 * Allowed values for the <code>keyType</code> property.
 * @enum {String}
 * @readonly
 */
UserTokenParameters['KeyTypeEnum'] = {

    /**
     * value: "primary"
     * @const
     */
    "primary": "primary",

    /**
     * value: "secondary"
     * @const
     */
    "secondary": "secondary"
};



export default UserTokenParameters;

