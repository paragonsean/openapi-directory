/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on User entity in Azure API Management deployment. The User entity in API Management represents the developers that call the APIs of the products to which they are subscribed.
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserSubscription_List_200_response_value_inner_properties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserSubscription_List_200_response_value_inner_properties::OAIUserSubscription_List_200_response_value_inner_properties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserSubscription_List_200_response_value_inner_properties::OAIUserSubscription_List_200_response_value_inner_properties() {
    this->initializeModel();
}

OAIUserSubscription_List_200_response_value_inner_properties::~OAIUserSubscription_List_200_response_value_inner_properties() {}

void OAIUserSubscription_List_200_response_value_inner_properties::initializeModel() {

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_notification_date_isSet = false;
    m_notification_date_isValid = false;

    m_primary_key_isSet = false;
    m_primary_key_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_secondary_key_isSet = false;
    m_secondary_key_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_comment_isSet = false;
    m_state_comment_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIUserSubscription_List_200_response_value_inner_properties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserSubscription_List_200_response_value_inner_properties::fromJsonObject(QJsonObject json) {

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_notification_date_isValid = ::OpenAPI::fromJsonValue(m_notification_date, json[QString("notificationDate")]);
    m_notification_date_isSet = !json[QString("notificationDate")].isNull() && m_notification_date_isValid;

    m_primary_key_isValid = ::OpenAPI::fromJsonValue(m_primary_key, json[QString("primaryKey")]);
    m_primary_key_isSet = !json[QString("primaryKey")].isNull() && m_primary_key_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("productId")]);
    m_product_id_isSet = !json[QString("productId")].isNull() && m_product_id_isValid;

    m_secondary_key_isValid = ::OpenAPI::fromJsonValue(m_secondary_key, json[QString("secondaryKey")]);
    m_secondary_key_isSet = !json[QString("secondaryKey")].isNull() && m_secondary_key_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_comment_isValid = ::OpenAPI::fromJsonValue(m_state_comment, json[QString("stateComment")]);
    m_state_comment_isSet = !json[QString("stateComment")].isNull() && m_state_comment_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIUserSubscription_List_200_response_value_inner_properties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserSubscription_List_200_response_value_inner_properties::asJsonObject() const {
    QJsonObject obj;
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_notification_date_isSet) {
        obj.insert(QString("notificationDate"), ::OpenAPI::toJsonValue(m_notification_date));
    }
    if (m_primary_key_isSet) {
        obj.insert(QString("primaryKey"), ::OpenAPI::toJsonValue(m_primary_key));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("productId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_secondary_key_isSet) {
        obj.insert(QString("secondaryKey"), ::OpenAPI::toJsonValue(m_secondary_key));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_comment_isSet) {
        obj.insert(QString("stateComment"), ::OpenAPI::toJsonValue(m_state_comment));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QDateTime OAIUserSubscription_List_200_response_value_inner_properties::getCreatedDate() const {
    return m_created_date;
}
void OAIUserSubscription_List_200_response_value_inner_properties::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIUserSubscription_List_200_response_value_inner_properties::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIUserSubscription_List_200_response_value_inner_properties::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAIUserSubscription_List_200_response_value_inner_properties::getDisplayName() const {
    return m_display_name;
}
void OAIUserSubscription_List_200_response_value_inner_properties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIUserSubscription_List_200_response_value_inner_properties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIUserSubscription_List_200_response_value_inner_properties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QDateTime OAIUserSubscription_List_200_response_value_inner_properties::getEndDate() const {
    return m_end_date;
}
void OAIUserSubscription_List_200_response_value_inner_properties::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIUserSubscription_List_200_response_value_inner_properties::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIUserSubscription_List_200_response_value_inner_properties::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QDateTime OAIUserSubscription_List_200_response_value_inner_properties::getExpirationDate() const {
    return m_expiration_date;
}
void OAIUserSubscription_List_200_response_value_inner_properties::setExpirationDate(const QDateTime &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIUserSubscription_List_200_response_value_inner_properties::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIUserSubscription_List_200_response_value_inner_properties::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

QDateTime OAIUserSubscription_List_200_response_value_inner_properties::getNotificationDate() const {
    return m_notification_date;
}
void OAIUserSubscription_List_200_response_value_inner_properties::setNotificationDate(const QDateTime &notification_date) {
    m_notification_date = notification_date;
    m_notification_date_isSet = true;
}

bool OAIUserSubscription_List_200_response_value_inner_properties::is_notification_date_Set() const{
    return m_notification_date_isSet;
}

bool OAIUserSubscription_List_200_response_value_inner_properties::is_notification_date_Valid() const{
    return m_notification_date_isValid;
}

QString OAIUserSubscription_List_200_response_value_inner_properties::getPrimaryKey() const {
    return m_primary_key;
}
void OAIUserSubscription_List_200_response_value_inner_properties::setPrimaryKey(const QString &primary_key) {
    m_primary_key = primary_key;
    m_primary_key_isSet = true;
}

bool OAIUserSubscription_List_200_response_value_inner_properties::is_primary_key_Set() const{
    return m_primary_key_isSet;
}

bool OAIUserSubscription_List_200_response_value_inner_properties::is_primary_key_Valid() const{
    return m_primary_key_isValid;
}

QString OAIUserSubscription_List_200_response_value_inner_properties::getProductId() const {
    return m_product_id;
}
void OAIUserSubscription_List_200_response_value_inner_properties::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIUserSubscription_List_200_response_value_inner_properties::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIUserSubscription_List_200_response_value_inner_properties::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIUserSubscription_List_200_response_value_inner_properties::getSecondaryKey() const {
    return m_secondary_key;
}
void OAIUserSubscription_List_200_response_value_inner_properties::setSecondaryKey(const QString &secondary_key) {
    m_secondary_key = secondary_key;
    m_secondary_key_isSet = true;
}

bool OAIUserSubscription_List_200_response_value_inner_properties::is_secondary_key_Set() const{
    return m_secondary_key_isSet;
}

bool OAIUserSubscription_List_200_response_value_inner_properties::is_secondary_key_Valid() const{
    return m_secondary_key_isValid;
}

QDateTime OAIUserSubscription_List_200_response_value_inner_properties::getStartDate() const {
    return m_start_date;
}
void OAIUserSubscription_List_200_response_value_inner_properties::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIUserSubscription_List_200_response_value_inner_properties::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIUserSubscription_List_200_response_value_inner_properties::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIUserSubscription_List_200_response_value_inner_properties::getState() const {
    return m_state;
}
void OAIUserSubscription_List_200_response_value_inner_properties::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIUserSubscription_List_200_response_value_inner_properties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIUserSubscription_List_200_response_value_inner_properties::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIUserSubscription_List_200_response_value_inner_properties::getStateComment() const {
    return m_state_comment;
}
void OAIUserSubscription_List_200_response_value_inner_properties::setStateComment(const QString &state_comment) {
    m_state_comment = state_comment;
    m_state_comment_isSet = true;
}

bool OAIUserSubscription_List_200_response_value_inner_properties::is_state_comment_Set() const{
    return m_state_comment_isSet;
}

bool OAIUserSubscription_List_200_response_value_inner_properties::is_state_comment_Valid() const{
    return m_state_comment_isValid;
}

QString OAIUserSubscription_List_200_response_value_inner_properties::getUserId() const {
    return m_user_id;
}
void OAIUserSubscription_List_200_response_value_inner_properties::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIUserSubscription_List_200_response_value_inner_properties::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIUserSubscription_List_200_response_value_inner_properties::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIUserSubscription_List_200_response_value_inner_properties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserSubscription_List_200_response_value_inner_properties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_primary_key_isValid && m_product_id_isValid && m_secondary_key_isValid && m_state_isValid && m_user_id_isValid && true;
}

} // namespace OpenAPI
