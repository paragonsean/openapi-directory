/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on User entity in Azure API Management deployment. The User entity in API Management represents the developers that call the APIs of the products to which they are subscribed.
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserUpdateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserUpdateParameters::OAIUserUpdateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserUpdateParameters::OAIUserUpdateParameters() {
    this->initializeModel();
}

OAIUserUpdateParameters::~OAIUserUpdateParameters() {}

void OAIUserUpdateParameters::initializeModel() {

    m_properties_isSet = false;
    m_properties_isValid = false;
}

void OAIUserUpdateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserUpdateParameters::fromJsonObject(QJsonObject json) {

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;
}

QString OAIUserUpdateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserUpdateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    return obj;
}

OAIUserUpdateParametersProperties OAIUserUpdateParameters::getProperties() const {
    return m_properties;
}
void OAIUserUpdateParameters::setProperties(const OAIUserUpdateParametersProperties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIUserUpdateParameters::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIUserUpdateParameters::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAIUserUpdateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserUpdateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
