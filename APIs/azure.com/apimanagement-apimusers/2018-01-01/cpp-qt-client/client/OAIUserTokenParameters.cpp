/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on User entity in Azure API Management deployment. The User entity in API Management represents the developers that call the APIs of the products to which they are subscribed.
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserTokenParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserTokenParameters::OAIUserTokenParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserTokenParameters::OAIUserTokenParameters() {
    this->initializeModel();
}

OAIUserTokenParameters::~OAIUserTokenParameters() {}

void OAIUserTokenParameters::initializeModel() {

    m_expiry_isSet = false;
    m_expiry_isValid = false;

    m_key_type_isSet = false;
    m_key_type_isValid = false;
}

void OAIUserTokenParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserTokenParameters::fromJsonObject(QJsonObject json) {

    m_expiry_isValid = ::OpenAPI::fromJsonValue(m_expiry, json[QString("expiry")]);
    m_expiry_isSet = !json[QString("expiry")].isNull() && m_expiry_isValid;

    m_key_type_isValid = ::OpenAPI::fromJsonValue(m_key_type, json[QString("keyType")]);
    m_key_type_isSet = !json[QString("keyType")].isNull() && m_key_type_isValid;
}

QString OAIUserTokenParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserTokenParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_expiry_isSet) {
        obj.insert(QString("expiry"), ::OpenAPI::toJsonValue(m_expiry));
    }
    if (m_key_type_isSet) {
        obj.insert(QString("keyType"), ::OpenAPI::toJsonValue(m_key_type));
    }
    return obj;
}

QDateTime OAIUserTokenParameters::getExpiry() const {
    return m_expiry;
}
void OAIUserTokenParameters::setExpiry(const QDateTime &expiry) {
    m_expiry = expiry;
    m_expiry_isSet = true;
}

bool OAIUserTokenParameters::is_expiry_Set() const{
    return m_expiry_isSet;
}

bool OAIUserTokenParameters::is_expiry_Valid() const{
    return m_expiry_isValid;
}

QString OAIUserTokenParameters::getKeyType() const {
    return m_key_type;
}
void OAIUserTokenParameters::setKeyType(const QString &key_type) {
    m_key_type = key_type;
    m_key_type_isSet = true;
}

bool OAIUserTokenParameters::is_key_type_Set() const{
    return m_key_type_isSet;
}

bool OAIUserTokenParameters::is_key_type_Valid() const{
    return m_key_type_isValid;
}

bool OAIUserTokenParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expiry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserTokenParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expiry_isValid && m_key_type_isValid && true;
}

} // namespace OpenAPI
