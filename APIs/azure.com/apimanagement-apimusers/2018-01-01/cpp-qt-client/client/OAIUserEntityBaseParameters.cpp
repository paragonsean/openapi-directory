/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on User entity in Azure API Management deployment. The User entity in API Management represents the developers that call the APIs of the products to which they are subscribed.
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserEntityBaseParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserEntityBaseParameters::OAIUserEntityBaseParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserEntityBaseParameters::OAIUserEntityBaseParameters() {
    this->initializeModel();
}

OAIUserEntityBaseParameters::~OAIUserEntityBaseParameters() {}

void OAIUserEntityBaseParameters::initializeModel() {

    m_identities_isSet = false;
    m_identities_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIUserEntityBaseParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserEntityBaseParameters::fromJsonObject(QJsonObject json) {

    m_identities_isValid = ::OpenAPI::fromJsonValue(m_identities, json[QString("identities")]);
    m_identities_isSet = !json[QString("identities")].isNull() && m_identities_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIUserEntityBaseParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserEntityBaseParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_identities.size() > 0) {
        obj.insert(QString("identities"), ::OpenAPI::toJsonValue(m_identities));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QList<OAIUserIdentityContract> OAIUserEntityBaseParameters::getIdentities() const {
    return m_identities;
}
void OAIUserEntityBaseParameters::setIdentities(const QList<OAIUserIdentityContract> &identities) {
    m_identities = identities;
    m_identities_isSet = true;
}

bool OAIUserEntityBaseParameters::is_identities_Set() const{
    return m_identities_isSet;
}

bool OAIUserEntityBaseParameters::is_identities_Valid() const{
    return m_identities_isValid;
}

QString OAIUserEntityBaseParameters::getNote() const {
    return m_note;
}
void OAIUserEntityBaseParameters::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIUserEntityBaseParameters::is_note_Set() const{
    return m_note_isSet;
}

bool OAIUserEntityBaseParameters::is_note_Valid() const{
    return m_note_isValid;
}

QString OAIUserEntityBaseParameters::getState() const {
    return m_state;
}
void OAIUserEntityBaseParameters::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIUserEntityBaseParameters::is_state_Set() const{
    return m_state_isSet;
}

bool OAIUserEntityBaseParameters::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIUserEntityBaseParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserEntityBaseParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
