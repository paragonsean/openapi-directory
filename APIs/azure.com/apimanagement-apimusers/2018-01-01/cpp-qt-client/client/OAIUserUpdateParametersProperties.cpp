/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on User entity in Azure API Management deployment. The User entity in API Management represents the developers that call the APIs of the products to which they are subscribed.
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserUpdateParametersProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserUpdateParametersProperties::OAIUserUpdateParametersProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserUpdateParametersProperties::OAIUserUpdateParametersProperties() {
    this->initializeModel();
}

OAIUserUpdateParametersProperties::~OAIUserUpdateParametersProperties() {}

void OAIUserUpdateParametersProperties::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_identities_isSet = false;
    m_identities_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIUserUpdateParametersProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserUpdateParametersProperties::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_identities_isValid = ::OpenAPI::fromJsonValue(m_identities, json[QString("identities")]);
    m_identities_isSet = !json[QString("identities")].isNull() && m_identities_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIUserUpdateParametersProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserUpdateParametersProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_identities.size() > 0) {
        obj.insert(QString("identities"), ::OpenAPI::toJsonValue(m_identities));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIUserUpdateParametersProperties::getEmail() const {
    return m_email;
}
void OAIUserUpdateParametersProperties::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUserUpdateParametersProperties::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUserUpdateParametersProperties::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIUserUpdateParametersProperties::getFirstName() const {
    return m_first_name;
}
void OAIUserUpdateParametersProperties::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIUserUpdateParametersProperties::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIUserUpdateParametersProperties::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIUserUpdateParametersProperties::getLastName() const {
    return m_last_name;
}
void OAIUserUpdateParametersProperties::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIUserUpdateParametersProperties::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIUserUpdateParametersProperties::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIUserUpdateParametersProperties::getPassword() const {
    return m_password;
}
void OAIUserUpdateParametersProperties::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIUserUpdateParametersProperties::is_password_Set() const{
    return m_password_isSet;
}

bool OAIUserUpdateParametersProperties::is_password_Valid() const{
    return m_password_isValid;
}

QList<OAIUserIdentityContract> OAIUserUpdateParametersProperties::getIdentities() const {
    return m_identities;
}
void OAIUserUpdateParametersProperties::setIdentities(const QList<OAIUserIdentityContract> &identities) {
    m_identities = identities;
    m_identities_isSet = true;
}

bool OAIUserUpdateParametersProperties::is_identities_Set() const{
    return m_identities_isSet;
}

bool OAIUserUpdateParametersProperties::is_identities_Valid() const{
    return m_identities_isValid;
}

QString OAIUserUpdateParametersProperties::getNote() const {
    return m_note;
}
void OAIUserUpdateParametersProperties::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIUserUpdateParametersProperties::is_note_Set() const{
    return m_note_isSet;
}

bool OAIUserUpdateParametersProperties::is_note_Valid() const{
    return m_note_isValid;
}

QString OAIUserUpdateParametersProperties::getState() const {
    return m_state;
}
void OAIUserUpdateParametersProperties::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIUserUpdateParametersProperties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIUserUpdateParametersProperties::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIUserUpdateParametersProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserUpdateParametersProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
