/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on User entity in Azure API Management deployment. The User entity in API Management represents the developers that call the APIs of the products to which they are subscribed.
 *
 * The version of the OpenAPI document: 2016-10-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UserSubscriptionsListByUsers200ResponseValueInner model module.
 * @module model/UserSubscriptionsListByUsers200ResponseValueInner
 * @version 2016-10-10
 */
class UserSubscriptionsListByUsers200ResponseValueInner {
    /**
     * Constructs a new <code>UserSubscriptionsListByUsers200ResponseValueInner</code>.
     * Subscription details.
     * @alias module:model/UserSubscriptionsListByUsers200ResponseValueInner
     */
    constructor() { 
        
        UserSubscriptionsListByUsers200ResponseValueInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UserSubscriptionsListByUsers200ResponseValueInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserSubscriptionsListByUsers200ResponseValueInner} obj Optional instance to populate.
     * @return {module:model/UserSubscriptionsListByUsers200ResponseValueInner} The populated <code>UserSubscriptionsListByUsers200ResponseValueInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserSubscriptionsListByUsers200ResponseValueInner();

            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'Date');
            }
            if (data.hasOwnProperty('expirationDate')) {
                obj['expirationDate'] = ApiClient.convertToType(data['expirationDate'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notificationDate')) {
                obj['notificationDate'] = ApiClient.convertToType(data['notificationDate'], 'Date');
            }
            if (data.hasOwnProperty('primaryKey')) {
                obj['primaryKey'] = ApiClient.convertToType(data['primaryKey'], 'String');
            }
            if (data.hasOwnProperty('productId')) {
                obj['productId'] = ApiClient.convertToType(data['productId'], 'String');
            }
            if (data.hasOwnProperty('secondaryKey')) {
                obj['secondaryKey'] = ApiClient.convertToType(data['secondaryKey'], 'String');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('stateComment')) {
                obj['stateComment'] = ApiClient.convertToType(data['stateComment'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserSubscriptionsListByUsers200ResponseValueInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserSubscriptionsListByUsers200ResponseValueInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['primaryKey'] && !(typeof data['primaryKey'] === 'string' || data['primaryKey'] instanceof String)) {
            throw new Error("Expected the field `primaryKey` to be a primitive type in the JSON string but got " + data['primaryKey']);
        }
        // ensure the json data is a string
        if (data['productId'] && !(typeof data['productId'] === 'string' || data['productId'] instanceof String)) {
            throw new Error("Expected the field `productId` to be a primitive type in the JSON string but got " + data['productId']);
        }
        // ensure the json data is a string
        if (data['secondaryKey'] && !(typeof data['secondaryKey'] === 'string' || data['secondaryKey'] instanceof String)) {
            throw new Error("Expected the field `secondaryKey` to be a primitive type in the JSON string but got " + data['secondaryKey']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['stateComment'] && !(typeof data['stateComment'] === 'string' || data['stateComment'] instanceof String)) {
            throw new Error("Expected the field `stateComment` to be a primitive type in the JSON string but got " + data['stateComment']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}



/**
 * Subscription creation date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 
 * @member {Date} createdDate
 */
UserSubscriptionsListByUsers200ResponseValueInner.prototype['createdDate'] = undefined;

/**
 * Date when subscription was cancelled or expired. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 
 * @member {Date} endDate
 */
UserSubscriptionsListByUsers200ResponseValueInner.prototype['endDate'] = undefined;

/**
 * Subscription expiration date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 
 * @member {Date} expirationDate
 */
UserSubscriptionsListByUsers200ResponseValueInner.prototype['expirationDate'] = undefined;

/**
 * Uniquely identifies the subscription within the current API Management service instance. The value is a valid relative URL in the format of /subscriptions/{sid} where {sid} is a subscription identifier.
 * @member {String} id
 */
UserSubscriptionsListByUsers200ResponseValueInner.prototype['id'] = undefined;

/**
 * The name of the subscription, or null if the subscription has no name.
 * @member {String} name
 */
UserSubscriptionsListByUsers200ResponseValueInner.prototype['name'] = undefined;

/**
 * Upcoming subscription expiration notification date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 
 * @member {Date} notificationDate
 */
UserSubscriptionsListByUsers200ResponseValueInner.prototype['notificationDate'] = undefined;

/**
 * Subscription primary key.
 * @member {String} primaryKey
 */
UserSubscriptionsListByUsers200ResponseValueInner.prototype['primaryKey'] = undefined;

/**
 * The product resource identifier of the subscribed product. The value is a valid relative URL in the format of /products/{productId} where {productId} is a product identifier.
 * @member {String} productId
 */
UserSubscriptionsListByUsers200ResponseValueInner.prototype['productId'] = undefined;

/**
 * Subscription secondary key.
 * @member {String} secondaryKey
 */
UserSubscriptionsListByUsers200ResponseValueInner.prototype['secondaryKey'] = undefined;

/**
 * Subscription activation date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 
 * @member {Date} startDate
 */
UserSubscriptionsListByUsers200ResponseValueInner.prototype['startDate'] = undefined;

/**
 * Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.
 * @member {module:model/UserSubscriptionsListByUsers200ResponseValueInner.StateEnum} state
 */
UserSubscriptionsListByUsers200ResponseValueInner.prototype['state'] = undefined;

/**
 * Optional subscription comment added by an administrator.
 * @member {String} stateComment
 */
UserSubscriptionsListByUsers200ResponseValueInner.prototype['stateComment'] = undefined;

/**
 * The user resource identifier of the subscription owner. The value is a valid relative URL in the format of /users/{uid} where {uid} is a user identifier.
 * @member {String} userId
 */
UserSubscriptionsListByUsers200ResponseValueInner.prototype['userId'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
UserSubscriptionsListByUsers200ResponseValueInner['StateEnum'] = {

    /**
     * value: "Suspended"
     * @const
     */
    "Suspended": "Suspended",

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "Expired"
     * @const
     */
    "Expired": "Expired",

    /**
     * value: "Submitted"
     * @const
     */
    "Submitted": "Submitted",

    /**
     * value: "Rejected"
     * @const
     */
    "Rejected": "Rejected",

    /**
     * value: "Cancelled"
     * @const
     */
    "Cancelled": "Cancelled"
};



export default UserSubscriptionsListByUsers200ResponseValueInner;

