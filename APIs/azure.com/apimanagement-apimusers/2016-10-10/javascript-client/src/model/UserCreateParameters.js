/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on User entity in Azure API Management deployment. The User entity in API Management represents the developers that call the APIs of the products to which they are subscribed.
 *
 * The version of the OpenAPI document: 2016-10-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UserCreateParameters model module.
 * @module model/UserCreateParameters
 * @version 2016-10-10
 */
class UserCreateParameters {
    /**
     * Constructs a new <code>UserCreateParameters</code>.
     * Parameters supplied to the Create User operation.
     * @alias module:model/UserCreateParameters
     * @param email {String} Email address. Must not be empty and must be unique within the service instance.
     * @param firstName {String} First name.
     * @param lastName {String} Last name.
     * @param password {String} User Password.
     */
    constructor(email, firstName, lastName, password) { 
        
        UserCreateParameters.initialize(this, email, firstName, lastName, password);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, email, firstName, lastName, password) { 
        obj['email'] = email;
        obj['firstName'] = firstName;
        obj['lastName'] = lastName;
        obj['password'] = password;
        obj['state'] = 'Active';
    }

    /**
     * Constructs a <code>UserCreateParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserCreateParameters} obj Optional instance to populate.
     * @return {module:model/UserCreateParameters} The populated <code>UserCreateParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserCreateParameters();

            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserCreateParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserCreateParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserCreateParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}

UserCreateParameters.RequiredProperties = ["email", "firstName", "lastName", "password"];

/**
 * Email address. Must not be empty and must be unique within the service instance.
 * @member {String} email
 */
UserCreateParameters.prototype['email'] = undefined;

/**
 * First name.
 * @member {String} firstName
 */
UserCreateParameters.prototype['firstName'] = undefined;

/**
 * Last name.
 * @member {String} lastName
 */
UserCreateParameters.prototype['lastName'] = undefined;

/**
 * Optional note about a user set by the administrator.
 * @member {String} note
 */
UserCreateParameters.prototype['note'] = undefined;

/**
 * User Password.
 * @member {String} password
 */
UserCreateParameters.prototype['password'] = undefined;

/**
 * Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.
 * @member {module:model/UserCreateParameters.StateEnum} state
 * @default 'Active'
 */
UserCreateParameters.prototype['state'] = 'Active';





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
UserCreateParameters['StateEnum'] = {

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "Blocked"
     * @const
     */
    "Blocked": "Blocked"
};



export default UserCreateParameters;

