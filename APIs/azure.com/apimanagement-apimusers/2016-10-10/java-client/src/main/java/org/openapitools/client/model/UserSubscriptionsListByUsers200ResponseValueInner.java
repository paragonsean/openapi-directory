/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on User entity in Azure API Management deployment. The User entity in API Management represents the developers that call the APIs of the products to which they are subscribed.
 *
 * The version of the OpenAPI document: 2016-10-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Subscription details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:37:31.212814-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserSubscriptionsListByUsers200ResponseValueInner {
  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "expirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  private OffsetDateTime expirationDate;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTIFICATION_DATE = "notificationDate";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_DATE)
  private OffsetDateTime notificationDate;

  public static final String SERIALIZED_NAME_PRIMARY_KEY = "primaryKey";
  @SerializedName(SERIALIZED_NAME_PRIMARY_KEY)
  private String primaryKey;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "productId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private String productId;

  public static final String SERIALIZED_NAME_SECONDARY_KEY = "secondaryKey";
  @SerializedName(SERIALIZED_NAME_SECONDARY_KEY)
  private String secondaryKey;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  /**
   * Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    SUSPENDED("Suspended"),
    
    ACTIVE("Active"),
    
    EXPIRED("Expired"),
    
    SUBMITTED("Submitted"),
    
    REJECTED("Rejected"),
    
    CANCELLED("Cancelled");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STATE_COMMENT = "stateComment";
  @SerializedName(SERIALIZED_NAME_STATE_COMMENT)
  private String stateComment;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public UserSubscriptionsListByUsers200ResponseValueInner() {
  }

  public UserSubscriptionsListByUsers200ResponseValueInner(
     OffsetDateTime createdDate, 
     String id
  ) {
    this();
    this.createdDate = createdDate;
    this.id = id;
  }

  /**
   * Subscription creation date. The date conforms to the following format: &#x60;yyyy-MM-ddTHH:mm:ssZ&#x60; as specified by the ISO 8601 standard. 
   * @return createdDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }



  public UserSubscriptionsListByUsers200ResponseValueInner endDate(OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Date when subscription was cancelled or expired. The date conforms to the following format: &#x60;yyyy-MM-ddTHH:mm:ssZ&#x60; as specified by the ISO 8601 standard. 
   * @return endDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public UserSubscriptionsListByUsers200ResponseValueInner expirationDate(OffsetDateTime expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

  /**
   * Subscription expiration date. The date conforms to the following format: &#x60;yyyy-MM-ddTHH:mm:ssZ&#x60; as specified by the ISO 8601 standard. 
   * @return expirationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpirationDate() {
    return expirationDate;
  }

  public void setExpirationDate(OffsetDateTime expirationDate) {
    this.expirationDate = expirationDate;
  }


  /**
   * Uniquely identifies the subscription within the current API Management service instance. The value is a valid relative URL in the format of /subscriptions/{sid} where {sid} is a subscription identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public UserSubscriptionsListByUsers200ResponseValueInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the subscription, or null if the subscription has no name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UserSubscriptionsListByUsers200ResponseValueInner notificationDate(OffsetDateTime notificationDate) {
    this.notificationDate = notificationDate;
    return this;
  }

  /**
   * Upcoming subscription expiration notification date. The date conforms to the following format: &#x60;yyyy-MM-ddTHH:mm:ssZ&#x60; as specified by the ISO 8601 standard. 
   * @return notificationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNotificationDate() {
    return notificationDate;
  }

  public void setNotificationDate(OffsetDateTime notificationDate) {
    this.notificationDate = notificationDate;
  }


  public UserSubscriptionsListByUsers200ResponseValueInner primaryKey(String primaryKey) {
    this.primaryKey = primaryKey;
    return this;
  }

  /**
   * Subscription primary key.
   * @return primaryKey
   */
  @javax.annotation.Nullable
  public String getPrimaryKey() {
    return primaryKey;
  }

  public void setPrimaryKey(String primaryKey) {
    this.primaryKey = primaryKey;
  }


  public UserSubscriptionsListByUsers200ResponseValueInner productId(String productId) {
    this.productId = productId;
    return this;
  }

  /**
   * The product resource identifier of the subscribed product. The value is a valid relative URL in the format of /products/{productId} where {productId} is a product identifier.
   * @return productId
   */
  @javax.annotation.Nullable
  public String getProductId() {
    return productId;
  }

  public void setProductId(String productId) {
    this.productId = productId;
  }


  public UserSubscriptionsListByUsers200ResponseValueInner secondaryKey(String secondaryKey) {
    this.secondaryKey = secondaryKey;
    return this;
  }

  /**
   * Subscription secondary key.
   * @return secondaryKey
   */
  @javax.annotation.Nullable
  public String getSecondaryKey() {
    return secondaryKey;
  }

  public void setSecondaryKey(String secondaryKey) {
    this.secondaryKey = secondaryKey;
  }


  public UserSubscriptionsListByUsers200ResponseValueInner startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Subscription activation date. The date conforms to the following format: &#x60;yyyy-MM-ddTHH:mm:ssZ&#x60; as specified by the ISO 8601 standard. 
   * @return startDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public UserSubscriptionsListByUsers200ResponseValueInner state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public UserSubscriptionsListByUsers200ResponseValueInner stateComment(String stateComment) {
    this.stateComment = stateComment;
    return this;
  }

  /**
   * Optional subscription comment added by an administrator.
   * @return stateComment
   */
  @javax.annotation.Nullable
  public String getStateComment() {
    return stateComment;
  }

  public void setStateComment(String stateComment) {
    this.stateComment = stateComment;
  }


  public UserSubscriptionsListByUsers200ResponseValueInner userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * The user resource identifier of the subscription owner. The value is a valid relative URL in the format of /users/{uid} where {uid} is a user identifier.
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserSubscriptionsListByUsers200ResponseValueInner userSubscriptionsListByUsers200ResponseValueInner = (UserSubscriptionsListByUsers200ResponseValueInner) o;
    return Objects.equals(this.createdDate, userSubscriptionsListByUsers200ResponseValueInner.createdDate) &&
        Objects.equals(this.endDate, userSubscriptionsListByUsers200ResponseValueInner.endDate) &&
        Objects.equals(this.expirationDate, userSubscriptionsListByUsers200ResponseValueInner.expirationDate) &&
        Objects.equals(this.id, userSubscriptionsListByUsers200ResponseValueInner.id) &&
        Objects.equals(this.name, userSubscriptionsListByUsers200ResponseValueInner.name) &&
        Objects.equals(this.notificationDate, userSubscriptionsListByUsers200ResponseValueInner.notificationDate) &&
        Objects.equals(this.primaryKey, userSubscriptionsListByUsers200ResponseValueInner.primaryKey) &&
        Objects.equals(this.productId, userSubscriptionsListByUsers200ResponseValueInner.productId) &&
        Objects.equals(this.secondaryKey, userSubscriptionsListByUsers200ResponseValueInner.secondaryKey) &&
        Objects.equals(this.startDate, userSubscriptionsListByUsers200ResponseValueInner.startDate) &&
        Objects.equals(this.state, userSubscriptionsListByUsers200ResponseValueInner.state) &&
        Objects.equals(this.stateComment, userSubscriptionsListByUsers200ResponseValueInner.stateComment) &&
        Objects.equals(this.userId, userSubscriptionsListByUsers200ResponseValueInner.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdDate, endDate, expirationDate, id, name, notificationDate, primaryKey, productId, secondaryKey, startDate, state, stateComment, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserSubscriptionsListByUsers200ResponseValueInner {\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notificationDate: ").append(toIndentedString(notificationDate)).append("\n");
    sb.append("    primaryKey: ").append(toIndentedString(primaryKey)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    secondaryKey: ").append(toIndentedString(secondaryKey)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateComment: ").append(toIndentedString(stateComment)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdDate");
    openapiFields.add("endDate");
    openapiFields.add("expirationDate");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("notificationDate");
    openapiFields.add("primaryKey");
    openapiFields.add("productId");
    openapiFields.add("secondaryKey");
    openapiFields.add("startDate");
    openapiFields.add("state");
    openapiFields.add("stateComment");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserSubscriptionsListByUsers200ResponseValueInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserSubscriptionsListByUsers200ResponseValueInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserSubscriptionsListByUsers200ResponseValueInner is not found in the empty JSON string", UserSubscriptionsListByUsers200ResponseValueInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserSubscriptionsListByUsers200ResponseValueInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserSubscriptionsListByUsers200ResponseValueInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("primaryKey") != null && !jsonObj.get("primaryKey").isJsonNull()) && !jsonObj.get("primaryKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryKey").toString()));
      }
      if ((jsonObj.get("productId") != null && !jsonObj.get("productId").isJsonNull()) && !jsonObj.get("productId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productId").toString()));
      }
      if ((jsonObj.get("secondaryKey") != null && !jsonObj.get("secondaryKey").isJsonNull()) && !jsonObj.get("secondaryKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondaryKey").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("stateComment") != null && !jsonObj.get("stateComment").isJsonNull()) && !jsonObj.get("stateComment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateComment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateComment").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserSubscriptionsListByUsers200ResponseValueInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserSubscriptionsListByUsers200ResponseValueInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserSubscriptionsListByUsers200ResponseValueInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserSubscriptionsListByUsers200ResponseValueInner.class));

       return (TypeAdapter<T>) new TypeAdapter<UserSubscriptionsListByUsers200ResponseValueInner>() {
           @Override
           public void write(JsonWriter out, UserSubscriptionsListByUsers200ResponseValueInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserSubscriptionsListByUsers200ResponseValueInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserSubscriptionsListByUsers200ResponseValueInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserSubscriptionsListByUsers200ResponseValueInner
   * @throws IOException if the JSON string is invalid with respect to UserSubscriptionsListByUsers200ResponseValueInner
   */
  public static UserSubscriptionsListByUsers200ResponseValueInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserSubscriptionsListByUsers200ResponseValueInner.class);
  }

  /**
   * Convert an instance of UserSubscriptionsListByUsers200ResponseValueInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

