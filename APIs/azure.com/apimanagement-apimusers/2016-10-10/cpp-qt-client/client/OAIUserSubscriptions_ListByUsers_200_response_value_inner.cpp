/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on User entity in Azure API Management deployment. The User entity in API Management represents the developers that call the APIs of the products to which they are subscribed.
 *
 * The version of the OpenAPI document: 2016-10-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserSubscriptions_ListByUsers_200_response_value_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserSubscriptions_ListByUsers_200_response_value_inner::OAIUserSubscriptions_ListByUsers_200_response_value_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserSubscriptions_ListByUsers_200_response_value_inner::OAIUserSubscriptions_ListByUsers_200_response_value_inner() {
    this->initializeModel();
}

OAIUserSubscriptions_ListByUsers_200_response_value_inner::~OAIUserSubscriptions_ListByUsers_200_response_value_inner() {}

void OAIUserSubscriptions_ListByUsers_200_response_value_inner::initializeModel() {

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notification_date_isSet = false;
    m_notification_date_isValid = false;

    m_primary_key_isSet = false;
    m_primary_key_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_secondary_key_isSet = false;
    m_secondary_key_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_comment_isSet = false;
    m_state_comment_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIUserSubscriptions_ListByUsers_200_response_value_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserSubscriptions_ListByUsers_200_response_value_inner::fromJsonObject(QJsonObject json) {

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notification_date_isValid = ::OpenAPI::fromJsonValue(m_notification_date, json[QString("notificationDate")]);
    m_notification_date_isSet = !json[QString("notificationDate")].isNull() && m_notification_date_isValid;

    m_primary_key_isValid = ::OpenAPI::fromJsonValue(m_primary_key, json[QString("primaryKey")]);
    m_primary_key_isSet = !json[QString("primaryKey")].isNull() && m_primary_key_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("productId")]);
    m_product_id_isSet = !json[QString("productId")].isNull() && m_product_id_isValid;

    m_secondary_key_isValid = ::OpenAPI::fromJsonValue(m_secondary_key, json[QString("secondaryKey")]);
    m_secondary_key_isSet = !json[QString("secondaryKey")].isNull() && m_secondary_key_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_comment_isValid = ::OpenAPI::fromJsonValue(m_state_comment, json[QString("stateComment")]);
    m_state_comment_isSet = !json[QString("stateComment")].isNull() && m_state_comment_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIUserSubscriptions_ListByUsers_200_response_value_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserSubscriptions_ListByUsers_200_response_value_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notification_date_isSet) {
        obj.insert(QString("notificationDate"), ::OpenAPI::toJsonValue(m_notification_date));
    }
    if (m_primary_key_isSet) {
        obj.insert(QString("primaryKey"), ::OpenAPI::toJsonValue(m_primary_key));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("productId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_secondary_key_isSet) {
        obj.insert(QString("secondaryKey"), ::OpenAPI::toJsonValue(m_secondary_key));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_comment_isSet) {
        obj.insert(QString("stateComment"), ::OpenAPI::toJsonValue(m_state_comment));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QDateTime OAIUserSubscriptions_ListByUsers_200_response_value_inner::getCreatedDate() const {
    return m_created_date;
}
void OAIUserSubscriptions_ListByUsers_200_response_value_inner::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIUserSubscriptions_ListByUsers_200_response_value_inner::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIUserSubscriptions_ListByUsers_200_response_value_inner::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QDateTime OAIUserSubscriptions_ListByUsers_200_response_value_inner::getEndDate() const {
    return m_end_date;
}
void OAIUserSubscriptions_ListByUsers_200_response_value_inner::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIUserSubscriptions_ListByUsers_200_response_value_inner::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIUserSubscriptions_ListByUsers_200_response_value_inner::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QDateTime OAIUserSubscriptions_ListByUsers_200_response_value_inner::getExpirationDate() const {
    return m_expiration_date;
}
void OAIUserSubscriptions_ListByUsers_200_response_value_inner::setExpirationDate(const QDateTime &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIUserSubscriptions_ListByUsers_200_response_value_inner::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIUserSubscriptions_ListByUsers_200_response_value_inner::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

QString OAIUserSubscriptions_ListByUsers_200_response_value_inner::getId() const {
    return m_id;
}
void OAIUserSubscriptions_ListByUsers_200_response_value_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserSubscriptions_ListByUsers_200_response_value_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserSubscriptions_ListByUsers_200_response_value_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUserSubscriptions_ListByUsers_200_response_value_inner::getName() const {
    return m_name;
}
void OAIUserSubscriptions_ListByUsers_200_response_value_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUserSubscriptions_ListByUsers_200_response_value_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUserSubscriptions_ListByUsers_200_response_value_inner::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAIUserSubscriptions_ListByUsers_200_response_value_inner::getNotificationDate() const {
    return m_notification_date;
}
void OAIUserSubscriptions_ListByUsers_200_response_value_inner::setNotificationDate(const QDateTime &notification_date) {
    m_notification_date = notification_date;
    m_notification_date_isSet = true;
}

bool OAIUserSubscriptions_ListByUsers_200_response_value_inner::is_notification_date_Set() const{
    return m_notification_date_isSet;
}

bool OAIUserSubscriptions_ListByUsers_200_response_value_inner::is_notification_date_Valid() const{
    return m_notification_date_isValid;
}

QString OAIUserSubscriptions_ListByUsers_200_response_value_inner::getPrimaryKey() const {
    return m_primary_key;
}
void OAIUserSubscriptions_ListByUsers_200_response_value_inner::setPrimaryKey(const QString &primary_key) {
    m_primary_key = primary_key;
    m_primary_key_isSet = true;
}

bool OAIUserSubscriptions_ListByUsers_200_response_value_inner::is_primary_key_Set() const{
    return m_primary_key_isSet;
}

bool OAIUserSubscriptions_ListByUsers_200_response_value_inner::is_primary_key_Valid() const{
    return m_primary_key_isValid;
}

QString OAIUserSubscriptions_ListByUsers_200_response_value_inner::getProductId() const {
    return m_product_id;
}
void OAIUserSubscriptions_ListByUsers_200_response_value_inner::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIUserSubscriptions_ListByUsers_200_response_value_inner::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIUserSubscriptions_ListByUsers_200_response_value_inner::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIUserSubscriptions_ListByUsers_200_response_value_inner::getSecondaryKey() const {
    return m_secondary_key;
}
void OAIUserSubscriptions_ListByUsers_200_response_value_inner::setSecondaryKey(const QString &secondary_key) {
    m_secondary_key = secondary_key;
    m_secondary_key_isSet = true;
}

bool OAIUserSubscriptions_ListByUsers_200_response_value_inner::is_secondary_key_Set() const{
    return m_secondary_key_isSet;
}

bool OAIUserSubscriptions_ListByUsers_200_response_value_inner::is_secondary_key_Valid() const{
    return m_secondary_key_isValid;
}

QDateTime OAIUserSubscriptions_ListByUsers_200_response_value_inner::getStartDate() const {
    return m_start_date;
}
void OAIUserSubscriptions_ListByUsers_200_response_value_inner::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIUserSubscriptions_ListByUsers_200_response_value_inner::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIUserSubscriptions_ListByUsers_200_response_value_inner::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIUserSubscriptions_ListByUsers_200_response_value_inner::getState() const {
    return m_state;
}
void OAIUserSubscriptions_ListByUsers_200_response_value_inner::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIUserSubscriptions_ListByUsers_200_response_value_inner::is_state_Set() const{
    return m_state_isSet;
}

bool OAIUserSubscriptions_ListByUsers_200_response_value_inner::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIUserSubscriptions_ListByUsers_200_response_value_inner::getStateComment() const {
    return m_state_comment;
}
void OAIUserSubscriptions_ListByUsers_200_response_value_inner::setStateComment(const QString &state_comment) {
    m_state_comment = state_comment;
    m_state_comment_isSet = true;
}

bool OAIUserSubscriptions_ListByUsers_200_response_value_inner::is_state_comment_Set() const{
    return m_state_comment_isSet;
}

bool OAIUserSubscriptions_ListByUsers_200_response_value_inner::is_state_comment_Valid() const{
    return m_state_comment_isValid;
}

QString OAIUserSubscriptions_ListByUsers_200_response_value_inner::getUserId() const {
    return m_user_id;
}
void OAIUserSubscriptions_ListByUsers_200_response_value_inner::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIUserSubscriptions_ListByUsers_200_response_value_inner::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIUserSubscriptions_ListByUsers_200_response_value_inner::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIUserSubscriptions_ListByUsers_200_response_value_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserSubscriptions_ListByUsers_200_response_value_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
