/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on User entity in Azure API Management deployment. The User entity in API Management represents the developers that call the APIs of the products to which they are subscribed.
 *
 * The version of the OpenAPI document: 2016-10-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersApi_H
#define OAI_OAIUsersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGenerateSsoUrlResult.h"
#include "OAIUserCollection.h"
#include "OAIUserContract.h"
#include "OAIUserCreateParameters.h"
#include "OAIUserTokenParameters.h"
#include "OAIUserTokenResult.h"
#include "OAIUserUpdateParameters.h"
#include "OAIUsers_ListByService_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersApi : public QObject {
    Q_OBJECT

public:
    OAIUsersApi(const int timeOut = 0);
    ~OAIUsersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  uid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIUserCreateParameters [required]
    */
    virtual void usersCreateOrUpdate(const QString &resource_group_name, const QString &service_name, const QString &uid, const QString &api_version, const QString &subscription_id, const OAIUserCreateParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  uid QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  delete_subscriptions bool [optional]
    */
    virtual void usersDelete(const QString &resource_group_name, const QString &service_name, const QString &uid, const QString &if_match, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<bool> &delete_subscriptions = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  uid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void usersGenerateSsoUrl(const QString &resource_group_name, const QString &service_name, const QString &uid, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  uid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void usersGet(const QString &resource_group_name, const QString &service_name, const QString &uid, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  uid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIUserTokenParameters [required]
    */
    virtual void usersGetSharedAccessToken(const QString &resource_group_name, const QString &service_name, const QString &uid, const QString &api_version, const QString &subscription_id, const OAIUserTokenParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    */
    virtual void usersListByService(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  uid QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIUserUpdateParameters [required]
    */
    virtual void usersUpdate(const QString &resource_group_name, const QString &service_name, const QString &uid, const QString &if_match, const QString &api_version, const QString &subscription_id, const OAIUserUpdateParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void usersCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void usersDeleteCallback(OAIHttpRequestWorker *worker);
    void usersGenerateSsoUrlCallback(OAIHttpRequestWorker *worker);
    void usersGetCallback(OAIHttpRequestWorker *worker);
    void usersGetSharedAccessTokenCallback(OAIHttpRequestWorker *worker);
    void usersListByServiceCallback(OAIHttpRequestWorker *worker);
    void usersUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void usersCreateOrUpdateSignal();
    void usersDeleteSignal();
    void usersGenerateSsoUrlSignal(OAIGenerateSsoUrlResult summary);
    void usersGetSignal(OAIUserContract summary);
    void usersGetSharedAccessTokenSignal(OAIUserTokenResult summary);
    void usersListByServiceSignal(OAIUserCollection summary);
    void usersUpdateSignal();


    void usersCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker);
    void usersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void usersGenerateSsoUrlSignalFull(OAIHttpRequestWorker *worker, OAIGenerateSsoUrlResult summary);
    void usersGetSignalFull(OAIHttpRequestWorker *worker, OAIUserContract summary);
    void usersGetSharedAccessTokenSignalFull(OAIHttpRequestWorker *worker, OAIUserTokenResult summary);
    void usersListByServiceSignalFull(OAIHttpRequestWorker *worker, OAIUserCollection summary);
    void usersUpdateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use usersCreateOrUpdateSignalError() instead")
    void usersCreateOrUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersCreateOrUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersDeleteSignalError() instead")
    void usersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGenerateSsoUrlSignalError() instead")
    void usersGenerateSsoUrlSignalE(OAIGenerateSsoUrlResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGenerateSsoUrlSignalError(OAIGenerateSsoUrlResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetSignalError() instead")
    void usersGetSignalE(OAIUserContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetSignalError(OAIUserContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetSharedAccessTokenSignalError() instead")
    void usersGetSharedAccessTokenSignalE(OAIUserTokenResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetSharedAccessTokenSignalError(OAIUserTokenResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersListByServiceSignalError() instead")
    void usersListByServiceSignalE(OAIUserCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersListByServiceSignalError(OAIUserCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUpdateSignalError() instead")
    void usersUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use usersCreateOrUpdateSignalErrorFull() instead")
    void usersCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersDeleteSignalErrorFull() instead")
    void usersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGenerateSsoUrlSignalErrorFull() instead")
    void usersGenerateSsoUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGenerateSsoUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetSignalErrorFull() instead")
    void usersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetSharedAccessTokenSignalErrorFull() instead")
    void usersGetSharedAccessTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetSharedAccessTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersListByServiceSignalErrorFull() instead")
    void usersListByServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersListByServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUpdateSignalErrorFull() instead")
    void usersUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
