/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on User entity in Azure API Management deployment. The User entity in API Management represents the developers that call the APIs of the products to which they are subscribed.
 *
 * The version of the OpenAPI document: 2016-10-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserContract::OAIUserContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserContract::OAIUserContract() {
    this->initializeModel();
}

OAIUserContract::~OAIUserContract() {}

void OAIUserContract::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_identities_isSet = false;
    m_identities_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_registration_date_isSet = false;
    m_registration_date_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIUserContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserContract::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_identities_isValid = ::OpenAPI::fromJsonValue(m_identities, json[QString("identities")]);
    m_identities_isSet = !json[QString("identities")].isNull() && m_identities_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_registration_date_isValid = ::OpenAPI::fromJsonValue(m_registration_date, json[QString("registrationDate")]);
    m_registration_date_isSet = !json[QString("registrationDate")].isNull() && m_registration_date_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIUserContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserContract::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_identities.size() > 0) {
        obj.insert(QString("identities"), ::OpenAPI::toJsonValue(m_identities));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_registration_date_isSet) {
        obj.insert(QString("registrationDate"), ::OpenAPI::toJsonValue(m_registration_date));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIUserContract::getEmail() const {
    return m_email;
}
void OAIUserContract::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUserContract::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUserContract::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIUserContract::getFirstName() const {
    return m_first_name;
}
void OAIUserContract::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIUserContract::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIUserContract::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIUserContract::getId() const {
    return m_id;
}
void OAIUserContract::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserContract::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserContract::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIUserIdentityContract> OAIUserContract::getIdentities() const {
    return m_identities;
}
void OAIUserContract::setIdentities(const QList<OAIUserIdentityContract> &identities) {
    m_identities = identities;
    m_identities_isSet = true;
}

bool OAIUserContract::is_identities_Set() const{
    return m_identities_isSet;
}

bool OAIUserContract::is_identities_Valid() const{
    return m_identities_isValid;
}

QString OAIUserContract::getLastName() const {
    return m_last_name;
}
void OAIUserContract::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIUserContract::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIUserContract::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIUserContract::getNote() const {
    return m_note;
}
void OAIUserContract::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIUserContract::is_note_Set() const{
    return m_note_isSet;
}

bool OAIUserContract::is_note_Valid() const{
    return m_note_isValid;
}

QDateTime OAIUserContract::getRegistrationDate() const {
    return m_registration_date;
}
void OAIUserContract::setRegistrationDate(const QDateTime &registration_date) {
    m_registration_date = registration_date;
    m_registration_date_isSet = true;
}

bool OAIUserContract::is_registration_date_Set() const{
    return m_registration_date_isSet;
}

bool OAIUserContract::is_registration_date_Valid() const{
    return m_registration_date_isValid;
}

QString OAIUserContract::getState() const {
    return m_state;
}
void OAIUserContract::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIUserContract::is_state_Set() const{
    return m_state_isSet;
}

bool OAIUserContract::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIUserContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
