/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on User entity in Azure API Management deployment. The User entity in API Management represents the developers that call the APIs of the products to which they are subscribed.
 *
 * The version of the OpenAPI document: 2016-10-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserGroups_ListByUsers_200_response_value_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserGroups_ListByUsers_200_response_value_inner::OAIUserGroups_ListByUsers_200_response_value_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserGroups_ListByUsers_200_response_value_inner::OAIUserGroups_ListByUsers_200_response_value_inner() {
    this->initializeModel();
}

OAIUserGroups_ListByUsers_200_response_value_inner::~OAIUserGroups_ListByUsers_200_response_value_inner() {}

void OAIUserGroups_ListByUsers_200_response_value_inner::initializeModel() {

    m_built_in_isSet = false;
    m_built_in_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_external_id_isSet = false;
    m_external_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIUserGroups_ListByUsers_200_response_value_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserGroups_ListByUsers_200_response_value_inner::fromJsonObject(QJsonObject json) {

    m_built_in_isValid = ::OpenAPI::fromJsonValue(m_built_in, json[QString("builtIn")]);
    m_built_in_isSet = !json[QString("builtIn")].isNull() && m_built_in_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_external_id_isValid = ::OpenAPI::fromJsonValue(m_external_id, json[QString("externalId")]);
    m_external_id_isSet = !json[QString("externalId")].isNull() && m_external_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIUserGroups_ListByUsers_200_response_value_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserGroups_ListByUsers_200_response_value_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_built_in_isSet) {
        obj.insert(QString("builtIn"), ::OpenAPI::toJsonValue(m_built_in));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_external_id_isSet) {
        obj.insert(QString("externalId"), ::OpenAPI::toJsonValue(m_external_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAIUserGroups_ListByUsers_200_response_value_inner::isBuiltIn() const {
    return m_built_in;
}
void OAIUserGroups_ListByUsers_200_response_value_inner::setBuiltIn(const bool &built_in) {
    m_built_in = built_in;
    m_built_in_isSet = true;
}

bool OAIUserGroups_ListByUsers_200_response_value_inner::is_built_in_Set() const{
    return m_built_in_isSet;
}

bool OAIUserGroups_ListByUsers_200_response_value_inner::is_built_in_Valid() const{
    return m_built_in_isValid;
}

QString OAIUserGroups_ListByUsers_200_response_value_inner::getDescription() const {
    return m_description;
}
void OAIUserGroups_ListByUsers_200_response_value_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUserGroups_ListByUsers_200_response_value_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUserGroups_ListByUsers_200_response_value_inner::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIUserGroups_ListByUsers_200_response_value_inner::getExternalId() const {
    return m_external_id;
}
void OAIUserGroups_ListByUsers_200_response_value_inner::setExternalId(const QString &external_id) {
    m_external_id = external_id;
    m_external_id_isSet = true;
}

bool OAIUserGroups_ListByUsers_200_response_value_inner::is_external_id_Set() const{
    return m_external_id_isSet;
}

bool OAIUserGroups_ListByUsers_200_response_value_inner::is_external_id_Valid() const{
    return m_external_id_isValid;
}

QString OAIUserGroups_ListByUsers_200_response_value_inner::getId() const {
    return m_id;
}
void OAIUserGroups_ListByUsers_200_response_value_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserGroups_ListByUsers_200_response_value_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserGroups_ListByUsers_200_response_value_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUserGroups_ListByUsers_200_response_value_inner::getName() const {
    return m_name;
}
void OAIUserGroups_ListByUsers_200_response_value_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUserGroups_ListByUsers_200_response_value_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUserGroups_ListByUsers_200_response_value_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUserGroups_ListByUsers_200_response_value_inner::getType() const {
    return m_type;
}
void OAIUserGroups_ListByUsers_200_response_value_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIUserGroups_ListByUsers_200_response_value_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIUserGroups_ListByUsers_200_response_value_inner::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIUserGroups_ListByUsers_200_response_value_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_built_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserGroups_ListByUsers_200_response_value_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
