/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on User entity in Azure API Management deployment. The User entity in API Management represents the developers that call the APIs of the products to which they are subscribed.
 *
 * The version of the OpenAPI document: 2016-10-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserUpdateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserUpdateParameters::OAIUserUpdateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserUpdateParameters::OAIUserUpdateParameters() {
    this->initializeModel();
}

OAIUserUpdateParameters::~OAIUserUpdateParameters() {}

void OAIUserUpdateParameters::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIUserUpdateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserUpdateParameters::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIUserUpdateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserUpdateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIUserUpdateParameters::getEmail() const {
    return m_email;
}
void OAIUserUpdateParameters::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUserUpdateParameters::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUserUpdateParameters::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIUserUpdateParameters::getFirstName() const {
    return m_first_name;
}
void OAIUserUpdateParameters::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIUserUpdateParameters::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIUserUpdateParameters::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIUserUpdateParameters::getLastName() const {
    return m_last_name;
}
void OAIUserUpdateParameters::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIUserUpdateParameters::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIUserUpdateParameters::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIUserUpdateParameters::getNote() const {
    return m_note;
}
void OAIUserUpdateParameters::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIUserUpdateParameters::is_note_Set() const{
    return m_note_isSet;
}

bool OAIUserUpdateParameters::is_note_Valid() const{
    return m_note_isValid;
}

QString OAIUserUpdateParameters::getPassword() const {
    return m_password;
}
void OAIUserUpdateParameters::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIUserUpdateParameters::is_password_Set() const{
    return m_password_isSet;
}

bool OAIUserUpdateParameters::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIUserUpdateParameters::getState() const {
    return m_state;
}
void OAIUserUpdateParameters::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIUserUpdateParameters::is_state_Set() const{
    return m_state_isSet;
}

bool OAIUserUpdateParameters::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIUserUpdateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserUpdateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
