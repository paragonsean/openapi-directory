# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserCreateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, first_name: str=None, last_name: str=None, note: str=None, password: str=None, state: str='Active'):
        """UserCreateParameters - a model defined in OpenAPI

        :param email: The email of this UserCreateParameters.
        :param first_name: The first_name of this UserCreateParameters.
        :param last_name: The last_name of this UserCreateParameters.
        :param note: The note of this UserCreateParameters.
        :param password: The password of this UserCreateParameters.
        :param state: The state of this UserCreateParameters.
        """
        self.openapi_types = {
            'email': str,
            'first_name': str,
            'last_name': str,
            'note': str,
            'password': str,
            'state': str
        }

        self.attribute_map = {
            'email': 'email',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'note': 'note',
            'password': 'password',
            'state': 'state'
        }

        self._email = email
        self._first_name = first_name
        self._last_name = last_name
        self._note = note
        self._password = password
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserCreateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserCreateParameters of this UserCreateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this UserCreateParameters.

        Email address. Must not be empty and must be unique within the service instance.

        :return: The email of this UserCreateParameters.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserCreateParameters.

        Email address. Must not be empty and must be unique within the service instance.

        :param email: The email of this UserCreateParameters.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")
        if email is not None and len(email) > 254:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `254`")
        if email is not None and len(email) < 1:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `1`")

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this UserCreateParameters.

        First name.

        :return: The first_name of this UserCreateParameters.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserCreateParameters.

        First name.

        :param first_name: The first_name of this UserCreateParameters.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")
        if first_name is not None and len(first_name) > 100:
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `100`")
        if first_name is not None and len(first_name) < 1:
            raise ValueError("Invalid value for `first_name`, length must be greater than or equal to `1`")

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UserCreateParameters.

        Last name.

        :return: The last_name of this UserCreateParameters.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserCreateParameters.

        Last name.

        :param last_name: The last_name of this UserCreateParameters.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")
        if last_name is not None and len(last_name) > 100:
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `100`")
        if last_name is not None and len(last_name) < 1:
            raise ValueError("Invalid value for `last_name`, length must be greater than or equal to `1`")

        self._last_name = last_name

    @property
    def note(self):
        """Gets the note of this UserCreateParameters.

        Optional note about a user set by the administrator.

        :return: The note of this UserCreateParameters.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this UserCreateParameters.

        Optional note about a user set by the administrator.

        :param note: The note of this UserCreateParameters.
        :type note: str
        """

        self._note = note

    @property
    def password(self):
        """Gets the password of this UserCreateParameters.

        User Password.

        :return: The password of this UserCreateParameters.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UserCreateParameters.

        User Password.

        :param password: The password of this UserCreateParameters.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def state(self):
        """Gets the state of this UserCreateParameters.

        Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.

        :return: The state of this UserCreateParameters.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this UserCreateParameters.

        Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.

        :param state: The state of this UserCreateParameters.
        :type state: str
        """
        allowed_values = ["Active", "Blocked"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
