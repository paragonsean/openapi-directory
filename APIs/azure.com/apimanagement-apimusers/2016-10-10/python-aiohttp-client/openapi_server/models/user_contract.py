# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_identity_contract import UserIdentityContract
from openapi_server import util


class UserContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, first_name: str=None, id: str=None, identities: List[UserIdentityContract]=None, last_name: str=None, note: str=None, registration_date: datetime=None, state: str=None):
        """UserContract - a model defined in OpenAPI

        :param email: The email of this UserContract.
        :param first_name: The first_name of this UserContract.
        :param id: The id of this UserContract.
        :param identities: The identities of this UserContract.
        :param last_name: The last_name of this UserContract.
        :param note: The note of this UserContract.
        :param registration_date: The registration_date of this UserContract.
        :param state: The state of this UserContract.
        """
        self.openapi_types = {
            'email': str,
            'first_name': str,
            'id': str,
            'identities': List[UserIdentityContract],
            'last_name': str,
            'note': str,
            'registration_date': datetime,
            'state': str
        }

        self.attribute_map = {
            'email': 'email',
            'first_name': 'firstName',
            'id': 'id',
            'identities': 'identities',
            'last_name': 'lastName',
            'note': 'note',
            'registration_date': 'registrationDate',
            'state': 'state'
        }

        self._email = email
        self._first_name = first_name
        self._id = id
        self._identities = identities
        self._last_name = last_name
        self._note = note
        self._registration_date = registration_date
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserContract of this UserContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this UserContract.

        Email address.

        :return: The email of this UserContract.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserContract.

        Email address.

        :param email: The email of this UserContract.
        :type email: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this UserContract.

        First name.

        :return: The first_name of this UserContract.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserContract.

        First name.

        :param first_name: The first_name of this UserContract.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this UserContract.

        User identifier path.

        :return: The id of this UserContract.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserContract.

        User identifier path.

        :param id: The id of this UserContract.
        :type id: str
        """

        self._id = id

    @property
    def identities(self):
        """Gets the identities of this UserContract.

        Collection of user identities.

        :return: The identities of this UserContract.
        :rtype: List[UserIdentityContract]
        """
        return self._identities

    @identities.setter
    def identities(self, identities):
        """Sets the identities of this UserContract.

        Collection of user identities.

        :param identities: The identities of this UserContract.
        :type identities: List[UserIdentityContract]
        """

        self._identities = identities

    @property
    def last_name(self):
        """Gets the last_name of this UserContract.

        Last name.

        :return: The last_name of this UserContract.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserContract.

        Last name.

        :param last_name: The last_name of this UserContract.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def note(self):
        """Gets the note of this UserContract.

        Administrator's note about given user.

        :return: The note of this UserContract.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this UserContract.

        Administrator's note about given user.

        :param note: The note of this UserContract.
        :type note: str
        """

        self._note = note

    @property
    def registration_date(self):
        """Gets the registration_date of this UserContract.

        Date of user registration. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :return: The registration_date of this UserContract.
        :rtype: datetime
        """
        return self._registration_date

    @registration_date.setter
    def registration_date(self, registration_date):
        """Sets the registration_date of this UserContract.

        Date of user registration. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :param registration_date: The registration_date of this UserContract.
        :type registration_date: datetime
        """

        self._registration_date = registration_date

    @property
    def state(self):
        """Gets the state of this UserContract.

        User state.

        :return: The state of this UserContract.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this UserContract.

        User state.

        :param state: The state of this UserContract.
        :type state: str
        """
        allowed_values = ["Active", "Blocked"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
