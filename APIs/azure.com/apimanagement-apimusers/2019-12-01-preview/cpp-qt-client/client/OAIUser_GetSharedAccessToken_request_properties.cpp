/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on User entity in Azure API Management deployment. The User entity in API Management represents the developers that call the APIs of the products to which they are subscribed.
 *
 * The version of the OpenAPI document: 2019-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser_GetSharedAccessToken_request_properties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser_GetSharedAccessToken_request_properties::OAIUser_GetSharedAccessToken_request_properties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser_GetSharedAccessToken_request_properties::OAIUser_GetSharedAccessToken_request_properties() {
    this->initializeModel();
}

OAIUser_GetSharedAccessToken_request_properties::~OAIUser_GetSharedAccessToken_request_properties() {}

void OAIUser_GetSharedAccessToken_request_properties::initializeModel() {

    m_expiry_isSet = false;
    m_expiry_isValid = false;

    m_key_type_isSet = false;
    m_key_type_isValid = false;
}

void OAIUser_GetSharedAccessToken_request_properties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser_GetSharedAccessToken_request_properties::fromJsonObject(QJsonObject json) {

    m_expiry_isValid = ::OpenAPI::fromJsonValue(m_expiry, json[QString("expiry")]);
    m_expiry_isSet = !json[QString("expiry")].isNull() && m_expiry_isValid;

    m_key_type_isValid = ::OpenAPI::fromJsonValue(m_key_type, json[QString("keyType")]);
    m_key_type_isSet = !json[QString("keyType")].isNull() && m_key_type_isValid;
}

QString OAIUser_GetSharedAccessToken_request_properties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser_GetSharedAccessToken_request_properties::asJsonObject() const {
    QJsonObject obj;
    if (m_expiry_isSet) {
        obj.insert(QString("expiry"), ::OpenAPI::toJsonValue(m_expiry));
    }
    if (m_key_type_isSet) {
        obj.insert(QString("keyType"), ::OpenAPI::toJsonValue(m_key_type));
    }
    return obj;
}

QDateTime OAIUser_GetSharedAccessToken_request_properties::getExpiry() const {
    return m_expiry;
}
void OAIUser_GetSharedAccessToken_request_properties::setExpiry(const QDateTime &expiry) {
    m_expiry = expiry;
    m_expiry_isSet = true;
}

bool OAIUser_GetSharedAccessToken_request_properties::is_expiry_Set() const{
    return m_expiry_isSet;
}

bool OAIUser_GetSharedAccessToken_request_properties::is_expiry_Valid() const{
    return m_expiry_isValid;
}

QString OAIUser_GetSharedAccessToken_request_properties::getKeyType() const {
    return m_key_type;
}
void OAIUser_GetSharedAccessToken_request_properties::setKeyType(const QString &key_type) {
    m_key_type = key_type;
    m_key_type_isSet = true;
}

bool OAIUser_GetSharedAccessToken_request_properties::is_key_type_Set() const{
    return m_key_type_isSet;
}

bool OAIUser_GetSharedAccessToken_request_properties::is_key_type_Valid() const{
    return m_key_type_isValid;
}

bool OAIUser_GetSharedAccessToken_request_properties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expiry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser_GetSharedAccessToken_request_properties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expiry_isValid && m_key_type_isValid && true;
}

} // namespace OpenAPI
