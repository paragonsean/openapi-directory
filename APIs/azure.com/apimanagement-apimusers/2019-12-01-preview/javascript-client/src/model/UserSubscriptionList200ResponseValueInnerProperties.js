/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on User entity in Azure API Management deployment. The User entity in API Management represents the developers that call the APIs of the products to which they are subscribed.
 *
 * The version of the OpenAPI document: 2019-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UserSubscriptionList200ResponseValueInnerProperties model module.
 * @module model/UserSubscriptionList200ResponseValueInnerProperties
 * @version 2019-12-01-preview
 */
class UserSubscriptionList200ResponseValueInnerProperties {
    /**
     * Constructs a new <code>UserSubscriptionList200ResponseValueInnerProperties</code>.
     * Subscription details.
     * @alias module:model/UserSubscriptionList200ResponseValueInnerProperties
     * @param scope {String} Scope like /products/{productId} or /apis or /apis/{apiId}.
     * @param state {module:model/UserSubscriptionList200ResponseValueInnerProperties.StateEnum} Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.
     */
    constructor(scope, state) { 
        
        UserSubscriptionList200ResponseValueInnerProperties.initialize(this, scope, state);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, scope, state) { 
        obj['scope'] = scope;
        obj['state'] = state;
    }

    /**
     * Constructs a <code>UserSubscriptionList200ResponseValueInnerProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserSubscriptionList200ResponseValueInnerProperties} obj Optional instance to populate.
     * @return {module:model/UserSubscriptionList200ResponseValueInnerProperties} The populated <code>UserSubscriptionList200ResponseValueInnerProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserSubscriptionList200ResponseValueInnerProperties();

            if (data.hasOwnProperty('allowTracing')) {
                obj['allowTracing'] = ApiClient.convertToType(data['allowTracing'], 'Boolean');
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'Date');
            }
            if (data.hasOwnProperty('expirationDate')) {
                obj['expirationDate'] = ApiClient.convertToType(data['expirationDate'], 'Date');
            }
            if (data.hasOwnProperty('notificationDate')) {
                obj['notificationDate'] = ApiClient.convertToType(data['notificationDate'], 'Date');
            }
            if (data.hasOwnProperty('ownerId')) {
                obj['ownerId'] = ApiClient.convertToType(data['ownerId'], 'String');
            }
            if (data.hasOwnProperty('primaryKey')) {
                obj['primaryKey'] = ApiClient.convertToType(data['primaryKey'], 'String');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
            }
            if (data.hasOwnProperty('secondaryKey')) {
                obj['secondaryKey'] = ApiClient.convertToType(data['secondaryKey'], 'String');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('stateComment')) {
                obj['stateComment'] = ApiClient.convertToType(data['stateComment'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserSubscriptionList200ResponseValueInnerProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserSubscriptionList200ResponseValueInnerProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserSubscriptionList200ResponseValueInnerProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['ownerId'] && !(typeof data['ownerId'] === 'string' || data['ownerId'] instanceof String)) {
            throw new Error("Expected the field `ownerId` to be a primitive type in the JSON string but got " + data['ownerId']);
        }
        // ensure the json data is a string
        if (data['primaryKey'] && !(typeof data['primaryKey'] === 'string' || data['primaryKey'] instanceof String)) {
            throw new Error("Expected the field `primaryKey` to be a primitive type in the JSON string but got " + data['primaryKey']);
        }
        // ensure the json data is a string
        if (data['scope'] && !(typeof data['scope'] === 'string' || data['scope'] instanceof String)) {
            throw new Error("Expected the field `scope` to be a primitive type in the JSON string but got " + data['scope']);
        }
        // ensure the json data is a string
        if (data['secondaryKey'] && !(typeof data['secondaryKey'] === 'string' || data['secondaryKey'] instanceof String)) {
            throw new Error("Expected the field `secondaryKey` to be a primitive type in the JSON string but got " + data['secondaryKey']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['stateComment'] && !(typeof data['stateComment'] === 'string' || data['stateComment'] instanceof String)) {
            throw new Error("Expected the field `stateComment` to be a primitive type in the JSON string but got " + data['stateComment']);
        }

        return true;
    }


}

UserSubscriptionList200ResponseValueInnerProperties.RequiredProperties = ["scope", "state"];

/**
 * Determines whether tracing is enabled
 * @member {Boolean} allowTracing
 */
UserSubscriptionList200ResponseValueInnerProperties.prototype['allowTracing'] = undefined;

/**
 * Subscription creation date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 
 * @member {Date} createdDate
 */
UserSubscriptionList200ResponseValueInnerProperties.prototype['createdDate'] = undefined;

/**
 * The name of the subscription, or null if the subscription has no name.
 * @member {String} displayName
 */
UserSubscriptionList200ResponseValueInnerProperties.prototype['displayName'] = undefined;

/**
 * Date when subscription was cancelled or expired. The setting is for audit purposes only and the subscription is not automatically cancelled. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 
 * @member {Date} endDate
 */
UserSubscriptionList200ResponseValueInnerProperties.prototype['endDate'] = undefined;

/**
 * Subscription expiration date. The setting is for audit purposes only and the subscription is not automatically expired. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 
 * @member {Date} expirationDate
 */
UserSubscriptionList200ResponseValueInnerProperties.prototype['expirationDate'] = undefined;

/**
 * Upcoming subscription expiration notification date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 
 * @member {Date} notificationDate
 */
UserSubscriptionList200ResponseValueInnerProperties.prototype['notificationDate'] = undefined;

/**
 * The user resource identifier of the subscription owner. The value is a valid relative URL in the format of /users/{userId} where {userId} is a user identifier.
 * @member {String} ownerId
 */
UserSubscriptionList200ResponseValueInnerProperties.prototype['ownerId'] = undefined;

/**
 * Subscription primary key. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value.
 * @member {String} primaryKey
 */
UserSubscriptionList200ResponseValueInnerProperties.prototype['primaryKey'] = undefined;

/**
 * Scope like /products/{productId} or /apis or /apis/{apiId}.
 * @member {String} scope
 */
UserSubscriptionList200ResponseValueInnerProperties.prototype['scope'] = undefined;

/**
 * Subscription secondary key. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value.
 * @member {String} secondaryKey
 */
UserSubscriptionList200ResponseValueInnerProperties.prototype['secondaryKey'] = undefined;

/**
 * Subscription activation date. The setting is for audit purposes only and the subscription is not automatically activated. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 
 * @member {Date} startDate
 */
UserSubscriptionList200ResponseValueInnerProperties.prototype['startDate'] = undefined;

/**
 * Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.
 * @member {module:model/UserSubscriptionList200ResponseValueInnerProperties.StateEnum} state
 */
UserSubscriptionList200ResponseValueInnerProperties.prototype['state'] = undefined;

/**
 * Optional subscription comment added by an administrator.
 * @member {String} stateComment
 */
UserSubscriptionList200ResponseValueInnerProperties.prototype['stateComment'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
UserSubscriptionList200ResponseValueInnerProperties['StateEnum'] = {

    /**
     * value: "suspended"
     * @const
     */
    "suspended": "suspended",

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "expired"
     * @const
     */
    "expired": "expired",

    /**
     * value: "submitted"
     * @const
     */
    "submitted": "submitted",

    /**
     * value: "rejected"
     * @const
     */
    "rejected": "rejected",

    /**
     * value: "cancelled"
     * @const
     */
    "cancelled": "cancelled"
};



export default UserSubscriptionList200ResponseValueInnerProperties;

