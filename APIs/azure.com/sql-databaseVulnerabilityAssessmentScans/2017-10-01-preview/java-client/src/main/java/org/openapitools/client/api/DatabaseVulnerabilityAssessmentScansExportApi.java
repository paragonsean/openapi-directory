/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DatabaseVulnerabilityAssessmentScansExport;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DatabaseVulnerabilityAssessmentScansExportApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DatabaseVulnerabilityAssessmentScansExportApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DatabaseVulnerabilityAssessmentScansExportApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for databaseVulnerabilityAssessmentScansExport
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the scanned database. (required)
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment. (required)
     * @param scanId The vulnerability assessment scan Id. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Scan result was converted successfully. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Scan result was converted successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.   * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.   * 400 VulnerabilityAssessmentInvalidPolicy - Vulnerability Assessment settings don&#39;t exist or invalid storage specified in settings.    * 400 DatabaseVulnerabilityAssessmentMissingStorageContainerPath - Storage container path must be provided if it isn&#39;t set in server level policy   * 400 VulnerabilityAssessmentDatawarehouseDatabaseIsDeactivated - Could not execute Vulnerability Assessment operation because the database is paused. Please resume it.   * 400 InvalidVulnerabilityAssessmentOperationRequest - The vulnerability assessment operation request does not exist or has no properties object.   * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - Vulnerability Assessment scan is already in progress.   * 500 DatabaseIsUnavailable - Loading failed. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseVulnerabilityAssessmentScansExportCall(String resourceGroupName, String serverName, String databaseName, String vulnerabilityAssessmentName, String scanId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/export"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serverName" + "}", localVarApiClient.escapeString(serverName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "vulnerabilityAssessmentName" + "}", localVarApiClient.escapeString(vulnerabilityAssessmentName.toString()))
            .replace("{" + "scanId" + "}", localVarApiClient.escapeString(scanId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseVulnerabilityAssessmentScansExportValidateBeforeCall(String resourceGroupName, String serverName, String databaseName, String vulnerabilityAssessmentName, String scanId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseVulnerabilityAssessmentScansExport(Async)");
        }

        // verify the required parameter 'serverName' is set
        if (serverName == null) {
            throw new ApiException("Missing the required parameter 'serverName' when calling databaseVulnerabilityAssessmentScansExport(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseVulnerabilityAssessmentScansExport(Async)");
        }

        // verify the required parameter 'vulnerabilityAssessmentName' is set
        if (vulnerabilityAssessmentName == null) {
            throw new ApiException("Missing the required parameter 'vulnerabilityAssessmentName' when calling databaseVulnerabilityAssessmentScansExport(Async)");
        }

        // verify the required parameter 'scanId' is set
        if (scanId == null) {
            throw new ApiException("Missing the required parameter 'scanId' when calling databaseVulnerabilityAssessmentScansExport(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseVulnerabilityAssessmentScansExport(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseVulnerabilityAssessmentScansExport(Async)");
        }

        return databaseVulnerabilityAssessmentScansExportCall(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, scanId, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Convert an existing scan result to a human readable format. If already exists nothing happens
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the scanned database. (required)
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment. (required)
     * @param scanId The vulnerability assessment scan Id. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return DatabaseVulnerabilityAssessmentScansExport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Scan result was converted successfully. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Scan result was converted successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.   * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.   * 400 VulnerabilityAssessmentInvalidPolicy - Vulnerability Assessment settings don&#39;t exist or invalid storage specified in settings.    * 400 DatabaseVulnerabilityAssessmentMissingStorageContainerPath - Storage container path must be provided if it isn&#39;t set in server level policy   * 400 VulnerabilityAssessmentDatawarehouseDatabaseIsDeactivated - Could not execute Vulnerability Assessment operation because the database is paused. Please resume it.   * 400 InvalidVulnerabilityAssessmentOperationRequest - The vulnerability assessment operation request does not exist or has no properties object.   * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - Vulnerability Assessment scan is already in progress.   * 500 DatabaseIsUnavailable - Loading failed. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public DatabaseVulnerabilityAssessmentScansExport databaseVulnerabilityAssessmentScansExport(String resourceGroupName, String serverName, String databaseName, String vulnerabilityAssessmentName, String scanId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<DatabaseVulnerabilityAssessmentScansExport> localVarResp = databaseVulnerabilityAssessmentScansExportWithHttpInfo(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, scanId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Convert an existing scan result to a human readable format. If already exists nothing happens
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the scanned database. (required)
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment. (required)
     * @param scanId The vulnerability assessment scan Id. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ApiResponse&lt;DatabaseVulnerabilityAssessmentScansExport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Scan result was converted successfully. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Scan result was converted successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.   * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.   * 400 VulnerabilityAssessmentInvalidPolicy - Vulnerability Assessment settings don&#39;t exist or invalid storage specified in settings.    * 400 DatabaseVulnerabilityAssessmentMissingStorageContainerPath - Storage container path must be provided if it isn&#39;t set in server level policy   * 400 VulnerabilityAssessmentDatawarehouseDatabaseIsDeactivated - Could not execute Vulnerability Assessment operation because the database is paused. Please resume it.   * 400 InvalidVulnerabilityAssessmentOperationRequest - The vulnerability assessment operation request does not exist or has no properties object.   * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - Vulnerability Assessment scan is already in progress.   * 500 DatabaseIsUnavailable - Loading failed. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseVulnerabilityAssessmentScansExport> databaseVulnerabilityAssessmentScansExportWithHttpInfo(String resourceGroupName, String serverName, String databaseName, String vulnerabilityAssessmentName, String scanId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseVulnerabilityAssessmentScansExportValidateBeforeCall(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, scanId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DatabaseVulnerabilityAssessmentScansExport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Convert an existing scan result to a human readable format. If already exists nothing happens
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the scanned database. (required)
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment. (required)
     * @param scanId The vulnerability assessment scan Id. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Scan result was converted successfully. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Scan result was converted successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.   * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.   * 400 VulnerabilityAssessmentInvalidPolicy - Vulnerability Assessment settings don&#39;t exist or invalid storage specified in settings.    * 400 DatabaseVulnerabilityAssessmentMissingStorageContainerPath - Storage container path must be provided if it isn&#39;t set in server level policy   * 400 VulnerabilityAssessmentDatawarehouseDatabaseIsDeactivated - Could not execute Vulnerability Assessment operation because the database is paused. Please resume it.   * 400 InvalidVulnerabilityAssessmentOperationRequest - The vulnerability assessment operation request does not exist or has no properties object.   * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - Vulnerability Assessment scan is already in progress.   * 500 DatabaseIsUnavailable - Loading failed. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseVulnerabilityAssessmentScansExportAsync(String resourceGroupName, String serverName, String databaseName, String vulnerabilityAssessmentName, String scanId, String subscriptionId, String apiVersion, final ApiCallback<DatabaseVulnerabilityAssessmentScansExport> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseVulnerabilityAssessmentScansExportValidateBeforeCall(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, scanId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DatabaseVulnerabilityAssessmentScansExport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
