/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVulnerabilityAssessmentScanError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVulnerabilityAssessmentScanError::OAIVulnerabilityAssessmentScanError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVulnerabilityAssessmentScanError::OAIVulnerabilityAssessmentScanError() {
    this->initializeModel();
}

OAIVulnerabilityAssessmentScanError::~OAIVulnerabilityAssessmentScanError() {}

void OAIVulnerabilityAssessmentScanError::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIVulnerabilityAssessmentScanError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVulnerabilityAssessmentScanError::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;
}

QString OAIVulnerabilityAssessmentScanError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVulnerabilityAssessmentScanError::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

QString OAIVulnerabilityAssessmentScanError::getCode() const {
    return m_code;
}
void OAIVulnerabilityAssessmentScanError::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIVulnerabilityAssessmentScanError::is_code_Set() const{
    return m_code_isSet;
}

bool OAIVulnerabilityAssessmentScanError::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIVulnerabilityAssessmentScanError::getMessage() const {
    return m_message;
}
void OAIVulnerabilityAssessmentScanError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIVulnerabilityAssessmentScanError::is_message_Set() const{
    return m_message_isSet;
}

bool OAIVulnerabilityAssessmentScanError::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIVulnerabilityAssessmentScanError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVulnerabilityAssessmentScanError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
