/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SqlManagementClient);
  }
}(this, function(expect, SqlManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SqlManagementClient.VulnerabilityAssessmentScanRecordProperties();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VulnerabilityAssessmentScanRecordProperties', function() {
    it('should create an instance of VulnerabilityAssessmentScanRecordProperties', function() {
      // uncomment below and update the code to test VulnerabilityAssessmentScanRecordProperties
      //var instance = new SqlManagementClient.VulnerabilityAssessmentScanRecordProperties();
      //expect(instance).to.be.a(SqlManagementClient.VulnerabilityAssessmentScanRecordProperties);
    });

    it('should have the property endTime (base name: "endTime")', function() {
      // uncomment below and update the code to test the property endTime
      //var instance = new SqlManagementClient.VulnerabilityAssessmentScanRecordProperties();
      //expect(instance).to.be();
    });

    it('should have the property errors (base name: "errors")', function() {
      // uncomment below and update the code to test the property errors
      //var instance = new SqlManagementClient.VulnerabilityAssessmentScanRecordProperties();
      //expect(instance).to.be();
    });

    it('should have the property numberOfFailedSecurityChecks (base name: "numberOfFailedSecurityChecks")', function() {
      // uncomment below and update the code to test the property numberOfFailedSecurityChecks
      //var instance = new SqlManagementClient.VulnerabilityAssessmentScanRecordProperties();
      //expect(instance).to.be();
    });

    it('should have the property scanId (base name: "scanId")', function() {
      // uncomment below and update the code to test the property scanId
      //var instance = new SqlManagementClient.VulnerabilityAssessmentScanRecordProperties();
      //expect(instance).to.be();
    });

    it('should have the property startTime (base name: "startTime")', function() {
      // uncomment below and update the code to test the property startTime
      //var instance = new SqlManagementClient.VulnerabilityAssessmentScanRecordProperties();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new SqlManagementClient.VulnerabilityAssessmentScanRecordProperties();
      //expect(instance).to.be();
    });

    it('should have the property storageContainerPath (base name: "storageContainerPath")', function() {
      // uncomment below and update the code to test the property storageContainerPath
      //var instance = new SqlManagementClient.VulnerabilityAssessmentScanRecordProperties();
      //expect(instance).to.be();
    });

    it('should have the property triggerType (base name: "triggerType")', function() {
      // uncomment below and update the code to test the property triggerType
      //var instance = new SqlManagementClient.VulnerabilityAssessmentScanRecordProperties();
      //expect(instance).to.be();
    });

  });

}));
