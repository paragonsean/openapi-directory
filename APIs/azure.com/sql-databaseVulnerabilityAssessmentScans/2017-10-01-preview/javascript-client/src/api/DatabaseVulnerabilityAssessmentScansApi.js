/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import VulnerabilityAssessmentScanRecord from '../model/VulnerabilityAssessmentScanRecord';
import VulnerabilityAssessmentScanRecordListResult from '../model/VulnerabilityAssessmentScanRecordListResult';

/**
* DatabaseVulnerabilityAssessmentScans service.
* @module api/DatabaseVulnerabilityAssessmentScansApi
* @version 2017-10-01-preview
*/
export default class DatabaseVulnerabilityAssessmentScansApi {

    /**
    * Constructs a new DatabaseVulnerabilityAssessmentScansApi. 
    * @alias module:api/DatabaseVulnerabilityAssessmentScansApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the databaseVulnerabilityAssessmentScansGet operation.
     * @callback module:api/DatabaseVulnerabilityAssessmentScansApi~databaseVulnerabilityAssessmentScansGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VulnerabilityAssessmentScanRecord} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a vulnerability assessment scan record of a database.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} databaseName The name of the database.
     * @param {module:model/String} vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param {String} scanId The vulnerability assessment scan Id of the scan to retrieve.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/DatabaseVulnerabilityAssessmentScansApi~databaseVulnerabilityAssessmentScansGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VulnerabilityAssessmentScanRecord}
     */
    databaseVulnerabilityAssessmentScansGet(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, scanId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseVulnerabilityAssessmentScansGet");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling databaseVulnerabilityAssessmentScansGet");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseVulnerabilityAssessmentScansGet");
      }
      // verify the required parameter 'vulnerabilityAssessmentName' is set
      if (vulnerabilityAssessmentName === undefined || vulnerabilityAssessmentName === null) {
        throw new Error("Missing the required parameter 'vulnerabilityAssessmentName' when calling databaseVulnerabilityAssessmentScansGet");
      }
      // verify the required parameter 'scanId' is set
      if (scanId === undefined || scanId === null) {
        throw new Error("Missing the required parameter 'scanId' when calling databaseVulnerabilityAssessmentScansGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseVulnerabilityAssessmentScansGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseVulnerabilityAssessmentScansGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'databaseName': databaseName,
        'vulnerabilityAssessmentName': vulnerabilityAssessmentName,
        'scanId': scanId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VulnerabilityAssessmentScanRecord;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseVulnerabilityAssessmentScansListByDatabase operation.
     * @callback module:api/DatabaseVulnerabilityAssessmentScansApi~databaseVulnerabilityAssessmentScansListByDatabaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VulnerabilityAssessmentScanRecordListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the vulnerability assessment scans of a database.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} databaseName The name of the database.
     * @param {module:model/String} vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/DatabaseVulnerabilityAssessmentScansApi~databaseVulnerabilityAssessmentScansListByDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VulnerabilityAssessmentScanRecordListResult}
     */
    databaseVulnerabilityAssessmentScansListByDatabase(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseVulnerabilityAssessmentScansListByDatabase");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling databaseVulnerabilityAssessmentScansListByDatabase");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseVulnerabilityAssessmentScansListByDatabase");
      }
      // verify the required parameter 'vulnerabilityAssessmentName' is set
      if (vulnerabilityAssessmentName === undefined || vulnerabilityAssessmentName === null) {
        throw new Error("Missing the required parameter 'vulnerabilityAssessmentName' when calling databaseVulnerabilityAssessmentScansListByDatabase");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseVulnerabilityAssessmentScansListByDatabase");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseVulnerabilityAssessmentScansListByDatabase");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'databaseName': databaseName,
        'vulnerabilityAssessmentName': vulnerabilityAssessmentName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VulnerabilityAssessmentScanRecordListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
