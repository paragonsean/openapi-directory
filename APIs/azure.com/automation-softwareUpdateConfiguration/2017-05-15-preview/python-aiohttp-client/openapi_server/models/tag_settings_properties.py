# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TagSettingsProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter_operator: str=None, tags: Dict[str, List[str]]=None):
        """TagSettingsProperties - a model defined in OpenAPI

        :param filter_operator: The filter_operator of this TagSettingsProperties.
        :param tags: The tags of this TagSettingsProperties.
        """
        self.openapi_types = {
            'filter_operator': str,
            'tags': Dict[str, List[str]]
        }

        self.attribute_map = {
            'filter_operator': 'filterOperator',
            'tags': 'tags'
        }

        self._filter_operator = filter_operator
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TagSettingsProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TagSettingsProperties of this TagSettingsProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter_operator(self):
        """Gets the filter_operator of this TagSettingsProperties.

        Filter VMs by Any or All specified tags.

        :return: The filter_operator of this TagSettingsProperties.
        :rtype: str
        """
        return self._filter_operator

    @filter_operator.setter
    def filter_operator(self, filter_operator):
        """Sets the filter_operator of this TagSettingsProperties.

        Filter VMs by Any or All specified tags.

        :param filter_operator: The filter_operator of this TagSettingsProperties.
        :type filter_operator: str
        """
        allowed_values = ["All", "Any"]  # noqa: E501
        if filter_operator not in allowed_values:
            raise ValueError(
                "Invalid value for `filter_operator` ({0}), must be one of {1}"
                .format(filter_operator, allowed_values)
            )

        self._filter_operator = filter_operator

    @property
    def tags(self):
        """Gets the tags of this TagSettingsProperties.

        Dictionary of tags with its list of values.

        :return: The tags of this TagSettingsProperties.
        :rtype: Dict[str, List[str]]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this TagSettingsProperties.

        Dictionary of tags with its list of values.

        :param tags: The tags of this TagSettingsProperties.
        :type tags: Dict[str, List[str]]
        """

        self._tags = tags
