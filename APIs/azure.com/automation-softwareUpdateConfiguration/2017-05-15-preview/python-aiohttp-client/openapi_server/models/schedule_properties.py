# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.advanced_schedule import AdvancedSchedule
from openapi_server import util


class ScheduleProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advanced_schedule: AdvancedSchedule=None, creation_time: datetime=None, description: str=None, expiry_time: datetime=None, expiry_time_offset_minutes: float=None, frequency: str=None, interval: int=None, is_enabled: bool=False, last_modified_time: datetime=None, next_run: datetime=None, next_run_offset_minutes: float=None, start_time: datetime=None, start_time_offset_minutes: float=None, time_zone: str=None):
        """ScheduleProperties - a model defined in OpenAPI

        :param advanced_schedule: The advanced_schedule of this ScheduleProperties.
        :param creation_time: The creation_time of this ScheduleProperties.
        :param description: The description of this ScheduleProperties.
        :param expiry_time: The expiry_time of this ScheduleProperties.
        :param expiry_time_offset_minutes: The expiry_time_offset_minutes of this ScheduleProperties.
        :param frequency: The frequency of this ScheduleProperties.
        :param interval: The interval of this ScheduleProperties.
        :param is_enabled: The is_enabled of this ScheduleProperties.
        :param last_modified_time: The last_modified_time of this ScheduleProperties.
        :param next_run: The next_run of this ScheduleProperties.
        :param next_run_offset_minutes: The next_run_offset_minutes of this ScheduleProperties.
        :param start_time: The start_time of this ScheduleProperties.
        :param start_time_offset_minutes: The start_time_offset_minutes of this ScheduleProperties.
        :param time_zone: The time_zone of this ScheduleProperties.
        """
        self.openapi_types = {
            'advanced_schedule': AdvancedSchedule,
            'creation_time': datetime,
            'description': str,
            'expiry_time': datetime,
            'expiry_time_offset_minutes': float,
            'frequency': str,
            'interval': int,
            'is_enabled': bool,
            'last_modified_time': datetime,
            'next_run': datetime,
            'next_run_offset_minutes': float,
            'start_time': datetime,
            'start_time_offset_minutes': float,
            'time_zone': str
        }

        self.attribute_map = {
            'advanced_schedule': 'advancedSchedule',
            'creation_time': 'creationTime',
            'description': 'description',
            'expiry_time': 'expiryTime',
            'expiry_time_offset_minutes': 'expiryTimeOffsetMinutes',
            'frequency': 'frequency',
            'interval': 'interval',
            'is_enabled': 'isEnabled',
            'last_modified_time': 'lastModifiedTime',
            'next_run': 'nextRun',
            'next_run_offset_minutes': 'nextRunOffsetMinutes',
            'start_time': 'startTime',
            'start_time_offset_minutes': 'startTimeOffsetMinutes',
            'time_zone': 'timeZone'
        }

        self._advanced_schedule = advanced_schedule
        self._creation_time = creation_time
        self._description = description
        self._expiry_time = expiry_time
        self._expiry_time_offset_minutes = expiry_time_offset_minutes
        self._frequency = frequency
        self._interval = interval
        self._is_enabled = is_enabled
        self._last_modified_time = last_modified_time
        self._next_run = next_run
        self._next_run_offset_minutes = next_run_offset_minutes
        self._start_time = start_time
        self._start_time_offset_minutes = start_time_offset_minutes
        self._time_zone = time_zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScheduleProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScheduleProperties of this ScheduleProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advanced_schedule(self):
        """Gets the advanced_schedule of this ScheduleProperties.


        :return: The advanced_schedule of this ScheduleProperties.
        :rtype: AdvancedSchedule
        """
        return self._advanced_schedule

    @advanced_schedule.setter
    def advanced_schedule(self, advanced_schedule):
        """Sets the advanced_schedule of this ScheduleProperties.


        :param advanced_schedule: The advanced_schedule of this ScheduleProperties.
        :type advanced_schedule: AdvancedSchedule
        """

        self._advanced_schedule = advanced_schedule

    @property
    def creation_time(self):
        """Gets the creation_time of this ScheduleProperties.

        Gets or sets the creation time.

        :return: The creation_time of this ScheduleProperties.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this ScheduleProperties.

        Gets or sets the creation time.

        :param creation_time: The creation_time of this ScheduleProperties.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def description(self):
        """Gets the description of this ScheduleProperties.

        Gets or sets the description.

        :return: The description of this ScheduleProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ScheduleProperties.

        Gets or sets the description.

        :param description: The description of this ScheduleProperties.
        :type description: str
        """

        self._description = description

    @property
    def expiry_time(self):
        """Gets the expiry_time of this ScheduleProperties.

        Gets or sets the end time of the schedule.

        :return: The expiry_time of this ScheduleProperties.
        :rtype: datetime
        """
        return self._expiry_time

    @expiry_time.setter
    def expiry_time(self, expiry_time):
        """Sets the expiry_time of this ScheduleProperties.

        Gets or sets the end time of the schedule.

        :param expiry_time: The expiry_time of this ScheduleProperties.
        :type expiry_time: datetime
        """

        self._expiry_time = expiry_time

    @property
    def expiry_time_offset_minutes(self):
        """Gets the expiry_time_offset_minutes of this ScheduleProperties.

        Gets or sets the expiry time's offset in minutes.

        :return: The expiry_time_offset_minutes of this ScheduleProperties.
        :rtype: float
        """
        return self._expiry_time_offset_minutes

    @expiry_time_offset_minutes.setter
    def expiry_time_offset_minutes(self, expiry_time_offset_minutes):
        """Sets the expiry_time_offset_minutes of this ScheduleProperties.

        Gets or sets the expiry time's offset in minutes.

        :param expiry_time_offset_minutes: The expiry_time_offset_minutes of this ScheduleProperties.
        :type expiry_time_offset_minutes: float
        """

        self._expiry_time_offset_minutes = expiry_time_offset_minutes

    @property
    def frequency(self):
        """Gets the frequency of this ScheduleProperties.

        Gets or sets the frequency of the schedule.

        :return: The frequency of this ScheduleProperties.
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this ScheduleProperties.

        Gets or sets the frequency of the schedule.

        :param frequency: The frequency of this ScheduleProperties.
        :type frequency: str
        """
        allowed_values = ["OneTime", "Day", "Hour", "Week", "Month", "Minute"]  # noqa: E501
        if frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `frequency` ({0}), must be one of {1}"
                .format(frequency, allowed_values)
            )

        self._frequency = frequency

    @property
    def interval(self):
        """Gets the interval of this ScheduleProperties.

        Gets or sets the interval of the schedule.

        :return: The interval of this ScheduleProperties.
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this ScheduleProperties.

        Gets or sets the interval of the schedule.

        :param interval: The interval of this ScheduleProperties.
        :type interval: int
        """

        self._interval = interval

    @property
    def is_enabled(self):
        """Gets the is_enabled of this ScheduleProperties.

        Gets or sets a value indicating whether this schedule is enabled.

        :return: The is_enabled of this ScheduleProperties.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this ScheduleProperties.

        Gets or sets a value indicating whether this schedule is enabled.

        :param is_enabled: The is_enabled of this ScheduleProperties.
        :type is_enabled: bool
        """

        self._is_enabled = is_enabled

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this ScheduleProperties.

        Gets or sets the last modified time.

        :return: The last_modified_time of this ScheduleProperties.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this ScheduleProperties.

        Gets or sets the last modified time.

        :param last_modified_time: The last_modified_time of this ScheduleProperties.
        :type last_modified_time: datetime
        """

        self._last_modified_time = last_modified_time

    @property
    def next_run(self):
        """Gets the next_run of this ScheduleProperties.

        Gets or sets the next run time of the schedule.

        :return: The next_run of this ScheduleProperties.
        :rtype: datetime
        """
        return self._next_run

    @next_run.setter
    def next_run(self, next_run):
        """Sets the next_run of this ScheduleProperties.

        Gets or sets the next run time of the schedule.

        :param next_run: The next_run of this ScheduleProperties.
        :type next_run: datetime
        """

        self._next_run = next_run

    @property
    def next_run_offset_minutes(self):
        """Gets the next_run_offset_minutes of this ScheduleProperties.

        Gets or sets the next run time's offset in minutes.

        :return: The next_run_offset_minutes of this ScheduleProperties.
        :rtype: float
        """
        return self._next_run_offset_minutes

    @next_run_offset_minutes.setter
    def next_run_offset_minutes(self, next_run_offset_minutes):
        """Sets the next_run_offset_minutes of this ScheduleProperties.

        Gets or sets the next run time's offset in minutes.

        :param next_run_offset_minutes: The next_run_offset_minutes of this ScheduleProperties.
        :type next_run_offset_minutes: float
        """

        self._next_run_offset_minutes = next_run_offset_minutes

    @property
    def start_time(self):
        """Gets the start_time of this ScheduleProperties.

        Gets or sets the start time of the schedule.

        :return: The start_time of this ScheduleProperties.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ScheduleProperties.

        Gets or sets the start time of the schedule.

        :param start_time: The start_time of this ScheduleProperties.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def start_time_offset_minutes(self):
        """Gets the start_time_offset_minutes of this ScheduleProperties.

        Gets the start time's offset in minutes.

        :return: The start_time_offset_minutes of this ScheduleProperties.
        :rtype: float
        """
        return self._start_time_offset_minutes

    @start_time_offset_minutes.setter
    def start_time_offset_minutes(self, start_time_offset_minutes):
        """Sets the start_time_offset_minutes of this ScheduleProperties.

        Gets the start time's offset in minutes.

        :param start_time_offset_minutes: The start_time_offset_minutes of this ScheduleProperties.
        :type start_time_offset_minutes: float
        """

        self._start_time_offset_minutes = start_time_offset_minutes

    @property
    def time_zone(self):
        """Gets the time_zone of this ScheduleProperties.

        Gets or sets the time zone of the schedule.

        :return: The time_zone of this ScheduleProperties.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this ScheduleProperties.

        Gets or sets the time zone of the schedule.

        :param time_zone: The time_zone of this ScheduleProperties.
        :type time_zone: str
        """

        self._time_zone = time_zone
