# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LinuxProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, excluded_package_name_masks: List[str]=None, included_package_classifications: str=None, included_package_name_masks: List[str]=None, reboot_setting: str=None):
        """LinuxProperties - a model defined in OpenAPI

        :param excluded_package_name_masks: The excluded_package_name_masks of this LinuxProperties.
        :param included_package_classifications: The included_package_classifications of this LinuxProperties.
        :param included_package_name_masks: The included_package_name_masks of this LinuxProperties.
        :param reboot_setting: The reboot_setting of this LinuxProperties.
        """
        self.openapi_types = {
            'excluded_package_name_masks': List[str],
            'included_package_classifications': str,
            'included_package_name_masks': List[str],
            'reboot_setting': str
        }

        self.attribute_map = {
            'excluded_package_name_masks': 'excludedPackageNameMasks',
            'included_package_classifications': 'includedPackageClassifications',
            'included_package_name_masks': 'includedPackageNameMasks',
            'reboot_setting': 'rebootSetting'
        }

        self._excluded_package_name_masks = excluded_package_name_masks
        self._included_package_classifications = included_package_classifications
        self._included_package_name_masks = included_package_name_masks
        self._reboot_setting = reboot_setting

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LinuxProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LinuxProperties of this LinuxProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def excluded_package_name_masks(self):
        """Gets the excluded_package_name_masks of this LinuxProperties.

        packages excluded from the software update configuration.

        :return: The excluded_package_name_masks of this LinuxProperties.
        :rtype: List[str]
        """
        return self._excluded_package_name_masks

    @excluded_package_name_masks.setter
    def excluded_package_name_masks(self, excluded_package_name_masks):
        """Sets the excluded_package_name_masks of this LinuxProperties.

        packages excluded from the software update configuration.

        :param excluded_package_name_masks: The excluded_package_name_masks of this LinuxProperties.
        :type excluded_package_name_masks: List[str]
        """

        self._excluded_package_name_masks = excluded_package_name_masks

    @property
    def included_package_classifications(self):
        """Gets the included_package_classifications of this LinuxProperties.

        Update classifications included in the software update configuration.

        :return: The included_package_classifications of this LinuxProperties.
        :rtype: str
        """
        return self._included_package_classifications

    @included_package_classifications.setter
    def included_package_classifications(self, included_package_classifications):
        """Sets the included_package_classifications of this LinuxProperties.

        Update classifications included in the software update configuration.

        :param included_package_classifications: The included_package_classifications of this LinuxProperties.
        :type included_package_classifications: str
        """
        allowed_values = ["Unclassified", "Critical", "Security", "Other"]  # noqa: E501
        if included_package_classifications not in allowed_values:
            raise ValueError(
                "Invalid value for `included_package_classifications` ({0}), must be one of {1}"
                .format(included_package_classifications, allowed_values)
            )

        self._included_package_classifications = included_package_classifications

    @property
    def included_package_name_masks(self):
        """Gets the included_package_name_masks of this LinuxProperties.

        packages included from the software update configuration.

        :return: The included_package_name_masks of this LinuxProperties.
        :rtype: List[str]
        """
        return self._included_package_name_masks

    @included_package_name_masks.setter
    def included_package_name_masks(self, included_package_name_masks):
        """Sets the included_package_name_masks of this LinuxProperties.

        packages included from the software update configuration.

        :param included_package_name_masks: The included_package_name_masks of this LinuxProperties.
        :type included_package_name_masks: List[str]
        """

        self._included_package_name_masks = included_package_name_masks

    @property
    def reboot_setting(self):
        """Gets the reboot_setting of this LinuxProperties.

        Reboot setting for the software update configuration.

        :return: The reboot_setting of this LinuxProperties.
        :rtype: str
        """
        return self._reboot_setting

    @reboot_setting.setter
    def reboot_setting(self, reboot_setting):
        """Sets the reboot_setting of this LinuxProperties.

        Reboot setting for the software update configuration.

        :param reboot_setting: The reboot_setting of this LinuxProperties.
        :type reboot_setting: str
        """

        self._reboot_setting = reboot_setting
