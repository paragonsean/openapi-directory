/**
 * Update Management
 * APIs for managing software update configurations.
 *
 * The version of the OpenAPI document: 2017-05-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NonAzureQueryProperties model module.
 * @module model/NonAzureQueryProperties
 * @version 2017-05-15-preview
 */
class NonAzureQueryProperties {
    /**
     * Constructs a new <code>NonAzureQueryProperties</code>.
     * Non Azure query for the update configuration.
     * @alias module:model/NonAzureQueryProperties
     */
    constructor() { 
        
        NonAzureQueryProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NonAzureQueryProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NonAzureQueryProperties} obj Optional instance to populate.
     * @return {module:model/NonAzureQueryProperties} The populated <code>NonAzureQueryProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NonAzureQueryProperties();

            if (data.hasOwnProperty('functionAlias')) {
                obj['functionAlias'] = ApiClient.convertToType(data['functionAlias'], 'String');
            }
            if (data.hasOwnProperty('workspaceId')) {
                obj['workspaceId'] = ApiClient.convertToType(data['workspaceId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NonAzureQueryProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NonAzureQueryProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['functionAlias'] && !(typeof data['functionAlias'] === 'string' || data['functionAlias'] instanceof String)) {
            throw new Error("Expected the field `functionAlias` to be a primitive type in the JSON string but got " + data['functionAlias']);
        }
        // ensure the json data is a string
        if (data['workspaceId'] && !(typeof data['workspaceId'] === 'string' || data['workspaceId'] instanceof String)) {
            throw new Error("Expected the field `workspaceId` to be a primitive type in the JSON string but got " + data['workspaceId']);
        }

        return true;
    }


}



/**
 * Log Analytics Saved Search name.
 * @member {String} functionAlias
 */
NonAzureQueryProperties.prototype['functionAlias'] = undefined;

/**
 * Workspace Id for Log Analytics in which the saved Search is resided.
 * @member {String} workspaceId
 */
NonAzureQueryProperties.prototype['workspaceId'] = undefined;






export default NonAzureQueryProperties;

