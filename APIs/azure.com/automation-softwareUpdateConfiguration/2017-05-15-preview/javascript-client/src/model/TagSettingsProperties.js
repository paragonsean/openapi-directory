/**
 * Update Management
 * APIs for managing software update configurations.
 *
 * The version of the OpenAPI document: 2017-05-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TagSettingsProperties model module.
 * @module model/TagSettingsProperties
 * @version 2017-05-15-preview
 */
class TagSettingsProperties {
    /**
     * Constructs a new <code>TagSettingsProperties</code>.
     * Tag filter information for the VM.
     * @alias module:model/TagSettingsProperties
     */
    constructor() { 
        
        TagSettingsProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TagSettingsProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TagSettingsProperties} obj Optional instance to populate.
     * @return {module:model/TagSettingsProperties} The populated <code>TagSettingsProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TagSettingsProperties();

            if (data.hasOwnProperty('filterOperator')) {
                obj['filterOperator'] = ApiClient.convertToType(data['filterOperator'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': ['String']});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TagSettingsProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TagSettingsProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['filterOperator'] && !(typeof data['filterOperator'] === 'string' || data['filterOperator'] instanceof String)) {
            throw new Error("Expected the field `filterOperator` to be a primitive type in the JSON string but got " + data['filterOperator']);
        }

        return true;
    }


}



/**
 * Filter VMs by Any or All specified tags.
 * @member {module:model/TagSettingsProperties.FilterOperatorEnum} filterOperator
 */
TagSettingsProperties.prototype['filterOperator'] = undefined;

/**
 * Dictionary of tags with its list of values.
 * @member {Object.<String, Array.<String>>} tags
 */
TagSettingsProperties.prototype['tags'] = undefined;





/**
 * Allowed values for the <code>filterOperator</code> property.
 * @enum {String}
 * @readonly
 */
TagSettingsProperties['FilterOperatorEnum'] = {

    /**
     * value: "All"
     * @const
     */
    "All": "All",

    /**
     * value: "Any"
     * @const
     */
    "Any": "Any"
};



export default TagSettingsProperties;

