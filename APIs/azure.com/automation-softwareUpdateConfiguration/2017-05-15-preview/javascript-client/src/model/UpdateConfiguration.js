/**
 * Update Management
 * APIs for managing software update configurations.
 *
 * The version of the OpenAPI document: 2017-05-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LinuxProperties from './LinuxProperties';
import OperatingSystemType from './OperatingSystemType';
import TargetProperties from './TargetProperties';
import WindowsProperties from './WindowsProperties';

/**
 * The UpdateConfiguration model module.
 * @module model/UpdateConfiguration
 * @version 2017-05-15-preview
 */
class UpdateConfiguration {
    /**
     * Constructs a new <code>UpdateConfiguration</code>.
     * Update specific properties of the software update configuration.
     * @alias module:model/UpdateConfiguration
     * @param operatingSystem {module:model/OperatingSystemType} 
     */
    constructor(operatingSystem) { 
        
        UpdateConfiguration.initialize(this, operatingSystem);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, operatingSystem) { 
        obj['operatingSystem'] = operatingSystem;
    }

    /**
     * Constructs a <code>UpdateConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateConfiguration} obj Optional instance to populate.
     * @return {module:model/UpdateConfiguration} The populated <code>UpdateConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateConfiguration();

            if (data.hasOwnProperty('azureVirtualMachines')) {
                obj['azureVirtualMachines'] = ApiClient.convertToType(data['azureVirtualMachines'], ['String']);
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'String');
            }
            if (data.hasOwnProperty('linux')) {
                obj['linux'] = LinuxProperties.constructFromObject(data['linux']);
            }
            if (data.hasOwnProperty('nonAzureComputerNames')) {
                obj['nonAzureComputerNames'] = ApiClient.convertToType(data['nonAzureComputerNames'], ['String']);
            }
            if (data.hasOwnProperty('operatingSystem')) {
                obj['operatingSystem'] = OperatingSystemType.constructFromObject(data['operatingSystem']);
            }
            if (data.hasOwnProperty('targets')) {
                obj['targets'] = TargetProperties.constructFromObject(data['targets']);
            }
            if (data.hasOwnProperty('windows')) {
                obj['windows'] = WindowsProperties.constructFromObject(data['windows']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['azureVirtualMachines'])) {
            throw new Error("Expected the field `azureVirtualMachines` to be an array in the JSON data but got " + data['azureVirtualMachines']);
        }
        // ensure the json data is a string
        if (data['duration'] && !(typeof data['duration'] === 'string' || data['duration'] instanceof String)) {
            throw new Error("Expected the field `duration` to be a primitive type in the JSON string but got " + data['duration']);
        }
        // validate the optional field `linux`
        if (data['linux']) { // data not null
          LinuxProperties.validateJSON(data['linux']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['nonAzureComputerNames'])) {
            throw new Error("Expected the field `nonAzureComputerNames` to be an array in the JSON data but got " + data['nonAzureComputerNames']);
        }
        // validate the optional field `targets`
        if (data['targets']) { // data not null
          TargetProperties.validateJSON(data['targets']);
        }
        // validate the optional field `windows`
        if (data['windows']) { // data not null
          WindowsProperties.validateJSON(data['windows']);
        }

        return true;
    }


}

UpdateConfiguration.RequiredProperties = ["operatingSystem"];

/**
 * List of azure resource Ids for azure virtual machines targeted by the software update configuration.
 * @member {Array.<String>} azureVirtualMachines
 */
UpdateConfiguration.prototype['azureVirtualMachines'] = undefined;

/**
 * Maximum time allowed for the software update configuration run. Duration needs to be specified using the format PT[n]H[n]M[n]S as per ISO8601
 * @member {String} duration
 */
UpdateConfiguration.prototype['duration'] = undefined;

/**
 * @member {module:model/LinuxProperties} linux
 */
UpdateConfiguration.prototype['linux'] = undefined;

/**
 * List of names of non-azure machines targeted by the software update configuration.
 * @member {Array.<String>} nonAzureComputerNames
 */
UpdateConfiguration.prototype['nonAzureComputerNames'] = undefined;

/**
 * @member {module:model/OperatingSystemType} operatingSystem
 */
UpdateConfiguration.prototype['operatingSystem'] = undefined;

/**
 * @member {module:model/TargetProperties} targets
 */
UpdateConfiguration.prototype['targets'] = undefined;

/**
 * @member {module:model/WindowsProperties} windows
 */
UpdateConfiguration.prototype['windows'] = undefined;






export default UpdateConfiguration;

