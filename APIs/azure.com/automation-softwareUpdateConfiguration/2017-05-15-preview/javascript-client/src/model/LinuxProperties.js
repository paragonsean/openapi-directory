/**
 * Update Management
 * APIs for managing software update configurations.
 *
 * The version of the OpenAPI document: 2017-05-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LinuxProperties model module.
 * @module model/LinuxProperties
 * @version 2017-05-15-preview
 */
class LinuxProperties {
    /**
     * Constructs a new <code>LinuxProperties</code>.
     * Linux specific update configuration.
     * @alias module:model/LinuxProperties
     */
    constructor() { 
        
        LinuxProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LinuxProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LinuxProperties} obj Optional instance to populate.
     * @return {module:model/LinuxProperties} The populated <code>LinuxProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LinuxProperties();

            if (data.hasOwnProperty('excludedPackageNameMasks')) {
                obj['excludedPackageNameMasks'] = ApiClient.convertToType(data['excludedPackageNameMasks'], ['String']);
            }
            if (data.hasOwnProperty('includedPackageClassifications')) {
                obj['includedPackageClassifications'] = ApiClient.convertToType(data['includedPackageClassifications'], 'String');
            }
            if (data.hasOwnProperty('includedPackageNameMasks')) {
                obj['includedPackageNameMasks'] = ApiClient.convertToType(data['includedPackageNameMasks'], ['String']);
            }
            if (data.hasOwnProperty('rebootSetting')) {
                obj['rebootSetting'] = ApiClient.convertToType(data['rebootSetting'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LinuxProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LinuxProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['excludedPackageNameMasks'])) {
            throw new Error("Expected the field `excludedPackageNameMasks` to be an array in the JSON data but got " + data['excludedPackageNameMasks']);
        }
        // ensure the json data is a string
        if (data['includedPackageClassifications'] && !(typeof data['includedPackageClassifications'] === 'string' || data['includedPackageClassifications'] instanceof String)) {
            throw new Error("Expected the field `includedPackageClassifications` to be a primitive type in the JSON string but got " + data['includedPackageClassifications']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['includedPackageNameMasks'])) {
            throw new Error("Expected the field `includedPackageNameMasks` to be an array in the JSON data but got " + data['includedPackageNameMasks']);
        }
        // ensure the json data is a string
        if (data['rebootSetting'] && !(typeof data['rebootSetting'] === 'string' || data['rebootSetting'] instanceof String)) {
            throw new Error("Expected the field `rebootSetting` to be a primitive type in the JSON string but got " + data['rebootSetting']);
        }

        return true;
    }


}



/**
 * packages excluded from the software update configuration.
 * @member {Array.<String>} excludedPackageNameMasks
 */
LinuxProperties.prototype['excludedPackageNameMasks'] = undefined;

/**
 * Update classifications included in the software update configuration.
 * @member {module:model/LinuxProperties.IncludedPackageClassificationsEnum} includedPackageClassifications
 */
LinuxProperties.prototype['includedPackageClassifications'] = undefined;

/**
 * packages included from the software update configuration.
 * @member {Array.<String>} includedPackageNameMasks
 */
LinuxProperties.prototype['includedPackageNameMasks'] = undefined;

/**
 * Reboot setting for the software update configuration.
 * @member {String} rebootSetting
 */
LinuxProperties.prototype['rebootSetting'] = undefined;





/**
 * Allowed values for the <code>includedPackageClassifications</code> property.
 * @enum {String}
 * @readonly
 */
LinuxProperties['IncludedPackageClassificationsEnum'] = {

    /**
     * value: "Unclassified"
     * @const
     */
    "Unclassified": "Unclassified",

    /**
     * value: "Critical"
     * @const
     */
    "Critical": "Critical",

    /**
     * value: "Security"
     * @const
     */
    "Security": "Security",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other"
};



export default LinuxProperties;

