/**
 * Update Management
 * APIs for managing software update configurations.
 *
 * The version of the OpenAPI document: 2017-05-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AzureQueryProperties from './AzureQueryProperties';
import NonAzureQueryProperties from './NonAzureQueryProperties';

/**
 * The TargetProperties model module.
 * @module model/TargetProperties
 * @version 2017-05-15-preview
 */
class TargetProperties {
    /**
     * Constructs a new <code>TargetProperties</code>.
     * Group specific to the update configuration.
     * @alias module:model/TargetProperties
     */
    constructor() { 
        
        TargetProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TargetProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TargetProperties} obj Optional instance to populate.
     * @return {module:model/TargetProperties} The populated <code>TargetProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TargetProperties();

            if (data.hasOwnProperty('azureQueries')) {
                obj['azureQueries'] = ApiClient.convertToType(data['azureQueries'], [AzureQueryProperties]);
            }
            if (data.hasOwnProperty('nonAzureQueries')) {
                obj['nonAzureQueries'] = ApiClient.convertToType(data['nonAzureQueries'], [NonAzureQueryProperties]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TargetProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TargetProperties</code>.
     */
    static validateJSON(data) {
        if (data['azureQueries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['azureQueries'])) {
                throw new Error("Expected the field `azureQueries` to be an array in the JSON data but got " + data['azureQueries']);
            }
            // validate the optional field `azureQueries` (array)
            for (const item of data['azureQueries']) {
                AzureQueryProperties.validateJSON(item);
            };
        }
        if (data['nonAzureQueries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['nonAzureQueries'])) {
                throw new Error("Expected the field `nonAzureQueries` to be an array in the JSON data but got " + data['nonAzureQueries']);
            }
            // validate the optional field `nonAzureQueries` (array)
            for (const item of data['nonAzureQueries']) {
                NonAzureQueryProperties.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * List of Azure queries in the software update configuration.
 * @member {Array.<module:model/AzureQueryProperties>} azureQueries
 */
TargetProperties.prototype['azureQueries'] = undefined;

/**
 * List of non Azure queries in the software update configuration.
 * @member {Array.<module:model/NonAzureQueryProperties>} nonAzureQueries
 */
TargetProperties.prototype['nonAzureQueries'] = undefined;






export default TargetProperties;

