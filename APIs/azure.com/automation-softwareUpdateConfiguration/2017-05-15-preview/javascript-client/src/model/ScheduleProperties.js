/**
 * Update Management
 * APIs for managing software update configurations.
 *
 * The version of the OpenAPI document: 2017-05-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdvancedSchedule from './AdvancedSchedule';

/**
 * The ScheduleProperties model module.
 * @module model/ScheduleProperties
 * @version 2017-05-15-preview
 */
class ScheduleProperties {
    /**
     * Constructs a new <code>ScheduleProperties</code>.
     * Definition of schedule parameters.
     * @alias module:model/ScheduleProperties
     */
    constructor() { 
        
        ScheduleProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['isEnabled'] = false;
    }

    /**
     * Constructs a <code>ScheduleProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScheduleProperties} obj Optional instance to populate.
     * @return {module:model/ScheduleProperties} The populated <code>ScheduleProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScheduleProperties();

            if (data.hasOwnProperty('advancedSchedule')) {
                obj['advancedSchedule'] = AdvancedSchedule.constructFromObject(data['advancedSchedule']);
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('expiryTime')) {
                obj['expiryTime'] = ApiClient.convertToType(data['expiryTime'], 'Date');
            }
            if (data.hasOwnProperty('expiryTimeOffsetMinutes')) {
                obj['expiryTimeOffsetMinutes'] = ApiClient.convertToType(data['expiryTimeOffsetMinutes'], 'Number');
            }
            if (data.hasOwnProperty('frequency')) {
                obj['frequency'] = ApiClient.convertToType(data['frequency'], 'String');
            }
            if (data.hasOwnProperty('interval')) {
                obj['interval'] = ApiClient.convertToType(data['interval'], 'Number');
            }
            if (data.hasOwnProperty('isEnabled')) {
                obj['isEnabled'] = ApiClient.convertToType(data['isEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('lastModifiedTime')) {
                obj['lastModifiedTime'] = ApiClient.convertToType(data['lastModifiedTime'], 'Date');
            }
            if (data.hasOwnProperty('nextRun')) {
                obj['nextRun'] = ApiClient.convertToType(data['nextRun'], 'Date');
            }
            if (data.hasOwnProperty('nextRunOffsetMinutes')) {
                obj['nextRunOffsetMinutes'] = ApiClient.convertToType(data['nextRunOffsetMinutes'], 'Number');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('startTimeOffsetMinutes')) {
                obj['startTimeOffsetMinutes'] = ApiClient.convertToType(data['startTimeOffsetMinutes'], 'Number');
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = ApiClient.convertToType(data['timeZone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScheduleProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScheduleProperties</code>.
     */
    static validateJSON(data) {
        // validate the optional field `advancedSchedule`
        if (data['advancedSchedule']) { // data not null
          AdvancedSchedule.validateJSON(data['advancedSchedule']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['frequency'] && !(typeof data['frequency'] === 'string' || data['frequency'] instanceof String)) {
            throw new Error("Expected the field `frequency` to be a primitive type in the JSON string but got " + data['frequency']);
        }
        // ensure the json data is a string
        if (data['timeZone'] && !(typeof data['timeZone'] === 'string' || data['timeZone'] instanceof String)) {
            throw new Error("Expected the field `timeZone` to be a primitive type in the JSON string but got " + data['timeZone']);
        }

        return true;
    }


}



/**
 * @member {module:model/AdvancedSchedule} advancedSchedule
 */
ScheduleProperties.prototype['advancedSchedule'] = undefined;

/**
 * Gets or sets the creation time.
 * @member {Date} creationTime
 */
ScheduleProperties.prototype['creationTime'] = undefined;

/**
 * Gets or sets the description.
 * @member {String} description
 */
ScheduleProperties.prototype['description'] = undefined;

/**
 * Gets or sets the end time of the schedule.
 * @member {Date} expiryTime
 */
ScheduleProperties.prototype['expiryTime'] = undefined;

/**
 * Gets or sets the expiry time's offset in minutes.
 * @member {Number} expiryTimeOffsetMinutes
 */
ScheduleProperties.prototype['expiryTimeOffsetMinutes'] = undefined;

/**
 * Gets or sets the frequency of the schedule.
 * @member {module:model/ScheduleProperties.FrequencyEnum} frequency
 */
ScheduleProperties.prototype['frequency'] = undefined;

/**
 * Gets or sets the interval of the schedule.
 * @member {Number} interval
 */
ScheduleProperties.prototype['interval'] = undefined;

/**
 * Gets or sets a value indicating whether this schedule is enabled.
 * @member {Boolean} isEnabled
 * @default false
 */
ScheduleProperties.prototype['isEnabled'] = false;

/**
 * Gets or sets the last modified time.
 * @member {Date} lastModifiedTime
 */
ScheduleProperties.prototype['lastModifiedTime'] = undefined;

/**
 * Gets or sets the next run time of the schedule.
 * @member {Date} nextRun
 */
ScheduleProperties.prototype['nextRun'] = undefined;

/**
 * Gets or sets the next run time's offset in minutes.
 * @member {Number} nextRunOffsetMinutes
 */
ScheduleProperties.prototype['nextRunOffsetMinutes'] = undefined;

/**
 * Gets or sets the start time of the schedule.
 * @member {Date} startTime
 */
ScheduleProperties.prototype['startTime'] = undefined;

/**
 * Gets the start time's offset in minutes.
 * @member {Number} startTimeOffsetMinutes
 */
ScheduleProperties.prototype['startTimeOffsetMinutes'] = undefined;

/**
 * Gets or sets the time zone of the schedule.
 * @member {String} timeZone
 */
ScheduleProperties.prototype['timeZone'] = undefined;





/**
 * Allowed values for the <code>frequency</code> property.
 * @enum {String}
 * @readonly
 */
ScheduleProperties['FrequencyEnum'] = {

    /**
     * value: "OneTime"
     * @const
     */
    "OneTime": "OneTime",

    /**
     * value: "Day"
     * @const
     */
    "Day": "Day",

    /**
     * value: "Hour"
     * @const
     */
    "Hour": "Hour",

    /**
     * value: "Week"
     * @const
     */
    "Week": "Week",

    /**
     * value: "Month"
     * @const
     */
    "Month": "Month",

    /**
     * value: "Minute"
     * @const
     */
    "Minute": "Minute"
};



export default ScheduleProperties;

