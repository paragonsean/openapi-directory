/**
 * Update Management
 * APIs for managing software update configurations.
 *
 * The version of the OpenAPI document: 2017-05-15-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIScheduleProperties.h
 *
 * Definition of schedule parameters.
 */

#ifndef OAIScheduleProperties_H
#define OAIScheduleProperties_H

#include <QJsonObject>

#include "OAIAdvancedSchedule.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAdvancedSchedule;

class OAIScheduleProperties : public OAIObject {
public:
    OAIScheduleProperties();
    OAIScheduleProperties(QString json);
    ~OAIScheduleProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAdvancedSchedule getAdvancedSchedule() const;
    void setAdvancedSchedule(const OAIAdvancedSchedule &advanced_schedule);
    bool is_advanced_schedule_Set() const;
    bool is_advanced_schedule_Valid() const;

    QDateTime getCreationTime() const;
    void setCreationTime(const QDateTime &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QDateTime getExpiryTime() const;
    void setExpiryTime(const QDateTime &expiry_time);
    bool is_expiry_time_Set() const;
    bool is_expiry_time_Valid() const;

    double getExpiryTimeOffsetMinutes() const;
    void setExpiryTimeOffsetMinutes(const double &expiry_time_offset_minutes);
    bool is_expiry_time_offset_minutes_Set() const;
    bool is_expiry_time_offset_minutes_Valid() const;

    QString getFrequency() const;
    void setFrequency(const QString &frequency);
    bool is_frequency_Set() const;
    bool is_frequency_Valid() const;

    qint32 getInterval() const;
    void setInterval(const qint32 &interval);
    bool is_interval_Set() const;
    bool is_interval_Valid() const;

    bool isIsEnabled() const;
    void setIsEnabled(const bool &is_enabled);
    bool is_is_enabled_Set() const;
    bool is_is_enabled_Valid() const;

    QDateTime getLastModifiedTime() const;
    void setLastModifiedTime(const QDateTime &last_modified_time);
    bool is_last_modified_time_Set() const;
    bool is_last_modified_time_Valid() const;

    QDateTime getNextRun() const;
    void setNextRun(const QDateTime &next_run);
    bool is_next_run_Set() const;
    bool is_next_run_Valid() const;

    double getNextRunOffsetMinutes() const;
    void setNextRunOffsetMinutes(const double &next_run_offset_minutes);
    bool is_next_run_offset_minutes_Set() const;
    bool is_next_run_offset_minutes_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    double getStartTimeOffsetMinutes() const;
    void setStartTimeOffsetMinutes(const double &start_time_offset_minutes);
    bool is_start_time_offset_minutes_Set() const;
    bool is_start_time_offset_minutes_Valid() const;

    QString getTimeZone() const;
    void setTimeZone(const QString &time_zone);
    bool is_time_zone_Set() const;
    bool is_time_zone_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAdvancedSchedule m_advanced_schedule;
    bool m_advanced_schedule_isSet;
    bool m_advanced_schedule_isValid;

    QDateTime m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QDateTime m_expiry_time;
    bool m_expiry_time_isSet;
    bool m_expiry_time_isValid;

    double m_expiry_time_offset_minutes;
    bool m_expiry_time_offset_minutes_isSet;
    bool m_expiry_time_offset_minutes_isValid;

    QString m_frequency;
    bool m_frequency_isSet;
    bool m_frequency_isValid;

    qint32 m_interval;
    bool m_interval_isSet;
    bool m_interval_isValid;

    bool m_is_enabled;
    bool m_is_enabled_isSet;
    bool m_is_enabled_isValid;

    QDateTime m_last_modified_time;
    bool m_last_modified_time_isSet;
    bool m_last_modified_time_isValid;

    QDateTime m_next_run;
    bool m_next_run_isSet;
    bool m_next_run_isValid;

    double m_next_run_offset_minutes;
    bool m_next_run_offset_minutes_isSet;
    bool m_next_run_offset_minutes_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    double m_start_time_offset_minutes;
    bool m_start_time_offset_minutes_isSet;
    bool m_start_time_offset_minutes_isValid;

    QString m_time_zone;
    bool m_time_zone_isSet;
    bool m_time_zone_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIScheduleProperties)

#endif // OAIScheduleProperties_H
