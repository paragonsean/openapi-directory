/**
 * Update Management
 * APIs for managing software update configurations.
 *
 * The version of the OpenAPI document: 2017-05-15-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITagSettingsProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITagSettingsProperties::OAITagSettingsProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITagSettingsProperties::OAITagSettingsProperties() {
    this->initializeModel();
}

OAITagSettingsProperties::~OAITagSettingsProperties() {}

void OAITagSettingsProperties::initializeModel() {

    m_filter_operator_isSet = false;
    m_filter_operator_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAITagSettingsProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITagSettingsProperties::fromJsonObject(QJsonObject json) {

    m_filter_operator_isValid = ::OpenAPI::fromJsonValue(m_filter_operator, json[QString("filterOperator")]);
    m_filter_operator_isSet = !json[QString("filterOperator")].isNull() && m_filter_operator_isValid;

    if(json["tags"].isObject()){
        auto varmap = json["tags"].toObject().toVariantMap();
        m_tags_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_tags_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_tags_isSet &= !jval.isNull() && m_tags_isValid;
                m_tags.insert(m_tags.end(), val, item);
            }
        }
    }
}

QString OAITagSettingsProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITagSettingsProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_operator_isSet) {
        obj.insert(QString("filterOperator"), ::OpenAPI::toJsonValue(m_filter_operator));
    }
    if (m_tags.size() > 0) {
        
        obj.insert(QString("tags"), toJsonValue(m_tags));
    }
    return obj;
}

QString OAITagSettingsProperties::getFilterOperator() const {
    return m_filter_operator;
}
void OAITagSettingsProperties::setFilterOperator(const QString &filter_operator) {
    m_filter_operator = filter_operator;
    m_filter_operator_isSet = true;
}

bool OAITagSettingsProperties::is_filter_operator_Set() const{
    return m_filter_operator_isSet;
}

bool OAITagSettingsProperties::is_filter_operator_Valid() const{
    return m_filter_operator_isValid;
}

QMap<QString, QList<QString>> OAITagSettingsProperties::getTags() const {
    return m_tags;
}
void OAITagSettingsProperties::setTags(const QMap<QString, QList<QString>> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAITagSettingsProperties::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAITagSettingsProperties::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAITagSettingsProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITagSettingsProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
