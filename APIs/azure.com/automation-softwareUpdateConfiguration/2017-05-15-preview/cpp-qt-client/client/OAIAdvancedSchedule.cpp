/**
 * Update Management
 * APIs for managing software update configurations.
 *
 * The version of the OpenAPI document: 2017-05-15-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdvancedSchedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdvancedSchedule::OAIAdvancedSchedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdvancedSchedule::OAIAdvancedSchedule() {
    this->initializeModel();
}

OAIAdvancedSchedule::~OAIAdvancedSchedule() {}

void OAIAdvancedSchedule::initializeModel() {

    m_month_days_isSet = false;
    m_month_days_isValid = false;

    m_monthly_occurrences_isSet = false;
    m_monthly_occurrences_isValid = false;

    m_week_days_isSet = false;
    m_week_days_isValid = false;
}

void OAIAdvancedSchedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdvancedSchedule::fromJsonObject(QJsonObject json) {

    m_month_days_isValid = ::OpenAPI::fromJsonValue(m_month_days, json[QString("monthDays")]);
    m_month_days_isSet = !json[QString("monthDays")].isNull() && m_month_days_isValid;

    m_monthly_occurrences_isValid = ::OpenAPI::fromJsonValue(m_monthly_occurrences, json[QString("monthlyOccurrences")]);
    m_monthly_occurrences_isSet = !json[QString("monthlyOccurrences")].isNull() && m_monthly_occurrences_isValid;

    m_week_days_isValid = ::OpenAPI::fromJsonValue(m_week_days, json[QString("weekDays")]);
    m_week_days_isSet = !json[QString("weekDays")].isNull() && m_week_days_isValid;
}

QString OAIAdvancedSchedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdvancedSchedule::asJsonObject() const {
    QJsonObject obj;
    if (m_month_days.size() > 0) {
        obj.insert(QString("monthDays"), ::OpenAPI::toJsonValue(m_month_days));
    }
    if (m_monthly_occurrences.size() > 0) {
        obj.insert(QString("monthlyOccurrences"), ::OpenAPI::toJsonValue(m_monthly_occurrences));
    }
    if (m_week_days.size() > 0) {
        obj.insert(QString("weekDays"), ::OpenAPI::toJsonValue(m_week_days));
    }
    return obj;
}

QList<qint32> OAIAdvancedSchedule::getMonthDays() const {
    return m_month_days;
}
void OAIAdvancedSchedule::setMonthDays(const QList<qint32> &month_days) {
    m_month_days = month_days;
    m_month_days_isSet = true;
}

bool OAIAdvancedSchedule::is_month_days_Set() const{
    return m_month_days_isSet;
}

bool OAIAdvancedSchedule::is_month_days_Valid() const{
    return m_month_days_isValid;
}

QList<OAIAdvancedScheduleMonthlyOccurrence> OAIAdvancedSchedule::getMonthlyOccurrences() const {
    return m_monthly_occurrences;
}
void OAIAdvancedSchedule::setMonthlyOccurrences(const QList<OAIAdvancedScheduleMonthlyOccurrence> &monthly_occurrences) {
    m_monthly_occurrences = monthly_occurrences;
    m_monthly_occurrences_isSet = true;
}

bool OAIAdvancedSchedule::is_monthly_occurrences_Set() const{
    return m_monthly_occurrences_isSet;
}

bool OAIAdvancedSchedule::is_monthly_occurrences_Valid() const{
    return m_monthly_occurrences_isValid;
}

QList<QString> OAIAdvancedSchedule::getWeekDays() const {
    return m_week_days;
}
void OAIAdvancedSchedule::setWeekDays(const QList<QString> &week_days) {
    m_week_days = week_days;
    m_week_days_isSet = true;
}

bool OAIAdvancedSchedule::is_week_days_Set() const{
    return m_week_days_isSet;
}

bool OAIAdvancedSchedule::is_week_days_Valid() const{
    return m_week_days_isValid;
}

bool OAIAdvancedSchedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_month_days.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_monthly_occurrences.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_week_days.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdvancedSchedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
