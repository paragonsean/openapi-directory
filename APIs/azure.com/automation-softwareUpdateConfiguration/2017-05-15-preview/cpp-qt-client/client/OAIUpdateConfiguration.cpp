/**
 * Update Management
 * APIs for managing software update configurations.
 *
 * The version of the OpenAPI document: 2017-05-15-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateConfiguration::OAIUpdateConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateConfiguration::OAIUpdateConfiguration() {
    this->initializeModel();
}

OAIUpdateConfiguration::~OAIUpdateConfiguration() {}

void OAIUpdateConfiguration::initializeModel() {

    m_azure_virtual_machines_isSet = false;
    m_azure_virtual_machines_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_r_linux_isSet = false;
    m_r_linux_isValid = false;

    m_non_azure_computer_names_isSet = false;
    m_non_azure_computer_names_isValid = false;

    m_operating_system_isSet = false;
    m_operating_system_isValid = false;

    m_targets_isSet = false;
    m_targets_isValid = false;

    m_windows_isSet = false;
    m_windows_isValid = false;
}

void OAIUpdateConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateConfiguration::fromJsonObject(QJsonObject json) {

    m_azure_virtual_machines_isValid = ::OpenAPI::fromJsonValue(m_azure_virtual_machines, json[QString("azureVirtualMachines")]);
    m_azure_virtual_machines_isSet = !json[QString("azureVirtualMachines")].isNull() && m_azure_virtual_machines_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_r_linux_isValid = ::OpenAPI::fromJsonValue(m_r_linux, json[QString("linux")]);
    m_r_linux_isSet = !json[QString("linux")].isNull() && m_r_linux_isValid;

    m_non_azure_computer_names_isValid = ::OpenAPI::fromJsonValue(m_non_azure_computer_names, json[QString("nonAzureComputerNames")]);
    m_non_azure_computer_names_isSet = !json[QString("nonAzureComputerNames")].isNull() && m_non_azure_computer_names_isValid;

    m_operating_system_isValid = ::OpenAPI::fromJsonValue(m_operating_system, json[QString("operatingSystem")]);
    m_operating_system_isSet = !json[QString("operatingSystem")].isNull() && m_operating_system_isValid;

    m_targets_isValid = ::OpenAPI::fromJsonValue(m_targets, json[QString("targets")]);
    m_targets_isSet = !json[QString("targets")].isNull() && m_targets_isValid;

    m_windows_isValid = ::OpenAPI::fromJsonValue(m_windows, json[QString("windows")]);
    m_windows_isSet = !json[QString("windows")].isNull() && m_windows_isValid;
}

QString OAIUpdateConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_azure_virtual_machines.size() > 0) {
        obj.insert(QString("azureVirtualMachines"), ::OpenAPI::toJsonValue(m_azure_virtual_machines));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_r_linux.isSet()) {
        obj.insert(QString("linux"), ::OpenAPI::toJsonValue(m_r_linux));
    }
    if (m_non_azure_computer_names.size() > 0) {
        obj.insert(QString("nonAzureComputerNames"), ::OpenAPI::toJsonValue(m_non_azure_computer_names));
    }
    if (m_operating_system.isSet()) {
        obj.insert(QString("operatingSystem"), ::OpenAPI::toJsonValue(m_operating_system));
    }
    if (m_targets.isSet()) {
        obj.insert(QString("targets"), ::OpenAPI::toJsonValue(m_targets));
    }
    if (m_windows.isSet()) {
        obj.insert(QString("windows"), ::OpenAPI::toJsonValue(m_windows));
    }
    return obj;
}

QList<QString> OAIUpdateConfiguration::getAzureVirtualMachines() const {
    return m_azure_virtual_machines;
}
void OAIUpdateConfiguration::setAzureVirtualMachines(const QList<QString> &azure_virtual_machines) {
    m_azure_virtual_machines = azure_virtual_machines;
    m_azure_virtual_machines_isSet = true;
}

bool OAIUpdateConfiguration::is_azure_virtual_machines_Set() const{
    return m_azure_virtual_machines_isSet;
}

bool OAIUpdateConfiguration::is_azure_virtual_machines_Valid() const{
    return m_azure_virtual_machines_isValid;
}

QString OAIUpdateConfiguration::getDuration() const {
    return m_duration;
}
void OAIUpdateConfiguration::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIUpdateConfiguration::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIUpdateConfiguration::is_duration_Valid() const{
    return m_duration_isValid;
}

OAILinuxProperties OAIUpdateConfiguration::getRLinux() const {
    return m_r_linux;
}
void OAIUpdateConfiguration::setRLinux(const OAILinuxProperties &r_linux) {
    m_r_linux = r_linux;
    m_r_linux_isSet = true;
}

bool OAIUpdateConfiguration::is_r_linux_Set() const{
    return m_r_linux_isSet;
}

bool OAIUpdateConfiguration::is_r_linux_Valid() const{
    return m_r_linux_isValid;
}

QList<QString> OAIUpdateConfiguration::getNonAzureComputerNames() const {
    return m_non_azure_computer_names;
}
void OAIUpdateConfiguration::setNonAzureComputerNames(const QList<QString> &non_azure_computer_names) {
    m_non_azure_computer_names = non_azure_computer_names;
    m_non_azure_computer_names_isSet = true;
}

bool OAIUpdateConfiguration::is_non_azure_computer_names_Set() const{
    return m_non_azure_computer_names_isSet;
}

bool OAIUpdateConfiguration::is_non_azure_computer_names_Valid() const{
    return m_non_azure_computer_names_isValid;
}

OAIOperatingSystemType OAIUpdateConfiguration::getOperatingSystem() const {
    return m_operating_system;
}
void OAIUpdateConfiguration::setOperatingSystem(const OAIOperatingSystemType &operating_system) {
    m_operating_system = operating_system;
    m_operating_system_isSet = true;
}

bool OAIUpdateConfiguration::is_operating_system_Set() const{
    return m_operating_system_isSet;
}

bool OAIUpdateConfiguration::is_operating_system_Valid() const{
    return m_operating_system_isValid;
}

OAITargetProperties OAIUpdateConfiguration::getTargets() const {
    return m_targets;
}
void OAIUpdateConfiguration::setTargets(const OAITargetProperties &targets) {
    m_targets = targets;
    m_targets_isSet = true;
}

bool OAIUpdateConfiguration::is_targets_Set() const{
    return m_targets_isSet;
}

bool OAIUpdateConfiguration::is_targets_Valid() const{
    return m_targets_isValid;
}

OAIWindowsProperties OAIUpdateConfiguration::getWindows() const {
    return m_windows;
}
void OAIUpdateConfiguration::setWindows(const OAIWindowsProperties &windows) {
    m_windows = windows;
    m_windows_isSet = true;
}

bool OAIUpdateConfiguration::is_windows_Set() const{
    return m_windows_isSet;
}

bool OAIUpdateConfiguration::is_windows_Valid() const{
    return m_windows_isValid;
}

bool OAIUpdateConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_azure_virtual_machines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_linux.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_azure_computer_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_system.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_targets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_windows.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_operating_system_isValid && true;
}

} // namespace OpenAPI
