/**
 * Update Management
 * APIs for managing software update configurations.
 *
 * The version of the OpenAPI document: 2017-05-15-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduleProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduleProperties::OAIScheduleProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduleProperties::OAIScheduleProperties() {
    this->initializeModel();
}

OAIScheduleProperties::~OAIScheduleProperties() {}

void OAIScheduleProperties::initializeModel() {

    m_advanced_schedule_isSet = false;
    m_advanced_schedule_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_expiry_time_isSet = false;
    m_expiry_time_isValid = false;

    m_expiry_time_offset_minutes_isSet = false;
    m_expiry_time_offset_minutes_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_is_enabled_isSet = false;
    m_is_enabled_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_next_run_isSet = false;
    m_next_run_isValid = false;

    m_next_run_offset_minutes_isSet = false;
    m_next_run_offset_minutes_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_start_time_offset_minutes_isSet = false;
    m_start_time_offset_minutes_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;
}

void OAIScheduleProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduleProperties::fromJsonObject(QJsonObject json) {

    m_advanced_schedule_isValid = ::OpenAPI::fromJsonValue(m_advanced_schedule, json[QString("advancedSchedule")]);
    m_advanced_schedule_isSet = !json[QString("advancedSchedule")].isNull() && m_advanced_schedule_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_expiry_time_isValid = ::OpenAPI::fromJsonValue(m_expiry_time, json[QString("expiryTime")]);
    m_expiry_time_isSet = !json[QString("expiryTime")].isNull() && m_expiry_time_isValid;

    m_expiry_time_offset_minutes_isValid = ::OpenAPI::fromJsonValue(m_expiry_time_offset_minutes, json[QString("expiryTimeOffsetMinutes")]);
    m_expiry_time_offset_minutes_isSet = !json[QString("expiryTimeOffsetMinutes")].isNull() && m_expiry_time_offset_minutes_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_is_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_enabled, json[QString("isEnabled")]);
    m_is_enabled_isSet = !json[QString("isEnabled")].isNull() && m_is_enabled_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("lastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("lastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_next_run_isValid = ::OpenAPI::fromJsonValue(m_next_run, json[QString("nextRun")]);
    m_next_run_isSet = !json[QString("nextRun")].isNull() && m_next_run_isValid;

    m_next_run_offset_minutes_isValid = ::OpenAPI::fromJsonValue(m_next_run_offset_minutes, json[QString("nextRunOffsetMinutes")]);
    m_next_run_offset_minutes_isSet = !json[QString("nextRunOffsetMinutes")].isNull() && m_next_run_offset_minutes_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_start_time_offset_minutes_isValid = ::OpenAPI::fromJsonValue(m_start_time_offset_minutes, json[QString("startTimeOffsetMinutes")]);
    m_start_time_offset_minutes_isSet = !json[QString("startTimeOffsetMinutes")].isNull() && m_start_time_offset_minutes_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;
}

QString OAIScheduleProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduleProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_advanced_schedule.isSet()) {
        obj.insert(QString("advancedSchedule"), ::OpenAPI::toJsonValue(m_advanced_schedule));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_expiry_time_isSet) {
        obj.insert(QString("expiryTime"), ::OpenAPI::toJsonValue(m_expiry_time));
    }
    if (m_expiry_time_offset_minutes_isSet) {
        obj.insert(QString("expiryTimeOffsetMinutes"), ::OpenAPI::toJsonValue(m_expiry_time_offset_minutes));
    }
    if (m_frequency_isSet) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_is_enabled_isSet) {
        obj.insert(QString("isEnabled"), ::OpenAPI::toJsonValue(m_is_enabled));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("lastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_next_run_isSet) {
        obj.insert(QString("nextRun"), ::OpenAPI::toJsonValue(m_next_run));
    }
    if (m_next_run_offset_minutes_isSet) {
        obj.insert(QString("nextRunOffsetMinutes"), ::OpenAPI::toJsonValue(m_next_run_offset_minutes));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_start_time_offset_minutes_isSet) {
        obj.insert(QString("startTimeOffsetMinutes"), ::OpenAPI::toJsonValue(m_start_time_offset_minutes));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    return obj;
}

OAIAdvancedSchedule OAIScheduleProperties::getAdvancedSchedule() const {
    return m_advanced_schedule;
}
void OAIScheduleProperties::setAdvancedSchedule(const OAIAdvancedSchedule &advanced_schedule) {
    m_advanced_schedule = advanced_schedule;
    m_advanced_schedule_isSet = true;
}

bool OAIScheduleProperties::is_advanced_schedule_Set() const{
    return m_advanced_schedule_isSet;
}

bool OAIScheduleProperties::is_advanced_schedule_Valid() const{
    return m_advanced_schedule_isValid;
}

QDateTime OAIScheduleProperties::getCreationTime() const {
    return m_creation_time;
}
void OAIScheduleProperties::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIScheduleProperties::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIScheduleProperties::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIScheduleProperties::getDescription() const {
    return m_description;
}
void OAIScheduleProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIScheduleProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIScheduleProperties::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIScheduleProperties::getExpiryTime() const {
    return m_expiry_time;
}
void OAIScheduleProperties::setExpiryTime(const QDateTime &expiry_time) {
    m_expiry_time = expiry_time;
    m_expiry_time_isSet = true;
}

bool OAIScheduleProperties::is_expiry_time_Set() const{
    return m_expiry_time_isSet;
}

bool OAIScheduleProperties::is_expiry_time_Valid() const{
    return m_expiry_time_isValid;
}

double OAIScheduleProperties::getExpiryTimeOffsetMinutes() const {
    return m_expiry_time_offset_minutes;
}
void OAIScheduleProperties::setExpiryTimeOffsetMinutes(const double &expiry_time_offset_minutes) {
    m_expiry_time_offset_minutes = expiry_time_offset_minutes;
    m_expiry_time_offset_minutes_isSet = true;
}

bool OAIScheduleProperties::is_expiry_time_offset_minutes_Set() const{
    return m_expiry_time_offset_minutes_isSet;
}

bool OAIScheduleProperties::is_expiry_time_offset_minutes_Valid() const{
    return m_expiry_time_offset_minutes_isValid;
}

QString OAIScheduleProperties::getFrequency() const {
    return m_frequency;
}
void OAIScheduleProperties::setFrequency(const QString &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIScheduleProperties::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIScheduleProperties::is_frequency_Valid() const{
    return m_frequency_isValid;
}

qint32 OAIScheduleProperties::getInterval() const {
    return m_interval;
}
void OAIScheduleProperties::setInterval(const qint32 &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIScheduleProperties::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIScheduleProperties::is_interval_Valid() const{
    return m_interval_isValid;
}

bool OAIScheduleProperties::isIsEnabled() const {
    return m_is_enabled;
}
void OAIScheduleProperties::setIsEnabled(const bool &is_enabled) {
    m_is_enabled = is_enabled;
    m_is_enabled_isSet = true;
}

bool OAIScheduleProperties::is_is_enabled_Set() const{
    return m_is_enabled_isSet;
}

bool OAIScheduleProperties::is_is_enabled_Valid() const{
    return m_is_enabled_isValid;
}

QDateTime OAIScheduleProperties::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIScheduleProperties::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIScheduleProperties::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIScheduleProperties::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QDateTime OAIScheduleProperties::getNextRun() const {
    return m_next_run;
}
void OAIScheduleProperties::setNextRun(const QDateTime &next_run) {
    m_next_run = next_run;
    m_next_run_isSet = true;
}

bool OAIScheduleProperties::is_next_run_Set() const{
    return m_next_run_isSet;
}

bool OAIScheduleProperties::is_next_run_Valid() const{
    return m_next_run_isValid;
}

double OAIScheduleProperties::getNextRunOffsetMinutes() const {
    return m_next_run_offset_minutes;
}
void OAIScheduleProperties::setNextRunOffsetMinutes(const double &next_run_offset_minutes) {
    m_next_run_offset_minutes = next_run_offset_minutes;
    m_next_run_offset_minutes_isSet = true;
}

bool OAIScheduleProperties::is_next_run_offset_minutes_Set() const{
    return m_next_run_offset_minutes_isSet;
}

bool OAIScheduleProperties::is_next_run_offset_minutes_Valid() const{
    return m_next_run_offset_minutes_isValid;
}

QDateTime OAIScheduleProperties::getStartTime() const {
    return m_start_time;
}
void OAIScheduleProperties::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIScheduleProperties::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIScheduleProperties::is_start_time_Valid() const{
    return m_start_time_isValid;
}

double OAIScheduleProperties::getStartTimeOffsetMinutes() const {
    return m_start_time_offset_minutes;
}
void OAIScheduleProperties::setStartTimeOffsetMinutes(const double &start_time_offset_minutes) {
    m_start_time_offset_minutes = start_time_offset_minutes;
    m_start_time_offset_minutes_isSet = true;
}

bool OAIScheduleProperties::is_start_time_offset_minutes_Set() const{
    return m_start_time_offset_minutes_isSet;
}

bool OAIScheduleProperties::is_start_time_offset_minutes_Valid() const{
    return m_start_time_offset_minutes_isValid;
}

QString OAIScheduleProperties::getTimeZone() const {
    return m_time_zone;
}
void OAIScheduleProperties::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIScheduleProperties::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIScheduleProperties::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

bool OAIScheduleProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advanced_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_time_offset_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_run_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_run_offset_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_offset_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduleProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
