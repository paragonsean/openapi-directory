/**
 * Update Management
 * APIs for managing software update configurations.
 *
 * The version of the OpenAPI document: 2017-05-15-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILinuxProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILinuxProperties::OAILinuxProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILinuxProperties::OAILinuxProperties() {
    this->initializeModel();
}

OAILinuxProperties::~OAILinuxProperties() {}

void OAILinuxProperties::initializeModel() {

    m_excluded_package_name_masks_isSet = false;
    m_excluded_package_name_masks_isValid = false;

    m_included_package_classifications_isSet = false;
    m_included_package_classifications_isValid = false;

    m_included_package_name_masks_isSet = false;
    m_included_package_name_masks_isValid = false;

    m_reboot_setting_isSet = false;
    m_reboot_setting_isValid = false;
}

void OAILinuxProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILinuxProperties::fromJsonObject(QJsonObject json) {

    m_excluded_package_name_masks_isValid = ::OpenAPI::fromJsonValue(m_excluded_package_name_masks, json[QString("excludedPackageNameMasks")]);
    m_excluded_package_name_masks_isSet = !json[QString("excludedPackageNameMasks")].isNull() && m_excluded_package_name_masks_isValid;

    m_included_package_classifications_isValid = ::OpenAPI::fromJsonValue(m_included_package_classifications, json[QString("includedPackageClassifications")]);
    m_included_package_classifications_isSet = !json[QString("includedPackageClassifications")].isNull() && m_included_package_classifications_isValid;

    m_included_package_name_masks_isValid = ::OpenAPI::fromJsonValue(m_included_package_name_masks, json[QString("includedPackageNameMasks")]);
    m_included_package_name_masks_isSet = !json[QString("includedPackageNameMasks")].isNull() && m_included_package_name_masks_isValid;

    m_reboot_setting_isValid = ::OpenAPI::fromJsonValue(m_reboot_setting, json[QString("rebootSetting")]);
    m_reboot_setting_isSet = !json[QString("rebootSetting")].isNull() && m_reboot_setting_isValid;
}

QString OAILinuxProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILinuxProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_excluded_package_name_masks.size() > 0) {
        obj.insert(QString("excludedPackageNameMasks"), ::OpenAPI::toJsonValue(m_excluded_package_name_masks));
    }
    if (m_included_package_classifications_isSet) {
        obj.insert(QString("includedPackageClassifications"), ::OpenAPI::toJsonValue(m_included_package_classifications));
    }
    if (m_included_package_name_masks.size() > 0) {
        obj.insert(QString("includedPackageNameMasks"), ::OpenAPI::toJsonValue(m_included_package_name_masks));
    }
    if (m_reboot_setting_isSet) {
        obj.insert(QString("rebootSetting"), ::OpenAPI::toJsonValue(m_reboot_setting));
    }
    return obj;
}

QList<QString> OAILinuxProperties::getExcludedPackageNameMasks() const {
    return m_excluded_package_name_masks;
}
void OAILinuxProperties::setExcludedPackageNameMasks(const QList<QString> &excluded_package_name_masks) {
    m_excluded_package_name_masks = excluded_package_name_masks;
    m_excluded_package_name_masks_isSet = true;
}

bool OAILinuxProperties::is_excluded_package_name_masks_Set() const{
    return m_excluded_package_name_masks_isSet;
}

bool OAILinuxProperties::is_excluded_package_name_masks_Valid() const{
    return m_excluded_package_name_masks_isValid;
}

QString OAILinuxProperties::getIncludedPackageClassifications() const {
    return m_included_package_classifications;
}
void OAILinuxProperties::setIncludedPackageClassifications(const QString &included_package_classifications) {
    m_included_package_classifications = included_package_classifications;
    m_included_package_classifications_isSet = true;
}

bool OAILinuxProperties::is_included_package_classifications_Set() const{
    return m_included_package_classifications_isSet;
}

bool OAILinuxProperties::is_included_package_classifications_Valid() const{
    return m_included_package_classifications_isValid;
}

QList<QString> OAILinuxProperties::getIncludedPackageNameMasks() const {
    return m_included_package_name_masks;
}
void OAILinuxProperties::setIncludedPackageNameMasks(const QList<QString> &included_package_name_masks) {
    m_included_package_name_masks = included_package_name_masks;
    m_included_package_name_masks_isSet = true;
}

bool OAILinuxProperties::is_included_package_name_masks_Set() const{
    return m_included_package_name_masks_isSet;
}

bool OAILinuxProperties::is_included_package_name_masks_Valid() const{
    return m_included_package_name_masks_isValid;
}

QString OAILinuxProperties::getRebootSetting() const {
    return m_reboot_setting;
}
void OAILinuxProperties::setRebootSetting(const QString &reboot_setting) {
    m_reboot_setting = reboot_setting;
    m_reboot_setting_isSet = true;
}

bool OAILinuxProperties::is_reboot_setting_Set() const{
    return m_reboot_setting_isSet;
}

bool OAILinuxProperties::is_reboot_setting_Valid() const{
    return m_reboot_setting_isValid;
}

bool OAILinuxProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_excluded_package_name_masks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_package_classifications_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_package_name_masks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reboot_setting_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILinuxProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
