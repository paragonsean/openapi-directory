/**
 * Update Management
 * APIs for managing software update configurations.
 *
 * The version of the OpenAPI document: 2017-05-15-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISoftwareUpdateConfigurationApi_H
#define OAI_OAISoftwareUpdateConfigurationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAISoftwareUpdateConfiguration.h"
#include "OAISoftwareUpdateConfigurationListResult.h"
#include "OAISoftwareUpdateConfigurations_List_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISoftwareUpdateConfigurationApi : public QObject {
    Q_OBJECT

public:
    OAISoftwareUpdateConfigurationApi(const int timeOut = 0);
    ~OAISoftwareUpdateConfigurationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  software_update_configuration_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAISoftwareUpdateConfiguration [required]
    * @param[in]  client_request_id QString [optional]
    */
    virtual void softwareUpdateConfigurationsCreate(const QString &subscription_id, const QString &resource_group_name, const QString &automation_account_name, const QString &software_update_configuration_name, const QString &api_version, const OAISoftwareUpdateConfiguration &parameters, const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  software_update_configuration_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  client_request_id QString [optional]
    */
    virtual void softwareUpdateConfigurationsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &automation_account_name, const QString &software_update_configuration_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  software_update_configuration_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  client_request_id QString [optional]
    */
    virtual void softwareUpdateConfigurationsGetByName(const QString &subscription_id, const QString &resource_group_name, const QString &automation_account_name, const QString &software_update_configuration_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void softwareUpdateConfigurationsList(const QString &subscription_id, const QString &resource_group_name, const QString &automation_account_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void softwareUpdateConfigurationsCreateCallback(OAIHttpRequestWorker *worker);
    void softwareUpdateConfigurationsDeleteCallback(OAIHttpRequestWorker *worker);
    void softwareUpdateConfigurationsGetByNameCallback(OAIHttpRequestWorker *worker);
    void softwareUpdateConfigurationsListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void softwareUpdateConfigurationsCreateSignal(OAISoftwareUpdateConfiguration summary);
    void softwareUpdateConfigurationsDeleteSignal();
    void softwareUpdateConfigurationsGetByNameSignal(OAISoftwareUpdateConfiguration summary);
    void softwareUpdateConfigurationsListSignal(OAISoftwareUpdateConfigurationListResult summary);


    void softwareUpdateConfigurationsCreateSignalFull(OAIHttpRequestWorker *worker, OAISoftwareUpdateConfiguration summary);
    void softwareUpdateConfigurationsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void softwareUpdateConfigurationsGetByNameSignalFull(OAIHttpRequestWorker *worker, OAISoftwareUpdateConfiguration summary);
    void softwareUpdateConfigurationsListSignalFull(OAIHttpRequestWorker *worker, OAISoftwareUpdateConfigurationListResult summary);

    Q_DECL_DEPRECATED_X("Use softwareUpdateConfigurationsCreateSignalError() instead")
    void softwareUpdateConfigurationsCreateSignalE(OAISoftwareUpdateConfiguration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void softwareUpdateConfigurationsCreateSignalError(OAISoftwareUpdateConfiguration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use softwareUpdateConfigurationsDeleteSignalError() instead")
    void softwareUpdateConfigurationsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void softwareUpdateConfigurationsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use softwareUpdateConfigurationsGetByNameSignalError() instead")
    void softwareUpdateConfigurationsGetByNameSignalE(OAISoftwareUpdateConfiguration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void softwareUpdateConfigurationsGetByNameSignalError(OAISoftwareUpdateConfiguration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use softwareUpdateConfigurationsListSignalError() instead")
    void softwareUpdateConfigurationsListSignalE(OAISoftwareUpdateConfigurationListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void softwareUpdateConfigurationsListSignalError(OAISoftwareUpdateConfigurationListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use softwareUpdateConfigurationsCreateSignalErrorFull() instead")
    void softwareUpdateConfigurationsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void softwareUpdateConfigurationsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use softwareUpdateConfigurationsDeleteSignalErrorFull() instead")
    void softwareUpdateConfigurationsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void softwareUpdateConfigurationsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use softwareUpdateConfigurationsGetByNameSignalErrorFull() instead")
    void softwareUpdateConfigurationsGetByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void softwareUpdateConfigurationsGetByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use softwareUpdateConfigurationsListSignalErrorFull() instead")
    void softwareUpdateConfigurationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void softwareUpdateConfigurationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
