/**
 * Update Management
 * APIs for managing software update configurations.
 *
 * The version of the OpenAPI document: 2017-05-15-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateConfiguration.h
 *
 * Update specific properties of the software update configuration.
 */

#ifndef OAIUpdateConfiguration_H
#define OAIUpdateConfiguration_H

#include <QJsonObject>

#include "OAILinuxProperties.h"
#include "OAIOperatingSystemType.h"
#include "OAITargetProperties.h"
#include "OAIWindowsProperties.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILinuxProperties;
class OAITargetProperties;
class OAIWindowsProperties;

class OAIUpdateConfiguration : public OAIObject {
public:
    OAIUpdateConfiguration();
    OAIUpdateConfiguration(QString json);
    ~OAIUpdateConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAzureVirtualMachines() const;
    void setAzureVirtualMachines(const QList<QString> &azure_virtual_machines);
    bool is_azure_virtual_machines_Set() const;
    bool is_azure_virtual_machines_Valid() const;

    QString getDuration() const;
    void setDuration(const QString &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    OAILinuxProperties getRLinux() const;
    void setRLinux(const OAILinuxProperties &r_linux);
    bool is_r_linux_Set() const;
    bool is_r_linux_Valid() const;

    QList<QString> getNonAzureComputerNames() const;
    void setNonAzureComputerNames(const QList<QString> &non_azure_computer_names);
    bool is_non_azure_computer_names_Set() const;
    bool is_non_azure_computer_names_Valid() const;

    OAIOperatingSystemType getOperatingSystem() const;
    void setOperatingSystem(const OAIOperatingSystemType &operating_system);
    bool is_operating_system_Set() const;
    bool is_operating_system_Valid() const;

    OAITargetProperties getTargets() const;
    void setTargets(const OAITargetProperties &targets);
    bool is_targets_Set() const;
    bool is_targets_Valid() const;

    OAIWindowsProperties getWindows() const;
    void setWindows(const OAIWindowsProperties &windows);
    bool is_windows_Set() const;
    bool is_windows_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_azure_virtual_machines;
    bool m_azure_virtual_machines_isSet;
    bool m_azure_virtual_machines_isValid;

    QString m_duration;
    bool m_duration_isSet;
    bool m_duration_isValid;

    OAILinuxProperties m_r_linux;
    bool m_r_linux_isSet;
    bool m_r_linux_isValid;

    QList<QString> m_non_azure_computer_names;
    bool m_non_azure_computer_names_isSet;
    bool m_non_azure_computer_names_isValid;

    OAIOperatingSystemType m_operating_system;
    bool m_operating_system_isSet;
    bool m_operating_system_isValid;

    OAITargetProperties m_targets;
    bool m_targets_isSet;
    bool m_targets_isValid;

    OAIWindowsProperties m_windows;
    bool m_windows_isSet;
    bool m_windows_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateConfiguration)

#endif // OAIUpdateConfiguration_H
