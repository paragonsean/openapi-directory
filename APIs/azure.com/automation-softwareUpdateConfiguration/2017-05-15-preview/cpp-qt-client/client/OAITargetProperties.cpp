/**
 * Update Management
 * APIs for managing software update configurations.
 *
 * The version of the OpenAPI document: 2017-05-15-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITargetProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITargetProperties::OAITargetProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITargetProperties::OAITargetProperties() {
    this->initializeModel();
}

OAITargetProperties::~OAITargetProperties() {}

void OAITargetProperties::initializeModel() {

    m_azure_queries_isSet = false;
    m_azure_queries_isValid = false;

    m_non_azure_queries_isSet = false;
    m_non_azure_queries_isValid = false;
}

void OAITargetProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITargetProperties::fromJsonObject(QJsonObject json) {

    m_azure_queries_isValid = ::OpenAPI::fromJsonValue(m_azure_queries, json[QString("azureQueries")]);
    m_azure_queries_isSet = !json[QString("azureQueries")].isNull() && m_azure_queries_isValid;

    m_non_azure_queries_isValid = ::OpenAPI::fromJsonValue(m_non_azure_queries, json[QString("nonAzureQueries")]);
    m_non_azure_queries_isSet = !json[QString("nonAzureQueries")].isNull() && m_non_azure_queries_isValid;
}

QString OAITargetProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITargetProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_azure_queries.size() > 0) {
        obj.insert(QString("azureQueries"), ::OpenAPI::toJsonValue(m_azure_queries));
    }
    if (m_non_azure_queries.size() > 0) {
        obj.insert(QString("nonAzureQueries"), ::OpenAPI::toJsonValue(m_non_azure_queries));
    }
    return obj;
}

QList<OAIAzureQueryProperties> OAITargetProperties::getAzureQueries() const {
    return m_azure_queries;
}
void OAITargetProperties::setAzureQueries(const QList<OAIAzureQueryProperties> &azure_queries) {
    m_azure_queries = azure_queries;
    m_azure_queries_isSet = true;
}

bool OAITargetProperties::is_azure_queries_Set() const{
    return m_azure_queries_isSet;
}

bool OAITargetProperties::is_azure_queries_Valid() const{
    return m_azure_queries_isValid;
}

QList<OAINonAzureQueryProperties> OAITargetProperties::getNonAzureQueries() const {
    return m_non_azure_queries;
}
void OAITargetProperties::setNonAzureQueries(const QList<OAINonAzureQueryProperties> &non_azure_queries) {
    m_non_azure_queries = non_azure_queries;
    m_non_azure_queries_isSet = true;
}

bool OAITargetProperties::is_non_azure_queries_Set() const{
    return m_non_azure_queries_isSet;
}

bool OAITargetProperties::is_non_azure_queries_Valid() const{
    return m_non_azure_queries_isValid;
}

bool OAITargetProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_azure_queries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_azure_queries.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITargetProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
