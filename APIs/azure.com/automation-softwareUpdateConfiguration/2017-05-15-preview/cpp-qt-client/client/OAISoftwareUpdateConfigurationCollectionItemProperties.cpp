/**
 * Update Management
 * APIs for managing software update configurations.
 *
 * The version of the OpenAPI document: 2017-05-15-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISoftwareUpdateConfigurationCollectionItemProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISoftwareUpdateConfigurationCollectionItemProperties::OAISoftwareUpdateConfigurationCollectionItemProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISoftwareUpdateConfigurationCollectionItemProperties::OAISoftwareUpdateConfigurationCollectionItemProperties() {
    this->initializeModel();
}

OAISoftwareUpdateConfigurationCollectionItemProperties::~OAISoftwareUpdateConfigurationCollectionItemProperties() {}

void OAISoftwareUpdateConfigurationCollectionItemProperties::initializeModel() {

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_next_run_isSet = false;
    m_next_run_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_update_configuration_isSet = false;
    m_update_configuration_isValid = false;
}

void OAISoftwareUpdateConfigurationCollectionItemProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISoftwareUpdateConfigurationCollectionItemProperties::fromJsonObject(QJsonObject json) {

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("lastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("lastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_next_run_isValid = ::OpenAPI::fromJsonValue(m_next_run, json[QString("nextRun")]);
    m_next_run_isSet = !json[QString("nextRun")].isNull() && m_next_run_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_update_configuration_isValid = ::OpenAPI::fromJsonValue(m_update_configuration, json[QString("updateConfiguration")]);
    m_update_configuration_isSet = !json[QString("updateConfiguration")].isNull() && m_update_configuration_isValid;
}

QString OAISoftwareUpdateConfigurationCollectionItemProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISoftwareUpdateConfigurationCollectionItemProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_frequency_isSet) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("lastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_next_run_isSet) {
        obj.insert(QString("nextRun"), ::OpenAPI::toJsonValue(m_next_run));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_update_configuration.isSet()) {
        obj.insert(QString("updateConfiguration"), ::OpenAPI::toJsonValue(m_update_configuration));
    }
    return obj;
}

QDateTime OAISoftwareUpdateConfigurationCollectionItemProperties::getCreationTime() const {
    return m_creation_time;
}
void OAISoftwareUpdateConfigurationCollectionItemProperties::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAISoftwareUpdateConfigurationCollectionItemProperties::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAISoftwareUpdateConfigurationCollectionItemProperties::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAISoftwareUpdateConfigurationCollectionItemProperties::getFrequency() const {
    return m_frequency;
}
void OAISoftwareUpdateConfigurationCollectionItemProperties::setFrequency(const QString &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAISoftwareUpdateConfigurationCollectionItemProperties::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAISoftwareUpdateConfigurationCollectionItemProperties::is_frequency_Valid() const{
    return m_frequency_isValid;
}

QDateTime OAISoftwareUpdateConfigurationCollectionItemProperties::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAISoftwareUpdateConfigurationCollectionItemProperties::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAISoftwareUpdateConfigurationCollectionItemProperties::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAISoftwareUpdateConfigurationCollectionItemProperties::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QDateTime OAISoftwareUpdateConfigurationCollectionItemProperties::getNextRun() const {
    return m_next_run;
}
void OAISoftwareUpdateConfigurationCollectionItemProperties::setNextRun(const QDateTime &next_run) {
    m_next_run = next_run;
    m_next_run_isSet = true;
}

bool OAISoftwareUpdateConfigurationCollectionItemProperties::is_next_run_Set() const{
    return m_next_run_isSet;
}

bool OAISoftwareUpdateConfigurationCollectionItemProperties::is_next_run_Valid() const{
    return m_next_run_isValid;
}

QString OAISoftwareUpdateConfigurationCollectionItemProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAISoftwareUpdateConfigurationCollectionItemProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAISoftwareUpdateConfigurationCollectionItemProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAISoftwareUpdateConfigurationCollectionItemProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QDateTime OAISoftwareUpdateConfigurationCollectionItemProperties::getStartTime() const {
    return m_start_time;
}
void OAISoftwareUpdateConfigurationCollectionItemProperties::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAISoftwareUpdateConfigurationCollectionItemProperties::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAISoftwareUpdateConfigurationCollectionItemProperties::is_start_time_Valid() const{
    return m_start_time_isValid;
}

OAICollectionItemUpdateConfiguration OAISoftwareUpdateConfigurationCollectionItemProperties::getUpdateConfiguration() const {
    return m_update_configuration;
}
void OAISoftwareUpdateConfigurationCollectionItemProperties::setUpdateConfiguration(const OAICollectionItemUpdateConfiguration &update_configuration) {
    m_update_configuration = update_configuration;
    m_update_configuration_isSet = true;
}

bool OAISoftwareUpdateConfigurationCollectionItemProperties::is_update_configuration_Set() const{
    return m_update_configuration_isSet;
}

bool OAISoftwareUpdateConfigurationCollectionItemProperties::is_update_configuration_Valid() const{
    return m_update_configuration_isValid;
}

bool OAISoftwareUpdateConfigurationCollectionItemProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_run_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISoftwareUpdateConfigurationCollectionItemProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
