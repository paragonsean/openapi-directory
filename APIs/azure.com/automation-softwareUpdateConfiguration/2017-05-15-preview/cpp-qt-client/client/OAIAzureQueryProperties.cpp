/**
 * Update Management
 * APIs for managing software update configurations.
 *
 * The version of the OpenAPI document: 2017-05-15-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureQueryProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureQueryProperties::OAIAzureQueryProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureQueryProperties::OAIAzureQueryProperties() {
    this->initializeModel();
}

OAIAzureQueryProperties::~OAIAzureQueryProperties() {}

void OAIAzureQueryProperties::initializeModel() {

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_tag_settings_isSet = false;
    m_tag_settings_isValid = false;
}

void OAIAzureQueryProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureQueryProperties::fromJsonObject(QJsonObject json) {

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_tag_settings_isValid = ::OpenAPI::fromJsonValue(m_tag_settings, json[QString("tagSettings")]);
    m_tag_settings_isSet = !json[QString("tagSettings")].isNull() && m_tag_settings_isValid;
}

QString OAIAzureQueryProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureQueryProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_scope.size() > 0) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_tag_settings.isSet()) {
        obj.insert(QString("tagSettings"), ::OpenAPI::toJsonValue(m_tag_settings));
    }
    return obj;
}

QList<QString> OAIAzureQueryProperties::getLocations() const {
    return m_locations;
}
void OAIAzureQueryProperties::setLocations(const QList<QString> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIAzureQueryProperties::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIAzureQueryProperties::is_locations_Valid() const{
    return m_locations_isValid;
}

QList<QString> OAIAzureQueryProperties::getScope() const {
    return m_scope;
}
void OAIAzureQueryProperties::setScope(const QList<QString> &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIAzureQueryProperties::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIAzureQueryProperties::is_scope_Valid() const{
    return m_scope_isValid;
}

OAITagSettingsProperties OAIAzureQueryProperties::getTagSettings() const {
    return m_tag_settings;
}
void OAIAzureQueryProperties::setTagSettings(const OAITagSettingsProperties &tag_settings) {
    m_tag_settings = tag_settings;
    m_tag_settings_isSet = true;
}

bool OAIAzureQueryProperties::is_tag_settings_Set() const{
    return m_tag_settings_isSet;
}

bool OAIAzureQueryProperties::is_tag_settings_Valid() const{
    return m_tag_settings_isValid;
}

bool OAIAzureQueryProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureQueryProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
