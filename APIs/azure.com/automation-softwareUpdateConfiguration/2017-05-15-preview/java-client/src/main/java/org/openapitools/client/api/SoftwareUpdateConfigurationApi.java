/*
 * Update Management
 * APIs for managing software update configurations.
 *
 * The version of the OpenAPI document: 2017-05-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.SoftwareUpdateConfiguration;
import org.openapitools.client.model.SoftwareUpdateConfigurationListResult;
import org.openapitools.client.model.SoftwareUpdateConfigurationsListDefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SoftwareUpdateConfigurationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SoftwareUpdateConfigurationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SoftwareUpdateConfigurationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for softwareUpdateConfigurationsCreate
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param softwareUpdateConfigurationName The name of the software update configuration to be created. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters Request body. (required)
     * @param clientRequestId Identifies this specific client request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Software update configuration with the same name and properties already exists. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Software update configuration is created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/softwareupdateconfigurationoperations"> Documentation</a>
     */
    public okhttp3.Call softwareUpdateConfigurationsCreateCall(String subscriptionId, String resourceGroupName, String automationAccountName, String softwareUpdateConfigurationName, String apiVersion, SoftwareUpdateConfiguration parameters, String clientRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/softwareUpdateConfigurations/{softwareUpdateConfigurationName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "automationAccountName" + "}", localVarApiClient.escapeString(automationAccountName.toString()))
            .replace("{" + "softwareUpdateConfigurationName" + "}", localVarApiClient.escapeString(softwareUpdateConfigurationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (clientRequestId != null) {
            localVarHeaderParams.put("clientRequestId", localVarApiClient.parameterToString(clientRequestId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call softwareUpdateConfigurationsCreateValidateBeforeCall(String subscriptionId, String resourceGroupName, String automationAccountName, String softwareUpdateConfigurationName, String apiVersion, SoftwareUpdateConfiguration parameters, String clientRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling softwareUpdateConfigurationsCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling softwareUpdateConfigurationsCreate(Async)");
        }

        // verify the required parameter 'automationAccountName' is set
        if (automationAccountName == null) {
            throw new ApiException("Missing the required parameter 'automationAccountName' when calling softwareUpdateConfigurationsCreate(Async)");
        }

        // verify the required parameter 'softwareUpdateConfigurationName' is set
        if (softwareUpdateConfigurationName == null) {
            throw new ApiException("Missing the required parameter 'softwareUpdateConfigurationName' when calling softwareUpdateConfigurationsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling softwareUpdateConfigurationsCreate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling softwareUpdateConfigurationsCreate(Async)");
        }

        return softwareUpdateConfigurationsCreateCall(subscriptionId, resourceGroupName, automationAccountName, softwareUpdateConfigurationName, apiVersion, parameters, clientRequestId, _callback);

    }

    /**
     * 
     * Create a new software update configuration with the name given in the URI.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param softwareUpdateConfigurationName The name of the software update configuration to be created. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters Request body. (required)
     * @param clientRequestId Identifies this specific client request. (optional)
     * @return SoftwareUpdateConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Software update configuration with the same name and properties already exists. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Software update configuration is created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/softwareupdateconfigurationoperations"> Documentation</a>
     */
    public SoftwareUpdateConfiguration softwareUpdateConfigurationsCreate(String subscriptionId, String resourceGroupName, String automationAccountName, String softwareUpdateConfigurationName, String apiVersion, SoftwareUpdateConfiguration parameters, String clientRequestId) throws ApiException {
        ApiResponse<SoftwareUpdateConfiguration> localVarResp = softwareUpdateConfigurationsCreateWithHttpInfo(subscriptionId, resourceGroupName, automationAccountName, softwareUpdateConfigurationName, apiVersion, parameters, clientRequestId);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new software update configuration with the name given in the URI.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param softwareUpdateConfigurationName The name of the software update configuration to be created. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters Request body. (required)
     * @param clientRequestId Identifies this specific client request. (optional)
     * @return ApiResponse&lt;SoftwareUpdateConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Software update configuration with the same name and properties already exists. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Software update configuration is created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/softwareupdateconfigurationoperations"> Documentation</a>
     */
    public ApiResponse<SoftwareUpdateConfiguration> softwareUpdateConfigurationsCreateWithHttpInfo(String subscriptionId, String resourceGroupName, String automationAccountName, String softwareUpdateConfigurationName, String apiVersion, SoftwareUpdateConfiguration parameters, String clientRequestId) throws ApiException {
        okhttp3.Call localVarCall = softwareUpdateConfigurationsCreateValidateBeforeCall(subscriptionId, resourceGroupName, automationAccountName, softwareUpdateConfigurationName, apiVersion, parameters, clientRequestId, null);
        Type localVarReturnType = new TypeToken<SoftwareUpdateConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new software update configuration with the name given in the URI.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param softwareUpdateConfigurationName The name of the software update configuration to be created. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters Request body. (required)
     * @param clientRequestId Identifies this specific client request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Software update configuration with the same name and properties already exists. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Software update configuration is created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/softwareupdateconfigurationoperations"> Documentation</a>
     */
    public okhttp3.Call softwareUpdateConfigurationsCreateAsync(String subscriptionId, String resourceGroupName, String automationAccountName, String softwareUpdateConfigurationName, String apiVersion, SoftwareUpdateConfiguration parameters, String clientRequestId, final ApiCallback<SoftwareUpdateConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = softwareUpdateConfigurationsCreateValidateBeforeCall(subscriptionId, resourceGroupName, automationAccountName, softwareUpdateConfigurationName, apiVersion, parameters, clientRequestId, _callback);
        Type localVarReturnType = new TypeToken<SoftwareUpdateConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for softwareUpdateConfigurationsDelete
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param softwareUpdateConfigurationName The name of the software update configuration to be created. (required)
     * @param apiVersion Client Api Version. (required)
     * @param clientRequestId Identifies this specific client request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The software update configuration has been deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The software update configuration does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/softwareupdateconfigurationoperations"> Documentation</a>
     */
    public okhttp3.Call softwareUpdateConfigurationsDeleteCall(String subscriptionId, String resourceGroupName, String automationAccountName, String softwareUpdateConfigurationName, String apiVersion, String clientRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/softwareUpdateConfigurations/{softwareUpdateConfigurationName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "automationAccountName" + "}", localVarApiClient.escapeString(automationAccountName.toString()))
            .replace("{" + "softwareUpdateConfigurationName" + "}", localVarApiClient.escapeString(softwareUpdateConfigurationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (clientRequestId != null) {
            localVarHeaderParams.put("clientRequestId", localVarApiClient.parameterToString(clientRequestId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call softwareUpdateConfigurationsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String automationAccountName, String softwareUpdateConfigurationName, String apiVersion, String clientRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling softwareUpdateConfigurationsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling softwareUpdateConfigurationsDelete(Async)");
        }

        // verify the required parameter 'automationAccountName' is set
        if (automationAccountName == null) {
            throw new ApiException("Missing the required parameter 'automationAccountName' when calling softwareUpdateConfigurationsDelete(Async)");
        }

        // verify the required parameter 'softwareUpdateConfigurationName' is set
        if (softwareUpdateConfigurationName == null) {
            throw new ApiException("Missing the required parameter 'softwareUpdateConfigurationName' when calling softwareUpdateConfigurationsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling softwareUpdateConfigurationsDelete(Async)");
        }

        return softwareUpdateConfigurationsDeleteCall(subscriptionId, resourceGroupName, automationAccountName, softwareUpdateConfigurationName, apiVersion, clientRequestId, _callback);

    }

    /**
     * 
     * delete a specific software update configuration.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param softwareUpdateConfigurationName The name of the software update configuration to be created. (required)
     * @param apiVersion Client Api Version. (required)
     * @param clientRequestId Identifies this specific client request. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The software update configuration has been deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The software update configuration does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/softwareupdateconfigurationoperations"> Documentation</a>
     */
    public void softwareUpdateConfigurationsDelete(String subscriptionId, String resourceGroupName, String automationAccountName, String softwareUpdateConfigurationName, String apiVersion, String clientRequestId) throws ApiException {
        softwareUpdateConfigurationsDeleteWithHttpInfo(subscriptionId, resourceGroupName, automationAccountName, softwareUpdateConfigurationName, apiVersion, clientRequestId);
    }

    /**
     * 
     * delete a specific software update configuration.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param softwareUpdateConfigurationName The name of the software update configuration to be created. (required)
     * @param apiVersion Client Api Version. (required)
     * @param clientRequestId Identifies this specific client request. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The software update configuration has been deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The software update configuration does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/softwareupdateconfigurationoperations"> Documentation</a>
     */
    public ApiResponse<Void> softwareUpdateConfigurationsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String automationAccountName, String softwareUpdateConfigurationName, String apiVersion, String clientRequestId) throws ApiException {
        okhttp3.Call localVarCall = softwareUpdateConfigurationsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, automationAccountName, softwareUpdateConfigurationName, apiVersion, clientRequestId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * delete a specific software update configuration.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param softwareUpdateConfigurationName The name of the software update configuration to be created. (required)
     * @param apiVersion Client Api Version. (required)
     * @param clientRequestId Identifies this specific client request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The software update configuration has been deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The software update configuration does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/softwareupdateconfigurationoperations"> Documentation</a>
     */
    public okhttp3.Call softwareUpdateConfigurationsDeleteAsync(String subscriptionId, String resourceGroupName, String automationAccountName, String softwareUpdateConfigurationName, String apiVersion, String clientRequestId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = softwareUpdateConfigurationsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, automationAccountName, softwareUpdateConfigurationName, apiVersion, clientRequestId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for softwareUpdateConfigurationsGetByName
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param softwareUpdateConfigurationName The name of the software update configuration to be created. (required)
     * @param apiVersion Client Api Version. (required)
     * @param clientRequestId Identifies this specific client request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single software update configuration. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/softwareupdateconfigurationoperations"> Documentation</a>
     */
    public okhttp3.Call softwareUpdateConfigurationsGetByNameCall(String subscriptionId, String resourceGroupName, String automationAccountName, String softwareUpdateConfigurationName, String apiVersion, String clientRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/softwareUpdateConfigurations/{softwareUpdateConfigurationName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "automationAccountName" + "}", localVarApiClient.escapeString(automationAccountName.toString()))
            .replace("{" + "softwareUpdateConfigurationName" + "}", localVarApiClient.escapeString(softwareUpdateConfigurationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (clientRequestId != null) {
            localVarHeaderParams.put("clientRequestId", localVarApiClient.parameterToString(clientRequestId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call softwareUpdateConfigurationsGetByNameValidateBeforeCall(String subscriptionId, String resourceGroupName, String automationAccountName, String softwareUpdateConfigurationName, String apiVersion, String clientRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling softwareUpdateConfigurationsGetByName(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling softwareUpdateConfigurationsGetByName(Async)");
        }

        // verify the required parameter 'automationAccountName' is set
        if (automationAccountName == null) {
            throw new ApiException("Missing the required parameter 'automationAccountName' when calling softwareUpdateConfigurationsGetByName(Async)");
        }

        // verify the required parameter 'softwareUpdateConfigurationName' is set
        if (softwareUpdateConfigurationName == null) {
            throw new ApiException("Missing the required parameter 'softwareUpdateConfigurationName' when calling softwareUpdateConfigurationsGetByName(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling softwareUpdateConfigurationsGetByName(Async)");
        }

        return softwareUpdateConfigurationsGetByNameCall(subscriptionId, resourceGroupName, automationAccountName, softwareUpdateConfigurationName, apiVersion, clientRequestId, _callback);

    }

    /**
     * 
     * Get a single software update configuration by name.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param softwareUpdateConfigurationName The name of the software update configuration to be created. (required)
     * @param apiVersion Client Api Version. (required)
     * @param clientRequestId Identifies this specific client request. (optional)
     * @return SoftwareUpdateConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single software update configuration. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/softwareupdateconfigurationoperations"> Documentation</a>
     */
    public SoftwareUpdateConfiguration softwareUpdateConfigurationsGetByName(String subscriptionId, String resourceGroupName, String automationAccountName, String softwareUpdateConfigurationName, String apiVersion, String clientRequestId) throws ApiException {
        ApiResponse<SoftwareUpdateConfiguration> localVarResp = softwareUpdateConfigurationsGetByNameWithHttpInfo(subscriptionId, resourceGroupName, automationAccountName, softwareUpdateConfigurationName, apiVersion, clientRequestId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a single software update configuration by name.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param softwareUpdateConfigurationName The name of the software update configuration to be created. (required)
     * @param apiVersion Client Api Version. (required)
     * @param clientRequestId Identifies this specific client request. (optional)
     * @return ApiResponse&lt;SoftwareUpdateConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single software update configuration. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/softwareupdateconfigurationoperations"> Documentation</a>
     */
    public ApiResponse<SoftwareUpdateConfiguration> softwareUpdateConfigurationsGetByNameWithHttpInfo(String subscriptionId, String resourceGroupName, String automationAccountName, String softwareUpdateConfigurationName, String apiVersion, String clientRequestId) throws ApiException {
        okhttp3.Call localVarCall = softwareUpdateConfigurationsGetByNameValidateBeforeCall(subscriptionId, resourceGroupName, automationAccountName, softwareUpdateConfigurationName, apiVersion, clientRequestId, null);
        Type localVarReturnType = new TypeToken<SoftwareUpdateConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a single software update configuration by name.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param softwareUpdateConfigurationName The name of the software update configuration to be created. (required)
     * @param apiVersion Client Api Version. (required)
     * @param clientRequestId Identifies this specific client request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single software update configuration. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/softwareupdateconfigurationoperations"> Documentation</a>
     */
    public okhttp3.Call softwareUpdateConfigurationsGetByNameAsync(String subscriptionId, String resourceGroupName, String automationAccountName, String softwareUpdateConfigurationName, String apiVersion, String clientRequestId, final ApiCallback<SoftwareUpdateConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = softwareUpdateConfigurationsGetByNameValidateBeforeCall(subscriptionId, resourceGroupName, automationAccountName, softwareUpdateConfigurationName, apiVersion, clientRequestId, _callback);
        Type localVarReturnType = new TypeToken<SoftwareUpdateConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for softwareUpdateConfigurationsList
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param apiVersion Client Api Version. (required)
     * @param clientRequestId Identifies this specific client request. (optional)
     * @param $filter The filter to apply on the operation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return list of software update configurations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/softwareupdateconfigurationoperations"> Documentation</a>
     */
    public okhttp3.Call softwareUpdateConfigurationsListCall(String subscriptionId, String resourceGroupName, String automationAccountName, String apiVersion, String clientRequestId, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/softwareUpdateConfigurations"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "automationAccountName" + "}", localVarApiClient.escapeString(automationAccountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (clientRequestId != null) {
            localVarHeaderParams.put("clientRequestId", localVarApiClient.parameterToString(clientRequestId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call softwareUpdateConfigurationsListValidateBeforeCall(String subscriptionId, String resourceGroupName, String automationAccountName, String apiVersion, String clientRequestId, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling softwareUpdateConfigurationsList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling softwareUpdateConfigurationsList(Async)");
        }

        // verify the required parameter 'automationAccountName' is set
        if (automationAccountName == null) {
            throw new ApiException("Missing the required parameter 'automationAccountName' when calling softwareUpdateConfigurationsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling softwareUpdateConfigurationsList(Async)");
        }

        return softwareUpdateConfigurationsListCall(subscriptionId, resourceGroupName, automationAccountName, apiVersion, clientRequestId, $filter, _callback);

    }

    /**
     * 
     * Get all software update configurations for the account.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param apiVersion Client Api Version. (required)
     * @param clientRequestId Identifies this specific client request. (optional)
     * @param $filter The filter to apply on the operation. (optional)
     * @return SoftwareUpdateConfigurationListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return list of software update configurations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/softwareupdateconfigurationoperations"> Documentation</a>
     */
    public SoftwareUpdateConfigurationListResult softwareUpdateConfigurationsList(String subscriptionId, String resourceGroupName, String automationAccountName, String apiVersion, String clientRequestId, String $filter) throws ApiException {
        ApiResponse<SoftwareUpdateConfigurationListResult> localVarResp = softwareUpdateConfigurationsListWithHttpInfo(subscriptionId, resourceGroupName, automationAccountName, apiVersion, clientRequestId, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Get all software update configurations for the account.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param apiVersion Client Api Version. (required)
     * @param clientRequestId Identifies this specific client request. (optional)
     * @param $filter The filter to apply on the operation. (optional)
     * @return ApiResponse&lt;SoftwareUpdateConfigurationListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return list of software update configurations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/softwareupdateconfigurationoperations"> Documentation</a>
     */
    public ApiResponse<SoftwareUpdateConfigurationListResult> softwareUpdateConfigurationsListWithHttpInfo(String subscriptionId, String resourceGroupName, String automationAccountName, String apiVersion, String clientRequestId, String $filter) throws ApiException {
        okhttp3.Call localVarCall = softwareUpdateConfigurationsListValidateBeforeCall(subscriptionId, resourceGroupName, automationAccountName, apiVersion, clientRequestId, $filter, null);
        Type localVarReturnType = new TypeToken<SoftwareUpdateConfigurationListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all software update configurations for the account.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param apiVersion Client Api Version. (required)
     * @param clientRequestId Identifies this specific client request. (optional)
     * @param $filter The filter to apply on the operation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return list of software update configurations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/softwareupdateconfigurationoperations"> Documentation</a>
     */
    public okhttp3.Call softwareUpdateConfigurationsListAsync(String subscriptionId, String resourceGroupName, String automationAccountName, String apiVersion, String clientRequestId, String $filter, final ApiCallback<SoftwareUpdateConfigurationListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = softwareUpdateConfigurationsListValidateBeforeCall(subscriptionId, resourceGroupName, automationAccountName, apiVersion, clientRequestId, $filter, _callback);
        Type localVarReturnType = new TypeToken<SoftwareUpdateConfigurationListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
