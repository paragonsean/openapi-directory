/*
 * Update Management
 * APIs for managing software update configurations.
 *
 * The version of the OpenAPI document: 2017-05-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CollectionItemUpdateConfiguration;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Software update configuration collection item properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:04:23.882201-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SoftwareUpdateConfigurationCollectionItemProperties {
  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  /**
   * Gets or sets the frequency of the schedule.
   */
  @JsonAdapter(FrequencyEnum.Adapter.class)
  public enum FrequencyEnum {
    ONE_TIME("OneTime"),
    
    DAY("Day"),
    
    HOUR("Hour"),
    
    WEEK("Week"),
    
    MONTH("Month"),
    
    MINUTE("Minute");

    private String value;

    FrequencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FrequencyEnum fromValue(String value) {
      for (FrequencyEnum b : FrequencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FrequencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FrequencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FrequencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FrequencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FrequencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private FrequencyEnum frequency;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "lastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private OffsetDateTime lastModifiedTime;

  public static final String SERIALIZED_NAME_NEXT_RUN = "nextRun";
  @SerializedName(SERIALIZED_NAME_NEXT_RUN)
  private OffsetDateTime nextRun;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_UPDATE_CONFIGURATION = "updateConfiguration";
  @SerializedName(SERIALIZED_NAME_UPDATE_CONFIGURATION)
  private CollectionItemUpdateConfiguration updateConfiguration;

  public SoftwareUpdateConfigurationCollectionItemProperties() {
  }

  public SoftwareUpdateConfigurationCollectionItemProperties(
     OffsetDateTime creationTime, 
     OffsetDateTime lastModifiedTime, 
     String provisioningState
  ) {
    this();
    this.creationTime = creationTime;
    this.lastModifiedTime = lastModifiedTime;
    this.provisioningState = provisioningState;
  }

  /**
   * Creation time of the software update configuration, which only appears in the response.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }



  public SoftwareUpdateConfigurationCollectionItemProperties frequency(FrequencyEnum frequency) {
    this.frequency = frequency;
    return this;
  }

  /**
   * Gets or sets the frequency of the schedule.
   * @return frequency
   */
  @javax.annotation.Nullable
  public FrequencyEnum getFrequency() {
    return frequency;
  }

  public void setFrequency(FrequencyEnum frequency) {
    this.frequency = frequency;
  }


  /**
   * Last time software update configuration was modified, which only appears in the response.
   * @return lastModifiedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedTime() {
    return lastModifiedTime;
  }



  public SoftwareUpdateConfigurationCollectionItemProperties nextRun(OffsetDateTime nextRun) {
    this.nextRun = nextRun;
    return this;
  }

  /**
   * ext run time of the update.
   * @return nextRun
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNextRun() {
    return nextRun;
  }

  public void setNextRun(OffsetDateTime nextRun) {
    this.nextRun = nextRun;
  }


  /**
   * Provisioning state for the software update configuration, which only appears in the response.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }



  public SoftwareUpdateConfigurationCollectionItemProperties startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * the start time of the update.
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public SoftwareUpdateConfigurationCollectionItemProperties updateConfiguration(CollectionItemUpdateConfiguration updateConfiguration) {
    this.updateConfiguration = updateConfiguration;
    return this;
  }

  /**
   * Get updateConfiguration
   * @return updateConfiguration
   */
  @javax.annotation.Nullable
  public CollectionItemUpdateConfiguration getUpdateConfiguration() {
    return updateConfiguration;
  }

  public void setUpdateConfiguration(CollectionItemUpdateConfiguration updateConfiguration) {
    this.updateConfiguration = updateConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SoftwareUpdateConfigurationCollectionItemProperties softwareUpdateConfigurationCollectionItemProperties = (SoftwareUpdateConfigurationCollectionItemProperties) o;
    return Objects.equals(this.creationTime, softwareUpdateConfigurationCollectionItemProperties.creationTime) &&
        Objects.equals(this.frequency, softwareUpdateConfigurationCollectionItemProperties.frequency) &&
        Objects.equals(this.lastModifiedTime, softwareUpdateConfigurationCollectionItemProperties.lastModifiedTime) &&
        Objects.equals(this.nextRun, softwareUpdateConfigurationCollectionItemProperties.nextRun) &&
        Objects.equals(this.provisioningState, softwareUpdateConfigurationCollectionItemProperties.provisioningState) &&
        Objects.equals(this.startTime, softwareUpdateConfigurationCollectionItemProperties.startTime) &&
        Objects.equals(this.updateConfiguration, softwareUpdateConfigurationCollectionItemProperties.updateConfiguration);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationTime, frequency, lastModifiedTime, nextRun, provisioningState, startTime, updateConfiguration);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SoftwareUpdateConfigurationCollectionItemProperties {\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    nextRun: ").append(toIndentedString(nextRun)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    updateConfiguration: ").append(toIndentedString(updateConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationTime");
    openapiFields.add("frequency");
    openapiFields.add("lastModifiedTime");
    openapiFields.add("nextRun");
    openapiFields.add("provisioningState");
    openapiFields.add("startTime");
    openapiFields.add("updateConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SoftwareUpdateConfigurationCollectionItemProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SoftwareUpdateConfigurationCollectionItemProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SoftwareUpdateConfigurationCollectionItemProperties is not found in the empty JSON string", SoftwareUpdateConfigurationCollectionItemProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SoftwareUpdateConfigurationCollectionItemProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SoftwareUpdateConfigurationCollectionItemProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("frequency") != null && !jsonObj.get("frequency").isJsonNull()) && !jsonObj.get("frequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frequency").toString()));
      }
      // validate the optional field `frequency`
      if (jsonObj.get("frequency") != null && !jsonObj.get("frequency").isJsonNull()) {
        FrequencyEnum.validateJsonElement(jsonObj.get("frequency"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `updateConfiguration`
      if (jsonObj.get("updateConfiguration") != null && !jsonObj.get("updateConfiguration").isJsonNull()) {
        CollectionItemUpdateConfiguration.validateJsonElement(jsonObj.get("updateConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SoftwareUpdateConfigurationCollectionItemProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SoftwareUpdateConfigurationCollectionItemProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SoftwareUpdateConfigurationCollectionItemProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SoftwareUpdateConfigurationCollectionItemProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<SoftwareUpdateConfigurationCollectionItemProperties>() {
           @Override
           public void write(JsonWriter out, SoftwareUpdateConfigurationCollectionItemProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SoftwareUpdateConfigurationCollectionItemProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SoftwareUpdateConfigurationCollectionItemProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SoftwareUpdateConfigurationCollectionItemProperties
   * @throws IOException if the JSON string is invalid with respect to SoftwareUpdateConfigurationCollectionItemProperties
   */
  public static SoftwareUpdateConfigurationCollectionItemProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SoftwareUpdateConfigurationCollectionItemProperties.class);
  }

  /**
   * Convert an instance of SoftwareUpdateConfigurationCollectionItemProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

