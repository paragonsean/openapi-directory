/*
 * Update Management
 * APIs for managing software update configurations.
 *
 * The version of the OpenAPI document: 2017-05-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.AdvancedSchedule;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Definition of schedule parameters.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:04:23.882201-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScheduleProperties {
  public static final String SERIALIZED_NAME_ADVANCED_SCHEDULE = "advancedSchedule";
  @SerializedName(SERIALIZED_NAME_ADVANCED_SCHEDULE)
  private AdvancedSchedule advancedSchedule;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXPIRY_TIME = "expiryTime";
  @SerializedName(SERIALIZED_NAME_EXPIRY_TIME)
  private OffsetDateTime expiryTime;

  public static final String SERIALIZED_NAME_EXPIRY_TIME_OFFSET_MINUTES = "expiryTimeOffsetMinutes";
  @SerializedName(SERIALIZED_NAME_EXPIRY_TIME_OFFSET_MINUTES)
  private Double expiryTimeOffsetMinutes;

  /**
   * Gets or sets the frequency of the schedule.
   */
  @JsonAdapter(FrequencyEnum.Adapter.class)
  public enum FrequencyEnum {
    ONE_TIME("OneTime"),
    
    DAY("Day"),
    
    HOUR("Hour"),
    
    WEEK("Week"),
    
    MONTH("Month"),
    
    MINUTE("Minute");

    private String value;

    FrequencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FrequencyEnum fromValue(String value) {
      for (FrequencyEnum b : FrequencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FrequencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FrequencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FrequencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FrequencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FrequencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private FrequencyEnum frequency;

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private Integer interval;

  public static final String SERIALIZED_NAME_IS_ENABLED = "isEnabled";
  @SerializedName(SERIALIZED_NAME_IS_ENABLED)
  private Boolean isEnabled = false;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "lastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private OffsetDateTime lastModifiedTime;

  public static final String SERIALIZED_NAME_NEXT_RUN = "nextRun";
  @SerializedName(SERIALIZED_NAME_NEXT_RUN)
  private OffsetDateTime nextRun;

  public static final String SERIALIZED_NAME_NEXT_RUN_OFFSET_MINUTES = "nextRunOffsetMinutes";
  @SerializedName(SERIALIZED_NAME_NEXT_RUN_OFFSET_MINUTES)
  private Double nextRunOffsetMinutes;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_START_TIME_OFFSET_MINUTES = "startTimeOffsetMinutes";
  @SerializedName(SERIALIZED_NAME_START_TIME_OFFSET_MINUTES)
  private Double startTimeOffsetMinutes;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public ScheduleProperties() {
  }

  public ScheduleProperties(
     Double startTimeOffsetMinutes
  ) {
    this();
    this.startTimeOffsetMinutes = startTimeOffsetMinutes;
  }

  public ScheduleProperties advancedSchedule(AdvancedSchedule advancedSchedule) {
    this.advancedSchedule = advancedSchedule;
    return this;
  }

  /**
   * Get advancedSchedule
   * @return advancedSchedule
   */
  @javax.annotation.Nullable
  public AdvancedSchedule getAdvancedSchedule() {
    return advancedSchedule;
  }

  public void setAdvancedSchedule(AdvancedSchedule advancedSchedule) {
    this.advancedSchedule = advancedSchedule;
  }


  public ScheduleProperties creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Gets or sets the creation time.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public ScheduleProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Gets or sets the description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ScheduleProperties expiryTime(OffsetDateTime expiryTime) {
    this.expiryTime = expiryTime;
    return this;
  }

  /**
   * Gets or sets the end time of the schedule.
   * @return expiryTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpiryTime() {
    return expiryTime;
  }

  public void setExpiryTime(OffsetDateTime expiryTime) {
    this.expiryTime = expiryTime;
  }


  public ScheduleProperties expiryTimeOffsetMinutes(Double expiryTimeOffsetMinutes) {
    this.expiryTimeOffsetMinutes = expiryTimeOffsetMinutes;
    return this;
  }

  /**
   * Gets or sets the expiry time&#39;s offset in minutes.
   * @return expiryTimeOffsetMinutes
   */
  @javax.annotation.Nullable
  public Double getExpiryTimeOffsetMinutes() {
    return expiryTimeOffsetMinutes;
  }

  public void setExpiryTimeOffsetMinutes(Double expiryTimeOffsetMinutes) {
    this.expiryTimeOffsetMinutes = expiryTimeOffsetMinutes;
  }


  public ScheduleProperties frequency(FrequencyEnum frequency) {
    this.frequency = frequency;
    return this;
  }

  /**
   * Gets or sets the frequency of the schedule.
   * @return frequency
   */
  @javax.annotation.Nullable
  public FrequencyEnum getFrequency() {
    return frequency;
  }

  public void setFrequency(FrequencyEnum frequency) {
    this.frequency = frequency;
  }


  public ScheduleProperties interval(Integer interval) {
    this.interval = interval;
    return this;
  }

  /**
   * Gets or sets the interval of the schedule.
   * @return interval
   */
  @javax.annotation.Nullable
  public Integer getInterval() {
    return interval;
  }

  public void setInterval(Integer interval) {
    this.interval = interval;
  }


  public ScheduleProperties isEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
    return this;
  }

  /**
   * Gets or sets a value indicating whether this schedule is enabled.
   * @return isEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIsEnabled() {
    return isEnabled;
  }

  public void setIsEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
  }


  public ScheduleProperties lastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
    return this;
  }

  /**
   * Gets or sets the last modified time.
   * @return lastModifiedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedTime() {
    return lastModifiedTime;
  }

  public void setLastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
  }


  public ScheduleProperties nextRun(OffsetDateTime nextRun) {
    this.nextRun = nextRun;
    return this;
  }

  /**
   * Gets or sets the next run time of the schedule.
   * @return nextRun
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNextRun() {
    return nextRun;
  }

  public void setNextRun(OffsetDateTime nextRun) {
    this.nextRun = nextRun;
  }


  public ScheduleProperties nextRunOffsetMinutes(Double nextRunOffsetMinutes) {
    this.nextRunOffsetMinutes = nextRunOffsetMinutes;
    return this;
  }

  /**
   * Gets or sets the next run time&#39;s offset in minutes.
   * @return nextRunOffsetMinutes
   */
  @javax.annotation.Nullable
  public Double getNextRunOffsetMinutes() {
    return nextRunOffsetMinutes;
  }

  public void setNextRunOffsetMinutes(Double nextRunOffsetMinutes) {
    this.nextRunOffsetMinutes = nextRunOffsetMinutes;
  }


  public ScheduleProperties startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Gets or sets the start time of the schedule.
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  /**
   * Gets the start time&#39;s offset in minutes.
   * @return startTimeOffsetMinutes
   */
  @javax.annotation.Nullable
  public Double getStartTimeOffsetMinutes() {
    return startTimeOffsetMinutes;
  }



  public ScheduleProperties timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * Gets or sets the time zone of the schedule.
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScheduleProperties scheduleProperties = (ScheduleProperties) o;
    return Objects.equals(this.advancedSchedule, scheduleProperties.advancedSchedule) &&
        Objects.equals(this.creationTime, scheduleProperties.creationTime) &&
        Objects.equals(this.description, scheduleProperties.description) &&
        Objects.equals(this.expiryTime, scheduleProperties.expiryTime) &&
        Objects.equals(this.expiryTimeOffsetMinutes, scheduleProperties.expiryTimeOffsetMinutes) &&
        Objects.equals(this.frequency, scheduleProperties.frequency) &&
        Objects.equals(this.interval, scheduleProperties.interval) &&
        Objects.equals(this.isEnabled, scheduleProperties.isEnabled) &&
        Objects.equals(this.lastModifiedTime, scheduleProperties.lastModifiedTime) &&
        Objects.equals(this.nextRun, scheduleProperties.nextRun) &&
        Objects.equals(this.nextRunOffsetMinutes, scheduleProperties.nextRunOffsetMinutes) &&
        Objects.equals(this.startTime, scheduleProperties.startTime) &&
        Objects.equals(this.startTimeOffsetMinutes, scheduleProperties.startTimeOffsetMinutes) &&
        Objects.equals(this.timeZone, scheduleProperties.timeZone);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(advancedSchedule, creationTime, description, expiryTime, expiryTimeOffsetMinutes, frequency, interval, isEnabled, lastModifiedTime, nextRun, nextRunOffsetMinutes, startTime, startTimeOffsetMinutes, timeZone);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScheduleProperties {\n");
    sb.append("    advancedSchedule: ").append(toIndentedString(advancedSchedule)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    expiryTime: ").append(toIndentedString(expiryTime)).append("\n");
    sb.append("    expiryTimeOffsetMinutes: ").append(toIndentedString(expiryTimeOffsetMinutes)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    nextRun: ").append(toIndentedString(nextRun)).append("\n");
    sb.append("    nextRunOffsetMinutes: ").append(toIndentedString(nextRunOffsetMinutes)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    startTimeOffsetMinutes: ").append(toIndentedString(startTimeOffsetMinutes)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advancedSchedule");
    openapiFields.add("creationTime");
    openapiFields.add("description");
    openapiFields.add("expiryTime");
    openapiFields.add("expiryTimeOffsetMinutes");
    openapiFields.add("frequency");
    openapiFields.add("interval");
    openapiFields.add("isEnabled");
    openapiFields.add("lastModifiedTime");
    openapiFields.add("nextRun");
    openapiFields.add("nextRunOffsetMinutes");
    openapiFields.add("startTime");
    openapiFields.add("startTimeOffsetMinutes");
    openapiFields.add("timeZone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScheduleProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScheduleProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScheduleProperties is not found in the empty JSON string", ScheduleProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScheduleProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScheduleProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `advancedSchedule`
      if (jsonObj.get("advancedSchedule") != null && !jsonObj.get("advancedSchedule").isJsonNull()) {
        AdvancedSchedule.validateJsonElement(jsonObj.get("advancedSchedule"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("frequency") != null && !jsonObj.get("frequency").isJsonNull()) && !jsonObj.get("frequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frequency").toString()));
      }
      // validate the optional field `frequency`
      if (jsonObj.get("frequency") != null && !jsonObj.get("frequency").isJsonNull()) {
        FrequencyEnum.validateJsonElement(jsonObj.get("frequency"));
      }
      if ((jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) && !jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScheduleProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScheduleProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScheduleProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScheduleProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ScheduleProperties>() {
           @Override
           public void write(JsonWriter out, ScheduleProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScheduleProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScheduleProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScheduleProperties
   * @throws IOException if the JSON string is invalid with respect to ScheduleProperties
   */
  public static ScheduleProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScheduleProperties.class);
  }

  /**
   * Convert an instance of ScheduleProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

