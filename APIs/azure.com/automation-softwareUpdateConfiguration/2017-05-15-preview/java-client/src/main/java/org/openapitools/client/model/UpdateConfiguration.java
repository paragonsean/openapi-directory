/*
 * Update Management
 * APIs for managing software update configurations.
 *
 * The version of the OpenAPI document: 2017-05-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LinuxProperties;
import org.openapitools.client.model.OperatingSystemType;
import org.openapitools.client.model.TargetProperties;
import org.openapitools.client.model.WindowsProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Update specific properties of the software update configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:04:23.882201-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateConfiguration {
  public static final String SERIALIZED_NAME_AZURE_VIRTUAL_MACHINES = "azureVirtualMachines";
  @SerializedName(SERIALIZED_NAME_AZURE_VIRTUAL_MACHINES)
  private List<String> azureVirtualMachines = new ArrayList<>();

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  public static final String SERIALIZED_NAME_LINUX = "linux";
  @SerializedName(SERIALIZED_NAME_LINUX)
  private LinuxProperties linux;

  public static final String SERIALIZED_NAME_NON_AZURE_COMPUTER_NAMES = "nonAzureComputerNames";
  @SerializedName(SERIALIZED_NAME_NON_AZURE_COMPUTER_NAMES)
  private List<String> nonAzureComputerNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_OPERATING_SYSTEM = "operatingSystem";
  @SerializedName(SERIALIZED_NAME_OPERATING_SYSTEM)
  private OperatingSystemType operatingSystem;

  public static final String SERIALIZED_NAME_TARGETS = "targets";
  @SerializedName(SERIALIZED_NAME_TARGETS)
  private TargetProperties targets;

  public static final String SERIALIZED_NAME_WINDOWS = "windows";
  @SerializedName(SERIALIZED_NAME_WINDOWS)
  private WindowsProperties windows;

  public UpdateConfiguration() {
  }

  public UpdateConfiguration azureVirtualMachines(List<String> azureVirtualMachines) {
    this.azureVirtualMachines = azureVirtualMachines;
    return this;
  }

  public UpdateConfiguration addAzureVirtualMachinesItem(String azureVirtualMachinesItem) {
    if (this.azureVirtualMachines == null) {
      this.azureVirtualMachines = new ArrayList<>();
    }
    this.azureVirtualMachines.add(azureVirtualMachinesItem);
    return this;
  }

  /**
   * List of azure resource Ids for azure virtual machines targeted by the software update configuration.
   * @return azureVirtualMachines
   */
  @javax.annotation.Nullable
  public List<String> getAzureVirtualMachines() {
    return azureVirtualMachines;
  }

  public void setAzureVirtualMachines(List<String> azureVirtualMachines) {
    this.azureVirtualMachines = azureVirtualMachines;
  }


  public UpdateConfiguration duration(String duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Maximum time allowed for the software update configuration run. Duration needs to be specified using the format PT[n]H[n]M[n]S as per ISO8601
   * @return duration
   */
  @javax.annotation.Nullable
  public String getDuration() {
    return duration;
  }

  public void setDuration(String duration) {
    this.duration = duration;
  }


  public UpdateConfiguration linux(LinuxProperties linux) {
    this.linux = linux;
    return this;
  }

  /**
   * Get linux
   * @return linux
   */
  @javax.annotation.Nullable
  public LinuxProperties getLinux() {
    return linux;
  }

  public void setLinux(LinuxProperties linux) {
    this.linux = linux;
  }


  public UpdateConfiguration nonAzureComputerNames(List<String> nonAzureComputerNames) {
    this.nonAzureComputerNames = nonAzureComputerNames;
    return this;
  }

  public UpdateConfiguration addNonAzureComputerNamesItem(String nonAzureComputerNamesItem) {
    if (this.nonAzureComputerNames == null) {
      this.nonAzureComputerNames = new ArrayList<>();
    }
    this.nonAzureComputerNames.add(nonAzureComputerNamesItem);
    return this;
  }

  /**
   * List of names of non-azure machines targeted by the software update configuration.
   * @return nonAzureComputerNames
   */
  @javax.annotation.Nullable
  public List<String> getNonAzureComputerNames() {
    return nonAzureComputerNames;
  }

  public void setNonAzureComputerNames(List<String> nonAzureComputerNames) {
    this.nonAzureComputerNames = nonAzureComputerNames;
  }


  public UpdateConfiguration operatingSystem(OperatingSystemType operatingSystem) {
    this.operatingSystem = operatingSystem;
    return this;
  }

  /**
   * Get operatingSystem
   * @return operatingSystem
   */
  @javax.annotation.Nonnull
  public OperatingSystemType getOperatingSystem() {
    return operatingSystem;
  }

  public void setOperatingSystem(OperatingSystemType operatingSystem) {
    this.operatingSystem = operatingSystem;
  }


  public UpdateConfiguration targets(TargetProperties targets) {
    this.targets = targets;
    return this;
  }

  /**
   * Get targets
   * @return targets
   */
  @javax.annotation.Nullable
  public TargetProperties getTargets() {
    return targets;
  }

  public void setTargets(TargetProperties targets) {
    this.targets = targets;
  }


  public UpdateConfiguration windows(WindowsProperties windows) {
    this.windows = windows;
    return this;
  }

  /**
   * Get windows
   * @return windows
   */
  @javax.annotation.Nullable
  public WindowsProperties getWindows() {
    return windows;
  }

  public void setWindows(WindowsProperties windows) {
    this.windows = windows;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateConfiguration updateConfiguration = (UpdateConfiguration) o;
    return Objects.equals(this.azureVirtualMachines, updateConfiguration.azureVirtualMachines) &&
        Objects.equals(this.duration, updateConfiguration.duration) &&
        Objects.equals(this.linux, updateConfiguration.linux) &&
        Objects.equals(this.nonAzureComputerNames, updateConfiguration.nonAzureComputerNames) &&
        Objects.equals(this.operatingSystem, updateConfiguration.operatingSystem) &&
        Objects.equals(this.targets, updateConfiguration.targets) &&
        Objects.equals(this.windows, updateConfiguration.windows);
  }

  @Override
  public int hashCode() {
    return Objects.hash(azureVirtualMachines, duration, linux, nonAzureComputerNames, operatingSystem, targets, windows);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateConfiguration {\n");
    sb.append("    azureVirtualMachines: ").append(toIndentedString(azureVirtualMachines)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    linux: ").append(toIndentedString(linux)).append("\n");
    sb.append("    nonAzureComputerNames: ").append(toIndentedString(nonAzureComputerNames)).append("\n");
    sb.append("    operatingSystem: ").append(toIndentedString(operatingSystem)).append("\n");
    sb.append("    targets: ").append(toIndentedString(targets)).append("\n");
    sb.append("    windows: ").append(toIndentedString(windows)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("azureVirtualMachines");
    openapiFields.add("duration");
    openapiFields.add("linux");
    openapiFields.add("nonAzureComputerNames");
    openapiFields.add("operatingSystem");
    openapiFields.add("targets");
    openapiFields.add("windows");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("operatingSystem");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateConfiguration is not found in the empty JSON string", UpdateConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("azureVirtualMachines") != null && !jsonObj.get("azureVirtualMachines").isJsonNull() && !jsonObj.get("azureVirtualMachines").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `azureVirtualMachines` to be an array in the JSON string but got `%s`", jsonObj.get("azureVirtualMachines").toString()));
      }
      if ((jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) && !jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      // validate the optional field `linux`
      if (jsonObj.get("linux") != null && !jsonObj.get("linux").isJsonNull()) {
        LinuxProperties.validateJsonElement(jsonObj.get("linux"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("nonAzureComputerNames") != null && !jsonObj.get("nonAzureComputerNames").isJsonNull() && !jsonObj.get("nonAzureComputerNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `nonAzureComputerNames` to be an array in the JSON string but got `%s`", jsonObj.get("nonAzureComputerNames").toString()));
      }
      // validate the required field `operatingSystem`
      OperatingSystemType.validateJsonElement(jsonObj.get("operatingSystem"));
      // validate the optional field `targets`
      if (jsonObj.get("targets") != null && !jsonObj.get("targets").isJsonNull()) {
        TargetProperties.validateJsonElement(jsonObj.get("targets"));
      }
      // validate the optional field `windows`
      if (jsonObj.get("windows") != null && !jsonObj.get("windows").isJsonNull()) {
        WindowsProperties.validateJsonElement(jsonObj.get("windows"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateConfiguration>() {
           @Override
           public void write(JsonWriter out, UpdateConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateConfiguration
   * @throws IOException if the JSON string is invalid with respect to UpdateConfiguration
   */
  public static UpdateConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateConfiguration.class);
  }

  /**
   * Convert an instance of UpdateConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

