/**
 * Microsoft.ResourceHealth
 * The Resource Health Client.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MetadataSupportedValueDetail from './MetadataSupportedValueDetail';

/**
 * The MetadataEntityProperties model module.
 * @module model/MetadataEntityProperties
 * @version 2018-07-01
 */
class MetadataEntityProperties {
    /**
     * Constructs a new <code>MetadataEntityProperties</code>.
     * The metadata entity properties
     * @alias module:model/MetadataEntityProperties
     */
    constructor() { 
        
        MetadataEntityProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MetadataEntityProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetadataEntityProperties} obj Optional instance to populate.
     * @return {module:model/MetadataEntityProperties} The populated <code>MetadataEntityProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetadataEntityProperties();

            if (data.hasOwnProperty('applicableScenarios')) {
                obj['applicableScenarios'] = ApiClient.convertToType(data['applicableScenarios'], ['String']);
            }
            if (data.hasOwnProperty('dependsOn')) {
                obj['dependsOn'] = ApiClient.convertToType(data['dependsOn'], ['String']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('supportedValues')) {
                obj['supportedValues'] = ApiClient.convertToType(data['supportedValues'], [MetadataSupportedValueDetail]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetadataEntityProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetadataEntityProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['applicableScenarios'])) {
            throw new Error("Expected the field `applicableScenarios` to be an array in the JSON data but got " + data['applicableScenarios']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['dependsOn'])) {
            throw new Error("Expected the field `dependsOn` to be an array in the JSON data but got " + data['dependsOn']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        if (data['supportedValues']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['supportedValues'])) {
                throw new Error("Expected the field `supportedValues` to be an array in the JSON data but got " + data['supportedValues']);
            }
            // validate the optional field `supportedValues` (array)
            for (const item of data['supportedValues']) {
                MetadataSupportedValueDetail.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The list of scenarios applicable to this metadata entity.
 * @member {Array.<module:model/MetadataEntityProperties.ApplicableScenariosEnum>} applicableScenarios
 */
MetadataEntityProperties.prototype['applicableScenarios'] = undefined;

/**
 * The list of keys on which this entity depends on.
 * @member {Array.<String>} dependsOn
 */
MetadataEntityProperties.prototype['dependsOn'] = undefined;

/**
 * The display name.
 * @member {String} displayName
 */
MetadataEntityProperties.prototype['displayName'] = undefined;

/**
 * The list of supported values.
 * @member {Array.<module:model/MetadataSupportedValueDetail>} supportedValues
 */
MetadataEntityProperties.prototype['supportedValues'] = undefined;





/**
 * Allowed values for the <code>applicableScenarios</code> property.
 * @enum {String}
 * @readonly
 */
MetadataEntityProperties['ApplicableScenariosEnum'] = {

    /**
     * value: "Alerts"
     * @const
     */
    "Alerts": "Alerts"
};



export default MetadataEntityProperties;

