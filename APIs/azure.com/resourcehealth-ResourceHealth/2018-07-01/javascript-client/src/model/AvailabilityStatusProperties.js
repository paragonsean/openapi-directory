/**
 * Microsoft.ResourceHealth
 * The Resource Health Client.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AvailabilityStatusPropertiesRecentlyResolved from './AvailabilityStatusPropertiesRecentlyResolved';
import RecommendedAction from './RecommendedAction';
import ServiceImpactingEvent from './ServiceImpactingEvent';

/**
 * The AvailabilityStatusProperties model module.
 * @module model/AvailabilityStatusProperties
 * @version 2018-07-01
 */
class AvailabilityStatusProperties {
    /**
     * Constructs a new <code>AvailabilityStatusProperties</code>.
     * Properties of availability state.
     * @alias module:model/AvailabilityStatusProperties
     */
    constructor() { 
        
        AvailabilityStatusProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AvailabilityStatusProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AvailabilityStatusProperties} obj Optional instance to populate.
     * @return {module:model/AvailabilityStatusProperties} The populated <code>AvailabilityStatusProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AvailabilityStatusProperties();

            if (data.hasOwnProperty('availabilityState')) {
                obj['availabilityState'] = ApiClient.convertToType(data['availabilityState'], 'String');
            }
            if (data.hasOwnProperty('detailedStatus')) {
                obj['detailedStatus'] = ApiClient.convertToType(data['detailedStatus'], 'String');
            }
            if (data.hasOwnProperty('healthEventCategory')) {
                obj['healthEventCategory'] = ApiClient.convertToType(data['healthEventCategory'], 'String');
            }
            if (data.hasOwnProperty('healthEventCause')) {
                obj['healthEventCause'] = ApiClient.convertToType(data['healthEventCause'], 'String');
            }
            if (data.hasOwnProperty('healthEventId')) {
                obj['healthEventId'] = ApiClient.convertToType(data['healthEventId'], 'String');
            }
            if (data.hasOwnProperty('healthEventType')) {
                obj['healthEventType'] = ApiClient.convertToType(data['healthEventType'], 'String');
            }
            if (data.hasOwnProperty('occurredTime')) {
                obj['occurredTime'] = ApiClient.convertToType(data['occurredTime'], 'Date');
            }
            if (data.hasOwnProperty('reasonChronicity')) {
                obj['reasonChronicity'] = ApiClient.convertToType(data['reasonChronicity'], 'String');
            }
            if (data.hasOwnProperty('reasonType')) {
                obj['reasonType'] = ApiClient.convertToType(data['reasonType'], 'String');
            }
            if (data.hasOwnProperty('recentlyResolved')) {
                obj['recentlyResolved'] = AvailabilityStatusPropertiesRecentlyResolved.constructFromObject(data['recentlyResolved']);
            }
            if (data.hasOwnProperty('recommendedActions')) {
                obj['recommendedActions'] = ApiClient.convertToType(data['recommendedActions'], [RecommendedAction]);
            }
            if (data.hasOwnProperty('reportedTime')) {
                obj['reportedTime'] = ApiClient.convertToType(data['reportedTime'], 'Date');
            }
            if (data.hasOwnProperty('resolutionETA')) {
                obj['resolutionETA'] = ApiClient.convertToType(data['resolutionETA'], 'Date');
            }
            if (data.hasOwnProperty('rootCauseAttributionTime')) {
                obj['rootCauseAttributionTime'] = ApiClient.convertToType(data['rootCauseAttributionTime'], 'Date');
            }
            if (data.hasOwnProperty('serviceImpactingEvents')) {
                obj['serviceImpactingEvents'] = ApiClient.convertToType(data['serviceImpactingEvents'], [ServiceImpactingEvent]);
            }
            if (data.hasOwnProperty('summary')) {
                obj['summary'] = ApiClient.convertToType(data['summary'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AvailabilityStatusProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AvailabilityStatusProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['availabilityState'] && !(typeof data['availabilityState'] === 'string' || data['availabilityState'] instanceof String)) {
            throw new Error("Expected the field `availabilityState` to be a primitive type in the JSON string but got " + data['availabilityState']);
        }
        // ensure the json data is a string
        if (data['detailedStatus'] && !(typeof data['detailedStatus'] === 'string' || data['detailedStatus'] instanceof String)) {
            throw new Error("Expected the field `detailedStatus` to be a primitive type in the JSON string but got " + data['detailedStatus']);
        }
        // ensure the json data is a string
        if (data['healthEventCategory'] && !(typeof data['healthEventCategory'] === 'string' || data['healthEventCategory'] instanceof String)) {
            throw new Error("Expected the field `healthEventCategory` to be a primitive type in the JSON string but got " + data['healthEventCategory']);
        }
        // ensure the json data is a string
        if (data['healthEventCause'] && !(typeof data['healthEventCause'] === 'string' || data['healthEventCause'] instanceof String)) {
            throw new Error("Expected the field `healthEventCause` to be a primitive type in the JSON string but got " + data['healthEventCause']);
        }
        // ensure the json data is a string
        if (data['healthEventId'] && !(typeof data['healthEventId'] === 'string' || data['healthEventId'] instanceof String)) {
            throw new Error("Expected the field `healthEventId` to be a primitive type in the JSON string but got " + data['healthEventId']);
        }
        // ensure the json data is a string
        if (data['healthEventType'] && !(typeof data['healthEventType'] === 'string' || data['healthEventType'] instanceof String)) {
            throw new Error("Expected the field `healthEventType` to be a primitive type in the JSON string but got " + data['healthEventType']);
        }
        // ensure the json data is a string
        if (data['reasonChronicity'] && !(typeof data['reasonChronicity'] === 'string' || data['reasonChronicity'] instanceof String)) {
            throw new Error("Expected the field `reasonChronicity` to be a primitive type in the JSON string but got " + data['reasonChronicity']);
        }
        // ensure the json data is a string
        if (data['reasonType'] && !(typeof data['reasonType'] === 'string' || data['reasonType'] instanceof String)) {
            throw new Error("Expected the field `reasonType` to be a primitive type in the JSON string but got " + data['reasonType']);
        }
        // validate the optional field `recentlyResolved`
        if (data['recentlyResolved']) { // data not null
          AvailabilityStatusPropertiesRecentlyResolved.validateJSON(data['recentlyResolved']);
        }
        if (data['recommendedActions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['recommendedActions'])) {
                throw new Error("Expected the field `recommendedActions` to be an array in the JSON data but got " + data['recommendedActions']);
            }
            // validate the optional field `recommendedActions` (array)
            for (const item of data['recommendedActions']) {
                RecommendedAction.validateJSON(item);
            };
        }
        if (data['serviceImpactingEvents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['serviceImpactingEvents'])) {
                throw new Error("Expected the field `serviceImpactingEvents` to be an array in the JSON data but got " + data['serviceImpactingEvents']);
            }
            // validate the optional field `serviceImpactingEvents` (array)
            for (const item of data['serviceImpactingEvents']) {
                ServiceImpactingEvent.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['summary'] && !(typeof data['summary'] === 'string' || data['summary'] instanceof String)) {
            throw new Error("Expected the field `summary` to be a primitive type in the JSON string but got " + data['summary']);
        }

        return true;
    }


}



/**
 * Availability status of the resource. When it is null, this availabilityStatus object represents an availability impacting event
 * @member {module:model/AvailabilityStatusProperties.AvailabilityStateEnum} availabilityState
 */
AvailabilityStatusProperties.prototype['availabilityState'] = undefined;

/**
 * Details of the availability status.
 * @member {String} detailedStatus
 */
AvailabilityStatusProperties.prototype['detailedStatus'] = undefined;

/**
 * In case of an availability impacting event, it describes the category of a PlatformInitiated health impacting event. Examples are Planned, Unplanned etc.
 * @member {String} healthEventCategory
 */
AvailabilityStatusProperties.prototype['healthEventCategory'] = undefined;

/**
 * In case of an availability impacting event, it describes where the health impacting event was originated. Examples are PlatformInitiated, UserInitiated etc.
 * @member {String} healthEventCause
 */
AvailabilityStatusProperties.prototype['healthEventCause'] = undefined;

/**
 * It is a unique Id that identifies the event
 * @member {String} healthEventId
 */
AvailabilityStatusProperties.prototype['healthEventId'] = undefined;

/**
 * In case of an availability impacting event, it describes when the health impacting event was originated. Examples are Lifecycle, Downtime, Fault Analysis etc.
 * @member {String} healthEventType
 */
AvailabilityStatusProperties.prototype['healthEventType'] = undefined;

/**
 * Timestamp for when last change in health status occurred.
 * @member {Date} occurredTime
 */
AvailabilityStatusProperties.prototype['occurredTime'] = undefined;

/**
 * Chronicity of the availability transition.
 * @member {module:model/AvailabilityStatusProperties.ReasonChronicityEnum} reasonChronicity
 */
AvailabilityStatusProperties.prototype['reasonChronicity'] = undefined;

/**
 * When the resource's availabilityState is Unavailable, it describes where the health impacting event was originated. Examples are planned, unplanned, user initiated or an outage etc.
 * @member {String} reasonType
 */
AvailabilityStatusProperties.prototype['reasonType'] = undefined;

/**
 * @member {module:model/AvailabilityStatusPropertiesRecentlyResolved} recentlyResolved
 */
AvailabilityStatusProperties.prototype['recentlyResolved'] = undefined;

/**
 * Lists actions the user can take based on the current availabilityState of the resource.
 * @member {Array.<module:model/RecommendedAction>} recommendedActions
 */
AvailabilityStatusProperties.prototype['recommendedActions'] = undefined;

/**
 * Timestamp for when the health was last checked. 
 * @member {Date} reportedTime
 */
AvailabilityStatusProperties.prototype['reportedTime'] = undefined;

/**
 * When the resource's availabilityState is Unavailable and the reasonType is not User Initiated, it provides the date and time for when the issue is expected to be resolved.
 * @member {Date} resolutionETA
 */
AvailabilityStatusProperties.prototype['resolutionETA'] = undefined;

/**
 * When the resource's availabilityState is Unavailable, it provides the Timestamp for when the health impacting event was received.
 * @member {Date} rootCauseAttributionTime
 */
AvailabilityStatusProperties.prototype['rootCauseAttributionTime'] = undefined;

/**
 * Lists the service impacting events that may be affecting the health of the resource.
 * @member {Array.<module:model/ServiceImpactingEvent>} serviceImpactingEvents
 */
AvailabilityStatusProperties.prototype['serviceImpactingEvents'] = undefined;

/**
 * Summary description of the availability status.
 * @member {String} summary
 */
AvailabilityStatusProperties.prototype['summary'] = undefined;





/**
 * Allowed values for the <code>availabilityState</code> property.
 * @enum {String}
 * @readonly
 */
AvailabilityStatusProperties['AvailabilityStateEnum'] = {

    /**
     * value: "Available"
     * @const
     */
    "Available": "Available",

    /**
     * value: "Unavailable"
     * @const
     */
    "Unavailable": "Unavailable",

    /**
     * value: "Degraded"
     * @const
     */
    "Degraded": "Degraded",

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown"
};


/**
 * Allowed values for the <code>reasonChronicity</code> property.
 * @enum {String}
 * @readonly
 */
AvailabilityStatusProperties['ReasonChronicityEnum'] = {

    /**
     * value: "Transient"
     * @const
     */
    "Transient": "Transient",

    /**
     * value: "Persistent"
     * @const
     */
    "Persistent": "Persistent"
};



export default AvailabilityStatusProperties;

