/**
 * Microsoft.ResourceHealth
 * The Resource Health Client.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LinkDisplayText from './LinkDisplayText';

/**
 * The Link model module.
 * @module model/Link
 * @version 2018-07-01
 */
class Link {
    /**
     * Constructs a new <code>Link</code>.
     * Useful links for service health event.
     * @alias module:model/Link
     */
    constructor() { 
        
        Link.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Link</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Link} obj Optional instance to populate.
     * @return {module:model/Link} The populated <code>Link</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Link();

            if (data.hasOwnProperty('bladeName')) {
                obj['bladeName'] = ApiClient.convertToType(data['bladeName'], 'String');
            }
            if (data.hasOwnProperty('displayText')) {
                obj['displayText'] = LinkDisplayText.constructFromObject(data['displayText']);
            }
            if (data.hasOwnProperty('extensionName')) {
                obj['extensionName'] = ApiClient.convertToType(data['extensionName'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], Object);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Link</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Link</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bladeName'] && !(typeof data['bladeName'] === 'string' || data['bladeName'] instanceof String)) {
            throw new Error("Expected the field `bladeName` to be a primitive type in the JSON string but got " + data['bladeName']);
        }
        // validate the optional field `displayText`
        if (data['displayText']) { // data not null
          LinkDisplayText.validateJSON(data['displayText']);
        }
        // ensure the json data is a string
        if (data['extensionName'] && !(typeof data['extensionName'] === 'string' || data['extensionName'] instanceof String)) {
            throw new Error("Expected the field `extensionName` to be a primitive type in the JSON string but got " + data['extensionName']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * It provides the name of portal extension blade to produce link for given service health event.
 * @member {String} bladeName
 */
Link.prototype['bladeName'] = undefined;

/**
 * @member {module:model/LinkDisplayText} displayText
 */
Link.prototype['displayText'] = undefined;

/**
 * It provides the name of portal extension to produce link for given service health event.
 * @member {String} extensionName
 */
Link.prototype['extensionName'] = undefined;

/**
 * It provides a map of parameter name and value for portal extension blade to produce lik for given service health event.
 * @member {Object} parameters
 */
Link.prototype['parameters'] = undefined;

/**
 * Type of link.
 * @member {module:model/Link.TypeEnum} type
 */
Link.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Link['TypeEnum'] = {

    /**
     * value: "Button"
     * @const
     */
    "Button": "Button",

    /**
     * value: "Hyperlink"
     * @const
     */
    "Hyperlink": "Hyperlink"
};



export default Link;

