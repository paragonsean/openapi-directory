/**
 * Microsoft.ResourceHealth
 * The Resource Health Client.
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAvailabilityStatus_properties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAvailabilityStatus_properties::OAIAvailabilityStatus_properties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAvailabilityStatus_properties::OAIAvailabilityStatus_properties() {
    this->initializeModel();
}

OAIAvailabilityStatus_properties::~OAIAvailabilityStatus_properties() {}

void OAIAvailabilityStatus_properties::initializeModel() {

    m_availability_state_isSet = false;
    m_availability_state_isValid = false;

    m_detailed_status_isSet = false;
    m_detailed_status_isValid = false;

    m_health_event_category_isSet = false;
    m_health_event_category_isValid = false;

    m_health_event_cause_isSet = false;
    m_health_event_cause_isValid = false;

    m_health_event_id_isSet = false;
    m_health_event_id_isValid = false;

    m_health_event_type_isSet = false;
    m_health_event_type_isValid = false;

    m_occurred_time_isSet = false;
    m_occurred_time_isValid = false;

    m_reason_chronicity_isSet = false;
    m_reason_chronicity_isValid = false;

    m_reason_type_isSet = false;
    m_reason_type_isValid = false;

    m_recently_resolved_isSet = false;
    m_recently_resolved_isValid = false;

    m_recommended_actions_isSet = false;
    m_recommended_actions_isValid = false;

    m_reported_time_isSet = false;
    m_reported_time_isValid = false;

    m_resolution_eta_isSet = false;
    m_resolution_eta_isValid = false;

    m_root_cause_attribution_time_isSet = false;
    m_root_cause_attribution_time_isValid = false;

    m_service_impacting_events_isSet = false;
    m_service_impacting_events_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;
}

void OAIAvailabilityStatus_properties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAvailabilityStatus_properties::fromJsonObject(QJsonObject json) {

    m_availability_state_isValid = ::OpenAPI::fromJsonValue(m_availability_state, json[QString("availabilityState")]);
    m_availability_state_isSet = !json[QString("availabilityState")].isNull() && m_availability_state_isValid;

    m_detailed_status_isValid = ::OpenAPI::fromJsonValue(m_detailed_status, json[QString("detailedStatus")]);
    m_detailed_status_isSet = !json[QString("detailedStatus")].isNull() && m_detailed_status_isValid;

    m_health_event_category_isValid = ::OpenAPI::fromJsonValue(m_health_event_category, json[QString("healthEventCategory")]);
    m_health_event_category_isSet = !json[QString("healthEventCategory")].isNull() && m_health_event_category_isValid;

    m_health_event_cause_isValid = ::OpenAPI::fromJsonValue(m_health_event_cause, json[QString("healthEventCause")]);
    m_health_event_cause_isSet = !json[QString("healthEventCause")].isNull() && m_health_event_cause_isValid;

    m_health_event_id_isValid = ::OpenAPI::fromJsonValue(m_health_event_id, json[QString("healthEventId")]);
    m_health_event_id_isSet = !json[QString("healthEventId")].isNull() && m_health_event_id_isValid;

    m_health_event_type_isValid = ::OpenAPI::fromJsonValue(m_health_event_type, json[QString("healthEventType")]);
    m_health_event_type_isSet = !json[QString("healthEventType")].isNull() && m_health_event_type_isValid;

    m_occurred_time_isValid = ::OpenAPI::fromJsonValue(m_occurred_time, json[QString("occurredTime")]);
    m_occurred_time_isSet = !json[QString("occurredTime")].isNull() && m_occurred_time_isValid;

    m_reason_chronicity_isValid = ::OpenAPI::fromJsonValue(m_reason_chronicity, json[QString("reasonChronicity")]);
    m_reason_chronicity_isSet = !json[QString("reasonChronicity")].isNull() && m_reason_chronicity_isValid;

    m_reason_type_isValid = ::OpenAPI::fromJsonValue(m_reason_type, json[QString("reasonType")]);
    m_reason_type_isSet = !json[QString("reasonType")].isNull() && m_reason_type_isValid;

    m_recently_resolved_isValid = ::OpenAPI::fromJsonValue(m_recently_resolved, json[QString("recentlyResolved")]);
    m_recently_resolved_isSet = !json[QString("recentlyResolved")].isNull() && m_recently_resolved_isValid;

    m_recommended_actions_isValid = ::OpenAPI::fromJsonValue(m_recommended_actions, json[QString("recommendedActions")]);
    m_recommended_actions_isSet = !json[QString("recommendedActions")].isNull() && m_recommended_actions_isValid;

    m_reported_time_isValid = ::OpenAPI::fromJsonValue(m_reported_time, json[QString("reportedTime")]);
    m_reported_time_isSet = !json[QString("reportedTime")].isNull() && m_reported_time_isValid;

    m_resolution_eta_isValid = ::OpenAPI::fromJsonValue(m_resolution_eta, json[QString("resolutionETA")]);
    m_resolution_eta_isSet = !json[QString("resolutionETA")].isNull() && m_resolution_eta_isValid;

    m_root_cause_attribution_time_isValid = ::OpenAPI::fromJsonValue(m_root_cause_attribution_time, json[QString("rootCauseAttributionTime")]);
    m_root_cause_attribution_time_isSet = !json[QString("rootCauseAttributionTime")].isNull() && m_root_cause_attribution_time_isValid;

    m_service_impacting_events_isValid = ::OpenAPI::fromJsonValue(m_service_impacting_events, json[QString("serviceImpactingEvents")]);
    m_service_impacting_events_isSet = !json[QString("serviceImpactingEvents")].isNull() && m_service_impacting_events_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;
}

QString OAIAvailabilityStatus_properties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAvailabilityStatus_properties::asJsonObject() const {
    QJsonObject obj;
    if (m_availability_state_isSet) {
        obj.insert(QString("availabilityState"), ::OpenAPI::toJsonValue(m_availability_state));
    }
    if (m_detailed_status_isSet) {
        obj.insert(QString("detailedStatus"), ::OpenAPI::toJsonValue(m_detailed_status));
    }
    if (m_health_event_category_isSet) {
        obj.insert(QString("healthEventCategory"), ::OpenAPI::toJsonValue(m_health_event_category));
    }
    if (m_health_event_cause_isSet) {
        obj.insert(QString("healthEventCause"), ::OpenAPI::toJsonValue(m_health_event_cause));
    }
    if (m_health_event_id_isSet) {
        obj.insert(QString("healthEventId"), ::OpenAPI::toJsonValue(m_health_event_id));
    }
    if (m_health_event_type_isSet) {
        obj.insert(QString("healthEventType"), ::OpenAPI::toJsonValue(m_health_event_type));
    }
    if (m_occurred_time_isSet) {
        obj.insert(QString("occurredTime"), ::OpenAPI::toJsonValue(m_occurred_time));
    }
    if (m_reason_chronicity_isSet) {
        obj.insert(QString("reasonChronicity"), ::OpenAPI::toJsonValue(m_reason_chronicity));
    }
    if (m_reason_type_isSet) {
        obj.insert(QString("reasonType"), ::OpenAPI::toJsonValue(m_reason_type));
    }
    if (m_recently_resolved.isSet()) {
        obj.insert(QString("recentlyResolved"), ::OpenAPI::toJsonValue(m_recently_resolved));
    }
    if (m_recommended_actions.size() > 0) {
        obj.insert(QString("recommendedActions"), ::OpenAPI::toJsonValue(m_recommended_actions));
    }
    if (m_reported_time_isSet) {
        obj.insert(QString("reportedTime"), ::OpenAPI::toJsonValue(m_reported_time));
    }
    if (m_resolution_eta_isSet) {
        obj.insert(QString("resolutionETA"), ::OpenAPI::toJsonValue(m_resolution_eta));
    }
    if (m_root_cause_attribution_time_isSet) {
        obj.insert(QString("rootCauseAttributionTime"), ::OpenAPI::toJsonValue(m_root_cause_attribution_time));
    }
    if (m_service_impacting_events.size() > 0) {
        obj.insert(QString("serviceImpactingEvents"), ::OpenAPI::toJsonValue(m_service_impacting_events));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    return obj;
}

QString OAIAvailabilityStatus_properties::getAvailabilityState() const {
    return m_availability_state;
}
void OAIAvailabilityStatus_properties::setAvailabilityState(const QString &availability_state) {
    m_availability_state = availability_state;
    m_availability_state_isSet = true;
}

bool OAIAvailabilityStatus_properties::is_availability_state_Set() const{
    return m_availability_state_isSet;
}

bool OAIAvailabilityStatus_properties::is_availability_state_Valid() const{
    return m_availability_state_isValid;
}

QString OAIAvailabilityStatus_properties::getDetailedStatus() const {
    return m_detailed_status;
}
void OAIAvailabilityStatus_properties::setDetailedStatus(const QString &detailed_status) {
    m_detailed_status = detailed_status;
    m_detailed_status_isSet = true;
}

bool OAIAvailabilityStatus_properties::is_detailed_status_Set() const{
    return m_detailed_status_isSet;
}

bool OAIAvailabilityStatus_properties::is_detailed_status_Valid() const{
    return m_detailed_status_isValid;
}

QString OAIAvailabilityStatus_properties::getHealthEventCategory() const {
    return m_health_event_category;
}
void OAIAvailabilityStatus_properties::setHealthEventCategory(const QString &health_event_category) {
    m_health_event_category = health_event_category;
    m_health_event_category_isSet = true;
}

bool OAIAvailabilityStatus_properties::is_health_event_category_Set() const{
    return m_health_event_category_isSet;
}

bool OAIAvailabilityStatus_properties::is_health_event_category_Valid() const{
    return m_health_event_category_isValid;
}

QString OAIAvailabilityStatus_properties::getHealthEventCause() const {
    return m_health_event_cause;
}
void OAIAvailabilityStatus_properties::setHealthEventCause(const QString &health_event_cause) {
    m_health_event_cause = health_event_cause;
    m_health_event_cause_isSet = true;
}

bool OAIAvailabilityStatus_properties::is_health_event_cause_Set() const{
    return m_health_event_cause_isSet;
}

bool OAIAvailabilityStatus_properties::is_health_event_cause_Valid() const{
    return m_health_event_cause_isValid;
}

QString OAIAvailabilityStatus_properties::getHealthEventId() const {
    return m_health_event_id;
}
void OAIAvailabilityStatus_properties::setHealthEventId(const QString &health_event_id) {
    m_health_event_id = health_event_id;
    m_health_event_id_isSet = true;
}

bool OAIAvailabilityStatus_properties::is_health_event_id_Set() const{
    return m_health_event_id_isSet;
}

bool OAIAvailabilityStatus_properties::is_health_event_id_Valid() const{
    return m_health_event_id_isValid;
}

QString OAIAvailabilityStatus_properties::getHealthEventType() const {
    return m_health_event_type;
}
void OAIAvailabilityStatus_properties::setHealthEventType(const QString &health_event_type) {
    m_health_event_type = health_event_type;
    m_health_event_type_isSet = true;
}

bool OAIAvailabilityStatus_properties::is_health_event_type_Set() const{
    return m_health_event_type_isSet;
}

bool OAIAvailabilityStatus_properties::is_health_event_type_Valid() const{
    return m_health_event_type_isValid;
}

QDateTime OAIAvailabilityStatus_properties::getOccurredTime() const {
    return m_occurred_time;
}
void OAIAvailabilityStatus_properties::setOccurredTime(const QDateTime &occurred_time) {
    m_occurred_time = occurred_time;
    m_occurred_time_isSet = true;
}

bool OAIAvailabilityStatus_properties::is_occurred_time_Set() const{
    return m_occurred_time_isSet;
}

bool OAIAvailabilityStatus_properties::is_occurred_time_Valid() const{
    return m_occurred_time_isValid;
}

QString OAIAvailabilityStatus_properties::getReasonChronicity() const {
    return m_reason_chronicity;
}
void OAIAvailabilityStatus_properties::setReasonChronicity(const QString &reason_chronicity) {
    m_reason_chronicity = reason_chronicity;
    m_reason_chronicity_isSet = true;
}

bool OAIAvailabilityStatus_properties::is_reason_chronicity_Set() const{
    return m_reason_chronicity_isSet;
}

bool OAIAvailabilityStatus_properties::is_reason_chronicity_Valid() const{
    return m_reason_chronicity_isValid;
}

QString OAIAvailabilityStatus_properties::getReasonType() const {
    return m_reason_type;
}
void OAIAvailabilityStatus_properties::setReasonType(const QString &reason_type) {
    m_reason_type = reason_type;
    m_reason_type_isSet = true;
}

bool OAIAvailabilityStatus_properties::is_reason_type_Set() const{
    return m_reason_type_isSet;
}

bool OAIAvailabilityStatus_properties::is_reason_type_Valid() const{
    return m_reason_type_isValid;
}

OAIAvailabilityStatus_properties_recentlyResolved OAIAvailabilityStatus_properties::getRecentlyResolved() const {
    return m_recently_resolved;
}
void OAIAvailabilityStatus_properties::setRecentlyResolved(const OAIAvailabilityStatus_properties_recentlyResolved &recently_resolved) {
    m_recently_resolved = recently_resolved;
    m_recently_resolved_isSet = true;
}

bool OAIAvailabilityStatus_properties::is_recently_resolved_Set() const{
    return m_recently_resolved_isSet;
}

bool OAIAvailabilityStatus_properties::is_recently_resolved_Valid() const{
    return m_recently_resolved_isValid;
}

QList<OAIRecommendedAction> OAIAvailabilityStatus_properties::getRecommendedActions() const {
    return m_recommended_actions;
}
void OAIAvailabilityStatus_properties::setRecommendedActions(const QList<OAIRecommendedAction> &recommended_actions) {
    m_recommended_actions = recommended_actions;
    m_recommended_actions_isSet = true;
}

bool OAIAvailabilityStatus_properties::is_recommended_actions_Set() const{
    return m_recommended_actions_isSet;
}

bool OAIAvailabilityStatus_properties::is_recommended_actions_Valid() const{
    return m_recommended_actions_isValid;
}

QDateTime OAIAvailabilityStatus_properties::getReportedTime() const {
    return m_reported_time;
}
void OAIAvailabilityStatus_properties::setReportedTime(const QDateTime &reported_time) {
    m_reported_time = reported_time;
    m_reported_time_isSet = true;
}

bool OAIAvailabilityStatus_properties::is_reported_time_Set() const{
    return m_reported_time_isSet;
}

bool OAIAvailabilityStatus_properties::is_reported_time_Valid() const{
    return m_reported_time_isValid;
}

QDateTime OAIAvailabilityStatus_properties::getResolutionEta() const {
    return m_resolution_eta;
}
void OAIAvailabilityStatus_properties::setResolutionEta(const QDateTime &resolution_eta) {
    m_resolution_eta = resolution_eta;
    m_resolution_eta_isSet = true;
}

bool OAIAvailabilityStatus_properties::is_resolution_eta_Set() const{
    return m_resolution_eta_isSet;
}

bool OAIAvailabilityStatus_properties::is_resolution_eta_Valid() const{
    return m_resolution_eta_isValid;
}

QDateTime OAIAvailabilityStatus_properties::getRootCauseAttributionTime() const {
    return m_root_cause_attribution_time;
}
void OAIAvailabilityStatus_properties::setRootCauseAttributionTime(const QDateTime &root_cause_attribution_time) {
    m_root_cause_attribution_time = root_cause_attribution_time;
    m_root_cause_attribution_time_isSet = true;
}

bool OAIAvailabilityStatus_properties::is_root_cause_attribution_time_Set() const{
    return m_root_cause_attribution_time_isSet;
}

bool OAIAvailabilityStatus_properties::is_root_cause_attribution_time_Valid() const{
    return m_root_cause_attribution_time_isValid;
}

QList<OAIServiceImpactingEvent> OAIAvailabilityStatus_properties::getServiceImpactingEvents() const {
    return m_service_impacting_events;
}
void OAIAvailabilityStatus_properties::setServiceImpactingEvents(const QList<OAIServiceImpactingEvent> &service_impacting_events) {
    m_service_impacting_events = service_impacting_events;
    m_service_impacting_events_isSet = true;
}

bool OAIAvailabilityStatus_properties::is_service_impacting_events_Set() const{
    return m_service_impacting_events_isSet;
}

bool OAIAvailabilityStatus_properties::is_service_impacting_events_Valid() const{
    return m_service_impacting_events_isValid;
}

QString OAIAvailabilityStatus_properties::getSummary() const {
    return m_summary;
}
void OAIAvailabilityStatus_properties::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIAvailabilityStatus_properties::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIAvailabilityStatus_properties::is_summary_Valid() const{
    return m_summary_isValid;
}

bool OAIAvailabilityStatus_properties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detailed_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_event_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_event_cause_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_occurred_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_chronicity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recently_resolved.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommended_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reported_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_eta_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_cause_attribution_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_impacting_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAvailabilityStatus_properties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
