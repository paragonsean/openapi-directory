/**
 * Microsoft.ResourceHealth
 * The Resource Health Client.
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmergingIssue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmergingIssue::OAIEmergingIssue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmergingIssue::OAIEmergingIssue() {
    this->initializeModel();
}

OAIEmergingIssue::~OAIEmergingIssue() {}

void OAIEmergingIssue::initializeModel() {

    m_refresh_timestamp_isSet = false;
    m_refresh_timestamp_isValid = false;

    m_status_active_events_isSet = false;
    m_status_active_events_isValid = false;

    m_status_banners_isSet = false;
    m_status_banners_isValid = false;
}

void OAIEmergingIssue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmergingIssue::fromJsonObject(QJsonObject json) {

    m_refresh_timestamp_isValid = ::OpenAPI::fromJsonValue(m_refresh_timestamp, json[QString("refreshTimestamp")]);
    m_refresh_timestamp_isSet = !json[QString("refreshTimestamp")].isNull() && m_refresh_timestamp_isValid;

    m_status_active_events_isValid = ::OpenAPI::fromJsonValue(m_status_active_events, json[QString("statusActiveEvents")]);
    m_status_active_events_isSet = !json[QString("statusActiveEvents")].isNull() && m_status_active_events_isValid;

    m_status_banners_isValid = ::OpenAPI::fromJsonValue(m_status_banners, json[QString("statusBanners")]);
    m_status_banners_isSet = !json[QString("statusBanners")].isNull() && m_status_banners_isValid;
}

QString OAIEmergingIssue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmergingIssue::asJsonObject() const {
    QJsonObject obj;
    if (m_refresh_timestamp_isSet) {
        obj.insert(QString("refreshTimestamp"), ::OpenAPI::toJsonValue(m_refresh_timestamp));
    }
    if (m_status_active_events.size() > 0) {
        obj.insert(QString("statusActiveEvents"), ::OpenAPI::toJsonValue(m_status_active_events));
    }
    if (m_status_banners.size() > 0) {
        obj.insert(QString("statusBanners"), ::OpenAPI::toJsonValue(m_status_banners));
    }
    return obj;
}

QDateTime OAIEmergingIssue::getRefreshTimestamp() const {
    return m_refresh_timestamp;
}
void OAIEmergingIssue::setRefreshTimestamp(const QDateTime &refresh_timestamp) {
    m_refresh_timestamp = refresh_timestamp;
    m_refresh_timestamp_isSet = true;
}

bool OAIEmergingIssue::is_refresh_timestamp_Set() const{
    return m_refresh_timestamp_isSet;
}

bool OAIEmergingIssue::is_refresh_timestamp_Valid() const{
    return m_refresh_timestamp_isValid;
}

QList<OAIStatusActiveEvent> OAIEmergingIssue::getStatusActiveEvents() const {
    return m_status_active_events;
}
void OAIEmergingIssue::setStatusActiveEvents(const QList<OAIStatusActiveEvent> &status_active_events) {
    m_status_active_events = status_active_events;
    m_status_active_events_isSet = true;
}

bool OAIEmergingIssue::is_status_active_events_Set() const{
    return m_status_active_events_isSet;
}

bool OAIEmergingIssue::is_status_active_events_Valid() const{
    return m_status_active_events_isValid;
}

QList<OAIStatusBanner> OAIEmergingIssue::getStatusBanners() const {
    return m_status_banners;
}
void OAIEmergingIssue::setStatusBanners(const QList<OAIStatusBanner> &status_banners) {
    m_status_banners = status_banners;
    m_status_banners_isSet = true;
}

bool OAIEmergingIssue::is_status_banners_Set() const{
    return m_status_banners_isSet;
}

bool OAIEmergingIssue::is_status_banners_Valid() const{
    return m_status_banners_isValid;
}

bool OAIEmergingIssue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_refresh_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_active_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_banners.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmergingIssue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
