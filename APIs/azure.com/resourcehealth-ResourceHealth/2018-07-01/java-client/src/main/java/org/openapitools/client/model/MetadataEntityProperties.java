/*
 * Microsoft.ResourceHealth
 * The Resource Health Client.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MetadataSupportedValueDetail;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The metadata entity properties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:18:52.989190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MetadataEntityProperties {
  /**
   * Gets or Sets applicableScenarios
   */
  @JsonAdapter(ApplicableScenariosEnum.Adapter.class)
  public enum ApplicableScenariosEnum {
    ALERTS("Alerts");

    private String value;

    ApplicableScenariosEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApplicableScenariosEnum fromValue(String value) {
      for (ApplicableScenariosEnum b : ApplicableScenariosEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApplicableScenariosEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApplicableScenariosEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApplicableScenariosEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApplicableScenariosEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ApplicableScenariosEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_APPLICABLE_SCENARIOS = "applicableScenarios";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_SCENARIOS)
  private List<ApplicableScenariosEnum> applicableScenarios = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEPENDS_ON = "dependsOn";
  @SerializedName(SERIALIZED_NAME_DEPENDS_ON)
  private List<String> dependsOn = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_SUPPORTED_VALUES = "supportedValues";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_VALUES)
  private List<MetadataSupportedValueDetail> supportedValues = new ArrayList<>();

  public MetadataEntityProperties() {
  }

  public MetadataEntityProperties applicableScenarios(List<ApplicableScenariosEnum> applicableScenarios) {
    this.applicableScenarios = applicableScenarios;
    return this;
  }

  public MetadataEntityProperties addApplicableScenariosItem(ApplicableScenariosEnum applicableScenariosItem) {
    if (this.applicableScenarios == null) {
      this.applicableScenarios = new ArrayList<>();
    }
    this.applicableScenarios.add(applicableScenariosItem);
    return this;
  }

  /**
   * The list of scenarios applicable to this metadata entity.
   * @return applicableScenarios
   */
  @javax.annotation.Nullable
  public List<ApplicableScenariosEnum> getApplicableScenarios() {
    return applicableScenarios;
  }

  public void setApplicableScenarios(List<ApplicableScenariosEnum> applicableScenarios) {
    this.applicableScenarios = applicableScenarios;
  }


  public MetadataEntityProperties dependsOn(List<String> dependsOn) {
    this.dependsOn = dependsOn;
    return this;
  }

  public MetadataEntityProperties addDependsOnItem(String dependsOnItem) {
    if (this.dependsOn == null) {
      this.dependsOn = new ArrayList<>();
    }
    this.dependsOn.add(dependsOnItem);
    return this;
  }

  /**
   * The list of keys on which this entity depends on.
   * @return dependsOn
   */
  @javax.annotation.Nullable
  public List<String> getDependsOn() {
    return dependsOn;
  }

  public void setDependsOn(List<String> dependsOn) {
    this.dependsOn = dependsOn;
  }


  public MetadataEntityProperties displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public MetadataEntityProperties supportedValues(List<MetadataSupportedValueDetail> supportedValues) {
    this.supportedValues = supportedValues;
    return this;
  }

  public MetadataEntityProperties addSupportedValuesItem(MetadataSupportedValueDetail supportedValuesItem) {
    if (this.supportedValues == null) {
      this.supportedValues = new ArrayList<>();
    }
    this.supportedValues.add(supportedValuesItem);
    return this;
  }

  /**
   * The list of supported values.
   * @return supportedValues
   */
  @javax.annotation.Nullable
  public List<MetadataSupportedValueDetail> getSupportedValues() {
    return supportedValues;
  }

  public void setSupportedValues(List<MetadataSupportedValueDetail> supportedValues) {
    this.supportedValues = supportedValues;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetadataEntityProperties metadataEntityProperties = (MetadataEntityProperties) o;
    return Objects.equals(this.applicableScenarios, metadataEntityProperties.applicableScenarios) &&
        Objects.equals(this.dependsOn, metadataEntityProperties.dependsOn) &&
        Objects.equals(this.displayName, metadataEntityProperties.displayName) &&
        Objects.equals(this.supportedValues, metadataEntityProperties.supportedValues);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicableScenarios, dependsOn, displayName, supportedValues);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetadataEntityProperties {\n");
    sb.append("    applicableScenarios: ").append(toIndentedString(applicableScenarios)).append("\n");
    sb.append("    dependsOn: ").append(toIndentedString(dependsOn)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    supportedValues: ").append(toIndentedString(supportedValues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicableScenarios");
    openapiFields.add("dependsOn");
    openapiFields.add("displayName");
    openapiFields.add("supportedValues");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MetadataEntityProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetadataEntityProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetadataEntityProperties is not found in the empty JSON string", MetadataEntityProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetadataEntityProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetadataEntityProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("applicableScenarios") != null && !jsonObj.get("applicableScenarios").isJsonNull() && !jsonObj.get("applicableScenarios").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicableScenarios` to be an array in the JSON string but got `%s`", jsonObj.get("applicableScenarios").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dependsOn") != null && !jsonObj.get("dependsOn").isJsonNull() && !jsonObj.get("dependsOn").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dependsOn` to be an array in the JSON string but got `%s`", jsonObj.get("dependsOn").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (jsonObj.get("supportedValues") != null && !jsonObj.get("supportedValues").isJsonNull()) {
        JsonArray jsonArraysupportedValues = jsonObj.getAsJsonArray("supportedValues");
        if (jsonArraysupportedValues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("supportedValues").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `supportedValues` to be an array in the JSON string but got `%s`", jsonObj.get("supportedValues").toString()));
          }

          // validate the optional field `supportedValues` (array)
          for (int i = 0; i < jsonArraysupportedValues.size(); i++) {
            MetadataSupportedValueDetail.validateJsonElement(jsonArraysupportedValues.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetadataEntityProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetadataEntityProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetadataEntityProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetadataEntityProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<MetadataEntityProperties>() {
           @Override
           public void write(JsonWriter out, MetadataEntityProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetadataEntityProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MetadataEntityProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MetadataEntityProperties
   * @throws IOException if the JSON string is invalid with respect to MetadataEntityProperties
   */
  public static MetadataEntityProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetadataEntityProperties.class);
  }

  /**
   * Convert an instance of MetadataEntityProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

