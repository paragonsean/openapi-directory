# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status_active_event import StatusActiveEvent
from openapi_server.models.status_banner import StatusBanner
from openapi_server import util


class EmergingIssue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, refresh_timestamp: datetime=None, status_active_events: List[StatusActiveEvent]=None, status_banners: List[StatusBanner]=None):
        """EmergingIssue - a model defined in OpenAPI

        :param refresh_timestamp: The refresh_timestamp of this EmergingIssue.
        :param status_active_events: The status_active_events of this EmergingIssue.
        :param status_banners: The status_banners of this EmergingIssue.
        """
        self.openapi_types = {
            'refresh_timestamp': datetime,
            'status_active_events': List[StatusActiveEvent],
            'status_banners': List[StatusBanner]
        }

        self.attribute_map = {
            'refresh_timestamp': 'refreshTimestamp',
            'status_active_events': 'statusActiveEvents',
            'status_banners': 'statusBanners'
        }

        self._refresh_timestamp = refresh_timestamp
        self._status_active_events = status_active_events
        self._status_banners = status_banners

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmergingIssue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The emergingIssue of this EmergingIssue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def refresh_timestamp(self):
        """Gets the refresh_timestamp of this EmergingIssue.

        Timestamp for when last time refreshed for ongoing emerging issue.

        :return: The refresh_timestamp of this EmergingIssue.
        :rtype: datetime
        """
        return self._refresh_timestamp

    @refresh_timestamp.setter
    def refresh_timestamp(self, refresh_timestamp):
        """Sets the refresh_timestamp of this EmergingIssue.

        Timestamp for when last time refreshed for ongoing emerging issue.

        :param refresh_timestamp: The refresh_timestamp of this EmergingIssue.
        :type refresh_timestamp: datetime
        """

        self._refresh_timestamp = refresh_timestamp

    @property
    def status_active_events(self):
        """Gets the status_active_events of this EmergingIssue.

        The list of emerging issues of active event type.

        :return: The status_active_events of this EmergingIssue.
        :rtype: List[StatusActiveEvent]
        """
        return self._status_active_events

    @status_active_events.setter
    def status_active_events(self, status_active_events):
        """Sets the status_active_events of this EmergingIssue.

        The list of emerging issues of active event type.

        :param status_active_events: The status_active_events of this EmergingIssue.
        :type status_active_events: List[StatusActiveEvent]
        """

        self._status_active_events = status_active_events

    @property
    def status_banners(self):
        """Gets the status_banners of this EmergingIssue.

        The list of emerging issues of banner type.

        :return: The status_banners of this EmergingIssue.
        :rtype: List[StatusBanner]
        """
        return self._status_banners

    @status_banners.setter
    def status_banners(self, status_banners):
        """Sets the status_banners of this EmergingIssue.

        The list of emerging issues of banner type.

        :param status_banners: The status_banners of this EmergingIssue.
        :type status_banners: List[StatusBanner]
        """

        self._status_banners = status_banners
