# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update import Update
from openapi_server import util


class ImpactedServiceRegion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, impacted_region: str=None, impacted_subscriptions: List[str]=None, last_update_time: datetime=None, status: str=None, updates: List[Update]=None):
        """ImpactedServiceRegion - a model defined in OpenAPI

        :param impacted_region: The impacted_region of this ImpactedServiceRegion.
        :param impacted_subscriptions: The impacted_subscriptions of this ImpactedServiceRegion.
        :param last_update_time: The last_update_time of this ImpactedServiceRegion.
        :param status: The status of this ImpactedServiceRegion.
        :param updates: The updates of this ImpactedServiceRegion.
        """
        self.openapi_types = {
            'impacted_region': str,
            'impacted_subscriptions': List[str],
            'last_update_time': datetime,
            'status': str,
            'updates': List[Update]
        }

        self.attribute_map = {
            'impacted_region': 'impactedRegion',
            'impacted_subscriptions': 'impactedSubscriptions',
            'last_update_time': 'lastUpdateTime',
            'status': 'status',
            'updates': 'updates'
        }

        self._impacted_region = impacted_region
        self._impacted_subscriptions = impacted_subscriptions
        self._last_update_time = last_update_time
        self._status = status
        self._updates = updates

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImpactedServiceRegion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The impactedServiceRegion of this ImpactedServiceRegion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def impacted_region(self):
        """Gets the impacted_region of this ImpactedServiceRegion.

        Impacted region name.

        :return: The impacted_region of this ImpactedServiceRegion.
        :rtype: str
        """
        return self._impacted_region

    @impacted_region.setter
    def impacted_region(self, impacted_region):
        """Sets the impacted_region of this ImpactedServiceRegion.

        Impacted region name.

        :param impacted_region: The impacted_region of this ImpactedServiceRegion.
        :type impacted_region: str
        """

        self._impacted_region = impacted_region

    @property
    def impacted_subscriptions(self):
        """Gets the impacted_subscriptions of this ImpactedServiceRegion.

        List subscription impacted by the service health event.

        :return: The impacted_subscriptions of this ImpactedServiceRegion.
        :rtype: List[str]
        """
        return self._impacted_subscriptions

    @impacted_subscriptions.setter
    def impacted_subscriptions(self, impacted_subscriptions):
        """Sets the impacted_subscriptions of this ImpactedServiceRegion.

        List subscription impacted by the service health event.

        :param impacted_subscriptions: The impacted_subscriptions of this ImpactedServiceRegion.
        :type impacted_subscriptions: List[str]
        """

        self._impacted_subscriptions = impacted_subscriptions

    @property
    def last_update_time(self):
        """Gets the last_update_time of this ImpactedServiceRegion.

        It provides the Timestamp for when the last update for the service health event.

        :return: The last_update_time of this ImpactedServiceRegion.
        :rtype: datetime
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):
        """Sets the last_update_time of this ImpactedServiceRegion.

        It provides the Timestamp for when the last update for the service health event.

        :param last_update_time: The last_update_time of this ImpactedServiceRegion.
        :type last_update_time: datetime
        """

        self._last_update_time = last_update_time

    @property
    def status(self):
        """Gets the status of this ImpactedServiceRegion.

        Current status of event in the region.

        :return: The status of this ImpactedServiceRegion.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ImpactedServiceRegion.

        Current status of event in the region.

        :param status: The status of this ImpactedServiceRegion.
        :type status: str
        """
        allowed_values = ["Active", "Resolved"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updates(self):
        """Gets the updates of this ImpactedServiceRegion.

        List of updates for given service health event.

        :return: The updates of this ImpactedServiceRegion.
        :rtype: List[Update]
        """
        return self._updates

    @updates.setter
    def updates(self, updates):
        """Sets the updates of this ImpactedServiceRegion.

        List of updates for given service health event.

        :param updates: The updates of this ImpactedServiceRegion.
        :type updates: List[Update]
        """

        self._updates = updates
