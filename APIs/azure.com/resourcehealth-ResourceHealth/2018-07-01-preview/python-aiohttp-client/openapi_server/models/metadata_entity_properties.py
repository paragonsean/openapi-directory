# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metadata_supported_value_detail import MetadataSupportedValueDetail
from openapi_server import util


class MetadataEntityProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applicable_scenarios: List[str]=None, depends_on: List[str]=None, display_name: str=None, supported_values: List[MetadataSupportedValueDetail]=None):
        """MetadataEntityProperties - a model defined in OpenAPI

        :param applicable_scenarios: The applicable_scenarios of this MetadataEntityProperties.
        :param depends_on: The depends_on of this MetadataEntityProperties.
        :param display_name: The display_name of this MetadataEntityProperties.
        :param supported_values: The supported_values of this MetadataEntityProperties.
        """
        self.openapi_types = {
            'applicable_scenarios': List[str],
            'depends_on': List[str],
            'display_name': str,
            'supported_values': List[MetadataSupportedValueDetail]
        }

        self.attribute_map = {
            'applicable_scenarios': 'applicableScenarios',
            'depends_on': 'dependsOn',
            'display_name': 'displayName',
            'supported_values': 'supportedValues'
        }

        self._applicable_scenarios = applicable_scenarios
        self._depends_on = depends_on
        self._display_name = display_name
        self._supported_values = supported_values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetadataEntityProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetadataEntityProperties of this MetadataEntityProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applicable_scenarios(self):
        """Gets the applicable_scenarios of this MetadataEntityProperties.

        The list of scenarios applicable to this metadata entity.

        :return: The applicable_scenarios of this MetadataEntityProperties.
        :rtype: List[str]
        """
        return self._applicable_scenarios

    @applicable_scenarios.setter
    def applicable_scenarios(self, applicable_scenarios):
        """Sets the applicable_scenarios of this MetadataEntityProperties.

        The list of scenarios applicable to this metadata entity.

        :param applicable_scenarios: The applicable_scenarios of this MetadataEntityProperties.
        :type applicable_scenarios: List[str]
        """
        allowed_values = ["Alerts"]  # noqa: E501
        if not set(applicable_scenarios).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `applicable_scenarios` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(applicable_scenarios) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._applicable_scenarios = applicable_scenarios

    @property
    def depends_on(self):
        """Gets the depends_on of this MetadataEntityProperties.

        The list of keys on which this entity depends on.

        :return: The depends_on of this MetadataEntityProperties.
        :rtype: List[str]
        """
        return self._depends_on

    @depends_on.setter
    def depends_on(self, depends_on):
        """Sets the depends_on of this MetadataEntityProperties.

        The list of keys on which this entity depends on.

        :param depends_on: The depends_on of this MetadataEntityProperties.
        :type depends_on: List[str]
        """

        self._depends_on = depends_on

    @property
    def display_name(self):
        """Gets the display_name of this MetadataEntityProperties.

        The display name.

        :return: The display_name of this MetadataEntityProperties.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this MetadataEntityProperties.

        The display name.

        :param display_name: The display_name of this MetadataEntityProperties.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def supported_values(self):
        """Gets the supported_values of this MetadataEntityProperties.

        The list of supported values.

        :return: The supported_values of this MetadataEntityProperties.
        :rtype: List[MetadataSupportedValueDetail]
        """
        return self._supported_values

    @supported_values.setter
    def supported_values(self, supported_values):
        """Sets the supported_values of this MetadataEntityProperties.

        The list of supported values.

        :param supported_values: The supported_values of this MetadataEntityProperties.
        :type supported_values: List[MetadataSupportedValueDetail]
        """

        self._supported_values = supported_values
