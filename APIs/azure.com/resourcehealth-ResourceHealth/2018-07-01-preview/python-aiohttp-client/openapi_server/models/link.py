# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.link_display_text import LinkDisplayText
from openapi_server import util


class Link(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blade_name: str=None, display_text: LinkDisplayText=None, extension_name: str=None, parameters: object=None, type: str=None):
        """Link - a model defined in OpenAPI

        :param blade_name: The blade_name of this Link.
        :param display_text: The display_text of this Link.
        :param extension_name: The extension_name of this Link.
        :param parameters: The parameters of this Link.
        :param type: The type of this Link.
        """
        self.openapi_types = {
            'blade_name': str,
            'display_text': LinkDisplayText,
            'extension_name': str,
            'parameters': object,
            'type': str
        }

        self.attribute_map = {
            'blade_name': 'bladeName',
            'display_text': 'displayText',
            'extension_name': 'extensionName',
            'parameters': 'parameters',
            'type': 'type'
        }

        self._blade_name = blade_name
        self._display_text = display_text
        self._extension_name = extension_name
        self._parameters = parameters
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Link':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The link of this Link.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blade_name(self):
        """Gets the blade_name of this Link.

        It provides the name of portal extension blade to produce link for given service health event.

        :return: The blade_name of this Link.
        :rtype: str
        """
        return self._blade_name

    @blade_name.setter
    def blade_name(self, blade_name):
        """Sets the blade_name of this Link.

        It provides the name of portal extension blade to produce link for given service health event.

        :param blade_name: The blade_name of this Link.
        :type blade_name: str
        """

        self._blade_name = blade_name

    @property
    def display_text(self):
        """Gets the display_text of this Link.


        :return: The display_text of this Link.
        :rtype: LinkDisplayText
        """
        return self._display_text

    @display_text.setter
    def display_text(self, display_text):
        """Sets the display_text of this Link.


        :param display_text: The display_text of this Link.
        :type display_text: LinkDisplayText
        """

        self._display_text = display_text

    @property
    def extension_name(self):
        """Gets the extension_name of this Link.

        It provides the name of portal extension to produce link for given service health event.

        :return: The extension_name of this Link.
        :rtype: str
        """
        return self._extension_name

    @extension_name.setter
    def extension_name(self, extension_name):
        """Sets the extension_name of this Link.

        It provides the name of portal extension to produce link for given service health event.

        :param extension_name: The extension_name of this Link.
        :type extension_name: str
        """

        self._extension_name = extension_name

    @property
    def parameters(self):
        """Gets the parameters of this Link.

        It provides a map of parameter name and value for portal extension blade to produce lik for given service health event.

        :return: The parameters of this Link.
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this Link.

        It provides a map of parameter name and value for portal extension blade to produce lik for given service health event.

        :param parameters: The parameters of this Link.
        :type parameters: object
        """

        self._parameters = parameters

    @property
    def type(self):
        """Gets the type of this Link.

        Type of link.

        :return: The type of this Link.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Link.

        Type of link.

        :param type: The type of this Link.
        :type type: str
        """
        allowed_values = ["Button", "Hyperlink"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
