# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.impacted_region import ImpactedRegion
from openapi_server import util


class EmergingIssueImpact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, regions: List[ImpactedRegion]=None):
        """EmergingIssueImpact - a model defined in OpenAPI

        :param id: The id of this EmergingIssueImpact.
        :param name: The name of this EmergingIssueImpact.
        :param regions: The regions of this EmergingIssueImpact.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'regions': List[ImpactedRegion]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'regions': 'regions'
        }

        self._id = id
        self._name = name
        self._regions = regions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmergingIssueImpact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The emergingIssueImpact of this EmergingIssueImpact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this EmergingIssueImpact.

        The impacted service id.

        :return: The id of this EmergingIssueImpact.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmergingIssueImpact.

        The impacted service id.

        :param id: The id of this EmergingIssueImpact.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this EmergingIssueImpact.

        The impacted service name.

        :return: The name of this EmergingIssueImpact.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EmergingIssueImpact.

        The impacted service name.

        :param name: The name of this EmergingIssueImpact.
        :type name: str
        """

        self._name = name

    @property
    def regions(self):
        """Gets the regions of this EmergingIssueImpact.

        The list of impacted regions for corresponding emerging issues.

        :return: The regions of this EmergingIssueImpact.
        :rtype: List[ImpactedRegion]
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this EmergingIssueImpact.

        The list of impacted regions for corresponding emerging issues.

        :param regions: The regions of this EmergingIssueImpact.
        :type regions: List[ImpactedRegion]
        """

        self._regions = regions
