# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.availability_status_properties_recently_resolved import AvailabilityStatusPropertiesRecentlyResolved
from openapi_server.models.recommended_action import RecommendedAction
from openapi_server.models.service_impacting_event import ServiceImpactingEvent
from openapi_server import util


class AvailabilityStatusProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability_state: str=None, detailed_status: str=None, health_event_category: str=None, health_event_cause: str=None, health_event_id: str=None, health_event_type: str=None, occured_time: datetime=None, reason_chronicity: str=None, reason_type: str=None, recently_resolved: AvailabilityStatusPropertiesRecentlyResolved=None, recommended_actions: List[RecommendedAction]=None, reported_time: datetime=None, resolution_eta: datetime=None, root_cause_attribution_time: datetime=None, service_impacting_events: List[ServiceImpactingEvent]=None, summary: str=None):
        """AvailabilityStatusProperties - a model defined in OpenAPI

        :param availability_state: The availability_state of this AvailabilityStatusProperties.
        :param detailed_status: The detailed_status of this AvailabilityStatusProperties.
        :param health_event_category: The health_event_category of this AvailabilityStatusProperties.
        :param health_event_cause: The health_event_cause of this AvailabilityStatusProperties.
        :param health_event_id: The health_event_id of this AvailabilityStatusProperties.
        :param health_event_type: The health_event_type of this AvailabilityStatusProperties.
        :param occured_time: The occured_time of this AvailabilityStatusProperties.
        :param reason_chronicity: The reason_chronicity of this AvailabilityStatusProperties.
        :param reason_type: The reason_type of this AvailabilityStatusProperties.
        :param recently_resolved: The recently_resolved of this AvailabilityStatusProperties.
        :param recommended_actions: The recommended_actions of this AvailabilityStatusProperties.
        :param reported_time: The reported_time of this AvailabilityStatusProperties.
        :param resolution_eta: The resolution_eta of this AvailabilityStatusProperties.
        :param root_cause_attribution_time: The root_cause_attribution_time of this AvailabilityStatusProperties.
        :param service_impacting_events: The service_impacting_events of this AvailabilityStatusProperties.
        :param summary: The summary of this AvailabilityStatusProperties.
        """
        self.openapi_types = {
            'availability_state': str,
            'detailed_status': str,
            'health_event_category': str,
            'health_event_cause': str,
            'health_event_id': str,
            'health_event_type': str,
            'occured_time': datetime,
            'reason_chronicity': str,
            'reason_type': str,
            'recently_resolved': AvailabilityStatusPropertiesRecentlyResolved,
            'recommended_actions': List[RecommendedAction],
            'reported_time': datetime,
            'resolution_eta': datetime,
            'root_cause_attribution_time': datetime,
            'service_impacting_events': List[ServiceImpactingEvent],
            'summary': str
        }

        self.attribute_map = {
            'availability_state': 'availabilityState',
            'detailed_status': 'detailedStatus',
            'health_event_category': 'healthEventCategory',
            'health_event_cause': 'healthEventCause',
            'health_event_id': 'healthEventId',
            'health_event_type': 'healthEventType',
            'occured_time': 'occuredTime',
            'reason_chronicity': 'reasonChronicity',
            'reason_type': 'reasonType',
            'recently_resolved': 'recentlyResolved',
            'recommended_actions': 'recommendedActions',
            'reported_time': 'reportedTime',
            'resolution_eta': 'resolutionETA',
            'root_cause_attribution_time': 'rootCauseAttributionTime',
            'service_impacting_events': 'serviceImpactingEvents',
            'summary': 'summary'
        }

        self._availability_state = availability_state
        self._detailed_status = detailed_status
        self._health_event_category = health_event_category
        self._health_event_cause = health_event_cause
        self._health_event_id = health_event_id
        self._health_event_type = health_event_type
        self._occured_time = occured_time
        self._reason_chronicity = reason_chronicity
        self._reason_type = reason_type
        self._recently_resolved = recently_resolved
        self._recommended_actions = recommended_actions
        self._reported_time = reported_time
        self._resolution_eta = resolution_eta
        self._root_cause_attribution_time = root_cause_attribution_time
        self._service_impacting_events = service_impacting_events
        self._summary = summary

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AvailabilityStatusProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The availabilityStatus_properties of this AvailabilityStatusProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability_state(self):
        """Gets the availability_state of this AvailabilityStatusProperties.

        Availability status of the resource. When it is null, this availabilityStatus object represents an availability impacting event

        :return: The availability_state of this AvailabilityStatusProperties.
        :rtype: str
        """
        return self._availability_state

    @availability_state.setter
    def availability_state(self, availability_state):
        """Sets the availability_state of this AvailabilityStatusProperties.

        Availability status of the resource. When it is null, this availabilityStatus object represents an availability impacting event

        :param availability_state: The availability_state of this AvailabilityStatusProperties.
        :type availability_state: str
        """
        allowed_values = ["Available", "Unavailable", "Degraded", "Unknown"]  # noqa: E501
        if availability_state not in allowed_values:
            raise ValueError(
                "Invalid value for `availability_state` ({0}), must be one of {1}"
                .format(availability_state, allowed_values)
            )

        self._availability_state = availability_state

    @property
    def detailed_status(self):
        """Gets the detailed_status of this AvailabilityStatusProperties.

        Details of the availability status.

        :return: The detailed_status of this AvailabilityStatusProperties.
        :rtype: str
        """
        return self._detailed_status

    @detailed_status.setter
    def detailed_status(self, detailed_status):
        """Sets the detailed_status of this AvailabilityStatusProperties.

        Details of the availability status.

        :param detailed_status: The detailed_status of this AvailabilityStatusProperties.
        :type detailed_status: str
        """

        self._detailed_status = detailed_status

    @property
    def health_event_category(self):
        """Gets the health_event_category of this AvailabilityStatusProperties.

        In case of an availability impacting event, it describes the category of a PlatformInitiated health impacting event. Examples are Planned, Unplanned etc.

        :return: The health_event_category of this AvailabilityStatusProperties.
        :rtype: str
        """
        return self._health_event_category

    @health_event_category.setter
    def health_event_category(self, health_event_category):
        """Sets the health_event_category of this AvailabilityStatusProperties.

        In case of an availability impacting event, it describes the category of a PlatformInitiated health impacting event. Examples are Planned, Unplanned etc.

        :param health_event_category: The health_event_category of this AvailabilityStatusProperties.
        :type health_event_category: str
        """

        self._health_event_category = health_event_category

    @property
    def health_event_cause(self):
        """Gets the health_event_cause of this AvailabilityStatusProperties.

        In case of an availability impacting event, it describes where the health impacting event was originated. Examples are PlatformInitiated, UserInitiated etc.

        :return: The health_event_cause of this AvailabilityStatusProperties.
        :rtype: str
        """
        return self._health_event_cause

    @health_event_cause.setter
    def health_event_cause(self, health_event_cause):
        """Sets the health_event_cause of this AvailabilityStatusProperties.

        In case of an availability impacting event, it describes where the health impacting event was originated. Examples are PlatformInitiated, UserInitiated etc.

        :param health_event_cause: The health_event_cause of this AvailabilityStatusProperties.
        :type health_event_cause: str
        """

        self._health_event_cause = health_event_cause

    @property
    def health_event_id(self):
        """Gets the health_event_id of this AvailabilityStatusProperties.

        It is a unique Id that identifies the event

        :return: The health_event_id of this AvailabilityStatusProperties.
        :rtype: str
        """
        return self._health_event_id

    @health_event_id.setter
    def health_event_id(self, health_event_id):
        """Sets the health_event_id of this AvailabilityStatusProperties.

        It is a unique Id that identifies the event

        :param health_event_id: The health_event_id of this AvailabilityStatusProperties.
        :type health_event_id: str
        """

        self._health_event_id = health_event_id

    @property
    def health_event_type(self):
        """Gets the health_event_type of this AvailabilityStatusProperties.

        In case of an availability impacting event, it describes when the health impacting event was originated. Examples are Lifecycle, Downtime, Fault Analysis etc.

        :return: The health_event_type of this AvailabilityStatusProperties.
        :rtype: str
        """
        return self._health_event_type

    @health_event_type.setter
    def health_event_type(self, health_event_type):
        """Sets the health_event_type of this AvailabilityStatusProperties.

        In case of an availability impacting event, it describes when the health impacting event was originated. Examples are Lifecycle, Downtime, Fault Analysis etc.

        :param health_event_type: The health_event_type of this AvailabilityStatusProperties.
        :type health_event_type: str
        """

        self._health_event_type = health_event_type

    @property
    def occured_time(self):
        """Gets the occured_time of this AvailabilityStatusProperties.

        Timestamp for when last change in health status occurred.

        :return: The occured_time of this AvailabilityStatusProperties.
        :rtype: datetime
        """
        return self._occured_time

    @occured_time.setter
    def occured_time(self, occured_time):
        """Sets the occured_time of this AvailabilityStatusProperties.

        Timestamp for when last change in health status occurred.

        :param occured_time: The occured_time of this AvailabilityStatusProperties.
        :type occured_time: datetime
        """

        self._occured_time = occured_time

    @property
    def reason_chronicity(self):
        """Gets the reason_chronicity of this AvailabilityStatusProperties.

        Chronicity of the availability transition.

        :return: The reason_chronicity of this AvailabilityStatusProperties.
        :rtype: str
        """
        return self._reason_chronicity

    @reason_chronicity.setter
    def reason_chronicity(self, reason_chronicity):
        """Sets the reason_chronicity of this AvailabilityStatusProperties.

        Chronicity of the availability transition.

        :param reason_chronicity: The reason_chronicity of this AvailabilityStatusProperties.
        :type reason_chronicity: str
        """
        allowed_values = ["Transient", "Persistent"]  # noqa: E501
        if reason_chronicity not in allowed_values:
            raise ValueError(
                "Invalid value for `reason_chronicity` ({0}), must be one of {1}"
                .format(reason_chronicity, allowed_values)
            )

        self._reason_chronicity = reason_chronicity

    @property
    def reason_type(self):
        """Gets the reason_type of this AvailabilityStatusProperties.

        When the resource's availabilityState is Unavailable, it describes where the health impacting event was originated. Examples are planned, unplanned, user initiated or an outage etc.

        :return: The reason_type of this AvailabilityStatusProperties.
        :rtype: str
        """
        return self._reason_type

    @reason_type.setter
    def reason_type(self, reason_type):
        """Sets the reason_type of this AvailabilityStatusProperties.

        When the resource's availabilityState is Unavailable, it describes where the health impacting event was originated. Examples are planned, unplanned, user initiated or an outage etc.

        :param reason_type: The reason_type of this AvailabilityStatusProperties.
        :type reason_type: str
        """

        self._reason_type = reason_type

    @property
    def recently_resolved(self):
        """Gets the recently_resolved of this AvailabilityStatusProperties.


        :return: The recently_resolved of this AvailabilityStatusProperties.
        :rtype: AvailabilityStatusPropertiesRecentlyResolved
        """
        return self._recently_resolved

    @recently_resolved.setter
    def recently_resolved(self, recently_resolved):
        """Sets the recently_resolved of this AvailabilityStatusProperties.


        :param recently_resolved: The recently_resolved of this AvailabilityStatusProperties.
        :type recently_resolved: AvailabilityStatusPropertiesRecentlyResolved
        """

        self._recently_resolved = recently_resolved

    @property
    def recommended_actions(self):
        """Gets the recommended_actions of this AvailabilityStatusProperties.

        Lists actions the user can take based on the current availabilityState of the resource.

        :return: The recommended_actions of this AvailabilityStatusProperties.
        :rtype: List[RecommendedAction]
        """
        return self._recommended_actions

    @recommended_actions.setter
    def recommended_actions(self, recommended_actions):
        """Sets the recommended_actions of this AvailabilityStatusProperties.

        Lists actions the user can take based on the current availabilityState of the resource.

        :param recommended_actions: The recommended_actions of this AvailabilityStatusProperties.
        :type recommended_actions: List[RecommendedAction]
        """

        self._recommended_actions = recommended_actions

    @property
    def reported_time(self):
        """Gets the reported_time of this AvailabilityStatusProperties.

        Timestamp for when the health was last checked. 

        :return: The reported_time of this AvailabilityStatusProperties.
        :rtype: datetime
        """
        return self._reported_time

    @reported_time.setter
    def reported_time(self, reported_time):
        """Sets the reported_time of this AvailabilityStatusProperties.

        Timestamp for when the health was last checked. 

        :param reported_time: The reported_time of this AvailabilityStatusProperties.
        :type reported_time: datetime
        """

        self._reported_time = reported_time

    @property
    def resolution_eta(self):
        """Gets the resolution_eta of this AvailabilityStatusProperties.

        When the resource's availabilityState is Unavailable and the reasonType is not User Initiated, it provides the date and time for when the issue is expected to be resolved.

        :return: The resolution_eta of this AvailabilityStatusProperties.
        :rtype: datetime
        """
        return self._resolution_eta

    @resolution_eta.setter
    def resolution_eta(self, resolution_eta):
        """Sets the resolution_eta of this AvailabilityStatusProperties.

        When the resource's availabilityState is Unavailable and the reasonType is not User Initiated, it provides the date and time for when the issue is expected to be resolved.

        :param resolution_eta: The resolution_eta of this AvailabilityStatusProperties.
        :type resolution_eta: datetime
        """

        self._resolution_eta = resolution_eta

    @property
    def root_cause_attribution_time(self):
        """Gets the root_cause_attribution_time of this AvailabilityStatusProperties.

        When the resource's availabilityState is Unavailable, it provides the Timestamp for when the health impacting event was received.

        :return: The root_cause_attribution_time of this AvailabilityStatusProperties.
        :rtype: datetime
        """
        return self._root_cause_attribution_time

    @root_cause_attribution_time.setter
    def root_cause_attribution_time(self, root_cause_attribution_time):
        """Sets the root_cause_attribution_time of this AvailabilityStatusProperties.

        When the resource's availabilityState is Unavailable, it provides the Timestamp for when the health impacting event was received.

        :param root_cause_attribution_time: The root_cause_attribution_time of this AvailabilityStatusProperties.
        :type root_cause_attribution_time: datetime
        """

        self._root_cause_attribution_time = root_cause_attribution_time

    @property
    def service_impacting_events(self):
        """Gets the service_impacting_events of this AvailabilityStatusProperties.

        Lists the service impacting events that may be affecting the health of the resource.

        :return: The service_impacting_events of this AvailabilityStatusProperties.
        :rtype: List[ServiceImpactingEvent]
        """
        return self._service_impacting_events

    @service_impacting_events.setter
    def service_impacting_events(self, service_impacting_events):
        """Sets the service_impacting_events of this AvailabilityStatusProperties.

        Lists the service impacting events that may be affecting the health of the resource.

        :param service_impacting_events: The service_impacting_events of this AvailabilityStatusProperties.
        :type service_impacting_events: List[ServiceImpactingEvent]
        """

        self._service_impacting_events = service_impacting_events

    @property
    def summary(self):
        """Gets the summary of this AvailabilityStatusProperties.

        Summary description of the availability status.

        :return: The summary of this AvailabilityStatusProperties.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this AvailabilityStatusProperties.

        Summary description of the availability status.

        :param summary: The summary of this AvailabilityStatusProperties.
        :type summary: str
        """

        self._summary = summary
