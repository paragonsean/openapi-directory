/**
 * Microsoft.ResourceHealth
 * The Resource Health Client.
 *
 * The version of the OpenAPI document: 2018-07-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILink::OAILink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILink::OAILink() {
    this->initializeModel();
}

OAILink::~OAILink() {}

void OAILink::initializeModel() {

    m_blade_name_isSet = false;
    m_blade_name_isValid = false;

    m_display_text_isSet = false;
    m_display_text_isValid = false;

    m_extension_name_isSet = false;
    m_extension_name_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAILink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILink::fromJsonObject(QJsonObject json) {

    m_blade_name_isValid = ::OpenAPI::fromJsonValue(m_blade_name, json[QString("bladeName")]);
    m_blade_name_isSet = !json[QString("bladeName")].isNull() && m_blade_name_isValid;

    m_display_text_isValid = ::OpenAPI::fromJsonValue(m_display_text, json[QString("displayText")]);
    m_display_text_isSet = !json[QString("displayText")].isNull() && m_display_text_isValid;

    m_extension_name_isValid = ::OpenAPI::fromJsonValue(m_extension_name, json[QString("extensionName")]);
    m_extension_name_isSet = !json[QString("extensionName")].isNull() && m_extension_name_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAILink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILink::asJsonObject() const {
    QJsonObject obj;
    if (m_blade_name_isSet) {
        obj.insert(QString("bladeName"), ::OpenAPI::toJsonValue(m_blade_name));
    }
    if (m_display_text.isSet()) {
        obj.insert(QString("displayText"), ::OpenAPI::toJsonValue(m_display_text));
    }
    if (m_extension_name_isSet) {
        obj.insert(QString("extensionName"), ::OpenAPI::toJsonValue(m_extension_name));
    }
    if (m_parameters_isSet) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAILink::getBladeName() const {
    return m_blade_name;
}
void OAILink::setBladeName(const QString &blade_name) {
    m_blade_name = blade_name;
    m_blade_name_isSet = true;
}

bool OAILink::is_blade_name_Set() const{
    return m_blade_name_isSet;
}

bool OAILink::is_blade_name_Valid() const{
    return m_blade_name_isValid;
}

OAILink_displayText OAILink::getDisplayText() const {
    return m_display_text;
}
void OAILink::setDisplayText(const OAILink_displayText &display_text) {
    m_display_text = display_text;
    m_display_text_isSet = true;
}

bool OAILink::is_display_text_Set() const{
    return m_display_text_isSet;
}

bool OAILink::is_display_text_Valid() const{
    return m_display_text_isValid;
}

QString OAILink::getExtensionName() const {
    return m_extension_name;
}
void OAILink::setExtensionName(const QString &extension_name) {
    m_extension_name = extension_name;
    m_extension_name_isSet = true;
}

bool OAILink::is_extension_name_Set() const{
    return m_extension_name_isSet;
}

bool OAILink::is_extension_name_Valid() const{
    return m_extension_name_isValid;
}

OAIObject OAILink::getParameters() const {
    return m_parameters;
}
void OAILink::setParameters(const OAIObject &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAILink::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAILink::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAILink::getType() const {
    return m_type;
}
void OAILink::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAILink::is_type_Set() const{
    return m_type_isSet;
}

bool OAILink::is_type_Valid() const{
    return m_type_isValid;
}

bool OAILink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blade_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_text.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILink::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
