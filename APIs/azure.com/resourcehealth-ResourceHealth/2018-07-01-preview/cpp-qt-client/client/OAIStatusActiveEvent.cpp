/**
 * Microsoft.ResourceHealth
 * The Resource Health Client.
 *
 * The version of the OpenAPI document: 2018-07-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatusActiveEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatusActiveEvent::OAIStatusActiveEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatusActiveEvent::OAIStatusActiveEvent() {
    this->initializeModel();
}

OAIStatusActiveEvent::~OAIStatusActiveEvent() {}

void OAIStatusActiveEvent::initializeModel() {

    m_cloud_isSet = false;
    m_cloud_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_impacts_isSet = false;
    m_impacts_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_published_isSet = false;
    m_published_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_stage_isSet = false;
    m_stage_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_tracking_id_isSet = false;
    m_tracking_id_isValid = false;
}

void OAIStatusActiveEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatusActiveEvent::fromJsonObject(QJsonObject json) {

    m_cloud_isValid = ::OpenAPI::fromJsonValue(m_cloud, json[QString("cloud")]);
    m_cloud_isSet = !json[QString("cloud")].isNull() && m_cloud_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_impacts_isValid = ::OpenAPI::fromJsonValue(m_impacts, json[QString("impacts")]);
    m_impacts_isSet = !json[QString("impacts")].isNull() && m_impacts_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("lastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("lastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_published_isValid = ::OpenAPI::fromJsonValue(m_published, json[QString("published")]);
    m_published_isSet = !json[QString("published")].isNull() && m_published_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_stage_isValid = ::OpenAPI::fromJsonValue(m_stage, json[QString("stage")]);
    m_stage_isSet = !json[QString("stage")].isNull() && m_stage_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_tracking_id_isValid = ::OpenAPI::fromJsonValue(m_tracking_id, json[QString("trackingId")]);
    m_tracking_id_isSet = !json[QString("trackingId")].isNull() && m_tracking_id_isValid;
}

QString OAIStatusActiveEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatusActiveEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_cloud_isSet) {
        obj.insert(QString("cloud"), ::OpenAPI::toJsonValue(m_cloud));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_impacts.size() > 0) {
        obj.insert(QString("impacts"), ::OpenAPI::toJsonValue(m_impacts));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("lastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_published_isSet) {
        obj.insert(QString("published"), ::OpenAPI::toJsonValue(m_published));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_stage_isSet) {
        obj.insert(QString("stage"), ::OpenAPI::toJsonValue(m_stage));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_tracking_id_isSet) {
        obj.insert(QString("trackingId"), ::OpenAPI::toJsonValue(m_tracking_id));
    }
    return obj;
}

QString OAIStatusActiveEvent::getCloud() const {
    return m_cloud;
}
void OAIStatusActiveEvent::setCloud(const QString &cloud) {
    m_cloud = cloud;
    m_cloud_isSet = true;
}

bool OAIStatusActiveEvent::is_cloud_Set() const{
    return m_cloud_isSet;
}

bool OAIStatusActiveEvent::is_cloud_Valid() const{
    return m_cloud_isValid;
}

QString OAIStatusActiveEvent::getDescription() const {
    return m_description;
}
void OAIStatusActiveEvent::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIStatusActiveEvent::is_description_Set() const{
    return m_description_isSet;
}

bool OAIStatusActiveEvent::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIEmergingIssueImpact> OAIStatusActiveEvent::getImpacts() const {
    return m_impacts;
}
void OAIStatusActiveEvent::setImpacts(const QList<OAIEmergingIssueImpact> &impacts) {
    m_impacts = impacts;
    m_impacts_isSet = true;
}

bool OAIStatusActiveEvent::is_impacts_Set() const{
    return m_impacts_isSet;
}

bool OAIStatusActiveEvent::is_impacts_Valid() const{
    return m_impacts_isValid;
}

QDateTime OAIStatusActiveEvent::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIStatusActiveEvent::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIStatusActiveEvent::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIStatusActiveEvent::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

bool OAIStatusActiveEvent::isPublished() const {
    return m_published;
}
void OAIStatusActiveEvent::setPublished(const bool &published) {
    m_published = published;
    m_published_isSet = true;
}

bool OAIStatusActiveEvent::is_published_Set() const{
    return m_published_isSet;
}

bool OAIStatusActiveEvent::is_published_Valid() const{
    return m_published_isValid;
}

QString OAIStatusActiveEvent::getSeverity() const {
    return m_severity;
}
void OAIStatusActiveEvent::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIStatusActiveEvent::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIStatusActiveEvent::is_severity_Valid() const{
    return m_severity_isValid;
}

QString OAIStatusActiveEvent::getStage() const {
    return m_stage;
}
void OAIStatusActiveEvent::setStage(const QString &stage) {
    m_stage = stage;
    m_stage_isSet = true;
}

bool OAIStatusActiveEvent::is_stage_Set() const{
    return m_stage_isSet;
}

bool OAIStatusActiveEvent::is_stage_Valid() const{
    return m_stage_isValid;
}

QDateTime OAIStatusActiveEvent::getStartTime() const {
    return m_start_time;
}
void OAIStatusActiveEvent::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIStatusActiveEvent::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIStatusActiveEvent::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIStatusActiveEvent::getTitle() const {
    return m_title;
}
void OAIStatusActiveEvent::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIStatusActiveEvent::is_title_Set() const{
    return m_title_isSet;
}

bool OAIStatusActiveEvent::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIStatusActiveEvent::getTrackingId() const {
    return m_tracking_id;
}
void OAIStatusActiveEvent::setTrackingId(const QString &tracking_id) {
    m_tracking_id = tracking_id;
    m_tracking_id_isSet = true;
}

bool OAIStatusActiveEvent::is_tracking_id_Set() const{
    return m_tracking_id_isSet;
}

bool OAIStatusActiveEvent::is_tracking_id_Valid() const{
    return m_tracking_id_isValid;
}

bool OAIStatusActiveEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cloud_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_impacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatusActiveEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
