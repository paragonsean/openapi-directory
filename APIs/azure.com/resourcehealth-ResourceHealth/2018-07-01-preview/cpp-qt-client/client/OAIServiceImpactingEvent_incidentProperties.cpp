/**
 * Microsoft.ResourceHealth
 * The Resource Health Client.
 *
 * The version of the OpenAPI document: 2018-07-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceImpactingEvent_incidentProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceImpactingEvent_incidentProperties::OAIServiceImpactingEvent_incidentProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceImpactingEvent_incidentProperties::OAIServiceImpactingEvent_incidentProperties() {
    this->initializeModel();
}

OAIServiceImpactingEvent_incidentProperties::~OAIServiceImpactingEvent_incidentProperties() {}

void OAIServiceImpactingEvent_incidentProperties::initializeModel() {

    m_incident_type_isSet = false;
    m_incident_type_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIServiceImpactingEvent_incidentProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceImpactingEvent_incidentProperties::fromJsonObject(QJsonObject json) {

    m_incident_type_isValid = ::OpenAPI::fromJsonValue(m_incident_type, json[QString("incidentType")]);
    m_incident_type_isSet = !json[QString("incidentType")].isNull() && m_incident_type_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIServiceImpactingEvent_incidentProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceImpactingEvent_incidentProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_incident_type_isSet) {
        obj.insert(QString("incidentType"), ::OpenAPI::toJsonValue(m_incident_type));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_service_isSet) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIServiceImpactingEvent_incidentProperties::getIncidentType() const {
    return m_incident_type;
}
void OAIServiceImpactingEvent_incidentProperties::setIncidentType(const QString &incident_type) {
    m_incident_type = incident_type;
    m_incident_type_isSet = true;
}

bool OAIServiceImpactingEvent_incidentProperties::is_incident_type_Set() const{
    return m_incident_type_isSet;
}

bool OAIServiceImpactingEvent_incidentProperties::is_incident_type_Valid() const{
    return m_incident_type_isValid;
}

QString OAIServiceImpactingEvent_incidentProperties::getRegion() const {
    return m_region;
}
void OAIServiceImpactingEvent_incidentProperties::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIServiceImpactingEvent_incidentProperties::is_region_Set() const{
    return m_region_isSet;
}

bool OAIServiceImpactingEvent_incidentProperties::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIServiceImpactingEvent_incidentProperties::getService() const {
    return m_service;
}
void OAIServiceImpactingEvent_incidentProperties::setService(const QString &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIServiceImpactingEvent_incidentProperties::is_service_Set() const{
    return m_service_isSet;
}

bool OAIServiceImpactingEvent_incidentProperties::is_service_Valid() const{
    return m_service_isValid;
}

QString OAIServiceImpactingEvent_incidentProperties::getTitle() const {
    return m_title;
}
void OAIServiceImpactingEvent_incidentProperties::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIServiceImpactingEvent_incidentProperties::is_title_Set() const{
    return m_title_isSet;
}

bool OAIServiceImpactingEvent_incidentProperties::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIServiceImpactingEvent_incidentProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_incident_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceImpactingEvent_incidentProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
