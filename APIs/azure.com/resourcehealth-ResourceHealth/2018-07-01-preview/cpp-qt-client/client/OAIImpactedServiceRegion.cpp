/**
 * Microsoft.ResourceHealth
 * The Resource Health Client.
 *
 * The version of the OpenAPI document: 2018-07-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImpactedServiceRegion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImpactedServiceRegion::OAIImpactedServiceRegion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImpactedServiceRegion::OAIImpactedServiceRegion() {
    this->initializeModel();
}

OAIImpactedServiceRegion::~OAIImpactedServiceRegion() {}

void OAIImpactedServiceRegion::initializeModel() {

    m_impacted_region_isSet = false;
    m_impacted_region_isValid = false;

    m_impacted_subscriptions_isSet = false;
    m_impacted_subscriptions_isValid = false;

    m_last_update_time_isSet = false;
    m_last_update_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_updates_isSet = false;
    m_updates_isValid = false;
}

void OAIImpactedServiceRegion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImpactedServiceRegion::fromJsonObject(QJsonObject json) {

    m_impacted_region_isValid = ::OpenAPI::fromJsonValue(m_impacted_region, json[QString("impactedRegion")]);
    m_impacted_region_isSet = !json[QString("impactedRegion")].isNull() && m_impacted_region_isValid;

    m_impacted_subscriptions_isValid = ::OpenAPI::fromJsonValue(m_impacted_subscriptions, json[QString("impactedSubscriptions")]);
    m_impacted_subscriptions_isSet = !json[QString("impactedSubscriptions")].isNull() && m_impacted_subscriptions_isValid;

    m_last_update_time_isValid = ::OpenAPI::fromJsonValue(m_last_update_time, json[QString("lastUpdateTime")]);
    m_last_update_time_isSet = !json[QString("lastUpdateTime")].isNull() && m_last_update_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_updates_isValid = ::OpenAPI::fromJsonValue(m_updates, json[QString("updates")]);
    m_updates_isSet = !json[QString("updates")].isNull() && m_updates_isValid;
}

QString OAIImpactedServiceRegion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImpactedServiceRegion::asJsonObject() const {
    QJsonObject obj;
    if (m_impacted_region_isSet) {
        obj.insert(QString("impactedRegion"), ::OpenAPI::toJsonValue(m_impacted_region));
    }
    if (m_impacted_subscriptions.size() > 0) {
        obj.insert(QString("impactedSubscriptions"), ::OpenAPI::toJsonValue(m_impacted_subscriptions));
    }
    if (m_last_update_time_isSet) {
        obj.insert(QString("lastUpdateTime"), ::OpenAPI::toJsonValue(m_last_update_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_updates.size() > 0) {
        obj.insert(QString("updates"), ::OpenAPI::toJsonValue(m_updates));
    }
    return obj;
}

QString OAIImpactedServiceRegion::getImpactedRegion() const {
    return m_impacted_region;
}
void OAIImpactedServiceRegion::setImpactedRegion(const QString &impacted_region) {
    m_impacted_region = impacted_region;
    m_impacted_region_isSet = true;
}

bool OAIImpactedServiceRegion::is_impacted_region_Set() const{
    return m_impacted_region_isSet;
}

bool OAIImpactedServiceRegion::is_impacted_region_Valid() const{
    return m_impacted_region_isValid;
}

QList<QString> OAIImpactedServiceRegion::getImpactedSubscriptions() const {
    return m_impacted_subscriptions;
}
void OAIImpactedServiceRegion::setImpactedSubscriptions(const QList<QString> &impacted_subscriptions) {
    m_impacted_subscriptions = impacted_subscriptions;
    m_impacted_subscriptions_isSet = true;
}

bool OAIImpactedServiceRegion::is_impacted_subscriptions_Set() const{
    return m_impacted_subscriptions_isSet;
}

bool OAIImpactedServiceRegion::is_impacted_subscriptions_Valid() const{
    return m_impacted_subscriptions_isValid;
}

QDateTime OAIImpactedServiceRegion::getLastUpdateTime() const {
    return m_last_update_time;
}
void OAIImpactedServiceRegion::setLastUpdateTime(const QDateTime &last_update_time) {
    m_last_update_time = last_update_time;
    m_last_update_time_isSet = true;
}

bool OAIImpactedServiceRegion::is_last_update_time_Set() const{
    return m_last_update_time_isSet;
}

bool OAIImpactedServiceRegion::is_last_update_time_Valid() const{
    return m_last_update_time_isValid;
}

QString OAIImpactedServiceRegion::getStatus() const {
    return m_status;
}
void OAIImpactedServiceRegion::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIImpactedServiceRegion::is_status_Set() const{
    return m_status_isSet;
}

bool OAIImpactedServiceRegion::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAIUpdate> OAIImpactedServiceRegion::getUpdates() const {
    return m_updates;
}
void OAIImpactedServiceRegion::setUpdates(const QList<OAIUpdate> &updates) {
    m_updates = updates;
    m_updates_isSet = true;
}

bool OAIImpactedServiceRegion::is_updates_Set() const{
    return m_updates_isSet;
}

bool OAIImpactedServiceRegion::is_updates_Valid() const{
    return m_updates_isValid;
}

bool OAIImpactedServiceRegion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_impacted_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_impacted_subscriptions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updates.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImpactedServiceRegion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
