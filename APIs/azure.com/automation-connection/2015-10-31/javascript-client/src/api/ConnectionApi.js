/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Connection from '../model/Connection';
import ConnectionCreateOrUpdateParameters from '../model/ConnectionCreateOrUpdateParameters';
import ConnectionListByAutomationAccountDefaultResponse from '../model/ConnectionListByAutomationAccountDefaultResponse';
import ConnectionListResult from '../model/ConnectionListResult';
import ConnectionUpdateParameters from '../model/ConnectionUpdateParameters';

/**
* Connection service.
* @module api/ConnectionApi
* @version 2015-10-31
*/
export default class ConnectionApi {

    /**
    * Constructs a new ConnectionApi. 
    * @alias module:api/ConnectionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the connectionCreateOrUpdate operation.
     * @callback module:api/ConnectionApi~connectionCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Connection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a connection.
     * @param {String} resourceGroupName Name of an Azure Resource group.
     * @param {String} automationAccountName The name of the automation account.
     * @param {String} connectionName The parameters supplied to the create or update connection operation.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client Api Version.
     * @param {module:model/ConnectionCreateOrUpdateParameters} parameters The parameters supplied to the create or update connection operation.
     * @param {module:api/ConnectionApi~connectionCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Connection}
     */
    connectionCreateOrUpdate(resourceGroupName, automationAccountName, connectionName, subscriptionId, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling connectionCreateOrUpdate");
      }
      // verify the required parameter 'automationAccountName' is set
      if (automationAccountName === undefined || automationAccountName === null) {
        throw new Error("Missing the required parameter 'automationAccountName' when calling connectionCreateOrUpdate");
      }
      // verify the required parameter 'connectionName' is set
      if (connectionName === undefined || connectionName === null) {
        throw new Error("Missing the required parameter 'connectionName' when calling connectionCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling connectionCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling connectionCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling connectionCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'automationAccountName': automationAccountName,
        'connectionName': connectionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Connection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/connections/{connectionName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the connectionDelete operation.
     * @callback module:api/ConnectionApi~connectionDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Connection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the connection.
     * @param {String} resourceGroupName Name of an Azure Resource group.
     * @param {String} automationAccountName The name of the automation account.
     * @param {String} connectionName The name of connection.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/ConnectionApi~connectionDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Connection}
     */
    connectionDelete(resourceGroupName, automationAccountName, connectionName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling connectionDelete");
      }
      // verify the required parameter 'automationAccountName' is set
      if (automationAccountName === undefined || automationAccountName === null) {
        throw new Error("Missing the required parameter 'automationAccountName' when calling connectionDelete");
      }
      // verify the required parameter 'connectionName' is set
      if (connectionName === undefined || connectionName === null) {
        throw new Error("Missing the required parameter 'connectionName' when calling connectionDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling connectionDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling connectionDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'automationAccountName': automationAccountName,
        'connectionName': connectionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Connection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/connections/{connectionName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the connectionGet operation.
     * @callback module:api/ConnectionApi~connectionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Connection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the connection identified by connection name.
     * @param {String} resourceGroupName Name of an Azure Resource group.
     * @param {String} automationAccountName The name of the automation account.
     * @param {String} connectionName The name of connection.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/ConnectionApi~connectionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Connection}
     */
    connectionGet(resourceGroupName, automationAccountName, connectionName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling connectionGet");
      }
      // verify the required parameter 'automationAccountName' is set
      if (automationAccountName === undefined || automationAccountName === null) {
        throw new Error("Missing the required parameter 'automationAccountName' when calling connectionGet");
      }
      // verify the required parameter 'connectionName' is set
      if (connectionName === undefined || connectionName === null) {
        throw new Error("Missing the required parameter 'connectionName' when calling connectionGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling connectionGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling connectionGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'automationAccountName': automationAccountName,
        'connectionName': connectionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Connection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/connections/{connectionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the connectionListByAutomationAccount operation.
     * @callback module:api/ConnectionApi~connectionListByAutomationAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of connections.
     * @param {String} resourceGroupName Name of an Azure Resource group.
     * @param {String} automationAccountName The name of the automation account.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/ConnectionApi~connectionListByAutomationAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionListResult}
     */
    connectionListByAutomationAccount(resourceGroupName, automationAccountName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling connectionListByAutomationAccount");
      }
      // verify the required parameter 'automationAccountName' is set
      if (automationAccountName === undefined || automationAccountName === null) {
        throw new Error("Missing the required parameter 'automationAccountName' when calling connectionListByAutomationAccount");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling connectionListByAutomationAccount");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling connectionListByAutomationAccount");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'automationAccountName': automationAccountName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConnectionListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/connections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the connectionUpdate operation.
     * @callback module:api/ConnectionApi~connectionUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Connection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a connection.
     * @param {String} resourceGroupName Name of an Azure Resource group.
     * @param {String} automationAccountName The name of the automation account.
     * @param {String} connectionName The parameters supplied to the update a connection operation.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client Api Version.
     * @param {module:model/ConnectionUpdateParameters} parameters The parameters supplied to the update a connection operation.
     * @param {module:api/ConnectionApi~connectionUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Connection}
     */
    connectionUpdate(resourceGroupName, automationAccountName, connectionName, subscriptionId, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling connectionUpdate");
      }
      // verify the required parameter 'automationAccountName' is set
      if (automationAccountName === undefined || automationAccountName === null) {
        throw new Error("Missing the required parameter 'automationAccountName' when calling connectionUpdate");
      }
      // verify the required parameter 'connectionName' is set
      if (connectionName === undefined || connectionName === null) {
        throw new Error("Missing the required parameter 'connectionName' when calling connectionUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling connectionUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling connectionUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling connectionUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'automationAccountName': automationAccountName,
        'connectionName': connectionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Connection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/connections/{connectionName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
