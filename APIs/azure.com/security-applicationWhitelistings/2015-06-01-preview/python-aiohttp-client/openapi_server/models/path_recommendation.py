# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.configuration_status import ConfigurationStatus
from openapi_server.models.file_type import FileType
from openapi_server.models.publisher_info import PublisherInfo
from openapi_server.models.recommendation_action import RecommendationAction
from openapi_server.models.recommendation_type import RecommendationType
from openapi_server.models.user_recommendation import UserRecommendation
from openapi_server import util


class PathRecommendation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: RecommendationAction=None, common: bool=None, configuration_status: ConfigurationStatus=None, file_type: FileType=None, path: str=None, publisher_info: PublisherInfo=None, type: RecommendationType=None, user_sids: List[str]=None, usernames: List[UserRecommendation]=None):
        """PathRecommendation - a model defined in OpenAPI

        :param action: The action of this PathRecommendation.
        :param common: The common of this PathRecommendation.
        :param configuration_status: The configuration_status of this PathRecommendation.
        :param file_type: The file_type of this PathRecommendation.
        :param path: The path of this PathRecommendation.
        :param publisher_info: The publisher_info of this PathRecommendation.
        :param type: The type of this PathRecommendation.
        :param user_sids: The user_sids of this PathRecommendation.
        :param usernames: The usernames of this PathRecommendation.
        """
        self.openapi_types = {
            'action': RecommendationAction,
            'common': bool,
            'configuration_status': ConfigurationStatus,
            'file_type': FileType,
            'path': str,
            'publisher_info': PublisherInfo,
            'type': RecommendationType,
            'user_sids': List[str],
            'usernames': List[UserRecommendation]
        }

        self.attribute_map = {
            'action': 'action',
            'common': 'common',
            'configuration_status': 'configurationStatus',
            'file_type': 'fileType',
            'path': 'path',
            'publisher_info': 'publisherInfo',
            'type': 'type',
            'user_sids': 'userSids',
            'usernames': 'usernames'
        }

        self._action = action
        self._common = common
        self._configuration_status = configuration_status
        self._file_type = file_type
        self._path = path
        self._publisher_info = publisher_info
        self._type = type
        self._user_sids = user_sids
        self._usernames = usernames

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PathRecommendation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PathRecommendation of this PathRecommendation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this PathRecommendation.


        :return: The action of this PathRecommendation.
        :rtype: RecommendationAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this PathRecommendation.


        :param action: The action of this PathRecommendation.
        :type action: RecommendationAction
        """

        self._action = action

    @property
    def common(self):
        """Gets the common of this PathRecommendation.

        Whether the path is commonly run on the machine

        :return: The common of this PathRecommendation.
        :rtype: bool
        """
        return self._common

    @common.setter
    def common(self, common):
        """Sets the common of this PathRecommendation.

        Whether the path is commonly run on the machine

        :param common: The common of this PathRecommendation.
        :type common: bool
        """

        self._common = common

    @property
    def configuration_status(self):
        """Gets the configuration_status of this PathRecommendation.


        :return: The configuration_status of this PathRecommendation.
        :rtype: ConfigurationStatus
        """
        return self._configuration_status

    @configuration_status.setter
    def configuration_status(self, configuration_status):
        """Sets the configuration_status of this PathRecommendation.


        :param configuration_status: The configuration_status of this PathRecommendation.
        :type configuration_status: ConfigurationStatus
        """

        self._configuration_status = configuration_status

    @property
    def file_type(self):
        """Gets the file_type of this PathRecommendation.


        :return: The file_type of this PathRecommendation.
        :rtype: FileType
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this PathRecommendation.


        :param file_type: The file_type of this PathRecommendation.
        :type file_type: FileType
        """

        self._file_type = file_type

    @property
    def path(self):
        """Gets the path of this PathRecommendation.

        The full path to whitelist

        :return: The path of this PathRecommendation.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this PathRecommendation.

        The full path to whitelist

        :param path: The path of this PathRecommendation.
        :type path: str
        """

        self._path = path

    @property
    def publisher_info(self):
        """Gets the publisher_info of this PathRecommendation.


        :return: The publisher_info of this PathRecommendation.
        :rtype: PublisherInfo
        """
        return self._publisher_info

    @publisher_info.setter
    def publisher_info(self, publisher_info):
        """Sets the publisher_info of this PathRecommendation.


        :param publisher_info: The publisher_info of this PathRecommendation.
        :type publisher_info: PublisherInfo
        """

        self._publisher_info = publisher_info

    @property
    def type(self):
        """Gets the type of this PathRecommendation.


        :return: The type of this PathRecommendation.
        :rtype: RecommendationType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PathRecommendation.


        :param type: The type of this PathRecommendation.
        :type type: RecommendationType
        """

        self._type = type

    @property
    def user_sids(self):
        """Gets the user_sids of this PathRecommendation.


        :return: The user_sids of this PathRecommendation.
        :rtype: List[str]
        """
        return self._user_sids

    @user_sids.setter
    def user_sids(self, user_sids):
        """Sets the user_sids of this PathRecommendation.


        :param user_sids: The user_sids of this PathRecommendation.
        :type user_sids: List[str]
        """

        self._user_sids = user_sids

    @property
    def usernames(self):
        """Gets the usernames of this PathRecommendation.


        :return: The usernames of this PathRecommendation.
        :rtype: List[UserRecommendation]
        """
        return self._usernames

    @usernames.setter
    def usernames(self, usernames):
        """Sets the usernames of this PathRecommendation.


        :param usernames: The usernames of this PathRecommendation.
        :type usernames: List[UserRecommendation]
        """

        self._usernames = usernames
