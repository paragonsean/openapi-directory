/*
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConfigurationStatus;
import org.openapitools.client.model.FileType;
import org.openapitools.client.model.PublisherInfo;
import org.openapitools.client.model.RecommendationAction;
import org.openapitools.client.model.RecommendationType;
import org.openapitools.client.model.UserRecommendation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a path that is recommended to be allowed and its properties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:19:02.319495-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PathRecommendation {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private RecommendationAction action;

  public static final String SERIALIZED_NAME_COMMON = "common";
  @SerializedName(SERIALIZED_NAME_COMMON)
  private Boolean common;

  public static final String SERIALIZED_NAME_CONFIGURATION_STATUS = "configurationStatus";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_STATUS)
  private ConfigurationStatus configurationStatus;

  public static final String SERIALIZED_NAME_FILE_TYPE = "fileType";
  @SerializedName(SERIALIZED_NAME_FILE_TYPE)
  private FileType fileType;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PUBLISHER_INFO = "publisherInfo";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_INFO)
  private PublisherInfo publisherInfo;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private RecommendationType type;

  public static final String SERIALIZED_NAME_USER_SIDS = "userSids";
  @SerializedName(SERIALIZED_NAME_USER_SIDS)
  private List<String> userSids = new ArrayList<>();

  public static final String SERIALIZED_NAME_USERNAMES = "usernames";
  @SerializedName(SERIALIZED_NAME_USERNAMES)
  private List<UserRecommendation> usernames = new ArrayList<>();

  public PathRecommendation() {
  }

  public PathRecommendation action(RecommendationAction action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nullable
  public RecommendationAction getAction() {
    return action;
  }

  public void setAction(RecommendationAction action) {
    this.action = action;
  }


  public PathRecommendation common(Boolean common) {
    this.common = common;
    return this;
  }

  /**
   * Whether the path is commonly run on the machine
   * @return common
   */
  @javax.annotation.Nullable
  public Boolean getCommon() {
    return common;
  }

  public void setCommon(Boolean common) {
    this.common = common;
  }


  public PathRecommendation configurationStatus(ConfigurationStatus configurationStatus) {
    this.configurationStatus = configurationStatus;
    return this;
  }

  /**
   * Get configurationStatus
   * @return configurationStatus
   */
  @javax.annotation.Nullable
  public ConfigurationStatus getConfigurationStatus() {
    return configurationStatus;
  }

  public void setConfigurationStatus(ConfigurationStatus configurationStatus) {
    this.configurationStatus = configurationStatus;
  }


  public PathRecommendation fileType(FileType fileType) {
    this.fileType = fileType;
    return this;
  }

  /**
   * Get fileType
   * @return fileType
   */
  @javax.annotation.Nullable
  public FileType getFileType() {
    return fileType;
  }

  public void setFileType(FileType fileType) {
    this.fileType = fileType;
  }


  public PathRecommendation path(String path) {
    this.path = path;
    return this;
  }

  /**
   * The full path to whitelist
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public PathRecommendation publisherInfo(PublisherInfo publisherInfo) {
    this.publisherInfo = publisherInfo;
    return this;
  }

  /**
   * Get publisherInfo
   * @return publisherInfo
   */
  @javax.annotation.Nullable
  public PublisherInfo getPublisherInfo() {
    return publisherInfo;
  }

  public void setPublisherInfo(PublisherInfo publisherInfo) {
    this.publisherInfo = publisherInfo;
  }


  public PathRecommendation type(RecommendationType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public RecommendationType getType() {
    return type;
  }

  public void setType(RecommendationType type) {
    this.type = type;
  }


  public PathRecommendation userSids(List<String> userSids) {
    this.userSids = userSids;
    return this;
  }

  public PathRecommendation addUserSidsItem(String userSidsItem) {
    if (this.userSids == null) {
      this.userSids = new ArrayList<>();
    }
    this.userSids.add(userSidsItem);
    return this;
  }

  /**
   * Get userSids
   * @return userSids
   */
  @javax.annotation.Nullable
  public List<String> getUserSids() {
    return userSids;
  }

  public void setUserSids(List<String> userSids) {
    this.userSids = userSids;
  }


  public PathRecommendation usernames(List<UserRecommendation> usernames) {
    this.usernames = usernames;
    return this;
  }

  public PathRecommendation addUsernamesItem(UserRecommendation usernamesItem) {
    if (this.usernames == null) {
      this.usernames = new ArrayList<>();
    }
    this.usernames.add(usernamesItem);
    return this;
  }

  /**
   * Get usernames
   * @return usernames
   */
  @javax.annotation.Nullable
  public List<UserRecommendation> getUsernames() {
    return usernames;
  }

  public void setUsernames(List<UserRecommendation> usernames) {
    this.usernames = usernames;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PathRecommendation pathRecommendation = (PathRecommendation) o;
    return Objects.equals(this.action, pathRecommendation.action) &&
        Objects.equals(this.common, pathRecommendation.common) &&
        Objects.equals(this.configurationStatus, pathRecommendation.configurationStatus) &&
        Objects.equals(this.fileType, pathRecommendation.fileType) &&
        Objects.equals(this.path, pathRecommendation.path) &&
        Objects.equals(this.publisherInfo, pathRecommendation.publisherInfo) &&
        Objects.equals(this.type, pathRecommendation.type) &&
        Objects.equals(this.userSids, pathRecommendation.userSids) &&
        Objects.equals(this.usernames, pathRecommendation.usernames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, common, configurationStatus, fileType, path, publisherInfo, type, userSids, usernames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PathRecommendation {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    common: ").append(toIndentedString(common)).append("\n");
    sb.append("    configurationStatus: ").append(toIndentedString(configurationStatus)).append("\n");
    sb.append("    fileType: ").append(toIndentedString(fileType)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    publisherInfo: ").append(toIndentedString(publisherInfo)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    userSids: ").append(toIndentedString(userSids)).append("\n");
    sb.append("    usernames: ").append(toIndentedString(usernames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("common");
    openapiFields.add("configurationStatus");
    openapiFields.add("fileType");
    openapiFields.add("path");
    openapiFields.add("publisherInfo");
    openapiFields.add("type");
    openapiFields.add("userSids");
    openapiFields.add("usernames");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PathRecommendation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PathRecommendation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PathRecommendation is not found in the empty JSON string", PathRecommendation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PathRecommendation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PathRecommendation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `action`
      if (jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) {
        RecommendationAction.validateJsonElement(jsonObj.get("action"));
      }
      // validate the optional field `configurationStatus`
      if (jsonObj.get("configurationStatus") != null && !jsonObj.get("configurationStatus").isJsonNull()) {
        ConfigurationStatus.validateJsonElement(jsonObj.get("configurationStatus"));
      }
      // validate the optional field `fileType`
      if (jsonObj.get("fileType") != null && !jsonObj.get("fileType").isJsonNull()) {
        FileType.validateJsonElement(jsonObj.get("fileType"));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      // validate the optional field `publisherInfo`
      if (jsonObj.get("publisherInfo") != null && !jsonObj.get("publisherInfo").isJsonNull()) {
        PublisherInfo.validateJsonElement(jsonObj.get("publisherInfo"));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        RecommendationType.validateJsonElement(jsonObj.get("type"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("userSids") != null && !jsonObj.get("userSids").isJsonNull() && !jsonObj.get("userSids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `userSids` to be an array in the JSON string but got `%s`", jsonObj.get("userSids").toString()));
      }
      if (jsonObj.get("usernames") != null && !jsonObj.get("usernames").isJsonNull()) {
        JsonArray jsonArrayusernames = jsonObj.getAsJsonArray("usernames");
        if (jsonArrayusernames != null) {
          // ensure the json data is an array
          if (!jsonObj.get("usernames").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `usernames` to be an array in the JSON string but got `%s`", jsonObj.get("usernames").toString()));
          }

          // validate the optional field `usernames` (array)
          for (int i = 0; i < jsonArrayusernames.size(); i++) {
            UserRecommendation.validateJsonElement(jsonArrayusernames.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PathRecommendation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PathRecommendation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PathRecommendation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PathRecommendation.class));

       return (TypeAdapter<T>) new TypeAdapter<PathRecommendation>() {
           @Override
           public void write(JsonWriter out, PathRecommendation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PathRecommendation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PathRecommendation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PathRecommendation
   * @throws IOException if the JSON string is invalid with respect to PathRecommendation
   */
  public static PathRecommendation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PathRecommendation.class);
  }

  /**
   * Convert an instance of PathRecommendation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

