/*
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EnforcementMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The protection mode of the collection/file types. Exe/Msi/Script are used for Windows, Executable is used for Linux.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:19:02.319495-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProtectionMode {
  public static final String SERIALIZED_NAME_EXE = "exe";
  @SerializedName(SERIALIZED_NAME_EXE)
  private EnforcementMode exe;

  public static final String SERIALIZED_NAME_EXECUTABLE = "executable";
  @SerializedName(SERIALIZED_NAME_EXECUTABLE)
  private EnforcementMode executable;

  public static final String SERIALIZED_NAME_MSI = "msi";
  @SerializedName(SERIALIZED_NAME_MSI)
  private EnforcementMode msi;

  public static final String SERIALIZED_NAME_SCRIPT = "script";
  @SerializedName(SERIALIZED_NAME_SCRIPT)
  private EnforcementMode script;

  public ProtectionMode() {
  }

  public ProtectionMode exe(EnforcementMode exe) {
    this.exe = exe;
    return this;
  }

  /**
   * Get exe
   * @return exe
   */
  @javax.annotation.Nullable
  public EnforcementMode getExe() {
    return exe;
  }

  public void setExe(EnforcementMode exe) {
    this.exe = exe;
  }


  public ProtectionMode executable(EnforcementMode executable) {
    this.executable = executable;
    return this;
  }

  /**
   * Get executable
   * @return executable
   */
  @javax.annotation.Nullable
  public EnforcementMode getExecutable() {
    return executable;
  }

  public void setExecutable(EnforcementMode executable) {
    this.executable = executable;
  }


  public ProtectionMode msi(EnforcementMode msi) {
    this.msi = msi;
    return this;
  }

  /**
   * Get msi
   * @return msi
   */
  @javax.annotation.Nullable
  public EnforcementMode getMsi() {
    return msi;
  }

  public void setMsi(EnforcementMode msi) {
    this.msi = msi;
  }


  public ProtectionMode script(EnforcementMode script) {
    this.script = script;
    return this;
  }

  /**
   * Get script
   * @return script
   */
  @javax.annotation.Nullable
  public EnforcementMode getScript() {
    return script;
  }

  public void setScript(EnforcementMode script) {
    this.script = script;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProtectionMode protectionMode = (ProtectionMode) o;
    return Objects.equals(this.exe, protectionMode.exe) &&
        Objects.equals(this.executable, protectionMode.executable) &&
        Objects.equals(this.msi, protectionMode.msi) &&
        Objects.equals(this.script, protectionMode.script);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exe, executable, msi, script);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProtectionMode {\n");
    sb.append("    exe: ").append(toIndentedString(exe)).append("\n");
    sb.append("    executable: ").append(toIndentedString(executable)).append("\n");
    sb.append("    msi: ").append(toIndentedString(msi)).append("\n");
    sb.append("    script: ").append(toIndentedString(script)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("exe");
    openapiFields.add("executable");
    openapiFields.add("msi");
    openapiFields.add("script");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProtectionMode
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProtectionMode.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProtectionMode is not found in the empty JSON string", ProtectionMode.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProtectionMode.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProtectionMode` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `exe`
      if (jsonObj.get("exe") != null && !jsonObj.get("exe").isJsonNull()) {
        EnforcementMode.validateJsonElement(jsonObj.get("exe"));
      }
      // validate the optional field `executable`
      if (jsonObj.get("executable") != null && !jsonObj.get("executable").isJsonNull()) {
        EnforcementMode.validateJsonElement(jsonObj.get("executable"));
      }
      // validate the optional field `msi`
      if (jsonObj.get("msi") != null && !jsonObj.get("msi").isJsonNull()) {
        EnforcementMode.validateJsonElement(jsonObj.get("msi"));
      }
      // validate the optional field `script`
      if (jsonObj.get("script") != null && !jsonObj.get("script").isJsonNull()) {
        EnforcementMode.validateJsonElement(jsonObj.get("script"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProtectionMode.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProtectionMode' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProtectionMode> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProtectionMode.class));

       return (TypeAdapter<T>) new TypeAdapter<ProtectionMode>() {
           @Override
           public void write(JsonWriter out, ProtectionMode value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProtectionMode read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProtectionMode given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProtectionMode
   * @throws IOException if the JSON string is invalid with respect to ProtectionMode
   */
  public static ProtectionMode fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProtectionMode.class);
  }

  /**
   * Convert an instance of ProtectionMode to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

