/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceSystem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceSystem::OAISourceSystem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceSystem::OAISourceSystem() {
    this->initializeModel();
}

OAISourceSystem::~OAISourceSystem() {}

void OAISourceSystem::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISourceSystem::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISourceSystem::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Azure_AppLocker", Qt::CaseInsensitive) == 0) {
        m_value = eOAISourceSystem::AZURE_APPLOCKER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Azure_AuditD", Qt::CaseInsensitive) == 0) {
        m_value = eOAISourceSystem::AZURE_AUDITD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NonAzure_AppLocker", Qt::CaseInsensitive) == 0) {
        m_value = eOAISourceSystem::NONAZURE_APPLOCKER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NonAzure_AuditD", Qt::CaseInsensitive) == 0) {
        m_value = eOAISourceSystem::NONAZURE_AUDITD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("None", Qt::CaseInsensitive) == 0) {
        m_value = eOAISourceSystem::NONE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISourceSystem::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAISourceSystem::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISourceSystem::AZURE_APPLOCKER:
            val = "Azure_AppLocker";
            break;
        case eOAISourceSystem::AZURE_AUDITD:
            val = "Azure_AuditD";
            break;
        case eOAISourceSystem::NONAZURE_APPLOCKER:
            val = "NonAzure_AppLocker";
            break;
        case eOAISourceSystem::NONAZURE_AUDITD:
            val = "NonAzure_AuditD";
            break;
        case eOAISourceSystem::NONE:
            val = "None";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISourceSystem::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAISourceSystem::eOAISourceSystem OAISourceSystem::getValue() const {
    return m_value;
}

void OAISourceSystem::setValue(const OAISourceSystem::eOAISourceSystem& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISourceSystem::isSet() const {
    
    return m_value_isSet;
}

bool OAISourceSystem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
