/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProtectionMode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProtectionMode::OAIProtectionMode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProtectionMode::OAIProtectionMode() {
    this->initializeModel();
}

OAIProtectionMode::~OAIProtectionMode() {}

void OAIProtectionMode::initializeModel() {

    m_exe_isSet = false;
    m_exe_isValid = false;

    m_executable_isSet = false;
    m_executable_isValid = false;

    m_msi_isSet = false;
    m_msi_isValid = false;

    m_script_isSet = false;
    m_script_isValid = false;
}

void OAIProtectionMode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProtectionMode::fromJsonObject(QJsonObject json) {

    m_exe_isValid = ::OpenAPI::fromJsonValue(m_exe, json[QString("exe")]);
    m_exe_isSet = !json[QString("exe")].isNull() && m_exe_isValid;

    m_executable_isValid = ::OpenAPI::fromJsonValue(m_executable, json[QString("executable")]);
    m_executable_isSet = !json[QString("executable")].isNull() && m_executable_isValid;

    m_msi_isValid = ::OpenAPI::fromJsonValue(m_msi, json[QString("msi")]);
    m_msi_isSet = !json[QString("msi")].isNull() && m_msi_isValid;

    m_script_isValid = ::OpenAPI::fromJsonValue(m_script, json[QString("script")]);
    m_script_isSet = !json[QString("script")].isNull() && m_script_isValid;
}

QString OAIProtectionMode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProtectionMode::asJsonObject() const {
    QJsonObject obj;
    if (m_exe.isSet()) {
        obj.insert(QString("exe"), ::OpenAPI::toJsonValue(m_exe));
    }
    if (m_executable.isSet()) {
        obj.insert(QString("executable"), ::OpenAPI::toJsonValue(m_executable));
    }
    if (m_msi.isSet()) {
        obj.insert(QString("msi"), ::OpenAPI::toJsonValue(m_msi));
    }
    if (m_script.isSet()) {
        obj.insert(QString("script"), ::OpenAPI::toJsonValue(m_script));
    }
    return obj;
}

OAIEnforcementMode OAIProtectionMode::getExe() const {
    return m_exe;
}
void OAIProtectionMode::setExe(const OAIEnforcementMode &exe) {
    m_exe = exe;
    m_exe_isSet = true;
}

bool OAIProtectionMode::is_exe_Set() const{
    return m_exe_isSet;
}

bool OAIProtectionMode::is_exe_Valid() const{
    return m_exe_isValid;
}

OAIEnforcementMode OAIProtectionMode::getExecutable() const {
    return m_executable;
}
void OAIProtectionMode::setExecutable(const OAIEnforcementMode &executable) {
    m_executable = executable;
    m_executable_isSet = true;
}

bool OAIProtectionMode::is_executable_Set() const{
    return m_executable_isSet;
}

bool OAIProtectionMode::is_executable_Valid() const{
    return m_executable_isValid;
}

OAIEnforcementMode OAIProtectionMode::getMsi() const {
    return m_msi;
}
void OAIProtectionMode::setMsi(const OAIEnforcementMode &msi) {
    m_msi = msi;
    m_msi_isSet = true;
}

bool OAIProtectionMode::is_msi_Set() const{
    return m_msi_isSet;
}

bool OAIProtectionMode::is_msi_Valid() const{
    return m_msi_isValid;
}

OAIEnforcementMode OAIProtectionMode::getScript() const {
    return m_script;
}
void OAIProtectionMode::setScript(const OAIEnforcementMode &script) {
    m_script = script;
    m_script_isSet = true;
}

bool OAIProtectionMode::is_script_Set() const{
    return m_script_isSet;
}

bool OAIProtectionMode::is_script_Valid() const{
    return m_script_isValid;
}

bool OAIProtectionMode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exe.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_executable.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_msi.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_script.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProtectionMode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
