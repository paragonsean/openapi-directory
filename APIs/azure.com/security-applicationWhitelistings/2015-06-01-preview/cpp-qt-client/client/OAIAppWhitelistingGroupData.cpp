/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppWhitelistingGroupData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppWhitelistingGroupData::OAIAppWhitelistingGroupData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppWhitelistingGroupData::OAIAppWhitelistingGroupData() {
    this->initializeModel();
}

OAIAppWhitelistingGroupData::~OAIAppWhitelistingGroupData() {}

void OAIAppWhitelistingGroupData::initializeModel() {

    m_configuration_status_isSet = false;
    m_configuration_status_isValid = false;

    m_enforcement_mode_isSet = false;
    m_enforcement_mode_isValid = false;

    m_issues_isSet = false;
    m_issues_isValid = false;

    m_path_recommendations_isSet = false;
    m_path_recommendations_isValid = false;

    m_protection_mode_isSet = false;
    m_protection_mode_isValid = false;

    m_recommendation_status_isSet = false;
    m_recommendation_status_isValid = false;

    m_source_system_isSet = false;
    m_source_system_isValid = false;

    m_vm_recommendations_isSet = false;
    m_vm_recommendations_isValid = false;
}

void OAIAppWhitelistingGroupData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppWhitelistingGroupData::fromJsonObject(QJsonObject json) {

    m_configuration_status_isValid = ::OpenAPI::fromJsonValue(m_configuration_status, json[QString("configurationStatus")]);
    m_configuration_status_isSet = !json[QString("configurationStatus")].isNull() && m_configuration_status_isValid;

    m_enforcement_mode_isValid = ::OpenAPI::fromJsonValue(m_enforcement_mode, json[QString("enforcementMode")]);
    m_enforcement_mode_isSet = !json[QString("enforcementMode")].isNull() && m_enforcement_mode_isValid;

    m_issues_isValid = ::OpenAPI::fromJsonValue(m_issues, json[QString("issues")]);
    m_issues_isSet = !json[QString("issues")].isNull() && m_issues_isValid;

    m_path_recommendations_isValid = ::OpenAPI::fromJsonValue(m_path_recommendations, json[QString("pathRecommendations")]);
    m_path_recommendations_isSet = !json[QString("pathRecommendations")].isNull() && m_path_recommendations_isValid;

    m_protection_mode_isValid = ::OpenAPI::fromJsonValue(m_protection_mode, json[QString("protectionMode")]);
    m_protection_mode_isSet = !json[QString("protectionMode")].isNull() && m_protection_mode_isValid;

    m_recommendation_status_isValid = ::OpenAPI::fromJsonValue(m_recommendation_status, json[QString("recommendationStatus")]);
    m_recommendation_status_isSet = !json[QString("recommendationStatus")].isNull() && m_recommendation_status_isValid;

    m_source_system_isValid = ::OpenAPI::fromJsonValue(m_source_system, json[QString("sourceSystem")]);
    m_source_system_isSet = !json[QString("sourceSystem")].isNull() && m_source_system_isValid;

    m_vm_recommendations_isValid = ::OpenAPI::fromJsonValue(m_vm_recommendations, json[QString("vmRecommendations")]);
    m_vm_recommendations_isSet = !json[QString("vmRecommendations")].isNull() && m_vm_recommendations_isValid;
}

QString OAIAppWhitelistingGroupData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppWhitelistingGroupData::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration_status.isSet()) {
        obj.insert(QString("configurationStatus"), ::OpenAPI::toJsonValue(m_configuration_status));
    }
    if (m_enforcement_mode.isSet()) {
        obj.insert(QString("enforcementMode"), ::OpenAPI::toJsonValue(m_enforcement_mode));
    }
    if (m_issues.size() > 0) {
        obj.insert(QString("issues"), ::OpenAPI::toJsonValue(m_issues));
    }
    if (m_path_recommendations.size() > 0) {
        obj.insert(QString("pathRecommendations"), ::OpenAPI::toJsonValue(m_path_recommendations));
    }
    if (m_protection_mode.isSet()) {
        obj.insert(QString("protectionMode"), ::OpenAPI::toJsonValue(m_protection_mode));
    }
    if (m_recommendation_status.isSet()) {
        obj.insert(QString("recommendationStatus"), ::OpenAPI::toJsonValue(m_recommendation_status));
    }
    if (m_source_system.isSet()) {
        obj.insert(QString("sourceSystem"), ::OpenAPI::toJsonValue(m_source_system));
    }
    if (m_vm_recommendations.size() > 0) {
        obj.insert(QString("vmRecommendations"), ::OpenAPI::toJsonValue(m_vm_recommendations));
    }
    return obj;
}

OAIConfigurationStatus OAIAppWhitelistingGroupData::getConfigurationStatus() const {
    return m_configuration_status;
}
void OAIAppWhitelistingGroupData::setConfigurationStatus(const OAIConfigurationStatus &configuration_status) {
    m_configuration_status = configuration_status;
    m_configuration_status_isSet = true;
}

bool OAIAppWhitelistingGroupData::is_configuration_status_Set() const{
    return m_configuration_status_isSet;
}

bool OAIAppWhitelistingGroupData::is_configuration_status_Valid() const{
    return m_configuration_status_isValid;
}

OAIEnforcementMode OAIAppWhitelistingGroupData::getEnforcementMode() const {
    return m_enforcement_mode;
}
void OAIAppWhitelistingGroupData::setEnforcementMode(const OAIEnforcementMode &enforcement_mode) {
    m_enforcement_mode = enforcement_mode;
    m_enforcement_mode_isSet = true;
}

bool OAIAppWhitelistingGroupData::is_enforcement_mode_Set() const{
    return m_enforcement_mode_isSet;
}

bool OAIAppWhitelistingGroupData::is_enforcement_mode_Valid() const{
    return m_enforcement_mode_isValid;
}

QList<OAIAppWhitelistingIssueSummary> OAIAppWhitelistingGroupData::getIssues() const {
    return m_issues;
}
void OAIAppWhitelistingGroupData::setIssues(const QList<OAIAppWhitelistingIssueSummary> &issues) {
    m_issues = issues;
    m_issues_isSet = true;
}

bool OAIAppWhitelistingGroupData::is_issues_Set() const{
    return m_issues_isSet;
}

bool OAIAppWhitelistingGroupData::is_issues_Valid() const{
    return m_issues_isValid;
}

QList<OAIPathRecommendation> OAIAppWhitelistingGroupData::getPathRecommendations() const {
    return m_path_recommendations;
}
void OAIAppWhitelistingGroupData::setPathRecommendations(const QList<OAIPathRecommendation> &path_recommendations) {
    m_path_recommendations = path_recommendations;
    m_path_recommendations_isSet = true;
}

bool OAIAppWhitelistingGroupData::is_path_recommendations_Set() const{
    return m_path_recommendations_isSet;
}

bool OAIAppWhitelistingGroupData::is_path_recommendations_Valid() const{
    return m_path_recommendations_isValid;
}

OAIProtectionMode OAIAppWhitelistingGroupData::getProtectionMode() const {
    return m_protection_mode;
}
void OAIAppWhitelistingGroupData::setProtectionMode(const OAIProtectionMode &protection_mode) {
    m_protection_mode = protection_mode;
    m_protection_mode_isSet = true;
}

bool OAIAppWhitelistingGroupData::is_protection_mode_Set() const{
    return m_protection_mode_isSet;
}

bool OAIAppWhitelistingGroupData::is_protection_mode_Valid() const{
    return m_protection_mode_isValid;
}

OAIRecommendationStatus OAIAppWhitelistingGroupData::getRecommendationStatus() const {
    return m_recommendation_status;
}
void OAIAppWhitelistingGroupData::setRecommendationStatus(const OAIRecommendationStatus &recommendation_status) {
    m_recommendation_status = recommendation_status;
    m_recommendation_status_isSet = true;
}

bool OAIAppWhitelistingGroupData::is_recommendation_status_Set() const{
    return m_recommendation_status_isSet;
}

bool OAIAppWhitelistingGroupData::is_recommendation_status_Valid() const{
    return m_recommendation_status_isValid;
}

OAISourceSystem OAIAppWhitelistingGroupData::getSourceSystem() const {
    return m_source_system;
}
void OAIAppWhitelistingGroupData::setSourceSystem(const OAISourceSystem &source_system) {
    m_source_system = source_system;
    m_source_system_isSet = true;
}

bool OAIAppWhitelistingGroupData::is_source_system_Set() const{
    return m_source_system_isSet;
}

bool OAIAppWhitelistingGroupData::is_source_system_Valid() const{
    return m_source_system_isValid;
}

QList<OAIVmRecommendation> OAIAppWhitelistingGroupData::getVmRecommendations() const {
    return m_vm_recommendations;
}
void OAIAppWhitelistingGroupData::setVmRecommendations(const QList<OAIVmRecommendation> &vm_recommendations) {
    m_vm_recommendations = vm_recommendations;
    m_vm_recommendations_isSet = true;
}

bool OAIAppWhitelistingGroupData::is_vm_recommendations_Set() const{
    return m_vm_recommendations_isSet;
}

bool OAIAppWhitelistingGroupData::is_vm_recommendations_Valid() const{
    return m_vm_recommendations_isValid;
}

bool OAIAppWhitelistingGroupData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforcement_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_issues.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_recommendations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_protection_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_system.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_recommendations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppWhitelistingGroupData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
