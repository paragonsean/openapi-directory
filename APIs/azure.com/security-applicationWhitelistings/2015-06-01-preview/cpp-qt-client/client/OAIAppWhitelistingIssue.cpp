/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppWhitelistingIssue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppWhitelistingIssue::OAIAppWhitelistingIssue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppWhitelistingIssue::OAIAppWhitelistingIssue() {
    this->initializeModel();
}

OAIAppWhitelistingIssue::~OAIAppWhitelistingIssue() {}

void OAIAppWhitelistingIssue::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAppWhitelistingIssue::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAppWhitelistingIssue::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ViolationsAudited", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppWhitelistingIssue::VIOLATIONSAUDITED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ViolationsBlocked", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppWhitelistingIssue::VIOLATIONSBLOCKED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MsiAndScriptViolationsAudited", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppWhitelistingIssue::MSIANDSCRIPTVIOLATIONSAUDITED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MsiAndScriptViolationsBlocked", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppWhitelistingIssue::MSIANDSCRIPTVIOLATIONSBLOCKED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ExecutableViolationsAudited", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppWhitelistingIssue::EXECUTABLEVIOLATIONSAUDITED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RulesViolatedManually", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppWhitelistingIssue::RULESVIOLATEDMANUALLY;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAppWhitelistingIssue::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAppWhitelistingIssue::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAppWhitelistingIssue::VIOLATIONSAUDITED:
            val = "ViolationsAudited";
            break;
        case eOAIAppWhitelistingIssue::VIOLATIONSBLOCKED:
            val = "ViolationsBlocked";
            break;
        case eOAIAppWhitelistingIssue::MSIANDSCRIPTVIOLATIONSAUDITED:
            val = "MsiAndScriptViolationsAudited";
            break;
        case eOAIAppWhitelistingIssue::MSIANDSCRIPTVIOLATIONSBLOCKED:
            val = "MsiAndScriptViolationsBlocked";
            break;
        case eOAIAppWhitelistingIssue::EXECUTABLEVIOLATIONSAUDITED:
            val = "ExecutableViolationsAudited";
            break;
        case eOAIAppWhitelistingIssue::RULESVIOLATEDMANUALLY:
            val = "RulesViolatedManually";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAppWhitelistingIssue::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAppWhitelistingIssue::eOAIAppWhitelistingIssue OAIAppWhitelistingIssue::getValue() const {
    return m_value;
}

void OAIAppWhitelistingIssue::setValue(const OAIAppWhitelistingIssue::eOAIAppWhitelistingIssue& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAppWhitelistingIssue::isSet() const {
    
    return m_value_isSet;
}

bool OAIAppWhitelistingIssue::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
