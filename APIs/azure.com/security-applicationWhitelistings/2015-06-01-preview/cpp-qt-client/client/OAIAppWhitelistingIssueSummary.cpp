/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppWhitelistingIssueSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppWhitelistingIssueSummary::OAIAppWhitelistingIssueSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppWhitelistingIssueSummary::OAIAppWhitelistingIssueSummary() {
    this->initializeModel();
}

OAIAppWhitelistingIssueSummary::~OAIAppWhitelistingIssueSummary() {}

void OAIAppWhitelistingIssueSummary::initializeModel() {

    m_issue_isSet = false;
    m_issue_isValid = false;

    m_number_of_vms_isSet = false;
    m_number_of_vms_isValid = false;
}

void OAIAppWhitelistingIssueSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppWhitelistingIssueSummary::fromJsonObject(QJsonObject json) {

    m_issue_isValid = ::OpenAPI::fromJsonValue(m_issue, json[QString("issue")]);
    m_issue_isSet = !json[QString("issue")].isNull() && m_issue_isValid;

    m_number_of_vms_isValid = ::OpenAPI::fromJsonValue(m_number_of_vms, json[QString("numberOfVms")]);
    m_number_of_vms_isSet = !json[QString("numberOfVms")].isNull() && m_number_of_vms_isValid;
}

QString OAIAppWhitelistingIssueSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppWhitelistingIssueSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_issue.isSet()) {
        obj.insert(QString("issue"), ::OpenAPI::toJsonValue(m_issue));
    }
    if (m_number_of_vms_isSet) {
        obj.insert(QString("numberOfVms"), ::OpenAPI::toJsonValue(m_number_of_vms));
    }
    return obj;
}

OAIAppWhitelistingIssue OAIAppWhitelistingIssueSummary::getIssue() const {
    return m_issue;
}
void OAIAppWhitelistingIssueSummary::setIssue(const OAIAppWhitelistingIssue &issue) {
    m_issue = issue;
    m_issue_isSet = true;
}

bool OAIAppWhitelistingIssueSummary::is_issue_Set() const{
    return m_issue_isSet;
}

bool OAIAppWhitelistingIssueSummary::is_issue_Valid() const{
    return m_issue_isValid;
}

double OAIAppWhitelistingIssueSummary::getNumberOfVms() const {
    return m_number_of_vms;
}
void OAIAppWhitelistingIssueSummary::setNumberOfVms(const double &number_of_vms) {
    m_number_of_vms = number_of_vms;
    m_number_of_vms_isSet = true;
}

bool OAIAppWhitelistingIssueSummary::is_number_of_vms_Set() const{
    return m_number_of_vms_isSet;
}

bool OAIAppWhitelistingIssueSummary::is_number_of_vms_Valid() const{
    return m_number_of_vms_isValid;
}

bool OAIAppWhitelistingIssueSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_issue.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_vms_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppWhitelistingIssueSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
