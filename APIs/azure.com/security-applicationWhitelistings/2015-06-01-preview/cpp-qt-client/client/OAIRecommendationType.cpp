/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendationType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendationType::OAIRecommendationType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendationType::OAIRecommendationType() {
    this->initializeModel();
}

OAIRecommendationType::~OAIRecommendationType() {}

void OAIRecommendationType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIRecommendationType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIRecommendationType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("File", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRecommendationType::FILE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FileHash", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRecommendationType::FILEHASH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PublisherSignature", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRecommendationType::PUBLISHERSIGNATURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ProductSignature", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRecommendationType::PRODUCTSIGNATURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BinarySignature", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRecommendationType::BINARYSIGNATURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VersionAndAboveSignature", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRecommendationType::VERSIONANDABOVESIGNATURE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIRecommendationType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIRecommendationType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIRecommendationType::FILE:
            val = "File";
            break;
        case eOAIRecommendationType::FILEHASH:
            val = "FileHash";
            break;
        case eOAIRecommendationType::PUBLISHERSIGNATURE:
            val = "PublisherSignature";
            break;
        case eOAIRecommendationType::PRODUCTSIGNATURE:
            val = "ProductSignature";
            break;
        case eOAIRecommendationType::BINARYSIGNATURE:
            val = "BinarySignature";
            break;
        case eOAIRecommendationType::VERSIONANDABOVESIGNATURE:
            val = "VersionAndAboveSignature";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIRecommendationType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIRecommendationType::eOAIRecommendationType OAIRecommendationType::getValue() const {
    return m_value;
}

void OAIRecommendationType::setValue(const OAIRecommendationType::eOAIRecommendationType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIRecommendationType::isSet() const {
    
    return m_value_isSet;
}

bool OAIRecommendationType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
