/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AdaptiveApplicationControlsListDefaultResponse from '../model/AdaptiveApplicationControlsListDefaultResponse';
import AppWhitelistingGroup from '../model/AppWhitelistingGroup';
import AppWhitelistingGroups from '../model/AppWhitelistingGroups';
import AppWhitelistingPutGroupData from '../model/AppWhitelistingPutGroupData';

/**
* ApplicationWhitelistings service.
* @module api/ApplicationWhitelistingsApi
* @version 2015-06-01-preview
*/
export default class ApplicationWhitelistingsApi {

    /**
    * Constructs a new ApplicationWhitelistingsApi. 
    * @alias module:api/ApplicationWhitelistingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the adaptiveApplicationControlsGet operation.
     * @callback module:api/ApplicationWhitelistingsApi~adaptiveApplicationControlsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppWhitelistingGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an application control VM/server group.
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations
     * @param {String} groupName Name of an application control VM/server group
     * @param {String} apiVersion API version for the operation
     * @param {module:api/ApplicationWhitelistingsApi~adaptiveApplicationControlsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppWhitelistingGroup}
     */
    adaptiveApplicationControlsGet(subscriptionId, ascLocation, groupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling adaptiveApplicationControlsGet");
      }
      // verify the required parameter 'ascLocation' is set
      if (ascLocation === undefined || ascLocation === null) {
        throw new Error("Missing the required parameter 'ascLocation' when calling adaptiveApplicationControlsGet");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling adaptiveApplicationControlsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling adaptiveApplicationControlsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'ascLocation': ascLocation,
        'groupName': groupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppWhitelistingGroup;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/applicationWhitelistings/{groupName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adaptiveApplicationControlsList operation.
     * @callback module:api/ApplicationWhitelistingsApi~adaptiveApplicationControlsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppWhitelistingGroups} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of application control VM/server groups for the subscription.
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} apiVersion API version for the operation
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includePathRecommendations] Include the policy rules
     * @param {Boolean} [summary] Return output in a summarized form
     * @param {module:api/ApplicationWhitelistingsApi~adaptiveApplicationControlsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppWhitelistingGroups}
     */
    adaptiveApplicationControlsList(subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling adaptiveApplicationControlsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling adaptiveApplicationControlsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion,
        'includePathRecommendations': opts['includePathRecommendations'],
        'summary': opts['summary']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppWhitelistingGroups;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Security/applicationWhitelistings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adaptiveApplicationControlsPut operation.
     * @callback module:api/ApplicationWhitelistingsApi~adaptiveApplicationControlsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppWhitelistingGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an application control VM/server group
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations
     * @param {String} groupName Name of an application control VM/server group
     * @param {String} apiVersion API version for the operation
     * @param {module:model/AppWhitelistingPutGroupData} body The updated VM/server group data
     * @param {module:api/ApplicationWhitelistingsApi~adaptiveApplicationControlsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppWhitelistingGroup}
     */
    adaptiveApplicationControlsPut(subscriptionId, ascLocation, groupName, apiVersion, body, callback) {
      let postBody = body;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling adaptiveApplicationControlsPut");
      }
      // verify the required parameter 'ascLocation' is set
      if (ascLocation === undefined || ascLocation === null) {
        throw new Error("Missing the required parameter 'ascLocation' when calling adaptiveApplicationControlsPut");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling adaptiveApplicationControlsPut");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling adaptiveApplicationControlsPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling adaptiveApplicationControlsPut");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'ascLocation': ascLocation,
        'groupName': groupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppWhitelistingGroup;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/applicationWhitelistings/{groupName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
