/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PublisherInfo model module.
 * @module model/PublisherInfo
 * @version 2015-06-01-preview
 */
class PublisherInfo {
    /**
     * Constructs a new <code>PublisherInfo</code>.
     * Represents the publisher information of a process/rule
     * @alias module:model/PublisherInfo
     */
    constructor() { 
        
        PublisherInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PublisherInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PublisherInfo} obj Optional instance to populate.
     * @return {module:model/PublisherInfo} The populated <code>PublisherInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PublisherInfo();

            if (data.hasOwnProperty('binaryName')) {
                obj['binaryName'] = ApiClient.convertToType(data['binaryName'], 'String');
            }
            if (data.hasOwnProperty('productName')) {
                obj['productName'] = ApiClient.convertToType(data['productName'], 'String');
            }
            if (data.hasOwnProperty('publisherName')) {
                obj['publisherName'] = ApiClient.convertToType(data['publisherName'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PublisherInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PublisherInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['binaryName'] && !(typeof data['binaryName'] === 'string' || data['binaryName'] instanceof String)) {
            throw new Error("Expected the field `binaryName` to be a primitive type in the JSON string but got " + data['binaryName']);
        }
        // ensure the json data is a string
        if (data['productName'] && !(typeof data['productName'] === 'string' || data['productName'] instanceof String)) {
            throw new Error("Expected the field `productName` to be a primitive type in the JSON string but got " + data['productName']);
        }
        // ensure the json data is a string
        if (data['publisherName'] && !(typeof data['publisherName'] === 'string' || data['publisherName'] instanceof String)) {
            throw new Error("Expected the field `publisherName` to be a primitive type in the JSON string but got " + data['publisherName']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * The \"OriginalName\" field taken from the file's version resource
 * @member {String} binaryName
 */
PublisherInfo.prototype['binaryName'] = undefined;

/**
 * The product name taken from the file's version resource
 * @member {String} productName
 */
PublisherInfo.prototype['productName'] = undefined;

/**
 * The Subject field of the x.509 certificate used to sign the code, using the following fields -  O = Organization, L = Locality, S = State or Province, and C = Country
 * @member {String} publisherName
 */
PublisherInfo.prototype['publisherName'] = undefined;

/**
 * The binary file version taken from the file's version resource
 * @member {String} version
 */
PublisherInfo.prototype['version'] = undefined;






export default PublisherInfo;

