/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConfigurationStatus from './ConfigurationStatus';
import FileType from './FileType';
import PublisherInfo from './PublisherInfo';
import RecommendationAction from './RecommendationAction';
import RecommendationType from './RecommendationType';
import UserRecommendation from './UserRecommendation';

/**
 * The PathRecommendation model module.
 * @module model/PathRecommendation
 * @version 2015-06-01-preview
 */
class PathRecommendation {
    /**
     * Constructs a new <code>PathRecommendation</code>.
     * Represents a path that is recommended to be allowed and its properties
     * @alias module:model/PathRecommendation
     */
    constructor() { 
        
        PathRecommendation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PathRecommendation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PathRecommendation} obj Optional instance to populate.
     * @return {module:model/PathRecommendation} The populated <code>PathRecommendation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PathRecommendation();

            if (data.hasOwnProperty('action')) {
                obj['action'] = RecommendationAction.constructFromObject(data['action']);
            }
            if (data.hasOwnProperty('common')) {
                obj['common'] = ApiClient.convertToType(data['common'], 'Boolean');
            }
            if (data.hasOwnProperty('configurationStatus')) {
                obj['configurationStatus'] = ConfigurationStatus.constructFromObject(data['configurationStatus']);
            }
            if (data.hasOwnProperty('fileType')) {
                obj['fileType'] = FileType.constructFromObject(data['fileType']);
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('publisherInfo')) {
                obj['publisherInfo'] = PublisherInfo.constructFromObject(data['publisherInfo']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = RecommendationType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('userSids')) {
                obj['userSids'] = ApiClient.convertToType(data['userSids'], ['String']);
            }
            if (data.hasOwnProperty('usernames')) {
                obj['usernames'] = ApiClient.convertToType(data['usernames'], [UserRecommendation]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PathRecommendation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PathRecommendation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // validate the optional field `publisherInfo`
        if (data['publisherInfo']) { // data not null
          PublisherInfo.validateJSON(data['publisherInfo']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['userSids'])) {
            throw new Error("Expected the field `userSids` to be an array in the JSON data but got " + data['userSids']);
        }
        if (data['usernames']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['usernames'])) {
                throw new Error("Expected the field `usernames` to be an array in the JSON data but got " + data['usernames']);
            }
            // validate the optional field `usernames` (array)
            for (const item of data['usernames']) {
                UserRecommendation.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/RecommendationAction} action
 */
PathRecommendation.prototype['action'] = undefined;

/**
 * Whether the path is commonly run on the machine
 * @member {Boolean} common
 */
PathRecommendation.prototype['common'] = undefined;

/**
 * @member {module:model/ConfigurationStatus} configurationStatus
 */
PathRecommendation.prototype['configurationStatus'] = undefined;

/**
 * @member {module:model/FileType} fileType
 */
PathRecommendation.prototype['fileType'] = undefined;

/**
 * The full path to whitelist
 * @member {String} path
 */
PathRecommendation.prototype['path'] = undefined;

/**
 * @member {module:model/PublisherInfo} publisherInfo
 */
PathRecommendation.prototype['publisherInfo'] = undefined;

/**
 * @member {module:model/RecommendationType} type
 */
PathRecommendation.prototype['type'] = undefined;

/**
 * @member {Array.<String>} userSids
 */
PathRecommendation.prototype['userSids'] = undefined;

/**
 * @member {Array.<module:model/UserRecommendation>} usernames
 */
PathRecommendation.prototype['usernames'] = undefined;






export default PathRecommendation;

