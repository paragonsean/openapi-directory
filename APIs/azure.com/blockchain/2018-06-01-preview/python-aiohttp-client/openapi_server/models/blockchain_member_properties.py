# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.blockchain_member_nodes_sku import BlockchainMemberNodesSku
from openapi_server.models.firewall_rule import FirewallRule
from openapi_server import util


class BlockchainMemberProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consortium: str=None, consortium_management_account_address: str=None, consortium_management_account_password: str=None, consortium_member_display_name: str=None, consortium_role: str=None, dns: str=None, firewall_rules: List[FirewallRule]=None, password: str=None, protocol: str=None, provisioning_state: str=None, public_key: str=None, root_contract_address: str=None, user_name: str=None, validator_nodes_sku: BlockchainMemberNodesSku=None):
        """BlockchainMemberProperties - a model defined in OpenAPI

        :param consortium: The consortium of this BlockchainMemberProperties.
        :param consortium_management_account_address: The consortium_management_account_address of this BlockchainMemberProperties.
        :param consortium_management_account_password: The consortium_management_account_password of this BlockchainMemberProperties.
        :param consortium_member_display_name: The consortium_member_display_name of this BlockchainMemberProperties.
        :param consortium_role: The consortium_role of this BlockchainMemberProperties.
        :param dns: The dns of this BlockchainMemberProperties.
        :param firewall_rules: The firewall_rules of this BlockchainMemberProperties.
        :param password: The password of this BlockchainMemberProperties.
        :param protocol: The protocol of this BlockchainMemberProperties.
        :param provisioning_state: The provisioning_state of this BlockchainMemberProperties.
        :param public_key: The public_key of this BlockchainMemberProperties.
        :param root_contract_address: The root_contract_address of this BlockchainMemberProperties.
        :param user_name: The user_name of this BlockchainMemberProperties.
        :param validator_nodes_sku: The validator_nodes_sku of this BlockchainMemberProperties.
        """
        self.openapi_types = {
            'consortium': str,
            'consortium_management_account_address': str,
            'consortium_management_account_password': str,
            'consortium_member_display_name': str,
            'consortium_role': str,
            'dns': str,
            'firewall_rules': List[FirewallRule],
            'password': str,
            'protocol': str,
            'provisioning_state': str,
            'public_key': str,
            'root_contract_address': str,
            'user_name': str,
            'validator_nodes_sku': BlockchainMemberNodesSku
        }

        self.attribute_map = {
            'consortium': 'consortium',
            'consortium_management_account_address': 'consortiumManagementAccountAddress',
            'consortium_management_account_password': 'consortiumManagementAccountPassword',
            'consortium_member_display_name': 'consortiumMemberDisplayName',
            'consortium_role': 'consortiumRole',
            'dns': 'dns',
            'firewall_rules': 'firewallRules',
            'password': 'password',
            'protocol': 'protocol',
            'provisioning_state': 'provisioningState',
            'public_key': 'publicKey',
            'root_contract_address': 'rootContractAddress',
            'user_name': 'userName',
            'validator_nodes_sku': 'validatorNodesSku'
        }

        self._consortium = consortium
        self._consortium_management_account_address = consortium_management_account_address
        self._consortium_management_account_password = consortium_management_account_password
        self._consortium_member_display_name = consortium_member_display_name
        self._consortium_role = consortium_role
        self._dns = dns
        self._firewall_rules = firewall_rules
        self._password = password
        self._protocol = protocol
        self._provisioning_state = provisioning_state
        self._public_key = public_key
        self._root_contract_address = root_contract_address
        self._user_name = user_name
        self._validator_nodes_sku = validator_nodes_sku

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BlockchainMemberProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BlockchainMemberProperties of this BlockchainMemberProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consortium(self):
        """Gets the consortium of this BlockchainMemberProperties.

        Gets or sets the consortium for the blockchain member.

        :return: The consortium of this BlockchainMemberProperties.
        :rtype: str
        """
        return self._consortium

    @consortium.setter
    def consortium(self, consortium):
        """Sets the consortium of this BlockchainMemberProperties.

        Gets or sets the consortium for the blockchain member.

        :param consortium: The consortium of this BlockchainMemberProperties.
        :type consortium: str
        """

        self._consortium = consortium

    @property
    def consortium_management_account_address(self):
        """Gets the consortium_management_account_address of this BlockchainMemberProperties.

        Gets the managed consortium management account address.

        :return: The consortium_management_account_address of this BlockchainMemberProperties.
        :rtype: str
        """
        return self._consortium_management_account_address

    @consortium_management_account_address.setter
    def consortium_management_account_address(self, consortium_management_account_address):
        """Sets the consortium_management_account_address of this BlockchainMemberProperties.

        Gets the managed consortium management account address.

        :param consortium_management_account_address: The consortium_management_account_address of this BlockchainMemberProperties.
        :type consortium_management_account_address: str
        """

        self._consortium_management_account_address = consortium_management_account_address

    @property
    def consortium_management_account_password(self):
        """Gets the consortium_management_account_password of this BlockchainMemberProperties.

        Sets the managed consortium management account password.

        :return: The consortium_management_account_password of this BlockchainMemberProperties.
        :rtype: str
        """
        return self._consortium_management_account_password

    @consortium_management_account_password.setter
    def consortium_management_account_password(self, consortium_management_account_password):
        """Sets the consortium_management_account_password of this BlockchainMemberProperties.

        Sets the managed consortium management account password.

        :param consortium_management_account_password: The consortium_management_account_password of this BlockchainMemberProperties.
        :type consortium_management_account_password: str
        """

        self._consortium_management_account_password = consortium_management_account_password

    @property
    def consortium_member_display_name(self):
        """Gets the consortium_member_display_name of this BlockchainMemberProperties.

        Gets the display name of the member in the consortium.

        :return: The consortium_member_display_name of this BlockchainMemberProperties.
        :rtype: str
        """
        return self._consortium_member_display_name

    @consortium_member_display_name.setter
    def consortium_member_display_name(self, consortium_member_display_name):
        """Sets the consortium_member_display_name of this BlockchainMemberProperties.

        Gets the display name of the member in the consortium.

        :param consortium_member_display_name: The consortium_member_display_name of this BlockchainMemberProperties.
        :type consortium_member_display_name: str
        """

        self._consortium_member_display_name = consortium_member_display_name

    @property
    def consortium_role(self):
        """Gets the consortium_role of this BlockchainMemberProperties.

        Gets the role of the member in the consortium.

        :return: The consortium_role of this BlockchainMemberProperties.
        :rtype: str
        """
        return self._consortium_role

    @consortium_role.setter
    def consortium_role(self, consortium_role):
        """Sets the consortium_role of this BlockchainMemberProperties.

        Gets the role of the member in the consortium.

        :param consortium_role: The consortium_role of this BlockchainMemberProperties.
        :type consortium_role: str
        """

        self._consortium_role = consortium_role

    @property
    def dns(self):
        """Gets the dns of this BlockchainMemberProperties.

        Gets the dns endpoint of the blockchain member.

        :return: The dns of this BlockchainMemberProperties.
        :rtype: str
        """
        return self._dns

    @dns.setter
    def dns(self, dns):
        """Sets the dns of this BlockchainMemberProperties.

        Gets the dns endpoint of the blockchain member.

        :param dns: The dns of this BlockchainMemberProperties.
        :type dns: str
        """

        self._dns = dns

    @property
    def firewall_rules(self):
        """Gets the firewall_rules of this BlockchainMemberProperties.

        Gets or sets firewall rules

        :return: The firewall_rules of this BlockchainMemberProperties.
        :rtype: List[FirewallRule]
        """
        return self._firewall_rules

    @firewall_rules.setter
    def firewall_rules(self, firewall_rules):
        """Sets the firewall_rules of this BlockchainMemberProperties.

        Gets or sets firewall rules

        :param firewall_rules: The firewall_rules of this BlockchainMemberProperties.
        :type firewall_rules: List[FirewallRule]
        """

        self._firewall_rules = firewall_rules

    @property
    def password(self):
        """Gets the password of this BlockchainMemberProperties.

        Sets the basic auth password of the blockchain member.

        :return: The password of this BlockchainMemberProperties.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this BlockchainMemberProperties.

        Sets the basic auth password of the blockchain member.

        :param password: The password of this BlockchainMemberProperties.
        :type password: str
        """

        self._password = password

    @property
    def protocol(self):
        """Gets the protocol of this BlockchainMemberProperties.

        Gets or sets the blockchain protocol.

        :return: The protocol of this BlockchainMemberProperties.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this BlockchainMemberProperties.

        Gets or sets the blockchain protocol.

        :param protocol: The protocol of this BlockchainMemberProperties.
        :type protocol: str
        """
        allowed_values = ["NotSpecified", "Parity", "Quorum", "Corda"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this BlockchainMemberProperties.

        Gets or sets the blockchain member provision state.

        :return: The provisioning_state of this BlockchainMemberProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this BlockchainMemberProperties.

        Gets or sets the blockchain member provision state.

        :param provisioning_state: The provisioning_state of this BlockchainMemberProperties.
        :type provisioning_state: str
        """
        allowed_values = ["NotSpecified", "Updating", "Deleting", "Succeeded", "Failed", "Stale"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def public_key(self):
        """Gets the public_key of this BlockchainMemberProperties.

        Gets the public key of the blockchain member (default transaction node).

        :return: The public_key of this BlockchainMemberProperties.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this BlockchainMemberProperties.

        Gets the public key of the blockchain member (default transaction node).

        :param public_key: The public_key of this BlockchainMemberProperties.
        :type public_key: str
        """

        self._public_key = public_key

    @property
    def root_contract_address(self):
        """Gets the root_contract_address of this BlockchainMemberProperties.

        Gets the Ethereum root contract address of the blockchain.

        :return: The root_contract_address of this BlockchainMemberProperties.
        :rtype: str
        """
        return self._root_contract_address

    @root_contract_address.setter
    def root_contract_address(self, root_contract_address):
        """Sets the root_contract_address of this BlockchainMemberProperties.

        Gets the Ethereum root contract address of the blockchain.

        :param root_contract_address: The root_contract_address of this BlockchainMemberProperties.
        :type root_contract_address: str
        """

        self._root_contract_address = root_contract_address

    @property
    def user_name(self):
        """Gets the user_name of this BlockchainMemberProperties.

        Gets the auth user name of the blockchain member.

        :return: The user_name of this BlockchainMemberProperties.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this BlockchainMemberProperties.

        Gets the auth user name of the blockchain member.

        :param user_name: The user_name of this BlockchainMemberProperties.
        :type user_name: str
        """

        self._user_name = user_name

    @property
    def validator_nodes_sku(self):
        """Gets the validator_nodes_sku of this BlockchainMemberProperties.


        :return: The validator_nodes_sku of this BlockchainMemberProperties.
        :rtype: BlockchainMemberNodesSku
        """
        return self._validator_nodes_sku

    @validator_nodes_sku.setter
    def validator_nodes_sku(self, validator_nodes_sku):
        """Sets the validator_nodes_sku of this BlockchainMemberProperties.


        :param validator_nodes_sku: The validator_nodes_sku of this BlockchainMemberProperties.
        :type validator_nodes_sku: BlockchainMemberNodesSku
        """

        self._validator_nodes_sku = validator_nodes_sku
