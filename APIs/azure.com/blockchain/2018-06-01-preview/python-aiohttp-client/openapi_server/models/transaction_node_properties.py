# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.firewall_rule import FirewallRule
from openapi_server import util


class TransactionNodeProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dns: str=None, firewall_rules: List[FirewallRule]=None, password: str=None, provisioning_state: str=None, public_key: str=None, user_name: str=None):
        """TransactionNodeProperties - a model defined in OpenAPI

        :param dns: The dns of this TransactionNodeProperties.
        :param firewall_rules: The firewall_rules of this TransactionNodeProperties.
        :param password: The password of this TransactionNodeProperties.
        :param provisioning_state: The provisioning_state of this TransactionNodeProperties.
        :param public_key: The public_key of this TransactionNodeProperties.
        :param user_name: The user_name of this TransactionNodeProperties.
        """
        self.openapi_types = {
            'dns': str,
            'firewall_rules': List[FirewallRule],
            'password': str,
            'provisioning_state': str,
            'public_key': str,
            'user_name': str
        }

        self.attribute_map = {
            'dns': 'dns',
            'firewall_rules': 'firewallRules',
            'password': 'password',
            'provisioning_state': 'provisioningState',
            'public_key': 'publicKey',
            'user_name': 'userName'
        }

        self._dns = dns
        self._firewall_rules = firewall_rules
        self._password = password
        self._provisioning_state = provisioning_state
        self._public_key = public_key
        self._user_name = user_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransactionNodeProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransactionNodeProperties of this TransactionNodeProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dns(self):
        """Gets the dns of this TransactionNodeProperties.

        Gets or sets the transaction node dns endpoint.

        :return: The dns of this TransactionNodeProperties.
        :rtype: str
        """
        return self._dns

    @dns.setter
    def dns(self, dns):
        """Sets the dns of this TransactionNodeProperties.

        Gets or sets the transaction node dns endpoint.

        :param dns: The dns of this TransactionNodeProperties.
        :type dns: str
        """

        self._dns = dns

    @property
    def firewall_rules(self):
        """Gets the firewall_rules of this TransactionNodeProperties.

        Gets or sets the firewall rules.

        :return: The firewall_rules of this TransactionNodeProperties.
        :rtype: List[FirewallRule]
        """
        return self._firewall_rules

    @firewall_rules.setter
    def firewall_rules(self, firewall_rules):
        """Sets the firewall_rules of this TransactionNodeProperties.

        Gets or sets the firewall rules.

        :param firewall_rules: The firewall_rules of this TransactionNodeProperties.
        :type firewall_rules: List[FirewallRule]
        """

        self._firewall_rules = firewall_rules

    @property
    def password(self):
        """Gets the password of this TransactionNodeProperties.

        Sets the transaction node dns endpoint basic auth password.

        :return: The password of this TransactionNodeProperties.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this TransactionNodeProperties.

        Sets the transaction node dns endpoint basic auth password.

        :param password: The password of this TransactionNodeProperties.
        :type password: str
        """

        self._password = password

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this TransactionNodeProperties.

        Gets or sets the blockchain member provision state.

        :return: The provisioning_state of this TransactionNodeProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this TransactionNodeProperties.

        Gets or sets the blockchain member provision state.

        :param provisioning_state: The provisioning_state of this TransactionNodeProperties.
        :type provisioning_state: str
        """
        allowed_values = ["NotSpecified", "Updating", "Deleting", "Succeeded", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def public_key(self):
        """Gets the public_key of this TransactionNodeProperties.

        Gets or sets the transaction node public key.

        :return: The public_key of this TransactionNodeProperties.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this TransactionNodeProperties.

        Gets or sets the transaction node public key.

        :param public_key: The public_key of this TransactionNodeProperties.
        :type public_key: str
        """

        self._public_key = public_key

    @property
    def user_name(self):
        """Gets the user_name of this TransactionNodeProperties.

        Gets or sets the transaction node dns endpoint basic auth user name.

        :return: The user_name of this TransactionNodeProperties.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this TransactionNodeProperties.

        Gets or sets the transaction node dns endpoint basic auth user name.

        :param user_name: The user_name of this TransactionNodeProperties.
        :type user_name: str
        """

        self._user_name = user_name
