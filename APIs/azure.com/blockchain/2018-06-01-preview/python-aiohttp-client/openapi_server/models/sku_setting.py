# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SkuSetting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, locations: List[str]=None, name: str=None, required_features: List[str]=None, tier: str=None):
        """SkuSetting - a model defined in OpenAPI

        :param locations: The locations of this SkuSetting.
        :param name: The name of this SkuSetting.
        :param required_features: The required_features of this SkuSetting.
        :param tier: The tier of this SkuSetting.
        """
        self.openapi_types = {
            'locations': List[str],
            'name': str,
            'required_features': List[str],
            'tier': str
        }

        self.attribute_map = {
            'locations': 'locations',
            'name': 'name',
            'required_features': 'requiredFeatures',
            'tier': 'tier'
        }

        self._locations = locations
        self._name = name
        self._required_features = required_features
        self._tier = tier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SkuSetting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SkuSetting of this SkuSetting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def locations(self):
        """Gets the locations of this SkuSetting.

        Gets or sets the locations.

        :return: The locations of this SkuSetting.
        :rtype: List[str]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this SkuSetting.

        Gets or sets the locations.

        :param locations: The locations of this SkuSetting.
        :type locations: List[str]
        """

        self._locations = locations

    @property
    def name(self):
        """Gets the name of this SkuSetting.

        Gets or sets the Sku name.

        :return: The name of this SkuSetting.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SkuSetting.

        Gets or sets the Sku name.

        :param name: The name of this SkuSetting.
        :type name: str
        """

        self._name = name

    @property
    def required_features(self):
        """Gets the required_features of this SkuSetting.

        Gets or sets the required features.

        :return: The required_features of this SkuSetting.
        :rtype: List[str]
        """
        return self._required_features

    @required_features.setter
    def required_features(self, required_features):
        """Sets the required_features of this SkuSetting.

        Gets or sets the required features.

        :param required_features: The required_features of this SkuSetting.
        :type required_features: List[str]
        """

        self._required_features = required_features

    @property
    def tier(self):
        """Gets the tier of this SkuSetting.

        Gets or sets the Sku tier.

        :return: The tier of this SkuSetting.
        :rtype: str
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this SkuSetting.

        Gets or sets the Sku tier.

        :param tier: The tier of this SkuSetting.
        :type tier: str
        """

        self._tier = tier
