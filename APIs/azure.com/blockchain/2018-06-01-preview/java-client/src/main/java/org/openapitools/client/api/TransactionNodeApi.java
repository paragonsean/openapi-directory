/*
 * BlockchainManagementClient
 * REST API for Azure Blockchain Service
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiKey;
import org.openapitools.client.model.ApiKeyCollection;
import org.openapitools.client.model.TransactionNode;
import org.openapitools.client.model.TransactionNodeCollection;
import org.openapitools.client.model.TransactionNodeUpdate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionNodeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransactionNodeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionNodeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for transactionNodesCreate
     * @param blockchainMemberName Blockchain member name. (required)
     * @param transactionNodeName Transaction node name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param transactionNode Payload to create the transaction node. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionNodesCreateCall(String blockchainMemberName, String transactionNodeName, String apiVersion, String subscriptionId, String resourceGroupName, TransactionNode transactionNode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionNode;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}"
            .replace("{" + "blockchainMemberName" + "}", localVarApiClient.escapeString(blockchainMemberName.toString()))
            .replace("{" + "transactionNodeName" + "}", localVarApiClient.escapeString(transactionNodeName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionNodesCreateValidateBeforeCall(String blockchainMemberName, String transactionNodeName, String apiVersion, String subscriptionId, String resourceGroupName, TransactionNode transactionNode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockchainMemberName' is set
        if (blockchainMemberName == null) {
            throw new ApiException("Missing the required parameter 'blockchainMemberName' when calling transactionNodesCreate(Async)");
        }

        // verify the required parameter 'transactionNodeName' is set
        if (transactionNodeName == null) {
            throw new ApiException("Missing the required parameter 'transactionNodeName' when calling transactionNodesCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling transactionNodesCreate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling transactionNodesCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling transactionNodesCreate(Async)");
        }

        return transactionNodesCreateCall(blockchainMemberName, transactionNodeName, apiVersion, subscriptionId, resourceGroupName, transactionNode, _callback);

    }

    /**
     * 
     * Create or update the transaction node.
     * @param blockchainMemberName Blockchain member name. (required)
     * @param transactionNodeName Transaction node name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param transactionNode Payload to create the transaction node. (optional)
     * @return TransactionNode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public TransactionNode transactionNodesCreate(String blockchainMemberName, String transactionNodeName, String apiVersion, String subscriptionId, String resourceGroupName, TransactionNode transactionNode) throws ApiException {
        ApiResponse<TransactionNode> localVarResp = transactionNodesCreateWithHttpInfo(blockchainMemberName, transactionNodeName, apiVersion, subscriptionId, resourceGroupName, transactionNode);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update the transaction node.
     * @param blockchainMemberName Blockchain member name. (required)
     * @param transactionNodeName Transaction node name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param transactionNode Payload to create the transaction node. (optional)
     * @return ApiResponse&lt;TransactionNode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionNode> transactionNodesCreateWithHttpInfo(String blockchainMemberName, String transactionNodeName, String apiVersion, String subscriptionId, String resourceGroupName, TransactionNode transactionNode) throws ApiException {
        okhttp3.Call localVarCall = transactionNodesCreateValidateBeforeCall(blockchainMemberName, transactionNodeName, apiVersion, subscriptionId, resourceGroupName, transactionNode, null);
        Type localVarReturnType = new TypeToken<TransactionNode>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update the transaction node.
     * @param blockchainMemberName Blockchain member name. (required)
     * @param transactionNodeName Transaction node name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param transactionNode Payload to create the transaction node. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionNodesCreateAsync(String blockchainMemberName, String transactionNodeName, String apiVersion, String subscriptionId, String resourceGroupName, TransactionNode transactionNode, final ApiCallback<TransactionNode> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionNodesCreateValidateBeforeCall(blockchainMemberName, transactionNodeName, apiVersion, subscriptionId, resourceGroupName, transactionNode, _callback);
        Type localVarReturnType = new TypeToken<TransactionNode>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionNodesDelete
     * @param blockchainMemberName Blockchain member name. (required)
     * @param transactionNodeName Transaction node name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionNodesDeleteCall(String blockchainMemberName, String transactionNodeName, String apiVersion, String subscriptionId, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}"
            .replace("{" + "blockchainMemberName" + "}", localVarApiClient.escapeString(blockchainMemberName.toString()))
            .replace("{" + "transactionNodeName" + "}", localVarApiClient.escapeString(transactionNodeName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionNodesDeleteValidateBeforeCall(String blockchainMemberName, String transactionNodeName, String apiVersion, String subscriptionId, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockchainMemberName' is set
        if (blockchainMemberName == null) {
            throw new ApiException("Missing the required parameter 'blockchainMemberName' when calling transactionNodesDelete(Async)");
        }

        // verify the required parameter 'transactionNodeName' is set
        if (transactionNodeName == null) {
            throw new ApiException("Missing the required parameter 'transactionNodeName' when calling transactionNodesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling transactionNodesDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling transactionNodesDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling transactionNodesDelete(Async)");
        }

        return transactionNodesDeleteCall(blockchainMemberName, transactionNodeName, apiVersion, subscriptionId, resourceGroupName, _callback);

    }

    /**
     * 
     * Delete the transaction node.
     * @param blockchainMemberName Blockchain member name. (required)
     * @param transactionNodeName Transaction node name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void transactionNodesDelete(String blockchainMemberName, String transactionNodeName, String apiVersion, String subscriptionId, String resourceGroupName) throws ApiException {
        transactionNodesDeleteWithHttpInfo(blockchainMemberName, transactionNodeName, apiVersion, subscriptionId, resourceGroupName);
    }

    /**
     * 
     * Delete the transaction node.
     * @param blockchainMemberName Blockchain member name. (required)
     * @param transactionNodeName Transaction node name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> transactionNodesDeleteWithHttpInfo(String blockchainMemberName, String transactionNodeName, String apiVersion, String subscriptionId, String resourceGroupName) throws ApiException {
        okhttp3.Call localVarCall = transactionNodesDeleteValidateBeforeCall(blockchainMemberName, transactionNodeName, apiVersion, subscriptionId, resourceGroupName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete the transaction node.
     * @param blockchainMemberName Blockchain member name. (required)
     * @param transactionNodeName Transaction node name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionNodesDeleteAsync(String blockchainMemberName, String transactionNodeName, String apiVersion, String subscriptionId, String resourceGroupName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionNodesDeleteValidateBeforeCall(blockchainMemberName, transactionNodeName, apiVersion, subscriptionId, resourceGroupName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionNodesGet
     * @param blockchainMemberName Blockchain member name. (required)
     * @param transactionNodeName Transaction node name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionNodesGetCall(String blockchainMemberName, String transactionNodeName, String apiVersion, String subscriptionId, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}"
            .replace("{" + "blockchainMemberName" + "}", localVarApiClient.escapeString(blockchainMemberName.toString()))
            .replace("{" + "transactionNodeName" + "}", localVarApiClient.escapeString(transactionNodeName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionNodesGetValidateBeforeCall(String blockchainMemberName, String transactionNodeName, String apiVersion, String subscriptionId, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockchainMemberName' is set
        if (blockchainMemberName == null) {
            throw new ApiException("Missing the required parameter 'blockchainMemberName' when calling transactionNodesGet(Async)");
        }

        // verify the required parameter 'transactionNodeName' is set
        if (transactionNodeName == null) {
            throw new ApiException("Missing the required parameter 'transactionNodeName' when calling transactionNodesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling transactionNodesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling transactionNodesGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling transactionNodesGet(Async)");
        }

        return transactionNodesGetCall(blockchainMemberName, transactionNodeName, apiVersion, subscriptionId, resourceGroupName, _callback);

    }

    /**
     * 
     * Get the details of the transaction node.
     * @param blockchainMemberName Blockchain member name. (required)
     * @param transactionNodeName Transaction node name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @return TransactionNode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public TransactionNode transactionNodesGet(String blockchainMemberName, String transactionNodeName, String apiVersion, String subscriptionId, String resourceGroupName) throws ApiException {
        ApiResponse<TransactionNode> localVarResp = transactionNodesGetWithHttpInfo(blockchainMemberName, transactionNodeName, apiVersion, subscriptionId, resourceGroupName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the details of the transaction node.
     * @param blockchainMemberName Blockchain member name. (required)
     * @param transactionNodeName Transaction node name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @return ApiResponse&lt;TransactionNode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionNode> transactionNodesGetWithHttpInfo(String blockchainMemberName, String transactionNodeName, String apiVersion, String subscriptionId, String resourceGroupName) throws ApiException {
        okhttp3.Call localVarCall = transactionNodesGetValidateBeforeCall(blockchainMemberName, transactionNodeName, apiVersion, subscriptionId, resourceGroupName, null);
        Type localVarReturnType = new TypeToken<TransactionNode>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the details of the transaction node.
     * @param blockchainMemberName Blockchain member name. (required)
     * @param transactionNodeName Transaction node name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionNodesGetAsync(String blockchainMemberName, String transactionNodeName, String apiVersion, String subscriptionId, String resourceGroupName, final ApiCallback<TransactionNode> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionNodesGetValidateBeforeCall(blockchainMemberName, transactionNodeName, apiVersion, subscriptionId, resourceGroupName, _callback);
        Type localVarReturnType = new TypeToken<TransactionNode>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionNodesList
     * @param blockchainMemberName Blockchain member name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionNodesListCall(String blockchainMemberName, String apiVersion, String subscriptionId, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/transactionNodes"
            .replace("{" + "blockchainMemberName" + "}", localVarApiClient.escapeString(blockchainMemberName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionNodesListValidateBeforeCall(String blockchainMemberName, String apiVersion, String subscriptionId, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockchainMemberName' is set
        if (blockchainMemberName == null) {
            throw new ApiException("Missing the required parameter 'blockchainMemberName' when calling transactionNodesList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling transactionNodesList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling transactionNodesList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling transactionNodesList(Async)");
        }

        return transactionNodesListCall(blockchainMemberName, apiVersion, subscriptionId, resourceGroupName, _callback);

    }

    /**
     * 
     * Lists the transaction nodes for a blockchain member.
     * @param blockchainMemberName Blockchain member name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @return TransactionNodeCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public TransactionNodeCollection transactionNodesList(String blockchainMemberName, String apiVersion, String subscriptionId, String resourceGroupName) throws ApiException {
        ApiResponse<TransactionNodeCollection> localVarResp = transactionNodesListWithHttpInfo(blockchainMemberName, apiVersion, subscriptionId, resourceGroupName);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the transaction nodes for a blockchain member.
     * @param blockchainMemberName Blockchain member name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @return ApiResponse&lt;TransactionNodeCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionNodeCollection> transactionNodesListWithHttpInfo(String blockchainMemberName, String apiVersion, String subscriptionId, String resourceGroupName) throws ApiException {
        okhttp3.Call localVarCall = transactionNodesListValidateBeforeCall(blockchainMemberName, apiVersion, subscriptionId, resourceGroupName, null);
        Type localVarReturnType = new TypeToken<TransactionNodeCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the transaction nodes for a blockchain member.
     * @param blockchainMemberName Blockchain member name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionNodesListAsync(String blockchainMemberName, String apiVersion, String subscriptionId, String resourceGroupName, final ApiCallback<TransactionNodeCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionNodesListValidateBeforeCall(blockchainMemberName, apiVersion, subscriptionId, resourceGroupName, _callback);
        Type localVarReturnType = new TypeToken<TransactionNodeCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionNodesListApiKeys
     * @param blockchainMemberName Blockchain member name. (required)
     * @param transactionNodeName Transaction node name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionNodesListApiKeysCall(String blockchainMemberName, String transactionNodeName, String apiVersion, String subscriptionId, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}/listApiKeys"
            .replace("{" + "blockchainMemberName" + "}", localVarApiClient.escapeString(blockchainMemberName.toString()))
            .replace("{" + "transactionNodeName" + "}", localVarApiClient.escapeString(transactionNodeName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionNodesListApiKeysValidateBeforeCall(String blockchainMemberName, String transactionNodeName, String apiVersion, String subscriptionId, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockchainMemberName' is set
        if (blockchainMemberName == null) {
            throw new ApiException("Missing the required parameter 'blockchainMemberName' when calling transactionNodesListApiKeys(Async)");
        }

        // verify the required parameter 'transactionNodeName' is set
        if (transactionNodeName == null) {
            throw new ApiException("Missing the required parameter 'transactionNodeName' when calling transactionNodesListApiKeys(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling transactionNodesListApiKeys(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling transactionNodesListApiKeys(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling transactionNodesListApiKeys(Async)");
        }

        return transactionNodesListApiKeysCall(blockchainMemberName, transactionNodeName, apiVersion, subscriptionId, resourceGroupName, _callback);

    }

    /**
     * 
     * List the API keys for the transaction node.
     * @param blockchainMemberName Blockchain member name. (required)
     * @param transactionNodeName Transaction node name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @return ApiKeyCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiKeyCollection transactionNodesListApiKeys(String blockchainMemberName, String transactionNodeName, String apiVersion, String subscriptionId, String resourceGroupName) throws ApiException {
        ApiResponse<ApiKeyCollection> localVarResp = transactionNodesListApiKeysWithHttpInfo(blockchainMemberName, transactionNodeName, apiVersion, subscriptionId, resourceGroupName);
        return localVarResp.getData();
    }

    /**
     * 
     * List the API keys for the transaction node.
     * @param blockchainMemberName Blockchain member name. (required)
     * @param transactionNodeName Transaction node name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @return ApiResponse&lt;ApiKeyCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiKeyCollection> transactionNodesListApiKeysWithHttpInfo(String blockchainMemberName, String transactionNodeName, String apiVersion, String subscriptionId, String resourceGroupName) throws ApiException {
        okhttp3.Call localVarCall = transactionNodesListApiKeysValidateBeforeCall(blockchainMemberName, transactionNodeName, apiVersion, subscriptionId, resourceGroupName, null);
        Type localVarReturnType = new TypeToken<ApiKeyCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List the API keys for the transaction node.
     * @param blockchainMemberName Blockchain member name. (required)
     * @param transactionNodeName Transaction node name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionNodesListApiKeysAsync(String blockchainMemberName, String transactionNodeName, String apiVersion, String subscriptionId, String resourceGroupName, final ApiCallback<ApiKeyCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionNodesListApiKeysValidateBeforeCall(blockchainMemberName, transactionNodeName, apiVersion, subscriptionId, resourceGroupName, _callback);
        Type localVarReturnType = new TypeToken<ApiKeyCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionNodesListRegenerateApiKeys
     * @param blockchainMemberName Blockchain member name. (required)
     * @param transactionNodeName Transaction node name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param apiKey api key to be regenerated (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionNodesListRegenerateApiKeysCall(String blockchainMemberName, String transactionNodeName, String apiVersion, String subscriptionId, String resourceGroupName, ApiKey apiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiKey;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}/regenerateApiKeys"
            .replace("{" + "blockchainMemberName" + "}", localVarApiClient.escapeString(blockchainMemberName.toString()))
            .replace("{" + "transactionNodeName" + "}", localVarApiClient.escapeString(transactionNodeName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionNodesListRegenerateApiKeysValidateBeforeCall(String blockchainMemberName, String transactionNodeName, String apiVersion, String subscriptionId, String resourceGroupName, ApiKey apiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockchainMemberName' is set
        if (blockchainMemberName == null) {
            throw new ApiException("Missing the required parameter 'blockchainMemberName' when calling transactionNodesListRegenerateApiKeys(Async)");
        }

        // verify the required parameter 'transactionNodeName' is set
        if (transactionNodeName == null) {
            throw new ApiException("Missing the required parameter 'transactionNodeName' when calling transactionNodesListRegenerateApiKeys(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling transactionNodesListRegenerateApiKeys(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling transactionNodesListRegenerateApiKeys(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling transactionNodesListRegenerateApiKeys(Async)");
        }

        return transactionNodesListRegenerateApiKeysCall(blockchainMemberName, transactionNodeName, apiVersion, subscriptionId, resourceGroupName, apiKey, _callback);

    }

    /**
     * 
     * Regenerate the API keys for the blockchain member.
     * @param blockchainMemberName Blockchain member name. (required)
     * @param transactionNodeName Transaction node name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param apiKey api key to be regenerated (optional)
     * @return ApiKeyCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiKeyCollection transactionNodesListRegenerateApiKeys(String blockchainMemberName, String transactionNodeName, String apiVersion, String subscriptionId, String resourceGroupName, ApiKey apiKey) throws ApiException {
        ApiResponse<ApiKeyCollection> localVarResp = transactionNodesListRegenerateApiKeysWithHttpInfo(blockchainMemberName, transactionNodeName, apiVersion, subscriptionId, resourceGroupName, apiKey);
        return localVarResp.getData();
    }

    /**
     * 
     * Regenerate the API keys for the blockchain member.
     * @param blockchainMemberName Blockchain member name. (required)
     * @param transactionNodeName Transaction node name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param apiKey api key to be regenerated (optional)
     * @return ApiResponse&lt;ApiKeyCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiKeyCollection> transactionNodesListRegenerateApiKeysWithHttpInfo(String blockchainMemberName, String transactionNodeName, String apiVersion, String subscriptionId, String resourceGroupName, ApiKey apiKey) throws ApiException {
        okhttp3.Call localVarCall = transactionNodesListRegenerateApiKeysValidateBeforeCall(blockchainMemberName, transactionNodeName, apiVersion, subscriptionId, resourceGroupName, apiKey, null);
        Type localVarReturnType = new TypeToken<ApiKeyCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Regenerate the API keys for the blockchain member.
     * @param blockchainMemberName Blockchain member name. (required)
     * @param transactionNodeName Transaction node name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param apiKey api key to be regenerated (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionNodesListRegenerateApiKeysAsync(String blockchainMemberName, String transactionNodeName, String apiVersion, String subscriptionId, String resourceGroupName, ApiKey apiKey, final ApiCallback<ApiKeyCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionNodesListRegenerateApiKeysValidateBeforeCall(blockchainMemberName, transactionNodeName, apiVersion, subscriptionId, resourceGroupName, apiKey, _callback);
        Type localVarReturnType = new TypeToken<ApiKeyCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionNodesUpdate
     * @param blockchainMemberName Blockchain member name. (required)
     * @param transactionNodeName Transaction node name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param transactionNode Payload to create the transaction node. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionNodesUpdateCall(String blockchainMemberName, String transactionNodeName, String apiVersion, String subscriptionId, String resourceGroupName, TransactionNodeUpdate transactionNode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionNode;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}"
            .replace("{" + "blockchainMemberName" + "}", localVarApiClient.escapeString(blockchainMemberName.toString()))
            .replace("{" + "transactionNodeName" + "}", localVarApiClient.escapeString(transactionNodeName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionNodesUpdateValidateBeforeCall(String blockchainMemberName, String transactionNodeName, String apiVersion, String subscriptionId, String resourceGroupName, TransactionNodeUpdate transactionNode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockchainMemberName' is set
        if (blockchainMemberName == null) {
            throw new ApiException("Missing the required parameter 'blockchainMemberName' when calling transactionNodesUpdate(Async)");
        }

        // verify the required parameter 'transactionNodeName' is set
        if (transactionNodeName == null) {
            throw new ApiException("Missing the required parameter 'transactionNodeName' when calling transactionNodesUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling transactionNodesUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling transactionNodesUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling transactionNodesUpdate(Async)");
        }

        return transactionNodesUpdateCall(blockchainMemberName, transactionNodeName, apiVersion, subscriptionId, resourceGroupName, transactionNode, _callback);

    }

    /**
     * 
     * Update the transaction node.
     * @param blockchainMemberName Blockchain member name. (required)
     * @param transactionNodeName Transaction node name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param transactionNode Payload to create the transaction node. (optional)
     * @return TransactionNode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public TransactionNode transactionNodesUpdate(String blockchainMemberName, String transactionNodeName, String apiVersion, String subscriptionId, String resourceGroupName, TransactionNodeUpdate transactionNode) throws ApiException {
        ApiResponse<TransactionNode> localVarResp = transactionNodesUpdateWithHttpInfo(blockchainMemberName, transactionNodeName, apiVersion, subscriptionId, resourceGroupName, transactionNode);
        return localVarResp.getData();
    }

    /**
     * 
     * Update the transaction node.
     * @param blockchainMemberName Blockchain member name. (required)
     * @param transactionNodeName Transaction node name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param transactionNode Payload to create the transaction node. (optional)
     * @return ApiResponse&lt;TransactionNode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionNode> transactionNodesUpdateWithHttpInfo(String blockchainMemberName, String transactionNodeName, String apiVersion, String subscriptionId, String resourceGroupName, TransactionNodeUpdate transactionNode) throws ApiException {
        okhttp3.Call localVarCall = transactionNodesUpdateValidateBeforeCall(blockchainMemberName, transactionNodeName, apiVersion, subscriptionId, resourceGroupName, transactionNode, null);
        Type localVarReturnType = new TypeToken<TransactionNode>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update the transaction node.
     * @param blockchainMemberName Blockchain member name. (required)
     * @param transactionNodeName Transaction node name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param transactionNode Payload to create the transaction node. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionNodesUpdateAsync(String blockchainMemberName, String transactionNodeName, String apiVersion, String subscriptionId, String resourceGroupName, TransactionNodeUpdate transactionNode, final ApiCallback<TransactionNode> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionNodesUpdateValidateBeforeCall(blockchainMemberName, transactionNodeName, apiVersion, subscriptionId, resourceGroupName, transactionNode, _callback);
        Type localVarReturnType = new TypeToken<TransactionNode>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
