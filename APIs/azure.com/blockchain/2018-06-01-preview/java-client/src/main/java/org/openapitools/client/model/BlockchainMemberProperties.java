/*
 * BlockchainManagementClient
 * REST API for Azure Blockchain Service
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BlockchainMemberNodesSku;
import org.openapitools.client.model.FirewallRule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Payload of the blockchain member properties for a blockchain member.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:26:08.613537-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BlockchainMemberProperties {
  public static final String SERIALIZED_NAME_CONSORTIUM = "consortium";
  @SerializedName(SERIALIZED_NAME_CONSORTIUM)
  private String consortium;

  public static final String SERIALIZED_NAME_CONSORTIUM_MANAGEMENT_ACCOUNT_ADDRESS = "consortiumManagementAccountAddress";
  @SerializedName(SERIALIZED_NAME_CONSORTIUM_MANAGEMENT_ACCOUNT_ADDRESS)
  private String consortiumManagementAccountAddress;

  public static final String SERIALIZED_NAME_CONSORTIUM_MANAGEMENT_ACCOUNT_PASSWORD = "consortiumManagementAccountPassword";
  @SerializedName(SERIALIZED_NAME_CONSORTIUM_MANAGEMENT_ACCOUNT_PASSWORD)
  private String consortiumManagementAccountPassword;

  public static final String SERIALIZED_NAME_CONSORTIUM_MEMBER_DISPLAY_NAME = "consortiumMemberDisplayName";
  @SerializedName(SERIALIZED_NAME_CONSORTIUM_MEMBER_DISPLAY_NAME)
  private String consortiumMemberDisplayName;

  public static final String SERIALIZED_NAME_CONSORTIUM_ROLE = "consortiumRole";
  @SerializedName(SERIALIZED_NAME_CONSORTIUM_ROLE)
  private String consortiumRole;

  public static final String SERIALIZED_NAME_DNS = "dns";
  @SerializedName(SERIALIZED_NAME_DNS)
  private String dns;

  public static final String SERIALIZED_NAME_FIREWALL_RULES = "firewallRules";
  @SerializedName(SERIALIZED_NAME_FIREWALL_RULES)
  private List<FirewallRule> firewallRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  /**
   * Gets or sets the blockchain protocol.
   */
  @JsonAdapter(ProtocolEnum.Adapter.class)
  public enum ProtocolEnum {
    NOT_SPECIFIED("NotSpecified"),
    
    PARITY("Parity"),
    
    QUORUM("Quorum"),
    
    CORDA("Corda");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtocolEnum fromValue(String value) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private ProtocolEnum protocol;

  /**
   * Gets or sets the blockchain member provision state.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    NOT_SPECIFIED("NotSpecified"),
    
    UPDATING("Updating"),
    
    DELETING("Deleting"),
    
    SUCCEEDED("Succeeded"),
    
    FAILED("Failed"),
    
    STALE("Stale");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_PUBLIC_KEY = "publicKey";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEY)
  private String publicKey;

  public static final String SERIALIZED_NAME_ROOT_CONTRACT_ADDRESS = "rootContractAddress";
  @SerializedName(SERIALIZED_NAME_ROOT_CONTRACT_ADDRESS)
  private String rootContractAddress;

  public static final String SERIALIZED_NAME_USER_NAME = "userName";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public static final String SERIALIZED_NAME_VALIDATOR_NODES_SKU = "validatorNodesSku";
  @SerializedName(SERIALIZED_NAME_VALIDATOR_NODES_SKU)
  private BlockchainMemberNodesSku validatorNodesSku;

  public BlockchainMemberProperties() {
  }

  public BlockchainMemberProperties(
     String consortiumManagementAccountAddress, 
     String dns, 
     ProvisioningStateEnum provisioningState, 
     String publicKey, 
     String rootContractAddress, 
     String userName
  ) {
    this();
    this.consortiumManagementAccountAddress = consortiumManagementAccountAddress;
    this.dns = dns;
    this.provisioningState = provisioningState;
    this.publicKey = publicKey;
    this.rootContractAddress = rootContractAddress;
    this.userName = userName;
  }

  public BlockchainMemberProperties consortium(String consortium) {
    this.consortium = consortium;
    return this;
  }

  /**
   * Gets or sets the consortium for the blockchain member.
   * @return consortium
   */
  @javax.annotation.Nullable
  public String getConsortium() {
    return consortium;
  }

  public void setConsortium(String consortium) {
    this.consortium = consortium;
  }


  /**
   * Gets the managed consortium management account address.
   * @return consortiumManagementAccountAddress
   */
  @javax.annotation.Nullable
  public String getConsortiumManagementAccountAddress() {
    return consortiumManagementAccountAddress;
  }



  public BlockchainMemberProperties consortiumManagementAccountPassword(String consortiumManagementAccountPassword) {
    this.consortiumManagementAccountPassword = consortiumManagementAccountPassword;
    return this;
  }

  /**
   * Sets the managed consortium management account password.
   * @return consortiumManagementAccountPassword
   */
  @javax.annotation.Nullable
  public String getConsortiumManagementAccountPassword() {
    return consortiumManagementAccountPassword;
  }

  public void setConsortiumManagementAccountPassword(String consortiumManagementAccountPassword) {
    this.consortiumManagementAccountPassword = consortiumManagementAccountPassword;
  }


  public BlockchainMemberProperties consortiumMemberDisplayName(String consortiumMemberDisplayName) {
    this.consortiumMemberDisplayName = consortiumMemberDisplayName;
    return this;
  }

  /**
   * Gets the display name of the member in the consortium.
   * @return consortiumMemberDisplayName
   */
  @javax.annotation.Nullable
  public String getConsortiumMemberDisplayName() {
    return consortiumMemberDisplayName;
  }

  public void setConsortiumMemberDisplayName(String consortiumMemberDisplayName) {
    this.consortiumMemberDisplayName = consortiumMemberDisplayName;
  }


  public BlockchainMemberProperties consortiumRole(String consortiumRole) {
    this.consortiumRole = consortiumRole;
    return this;
  }

  /**
   * Gets the role of the member in the consortium.
   * @return consortiumRole
   */
  @javax.annotation.Nullable
  public String getConsortiumRole() {
    return consortiumRole;
  }

  public void setConsortiumRole(String consortiumRole) {
    this.consortiumRole = consortiumRole;
  }


  /**
   * Gets the dns endpoint of the blockchain member.
   * @return dns
   */
  @javax.annotation.Nullable
  public String getDns() {
    return dns;
  }



  public BlockchainMemberProperties firewallRules(List<FirewallRule> firewallRules) {
    this.firewallRules = firewallRules;
    return this;
  }

  public BlockchainMemberProperties addFirewallRulesItem(FirewallRule firewallRulesItem) {
    if (this.firewallRules == null) {
      this.firewallRules = new ArrayList<>();
    }
    this.firewallRules.add(firewallRulesItem);
    return this;
  }

  /**
   * Gets or sets firewall rules
   * @return firewallRules
   */
  @javax.annotation.Nullable
  public List<FirewallRule> getFirewallRules() {
    return firewallRules;
  }

  public void setFirewallRules(List<FirewallRule> firewallRules) {
    this.firewallRules = firewallRules;
  }


  public BlockchainMemberProperties password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Sets the basic auth password of the blockchain member.
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public BlockchainMemberProperties protocol(ProtocolEnum protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Gets or sets the blockchain protocol.
   * @return protocol
   */
  @javax.annotation.Nullable
  public ProtocolEnum getProtocol() {
    return protocol;
  }

  public void setProtocol(ProtocolEnum protocol) {
    this.protocol = protocol;
  }


  /**
   * Gets or sets the blockchain member provision state.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  /**
   * Gets the public key of the blockchain member (default transaction node).
   * @return publicKey
   */
  @javax.annotation.Nullable
  public String getPublicKey() {
    return publicKey;
  }



  /**
   * Gets the Ethereum root contract address of the blockchain.
   * @return rootContractAddress
   */
  @javax.annotation.Nullable
  public String getRootContractAddress() {
    return rootContractAddress;
  }



  /**
   * Gets the auth user name of the blockchain member.
   * @return userName
   */
  @javax.annotation.Nullable
  public String getUserName() {
    return userName;
  }



  public BlockchainMemberProperties validatorNodesSku(BlockchainMemberNodesSku validatorNodesSku) {
    this.validatorNodesSku = validatorNodesSku;
    return this;
  }

  /**
   * Get validatorNodesSku
   * @return validatorNodesSku
   */
  @javax.annotation.Nullable
  public BlockchainMemberNodesSku getValidatorNodesSku() {
    return validatorNodesSku;
  }

  public void setValidatorNodesSku(BlockchainMemberNodesSku validatorNodesSku) {
    this.validatorNodesSku = validatorNodesSku;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlockchainMemberProperties blockchainMemberProperties = (BlockchainMemberProperties) o;
    return Objects.equals(this.consortium, blockchainMemberProperties.consortium) &&
        Objects.equals(this.consortiumManagementAccountAddress, blockchainMemberProperties.consortiumManagementAccountAddress) &&
        Objects.equals(this.consortiumManagementAccountPassword, blockchainMemberProperties.consortiumManagementAccountPassword) &&
        Objects.equals(this.consortiumMemberDisplayName, blockchainMemberProperties.consortiumMemberDisplayName) &&
        Objects.equals(this.consortiumRole, blockchainMemberProperties.consortiumRole) &&
        Objects.equals(this.dns, blockchainMemberProperties.dns) &&
        Objects.equals(this.firewallRules, blockchainMemberProperties.firewallRules) &&
        Objects.equals(this.password, blockchainMemberProperties.password) &&
        Objects.equals(this.protocol, blockchainMemberProperties.protocol) &&
        Objects.equals(this.provisioningState, blockchainMemberProperties.provisioningState) &&
        Objects.equals(this.publicKey, blockchainMemberProperties.publicKey) &&
        Objects.equals(this.rootContractAddress, blockchainMemberProperties.rootContractAddress) &&
        Objects.equals(this.userName, blockchainMemberProperties.userName) &&
        Objects.equals(this.validatorNodesSku, blockchainMemberProperties.validatorNodesSku);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consortium, consortiumManagementAccountAddress, consortiumManagementAccountPassword, consortiumMemberDisplayName, consortiumRole, dns, firewallRules, password, protocol, provisioningState, publicKey, rootContractAddress, userName, validatorNodesSku);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlockchainMemberProperties {\n");
    sb.append("    consortium: ").append(toIndentedString(consortium)).append("\n");
    sb.append("    consortiumManagementAccountAddress: ").append(toIndentedString(consortiumManagementAccountAddress)).append("\n");
    sb.append("    consortiumManagementAccountPassword: ").append(toIndentedString(consortiumManagementAccountPassword)).append("\n");
    sb.append("    consortiumMemberDisplayName: ").append(toIndentedString(consortiumMemberDisplayName)).append("\n");
    sb.append("    consortiumRole: ").append(toIndentedString(consortiumRole)).append("\n");
    sb.append("    dns: ").append(toIndentedString(dns)).append("\n");
    sb.append("    firewallRules: ").append(toIndentedString(firewallRules)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
    sb.append("    rootContractAddress: ").append(toIndentedString(rootContractAddress)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    validatorNodesSku: ").append(toIndentedString(validatorNodesSku)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("consortium");
    openapiFields.add("consortiumManagementAccountAddress");
    openapiFields.add("consortiumManagementAccountPassword");
    openapiFields.add("consortiumMemberDisplayName");
    openapiFields.add("consortiumRole");
    openapiFields.add("dns");
    openapiFields.add("firewallRules");
    openapiFields.add("password");
    openapiFields.add("protocol");
    openapiFields.add("provisioningState");
    openapiFields.add("publicKey");
    openapiFields.add("rootContractAddress");
    openapiFields.add("userName");
    openapiFields.add("validatorNodesSku");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BlockchainMemberProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BlockchainMemberProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BlockchainMemberProperties is not found in the empty JSON string", BlockchainMemberProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BlockchainMemberProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BlockchainMemberProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("consortium") != null && !jsonObj.get("consortium").isJsonNull()) && !jsonObj.get("consortium").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consortium` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consortium").toString()));
      }
      if ((jsonObj.get("consortiumManagementAccountAddress") != null && !jsonObj.get("consortiumManagementAccountAddress").isJsonNull()) && !jsonObj.get("consortiumManagementAccountAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consortiumManagementAccountAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consortiumManagementAccountAddress").toString()));
      }
      if ((jsonObj.get("consortiumManagementAccountPassword") != null && !jsonObj.get("consortiumManagementAccountPassword").isJsonNull()) && !jsonObj.get("consortiumManagementAccountPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consortiumManagementAccountPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consortiumManagementAccountPassword").toString()));
      }
      if ((jsonObj.get("consortiumMemberDisplayName") != null && !jsonObj.get("consortiumMemberDisplayName").isJsonNull()) && !jsonObj.get("consortiumMemberDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consortiumMemberDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consortiumMemberDisplayName").toString()));
      }
      if ((jsonObj.get("consortiumRole") != null && !jsonObj.get("consortiumRole").isJsonNull()) && !jsonObj.get("consortiumRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consortiumRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consortiumRole").toString()));
      }
      if ((jsonObj.get("dns") != null && !jsonObj.get("dns").isJsonNull()) && !jsonObj.get("dns").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dns` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dns").toString()));
      }
      if (jsonObj.get("firewallRules") != null && !jsonObj.get("firewallRules").isJsonNull()) {
        JsonArray jsonArrayfirewallRules = jsonObj.getAsJsonArray("firewallRules");
        if (jsonArrayfirewallRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("firewallRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `firewallRules` to be an array in the JSON string but got `%s`", jsonObj.get("firewallRules").toString()));
          }

          // validate the optional field `firewallRules` (array)
          for (int i = 0; i < jsonArrayfirewallRules.size(); i++) {
            FirewallRule.validateJsonElement(jsonArrayfirewallRules.get(i));
          };
        }
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      // validate the optional field `protocol`
      if (jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) {
        ProtocolEnum.validateJsonElement(jsonObj.get("protocol"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      if ((jsonObj.get("publicKey") != null && !jsonObj.get("publicKey").isJsonNull()) && !jsonObj.get("publicKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicKey").toString()));
      }
      if ((jsonObj.get("rootContractAddress") != null && !jsonObj.get("rootContractAddress").isJsonNull()) && !jsonObj.get("rootContractAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rootContractAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rootContractAddress").toString()));
      }
      if ((jsonObj.get("userName") != null && !jsonObj.get("userName").isJsonNull()) && !jsonObj.get("userName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userName").toString()));
      }
      // validate the optional field `validatorNodesSku`
      if (jsonObj.get("validatorNodesSku") != null && !jsonObj.get("validatorNodesSku").isJsonNull()) {
        BlockchainMemberNodesSku.validateJsonElement(jsonObj.get("validatorNodesSku"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BlockchainMemberProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BlockchainMemberProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BlockchainMemberProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BlockchainMemberProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<BlockchainMemberProperties>() {
           @Override
           public void write(JsonWriter out, BlockchainMemberProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BlockchainMemberProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BlockchainMemberProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BlockchainMemberProperties
   * @throws IOException if the JSON string is invalid with respect to BlockchainMemberProperties
   */
  public static BlockchainMemberProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BlockchainMemberProperties.class);
  }

  /**
   * Convert an instance of BlockchainMemberProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

