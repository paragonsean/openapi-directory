/*
 * BlockchainManagementClient
 * REST API for Azure Blockchain Service
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiKey;
import org.openapitools.client.model.ApiKeyCollection;
import org.openapitools.client.model.TransactionNode;
import org.openapitools.client.model.TransactionNodeCollection;
import org.openapitools.client.model.TransactionNodeUpdate;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionNodeApi
 */
@Disabled
public class TransactionNodeApiTest {

    private final TransactionNodeApi api = new TransactionNodeApi();

    /**
     * Create or update the transaction node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transactionNodesCreateTest() throws ApiException {
        String blockchainMemberName = null;
        String transactionNodeName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        TransactionNode transactionNode = null;
        TransactionNode response = api.transactionNodesCreate(blockchainMemberName, transactionNodeName, apiVersion, subscriptionId, resourceGroupName, transactionNode);
        // TODO: test validations
    }

    /**
     * Delete the transaction node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transactionNodesDeleteTest() throws ApiException {
        String blockchainMemberName = null;
        String transactionNodeName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        api.transactionNodesDelete(blockchainMemberName, transactionNodeName, apiVersion, subscriptionId, resourceGroupName);
        // TODO: test validations
    }

    /**
     * Get the details of the transaction node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transactionNodesGetTest() throws ApiException {
        String blockchainMemberName = null;
        String transactionNodeName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        TransactionNode response = api.transactionNodesGet(blockchainMemberName, transactionNodeName, apiVersion, subscriptionId, resourceGroupName);
        // TODO: test validations
    }

    /**
     * Lists the transaction nodes for a blockchain member.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transactionNodesListTest() throws ApiException {
        String blockchainMemberName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        TransactionNodeCollection response = api.transactionNodesList(blockchainMemberName, apiVersion, subscriptionId, resourceGroupName);
        // TODO: test validations
    }

    /**
     * List the API keys for the transaction node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transactionNodesListApiKeysTest() throws ApiException {
        String blockchainMemberName = null;
        String transactionNodeName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        ApiKeyCollection response = api.transactionNodesListApiKeys(blockchainMemberName, transactionNodeName, apiVersion, subscriptionId, resourceGroupName);
        // TODO: test validations
    }

    /**
     * Regenerate the API keys for the blockchain member.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transactionNodesListRegenerateApiKeysTest() throws ApiException {
        String blockchainMemberName = null;
        String transactionNodeName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        ApiKey apiKey = null;
        ApiKeyCollection response = api.transactionNodesListRegenerateApiKeys(blockchainMemberName, transactionNodeName, apiVersion, subscriptionId, resourceGroupName, apiKey);
        // TODO: test validations
    }

    /**
     * Update the transaction node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transactionNodesUpdateTest() throws ApiException {
        String blockchainMemberName = null;
        String transactionNodeName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        TransactionNodeUpdate transactionNode = null;
        TransactionNode response = api.transactionNodesUpdate(blockchainMemberName, transactionNodeName, apiVersion, subscriptionId, resourceGroupName, transactionNode);
        // TODO: test validations
    }

}
