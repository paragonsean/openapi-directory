/**
 * BlockchainManagementClient
 * REST API for Azure Blockchain Service
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BlockchainManagementClient);
  }
}(this, function(expect, BlockchainManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BlockchainManagementClient.BlockchainMemberProperties();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('BlockchainMemberProperties', function() {
    it('should create an instance of BlockchainMemberProperties', function() {
      // uncomment below and update the code to test BlockchainMemberProperties
      //var instance = new BlockchainManagementClient.BlockchainMemberProperties();
      //expect(instance).to.be.a(BlockchainManagementClient.BlockchainMemberProperties);
    });

    it('should have the property consortium (base name: "consortium")', function() {
      // uncomment below and update the code to test the property consortium
      //var instance = new BlockchainManagementClient.BlockchainMemberProperties();
      //expect(instance).to.be();
    });

    it('should have the property consortiumManagementAccountAddress (base name: "consortiumManagementAccountAddress")', function() {
      // uncomment below and update the code to test the property consortiumManagementAccountAddress
      //var instance = new BlockchainManagementClient.BlockchainMemberProperties();
      //expect(instance).to.be();
    });

    it('should have the property consortiumManagementAccountPassword (base name: "consortiumManagementAccountPassword")', function() {
      // uncomment below and update the code to test the property consortiumManagementAccountPassword
      //var instance = new BlockchainManagementClient.BlockchainMemberProperties();
      //expect(instance).to.be();
    });

    it('should have the property consortiumMemberDisplayName (base name: "consortiumMemberDisplayName")', function() {
      // uncomment below and update the code to test the property consortiumMemberDisplayName
      //var instance = new BlockchainManagementClient.BlockchainMemberProperties();
      //expect(instance).to.be();
    });

    it('should have the property consortiumRole (base name: "consortiumRole")', function() {
      // uncomment below and update the code to test the property consortiumRole
      //var instance = new BlockchainManagementClient.BlockchainMemberProperties();
      //expect(instance).to.be();
    });

    it('should have the property dns (base name: "dns")', function() {
      // uncomment below and update the code to test the property dns
      //var instance = new BlockchainManagementClient.BlockchainMemberProperties();
      //expect(instance).to.be();
    });

    it('should have the property firewallRules (base name: "firewallRules")', function() {
      // uncomment below and update the code to test the property firewallRules
      //var instance = new BlockchainManagementClient.BlockchainMemberProperties();
      //expect(instance).to.be();
    });

    it('should have the property password (base name: "password")', function() {
      // uncomment below and update the code to test the property password
      //var instance = new BlockchainManagementClient.BlockchainMemberProperties();
      //expect(instance).to.be();
    });

    it('should have the property protocol (base name: "protocol")', function() {
      // uncomment below and update the code to test the property protocol
      //var instance = new BlockchainManagementClient.BlockchainMemberProperties();
      //expect(instance).to.be();
    });

    it('should have the property provisioningState (base name: "provisioningState")', function() {
      // uncomment below and update the code to test the property provisioningState
      //var instance = new BlockchainManagementClient.BlockchainMemberProperties();
      //expect(instance).to.be();
    });

    it('should have the property publicKey (base name: "publicKey")', function() {
      // uncomment below and update the code to test the property publicKey
      //var instance = new BlockchainManagementClient.BlockchainMemberProperties();
      //expect(instance).to.be();
    });

    it('should have the property rootContractAddress (base name: "rootContractAddress")', function() {
      // uncomment below and update the code to test the property rootContractAddress
      //var instance = new BlockchainManagementClient.BlockchainMemberProperties();
      //expect(instance).to.be();
    });

    it('should have the property userName (base name: "userName")', function() {
      // uncomment below and update the code to test the property userName
      //var instance = new BlockchainManagementClient.BlockchainMemberProperties();
      //expect(instance).to.be();
    });

    it('should have the property validatorNodesSku (base name: "validatorNodesSku")', function() {
      // uncomment below and update the code to test the property validatorNodesSku
      //var instance = new BlockchainManagementClient.BlockchainMemberProperties();
      //expect(instance).to.be();
    });

  });

}));
