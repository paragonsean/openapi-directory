/**
 * BlockchainManagementClient
 * REST API for Azure Blockchain Service
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiKey from '../model/ApiKey';
import ApiKeyCollection from '../model/ApiKeyCollection';
import TransactionNode from '../model/TransactionNode';
import TransactionNodeCollection from '../model/TransactionNodeCollection';
import TransactionNodeUpdate from '../model/TransactionNodeUpdate';

/**
* TransactionNode service.
* @module api/TransactionNodeApi
* @version 2018-06-01-preview
*/
export default class TransactionNodeApi {

    /**
    * Constructs a new TransactionNodeApi. 
    * @alias module:api/TransactionNodeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the transactionNodesCreate operation.
     * @callback module:api/TransactionNodeApi~transactionNodesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionNode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update the transaction node.
     * @param {String} blockchainMemberName Blockchain member name.
     * @param {String} transactionNodeName Transaction node name.
     * @param {module:model/String} apiVersion Client API Version.
     * @param {String} subscriptionId Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {Object} opts Optional parameters
     * @param {module:model/TransactionNode} [transactionNode] Payload to create the transaction node.
     * @param {module:api/TransactionNodeApi~transactionNodesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionNode}
     */
    transactionNodesCreate(blockchainMemberName, transactionNodeName, apiVersion, subscriptionId, resourceGroupName, opts, callback) {
      opts = opts || {};
      let postBody = opts['transactionNode'];
      // verify the required parameter 'blockchainMemberName' is set
      if (blockchainMemberName === undefined || blockchainMemberName === null) {
        throw new Error("Missing the required parameter 'blockchainMemberName' when calling transactionNodesCreate");
      }
      // verify the required parameter 'transactionNodeName' is set
      if (transactionNodeName === undefined || transactionNodeName === null) {
        throw new Error("Missing the required parameter 'transactionNodeName' when calling transactionNodesCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling transactionNodesCreate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling transactionNodesCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling transactionNodesCreate");
      }

      let pathParams = {
        'blockchainMemberName': blockchainMemberName,
        'transactionNodeName': transactionNodeName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionNode;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionNodesDelete operation.
     * @callback module:api/TransactionNodeApi~transactionNodesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the transaction node.
     * @param {String} blockchainMemberName Blockchain member name.
     * @param {String} transactionNodeName Transaction node name.
     * @param {module:model/String} apiVersion Client API Version.
     * @param {String} subscriptionId Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {module:api/TransactionNodeApi~transactionNodesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    transactionNodesDelete(blockchainMemberName, transactionNodeName, apiVersion, subscriptionId, resourceGroupName, callback) {
      let postBody = null;
      // verify the required parameter 'blockchainMemberName' is set
      if (blockchainMemberName === undefined || blockchainMemberName === null) {
        throw new Error("Missing the required parameter 'blockchainMemberName' when calling transactionNodesDelete");
      }
      // verify the required parameter 'transactionNodeName' is set
      if (transactionNodeName === undefined || transactionNodeName === null) {
        throw new Error("Missing the required parameter 'transactionNodeName' when calling transactionNodesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling transactionNodesDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling transactionNodesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling transactionNodesDelete");
      }

      let pathParams = {
        'blockchainMemberName': blockchainMemberName,
        'transactionNodeName': transactionNodeName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionNodesGet operation.
     * @callback module:api/TransactionNodeApi~transactionNodesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionNode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the details of the transaction node.
     * @param {String} blockchainMemberName Blockchain member name.
     * @param {String} transactionNodeName Transaction node name.
     * @param {module:model/String} apiVersion Client API Version.
     * @param {String} subscriptionId Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {module:api/TransactionNodeApi~transactionNodesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionNode}
     */
    transactionNodesGet(blockchainMemberName, transactionNodeName, apiVersion, subscriptionId, resourceGroupName, callback) {
      let postBody = null;
      // verify the required parameter 'blockchainMemberName' is set
      if (blockchainMemberName === undefined || blockchainMemberName === null) {
        throw new Error("Missing the required parameter 'blockchainMemberName' when calling transactionNodesGet");
      }
      // verify the required parameter 'transactionNodeName' is set
      if (transactionNodeName === undefined || transactionNodeName === null) {
        throw new Error("Missing the required parameter 'transactionNodeName' when calling transactionNodesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling transactionNodesGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling transactionNodesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling transactionNodesGet");
      }

      let pathParams = {
        'blockchainMemberName': blockchainMemberName,
        'transactionNodeName': transactionNodeName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransactionNode;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionNodesList operation.
     * @callback module:api/TransactionNodeApi~transactionNodesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionNodeCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the transaction nodes for a blockchain member.
     * @param {String} blockchainMemberName Blockchain member name.
     * @param {module:model/String} apiVersion Client API Version.
     * @param {String} subscriptionId Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {module:api/TransactionNodeApi~transactionNodesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionNodeCollection}
     */
    transactionNodesList(blockchainMemberName, apiVersion, subscriptionId, resourceGroupName, callback) {
      let postBody = null;
      // verify the required parameter 'blockchainMemberName' is set
      if (blockchainMemberName === undefined || blockchainMemberName === null) {
        throw new Error("Missing the required parameter 'blockchainMemberName' when calling transactionNodesList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling transactionNodesList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling transactionNodesList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling transactionNodesList");
      }

      let pathParams = {
        'blockchainMemberName': blockchainMemberName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransactionNodeCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/transactionNodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionNodesListApiKeys operation.
     * @callback module:api/TransactionNodeApi~transactionNodesListApiKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKeyCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the API keys for the transaction node.
     * @param {String} blockchainMemberName Blockchain member name.
     * @param {String} transactionNodeName Transaction node name.
     * @param {module:model/String} apiVersion Client API Version.
     * @param {String} subscriptionId Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {module:api/TransactionNodeApi~transactionNodesListApiKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiKeyCollection}
     */
    transactionNodesListApiKeys(blockchainMemberName, transactionNodeName, apiVersion, subscriptionId, resourceGroupName, callback) {
      let postBody = null;
      // verify the required parameter 'blockchainMemberName' is set
      if (blockchainMemberName === undefined || blockchainMemberName === null) {
        throw new Error("Missing the required parameter 'blockchainMemberName' when calling transactionNodesListApiKeys");
      }
      // verify the required parameter 'transactionNodeName' is set
      if (transactionNodeName === undefined || transactionNodeName === null) {
        throw new Error("Missing the required parameter 'transactionNodeName' when calling transactionNodesListApiKeys");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling transactionNodesListApiKeys");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling transactionNodesListApiKeys");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling transactionNodesListApiKeys");
      }

      let pathParams = {
        'blockchainMemberName': blockchainMemberName,
        'transactionNodeName': transactionNodeName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiKeyCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}/listApiKeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionNodesListRegenerateApiKeys operation.
     * @callback module:api/TransactionNodeApi~transactionNodesListRegenerateApiKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKeyCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Regenerate the API keys for the blockchain member.
     * @param {String} blockchainMemberName Blockchain member name.
     * @param {String} transactionNodeName Transaction node name.
     * @param {module:model/String} apiVersion Client API Version.
     * @param {String} subscriptionId Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiKey} [apiKey] api key to be regenerated
     * @param {module:api/TransactionNodeApi~transactionNodesListRegenerateApiKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiKeyCollection}
     */
    transactionNodesListRegenerateApiKeys(blockchainMemberName, transactionNodeName, apiVersion, subscriptionId, resourceGroupName, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiKey'];
      // verify the required parameter 'blockchainMemberName' is set
      if (blockchainMemberName === undefined || blockchainMemberName === null) {
        throw new Error("Missing the required parameter 'blockchainMemberName' when calling transactionNodesListRegenerateApiKeys");
      }
      // verify the required parameter 'transactionNodeName' is set
      if (transactionNodeName === undefined || transactionNodeName === null) {
        throw new Error("Missing the required parameter 'transactionNodeName' when calling transactionNodesListRegenerateApiKeys");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling transactionNodesListRegenerateApiKeys");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling transactionNodesListRegenerateApiKeys");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling transactionNodesListRegenerateApiKeys");
      }

      let pathParams = {
        'blockchainMemberName': blockchainMemberName,
        'transactionNodeName': transactionNodeName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiKeyCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}/regenerateApiKeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionNodesUpdate operation.
     * @callback module:api/TransactionNodeApi~transactionNodesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionNode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the transaction node.
     * @param {String} blockchainMemberName Blockchain member name.
     * @param {String} transactionNodeName Transaction node name.
     * @param {module:model/String} apiVersion Client API Version.
     * @param {String} subscriptionId Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {Object} opts Optional parameters
     * @param {module:model/TransactionNodeUpdate} [transactionNode] Payload to create the transaction node.
     * @param {module:api/TransactionNodeApi~transactionNodesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionNode}
     */
    transactionNodesUpdate(blockchainMemberName, transactionNodeName, apiVersion, subscriptionId, resourceGroupName, opts, callback) {
      opts = opts || {};
      let postBody = opts['transactionNode'];
      // verify the required parameter 'blockchainMemberName' is set
      if (blockchainMemberName === undefined || blockchainMemberName === null) {
        throw new Error("Missing the required parameter 'blockchainMemberName' when calling transactionNodesUpdate");
      }
      // verify the required parameter 'transactionNodeName' is set
      if (transactionNodeName === undefined || transactionNodeName === null) {
        throw new Error("Missing the required parameter 'transactionNodeName' when calling transactionNodesUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling transactionNodesUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling transactionNodesUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling transactionNodesUpdate");
      }

      let pathParams = {
        'blockchainMemberName': blockchainMemberName,
        'transactionNodeName': transactionNodeName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionNode;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
