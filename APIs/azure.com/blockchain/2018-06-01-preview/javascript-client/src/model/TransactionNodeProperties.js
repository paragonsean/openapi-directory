/**
 * BlockchainManagementClient
 * REST API for Azure Blockchain Service
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FirewallRule from './FirewallRule';

/**
 * The TransactionNodeProperties model module.
 * @module model/TransactionNodeProperties
 * @version 2018-06-01-preview
 */
class TransactionNodeProperties {
    /**
     * Constructs a new <code>TransactionNodeProperties</code>.
     * Payload of transaction node properties payload in the transaction node payload.
     * @alias module:model/TransactionNodeProperties
     */
    constructor() { 
        
        TransactionNodeProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TransactionNodeProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionNodeProperties} obj Optional instance to populate.
     * @return {module:model/TransactionNodeProperties} The populated <code>TransactionNodeProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionNodeProperties();

            if (data.hasOwnProperty('dns')) {
                obj['dns'] = ApiClient.convertToType(data['dns'], 'String');
            }
            if (data.hasOwnProperty('firewallRules')) {
                obj['firewallRules'] = ApiClient.convertToType(data['firewallRules'], [FirewallRule]);
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('publicKey')) {
                obj['publicKey'] = ApiClient.convertToType(data['publicKey'], 'String');
            }
            if (data.hasOwnProperty('userName')) {
                obj['userName'] = ApiClient.convertToType(data['userName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionNodeProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionNodeProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dns'] && !(typeof data['dns'] === 'string' || data['dns'] instanceof String)) {
            throw new Error("Expected the field `dns` to be a primitive type in the JSON string but got " + data['dns']);
        }
        if (data['firewallRules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['firewallRules'])) {
                throw new Error("Expected the field `firewallRules` to be an array in the JSON data but got " + data['firewallRules']);
            }
            // validate the optional field `firewallRules` (array)
            for (const item of data['firewallRules']) {
                FirewallRule.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['publicKey'] && !(typeof data['publicKey'] === 'string' || data['publicKey'] instanceof String)) {
            throw new Error("Expected the field `publicKey` to be a primitive type in the JSON string but got " + data['publicKey']);
        }
        // ensure the json data is a string
        if (data['userName'] && !(typeof data['userName'] === 'string' || data['userName'] instanceof String)) {
            throw new Error("Expected the field `userName` to be a primitive type in the JSON string but got " + data['userName']);
        }

        return true;
    }


}



/**
 * Gets or sets the transaction node dns endpoint.
 * @member {String} dns
 */
TransactionNodeProperties.prototype['dns'] = undefined;

/**
 * Gets or sets the firewall rules.
 * @member {Array.<module:model/FirewallRule>} firewallRules
 */
TransactionNodeProperties.prototype['firewallRules'] = undefined;

/**
 * Sets the transaction node dns endpoint basic auth password.
 * @member {String} password
 */
TransactionNodeProperties.prototype['password'] = undefined;

/**
 * Gets or sets the blockchain member provision state.
 * @member {module:model/TransactionNodeProperties.ProvisioningStateEnum} provisioningState
 */
TransactionNodeProperties.prototype['provisioningState'] = undefined;

/**
 * Gets or sets the transaction node public key.
 * @member {String} publicKey
 */
TransactionNodeProperties.prototype['publicKey'] = undefined;

/**
 * Gets or sets the transaction node dns endpoint basic auth user name.
 * @member {String} userName
 */
TransactionNodeProperties.prototype['userName'] = undefined;





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
TransactionNodeProperties['ProvisioningStateEnum'] = {

    /**
     * value: "NotSpecified"
     * @const
     */
    "NotSpecified": "NotSpecified",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed"
};



export default TransactionNodeProperties;

