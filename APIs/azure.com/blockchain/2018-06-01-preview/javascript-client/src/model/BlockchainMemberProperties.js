/**
 * BlockchainManagementClient
 * REST API for Azure Blockchain Service
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BlockchainMemberNodesSku from './BlockchainMemberNodesSku';
import FirewallRule from './FirewallRule';

/**
 * The BlockchainMemberProperties model module.
 * @module model/BlockchainMemberProperties
 * @version 2018-06-01-preview
 */
class BlockchainMemberProperties {
    /**
     * Constructs a new <code>BlockchainMemberProperties</code>.
     * Payload of the blockchain member properties for a blockchain member.
     * @alias module:model/BlockchainMemberProperties
     */
    constructor() { 
        
        BlockchainMemberProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BlockchainMemberProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BlockchainMemberProperties} obj Optional instance to populate.
     * @return {module:model/BlockchainMemberProperties} The populated <code>BlockchainMemberProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BlockchainMemberProperties();

            if (data.hasOwnProperty('consortium')) {
                obj['consortium'] = ApiClient.convertToType(data['consortium'], 'String');
            }
            if (data.hasOwnProperty('consortiumManagementAccountAddress')) {
                obj['consortiumManagementAccountAddress'] = ApiClient.convertToType(data['consortiumManagementAccountAddress'], 'String');
            }
            if (data.hasOwnProperty('consortiumManagementAccountPassword')) {
                obj['consortiumManagementAccountPassword'] = ApiClient.convertToType(data['consortiumManagementAccountPassword'], 'String');
            }
            if (data.hasOwnProperty('consortiumMemberDisplayName')) {
                obj['consortiumMemberDisplayName'] = ApiClient.convertToType(data['consortiumMemberDisplayName'], 'String');
            }
            if (data.hasOwnProperty('consortiumRole')) {
                obj['consortiumRole'] = ApiClient.convertToType(data['consortiumRole'], 'String');
            }
            if (data.hasOwnProperty('dns')) {
                obj['dns'] = ApiClient.convertToType(data['dns'], 'String');
            }
            if (data.hasOwnProperty('firewallRules')) {
                obj['firewallRules'] = ApiClient.convertToType(data['firewallRules'], [FirewallRule]);
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('publicKey')) {
                obj['publicKey'] = ApiClient.convertToType(data['publicKey'], 'String');
            }
            if (data.hasOwnProperty('rootContractAddress')) {
                obj['rootContractAddress'] = ApiClient.convertToType(data['rootContractAddress'], 'String');
            }
            if (data.hasOwnProperty('userName')) {
                obj['userName'] = ApiClient.convertToType(data['userName'], 'String');
            }
            if (data.hasOwnProperty('validatorNodesSku')) {
                obj['validatorNodesSku'] = BlockchainMemberNodesSku.constructFromObject(data['validatorNodesSku']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BlockchainMemberProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BlockchainMemberProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['consortium'] && !(typeof data['consortium'] === 'string' || data['consortium'] instanceof String)) {
            throw new Error("Expected the field `consortium` to be a primitive type in the JSON string but got " + data['consortium']);
        }
        // ensure the json data is a string
        if (data['consortiumManagementAccountAddress'] && !(typeof data['consortiumManagementAccountAddress'] === 'string' || data['consortiumManagementAccountAddress'] instanceof String)) {
            throw new Error("Expected the field `consortiumManagementAccountAddress` to be a primitive type in the JSON string but got " + data['consortiumManagementAccountAddress']);
        }
        // ensure the json data is a string
        if (data['consortiumManagementAccountPassword'] && !(typeof data['consortiumManagementAccountPassword'] === 'string' || data['consortiumManagementAccountPassword'] instanceof String)) {
            throw new Error("Expected the field `consortiumManagementAccountPassword` to be a primitive type in the JSON string but got " + data['consortiumManagementAccountPassword']);
        }
        // ensure the json data is a string
        if (data['consortiumMemberDisplayName'] && !(typeof data['consortiumMemberDisplayName'] === 'string' || data['consortiumMemberDisplayName'] instanceof String)) {
            throw new Error("Expected the field `consortiumMemberDisplayName` to be a primitive type in the JSON string but got " + data['consortiumMemberDisplayName']);
        }
        // ensure the json data is a string
        if (data['consortiumRole'] && !(typeof data['consortiumRole'] === 'string' || data['consortiumRole'] instanceof String)) {
            throw new Error("Expected the field `consortiumRole` to be a primitive type in the JSON string but got " + data['consortiumRole']);
        }
        // ensure the json data is a string
        if (data['dns'] && !(typeof data['dns'] === 'string' || data['dns'] instanceof String)) {
            throw new Error("Expected the field `dns` to be a primitive type in the JSON string but got " + data['dns']);
        }
        if (data['firewallRules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['firewallRules'])) {
                throw new Error("Expected the field `firewallRules` to be an array in the JSON data but got " + data['firewallRules']);
            }
            // validate the optional field `firewallRules` (array)
            for (const item of data['firewallRules']) {
                FirewallRule.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['protocol'] && !(typeof data['protocol'] === 'string' || data['protocol'] instanceof String)) {
            throw new Error("Expected the field `protocol` to be a primitive type in the JSON string but got " + data['protocol']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['publicKey'] && !(typeof data['publicKey'] === 'string' || data['publicKey'] instanceof String)) {
            throw new Error("Expected the field `publicKey` to be a primitive type in the JSON string but got " + data['publicKey']);
        }
        // ensure the json data is a string
        if (data['rootContractAddress'] && !(typeof data['rootContractAddress'] === 'string' || data['rootContractAddress'] instanceof String)) {
            throw new Error("Expected the field `rootContractAddress` to be a primitive type in the JSON string but got " + data['rootContractAddress']);
        }
        // ensure the json data is a string
        if (data['userName'] && !(typeof data['userName'] === 'string' || data['userName'] instanceof String)) {
            throw new Error("Expected the field `userName` to be a primitive type in the JSON string but got " + data['userName']);
        }
        // validate the optional field `validatorNodesSku`
        if (data['validatorNodesSku']) { // data not null
          BlockchainMemberNodesSku.validateJSON(data['validatorNodesSku']);
        }

        return true;
    }


}



/**
 * Gets or sets the consortium for the blockchain member.
 * @member {String} consortium
 */
BlockchainMemberProperties.prototype['consortium'] = undefined;

/**
 * Gets the managed consortium management account address.
 * @member {String} consortiumManagementAccountAddress
 */
BlockchainMemberProperties.prototype['consortiumManagementAccountAddress'] = undefined;

/**
 * Sets the managed consortium management account password.
 * @member {String} consortiumManagementAccountPassword
 */
BlockchainMemberProperties.prototype['consortiumManagementAccountPassword'] = undefined;

/**
 * Gets the display name of the member in the consortium.
 * @member {String} consortiumMemberDisplayName
 */
BlockchainMemberProperties.prototype['consortiumMemberDisplayName'] = undefined;

/**
 * Gets the role of the member in the consortium.
 * @member {String} consortiumRole
 */
BlockchainMemberProperties.prototype['consortiumRole'] = undefined;

/**
 * Gets the dns endpoint of the blockchain member.
 * @member {String} dns
 */
BlockchainMemberProperties.prototype['dns'] = undefined;

/**
 * Gets or sets firewall rules
 * @member {Array.<module:model/FirewallRule>} firewallRules
 */
BlockchainMemberProperties.prototype['firewallRules'] = undefined;

/**
 * Sets the basic auth password of the blockchain member.
 * @member {String} password
 */
BlockchainMemberProperties.prototype['password'] = undefined;

/**
 * Gets or sets the blockchain protocol.
 * @member {module:model/BlockchainMemberProperties.ProtocolEnum} protocol
 */
BlockchainMemberProperties.prototype['protocol'] = undefined;

/**
 * Gets or sets the blockchain member provision state.
 * @member {module:model/BlockchainMemberProperties.ProvisioningStateEnum} provisioningState
 */
BlockchainMemberProperties.prototype['provisioningState'] = undefined;

/**
 * Gets the public key of the blockchain member (default transaction node).
 * @member {String} publicKey
 */
BlockchainMemberProperties.prototype['publicKey'] = undefined;

/**
 * Gets the Ethereum root contract address of the blockchain.
 * @member {String} rootContractAddress
 */
BlockchainMemberProperties.prototype['rootContractAddress'] = undefined;

/**
 * Gets the auth user name of the blockchain member.
 * @member {String} userName
 */
BlockchainMemberProperties.prototype['userName'] = undefined;

/**
 * @member {module:model/BlockchainMemberNodesSku} validatorNodesSku
 */
BlockchainMemberProperties.prototype['validatorNodesSku'] = undefined;





/**
 * Allowed values for the <code>protocol</code> property.
 * @enum {String}
 * @readonly
 */
BlockchainMemberProperties['ProtocolEnum'] = {

    /**
     * value: "NotSpecified"
     * @const
     */
    "NotSpecified": "NotSpecified",

    /**
     * value: "Parity"
     * @const
     */
    "Parity": "Parity",

    /**
     * value: "Quorum"
     * @const
     */
    "Quorum": "Quorum",

    /**
     * value: "Corda"
     * @const
     */
    "Corda": "Corda"
};


/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
BlockchainMemberProperties['ProvisioningStateEnum'] = {

    /**
     * value: "NotSpecified"
     * @const
     */
    "NotSpecified": "NotSpecified",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Stale"
     * @const
     */
    "Stale": "Stale"
};



export default BlockchainMemberProperties;

