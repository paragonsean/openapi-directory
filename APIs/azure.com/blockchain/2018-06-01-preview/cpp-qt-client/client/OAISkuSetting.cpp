/**
 * BlockchainManagementClient
 * REST API for Azure Blockchain Service
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISkuSetting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISkuSetting::OAISkuSetting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISkuSetting::OAISkuSetting() {
    this->initializeModel();
}

OAISkuSetting::~OAISkuSetting() {}

void OAISkuSetting::initializeModel() {

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_required_features_isSet = false;
    m_required_features_isValid = false;

    m_tier_isSet = false;
    m_tier_isValid = false;
}

void OAISkuSetting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISkuSetting::fromJsonObject(QJsonObject json) {

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_required_features_isValid = ::OpenAPI::fromJsonValue(m_required_features, json[QString("requiredFeatures")]);
    m_required_features_isSet = !json[QString("requiredFeatures")].isNull() && m_required_features_isValid;

    m_tier_isValid = ::OpenAPI::fromJsonValue(m_tier, json[QString("tier")]);
    m_tier_isSet = !json[QString("tier")].isNull() && m_tier_isValid;
}

QString OAISkuSetting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISkuSetting::asJsonObject() const {
    QJsonObject obj;
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_required_features.size() > 0) {
        obj.insert(QString("requiredFeatures"), ::OpenAPI::toJsonValue(m_required_features));
    }
    if (m_tier_isSet) {
        obj.insert(QString("tier"), ::OpenAPI::toJsonValue(m_tier));
    }
    return obj;
}

QList<QString> OAISkuSetting::getLocations() const {
    return m_locations;
}
void OAISkuSetting::setLocations(const QList<QString> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAISkuSetting::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAISkuSetting::is_locations_Valid() const{
    return m_locations_isValid;
}

QString OAISkuSetting::getName() const {
    return m_name;
}
void OAISkuSetting::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISkuSetting::is_name_Set() const{
    return m_name_isSet;
}

bool OAISkuSetting::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAISkuSetting::getRequiredFeatures() const {
    return m_required_features;
}
void OAISkuSetting::setRequiredFeatures(const QList<QString> &required_features) {
    m_required_features = required_features;
    m_required_features_isSet = true;
}

bool OAISkuSetting::is_required_features_Set() const{
    return m_required_features_isSet;
}

bool OAISkuSetting::is_required_features_Valid() const{
    return m_required_features_isValid;
}

QString OAISkuSetting::getTier() const {
    return m_tier;
}
void OAISkuSetting::setTier(const QString &tier) {
    m_tier = tier;
    m_tier_isSet = true;
}

bool OAISkuSetting::is_tier_Set() const{
    return m_tier_isSet;
}

bool OAISkuSetting::is_tier_Valid() const{
    return m_tier_isValid;
}

bool OAISkuSetting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISkuSetting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
