/**
 * BlockchainManagementClient
 * REST API for Azure Blockchain Service
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBlockchainMemberProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBlockchainMemberProperties::OAIBlockchainMemberProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBlockchainMemberProperties::OAIBlockchainMemberProperties() {
    this->initializeModel();
}

OAIBlockchainMemberProperties::~OAIBlockchainMemberProperties() {}

void OAIBlockchainMemberProperties::initializeModel() {

    m_consortium_isSet = false;
    m_consortium_isValid = false;

    m_consortium_management_account_address_isSet = false;
    m_consortium_management_account_address_isValid = false;

    m_consortium_management_account_password_isSet = false;
    m_consortium_management_account_password_isValid = false;

    m_consortium_member_display_name_isSet = false;
    m_consortium_member_display_name_isValid = false;

    m_consortium_role_isSet = false;
    m_consortium_role_isValid = false;

    m_dns_isSet = false;
    m_dns_isValid = false;

    m_firewall_rules_isSet = false;
    m_firewall_rules_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_public_key_isSet = false;
    m_public_key_isValid = false;

    m_root_contract_address_isSet = false;
    m_root_contract_address_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;

    m_validator_nodes_sku_isSet = false;
    m_validator_nodes_sku_isValid = false;
}

void OAIBlockchainMemberProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBlockchainMemberProperties::fromJsonObject(QJsonObject json) {

    m_consortium_isValid = ::OpenAPI::fromJsonValue(m_consortium, json[QString("consortium")]);
    m_consortium_isSet = !json[QString("consortium")].isNull() && m_consortium_isValid;

    m_consortium_management_account_address_isValid = ::OpenAPI::fromJsonValue(m_consortium_management_account_address, json[QString("consortiumManagementAccountAddress")]);
    m_consortium_management_account_address_isSet = !json[QString("consortiumManagementAccountAddress")].isNull() && m_consortium_management_account_address_isValid;

    m_consortium_management_account_password_isValid = ::OpenAPI::fromJsonValue(m_consortium_management_account_password, json[QString("consortiumManagementAccountPassword")]);
    m_consortium_management_account_password_isSet = !json[QString("consortiumManagementAccountPassword")].isNull() && m_consortium_management_account_password_isValid;

    m_consortium_member_display_name_isValid = ::OpenAPI::fromJsonValue(m_consortium_member_display_name, json[QString("consortiumMemberDisplayName")]);
    m_consortium_member_display_name_isSet = !json[QString("consortiumMemberDisplayName")].isNull() && m_consortium_member_display_name_isValid;

    m_consortium_role_isValid = ::OpenAPI::fromJsonValue(m_consortium_role, json[QString("consortiumRole")]);
    m_consortium_role_isSet = !json[QString("consortiumRole")].isNull() && m_consortium_role_isValid;

    m_dns_isValid = ::OpenAPI::fromJsonValue(m_dns, json[QString("dns")]);
    m_dns_isSet = !json[QString("dns")].isNull() && m_dns_isValid;

    m_firewall_rules_isValid = ::OpenAPI::fromJsonValue(m_firewall_rules, json[QString("firewallRules")]);
    m_firewall_rules_isSet = !json[QString("firewallRules")].isNull() && m_firewall_rules_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_public_key_isValid = ::OpenAPI::fromJsonValue(m_public_key, json[QString("publicKey")]);
    m_public_key_isSet = !json[QString("publicKey")].isNull() && m_public_key_isValid;

    m_root_contract_address_isValid = ::OpenAPI::fromJsonValue(m_root_contract_address, json[QString("rootContractAddress")]);
    m_root_contract_address_isSet = !json[QString("rootContractAddress")].isNull() && m_root_contract_address_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("userName")]);
    m_user_name_isSet = !json[QString("userName")].isNull() && m_user_name_isValid;

    m_validator_nodes_sku_isValid = ::OpenAPI::fromJsonValue(m_validator_nodes_sku, json[QString("validatorNodesSku")]);
    m_validator_nodes_sku_isSet = !json[QString("validatorNodesSku")].isNull() && m_validator_nodes_sku_isValid;
}

QString OAIBlockchainMemberProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBlockchainMemberProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_consortium_isSet) {
        obj.insert(QString("consortium"), ::OpenAPI::toJsonValue(m_consortium));
    }
    if (m_consortium_management_account_address_isSet) {
        obj.insert(QString("consortiumManagementAccountAddress"), ::OpenAPI::toJsonValue(m_consortium_management_account_address));
    }
    if (m_consortium_management_account_password_isSet) {
        obj.insert(QString("consortiumManagementAccountPassword"), ::OpenAPI::toJsonValue(m_consortium_management_account_password));
    }
    if (m_consortium_member_display_name_isSet) {
        obj.insert(QString("consortiumMemberDisplayName"), ::OpenAPI::toJsonValue(m_consortium_member_display_name));
    }
    if (m_consortium_role_isSet) {
        obj.insert(QString("consortiumRole"), ::OpenAPI::toJsonValue(m_consortium_role));
    }
    if (m_dns_isSet) {
        obj.insert(QString("dns"), ::OpenAPI::toJsonValue(m_dns));
    }
    if (m_firewall_rules.size() > 0) {
        obj.insert(QString("firewallRules"), ::OpenAPI::toJsonValue(m_firewall_rules));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_public_key_isSet) {
        obj.insert(QString("publicKey"), ::OpenAPI::toJsonValue(m_public_key));
    }
    if (m_root_contract_address_isSet) {
        obj.insert(QString("rootContractAddress"), ::OpenAPI::toJsonValue(m_root_contract_address));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("userName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    if (m_validator_nodes_sku.isSet()) {
        obj.insert(QString("validatorNodesSku"), ::OpenAPI::toJsonValue(m_validator_nodes_sku));
    }
    return obj;
}

QString OAIBlockchainMemberProperties::getConsortium() const {
    return m_consortium;
}
void OAIBlockchainMemberProperties::setConsortium(const QString &consortium) {
    m_consortium = consortium;
    m_consortium_isSet = true;
}

bool OAIBlockchainMemberProperties::is_consortium_Set() const{
    return m_consortium_isSet;
}

bool OAIBlockchainMemberProperties::is_consortium_Valid() const{
    return m_consortium_isValid;
}

QString OAIBlockchainMemberProperties::getConsortiumManagementAccountAddress() const {
    return m_consortium_management_account_address;
}
void OAIBlockchainMemberProperties::setConsortiumManagementAccountAddress(const QString &consortium_management_account_address) {
    m_consortium_management_account_address = consortium_management_account_address;
    m_consortium_management_account_address_isSet = true;
}

bool OAIBlockchainMemberProperties::is_consortium_management_account_address_Set() const{
    return m_consortium_management_account_address_isSet;
}

bool OAIBlockchainMemberProperties::is_consortium_management_account_address_Valid() const{
    return m_consortium_management_account_address_isValid;
}

QString OAIBlockchainMemberProperties::getConsortiumManagementAccountPassword() const {
    return m_consortium_management_account_password;
}
void OAIBlockchainMemberProperties::setConsortiumManagementAccountPassword(const QString &consortium_management_account_password) {
    m_consortium_management_account_password = consortium_management_account_password;
    m_consortium_management_account_password_isSet = true;
}

bool OAIBlockchainMemberProperties::is_consortium_management_account_password_Set() const{
    return m_consortium_management_account_password_isSet;
}

bool OAIBlockchainMemberProperties::is_consortium_management_account_password_Valid() const{
    return m_consortium_management_account_password_isValid;
}

QString OAIBlockchainMemberProperties::getConsortiumMemberDisplayName() const {
    return m_consortium_member_display_name;
}
void OAIBlockchainMemberProperties::setConsortiumMemberDisplayName(const QString &consortium_member_display_name) {
    m_consortium_member_display_name = consortium_member_display_name;
    m_consortium_member_display_name_isSet = true;
}

bool OAIBlockchainMemberProperties::is_consortium_member_display_name_Set() const{
    return m_consortium_member_display_name_isSet;
}

bool OAIBlockchainMemberProperties::is_consortium_member_display_name_Valid() const{
    return m_consortium_member_display_name_isValid;
}

QString OAIBlockchainMemberProperties::getConsortiumRole() const {
    return m_consortium_role;
}
void OAIBlockchainMemberProperties::setConsortiumRole(const QString &consortium_role) {
    m_consortium_role = consortium_role;
    m_consortium_role_isSet = true;
}

bool OAIBlockchainMemberProperties::is_consortium_role_Set() const{
    return m_consortium_role_isSet;
}

bool OAIBlockchainMemberProperties::is_consortium_role_Valid() const{
    return m_consortium_role_isValid;
}

QString OAIBlockchainMemberProperties::getDns() const {
    return m_dns;
}
void OAIBlockchainMemberProperties::setDns(const QString &dns) {
    m_dns = dns;
    m_dns_isSet = true;
}

bool OAIBlockchainMemberProperties::is_dns_Set() const{
    return m_dns_isSet;
}

bool OAIBlockchainMemberProperties::is_dns_Valid() const{
    return m_dns_isValid;
}

QList<OAIFirewallRule> OAIBlockchainMemberProperties::getFirewallRules() const {
    return m_firewall_rules;
}
void OAIBlockchainMemberProperties::setFirewallRules(const QList<OAIFirewallRule> &firewall_rules) {
    m_firewall_rules = firewall_rules;
    m_firewall_rules_isSet = true;
}

bool OAIBlockchainMemberProperties::is_firewall_rules_Set() const{
    return m_firewall_rules_isSet;
}

bool OAIBlockchainMemberProperties::is_firewall_rules_Valid() const{
    return m_firewall_rules_isValid;
}

QString OAIBlockchainMemberProperties::getPassword() const {
    return m_password;
}
void OAIBlockchainMemberProperties::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIBlockchainMemberProperties::is_password_Set() const{
    return m_password_isSet;
}

bool OAIBlockchainMemberProperties::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIBlockchainMemberProperties::getProtocol() const {
    return m_protocol;
}
void OAIBlockchainMemberProperties::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIBlockchainMemberProperties::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIBlockchainMemberProperties::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAIBlockchainMemberProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIBlockchainMemberProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIBlockchainMemberProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIBlockchainMemberProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIBlockchainMemberProperties::getPublicKey() const {
    return m_public_key;
}
void OAIBlockchainMemberProperties::setPublicKey(const QString &public_key) {
    m_public_key = public_key;
    m_public_key_isSet = true;
}

bool OAIBlockchainMemberProperties::is_public_key_Set() const{
    return m_public_key_isSet;
}

bool OAIBlockchainMemberProperties::is_public_key_Valid() const{
    return m_public_key_isValid;
}

QString OAIBlockchainMemberProperties::getRootContractAddress() const {
    return m_root_contract_address;
}
void OAIBlockchainMemberProperties::setRootContractAddress(const QString &root_contract_address) {
    m_root_contract_address = root_contract_address;
    m_root_contract_address_isSet = true;
}

bool OAIBlockchainMemberProperties::is_root_contract_address_Set() const{
    return m_root_contract_address_isSet;
}

bool OAIBlockchainMemberProperties::is_root_contract_address_Valid() const{
    return m_root_contract_address_isValid;
}

QString OAIBlockchainMemberProperties::getUserName() const {
    return m_user_name;
}
void OAIBlockchainMemberProperties::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIBlockchainMemberProperties::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIBlockchainMemberProperties::is_user_name_Valid() const{
    return m_user_name_isValid;
}

OAIBlockchainMemberNodesSku OAIBlockchainMemberProperties::getValidatorNodesSku() const {
    return m_validator_nodes_sku;
}
void OAIBlockchainMemberProperties::setValidatorNodesSku(const OAIBlockchainMemberNodesSku &validator_nodes_sku) {
    m_validator_nodes_sku = validator_nodes_sku;
    m_validator_nodes_sku_isSet = true;
}

bool OAIBlockchainMemberProperties::is_validator_nodes_sku_Set() const{
    return m_validator_nodes_sku_isSet;
}

bool OAIBlockchainMemberProperties::is_validator_nodes_sku_Valid() const{
    return m_validator_nodes_sku_isValid;
}

bool OAIBlockchainMemberProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consortium_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consortium_management_account_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consortium_management_account_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consortium_member_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consortium_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firewall_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_contract_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validator_nodes_sku.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBlockchainMemberProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
