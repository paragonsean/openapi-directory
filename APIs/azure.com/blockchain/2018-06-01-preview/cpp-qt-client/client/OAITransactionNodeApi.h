/**
 * BlockchainManagementClient
 * REST API for Azure Blockchain Service
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITransactionNodeApi_H
#define OAI_OAITransactionNodeApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiKey.h"
#include "OAIApiKeyCollection.h"
#include "OAITransactionNode.h"
#include "OAITransactionNodeCollection.h"
#include "OAITransactionNodeUpdate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITransactionNodeApi : public QObject {
    Q_OBJECT

public:
    OAITransactionNodeApi(const int timeOut = 0);
    ~OAITransactionNodeApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  blockchain_member_name QString [required]
    * @param[in]  transaction_node_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  transaction_node OAITransactionNode [optional]
    */
    virtual void transactionNodesCreate(const QString &blockchain_member_name, const QString &transaction_node_name, const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const ::OpenAPI::OptionalParam<OAITransactionNode> &transaction_node = ::OpenAPI::OptionalParam<OAITransactionNode>());

    /**
    * @param[in]  blockchain_member_name QString [required]
    * @param[in]  transaction_node_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    */
    virtual void transactionNodesDelete(const QString &blockchain_member_name, const QString &transaction_node_name, const QString &api_version, const QString &subscription_id, const QString &resource_group_name);

    /**
    * @param[in]  blockchain_member_name QString [required]
    * @param[in]  transaction_node_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    */
    virtual void transactionNodesGet(const QString &blockchain_member_name, const QString &transaction_node_name, const QString &api_version, const QString &subscription_id, const QString &resource_group_name);

    /**
    * @param[in]  blockchain_member_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    */
    virtual void transactionNodesList(const QString &blockchain_member_name, const QString &api_version, const QString &subscription_id, const QString &resource_group_name);

    /**
    * @param[in]  blockchain_member_name QString [required]
    * @param[in]  transaction_node_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    */
    virtual void transactionNodesListApiKeys(const QString &blockchain_member_name, const QString &transaction_node_name, const QString &api_version, const QString &subscription_id, const QString &resource_group_name);

    /**
    * @param[in]  blockchain_member_name QString [required]
    * @param[in]  transaction_node_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_key OAIApiKey [optional]
    */
    virtual void transactionNodesListRegenerateApiKeys(const QString &blockchain_member_name, const QString &transaction_node_name, const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const ::OpenAPI::OptionalParam<OAIApiKey> &api_key = ::OpenAPI::OptionalParam<OAIApiKey>());

    /**
    * @param[in]  blockchain_member_name QString [required]
    * @param[in]  transaction_node_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  transaction_node OAITransactionNodeUpdate [optional]
    */
    virtual void transactionNodesUpdate(const QString &blockchain_member_name, const QString &transaction_node_name, const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const ::OpenAPI::OptionalParam<OAITransactionNodeUpdate> &transaction_node = ::OpenAPI::OptionalParam<OAITransactionNodeUpdate>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void transactionNodesCreateCallback(OAIHttpRequestWorker *worker);
    void transactionNodesDeleteCallback(OAIHttpRequestWorker *worker);
    void transactionNodesGetCallback(OAIHttpRequestWorker *worker);
    void transactionNodesListCallback(OAIHttpRequestWorker *worker);
    void transactionNodesListApiKeysCallback(OAIHttpRequestWorker *worker);
    void transactionNodesListRegenerateApiKeysCallback(OAIHttpRequestWorker *worker);
    void transactionNodesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void transactionNodesCreateSignal(OAITransactionNode summary);
    void transactionNodesDeleteSignal();
    void transactionNodesGetSignal(OAITransactionNode summary);
    void transactionNodesListSignal(OAITransactionNodeCollection summary);
    void transactionNodesListApiKeysSignal(OAIApiKeyCollection summary);
    void transactionNodesListRegenerateApiKeysSignal(OAIApiKeyCollection summary);
    void transactionNodesUpdateSignal(OAITransactionNode summary);


    void transactionNodesCreateSignalFull(OAIHttpRequestWorker *worker, OAITransactionNode summary);
    void transactionNodesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void transactionNodesGetSignalFull(OAIHttpRequestWorker *worker, OAITransactionNode summary);
    void transactionNodesListSignalFull(OAIHttpRequestWorker *worker, OAITransactionNodeCollection summary);
    void transactionNodesListApiKeysSignalFull(OAIHttpRequestWorker *worker, OAIApiKeyCollection summary);
    void transactionNodesListRegenerateApiKeysSignalFull(OAIHttpRequestWorker *worker, OAIApiKeyCollection summary);
    void transactionNodesUpdateSignalFull(OAIHttpRequestWorker *worker, OAITransactionNode summary);

    Q_DECL_DEPRECATED_X("Use transactionNodesCreateSignalError() instead")
    void transactionNodesCreateSignalE(OAITransactionNode summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionNodesCreateSignalError(OAITransactionNode summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionNodesDeleteSignalError() instead")
    void transactionNodesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void transactionNodesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionNodesGetSignalError() instead")
    void transactionNodesGetSignalE(OAITransactionNode summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionNodesGetSignalError(OAITransactionNode summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionNodesListSignalError() instead")
    void transactionNodesListSignalE(OAITransactionNodeCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionNodesListSignalError(OAITransactionNodeCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionNodesListApiKeysSignalError() instead")
    void transactionNodesListApiKeysSignalE(OAIApiKeyCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionNodesListApiKeysSignalError(OAIApiKeyCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionNodesListRegenerateApiKeysSignalError() instead")
    void transactionNodesListRegenerateApiKeysSignalE(OAIApiKeyCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionNodesListRegenerateApiKeysSignalError(OAIApiKeyCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionNodesUpdateSignalError() instead")
    void transactionNodesUpdateSignalE(OAITransactionNode summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionNodesUpdateSignalError(OAITransactionNode summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use transactionNodesCreateSignalErrorFull() instead")
    void transactionNodesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionNodesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionNodesDeleteSignalErrorFull() instead")
    void transactionNodesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionNodesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionNodesGetSignalErrorFull() instead")
    void transactionNodesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionNodesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionNodesListSignalErrorFull() instead")
    void transactionNodesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionNodesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionNodesListApiKeysSignalErrorFull() instead")
    void transactionNodesListApiKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionNodesListApiKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionNodesListRegenerateApiKeysSignalErrorFull() instead")
    void transactionNodesListRegenerateApiKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionNodesListRegenerateApiKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionNodesUpdateSignalErrorFull() instead")
    void transactionNodesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionNodesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
