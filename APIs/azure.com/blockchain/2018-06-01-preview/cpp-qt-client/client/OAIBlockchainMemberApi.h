/**
 * BlockchainManagementClient
 * REST API for Azure Blockchain Service
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBlockchainMemberApi_H
#define OAI_OAIBlockchainMemberApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiKey.h"
#include "OAIApiKeyCollection.h"
#include "OAIBlockchainMember.h"
#include "OAIBlockchainMemberCollection.h"
#include "OAIBlockchainMemberUpdate.h"
#include "OAIConsortiumMemberCollection.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBlockchainMemberApi : public QObject {
    Q_OBJECT

public:
    OAIBlockchainMemberApi(const int timeOut = 0);
    ~OAIBlockchainMemberApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  blockchain_member_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  blockchain_member OAIBlockchainMember [optional]
    */
    virtual void blockchainMembersCreate(const QString &blockchain_member_name, const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const ::OpenAPI::OptionalParam<OAIBlockchainMember> &blockchain_member = ::OpenAPI::OptionalParam<OAIBlockchainMember>());

    /**
    * @param[in]  blockchain_member_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    */
    virtual void blockchainMembersDelete(const QString &blockchain_member_name, const QString &api_version, const QString &subscription_id, const QString &resource_group_name);

    /**
    * @param[in]  blockchain_member_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    */
    virtual void blockchainMembersGet(const QString &blockchain_member_name, const QString &api_version, const QString &subscription_id, const QString &resource_group_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    */
    virtual void blockchainMembersList(const QString &api_version, const QString &subscription_id, const QString &resource_group_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void blockchainMembersListAll(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  blockchain_member_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    */
    virtual void blockchainMembersListApiKeys(const QString &blockchain_member_name, const QString &api_version, const QString &subscription_id, const QString &resource_group_name);

    /**
    * @param[in]  blockchain_member_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    */
    virtual void blockchainMembersListConsortiumMembers(const QString &blockchain_member_name, const QString &api_version, const QString &subscription_id, const QString &resource_group_name);

    /**
    * @param[in]  blockchain_member_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_key OAIApiKey [optional]
    */
    virtual void blockchainMembersListRegenerateApiKeys(const QString &blockchain_member_name, const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const ::OpenAPI::OptionalParam<OAIApiKey> &api_key = ::OpenAPI::OptionalParam<OAIApiKey>());

    /**
    * @param[in]  blockchain_member_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  blockchain_member OAIBlockchainMemberUpdate [optional]
    */
    virtual void blockchainMembersUpdate(const QString &blockchain_member_name, const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const ::OpenAPI::OptionalParam<OAIBlockchainMemberUpdate> &blockchain_member = ::OpenAPI::OptionalParam<OAIBlockchainMemberUpdate>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void blockchainMembersCreateCallback(OAIHttpRequestWorker *worker);
    void blockchainMembersDeleteCallback(OAIHttpRequestWorker *worker);
    void blockchainMembersGetCallback(OAIHttpRequestWorker *worker);
    void blockchainMembersListCallback(OAIHttpRequestWorker *worker);
    void blockchainMembersListAllCallback(OAIHttpRequestWorker *worker);
    void blockchainMembersListApiKeysCallback(OAIHttpRequestWorker *worker);
    void blockchainMembersListConsortiumMembersCallback(OAIHttpRequestWorker *worker);
    void blockchainMembersListRegenerateApiKeysCallback(OAIHttpRequestWorker *worker);
    void blockchainMembersUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void blockchainMembersCreateSignal(OAIBlockchainMember summary);
    void blockchainMembersDeleteSignal();
    void blockchainMembersGetSignal(OAIBlockchainMember summary);
    void blockchainMembersListSignal(OAIBlockchainMemberCollection summary);
    void blockchainMembersListAllSignal(OAIBlockchainMemberCollection summary);
    void blockchainMembersListApiKeysSignal(OAIApiKeyCollection summary);
    void blockchainMembersListConsortiumMembersSignal(OAIConsortiumMemberCollection summary);
    void blockchainMembersListRegenerateApiKeysSignal(OAIApiKeyCollection summary);
    void blockchainMembersUpdateSignal(OAIBlockchainMember summary);


    void blockchainMembersCreateSignalFull(OAIHttpRequestWorker *worker, OAIBlockchainMember summary);
    void blockchainMembersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void blockchainMembersGetSignalFull(OAIHttpRequestWorker *worker, OAIBlockchainMember summary);
    void blockchainMembersListSignalFull(OAIHttpRequestWorker *worker, OAIBlockchainMemberCollection summary);
    void blockchainMembersListAllSignalFull(OAIHttpRequestWorker *worker, OAIBlockchainMemberCollection summary);
    void blockchainMembersListApiKeysSignalFull(OAIHttpRequestWorker *worker, OAIApiKeyCollection summary);
    void blockchainMembersListConsortiumMembersSignalFull(OAIHttpRequestWorker *worker, OAIConsortiumMemberCollection summary);
    void blockchainMembersListRegenerateApiKeysSignalFull(OAIHttpRequestWorker *worker, OAIApiKeyCollection summary);
    void blockchainMembersUpdateSignalFull(OAIHttpRequestWorker *worker, OAIBlockchainMember summary);

    Q_DECL_DEPRECATED_X("Use blockchainMembersCreateSignalError() instead")
    void blockchainMembersCreateSignalE(OAIBlockchainMember summary, QNetworkReply::NetworkError error_type, QString error_str);
    void blockchainMembersCreateSignalError(OAIBlockchainMember summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockchainMembersDeleteSignalError() instead")
    void blockchainMembersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void blockchainMembersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockchainMembersGetSignalError() instead")
    void blockchainMembersGetSignalE(OAIBlockchainMember summary, QNetworkReply::NetworkError error_type, QString error_str);
    void blockchainMembersGetSignalError(OAIBlockchainMember summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockchainMembersListSignalError() instead")
    void blockchainMembersListSignalE(OAIBlockchainMemberCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void blockchainMembersListSignalError(OAIBlockchainMemberCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockchainMembersListAllSignalError() instead")
    void blockchainMembersListAllSignalE(OAIBlockchainMemberCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void blockchainMembersListAllSignalError(OAIBlockchainMemberCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockchainMembersListApiKeysSignalError() instead")
    void blockchainMembersListApiKeysSignalE(OAIApiKeyCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void blockchainMembersListApiKeysSignalError(OAIApiKeyCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockchainMembersListConsortiumMembersSignalError() instead")
    void blockchainMembersListConsortiumMembersSignalE(OAIConsortiumMemberCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void blockchainMembersListConsortiumMembersSignalError(OAIConsortiumMemberCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockchainMembersListRegenerateApiKeysSignalError() instead")
    void blockchainMembersListRegenerateApiKeysSignalE(OAIApiKeyCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void blockchainMembersListRegenerateApiKeysSignalError(OAIApiKeyCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockchainMembersUpdateSignalError() instead")
    void blockchainMembersUpdateSignalE(OAIBlockchainMember summary, QNetworkReply::NetworkError error_type, QString error_str);
    void blockchainMembersUpdateSignalError(OAIBlockchainMember summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use blockchainMembersCreateSignalErrorFull() instead")
    void blockchainMembersCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blockchainMembersCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockchainMembersDeleteSignalErrorFull() instead")
    void blockchainMembersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blockchainMembersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockchainMembersGetSignalErrorFull() instead")
    void blockchainMembersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blockchainMembersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockchainMembersListSignalErrorFull() instead")
    void blockchainMembersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blockchainMembersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockchainMembersListAllSignalErrorFull() instead")
    void blockchainMembersListAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blockchainMembersListAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockchainMembersListApiKeysSignalErrorFull() instead")
    void blockchainMembersListApiKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blockchainMembersListApiKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockchainMembersListConsortiumMembersSignalErrorFull() instead")
    void blockchainMembersListConsortiumMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blockchainMembersListConsortiumMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockchainMembersListRegenerateApiKeysSignalErrorFull() instead")
    void blockchainMembersListRegenerateApiKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blockchainMembersListRegenerateApiKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockchainMembersUpdateSignalErrorFull() instead")
    void blockchainMembersUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blockchainMembersUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
