/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDscCompilationJobCreateProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDscCompilationJobCreateProperties::OAIDscCompilationJobCreateProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDscCompilationJobCreateProperties::OAIDscCompilationJobCreateProperties() {
    this->initializeModel();
}

OAIDscCompilationJobCreateProperties::~OAIDscCompilationJobCreateProperties() {}

void OAIDscCompilationJobCreateProperties::initializeModel() {

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_increment_node_configuration_build_isSet = false;
    m_increment_node_configuration_build_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;
}

void OAIDscCompilationJobCreateProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDscCompilationJobCreateProperties::fromJsonObject(QJsonObject json) {

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("configuration")]);
    m_configuration_isSet = !json[QString("configuration")].isNull() && m_configuration_isValid;

    m_increment_node_configuration_build_isValid = ::OpenAPI::fromJsonValue(m_increment_node_configuration_build, json[QString("incrementNodeConfigurationBuild")]);
    m_increment_node_configuration_build_isSet = !json[QString("incrementNodeConfigurationBuild")].isNull() && m_increment_node_configuration_build_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;
}

QString OAIDscCompilationJobCreateProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDscCompilationJobCreateProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration.isSet()) {
        obj.insert(QString("configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_increment_node_configuration_build_isSet) {
        obj.insert(QString("incrementNodeConfigurationBuild"), ::OpenAPI::toJsonValue(m_increment_node_configuration_build));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    return obj;
}

OAIDscConfigurationAssociationProperty OAIDscCompilationJobCreateProperties::getConfiguration() const {
    return m_configuration;
}
void OAIDscCompilationJobCreateProperties::setConfiguration(const OAIDscConfigurationAssociationProperty &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAIDscCompilationJobCreateProperties::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAIDscCompilationJobCreateProperties::is_configuration_Valid() const{
    return m_configuration_isValid;
}

bool OAIDscCompilationJobCreateProperties::isIncrementNodeConfigurationBuild() const {
    return m_increment_node_configuration_build;
}
void OAIDscCompilationJobCreateProperties::setIncrementNodeConfigurationBuild(const bool &increment_node_configuration_build) {
    m_increment_node_configuration_build = increment_node_configuration_build;
    m_increment_node_configuration_build_isSet = true;
}

bool OAIDscCompilationJobCreateProperties::is_increment_node_configuration_build_Set() const{
    return m_increment_node_configuration_build_isSet;
}

bool OAIDscCompilationJobCreateProperties::is_increment_node_configuration_build_Valid() const{
    return m_increment_node_configuration_build_isValid;
}

QMap<QString, QString> OAIDscCompilationJobCreateProperties::getParameters() const {
    return m_parameters;
}
void OAIDscCompilationJobCreateProperties::setParameters(const QMap<QString, QString> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIDscCompilationJobCreateProperties::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIDscCompilationJobCreateProperties::is_parameters_Valid() const{
    return m_parameters_isValid;
}

bool OAIDscCompilationJobCreateProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_increment_node_configuration_build_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDscCompilationJobCreateProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_configuration_isValid && true;
}

} // namespace OpenAPI
