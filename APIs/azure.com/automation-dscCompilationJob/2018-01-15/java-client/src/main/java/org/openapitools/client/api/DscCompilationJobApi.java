/*
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DscCompilationJob;
import org.openapitools.client.model.DscCompilationJobCreateParameters;
import org.openapitools.client.model.DscCompilationJobListByAutomationAccountDefaultResponse;
import org.openapitools.client.model.DscCompilationJobListResult;
import org.openapitools.client.model.JobStream;
import org.openapitools.client.model.JobStreamListResult;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DscCompilationJobApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DscCompilationJobApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DscCompilationJobApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for dscCompilationJobCreate
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param compilationJobName The DSC configuration Id. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The parameters supplied to the create compilation job operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/dscconfigurationcompilejoboperations"> Documentation</a>
     */
    public okhttp3.Call dscCompilationJobCreateCall(String resourceGroupName, String automationAccountName, String compilationJobName, String subscriptionId, String apiVersion, DscCompilationJobCreateParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/compilationjobs/{compilationJobName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "automationAccountName" + "}", localVarApiClient.escapeString(automationAccountName.toString()))
            .replace("{" + "compilationJobName" + "}", localVarApiClient.escapeString(compilationJobName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dscCompilationJobCreateValidateBeforeCall(String resourceGroupName, String automationAccountName, String compilationJobName, String subscriptionId, String apiVersion, DscCompilationJobCreateParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dscCompilationJobCreate(Async)");
        }

        // verify the required parameter 'automationAccountName' is set
        if (automationAccountName == null) {
            throw new ApiException("Missing the required parameter 'automationAccountName' when calling dscCompilationJobCreate(Async)");
        }

        // verify the required parameter 'compilationJobName' is set
        if (compilationJobName == null) {
            throw new ApiException("Missing the required parameter 'compilationJobName' when calling dscCompilationJobCreate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dscCompilationJobCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dscCompilationJobCreate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling dscCompilationJobCreate(Async)");
        }

        return dscCompilationJobCreateCall(resourceGroupName, automationAccountName, compilationJobName, subscriptionId, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Creates the Dsc compilation job of the configuration.
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param compilationJobName The DSC configuration Id. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The parameters supplied to the create compilation job operation. (required)
     * @return DscCompilationJob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/dscconfigurationcompilejoboperations"> Documentation</a>
     */
    public DscCompilationJob dscCompilationJobCreate(String resourceGroupName, String automationAccountName, String compilationJobName, String subscriptionId, String apiVersion, DscCompilationJobCreateParameters parameters) throws ApiException {
        ApiResponse<DscCompilationJob> localVarResp = dscCompilationJobCreateWithHttpInfo(resourceGroupName, automationAccountName, compilationJobName, subscriptionId, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates the Dsc compilation job of the configuration.
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param compilationJobName The DSC configuration Id. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The parameters supplied to the create compilation job operation. (required)
     * @return ApiResponse&lt;DscCompilationJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/dscconfigurationcompilejoboperations"> Documentation</a>
     */
    public ApiResponse<DscCompilationJob> dscCompilationJobCreateWithHttpInfo(String resourceGroupName, String automationAccountName, String compilationJobName, String subscriptionId, String apiVersion, DscCompilationJobCreateParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = dscCompilationJobCreateValidateBeforeCall(resourceGroupName, automationAccountName, compilationJobName, subscriptionId, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<DscCompilationJob>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates the Dsc compilation job of the configuration.
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param compilationJobName The DSC configuration Id. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The parameters supplied to the create compilation job operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/dscconfigurationcompilejoboperations"> Documentation</a>
     */
    public okhttp3.Call dscCompilationJobCreateAsync(String resourceGroupName, String automationAccountName, String compilationJobName, String subscriptionId, String apiVersion, DscCompilationJobCreateParameters parameters, final ApiCallback<DscCompilationJob> _callback) throws ApiException {

        okhttp3.Call localVarCall = dscCompilationJobCreateValidateBeforeCall(resourceGroupName, automationAccountName, compilationJobName, subscriptionId, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<DscCompilationJob>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dscCompilationJobGet
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param compilationJobName The DSC configuration Id. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/dsccompilationjoboperations"> Documentation</a>
     */
    public okhttp3.Call dscCompilationJobGetCall(String resourceGroupName, String automationAccountName, String compilationJobName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/compilationjobs/{compilationJobName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "automationAccountName" + "}", localVarApiClient.escapeString(automationAccountName.toString()))
            .replace("{" + "compilationJobName" + "}", localVarApiClient.escapeString(compilationJobName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dscCompilationJobGetValidateBeforeCall(String resourceGroupName, String automationAccountName, String compilationJobName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dscCompilationJobGet(Async)");
        }

        // verify the required parameter 'automationAccountName' is set
        if (automationAccountName == null) {
            throw new ApiException("Missing the required parameter 'automationAccountName' when calling dscCompilationJobGet(Async)");
        }

        // verify the required parameter 'compilationJobName' is set
        if (compilationJobName == null) {
            throw new ApiException("Missing the required parameter 'compilationJobName' when calling dscCompilationJobGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dscCompilationJobGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dscCompilationJobGet(Async)");
        }

        return dscCompilationJobGetCall(resourceGroupName, automationAccountName, compilationJobName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Retrieve the Dsc configuration compilation job identified by job id.
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param compilationJobName The DSC configuration Id. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @return DscCompilationJob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/dsccompilationjoboperations"> Documentation</a>
     */
    public DscCompilationJob dscCompilationJobGet(String resourceGroupName, String automationAccountName, String compilationJobName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<DscCompilationJob> localVarResp = dscCompilationJobGetWithHttpInfo(resourceGroupName, automationAccountName, compilationJobName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve the Dsc configuration compilation job identified by job id.
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param compilationJobName The DSC configuration Id. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;DscCompilationJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/dsccompilationjoboperations"> Documentation</a>
     */
    public ApiResponse<DscCompilationJob> dscCompilationJobGetWithHttpInfo(String resourceGroupName, String automationAccountName, String compilationJobName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = dscCompilationJobGetValidateBeforeCall(resourceGroupName, automationAccountName, compilationJobName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DscCompilationJob>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the Dsc configuration compilation job identified by job id.
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param compilationJobName The DSC configuration Id. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/dsccompilationjoboperations"> Documentation</a>
     */
    public okhttp3.Call dscCompilationJobGetAsync(String resourceGroupName, String automationAccountName, String compilationJobName, String subscriptionId, String apiVersion, final ApiCallback<DscCompilationJob> _callback) throws ApiException {

        okhttp3.Call localVarCall = dscCompilationJobGetValidateBeforeCall(resourceGroupName, automationAccountName, compilationJobName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DscCompilationJob>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dscCompilationJobGetStream
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param jobId The job id. (required)
     * @param jobStreamId The job stream id. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/jobstreamoperations"> Documentation</a>
     */
    public okhttp3.Call dscCompilationJobGetStreamCall(String resourceGroupName, String automationAccountName, UUID jobId, String jobStreamId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/compilationjobs/{jobId}/streams/{jobStreamId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "automationAccountName" + "}", localVarApiClient.escapeString(automationAccountName.toString()))
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()))
            .replace("{" + "jobStreamId" + "}", localVarApiClient.escapeString(jobStreamId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dscCompilationJobGetStreamValidateBeforeCall(String resourceGroupName, String automationAccountName, UUID jobId, String jobStreamId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dscCompilationJobGetStream(Async)");
        }

        // verify the required parameter 'automationAccountName' is set
        if (automationAccountName == null) {
            throw new ApiException("Missing the required parameter 'automationAccountName' when calling dscCompilationJobGetStream(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling dscCompilationJobGetStream(Async)");
        }

        // verify the required parameter 'jobStreamId' is set
        if (jobStreamId == null) {
            throw new ApiException("Missing the required parameter 'jobStreamId' when calling dscCompilationJobGetStream(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dscCompilationJobGetStream(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dscCompilationJobGetStream(Async)");
        }

        return dscCompilationJobGetStreamCall(resourceGroupName, automationAccountName, jobId, jobStreamId, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Retrieve the job stream identified by job stream id.
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param jobId The job id. (required)
     * @param jobStreamId The job stream id. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @return JobStream
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/jobstreamoperations"> Documentation</a>
     */
    public JobStream dscCompilationJobGetStream(String resourceGroupName, String automationAccountName, UUID jobId, String jobStreamId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<JobStream> localVarResp = dscCompilationJobGetStreamWithHttpInfo(resourceGroupName, automationAccountName, jobId, jobStreamId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve the job stream identified by job stream id.
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param jobId The job id. (required)
     * @param jobStreamId The job stream id. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;JobStream&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/jobstreamoperations"> Documentation</a>
     */
    public ApiResponse<JobStream> dscCompilationJobGetStreamWithHttpInfo(String resourceGroupName, String automationAccountName, UUID jobId, String jobStreamId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = dscCompilationJobGetStreamValidateBeforeCall(resourceGroupName, automationAccountName, jobId, jobStreamId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<JobStream>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the job stream identified by job stream id.
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param jobId The job id. (required)
     * @param jobStreamId The job stream id. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/jobstreamoperations"> Documentation</a>
     */
    public okhttp3.Call dscCompilationJobGetStreamAsync(String resourceGroupName, String automationAccountName, UUID jobId, String jobStreamId, String subscriptionId, String apiVersion, final ApiCallback<JobStream> _callback) throws ApiException {

        okhttp3.Call localVarCall = dscCompilationJobGetStreamValidateBeforeCall(resourceGroupName, automationAccountName, jobId, jobStreamId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<JobStream>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dscCompilationJobListByAutomationAccount
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/compilationjoboperations"> Documentation</a>
     */
    public okhttp3.Call dscCompilationJobListByAutomationAccountCall(String resourceGroupName, String automationAccountName, String subscriptionId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/compilationjobs"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "automationAccountName" + "}", localVarApiClient.escapeString(automationAccountName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dscCompilationJobListByAutomationAccountValidateBeforeCall(String resourceGroupName, String automationAccountName, String subscriptionId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dscCompilationJobListByAutomationAccount(Async)");
        }

        // verify the required parameter 'automationAccountName' is set
        if (automationAccountName == null) {
            throw new ApiException("Missing the required parameter 'automationAccountName' when calling dscCompilationJobListByAutomationAccount(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dscCompilationJobListByAutomationAccount(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dscCompilationJobListByAutomationAccount(Async)");
        }

        return dscCompilationJobListByAutomationAccountCall(resourceGroupName, automationAccountName, subscriptionId, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Retrieve a list of dsc compilation jobs.
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @return DscCompilationJobListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/compilationjoboperations"> Documentation</a>
     */
    public DscCompilationJobListResult dscCompilationJobListByAutomationAccount(String resourceGroupName, String automationAccountName, String subscriptionId, String apiVersion, String $filter) throws ApiException {
        ApiResponse<DscCompilationJobListResult> localVarResp = dscCompilationJobListByAutomationAccountWithHttpInfo(resourceGroupName, automationAccountName, subscriptionId, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of dsc compilation jobs.
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @return ApiResponse&lt;DscCompilationJobListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/compilationjoboperations"> Documentation</a>
     */
    public ApiResponse<DscCompilationJobListResult> dscCompilationJobListByAutomationAccountWithHttpInfo(String resourceGroupName, String automationAccountName, String subscriptionId, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = dscCompilationJobListByAutomationAccountValidateBeforeCall(resourceGroupName, automationAccountName, subscriptionId, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<DscCompilationJobListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of dsc compilation jobs.
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/compilationjoboperations"> Documentation</a>
     */
    public okhttp3.Call dscCompilationJobListByAutomationAccountAsync(String resourceGroupName, String automationAccountName, String subscriptionId, String apiVersion, String $filter, final ApiCallback<DscCompilationJobListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = dscCompilationJobListByAutomationAccountValidateBeforeCall(resourceGroupName, automationAccountName, subscriptionId, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<DscCompilationJobListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dscCompilationJobStreamListByJob
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param jobId The job id. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/jobstreamoperations"> Documentation</a>
     */
    public okhttp3.Call dscCompilationJobStreamListByJobCall(String resourceGroupName, String automationAccountName, UUID jobId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/compilationjobs/{jobId}/streams"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "automationAccountName" + "}", localVarApiClient.escapeString(automationAccountName.toString()))
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dscCompilationJobStreamListByJobValidateBeforeCall(String resourceGroupName, String automationAccountName, UUID jobId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dscCompilationJobStreamListByJob(Async)");
        }

        // verify the required parameter 'automationAccountName' is set
        if (automationAccountName == null) {
            throw new ApiException("Missing the required parameter 'automationAccountName' when calling dscCompilationJobStreamListByJob(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling dscCompilationJobStreamListByJob(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dscCompilationJobStreamListByJob(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dscCompilationJobStreamListByJob(Async)");
        }

        return dscCompilationJobStreamListByJobCall(resourceGroupName, automationAccountName, jobId, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Retrieve all the job streams for the compilation Job.
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param jobId The job id. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @return JobStreamListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/jobstreamoperations"> Documentation</a>
     */
    public JobStreamListResult dscCompilationJobStreamListByJob(String resourceGroupName, String automationAccountName, UUID jobId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<JobStreamListResult> localVarResp = dscCompilationJobStreamListByJobWithHttpInfo(resourceGroupName, automationAccountName, jobId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve all the job streams for the compilation Job.
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param jobId The job id. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;JobStreamListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/jobstreamoperations"> Documentation</a>
     */
    public ApiResponse<JobStreamListResult> dscCompilationJobStreamListByJobWithHttpInfo(String resourceGroupName, String automationAccountName, UUID jobId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = dscCompilationJobStreamListByJobValidateBeforeCall(resourceGroupName, automationAccountName, jobId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<JobStreamListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve all the job streams for the compilation Job.
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param jobId The job id. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/jobstreamoperations"> Documentation</a>
     */
    public okhttp3.Call dscCompilationJobStreamListByJobAsync(String resourceGroupName, String automationAccountName, UUID jobId, String subscriptionId, String apiVersion, final ApiCallback<JobStreamListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = dscCompilationJobStreamListByJobValidateBeforeCall(resourceGroupName, automationAccountName, jobId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<JobStreamListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
