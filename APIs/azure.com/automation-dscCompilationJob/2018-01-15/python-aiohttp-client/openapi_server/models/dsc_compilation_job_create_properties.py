# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dsc_configuration_association_property import DscConfigurationAssociationProperty
from openapi_server import util


class DscCompilationJobCreateProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration: DscConfigurationAssociationProperty=None, increment_node_configuration_build: bool=None, parameters: Dict[str, str]=None):
        """DscCompilationJobCreateProperties - a model defined in OpenAPI

        :param configuration: The configuration of this DscCompilationJobCreateProperties.
        :param increment_node_configuration_build: The increment_node_configuration_build of this DscCompilationJobCreateProperties.
        :param parameters: The parameters of this DscCompilationJobCreateProperties.
        """
        self.openapi_types = {
            'configuration': DscConfigurationAssociationProperty,
            'increment_node_configuration_build': bool,
            'parameters': Dict[str, str]
        }

        self.attribute_map = {
            'configuration': 'configuration',
            'increment_node_configuration_build': 'incrementNodeConfigurationBuild',
            'parameters': 'parameters'
        }

        self._configuration = configuration
        self._increment_node_configuration_build = increment_node_configuration_build
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DscCompilationJobCreateProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DscCompilationJobCreateProperties of this DscCompilationJobCreateProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration(self):
        """Gets the configuration of this DscCompilationJobCreateProperties.


        :return: The configuration of this DscCompilationJobCreateProperties.
        :rtype: DscConfigurationAssociationProperty
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this DscCompilationJobCreateProperties.


        :param configuration: The configuration of this DscCompilationJobCreateProperties.
        :type configuration: DscConfigurationAssociationProperty
        """
        if configuration is None:
            raise ValueError("Invalid value for `configuration`, must not be `None`")

        self._configuration = configuration

    @property
    def increment_node_configuration_build(self):
        """Gets the increment_node_configuration_build of this DscCompilationJobCreateProperties.

        If a new build version of NodeConfiguration is required.

        :return: The increment_node_configuration_build of this DscCompilationJobCreateProperties.
        :rtype: bool
        """
        return self._increment_node_configuration_build

    @increment_node_configuration_build.setter
    def increment_node_configuration_build(self, increment_node_configuration_build):
        """Sets the increment_node_configuration_build of this DscCompilationJobCreateProperties.

        If a new build version of NodeConfiguration is required.

        :param increment_node_configuration_build: The increment_node_configuration_build of this DscCompilationJobCreateProperties.
        :type increment_node_configuration_build: bool
        """

        self._increment_node_configuration_build = increment_node_configuration_build

    @property
    def parameters(self):
        """Gets the parameters of this DscCompilationJobCreateProperties.

        Gets or sets the parameters of the job.

        :return: The parameters of this DscCompilationJobCreateProperties.
        :rtype: Dict[str, str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this DscCompilationJobCreateProperties.

        Gets or sets the parameters of the job.

        :param parameters: The parameters of this DscCompilationJobCreateProperties.
        :type parameters: Dict[str, str]
        """

        self._parameters = parameters
