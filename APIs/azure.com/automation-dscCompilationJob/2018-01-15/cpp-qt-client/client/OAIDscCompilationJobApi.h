/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDscCompilationJobApi_H
#define OAI_OAIDscCompilationJobApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDscCompilationJob.h"
#include "OAIDscCompilationJobCreateParameters.h"
#include "OAIDscCompilationJobListResult.h"
#include "OAIDscCompilationJob_ListByAutomationAccount_default_response.h"
#include "OAIJobStream.h"
#include "OAIJobStreamListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDscCompilationJobApi : public QObject {
    Q_OBJECT

public:
    OAIDscCompilationJobApi(const int timeOut = 0);
    ~OAIDscCompilationJobApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  compilation_job_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIDscCompilationJobCreateParameters [required]
    */
    virtual void dscCompilationJobCreate(const QString &resource_group_name, const QString &automation_account_name, const QString &compilation_job_name, const QString &subscription_id, const QString &api_version, const OAIDscCompilationJobCreateParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  compilation_job_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void dscCompilationJobGet(const QString &resource_group_name, const QString &automation_account_name, const QString &compilation_job_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  job_id QString [required]
    * @param[in]  job_stream_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void dscCompilationJobGetStream(const QString &resource_group_name, const QString &automation_account_name, const QString &job_id, const QString &job_stream_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void dscCompilationJobListByAutomationAccount(const QString &resource_group_name, const QString &automation_account_name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  job_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void dscCompilationJobStreamListByJob(const QString &resource_group_name, const QString &automation_account_name, const QString &job_id, const QString &subscription_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dscCompilationJobCreateCallback(OAIHttpRequestWorker *worker);
    void dscCompilationJobGetCallback(OAIHttpRequestWorker *worker);
    void dscCompilationJobGetStreamCallback(OAIHttpRequestWorker *worker);
    void dscCompilationJobListByAutomationAccountCallback(OAIHttpRequestWorker *worker);
    void dscCompilationJobStreamListByJobCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void dscCompilationJobCreateSignal(OAIDscCompilationJob summary);
    void dscCompilationJobGetSignal(OAIDscCompilationJob summary);
    void dscCompilationJobGetStreamSignal(OAIJobStream summary);
    void dscCompilationJobListByAutomationAccountSignal(OAIDscCompilationJobListResult summary);
    void dscCompilationJobStreamListByJobSignal(OAIJobStreamListResult summary);


    void dscCompilationJobCreateSignalFull(OAIHttpRequestWorker *worker, OAIDscCompilationJob summary);
    void dscCompilationJobGetSignalFull(OAIHttpRequestWorker *worker, OAIDscCompilationJob summary);
    void dscCompilationJobGetStreamSignalFull(OAIHttpRequestWorker *worker, OAIJobStream summary);
    void dscCompilationJobListByAutomationAccountSignalFull(OAIHttpRequestWorker *worker, OAIDscCompilationJobListResult summary);
    void dscCompilationJobStreamListByJobSignalFull(OAIHttpRequestWorker *worker, OAIJobStreamListResult summary);

    Q_DECL_DEPRECATED_X("Use dscCompilationJobCreateSignalError() instead")
    void dscCompilationJobCreateSignalE(OAIDscCompilationJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dscCompilationJobCreateSignalError(OAIDscCompilationJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dscCompilationJobGetSignalError() instead")
    void dscCompilationJobGetSignalE(OAIDscCompilationJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dscCompilationJobGetSignalError(OAIDscCompilationJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dscCompilationJobGetStreamSignalError() instead")
    void dscCompilationJobGetStreamSignalE(OAIJobStream summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dscCompilationJobGetStreamSignalError(OAIJobStream summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dscCompilationJobListByAutomationAccountSignalError() instead")
    void dscCompilationJobListByAutomationAccountSignalE(OAIDscCompilationJobListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dscCompilationJobListByAutomationAccountSignalError(OAIDscCompilationJobListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dscCompilationJobStreamListByJobSignalError() instead")
    void dscCompilationJobStreamListByJobSignalE(OAIJobStreamListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dscCompilationJobStreamListByJobSignalError(OAIJobStreamListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use dscCompilationJobCreateSignalErrorFull() instead")
    void dscCompilationJobCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dscCompilationJobCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dscCompilationJobGetSignalErrorFull() instead")
    void dscCompilationJobGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dscCompilationJobGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dscCompilationJobGetStreamSignalErrorFull() instead")
    void dscCompilationJobGetStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dscCompilationJobGetStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dscCompilationJobListByAutomationAccountSignalErrorFull() instead")
    void dscCompilationJobListByAutomationAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dscCompilationJobListByAutomationAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dscCompilationJobStreamListByJobSignalErrorFull() instead")
    void dscCompilationJobStreamListByJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dscCompilationJobStreamListByJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
