/**
 * Mixed Reality
 * Mixed Reality Resource Provider Spatial Anchors Resource API
 *
 * The version of the OpenAPI document: 2019-12-02-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIResourceApi_H
#define OAI_OAIResourceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAISpatialAnchorsAccount.h"
#include "OAISpatialAnchorsAccountPage.h"
#include "OAISpatialAnchorsAccounts_ListBySubscription_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIResourceApi : public QObject {
    Q_OBJECT

public:
    OAIResourceApi(const int timeOut = 0);
    ~OAIResourceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  spatial_anchors_account OAISpatialAnchorsAccount [required]
    */
    virtual void spatialAnchorsAccountsCreate(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version, const OAISpatialAnchorsAccount &spatial_anchors_account);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void spatialAnchorsAccountsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void spatialAnchorsAccountsGet(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void spatialAnchorsAccountsListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void spatialAnchorsAccountsListBySubscription(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  spatial_anchors_account OAISpatialAnchorsAccount [required]
    */
    virtual void spatialAnchorsAccountsUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version, const OAISpatialAnchorsAccount &spatial_anchors_account);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void spatialAnchorsAccountsCreateCallback(OAIHttpRequestWorker *worker);
    void spatialAnchorsAccountsDeleteCallback(OAIHttpRequestWorker *worker);
    void spatialAnchorsAccountsGetCallback(OAIHttpRequestWorker *worker);
    void spatialAnchorsAccountsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void spatialAnchorsAccountsListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void spatialAnchorsAccountsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void spatialAnchorsAccountsCreateSignal(OAISpatialAnchorsAccount summary);
    void spatialAnchorsAccountsDeleteSignal();
    void spatialAnchorsAccountsGetSignal(OAISpatialAnchorsAccount summary);
    void spatialAnchorsAccountsListByResourceGroupSignal(OAISpatialAnchorsAccountPage summary);
    void spatialAnchorsAccountsListBySubscriptionSignal(OAISpatialAnchorsAccountPage summary);
    void spatialAnchorsAccountsUpdateSignal(OAISpatialAnchorsAccount summary);


    void spatialAnchorsAccountsCreateSignalFull(OAIHttpRequestWorker *worker, OAISpatialAnchorsAccount summary);
    void spatialAnchorsAccountsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void spatialAnchorsAccountsGetSignalFull(OAIHttpRequestWorker *worker, OAISpatialAnchorsAccount summary);
    void spatialAnchorsAccountsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAISpatialAnchorsAccountPage summary);
    void spatialAnchorsAccountsListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAISpatialAnchorsAccountPage summary);
    void spatialAnchorsAccountsUpdateSignalFull(OAIHttpRequestWorker *worker, OAISpatialAnchorsAccount summary);

    Q_DECL_DEPRECATED_X("Use spatialAnchorsAccountsCreateSignalError() instead")
    void spatialAnchorsAccountsCreateSignalE(OAISpatialAnchorsAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void spatialAnchorsAccountsCreateSignalError(OAISpatialAnchorsAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spatialAnchorsAccountsDeleteSignalError() instead")
    void spatialAnchorsAccountsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void spatialAnchorsAccountsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spatialAnchorsAccountsGetSignalError() instead")
    void spatialAnchorsAccountsGetSignalE(OAISpatialAnchorsAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void spatialAnchorsAccountsGetSignalError(OAISpatialAnchorsAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spatialAnchorsAccountsListByResourceGroupSignalError() instead")
    void spatialAnchorsAccountsListByResourceGroupSignalE(OAISpatialAnchorsAccountPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void spatialAnchorsAccountsListByResourceGroupSignalError(OAISpatialAnchorsAccountPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spatialAnchorsAccountsListBySubscriptionSignalError() instead")
    void spatialAnchorsAccountsListBySubscriptionSignalE(OAISpatialAnchorsAccountPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void spatialAnchorsAccountsListBySubscriptionSignalError(OAISpatialAnchorsAccountPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spatialAnchorsAccountsUpdateSignalError() instead")
    void spatialAnchorsAccountsUpdateSignalE(OAISpatialAnchorsAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void spatialAnchorsAccountsUpdateSignalError(OAISpatialAnchorsAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use spatialAnchorsAccountsCreateSignalErrorFull() instead")
    void spatialAnchorsAccountsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void spatialAnchorsAccountsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spatialAnchorsAccountsDeleteSignalErrorFull() instead")
    void spatialAnchorsAccountsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void spatialAnchorsAccountsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spatialAnchorsAccountsGetSignalErrorFull() instead")
    void spatialAnchorsAccountsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void spatialAnchorsAccountsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spatialAnchorsAccountsListByResourceGroupSignalErrorFull() instead")
    void spatialAnchorsAccountsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void spatialAnchorsAccountsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spatialAnchorsAccountsListBySubscriptionSignalErrorFull() instead")
    void spatialAnchorsAccountsListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void spatialAnchorsAccountsListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spatialAnchorsAccountsUpdateSignalErrorFull() instead")
    void spatialAnchorsAccountsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void spatialAnchorsAccountsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
