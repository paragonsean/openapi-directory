/*
 * Azure ML Commitment Plans Management Client
 * These APIs allow end users to operate on Azure Machine Learning Commitment Plans resources and their child Commitment Association resources. They support CRUD operations for commitment plans, get and list operations for commitment associations, moving commitment associations between commitment plans, and retrieving commitment plan usage history.
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the quantity a commitment plan provides of a metered resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:15:07.564221-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlanQuantity {
  public static final String SERIALIZED_NAME_ALLOWANCE = "allowance";
  @SerializedName(SERIALIZED_NAME_ALLOWANCE)
  private Double allowance;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  public static final String SERIALIZED_NAME_INCLUDED_QUANTITY_METER = "includedQuantityMeter";
  @SerializedName(SERIALIZED_NAME_INCLUDED_QUANTITY_METER)
  private String includedQuantityMeter;

  public static final String SERIALIZED_NAME_OVERAGE_METER = "overageMeter";
  @SerializedName(SERIALIZED_NAME_OVERAGE_METER)
  private String overageMeter;

  public PlanQuantity() {
  }

  public PlanQuantity(
     Double allowance, 
     Double amount, 
     String includedQuantityMeter, 
     String overageMeter
  ) {
    this();
    this.allowance = allowance;
    this.amount = amount;
    this.includedQuantityMeter = includedQuantityMeter;
    this.overageMeter = overageMeter;
  }

  /**
   * The quantity added to the commitment plan at an interval specified by its allowance frequency.
   * @return allowance
   */
  @javax.annotation.Nullable
  public Double getAllowance() {
    return allowance;
  }



  /**
   * The quantity available to the plan the last time usage was calculated.
   * @return amount
   */
  @javax.annotation.Nullable
  public Double getAmount() {
    return amount;
  }



  /**
   * The Azure meter for usage against included quantities.
   * @return includedQuantityMeter
   */
  @javax.annotation.Nullable
  public String getIncludedQuantityMeter() {
    return includedQuantityMeter;
  }



  /**
   * The Azure meter for usage which exceeds included quantities.
   * @return overageMeter
   */
  @javax.annotation.Nullable
  public String getOverageMeter() {
    return overageMeter;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlanQuantity planQuantity = (PlanQuantity) o;
    return Objects.equals(this.allowance, planQuantity.allowance) &&
        Objects.equals(this.amount, planQuantity.amount) &&
        Objects.equals(this.includedQuantityMeter, planQuantity.includedQuantityMeter) &&
        Objects.equals(this.overageMeter, planQuantity.overageMeter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowance, amount, includedQuantityMeter, overageMeter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlanQuantity {\n");
    sb.append("    allowance: ").append(toIndentedString(allowance)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    includedQuantityMeter: ").append(toIndentedString(includedQuantityMeter)).append("\n");
    sb.append("    overageMeter: ").append(toIndentedString(overageMeter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowance");
    openapiFields.add("amount");
    openapiFields.add("includedQuantityMeter");
    openapiFields.add("overageMeter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlanQuantity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlanQuantity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlanQuantity is not found in the empty JSON string", PlanQuantity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlanQuantity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlanQuantity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("includedQuantityMeter") != null && !jsonObj.get("includedQuantityMeter").isJsonNull()) && !jsonObj.get("includedQuantityMeter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedQuantityMeter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("includedQuantityMeter").toString()));
      }
      if ((jsonObj.get("overageMeter") != null && !jsonObj.get("overageMeter").isJsonNull()) && !jsonObj.get("overageMeter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overageMeter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overageMeter").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlanQuantity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlanQuantity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlanQuantity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlanQuantity.class));

       return (TypeAdapter<T>) new TypeAdapter<PlanQuantity>() {
           @Override
           public void write(JsonWriter out, PlanQuantity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlanQuantity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlanQuantity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlanQuantity
   * @throws IOException if the JSON string is invalid with respect to PlanQuantity
   */
  public static PlanQuantity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlanQuantity.class);
  }

  /**
   * Convert an instance of PlanQuantity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

