/*
 * Azure ML Commitment Plans Management Client
 * These APIs allow end users to operate on Azure Machine Learning Commitment Plans resources and their child Commitment Association resources. They support CRUD operations for commitment plans, get and list operations for commitment associations, moving commitment associations between commitment plans, and retrieving commitment plan usage history.
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CommitmentAssociation;
import org.openapitools.client.model.CommitmentAssociationListResult;
import org.openapitools.client.model.MoveCommitmentAssociationRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CommitmentAssociationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CommitmentAssociationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CommitmentAssociationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for commitmentAssociationsGet
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param commitmentPlanName The Azure ML commitment plan name. (required)
     * @param commitmentAssociationName The commitment association name. (required)
     * @param apiVersion The version of the Microsoft.MachineLearning resource provider API to use. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commitmentAssociationsGetCall(String subscriptionId, String resourceGroupName, String commitmentPlanName, String commitmentAssociationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans/{commitmentPlanName}/commitmentAssociations/{commitmentAssociationName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "commitmentPlanName" + "}", localVarApiClient.escapeString(commitmentPlanName.toString()))
            .replace("{" + "commitmentAssociationName" + "}", localVarApiClient.escapeString(commitmentAssociationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call commitmentAssociationsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String commitmentPlanName, String commitmentAssociationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling commitmentAssociationsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling commitmentAssociationsGet(Async)");
        }

        // verify the required parameter 'commitmentPlanName' is set
        if (commitmentPlanName == null) {
            throw new ApiException("Missing the required parameter 'commitmentPlanName' when calling commitmentAssociationsGet(Async)");
        }

        // verify the required parameter 'commitmentAssociationName' is set
        if (commitmentAssociationName == null) {
            throw new ApiException("Missing the required parameter 'commitmentAssociationName' when calling commitmentAssociationsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling commitmentAssociationsGet(Async)");
        }

        return commitmentAssociationsGetCall(subscriptionId, resourceGroupName, commitmentPlanName, commitmentAssociationName, apiVersion, _callback);

    }

    /**
     * 
     * Get a commitment association.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param commitmentPlanName The Azure ML commitment plan name. (required)
     * @param commitmentAssociationName The commitment association name. (required)
     * @param apiVersion The version of the Microsoft.MachineLearning resource provider API to use. (required)
     * @return CommitmentAssociation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CommitmentAssociation commitmentAssociationsGet(String subscriptionId, String resourceGroupName, String commitmentPlanName, String commitmentAssociationName, String apiVersion) throws ApiException {
        ApiResponse<CommitmentAssociation> localVarResp = commitmentAssociationsGetWithHttpInfo(subscriptionId, resourceGroupName, commitmentPlanName, commitmentAssociationName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a commitment association.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param commitmentPlanName The Azure ML commitment plan name. (required)
     * @param commitmentAssociationName The commitment association name. (required)
     * @param apiVersion The version of the Microsoft.MachineLearning resource provider API to use. (required)
     * @return ApiResponse&lt;CommitmentAssociation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommitmentAssociation> commitmentAssociationsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String commitmentPlanName, String commitmentAssociationName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = commitmentAssociationsGetValidateBeforeCall(subscriptionId, resourceGroupName, commitmentPlanName, commitmentAssociationName, apiVersion, null);
        Type localVarReturnType = new TypeToken<CommitmentAssociation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a commitment association.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param commitmentPlanName The Azure ML commitment plan name. (required)
     * @param commitmentAssociationName The commitment association name. (required)
     * @param apiVersion The version of the Microsoft.MachineLearning resource provider API to use. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commitmentAssociationsGetAsync(String subscriptionId, String resourceGroupName, String commitmentPlanName, String commitmentAssociationName, String apiVersion, final ApiCallback<CommitmentAssociation> _callback) throws ApiException {

        okhttp3.Call localVarCall = commitmentAssociationsGetValidateBeforeCall(subscriptionId, resourceGroupName, commitmentPlanName, commitmentAssociationName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<CommitmentAssociation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for commitmentAssociationsList
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param commitmentPlanName The Azure ML commitment plan name. (required)
     * @param apiVersion The version of the Microsoft.MachineLearning resource provider API to use. (required)
     * @param $skipToken Continuation token for pagination. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commitmentAssociationsListCall(String subscriptionId, String resourceGroupName, String commitmentPlanName, String apiVersion, String $skipToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans/{commitmentPlanName}/commitmentAssociations"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "commitmentPlanName" + "}", localVarApiClient.escapeString(commitmentPlanName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skipToken", $skipToken));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call commitmentAssociationsListValidateBeforeCall(String subscriptionId, String resourceGroupName, String commitmentPlanName, String apiVersion, String $skipToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling commitmentAssociationsList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling commitmentAssociationsList(Async)");
        }

        // verify the required parameter 'commitmentPlanName' is set
        if (commitmentPlanName == null) {
            throw new ApiException("Missing the required parameter 'commitmentPlanName' when calling commitmentAssociationsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling commitmentAssociationsList(Async)");
        }

        return commitmentAssociationsListCall(subscriptionId, resourceGroupName, commitmentPlanName, apiVersion, $skipToken, _callback);

    }

    /**
     * 
     * Get all commitment associations for a parent commitment plan.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param commitmentPlanName The Azure ML commitment plan name. (required)
     * @param apiVersion The version of the Microsoft.MachineLearning resource provider API to use. (required)
     * @param $skipToken Continuation token for pagination. (optional)
     * @return CommitmentAssociationListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CommitmentAssociationListResult commitmentAssociationsList(String subscriptionId, String resourceGroupName, String commitmentPlanName, String apiVersion, String $skipToken) throws ApiException {
        ApiResponse<CommitmentAssociationListResult> localVarResp = commitmentAssociationsListWithHttpInfo(subscriptionId, resourceGroupName, commitmentPlanName, apiVersion, $skipToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Get all commitment associations for a parent commitment plan.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param commitmentPlanName The Azure ML commitment plan name. (required)
     * @param apiVersion The version of the Microsoft.MachineLearning resource provider API to use. (required)
     * @param $skipToken Continuation token for pagination. (optional)
     * @return ApiResponse&lt;CommitmentAssociationListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommitmentAssociationListResult> commitmentAssociationsListWithHttpInfo(String subscriptionId, String resourceGroupName, String commitmentPlanName, String apiVersion, String $skipToken) throws ApiException {
        okhttp3.Call localVarCall = commitmentAssociationsListValidateBeforeCall(subscriptionId, resourceGroupName, commitmentPlanName, apiVersion, $skipToken, null);
        Type localVarReturnType = new TypeToken<CommitmentAssociationListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all commitment associations for a parent commitment plan.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param commitmentPlanName The Azure ML commitment plan name. (required)
     * @param apiVersion The version of the Microsoft.MachineLearning resource provider API to use. (required)
     * @param $skipToken Continuation token for pagination. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commitmentAssociationsListAsync(String subscriptionId, String resourceGroupName, String commitmentPlanName, String apiVersion, String $skipToken, final ApiCallback<CommitmentAssociationListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = commitmentAssociationsListValidateBeforeCall(subscriptionId, resourceGroupName, commitmentPlanName, apiVersion, $skipToken, _callback);
        Type localVarReturnType = new TypeToken<CommitmentAssociationListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for commitmentAssociationsMove
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param commitmentPlanName The Azure ML commitment plan name. (required)
     * @param commitmentAssociationName The commitment association name. (required)
     * @param apiVersion The version of the Microsoft.MachineLearning resource provider API to use. (required)
     * @param movePayload The move request payload. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commitmentAssociationsMoveCall(String subscriptionId, String resourceGroupName, String commitmentPlanName, String commitmentAssociationName, String apiVersion, MoveCommitmentAssociationRequest movePayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = movePayload;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans/{commitmentPlanName}/commitmentAssociations/{commitmentAssociationName}/move"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "commitmentPlanName" + "}", localVarApiClient.escapeString(commitmentPlanName.toString()))
            .replace("{" + "commitmentAssociationName" + "}", localVarApiClient.escapeString(commitmentAssociationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call commitmentAssociationsMoveValidateBeforeCall(String subscriptionId, String resourceGroupName, String commitmentPlanName, String commitmentAssociationName, String apiVersion, MoveCommitmentAssociationRequest movePayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling commitmentAssociationsMove(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling commitmentAssociationsMove(Async)");
        }

        // verify the required parameter 'commitmentPlanName' is set
        if (commitmentPlanName == null) {
            throw new ApiException("Missing the required parameter 'commitmentPlanName' when calling commitmentAssociationsMove(Async)");
        }

        // verify the required parameter 'commitmentAssociationName' is set
        if (commitmentAssociationName == null) {
            throw new ApiException("Missing the required parameter 'commitmentAssociationName' when calling commitmentAssociationsMove(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling commitmentAssociationsMove(Async)");
        }

        // verify the required parameter 'movePayload' is set
        if (movePayload == null) {
            throw new ApiException("Missing the required parameter 'movePayload' when calling commitmentAssociationsMove(Async)");
        }

        return commitmentAssociationsMoveCall(subscriptionId, resourceGroupName, commitmentPlanName, commitmentAssociationName, apiVersion, movePayload, _callback);

    }

    /**
     * 
     * Re-parent a commitment association from one commitment plan to another.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param commitmentPlanName The Azure ML commitment plan name. (required)
     * @param commitmentAssociationName The commitment association name. (required)
     * @param apiVersion The version of the Microsoft.MachineLearning resource provider API to use. (required)
     * @param movePayload The move request payload. (required)
     * @return CommitmentAssociation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CommitmentAssociation commitmentAssociationsMove(String subscriptionId, String resourceGroupName, String commitmentPlanName, String commitmentAssociationName, String apiVersion, MoveCommitmentAssociationRequest movePayload) throws ApiException {
        ApiResponse<CommitmentAssociation> localVarResp = commitmentAssociationsMoveWithHttpInfo(subscriptionId, resourceGroupName, commitmentPlanName, commitmentAssociationName, apiVersion, movePayload);
        return localVarResp.getData();
    }

    /**
     * 
     * Re-parent a commitment association from one commitment plan to another.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param commitmentPlanName The Azure ML commitment plan name. (required)
     * @param commitmentAssociationName The commitment association name. (required)
     * @param apiVersion The version of the Microsoft.MachineLearning resource provider API to use. (required)
     * @param movePayload The move request payload. (required)
     * @return ApiResponse&lt;CommitmentAssociation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommitmentAssociation> commitmentAssociationsMoveWithHttpInfo(String subscriptionId, String resourceGroupName, String commitmentPlanName, String commitmentAssociationName, String apiVersion, MoveCommitmentAssociationRequest movePayload) throws ApiException {
        okhttp3.Call localVarCall = commitmentAssociationsMoveValidateBeforeCall(subscriptionId, resourceGroupName, commitmentPlanName, commitmentAssociationName, apiVersion, movePayload, null);
        Type localVarReturnType = new TypeToken<CommitmentAssociation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Re-parent a commitment association from one commitment plan to another.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param commitmentPlanName The Azure ML commitment plan name. (required)
     * @param commitmentAssociationName The commitment association name. (required)
     * @param apiVersion The version of the Microsoft.MachineLearning resource provider API to use. (required)
     * @param movePayload The move request payload. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commitmentAssociationsMoveAsync(String subscriptionId, String resourceGroupName, String commitmentPlanName, String commitmentAssociationName, String apiVersion, MoveCommitmentAssociationRequest movePayload, final ApiCallback<CommitmentAssociation> _callback) throws ApiException {

        okhttp3.Call localVarCall = commitmentAssociationsMoveValidateBeforeCall(subscriptionId, resourceGroupName, commitmentPlanName, commitmentAssociationName, apiVersion, movePayload, _callback);
        Type localVarReturnType = new TypeToken<CommitmentAssociation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
