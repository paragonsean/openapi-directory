/*
 * Azure ML Commitment Plans Management Client
 * These APIs allow end users to operate on Azure Machine Learning Commitment Plans resources and their child Commitment Association resources. They support CRUD operations for commitment plans, get and list operations for commitment associations, moving commitment associations between commitment plans, and retrieving commitment plan usage history.
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of an Azure ML commitment association.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:15:07.564221-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CommitmentAssociationProperties {
  public static final String SERIALIZED_NAME_ASSOCIATED_RESOURCE_ID = "associatedResourceId";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_RESOURCE_ID)
  private String associatedResourceId;

  public static final String SERIALIZED_NAME_COMMITMENT_PLAN_ID = "commitmentPlanId";
  @SerializedName(SERIALIZED_NAME_COMMITMENT_PLAN_ID)
  private String commitmentPlanId;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public CommitmentAssociationProperties() {
  }

  public CommitmentAssociationProperties(
     String associatedResourceId, 
     String commitmentPlanId, 
     OffsetDateTime creationDate
  ) {
    this();
    this.associatedResourceId = associatedResourceId;
    this.commitmentPlanId = commitmentPlanId;
    this.creationDate = creationDate;
  }

  /**
   * The ID of the resource this association points to, such as the ARM ID of an Azure ML web service.
   * @return associatedResourceId
   */
  @javax.annotation.Nullable
  public String getAssociatedResourceId() {
    return associatedResourceId;
  }



  /**
   * The ARM ID of the parent Azure ML commitment plan.
   * @return commitmentPlanId
   */
  @javax.annotation.Nullable
  public String getCommitmentPlanId() {
    return commitmentPlanId;
  }



  /**
   * The date at which this commitment association was created, in ISO 8601 format.
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommitmentAssociationProperties commitmentAssociationProperties = (CommitmentAssociationProperties) o;
    return Objects.equals(this.associatedResourceId, commitmentAssociationProperties.associatedResourceId) &&
        Objects.equals(this.commitmentPlanId, commitmentAssociationProperties.commitmentPlanId) &&
        Objects.equals(this.creationDate, commitmentAssociationProperties.creationDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(associatedResourceId, commitmentPlanId, creationDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommitmentAssociationProperties {\n");
    sb.append("    associatedResourceId: ").append(toIndentedString(associatedResourceId)).append("\n");
    sb.append("    commitmentPlanId: ").append(toIndentedString(commitmentPlanId)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("associatedResourceId");
    openapiFields.add("commitmentPlanId");
    openapiFields.add("creationDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CommitmentAssociationProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CommitmentAssociationProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommitmentAssociationProperties is not found in the empty JSON string", CommitmentAssociationProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CommitmentAssociationProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommitmentAssociationProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("associatedResourceId") != null && !jsonObj.get("associatedResourceId").isJsonNull()) && !jsonObj.get("associatedResourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `associatedResourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("associatedResourceId").toString()));
      }
      if ((jsonObj.get("commitmentPlanId") != null && !jsonObj.get("commitmentPlanId").isJsonNull()) && !jsonObj.get("commitmentPlanId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commitmentPlanId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commitmentPlanId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommitmentAssociationProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommitmentAssociationProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommitmentAssociationProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommitmentAssociationProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<CommitmentAssociationProperties>() {
           @Override
           public void write(JsonWriter out, CommitmentAssociationProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommitmentAssociationProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CommitmentAssociationProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CommitmentAssociationProperties
   * @throws IOException if the JSON string is invalid with respect to CommitmentAssociationProperties
   */
  public static CommitmentAssociationProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommitmentAssociationProperties.class);
  }

  /**
   * Convert an instance of CommitmentAssociationProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

