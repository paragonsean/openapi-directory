/*
 * Azure ML Commitment Plans Management Client
 * These APIs allow end users to operate on Azure Machine Learning Commitment Plans resources and their child Commitment Association resources. They support CRUD operations for commitment plans, get and list operations for commitment associations, moving commitment associations between commitment plans, and retrieving commitment plan usage history.
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the destination Azure ML commitment plan for a move operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:15:07.564221-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MoveCommitmentAssociationRequest {
  public static final String SERIALIZED_NAME_DESTINATION_PLAN_ID = "destinationPlanId";
  @SerializedName(SERIALIZED_NAME_DESTINATION_PLAN_ID)
  private String destinationPlanId;

  public MoveCommitmentAssociationRequest() {
  }

  public MoveCommitmentAssociationRequest destinationPlanId(String destinationPlanId) {
    this.destinationPlanId = destinationPlanId;
    return this;
  }

  /**
   * The ARM ID of the commitment plan to re-parent the commitment association to.
   * @return destinationPlanId
   */
  @javax.annotation.Nullable
  public String getDestinationPlanId() {
    return destinationPlanId;
  }

  public void setDestinationPlanId(String destinationPlanId) {
    this.destinationPlanId = destinationPlanId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MoveCommitmentAssociationRequest moveCommitmentAssociationRequest = (MoveCommitmentAssociationRequest) o;
    return Objects.equals(this.destinationPlanId, moveCommitmentAssociationRequest.destinationPlanId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinationPlanId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MoveCommitmentAssociationRequest {\n");
    sb.append("    destinationPlanId: ").append(toIndentedString(destinationPlanId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destinationPlanId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MoveCommitmentAssociationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MoveCommitmentAssociationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MoveCommitmentAssociationRequest is not found in the empty JSON string", MoveCommitmentAssociationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MoveCommitmentAssociationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MoveCommitmentAssociationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("destinationPlanId") != null && !jsonObj.get("destinationPlanId").isJsonNull()) && !jsonObj.get("destinationPlanId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationPlanId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationPlanId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MoveCommitmentAssociationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MoveCommitmentAssociationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MoveCommitmentAssociationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MoveCommitmentAssociationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<MoveCommitmentAssociationRequest>() {
           @Override
           public void write(JsonWriter out, MoveCommitmentAssociationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MoveCommitmentAssociationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MoveCommitmentAssociationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MoveCommitmentAssociationRequest
   * @throws IOException if the JSON string is invalid with respect to MoveCommitmentAssociationRequest
   */
  public static MoveCommitmentAssociationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MoveCommitmentAssociationRequest.class);
  }

  /**
   * Convert an instance of MoveCommitmentAssociationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

