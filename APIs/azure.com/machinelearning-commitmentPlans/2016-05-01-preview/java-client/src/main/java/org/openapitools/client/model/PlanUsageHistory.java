/*
 * Azure ML Commitment Plans Management Client
 * These APIs allow end users to operate on Azure Machine Learning Commitment Plans resources and their child Commitment Association resources. They support CRUD operations for commitment plans, get and list operations for commitment associations, moving commitment associations between commitment plans, and retrieving commitment plan usage history.
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents historical information about usage of the Azure resources associated with a commitment plan.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:15:07.564221-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlanUsageHistory {
  public static final String SERIALIZED_NAME_PLAN_DELETION_OVERAGE = "planDeletionOverage";
  @SerializedName(SERIALIZED_NAME_PLAN_DELETION_OVERAGE)
  private Map<String, Double> planDeletionOverage = new HashMap<>();

  public static final String SERIALIZED_NAME_PLAN_MIGRATION_OVERAGE = "planMigrationOverage";
  @SerializedName(SERIALIZED_NAME_PLAN_MIGRATION_OVERAGE)
  private Map<String, Double> planMigrationOverage = new HashMap<>();

  public static final String SERIALIZED_NAME_PLAN_QUANTITIES_AFTER_USAGE = "planQuantitiesAfterUsage";
  @SerializedName(SERIALIZED_NAME_PLAN_QUANTITIES_AFTER_USAGE)
  private Map<String, Double> planQuantitiesAfterUsage = new HashMap<>();

  public static final String SERIALIZED_NAME_PLAN_QUANTITIES_BEFORE_USAGE = "planQuantitiesBeforeUsage";
  @SerializedName(SERIALIZED_NAME_PLAN_QUANTITIES_BEFORE_USAGE)
  private Map<String, Double> planQuantitiesBeforeUsage = new HashMap<>();

  public static final String SERIALIZED_NAME_PLAN_USAGE_OVERAGE = "planUsageOverage";
  @SerializedName(SERIALIZED_NAME_PLAN_USAGE_OVERAGE)
  private Map<String, Double> planUsageOverage = new HashMap<>();

  public static final String SERIALIZED_NAME_USAGE = "usage";
  @SerializedName(SERIALIZED_NAME_USAGE)
  private Map<String, Double> usage = new HashMap<>();

  public static final String SERIALIZED_NAME_USAGE_DATE = "usageDate";
  @SerializedName(SERIALIZED_NAME_USAGE_DATE)
  private OffsetDateTime usageDate;

  public PlanUsageHistory() {
  }

  public PlanUsageHistory planDeletionOverage(Map<String, Double> planDeletionOverage) {
    this.planDeletionOverage = planDeletionOverage;
    return this;
  }

  public PlanUsageHistory putPlanDeletionOverageItem(String key, Double planDeletionOverageItem) {
    if (this.planDeletionOverage == null) {
      this.planDeletionOverage = new HashMap<>();
    }
    this.planDeletionOverage.put(key, planDeletionOverageItem);
    return this;
  }

  /**
   * Overage incurred as a result of deleting a commitment plan.
   * @return planDeletionOverage
   */
  @javax.annotation.Nullable
  public Map<String, Double> getPlanDeletionOverage() {
    return planDeletionOverage;
  }

  public void setPlanDeletionOverage(Map<String, Double> planDeletionOverage) {
    this.planDeletionOverage = planDeletionOverage;
  }


  public PlanUsageHistory planMigrationOverage(Map<String, Double> planMigrationOverage) {
    this.planMigrationOverage = planMigrationOverage;
    return this;
  }

  public PlanUsageHistory putPlanMigrationOverageItem(String key, Double planMigrationOverageItem) {
    if (this.planMigrationOverage == null) {
      this.planMigrationOverage = new HashMap<>();
    }
    this.planMigrationOverage.put(key, planMigrationOverageItem);
    return this;
  }

  /**
   * Overage incurred as a result of migrating a commitment plan from one SKU to another.
   * @return planMigrationOverage
   */
  @javax.annotation.Nullable
  public Map<String, Double> getPlanMigrationOverage() {
    return planMigrationOverage;
  }

  public void setPlanMigrationOverage(Map<String, Double> planMigrationOverage) {
    this.planMigrationOverage = planMigrationOverage;
  }


  public PlanUsageHistory planQuantitiesAfterUsage(Map<String, Double> planQuantitiesAfterUsage) {
    this.planQuantitiesAfterUsage = planQuantitiesAfterUsage;
    return this;
  }

  public PlanUsageHistory putPlanQuantitiesAfterUsageItem(String key, Double planQuantitiesAfterUsageItem) {
    if (this.planQuantitiesAfterUsage == null) {
      this.planQuantitiesAfterUsage = new HashMap<>();
    }
    this.planQuantitiesAfterUsage.put(key, planQuantitiesAfterUsageItem);
    return this;
  }

  /**
   * Included quantities remaining after usage against the commitment plan&#39;s associated resources was calculated.
   * @return planQuantitiesAfterUsage
   */
  @javax.annotation.Nullable
  public Map<String, Double> getPlanQuantitiesAfterUsage() {
    return planQuantitiesAfterUsage;
  }

  public void setPlanQuantitiesAfterUsage(Map<String, Double> planQuantitiesAfterUsage) {
    this.planQuantitiesAfterUsage = planQuantitiesAfterUsage;
  }


  public PlanUsageHistory planQuantitiesBeforeUsage(Map<String, Double> planQuantitiesBeforeUsage) {
    this.planQuantitiesBeforeUsage = planQuantitiesBeforeUsage;
    return this;
  }

  public PlanUsageHistory putPlanQuantitiesBeforeUsageItem(String key, Double planQuantitiesBeforeUsageItem) {
    if (this.planQuantitiesBeforeUsage == null) {
      this.planQuantitiesBeforeUsage = new HashMap<>();
    }
    this.planQuantitiesBeforeUsage.put(key, planQuantitiesBeforeUsageItem);
    return this;
  }

  /**
   * Included quantities remaining before usage against the commitment plan&#39;s associated resources was calculated.
   * @return planQuantitiesBeforeUsage
   */
  @javax.annotation.Nullable
  public Map<String, Double> getPlanQuantitiesBeforeUsage() {
    return planQuantitiesBeforeUsage;
  }

  public void setPlanQuantitiesBeforeUsage(Map<String, Double> planQuantitiesBeforeUsage) {
    this.planQuantitiesBeforeUsage = planQuantitiesBeforeUsage;
  }


  public PlanUsageHistory planUsageOverage(Map<String, Double> planUsageOverage) {
    this.planUsageOverage = planUsageOverage;
    return this;
  }

  public PlanUsageHistory putPlanUsageOverageItem(String key, Double planUsageOverageItem) {
    if (this.planUsageOverage == null) {
      this.planUsageOverage = new HashMap<>();
    }
    this.planUsageOverage.put(key, planUsageOverageItem);
    return this;
  }

  /**
   * Usage against the commitment plan&#39;s associated resources which was not covered by included quantities and is therefore overage.
   * @return planUsageOverage
   */
  @javax.annotation.Nullable
  public Map<String, Double> getPlanUsageOverage() {
    return planUsageOverage;
  }

  public void setPlanUsageOverage(Map<String, Double> planUsageOverage) {
    this.planUsageOverage = planUsageOverage;
  }


  public PlanUsageHistory usage(Map<String, Double> usage) {
    this.usage = usage;
    return this;
  }

  public PlanUsageHistory putUsageItem(String key, Double usageItem) {
    if (this.usage == null) {
      this.usage = new HashMap<>();
    }
    this.usage.put(key, usageItem);
    return this;
  }

  /**
   * Usage against the commitment plan&#39;s associated resources.
   * @return usage
   */
  @javax.annotation.Nullable
  public Map<String, Double> getUsage() {
    return usage;
  }

  public void setUsage(Map<String, Double> usage) {
    this.usage = usage;
  }


  public PlanUsageHistory usageDate(OffsetDateTime usageDate) {
    this.usageDate = usageDate;
    return this;
  }

  /**
   * The date of usage, in ISO 8601 format.
   * @return usageDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUsageDate() {
    return usageDate;
  }

  public void setUsageDate(OffsetDateTime usageDate) {
    this.usageDate = usageDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlanUsageHistory planUsageHistory = (PlanUsageHistory) o;
    return Objects.equals(this.planDeletionOverage, planUsageHistory.planDeletionOverage) &&
        Objects.equals(this.planMigrationOverage, planUsageHistory.planMigrationOverage) &&
        Objects.equals(this.planQuantitiesAfterUsage, planUsageHistory.planQuantitiesAfterUsage) &&
        Objects.equals(this.planQuantitiesBeforeUsage, planUsageHistory.planQuantitiesBeforeUsage) &&
        Objects.equals(this.planUsageOverage, planUsageHistory.planUsageOverage) &&
        Objects.equals(this.usage, planUsageHistory.usage) &&
        Objects.equals(this.usageDate, planUsageHistory.usageDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(planDeletionOverage, planMigrationOverage, planQuantitiesAfterUsage, planQuantitiesBeforeUsage, planUsageOverage, usage, usageDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlanUsageHistory {\n");
    sb.append("    planDeletionOverage: ").append(toIndentedString(planDeletionOverage)).append("\n");
    sb.append("    planMigrationOverage: ").append(toIndentedString(planMigrationOverage)).append("\n");
    sb.append("    planQuantitiesAfterUsage: ").append(toIndentedString(planQuantitiesAfterUsage)).append("\n");
    sb.append("    planQuantitiesBeforeUsage: ").append(toIndentedString(planQuantitiesBeforeUsage)).append("\n");
    sb.append("    planUsageOverage: ").append(toIndentedString(planUsageOverage)).append("\n");
    sb.append("    usage: ").append(toIndentedString(usage)).append("\n");
    sb.append("    usageDate: ").append(toIndentedString(usageDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("planDeletionOverage");
    openapiFields.add("planMigrationOverage");
    openapiFields.add("planQuantitiesAfterUsage");
    openapiFields.add("planQuantitiesBeforeUsage");
    openapiFields.add("planUsageOverage");
    openapiFields.add("usage");
    openapiFields.add("usageDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlanUsageHistory
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlanUsageHistory.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlanUsageHistory is not found in the empty JSON string", PlanUsageHistory.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlanUsageHistory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlanUsageHistory` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlanUsageHistory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlanUsageHistory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlanUsageHistory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlanUsageHistory.class));

       return (TypeAdapter<T>) new TypeAdapter<PlanUsageHistory>() {
           @Override
           public void write(JsonWriter out, PlanUsageHistory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlanUsageHistory read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlanUsageHistory given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlanUsageHistory
   * @throws IOException if the JSON string is invalid with respect to PlanUsageHistory
   */
  public static PlanUsageHistory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlanUsageHistory.class);
  }

  /**
   * Convert an instance of PlanUsageHistory to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

