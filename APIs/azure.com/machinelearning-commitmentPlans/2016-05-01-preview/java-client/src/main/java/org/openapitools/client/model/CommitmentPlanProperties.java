/*
 * Azure ML Commitment Plans Management Client
 * These APIs allow end users to operate on Azure Machine Learning Commitment Plans resources and their child Commitment Association resources. They support CRUD operations for commitment plans, get and list operations for commitment associations, moving commitment associations between commitment plans, and retrieving commitment plan usage history.
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.PlanQuantity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of an Azure ML commitment plan.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:15:07.564221-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CommitmentPlanProperties {
  public static final String SERIALIZED_NAME_CHARGE_FOR_OVERAGE = "chargeForOverage";
  @SerializedName(SERIALIZED_NAME_CHARGE_FOR_OVERAGE)
  private Boolean chargeForOverage;

  public static final String SERIALIZED_NAME_CHARGE_FOR_PLAN = "chargeForPlan";
  @SerializedName(SERIALIZED_NAME_CHARGE_FOR_PLAN)
  private Boolean chargeForPlan;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_INCLUDED_QUANTITIES = "includedQuantities";
  @SerializedName(SERIALIZED_NAME_INCLUDED_QUANTITIES)
  private Map<String, PlanQuantity> includedQuantities = new HashMap<>();

  public static final String SERIALIZED_NAME_MAX_ASSOCIATION_LIMIT = "maxAssociationLimit";
  @SerializedName(SERIALIZED_NAME_MAX_ASSOCIATION_LIMIT)
  private Integer maxAssociationLimit;

  public static final String SERIALIZED_NAME_MAX_CAPACITY_LIMIT = "maxCapacityLimit";
  @SerializedName(SERIALIZED_NAME_MAX_CAPACITY_LIMIT)
  private Integer maxCapacityLimit;

  public static final String SERIALIZED_NAME_MIN_CAPACITY_LIMIT = "minCapacityLimit";
  @SerializedName(SERIALIZED_NAME_MIN_CAPACITY_LIMIT)
  private Integer minCapacityLimit;

  public static final String SERIALIZED_NAME_PLAN_METER = "planMeter";
  @SerializedName(SERIALIZED_NAME_PLAN_METER)
  private String planMeter;

  public static final String SERIALIZED_NAME_REFILL_FREQUENCY_IN_DAYS = "refillFrequencyInDays";
  @SerializedName(SERIALIZED_NAME_REFILL_FREQUENCY_IN_DAYS)
  private Integer refillFrequencyInDays;

  public static final String SERIALIZED_NAME_SUSPEND_PLAN_ON_OVERAGE = "suspendPlanOnOverage";
  @SerializedName(SERIALIZED_NAME_SUSPEND_PLAN_ON_OVERAGE)
  private Boolean suspendPlanOnOverage;

  public CommitmentPlanProperties() {
  }

  public CommitmentPlanProperties(
     Boolean chargeForOverage, 
     Boolean chargeForPlan, 
     OffsetDateTime creationDate, 
     Map<String, PlanQuantity> includedQuantities, 
     Integer maxAssociationLimit, 
     Integer maxCapacityLimit, 
     Integer minCapacityLimit, 
     String planMeter, 
     Integer refillFrequencyInDays, 
     Boolean suspendPlanOnOverage
  ) {
    this();
    this.chargeForOverage = chargeForOverage;
    this.chargeForPlan = chargeForPlan;
    this.creationDate = creationDate;
    this.includedQuantities = includedQuantities;
    this.maxAssociationLimit = maxAssociationLimit;
    this.maxCapacityLimit = maxCapacityLimit;
    this.minCapacityLimit = minCapacityLimit;
    this.planMeter = planMeter;
    this.refillFrequencyInDays = refillFrequencyInDays;
    this.suspendPlanOnOverage = suspendPlanOnOverage;
  }

  /**
   * Indicates whether usage beyond the commitment plan&#39;s included quantities will be charged.
   * @return chargeForOverage
   */
  @javax.annotation.Nullable
  public Boolean getChargeForOverage() {
    return chargeForOverage;
  }



  /**
   * Indicates whether the commitment plan will incur a charge.
   * @return chargeForPlan
   */
  @javax.annotation.Nullable
  public Boolean getChargeForPlan() {
    return chargeForPlan;
  }



  /**
   * The date at which this commitment plan was created, in ISO 8601 format.
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }



  /**
   * The included resource quantities this plan gives you.
   * @return includedQuantities
   */
  @javax.annotation.Nullable
  public Map<String, PlanQuantity> getIncludedQuantities() {
    return includedQuantities;
  }



  /**
   * The maximum number of commitment associations that can be children of this commitment plan.
   * @return maxAssociationLimit
   */
  @javax.annotation.Nullable
  public Integer getMaxAssociationLimit() {
    return maxAssociationLimit;
  }



  /**
   * The maximum scale-out capacity for this commitment plan.
   * @return maxCapacityLimit
   */
  @javax.annotation.Nullable
  public Integer getMaxCapacityLimit() {
    return maxCapacityLimit;
  }



  /**
   * The minimum scale-out capacity for this commitment plan.
   * @return minCapacityLimit
   */
  @javax.annotation.Nullable
  public Integer getMinCapacityLimit() {
    return minCapacityLimit;
  }



  /**
   * The Azure meter which will be used to charge for this commitment plan.
   * @return planMeter
   */
  @javax.annotation.Nullable
  public String getPlanMeter() {
    return planMeter;
  }



  /**
   * The frequency at which this commitment plan&#39;s included quantities are refilled.
   * @return refillFrequencyInDays
   */
  @javax.annotation.Nullable
  public Integer getRefillFrequencyInDays() {
    return refillFrequencyInDays;
  }



  /**
   * Indicates whether this commitment plan will be moved into a suspended state if usage goes beyond the commitment plan&#39;s included quantities.
   * @return suspendPlanOnOverage
   */
  @javax.annotation.Nullable
  public Boolean getSuspendPlanOnOverage() {
    return suspendPlanOnOverage;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommitmentPlanProperties commitmentPlanProperties = (CommitmentPlanProperties) o;
    return Objects.equals(this.chargeForOverage, commitmentPlanProperties.chargeForOverage) &&
        Objects.equals(this.chargeForPlan, commitmentPlanProperties.chargeForPlan) &&
        Objects.equals(this.creationDate, commitmentPlanProperties.creationDate) &&
        Objects.equals(this.includedQuantities, commitmentPlanProperties.includedQuantities) &&
        Objects.equals(this.maxAssociationLimit, commitmentPlanProperties.maxAssociationLimit) &&
        Objects.equals(this.maxCapacityLimit, commitmentPlanProperties.maxCapacityLimit) &&
        Objects.equals(this.minCapacityLimit, commitmentPlanProperties.minCapacityLimit) &&
        Objects.equals(this.planMeter, commitmentPlanProperties.planMeter) &&
        Objects.equals(this.refillFrequencyInDays, commitmentPlanProperties.refillFrequencyInDays) &&
        Objects.equals(this.suspendPlanOnOverage, commitmentPlanProperties.suspendPlanOnOverage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chargeForOverage, chargeForPlan, creationDate, includedQuantities, maxAssociationLimit, maxCapacityLimit, minCapacityLimit, planMeter, refillFrequencyInDays, suspendPlanOnOverage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommitmentPlanProperties {\n");
    sb.append("    chargeForOverage: ").append(toIndentedString(chargeForOverage)).append("\n");
    sb.append("    chargeForPlan: ").append(toIndentedString(chargeForPlan)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    includedQuantities: ").append(toIndentedString(includedQuantities)).append("\n");
    sb.append("    maxAssociationLimit: ").append(toIndentedString(maxAssociationLimit)).append("\n");
    sb.append("    maxCapacityLimit: ").append(toIndentedString(maxCapacityLimit)).append("\n");
    sb.append("    minCapacityLimit: ").append(toIndentedString(minCapacityLimit)).append("\n");
    sb.append("    planMeter: ").append(toIndentedString(planMeter)).append("\n");
    sb.append("    refillFrequencyInDays: ").append(toIndentedString(refillFrequencyInDays)).append("\n");
    sb.append("    suspendPlanOnOverage: ").append(toIndentedString(suspendPlanOnOverage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chargeForOverage");
    openapiFields.add("chargeForPlan");
    openapiFields.add("creationDate");
    openapiFields.add("includedQuantities");
    openapiFields.add("maxAssociationLimit");
    openapiFields.add("maxCapacityLimit");
    openapiFields.add("minCapacityLimit");
    openapiFields.add("planMeter");
    openapiFields.add("refillFrequencyInDays");
    openapiFields.add("suspendPlanOnOverage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CommitmentPlanProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CommitmentPlanProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommitmentPlanProperties is not found in the empty JSON string", CommitmentPlanProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CommitmentPlanProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommitmentPlanProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("planMeter") != null && !jsonObj.get("planMeter").isJsonNull()) && !jsonObj.get("planMeter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `planMeter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("planMeter").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommitmentPlanProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommitmentPlanProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommitmentPlanProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommitmentPlanProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<CommitmentPlanProperties>() {
           @Override
           public void write(JsonWriter out, CommitmentPlanProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommitmentPlanProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CommitmentPlanProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CommitmentPlanProperties
   * @throws IOException if the JSON string is invalid with respect to CommitmentPlanProperties
   */
  public static CommitmentPlanProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommitmentPlanProperties.class);
  }

  /**
   * Convert an instance of CommitmentPlanProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

