/*
 * Azure ML Commitment Plans Management Client
 * These APIs allow end users to operate on Azure Machine Learning Commitment Plans resources and their child Commitment Association resources. They support CRUD operations for commitment plans, get and list operations for commitment associations, moving commitment associations between commitment plans, and retrieving commitment plan usage history.
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes scaling information of a SKU.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:15:07.564221-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SkuCapacity {
  public static final String SERIALIZED_NAME_DEFAULT = "default";
  @SerializedName(SERIALIZED_NAME_DEFAULT)
  private Long _default;

  public static final String SERIALIZED_NAME_MAXIMUM = "maximum";
  @SerializedName(SERIALIZED_NAME_MAXIMUM)
  private Long maximum;

  public static final String SERIALIZED_NAME_MINIMUM = "minimum";
  @SerializedName(SERIALIZED_NAME_MINIMUM)
  private Long minimum;

  /**
   * The scale type applicable to the sku.
   */
  @JsonAdapter(ScaleTypeEnum.Adapter.class)
  public enum ScaleTypeEnum {
    AUTOMATIC("Automatic"),
    
    MANUAL("Manual"),
    
    NONE("None");

    private String value;

    ScaleTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScaleTypeEnum fromValue(String value) {
      for (ScaleTypeEnum b : ScaleTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScaleTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScaleTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScaleTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScaleTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ScaleTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCALE_TYPE = "scaleType";
  @SerializedName(SERIALIZED_NAME_SCALE_TYPE)
  private ScaleTypeEnum scaleType;

  public SkuCapacity() {
  }

  public SkuCapacity(
     Long _default, 
     Long maximum, 
     Long minimum, 
     ScaleTypeEnum scaleType
  ) {
    this();
    this._default = _default;
    this.maximum = maximum;
    this.minimum = minimum;
    this.scaleType = scaleType;
  }

  /**
   * The default capacity.
   * @return _default
   */
  @javax.annotation.Nullable
  public Long getDefault() {
    return _default;
  }



  /**
   * The maximum capacity that can be set.
   * @return maximum
   */
  @javax.annotation.Nullable
  public Long getMaximum() {
    return maximum;
  }



  /**
   * The minimum capacity.
   * @return minimum
   */
  @javax.annotation.Nullable
  public Long getMinimum() {
    return minimum;
  }



  /**
   * The scale type applicable to the sku.
   * @return scaleType
   */
  @javax.annotation.Nullable
  public ScaleTypeEnum getScaleType() {
    return scaleType;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SkuCapacity skuCapacity = (SkuCapacity) o;
    return Objects.equals(this._default, skuCapacity._default) &&
        Objects.equals(this.maximum, skuCapacity.maximum) &&
        Objects.equals(this.minimum, skuCapacity.minimum) &&
        Objects.equals(this.scaleType, skuCapacity.scaleType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_default, maximum, minimum, scaleType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SkuCapacity {\n");
    sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
    sb.append("    maximum: ").append(toIndentedString(maximum)).append("\n");
    sb.append("    minimum: ").append(toIndentedString(minimum)).append("\n");
    sb.append("    scaleType: ").append(toIndentedString(scaleType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("default");
    openapiFields.add("maximum");
    openapiFields.add("minimum");
    openapiFields.add("scaleType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SkuCapacity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SkuCapacity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SkuCapacity is not found in the empty JSON string", SkuCapacity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SkuCapacity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SkuCapacity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("scaleType") != null && !jsonObj.get("scaleType").isJsonNull()) && !jsonObj.get("scaleType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scaleType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scaleType").toString()));
      }
      // validate the optional field `scaleType`
      if (jsonObj.get("scaleType") != null && !jsonObj.get("scaleType").isJsonNull()) {
        ScaleTypeEnum.validateJsonElement(jsonObj.get("scaleType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SkuCapacity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SkuCapacity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SkuCapacity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SkuCapacity.class));

       return (TypeAdapter<T>) new TypeAdapter<SkuCapacity>() {
           @Override
           public void write(JsonWriter out, SkuCapacity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SkuCapacity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SkuCapacity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SkuCapacity
   * @throws IOException if the JSON string is invalid with respect to SkuCapacity
   */
  public static SkuCapacity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SkuCapacity.class);
  }

  /**
   * Convert an instance of SkuCapacity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

