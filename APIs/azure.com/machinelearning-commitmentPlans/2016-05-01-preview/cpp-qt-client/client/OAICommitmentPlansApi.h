/**
 * Azure ML Commitment Plans Management Client
 * These APIs allow end users to operate on Azure Machine Learning Commitment Plans resources and their child Commitment Association resources. They support CRUD operations for commitment plans, get and list operations for commitment associations, moving commitment associations between commitment plans, and retrieving commitment plan usage history.
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICommitmentPlansApi_H
#define OAI_OAICommitmentPlansApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICommitmentPlan.h"
#include "OAICommitmentPlanListResult.h"
#include "OAICommitmentPlanPatchPayload.h"
#include "OAIPlanUsageHistoryListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICommitmentPlansApi : public QObject {
    Q_OBJECT

public:
    OAICommitmentPlansApi(const int timeOut = 0);
    ~OAICommitmentPlansApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  commitment_plan_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  create_or_update_payload OAICommitmentPlan [required]
    */
    virtual void commitmentPlansCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &commitment_plan_name, const QString &api_version, const OAICommitmentPlan &create_or_update_payload);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  commitment_plan_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void commitmentPlansGet(const QString &subscription_id, const QString &resource_group_name, const QString &commitment_plan_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  skip_token QString [optional]
    */
    virtual void commitmentPlansList(const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &skip_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  skip_token QString [optional]
    */
    virtual void commitmentPlansListInResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &skip_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  commitment_plan_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  patch_payload OAICommitmentPlanPatchPayload [required]
    */
    virtual void commitmentPlansPatch(const QString &subscription_id, const QString &resource_group_name, const QString &commitment_plan_name, const QString &api_version, const OAICommitmentPlanPatchPayload &patch_payload);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  commitment_plan_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void commitmentPlansRemove(const QString &subscription_id, const QString &resource_group_name, const QString &commitment_plan_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  commitment_plan_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  skip_token QString [optional]
    */
    virtual void usageHistoryList(const QString &subscription_id, const QString &resource_group_name, const QString &commitment_plan_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &skip_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void commitmentPlansCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void commitmentPlansGetCallback(OAIHttpRequestWorker *worker);
    void commitmentPlansListCallback(OAIHttpRequestWorker *worker);
    void commitmentPlansListInResourceGroupCallback(OAIHttpRequestWorker *worker);
    void commitmentPlansPatchCallback(OAIHttpRequestWorker *worker);
    void commitmentPlansRemoveCallback(OAIHttpRequestWorker *worker);
    void usageHistoryListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void commitmentPlansCreateOrUpdateSignal(OAICommitmentPlan summary);
    void commitmentPlansGetSignal(OAICommitmentPlan summary);
    void commitmentPlansListSignal(OAICommitmentPlanListResult summary);
    void commitmentPlansListInResourceGroupSignal(OAICommitmentPlanListResult summary);
    void commitmentPlansPatchSignal(OAICommitmentPlan summary);
    void commitmentPlansRemoveSignal();
    void usageHistoryListSignal(OAIPlanUsageHistoryListResult summary);


    void commitmentPlansCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAICommitmentPlan summary);
    void commitmentPlansGetSignalFull(OAIHttpRequestWorker *worker, OAICommitmentPlan summary);
    void commitmentPlansListSignalFull(OAIHttpRequestWorker *worker, OAICommitmentPlanListResult summary);
    void commitmentPlansListInResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAICommitmentPlanListResult summary);
    void commitmentPlansPatchSignalFull(OAIHttpRequestWorker *worker, OAICommitmentPlan summary);
    void commitmentPlansRemoveSignalFull(OAIHttpRequestWorker *worker);
    void usageHistoryListSignalFull(OAIHttpRequestWorker *worker, OAIPlanUsageHistoryListResult summary);

    Q_DECL_DEPRECATED_X("Use commitmentPlansCreateOrUpdateSignalError() instead")
    void commitmentPlansCreateOrUpdateSignalE(OAICommitmentPlan summary, QNetworkReply::NetworkError error_type, QString error_str);
    void commitmentPlansCreateOrUpdateSignalError(OAICommitmentPlan summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commitmentPlansGetSignalError() instead")
    void commitmentPlansGetSignalE(OAICommitmentPlan summary, QNetworkReply::NetworkError error_type, QString error_str);
    void commitmentPlansGetSignalError(OAICommitmentPlan summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commitmentPlansListSignalError() instead")
    void commitmentPlansListSignalE(OAICommitmentPlanListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void commitmentPlansListSignalError(OAICommitmentPlanListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commitmentPlansListInResourceGroupSignalError() instead")
    void commitmentPlansListInResourceGroupSignalE(OAICommitmentPlanListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void commitmentPlansListInResourceGroupSignalError(OAICommitmentPlanListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commitmentPlansPatchSignalError() instead")
    void commitmentPlansPatchSignalE(OAICommitmentPlan summary, QNetworkReply::NetworkError error_type, QString error_str);
    void commitmentPlansPatchSignalError(OAICommitmentPlan summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commitmentPlansRemoveSignalError() instead")
    void commitmentPlansRemoveSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void commitmentPlansRemoveSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usageHistoryListSignalError() instead")
    void usageHistoryListSignalE(OAIPlanUsageHistoryListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usageHistoryListSignalError(OAIPlanUsageHistoryListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use commitmentPlansCreateOrUpdateSignalErrorFull() instead")
    void commitmentPlansCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void commitmentPlansCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commitmentPlansGetSignalErrorFull() instead")
    void commitmentPlansGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void commitmentPlansGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commitmentPlansListSignalErrorFull() instead")
    void commitmentPlansListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void commitmentPlansListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commitmentPlansListInResourceGroupSignalErrorFull() instead")
    void commitmentPlansListInResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void commitmentPlansListInResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commitmentPlansPatchSignalErrorFull() instead")
    void commitmentPlansPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void commitmentPlansPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commitmentPlansRemoveSignalErrorFull() instead")
    void commitmentPlansRemoveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void commitmentPlansRemoveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usageHistoryListSignalErrorFull() instead")
    void usageHistoryListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usageHistoryListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
