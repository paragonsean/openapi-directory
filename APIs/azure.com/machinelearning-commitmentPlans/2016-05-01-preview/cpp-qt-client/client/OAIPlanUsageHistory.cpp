/**
 * Azure ML Commitment Plans Management Client
 * These APIs allow end users to operate on Azure Machine Learning Commitment Plans resources and their child Commitment Association resources. They support CRUD operations for commitment plans, get and list operations for commitment associations, moving commitment associations between commitment plans, and retrieving commitment plan usage history.
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlanUsageHistory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlanUsageHistory::OAIPlanUsageHistory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlanUsageHistory::OAIPlanUsageHistory() {
    this->initializeModel();
}

OAIPlanUsageHistory::~OAIPlanUsageHistory() {}

void OAIPlanUsageHistory::initializeModel() {

    m_plan_deletion_overage_isSet = false;
    m_plan_deletion_overage_isValid = false;

    m_plan_migration_overage_isSet = false;
    m_plan_migration_overage_isValid = false;

    m_plan_quantities_after_usage_isSet = false;
    m_plan_quantities_after_usage_isValid = false;

    m_plan_quantities_before_usage_isSet = false;
    m_plan_quantities_before_usage_isValid = false;

    m_plan_usage_overage_isSet = false;
    m_plan_usage_overage_isValid = false;

    m_usage_isSet = false;
    m_usage_isValid = false;

    m_usage_date_isSet = false;
    m_usage_date_isValid = false;
}

void OAIPlanUsageHistory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlanUsageHistory::fromJsonObject(QJsonObject json) {

    m_plan_deletion_overage_isValid = ::OpenAPI::fromJsonValue(m_plan_deletion_overage, json[QString("planDeletionOverage")]);
    m_plan_deletion_overage_isSet = !json[QString("planDeletionOverage")].isNull() && m_plan_deletion_overage_isValid;

    m_plan_migration_overage_isValid = ::OpenAPI::fromJsonValue(m_plan_migration_overage, json[QString("planMigrationOverage")]);
    m_plan_migration_overage_isSet = !json[QString("planMigrationOverage")].isNull() && m_plan_migration_overage_isValid;

    m_plan_quantities_after_usage_isValid = ::OpenAPI::fromJsonValue(m_plan_quantities_after_usage, json[QString("planQuantitiesAfterUsage")]);
    m_plan_quantities_after_usage_isSet = !json[QString("planQuantitiesAfterUsage")].isNull() && m_plan_quantities_after_usage_isValid;

    m_plan_quantities_before_usage_isValid = ::OpenAPI::fromJsonValue(m_plan_quantities_before_usage, json[QString("planQuantitiesBeforeUsage")]);
    m_plan_quantities_before_usage_isSet = !json[QString("planQuantitiesBeforeUsage")].isNull() && m_plan_quantities_before_usage_isValid;

    m_plan_usage_overage_isValid = ::OpenAPI::fromJsonValue(m_plan_usage_overage, json[QString("planUsageOverage")]);
    m_plan_usage_overage_isSet = !json[QString("planUsageOverage")].isNull() && m_plan_usage_overage_isValid;

    m_usage_isValid = ::OpenAPI::fromJsonValue(m_usage, json[QString("usage")]);
    m_usage_isSet = !json[QString("usage")].isNull() && m_usage_isValid;

    m_usage_date_isValid = ::OpenAPI::fromJsonValue(m_usage_date, json[QString("usageDate")]);
    m_usage_date_isSet = !json[QString("usageDate")].isNull() && m_usage_date_isValid;
}

QString OAIPlanUsageHistory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlanUsageHistory::asJsonObject() const {
    QJsonObject obj;
    if (m_plan_deletion_overage.size() > 0) {
        obj.insert(QString("planDeletionOverage"), ::OpenAPI::toJsonValue(m_plan_deletion_overage));
    }
    if (m_plan_migration_overage.size() > 0) {
        obj.insert(QString("planMigrationOverage"), ::OpenAPI::toJsonValue(m_plan_migration_overage));
    }
    if (m_plan_quantities_after_usage.size() > 0) {
        obj.insert(QString("planQuantitiesAfterUsage"), ::OpenAPI::toJsonValue(m_plan_quantities_after_usage));
    }
    if (m_plan_quantities_before_usage.size() > 0) {
        obj.insert(QString("planQuantitiesBeforeUsage"), ::OpenAPI::toJsonValue(m_plan_quantities_before_usage));
    }
    if (m_plan_usage_overage.size() > 0) {
        obj.insert(QString("planUsageOverage"), ::OpenAPI::toJsonValue(m_plan_usage_overage));
    }
    if (m_usage.size() > 0) {
        obj.insert(QString("usage"), ::OpenAPI::toJsonValue(m_usage));
    }
    if (m_usage_date_isSet) {
        obj.insert(QString("usageDate"), ::OpenAPI::toJsonValue(m_usage_date));
    }
    return obj;
}

QMap<QString, double> OAIPlanUsageHistory::getPlanDeletionOverage() const {
    return m_plan_deletion_overage;
}
void OAIPlanUsageHistory::setPlanDeletionOverage(const QMap<QString, double> &plan_deletion_overage) {
    m_plan_deletion_overage = plan_deletion_overage;
    m_plan_deletion_overage_isSet = true;
}

bool OAIPlanUsageHistory::is_plan_deletion_overage_Set() const{
    return m_plan_deletion_overage_isSet;
}

bool OAIPlanUsageHistory::is_plan_deletion_overage_Valid() const{
    return m_plan_deletion_overage_isValid;
}

QMap<QString, double> OAIPlanUsageHistory::getPlanMigrationOverage() const {
    return m_plan_migration_overage;
}
void OAIPlanUsageHistory::setPlanMigrationOverage(const QMap<QString, double> &plan_migration_overage) {
    m_plan_migration_overage = plan_migration_overage;
    m_plan_migration_overage_isSet = true;
}

bool OAIPlanUsageHistory::is_plan_migration_overage_Set() const{
    return m_plan_migration_overage_isSet;
}

bool OAIPlanUsageHistory::is_plan_migration_overage_Valid() const{
    return m_plan_migration_overage_isValid;
}

QMap<QString, double> OAIPlanUsageHistory::getPlanQuantitiesAfterUsage() const {
    return m_plan_quantities_after_usage;
}
void OAIPlanUsageHistory::setPlanQuantitiesAfterUsage(const QMap<QString, double> &plan_quantities_after_usage) {
    m_plan_quantities_after_usage = plan_quantities_after_usage;
    m_plan_quantities_after_usage_isSet = true;
}

bool OAIPlanUsageHistory::is_plan_quantities_after_usage_Set() const{
    return m_plan_quantities_after_usage_isSet;
}

bool OAIPlanUsageHistory::is_plan_quantities_after_usage_Valid() const{
    return m_plan_quantities_after_usage_isValid;
}

QMap<QString, double> OAIPlanUsageHistory::getPlanQuantitiesBeforeUsage() const {
    return m_plan_quantities_before_usage;
}
void OAIPlanUsageHistory::setPlanQuantitiesBeforeUsage(const QMap<QString, double> &plan_quantities_before_usage) {
    m_plan_quantities_before_usage = plan_quantities_before_usage;
    m_plan_quantities_before_usage_isSet = true;
}

bool OAIPlanUsageHistory::is_plan_quantities_before_usage_Set() const{
    return m_plan_quantities_before_usage_isSet;
}

bool OAIPlanUsageHistory::is_plan_quantities_before_usage_Valid() const{
    return m_plan_quantities_before_usage_isValid;
}

QMap<QString, double> OAIPlanUsageHistory::getPlanUsageOverage() const {
    return m_plan_usage_overage;
}
void OAIPlanUsageHistory::setPlanUsageOverage(const QMap<QString, double> &plan_usage_overage) {
    m_plan_usage_overage = plan_usage_overage;
    m_plan_usage_overage_isSet = true;
}

bool OAIPlanUsageHistory::is_plan_usage_overage_Set() const{
    return m_plan_usage_overage_isSet;
}

bool OAIPlanUsageHistory::is_plan_usage_overage_Valid() const{
    return m_plan_usage_overage_isValid;
}

QMap<QString, double> OAIPlanUsageHistory::getUsage() const {
    return m_usage;
}
void OAIPlanUsageHistory::setUsage(const QMap<QString, double> &usage) {
    m_usage = usage;
    m_usage_isSet = true;
}

bool OAIPlanUsageHistory::is_usage_Set() const{
    return m_usage_isSet;
}

bool OAIPlanUsageHistory::is_usage_Valid() const{
    return m_usage_isValid;
}

QDateTime OAIPlanUsageHistory::getUsageDate() const {
    return m_usage_date;
}
void OAIPlanUsageHistory::setUsageDate(const QDateTime &usage_date) {
    m_usage_date = usage_date;
    m_usage_date_isSet = true;
}

bool OAIPlanUsageHistory::is_usage_date_Set() const{
    return m_usage_date_isSet;
}

bool OAIPlanUsageHistory::is_usage_date_Valid() const{
    return m_usage_date_isValid;
}

bool OAIPlanUsageHistory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_plan_deletion_overage.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_migration_overage.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_quantities_after_usage.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_quantities_before_usage.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_usage_overage.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlanUsageHistory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
