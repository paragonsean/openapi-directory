/**
 * Azure ML Commitment Plans Management Client
 * These APIs allow end users to operate on Azure Machine Learning Commitment Plans resources and their child Commitment Association resources. They support CRUD operations for commitment plans, get and list operations for commitment associations, moving commitment associations between commitment plans, and retrieving commitment plan usage history.
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISkuRestrictions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISkuRestrictions::OAISkuRestrictions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISkuRestrictions::OAISkuRestrictions() {
    this->initializeModel();
}

OAISkuRestrictions::~OAISkuRestrictions() {}

void OAISkuRestrictions::initializeModel() {

    m_reason_code_isSet = false;
    m_reason_code_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAISkuRestrictions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISkuRestrictions::fromJsonObject(QJsonObject json) {

    m_reason_code_isValid = ::OpenAPI::fromJsonValue(m_reason_code, json[QString("reasonCode")]);
    m_reason_code_isSet = !json[QString("reasonCode")].isNull() && m_reason_code_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAISkuRestrictions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISkuRestrictions::asJsonObject() const {
    QJsonObject obj;
    if (m_reason_code_isSet) {
        obj.insert(QString("reasonCode"), ::OpenAPI::toJsonValue(m_reason_code));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QString OAISkuRestrictions::getReasonCode() const {
    return m_reason_code;
}
void OAISkuRestrictions::setReasonCode(const QString &reason_code) {
    m_reason_code = reason_code;
    m_reason_code_isSet = true;
}

bool OAISkuRestrictions::is_reason_code_Set() const{
    return m_reason_code_isSet;
}

bool OAISkuRestrictions::is_reason_code_Valid() const{
    return m_reason_code_isValid;
}

QString OAISkuRestrictions::getType() const {
    return m_type;
}
void OAISkuRestrictions::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISkuRestrictions::is_type_Set() const{
    return m_type_isSet;
}

bool OAISkuRestrictions::is_type_Valid() const{
    return m_type_isValid;
}

QList<QString> OAISkuRestrictions::getValues() const {
    return m_values;
}
void OAISkuRestrictions::setValues(const QList<QString> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAISkuRestrictions::is_values_Set() const{
    return m_values_isSet;
}

bool OAISkuRestrictions::is_values_Valid() const{
    return m_values_isValid;
}

bool OAISkuRestrictions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_reason_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISkuRestrictions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
