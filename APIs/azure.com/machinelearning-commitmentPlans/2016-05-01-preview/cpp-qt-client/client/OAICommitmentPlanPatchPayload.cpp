/**
 * Azure ML Commitment Plans Management Client
 * These APIs allow end users to operate on Azure Machine Learning Commitment Plans resources and their child Commitment Association resources. They support CRUD operations for commitment plans, get and list operations for commitment associations, moving commitment associations between commitment plans, and retrieving commitment plan usage history.
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommitmentPlanPatchPayload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommitmentPlanPatchPayload::OAICommitmentPlanPatchPayload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommitmentPlanPatchPayload::OAICommitmentPlanPatchPayload() {
    this->initializeModel();
}

OAICommitmentPlanPatchPayload::~OAICommitmentPlanPatchPayload() {}

void OAICommitmentPlanPatchPayload::initializeModel() {

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICommitmentPlanPatchPayload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommitmentPlanPatchPayload::fromJsonObject(QJsonObject json) {

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICommitmentPlanPatchPayload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommitmentPlanPatchPayload::asJsonObject() const {
    QJsonObject obj;
    if (m_sku.isSet()) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAIResourceSku OAICommitmentPlanPatchPayload::getSku() const {
    return m_sku;
}
void OAICommitmentPlanPatchPayload::setSku(const OAIResourceSku &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAICommitmentPlanPatchPayload::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAICommitmentPlanPatchPayload::is_sku_Valid() const{
    return m_sku_isValid;
}

QMap<QString, QString> OAICommitmentPlanPatchPayload::getTags() const {
    return m_tags;
}
void OAICommitmentPlanPatchPayload::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICommitmentPlanPatchPayload::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICommitmentPlanPatchPayload::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICommitmentPlanPatchPayload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sku.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommitmentPlanPatchPayload::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
