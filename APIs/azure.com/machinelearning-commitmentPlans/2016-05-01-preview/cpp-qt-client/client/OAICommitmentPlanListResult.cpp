/**
 * Azure ML Commitment Plans Management Client
 * These APIs allow end users to operate on Azure Machine Learning Commitment Plans resources and their child Commitment Association resources. They support CRUD operations for commitment plans, get and list operations for commitment associations, moving commitment associations between commitment plans, and retrieving commitment plan usage history.
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommitmentPlanListResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommitmentPlanListResult::OAICommitmentPlanListResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommitmentPlanListResult::OAICommitmentPlanListResult() {
    this->initializeModel();
}

OAICommitmentPlanListResult::~OAICommitmentPlanListResult() {}

void OAICommitmentPlanListResult::initializeModel() {

    m_next_link_isSet = false;
    m_next_link_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAICommitmentPlanListResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommitmentPlanListResult::fromJsonObject(QJsonObject json) {

    m_next_link_isValid = ::OpenAPI::fromJsonValue(m_next_link, json[QString("nextLink")]);
    m_next_link_isSet = !json[QString("nextLink")].isNull() && m_next_link_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAICommitmentPlanListResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommitmentPlanListResult::asJsonObject() const {
    QJsonObject obj;
    if (m_next_link_isSet) {
        obj.insert(QString("nextLink"), ::OpenAPI::toJsonValue(m_next_link));
    }
    if (m_value.size() > 0) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAICommitmentPlanListResult::getNextLink() const {
    return m_next_link;
}
void OAICommitmentPlanListResult::setNextLink(const QString &next_link) {
    m_next_link = next_link;
    m_next_link_isSet = true;
}

bool OAICommitmentPlanListResult::is_next_link_Set() const{
    return m_next_link_isSet;
}

bool OAICommitmentPlanListResult::is_next_link_Valid() const{
    return m_next_link_isValid;
}

QList<OAICommitmentPlan> OAICommitmentPlanListResult::getValue() const {
    return m_value;
}
void OAICommitmentPlanListResult::setValue(const QList<OAICommitmentPlan> &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAICommitmentPlanListResult::is_value_Set() const{
    return m_value_isSet;
}

bool OAICommitmentPlanListResult::is_value_Valid() const{
    return m_value_isValid;
}

bool OAICommitmentPlanListResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommitmentPlanListResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
