/**
 * Azure ML Commitment Plans Management Client
 * These APIs allow end users to operate on Azure Machine Learning Commitment Plans resources and their child Commitment Association resources. They support CRUD operations for commitment plans, get and list operations for commitment associations, moving commitment associations between commitment plans, and retrieving commitment plan usage history.
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperationEntityListResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperationEntityListResult::OAIOperationEntityListResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperationEntityListResult::OAIOperationEntityListResult() {
    this->initializeModel();
}

OAIOperationEntityListResult::~OAIOperationEntityListResult() {}

void OAIOperationEntityListResult::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIOperationEntityListResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOperationEntityListResult::fromJsonObject(QJsonObject json) {

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIOperationEntityListResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOperationEntityListResult::asJsonObject() const {
    QJsonObject obj;
    if (m_value.size() > 0) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QList<OAIOperationEntity> OAIOperationEntityListResult::getValue() const {
    return m_value;
}
void OAIOperationEntityListResult::setValue(const QList<OAIOperationEntity> &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIOperationEntityListResult::is_value_Set() const{
    return m_value_isSet;
}

bool OAIOperationEntityListResult::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIOperationEntityListResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_value.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOperationEntityListResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
