/**
 * Azure ML Commitment Plans Management Client
 * These APIs allow end users to operate on Azure Machine Learning Commitment Plans resources and their child Commitment Association resources. They support CRUD operations for commitment plans, get and list operations for commitment associations, moving commitment associations between commitment plans, and retrieving commitment plan usage history.
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommitmentAssociationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommitmentAssociationProperties::OAICommitmentAssociationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommitmentAssociationProperties::OAICommitmentAssociationProperties() {
    this->initializeModel();
}

OAICommitmentAssociationProperties::~OAICommitmentAssociationProperties() {}

void OAICommitmentAssociationProperties::initializeModel() {

    m_associated_resource_id_isSet = false;
    m_associated_resource_id_isValid = false;

    m_commitment_plan_id_isSet = false;
    m_commitment_plan_id_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;
}

void OAICommitmentAssociationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommitmentAssociationProperties::fromJsonObject(QJsonObject json) {

    m_associated_resource_id_isValid = ::OpenAPI::fromJsonValue(m_associated_resource_id, json[QString("associatedResourceId")]);
    m_associated_resource_id_isSet = !json[QString("associatedResourceId")].isNull() && m_associated_resource_id_isValid;

    m_commitment_plan_id_isValid = ::OpenAPI::fromJsonValue(m_commitment_plan_id, json[QString("commitmentPlanId")]);
    m_commitment_plan_id_isSet = !json[QString("commitmentPlanId")].isNull() && m_commitment_plan_id_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;
}

QString OAICommitmentAssociationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommitmentAssociationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_associated_resource_id_isSet) {
        obj.insert(QString("associatedResourceId"), ::OpenAPI::toJsonValue(m_associated_resource_id));
    }
    if (m_commitment_plan_id_isSet) {
        obj.insert(QString("commitmentPlanId"), ::OpenAPI::toJsonValue(m_commitment_plan_id));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    return obj;
}

QString OAICommitmentAssociationProperties::getAssociatedResourceId() const {
    return m_associated_resource_id;
}
void OAICommitmentAssociationProperties::setAssociatedResourceId(const QString &associated_resource_id) {
    m_associated_resource_id = associated_resource_id;
    m_associated_resource_id_isSet = true;
}

bool OAICommitmentAssociationProperties::is_associated_resource_id_Set() const{
    return m_associated_resource_id_isSet;
}

bool OAICommitmentAssociationProperties::is_associated_resource_id_Valid() const{
    return m_associated_resource_id_isValid;
}

QString OAICommitmentAssociationProperties::getCommitmentPlanId() const {
    return m_commitment_plan_id;
}
void OAICommitmentAssociationProperties::setCommitmentPlanId(const QString &commitment_plan_id) {
    m_commitment_plan_id = commitment_plan_id;
    m_commitment_plan_id_isSet = true;
}

bool OAICommitmentAssociationProperties::is_commitment_plan_id_Set() const{
    return m_commitment_plan_id_isSet;
}

bool OAICommitmentAssociationProperties::is_commitment_plan_id_Valid() const{
    return m_commitment_plan_id_isValid;
}

QDateTime OAICommitmentAssociationProperties::getCreationDate() const {
    return m_creation_date;
}
void OAICommitmentAssociationProperties::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAICommitmentAssociationProperties::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAICommitmentAssociationProperties::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

bool OAICommitmentAssociationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_associated_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commitment_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommitmentAssociationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
