/**
 * Azure ML Commitment Plans Management Client
 * These APIs allow end users to operate on Azure Machine Learning Commitment Plans resources and their child Commitment Association resources. They support CRUD operations for commitment plans, get and list operations for commitment associations, moving commitment associations between commitment plans, and retrieving commitment plan usage history.
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlanUsageHistoryListResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlanUsageHistoryListResult::OAIPlanUsageHistoryListResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlanUsageHistoryListResult::OAIPlanUsageHistoryListResult() {
    this->initializeModel();
}

OAIPlanUsageHistoryListResult::~OAIPlanUsageHistoryListResult() {}

void OAIPlanUsageHistoryListResult::initializeModel() {

    m_next_link_isSet = false;
    m_next_link_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIPlanUsageHistoryListResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlanUsageHistoryListResult::fromJsonObject(QJsonObject json) {

    m_next_link_isValid = ::OpenAPI::fromJsonValue(m_next_link, json[QString("nextLink")]);
    m_next_link_isSet = !json[QString("nextLink")].isNull() && m_next_link_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIPlanUsageHistoryListResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlanUsageHistoryListResult::asJsonObject() const {
    QJsonObject obj;
    if (m_next_link_isSet) {
        obj.insert(QString("nextLink"), ::OpenAPI::toJsonValue(m_next_link));
    }
    if (m_value.size() > 0) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIPlanUsageHistoryListResult::getNextLink() const {
    return m_next_link;
}
void OAIPlanUsageHistoryListResult::setNextLink(const QString &next_link) {
    m_next_link = next_link;
    m_next_link_isSet = true;
}

bool OAIPlanUsageHistoryListResult::is_next_link_Set() const{
    return m_next_link_isSet;
}

bool OAIPlanUsageHistoryListResult::is_next_link_Valid() const{
    return m_next_link_isValid;
}

QList<OAIPlanUsageHistory> OAIPlanUsageHistoryListResult::getValue() const {
    return m_value;
}
void OAIPlanUsageHistoryListResult::setValue(const QList<OAIPlanUsageHistory> &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIPlanUsageHistoryListResult::is_value_Set() const{
    return m_value_isSet;
}

bool OAIPlanUsageHistoryListResult::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIPlanUsageHistoryListResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlanUsageHistoryListResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
