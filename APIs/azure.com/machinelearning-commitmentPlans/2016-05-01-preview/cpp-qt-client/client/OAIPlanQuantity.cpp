/**
 * Azure ML Commitment Plans Management Client
 * These APIs allow end users to operate on Azure Machine Learning Commitment Plans resources and their child Commitment Association resources. They support CRUD operations for commitment plans, get and list operations for commitment associations, moving commitment associations between commitment plans, and retrieving commitment plan usage history.
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlanQuantity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlanQuantity::OAIPlanQuantity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlanQuantity::OAIPlanQuantity() {
    this->initializeModel();
}

OAIPlanQuantity::~OAIPlanQuantity() {}

void OAIPlanQuantity::initializeModel() {

    m_allowance_isSet = false;
    m_allowance_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_included_quantity_meter_isSet = false;
    m_included_quantity_meter_isValid = false;

    m_overage_meter_isSet = false;
    m_overage_meter_isValid = false;
}

void OAIPlanQuantity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlanQuantity::fromJsonObject(QJsonObject json) {

    m_allowance_isValid = ::OpenAPI::fromJsonValue(m_allowance, json[QString("allowance")]);
    m_allowance_isSet = !json[QString("allowance")].isNull() && m_allowance_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_included_quantity_meter_isValid = ::OpenAPI::fromJsonValue(m_included_quantity_meter, json[QString("includedQuantityMeter")]);
    m_included_quantity_meter_isSet = !json[QString("includedQuantityMeter")].isNull() && m_included_quantity_meter_isValid;

    m_overage_meter_isValid = ::OpenAPI::fromJsonValue(m_overage_meter, json[QString("overageMeter")]);
    m_overage_meter_isSet = !json[QString("overageMeter")].isNull() && m_overage_meter_isValid;
}

QString OAIPlanQuantity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlanQuantity::asJsonObject() const {
    QJsonObject obj;
    if (m_allowance_isSet) {
        obj.insert(QString("allowance"), ::OpenAPI::toJsonValue(m_allowance));
    }
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_included_quantity_meter_isSet) {
        obj.insert(QString("includedQuantityMeter"), ::OpenAPI::toJsonValue(m_included_quantity_meter));
    }
    if (m_overage_meter_isSet) {
        obj.insert(QString("overageMeter"), ::OpenAPI::toJsonValue(m_overage_meter));
    }
    return obj;
}

double OAIPlanQuantity::getAllowance() const {
    return m_allowance;
}
void OAIPlanQuantity::setAllowance(const double &allowance) {
    m_allowance = allowance;
    m_allowance_isSet = true;
}

bool OAIPlanQuantity::is_allowance_Set() const{
    return m_allowance_isSet;
}

bool OAIPlanQuantity::is_allowance_Valid() const{
    return m_allowance_isValid;
}

double OAIPlanQuantity::getAmount() const {
    return m_amount;
}
void OAIPlanQuantity::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIPlanQuantity::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIPlanQuantity::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIPlanQuantity::getIncludedQuantityMeter() const {
    return m_included_quantity_meter;
}
void OAIPlanQuantity::setIncludedQuantityMeter(const QString &included_quantity_meter) {
    m_included_quantity_meter = included_quantity_meter;
    m_included_quantity_meter_isSet = true;
}

bool OAIPlanQuantity::is_included_quantity_meter_Set() const{
    return m_included_quantity_meter_isSet;
}

bool OAIPlanQuantity::is_included_quantity_meter_Valid() const{
    return m_included_quantity_meter_isValid;
}

QString OAIPlanQuantity::getOverageMeter() const {
    return m_overage_meter;
}
void OAIPlanQuantity::setOverageMeter(const QString &overage_meter) {
    m_overage_meter = overage_meter;
    m_overage_meter_isSet = true;
}

bool OAIPlanQuantity::is_overage_meter_Set() const{
    return m_overage_meter_isSet;
}

bool OAIPlanQuantity::is_overage_meter_Valid() const{
    return m_overage_meter_isValid;
}

bool OAIPlanQuantity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_quantity_meter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overage_meter_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlanQuantity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
