/**
 * Azure ML Commitment Plans Management Client
 * These APIs allow end users to operate on Azure Machine Learning Commitment Plans resources and their child Commitment Association resources. They support CRUD operations for commitment plans, get and list operations for commitment associations, moving commitment associations between commitment plans, and retrieving commitment plan usage history.
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICommitmentAssociationsApi_H
#define OAI_OAICommitmentAssociationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICommitmentAssociation.h"
#include "OAICommitmentAssociationListResult.h"
#include "OAIMoveCommitmentAssociationRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICommitmentAssociationsApi : public QObject {
    Q_OBJECT

public:
    OAICommitmentAssociationsApi(const int timeOut = 0);
    ~OAICommitmentAssociationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  commitment_plan_name QString [required]
    * @param[in]  commitment_association_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void commitmentAssociationsGet(const QString &subscription_id, const QString &resource_group_name, const QString &commitment_plan_name, const QString &commitment_association_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  commitment_plan_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  skip_token QString [optional]
    */
    virtual void commitmentAssociationsList(const QString &subscription_id, const QString &resource_group_name, const QString &commitment_plan_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &skip_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  commitment_plan_name QString [required]
    * @param[in]  commitment_association_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  move_payload OAIMoveCommitmentAssociationRequest [required]
    */
    virtual void commitmentAssociationsMove(const QString &subscription_id, const QString &resource_group_name, const QString &commitment_plan_name, const QString &commitment_association_name, const QString &api_version, const OAIMoveCommitmentAssociationRequest &move_payload);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void commitmentAssociationsGetCallback(OAIHttpRequestWorker *worker);
    void commitmentAssociationsListCallback(OAIHttpRequestWorker *worker);
    void commitmentAssociationsMoveCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void commitmentAssociationsGetSignal(OAICommitmentAssociation summary);
    void commitmentAssociationsListSignal(OAICommitmentAssociationListResult summary);
    void commitmentAssociationsMoveSignal(OAICommitmentAssociation summary);


    void commitmentAssociationsGetSignalFull(OAIHttpRequestWorker *worker, OAICommitmentAssociation summary);
    void commitmentAssociationsListSignalFull(OAIHttpRequestWorker *worker, OAICommitmentAssociationListResult summary);
    void commitmentAssociationsMoveSignalFull(OAIHttpRequestWorker *worker, OAICommitmentAssociation summary);

    Q_DECL_DEPRECATED_X("Use commitmentAssociationsGetSignalError() instead")
    void commitmentAssociationsGetSignalE(OAICommitmentAssociation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void commitmentAssociationsGetSignalError(OAICommitmentAssociation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commitmentAssociationsListSignalError() instead")
    void commitmentAssociationsListSignalE(OAICommitmentAssociationListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void commitmentAssociationsListSignalError(OAICommitmentAssociationListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commitmentAssociationsMoveSignalError() instead")
    void commitmentAssociationsMoveSignalE(OAICommitmentAssociation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void commitmentAssociationsMoveSignalError(OAICommitmentAssociation summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use commitmentAssociationsGetSignalErrorFull() instead")
    void commitmentAssociationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void commitmentAssociationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commitmentAssociationsListSignalErrorFull() instead")
    void commitmentAssociationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void commitmentAssociationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commitmentAssociationsMoveSignalErrorFull() instead")
    void commitmentAssociationsMoveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void commitmentAssociationsMoveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
