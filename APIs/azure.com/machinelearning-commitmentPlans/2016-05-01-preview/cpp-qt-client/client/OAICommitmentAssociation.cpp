/**
 * Azure ML Commitment Plans Management Client
 * These APIs allow end users to operate on Azure Machine Learning Commitment Plans resources and their child Commitment Association resources. They support CRUD operations for commitment plans, get and list operations for commitment associations, moving commitment associations between commitment plans, and retrieving commitment plan usage history.
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommitmentAssociation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommitmentAssociation::OAICommitmentAssociation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommitmentAssociation::OAICommitmentAssociation() {
    this->initializeModel();
}

OAICommitmentAssociation::~OAICommitmentAssociation() {}

void OAICommitmentAssociation::initializeModel() {

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICommitmentAssociation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommitmentAssociation::fromJsonObject(QJsonObject json) {

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICommitmentAssociation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommitmentAssociation::asJsonObject() const {
    QJsonObject obj;
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAICommitmentAssociation::getEtag() const {
    return m_etag;
}
void OAICommitmentAssociation::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAICommitmentAssociation::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAICommitmentAssociation::is_etag_Valid() const{
    return m_etag_isValid;
}

OAICommitmentAssociationProperties OAICommitmentAssociation::getProperties() const {
    return m_properties;
}
void OAICommitmentAssociation::setProperties(const OAICommitmentAssociationProperties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAICommitmentAssociation::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAICommitmentAssociation::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAICommitmentAssociation::getId() const {
    return m_id;
}
void OAICommitmentAssociation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICommitmentAssociation::is_id_Set() const{
    return m_id_isSet;
}

bool OAICommitmentAssociation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICommitmentAssociation::getLocation() const {
    return m_location;
}
void OAICommitmentAssociation::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAICommitmentAssociation::is_location_Set() const{
    return m_location_isSet;
}

bool OAICommitmentAssociation::is_location_Valid() const{
    return m_location_isValid;
}

QString OAICommitmentAssociation::getName() const {
    return m_name;
}
void OAICommitmentAssociation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICommitmentAssociation::is_name_Set() const{
    return m_name_isSet;
}

bool OAICommitmentAssociation::is_name_Valid() const{
    return m_name_isValid;
}

QMap<QString, QString> OAICommitmentAssociation::getTags() const {
    return m_tags;
}
void OAICommitmentAssociation::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICommitmentAssociation::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICommitmentAssociation::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICommitmentAssociation::getType() const {
    return m_type;
}
void OAICommitmentAssociation::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICommitmentAssociation::is_type_Set() const{
    return m_type_isSet;
}

bool OAICommitmentAssociation::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICommitmentAssociation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommitmentAssociation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_location_isValid && true;
}

} // namespace OpenAPI
