/**
 * Azure ML Commitment Plans Management Client
 * These APIs allow end users to operate on Azure Machine Learning Commitment Plans resources and their child Commitment Association resources. They support CRUD operations for commitment plans, get and list operations for commitment associations, moving commitment associations between commitment plans, and retrieving commitment plan usage history.
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMoveCommitmentAssociationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMoveCommitmentAssociationRequest::OAIMoveCommitmentAssociationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMoveCommitmentAssociationRequest::OAIMoveCommitmentAssociationRequest() {
    this->initializeModel();
}

OAIMoveCommitmentAssociationRequest::~OAIMoveCommitmentAssociationRequest() {}

void OAIMoveCommitmentAssociationRequest::initializeModel() {

    m_destination_plan_id_isSet = false;
    m_destination_plan_id_isValid = false;
}

void OAIMoveCommitmentAssociationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMoveCommitmentAssociationRequest::fromJsonObject(QJsonObject json) {

    m_destination_plan_id_isValid = ::OpenAPI::fromJsonValue(m_destination_plan_id, json[QString("destinationPlanId")]);
    m_destination_plan_id_isSet = !json[QString("destinationPlanId")].isNull() && m_destination_plan_id_isValid;
}

QString OAIMoveCommitmentAssociationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMoveCommitmentAssociationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_plan_id_isSet) {
        obj.insert(QString("destinationPlanId"), ::OpenAPI::toJsonValue(m_destination_plan_id));
    }
    return obj;
}

QString OAIMoveCommitmentAssociationRequest::getDestinationPlanId() const {
    return m_destination_plan_id;
}
void OAIMoveCommitmentAssociationRequest::setDestinationPlanId(const QString &destination_plan_id) {
    m_destination_plan_id = destination_plan_id;
    m_destination_plan_id_isSet = true;
}

bool OAIMoveCommitmentAssociationRequest::is_destination_plan_id_Set() const{
    return m_destination_plan_id_isSet;
}

bool OAIMoveCommitmentAssociationRequest::is_destination_plan_id_Valid() const{
    return m_destination_plan_id_isValid;
}

bool OAIMoveCommitmentAssociationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMoveCommitmentAssociationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
