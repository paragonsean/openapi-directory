/**
 * Azure ML Commitment Plans Management Client
 * These APIs allow end users to operate on Azure Machine Learning Commitment Plans resources and their child Commitment Association resources. They support CRUD operations for commitment plans, get and list operations for commitment associations, moving commitment associations between commitment plans, and retrieving commitment plan usage history.
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICommitmentPlanProperties.h
 *
 * Properties of an Azure ML commitment plan.
 */

#ifndef OAICommitmentPlanProperties_H
#define OAICommitmentPlanProperties_H

#include <QJsonObject>

#include "OAIPlanQuantity.h"
#include <QDateTime>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPlanQuantity;

class OAICommitmentPlanProperties : public OAIObject {
public:
    OAICommitmentPlanProperties();
    OAICommitmentPlanProperties(QString json);
    ~OAICommitmentPlanProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isChargeForOverage() const;
    void setChargeForOverage(const bool &charge_for_overage);
    bool is_charge_for_overage_Set() const;
    bool is_charge_for_overage_Valid() const;

    bool isChargeForPlan() const;
    void setChargeForPlan(const bool &charge_for_plan);
    bool is_charge_for_plan_Set() const;
    bool is_charge_for_plan_Valid() const;

    QDateTime getCreationDate() const;
    void setCreationDate(const QDateTime &creation_date);
    bool is_creation_date_Set() const;
    bool is_creation_date_Valid() const;

    QMap<QString, OAIPlanQuantity> getIncludedQuantities() const;
    void setIncludedQuantities(const QMap<QString, OAIPlanQuantity> &included_quantities);
    bool is_included_quantities_Set() const;
    bool is_included_quantities_Valid() const;

    qint32 getMaxAssociationLimit() const;
    void setMaxAssociationLimit(const qint32 &max_association_limit);
    bool is_max_association_limit_Set() const;
    bool is_max_association_limit_Valid() const;

    qint32 getMaxCapacityLimit() const;
    void setMaxCapacityLimit(const qint32 &max_capacity_limit);
    bool is_max_capacity_limit_Set() const;
    bool is_max_capacity_limit_Valid() const;

    qint32 getMinCapacityLimit() const;
    void setMinCapacityLimit(const qint32 &min_capacity_limit);
    bool is_min_capacity_limit_Set() const;
    bool is_min_capacity_limit_Valid() const;

    QString getPlanMeter() const;
    void setPlanMeter(const QString &plan_meter);
    bool is_plan_meter_Set() const;
    bool is_plan_meter_Valid() const;

    qint32 getRefillFrequencyInDays() const;
    void setRefillFrequencyInDays(const qint32 &refill_frequency_in_days);
    bool is_refill_frequency_in_days_Set() const;
    bool is_refill_frequency_in_days_Valid() const;

    bool isSuspendPlanOnOverage() const;
    void setSuspendPlanOnOverage(const bool &suspend_plan_on_overage);
    bool is_suspend_plan_on_overage_Set() const;
    bool is_suspend_plan_on_overage_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_charge_for_overage;
    bool m_charge_for_overage_isSet;
    bool m_charge_for_overage_isValid;

    bool m_charge_for_plan;
    bool m_charge_for_plan_isSet;
    bool m_charge_for_plan_isValid;

    QDateTime m_creation_date;
    bool m_creation_date_isSet;
    bool m_creation_date_isValid;

    QMap<QString, OAIPlanQuantity> m_included_quantities;
    bool m_included_quantities_isSet;
    bool m_included_quantities_isValid;

    qint32 m_max_association_limit;
    bool m_max_association_limit_isSet;
    bool m_max_association_limit_isValid;

    qint32 m_max_capacity_limit;
    bool m_max_capacity_limit_isSet;
    bool m_max_capacity_limit_isValid;

    qint32 m_min_capacity_limit;
    bool m_min_capacity_limit_isSet;
    bool m_min_capacity_limit_isValid;

    QString m_plan_meter;
    bool m_plan_meter_isSet;
    bool m_plan_meter_isValid;

    qint32 m_refill_frequency_in_days;
    bool m_refill_frequency_in_days_isSet;
    bool m_refill_frequency_in_days_isValid;

    bool m_suspend_plan_on_overage;
    bool m_suspend_plan_on_overage_isSet;
    bool m_suspend_plan_on_overage_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICommitmentPlanProperties)

#endif // OAICommitmentPlanProperties_H
