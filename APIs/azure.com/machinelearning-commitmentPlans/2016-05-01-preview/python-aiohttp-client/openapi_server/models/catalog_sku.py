# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sku_capability import SkuCapability
from openapi_server.models.sku_capacity import SkuCapacity
from openapi_server.models.sku_cost import SkuCost
from openapi_server.models.sku_restrictions import SkuRestrictions
from openapi_server import util


class CatalogSku(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capabilities: List[SkuCapability]=None, capacity: SkuCapacity=None, costs: List[SkuCost]=None, locations: List[str]=None, name: str=None, resource_type: str=None, restrictions: List[SkuRestrictions]=None, tier: str=None):
        """CatalogSku - a model defined in OpenAPI

        :param capabilities: The capabilities of this CatalogSku.
        :param capacity: The capacity of this CatalogSku.
        :param costs: The costs of this CatalogSku.
        :param locations: The locations of this CatalogSku.
        :param name: The name of this CatalogSku.
        :param resource_type: The resource_type of this CatalogSku.
        :param restrictions: The restrictions of this CatalogSku.
        :param tier: The tier of this CatalogSku.
        """
        self.openapi_types = {
            'capabilities': List[SkuCapability],
            'capacity': SkuCapacity,
            'costs': List[SkuCost],
            'locations': List[str],
            'name': str,
            'resource_type': str,
            'restrictions': List[SkuRestrictions],
            'tier': str
        }

        self.attribute_map = {
            'capabilities': 'capabilities',
            'capacity': 'capacity',
            'costs': 'costs',
            'locations': 'locations',
            'name': 'name',
            'resource_type': 'resourceType',
            'restrictions': 'restrictions',
            'tier': 'tier'
        }

        self._capabilities = capabilities
        self._capacity = capacity
        self._costs = costs
        self._locations = locations
        self._name = name
        self._resource_type = resource_type
        self._restrictions = restrictions
        self._tier = tier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogSku':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CatalogSku of this CatalogSku.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capabilities(self):
        """Gets the capabilities of this CatalogSku.

        The capability information for the specified SKU.

        :return: The capabilities of this CatalogSku.
        :rtype: List[SkuCapability]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this CatalogSku.

        The capability information for the specified SKU.

        :param capabilities: The capabilities of this CatalogSku.
        :type capabilities: List[SkuCapability]
        """

        self._capabilities = capabilities

    @property
    def capacity(self):
        """Gets the capacity of this CatalogSku.


        :return: The capacity of this CatalogSku.
        :rtype: SkuCapacity
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this CatalogSku.


        :param capacity: The capacity of this CatalogSku.
        :type capacity: SkuCapacity
        """

        self._capacity = capacity

    @property
    def costs(self):
        """Gets the costs of this CatalogSku.

        The cost information for the specified SKU.

        :return: The costs of this CatalogSku.
        :rtype: List[SkuCost]
        """
        return self._costs

    @costs.setter
    def costs(self, costs):
        """Sets the costs of this CatalogSku.

        The cost information for the specified SKU.

        :param costs: The costs of this CatalogSku.
        :type costs: List[SkuCost]
        """

        self._costs = costs

    @property
    def locations(self):
        """Gets the locations of this CatalogSku.

        Regions where the SKU is available.

        :return: The locations of this CatalogSku.
        :rtype: List[str]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this CatalogSku.

        Regions where the SKU is available.

        :param locations: The locations of this CatalogSku.
        :type locations: List[str]
        """

        self._locations = locations

    @property
    def name(self):
        """Gets the name of this CatalogSku.

        SKU name

        :return: The name of this CatalogSku.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CatalogSku.

        SKU name

        :param name: The name of this CatalogSku.
        :type name: str
        """

        self._name = name

    @property
    def resource_type(self):
        """Gets the resource_type of this CatalogSku.

        Resource type name

        :return: The resource_type of this CatalogSku.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this CatalogSku.

        Resource type name

        :param resource_type: The resource_type of this CatalogSku.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def restrictions(self):
        """Gets the restrictions of this CatalogSku.

        Restrictions which would prevent a SKU from being used. This is empty if there are no restrictions.

        :return: The restrictions of this CatalogSku.
        :rtype: List[SkuRestrictions]
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this CatalogSku.

        Restrictions which would prevent a SKU from being used. This is empty if there are no restrictions.

        :param restrictions: The restrictions of this CatalogSku.
        :type restrictions: List[SkuRestrictions]
        """

        self._restrictions = restrictions

    @property
    def tier(self):
        """Gets the tier of this CatalogSku.

        SKU tier

        :return: The tier of this CatalogSku.
        :rtype: str
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this CatalogSku.

        SKU tier

        :param tier: The tier of this CatalogSku.
        :type tier: str
        """

        self._tier = tier
