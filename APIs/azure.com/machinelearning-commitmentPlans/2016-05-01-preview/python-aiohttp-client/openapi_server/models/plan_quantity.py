# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PlanQuantity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowance: float=None, amount: float=None, included_quantity_meter: str=None, overage_meter: str=None):
        """PlanQuantity - a model defined in OpenAPI

        :param allowance: The allowance of this PlanQuantity.
        :param amount: The amount of this PlanQuantity.
        :param included_quantity_meter: The included_quantity_meter of this PlanQuantity.
        :param overage_meter: The overage_meter of this PlanQuantity.
        """
        self.openapi_types = {
            'allowance': float,
            'amount': float,
            'included_quantity_meter': str,
            'overage_meter': str
        }

        self.attribute_map = {
            'allowance': 'allowance',
            'amount': 'amount',
            'included_quantity_meter': 'includedQuantityMeter',
            'overage_meter': 'overageMeter'
        }

        self._allowance = allowance
        self._amount = amount
        self._included_quantity_meter = included_quantity_meter
        self._overage_meter = overage_meter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlanQuantity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlanQuantity of this PlanQuantity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowance(self):
        """Gets the allowance of this PlanQuantity.

        The quantity added to the commitment plan at an interval specified by its allowance frequency.

        :return: The allowance of this PlanQuantity.
        :rtype: float
        """
        return self._allowance

    @allowance.setter
    def allowance(self, allowance):
        """Sets the allowance of this PlanQuantity.

        The quantity added to the commitment plan at an interval specified by its allowance frequency.

        :param allowance: The allowance of this PlanQuantity.
        :type allowance: float
        """

        self._allowance = allowance

    @property
    def amount(self):
        """Gets the amount of this PlanQuantity.

        The quantity available to the plan the last time usage was calculated.

        :return: The amount of this PlanQuantity.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PlanQuantity.

        The quantity available to the plan the last time usage was calculated.

        :param amount: The amount of this PlanQuantity.
        :type amount: float
        """

        self._amount = amount

    @property
    def included_quantity_meter(self):
        """Gets the included_quantity_meter of this PlanQuantity.

        The Azure meter for usage against included quantities.

        :return: The included_quantity_meter of this PlanQuantity.
        :rtype: str
        """
        return self._included_quantity_meter

    @included_quantity_meter.setter
    def included_quantity_meter(self, included_quantity_meter):
        """Sets the included_quantity_meter of this PlanQuantity.

        The Azure meter for usage against included quantities.

        :param included_quantity_meter: The included_quantity_meter of this PlanQuantity.
        :type included_quantity_meter: str
        """

        self._included_quantity_meter = included_quantity_meter

    @property
    def overage_meter(self):
        """Gets the overage_meter of this PlanQuantity.

        The Azure meter for usage which exceeds included quantities.

        :return: The overage_meter of this PlanQuantity.
        :rtype: str
        """
        return self._overage_meter

    @overage_meter.setter
    def overage_meter(self, overage_meter):
        """Sets the overage_meter of this PlanQuantity.

        The Azure meter for usage which exceeds included quantities.

        :param overage_meter: The overage_meter of this PlanQuantity.
        :type overage_meter: str
        """

        self._overage_meter = overage_meter
