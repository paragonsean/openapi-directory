# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PlanUsageHistory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, plan_deletion_overage: Dict[str, float]=None, plan_migration_overage: Dict[str, float]=None, plan_quantities_after_usage: Dict[str, float]=None, plan_quantities_before_usage: Dict[str, float]=None, plan_usage_overage: Dict[str, float]=None, usage: Dict[str, float]=None, usage_date: datetime=None):
        """PlanUsageHistory - a model defined in OpenAPI

        :param plan_deletion_overage: The plan_deletion_overage of this PlanUsageHistory.
        :param plan_migration_overage: The plan_migration_overage of this PlanUsageHistory.
        :param plan_quantities_after_usage: The plan_quantities_after_usage of this PlanUsageHistory.
        :param plan_quantities_before_usage: The plan_quantities_before_usage of this PlanUsageHistory.
        :param plan_usage_overage: The plan_usage_overage of this PlanUsageHistory.
        :param usage: The usage of this PlanUsageHistory.
        :param usage_date: The usage_date of this PlanUsageHistory.
        """
        self.openapi_types = {
            'plan_deletion_overage': Dict[str, float],
            'plan_migration_overage': Dict[str, float],
            'plan_quantities_after_usage': Dict[str, float],
            'plan_quantities_before_usage': Dict[str, float],
            'plan_usage_overage': Dict[str, float],
            'usage': Dict[str, float],
            'usage_date': datetime
        }

        self.attribute_map = {
            'plan_deletion_overage': 'planDeletionOverage',
            'plan_migration_overage': 'planMigrationOverage',
            'plan_quantities_after_usage': 'planQuantitiesAfterUsage',
            'plan_quantities_before_usage': 'planQuantitiesBeforeUsage',
            'plan_usage_overage': 'planUsageOverage',
            'usage': 'usage',
            'usage_date': 'usageDate'
        }

        self._plan_deletion_overage = plan_deletion_overage
        self._plan_migration_overage = plan_migration_overage
        self._plan_quantities_after_usage = plan_quantities_after_usage
        self._plan_quantities_before_usage = plan_quantities_before_usage
        self._plan_usage_overage = plan_usage_overage
        self._usage = usage
        self._usage_date = usage_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlanUsageHistory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlanUsageHistory of this PlanUsageHistory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def plan_deletion_overage(self):
        """Gets the plan_deletion_overage of this PlanUsageHistory.

        Overage incurred as a result of deleting a commitment plan.

        :return: The plan_deletion_overage of this PlanUsageHistory.
        :rtype: Dict[str, float]
        """
        return self._plan_deletion_overage

    @plan_deletion_overage.setter
    def plan_deletion_overage(self, plan_deletion_overage):
        """Sets the plan_deletion_overage of this PlanUsageHistory.

        Overage incurred as a result of deleting a commitment plan.

        :param plan_deletion_overage: The plan_deletion_overage of this PlanUsageHistory.
        :type plan_deletion_overage: Dict[str, float]
        """

        self._plan_deletion_overage = plan_deletion_overage

    @property
    def plan_migration_overage(self):
        """Gets the plan_migration_overage of this PlanUsageHistory.

        Overage incurred as a result of migrating a commitment plan from one SKU to another.

        :return: The plan_migration_overage of this PlanUsageHistory.
        :rtype: Dict[str, float]
        """
        return self._plan_migration_overage

    @plan_migration_overage.setter
    def plan_migration_overage(self, plan_migration_overage):
        """Sets the plan_migration_overage of this PlanUsageHistory.

        Overage incurred as a result of migrating a commitment plan from one SKU to another.

        :param plan_migration_overage: The plan_migration_overage of this PlanUsageHistory.
        :type plan_migration_overage: Dict[str, float]
        """

        self._plan_migration_overage = plan_migration_overage

    @property
    def plan_quantities_after_usage(self):
        """Gets the plan_quantities_after_usage of this PlanUsageHistory.

        Included quantities remaining after usage against the commitment plan's associated resources was calculated.

        :return: The plan_quantities_after_usage of this PlanUsageHistory.
        :rtype: Dict[str, float]
        """
        return self._plan_quantities_after_usage

    @plan_quantities_after_usage.setter
    def plan_quantities_after_usage(self, plan_quantities_after_usage):
        """Sets the plan_quantities_after_usage of this PlanUsageHistory.

        Included quantities remaining after usage against the commitment plan's associated resources was calculated.

        :param plan_quantities_after_usage: The plan_quantities_after_usage of this PlanUsageHistory.
        :type plan_quantities_after_usage: Dict[str, float]
        """

        self._plan_quantities_after_usage = plan_quantities_after_usage

    @property
    def plan_quantities_before_usage(self):
        """Gets the plan_quantities_before_usage of this PlanUsageHistory.

        Included quantities remaining before usage against the commitment plan's associated resources was calculated.

        :return: The plan_quantities_before_usage of this PlanUsageHistory.
        :rtype: Dict[str, float]
        """
        return self._plan_quantities_before_usage

    @plan_quantities_before_usage.setter
    def plan_quantities_before_usage(self, plan_quantities_before_usage):
        """Sets the plan_quantities_before_usage of this PlanUsageHistory.

        Included quantities remaining before usage against the commitment plan's associated resources was calculated.

        :param plan_quantities_before_usage: The plan_quantities_before_usage of this PlanUsageHistory.
        :type plan_quantities_before_usage: Dict[str, float]
        """

        self._plan_quantities_before_usage = plan_quantities_before_usage

    @property
    def plan_usage_overage(self):
        """Gets the plan_usage_overage of this PlanUsageHistory.

        Usage against the commitment plan's associated resources which was not covered by included quantities and is therefore overage.

        :return: The plan_usage_overage of this PlanUsageHistory.
        :rtype: Dict[str, float]
        """
        return self._plan_usage_overage

    @plan_usage_overage.setter
    def plan_usage_overage(self, plan_usage_overage):
        """Sets the plan_usage_overage of this PlanUsageHistory.

        Usage against the commitment plan's associated resources which was not covered by included quantities and is therefore overage.

        :param plan_usage_overage: The plan_usage_overage of this PlanUsageHistory.
        :type plan_usage_overage: Dict[str, float]
        """

        self._plan_usage_overage = plan_usage_overage

    @property
    def usage(self):
        """Gets the usage of this PlanUsageHistory.

        Usage against the commitment plan's associated resources.

        :return: The usage of this PlanUsageHistory.
        :rtype: Dict[str, float]
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this PlanUsageHistory.

        Usage against the commitment plan's associated resources.

        :param usage: The usage of this PlanUsageHistory.
        :type usage: Dict[str, float]
        """

        self._usage = usage

    @property
    def usage_date(self):
        """Gets the usage_date of this PlanUsageHistory.

        The date of usage, in ISO 8601 format.

        :return: The usage_date of this PlanUsageHistory.
        :rtype: datetime
        """
        return self._usage_date

    @usage_date.setter
    def usage_date(self, usage_date):
        """Sets the usage_date of this PlanUsageHistory.

        The date of usage, in ISO 8601 format.

        :param usage_date: The usage_date of this PlanUsageHistory.
        :type usage_date: datetime
        """

        self._usage_date = usage_date
