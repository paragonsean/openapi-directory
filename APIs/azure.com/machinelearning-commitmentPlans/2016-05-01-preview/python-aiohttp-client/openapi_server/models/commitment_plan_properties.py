# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.plan_quantity import PlanQuantity
from openapi_server import util


class CommitmentPlanProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, charge_for_overage: bool=None, charge_for_plan: bool=None, creation_date: datetime=None, included_quantities: Dict[str, PlanQuantity]=None, max_association_limit: int=None, max_capacity_limit: int=None, min_capacity_limit: int=None, plan_meter: str=None, refill_frequency_in_days: int=None, suspend_plan_on_overage: bool=None):
        """CommitmentPlanProperties - a model defined in OpenAPI

        :param charge_for_overage: The charge_for_overage of this CommitmentPlanProperties.
        :param charge_for_plan: The charge_for_plan of this CommitmentPlanProperties.
        :param creation_date: The creation_date of this CommitmentPlanProperties.
        :param included_quantities: The included_quantities of this CommitmentPlanProperties.
        :param max_association_limit: The max_association_limit of this CommitmentPlanProperties.
        :param max_capacity_limit: The max_capacity_limit of this CommitmentPlanProperties.
        :param min_capacity_limit: The min_capacity_limit of this CommitmentPlanProperties.
        :param plan_meter: The plan_meter of this CommitmentPlanProperties.
        :param refill_frequency_in_days: The refill_frequency_in_days of this CommitmentPlanProperties.
        :param suspend_plan_on_overage: The suspend_plan_on_overage of this CommitmentPlanProperties.
        """
        self.openapi_types = {
            'charge_for_overage': bool,
            'charge_for_plan': bool,
            'creation_date': datetime,
            'included_quantities': Dict[str, PlanQuantity],
            'max_association_limit': int,
            'max_capacity_limit': int,
            'min_capacity_limit': int,
            'plan_meter': str,
            'refill_frequency_in_days': int,
            'suspend_plan_on_overage': bool
        }

        self.attribute_map = {
            'charge_for_overage': 'chargeForOverage',
            'charge_for_plan': 'chargeForPlan',
            'creation_date': 'creationDate',
            'included_quantities': 'includedQuantities',
            'max_association_limit': 'maxAssociationLimit',
            'max_capacity_limit': 'maxCapacityLimit',
            'min_capacity_limit': 'minCapacityLimit',
            'plan_meter': 'planMeter',
            'refill_frequency_in_days': 'refillFrequencyInDays',
            'suspend_plan_on_overage': 'suspendPlanOnOverage'
        }

        self._charge_for_overage = charge_for_overage
        self._charge_for_plan = charge_for_plan
        self._creation_date = creation_date
        self._included_quantities = included_quantities
        self._max_association_limit = max_association_limit
        self._max_capacity_limit = max_capacity_limit
        self._min_capacity_limit = min_capacity_limit
        self._plan_meter = plan_meter
        self._refill_frequency_in_days = refill_frequency_in_days
        self._suspend_plan_on_overage = suspend_plan_on_overage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommitmentPlanProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommitmentPlanProperties of this CommitmentPlanProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def charge_for_overage(self):
        """Gets the charge_for_overage of this CommitmentPlanProperties.

        Indicates whether usage beyond the commitment plan's included quantities will be charged.

        :return: The charge_for_overage of this CommitmentPlanProperties.
        :rtype: bool
        """
        return self._charge_for_overage

    @charge_for_overage.setter
    def charge_for_overage(self, charge_for_overage):
        """Sets the charge_for_overage of this CommitmentPlanProperties.

        Indicates whether usage beyond the commitment plan's included quantities will be charged.

        :param charge_for_overage: The charge_for_overage of this CommitmentPlanProperties.
        :type charge_for_overage: bool
        """

        self._charge_for_overage = charge_for_overage

    @property
    def charge_for_plan(self):
        """Gets the charge_for_plan of this CommitmentPlanProperties.

        Indicates whether the commitment plan will incur a charge.

        :return: The charge_for_plan of this CommitmentPlanProperties.
        :rtype: bool
        """
        return self._charge_for_plan

    @charge_for_plan.setter
    def charge_for_plan(self, charge_for_plan):
        """Sets the charge_for_plan of this CommitmentPlanProperties.

        Indicates whether the commitment plan will incur a charge.

        :param charge_for_plan: The charge_for_plan of this CommitmentPlanProperties.
        :type charge_for_plan: bool
        """

        self._charge_for_plan = charge_for_plan

    @property
    def creation_date(self):
        """Gets the creation_date of this CommitmentPlanProperties.

        The date at which this commitment plan was created, in ISO 8601 format.

        :return: The creation_date of this CommitmentPlanProperties.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this CommitmentPlanProperties.

        The date at which this commitment plan was created, in ISO 8601 format.

        :param creation_date: The creation_date of this CommitmentPlanProperties.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def included_quantities(self):
        """Gets the included_quantities of this CommitmentPlanProperties.

        The included resource quantities this plan gives you.

        :return: The included_quantities of this CommitmentPlanProperties.
        :rtype: Dict[str, PlanQuantity]
        """
        return self._included_quantities

    @included_quantities.setter
    def included_quantities(self, included_quantities):
        """Sets the included_quantities of this CommitmentPlanProperties.

        The included resource quantities this plan gives you.

        :param included_quantities: The included_quantities of this CommitmentPlanProperties.
        :type included_quantities: Dict[str, PlanQuantity]
        """

        self._included_quantities = included_quantities

    @property
    def max_association_limit(self):
        """Gets the max_association_limit of this CommitmentPlanProperties.

        The maximum number of commitment associations that can be children of this commitment plan.

        :return: The max_association_limit of this CommitmentPlanProperties.
        :rtype: int
        """
        return self._max_association_limit

    @max_association_limit.setter
    def max_association_limit(self, max_association_limit):
        """Sets the max_association_limit of this CommitmentPlanProperties.

        The maximum number of commitment associations that can be children of this commitment plan.

        :param max_association_limit: The max_association_limit of this CommitmentPlanProperties.
        :type max_association_limit: int
        """

        self._max_association_limit = max_association_limit

    @property
    def max_capacity_limit(self):
        """Gets the max_capacity_limit of this CommitmentPlanProperties.

        The maximum scale-out capacity for this commitment plan.

        :return: The max_capacity_limit of this CommitmentPlanProperties.
        :rtype: int
        """
        return self._max_capacity_limit

    @max_capacity_limit.setter
    def max_capacity_limit(self, max_capacity_limit):
        """Sets the max_capacity_limit of this CommitmentPlanProperties.

        The maximum scale-out capacity for this commitment plan.

        :param max_capacity_limit: The max_capacity_limit of this CommitmentPlanProperties.
        :type max_capacity_limit: int
        """

        self._max_capacity_limit = max_capacity_limit

    @property
    def min_capacity_limit(self):
        """Gets the min_capacity_limit of this CommitmentPlanProperties.

        The minimum scale-out capacity for this commitment plan.

        :return: The min_capacity_limit of this CommitmentPlanProperties.
        :rtype: int
        """
        return self._min_capacity_limit

    @min_capacity_limit.setter
    def min_capacity_limit(self, min_capacity_limit):
        """Sets the min_capacity_limit of this CommitmentPlanProperties.

        The minimum scale-out capacity for this commitment plan.

        :param min_capacity_limit: The min_capacity_limit of this CommitmentPlanProperties.
        :type min_capacity_limit: int
        """

        self._min_capacity_limit = min_capacity_limit

    @property
    def plan_meter(self):
        """Gets the plan_meter of this CommitmentPlanProperties.

        The Azure meter which will be used to charge for this commitment plan.

        :return: The plan_meter of this CommitmentPlanProperties.
        :rtype: str
        """
        return self._plan_meter

    @plan_meter.setter
    def plan_meter(self, plan_meter):
        """Sets the plan_meter of this CommitmentPlanProperties.

        The Azure meter which will be used to charge for this commitment plan.

        :param plan_meter: The plan_meter of this CommitmentPlanProperties.
        :type plan_meter: str
        """

        self._plan_meter = plan_meter

    @property
    def refill_frequency_in_days(self):
        """Gets the refill_frequency_in_days of this CommitmentPlanProperties.

        The frequency at which this commitment plan's included quantities are refilled.

        :return: The refill_frequency_in_days of this CommitmentPlanProperties.
        :rtype: int
        """
        return self._refill_frequency_in_days

    @refill_frequency_in_days.setter
    def refill_frequency_in_days(self, refill_frequency_in_days):
        """Sets the refill_frequency_in_days of this CommitmentPlanProperties.

        The frequency at which this commitment plan's included quantities are refilled.

        :param refill_frequency_in_days: The refill_frequency_in_days of this CommitmentPlanProperties.
        :type refill_frequency_in_days: int
        """

        self._refill_frequency_in_days = refill_frequency_in_days

    @property
    def suspend_plan_on_overage(self):
        """Gets the suspend_plan_on_overage of this CommitmentPlanProperties.

        Indicates whether this commitment plan will be moved into a suspended state if usage goes beyond the commitment plan's included quantities.

        :return: The suspend_plan_on_overage of this CommitmentPlanProperties.
        :rtype: bool
        """
        return self._suspend_plan_on_overage

    @suspend_plan_on_overage.setter
    def suspend_plan_on_overage(self, suspend_plan_on_overage):
        """Sets the suspend_plan_on_overage of this CommitmentPlanProperties.

        Indicates whether this commitment plan will be moved into a suspended state if usage goes beyond the commitment plan's included quantities.

        :param suspend_plan_on_overage: The suspend_plan_on_overage of this CommitmentPlanProperties.
        :type suspend_plan_on_overage: bool
        """

        self._suspend_plan_on_overage = suspend_plan_on_overage
