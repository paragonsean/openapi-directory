# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SkuCost(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, extended_unit: str=None, meter_id: str=None, quantity: int=None):
        """SkuCost - a model defined in OpenAPI

        :param extended_unit: The extended_unit of this SkuCost.
        :param meter_id: The meter_id of this SkuCost.
        :param quantity: The quantity of this SkuCost.
        """
        self.openapi_types = {
            'extended_unit': str,
            'meter_id': str,
            'quantity': int
        }

        self.attribute_map = {
            'extended_unit': 'extendedUnit',
            'meter_id': 'meterID',
            'quantity': 'quantity'
        }

        self._extended_unit = extended_unit
        self._meter_id = meter_id
        self._quantity = quantity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SkuCost':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SkuCost of this SkuCost.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def extended_unit(self):
        """Gets the extended_unit of this SkuCost.

        The overall duration represented by the quantity.

        :return: The extended_unit of this SkuCost.
        :rtype: str
        """
        return self._extended_unit

    @extended_unit.setter
    def extended_unit(self, extended_unit):
        """Sets the extended_unit of this SkuCost.

        The overall duration represented by the quantity.

        :param extended_unit: The extended_unit of this SkuCost.
        :type extended_unit: str
        """

        self._extended_unit = extended_unit

    @property
    def meter_id(self):
        """Gets the meter_id of this SkuCost.

        The meter used for this part of a SKU's cost.

        :return: The meter_id of this SkuCost.
        :rtype: str
        """
        return self._meter_id

    @meter_id.setter
    def meter_id(self, meter_id):
        """Sets the meter_id of this SkuCost.

        The meter used for this part of a SKU's cost.

        :param meter_id: The meter_id of this SkuCost.
        :type meter_id: str
        """

        self._meter_id = meter_id

    @property
    def quantity(self):
        """Gets the quantity of this SkuCost.

        The multiplier for the meter ID.

        :return: The quantity of this SkuCost.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this SkuCost.

        The multiplier for the meter ID.

        :param quantity: The quantity of this SkuCost.
        :type quantity: int
        """

        self._quantity = quantity
