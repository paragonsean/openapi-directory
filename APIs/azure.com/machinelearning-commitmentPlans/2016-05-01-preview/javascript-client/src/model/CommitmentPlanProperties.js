/**
 * Azure ML Commitment Plans Management Client
 * These APIs allow end users to operate on Azure Machine Learning Commitment Plans resources and their child Commitment Association resources. They support CRUD operations for commitment plans, get and list operations for commitment associations, moving commitment associations between commitment plans, and retrieving commitment plan usage history.
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PlanQuantity from './PlanQuantity';

/**
 * The CommitmentPlanProperties model module.
 * @module model/CommitmentPlanProperties
 * @version 2016-05-01-preview
 */
class CommitmentPlanProperties {
    /**
     * Constructs a new <code>CommitmentPlanProperties</code>.
     * Properties of an Azure ML commitment plan.
     * @alias module:model/CommitmentPlanProperties
     */
    constructor() { 
        
        CommitmentPlanProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CommitmentPlanProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CommitmentPlanProperties} obj Optional instance to populate.
     * @return {module:model/CommitmentPlanProperties} The populated <code>CommitmentPlanProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CommitmentPlanProperties();

            if (data.hasOwnProperty('chargeForOverage')) {
                obj['chargeForOverage'] = ApiClient.convertToType(data['chargeForOverage'], 'Boolean');
            }
            if (data.hasOwnProperty('chargeForPlan')) {
                obj['chargeForPlan'] = ApiClient.convertToType(data['chargeForPlan'], 'Boolean');
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'Date');
            }
            if (data.hasOwnProperty('includedQuantities')) {
                obj['includedQuantities'] = ApiClient.convertToType(data['includedQuantities'], {'String': PlanQuantity});
            }
            if (data.hasOwnProperty('maxAssociationLimit')) {
                obj['maxAssociationLimit'] = ApiClient.convertToType(data['maxAssociationLimit'], 'Number');
            }
            if (data.hasOwnProperty('maxCapacityLimit')) {
                obj['maxCapacityLimit'] = ApiClient.convertToType(data['maxCapacityLimit'], 'Number');
            }
            if (data.hasOwnProperty('minCapacityLimit')) {
                obj['minCapacityLimit'] = ApiClient.convertToType(data['minCapacityLimit'], 'Number');
            }
            if (data.hasOwnProperty('planMeter')) {
                obj['planMeter'] = ApiClient.convertToType(data['planMeter'], 'String');
            }
            if (data.hasOwnProperty('refillFrequencyInDays')) {
                obj['refillFrequencyInDays'] = ApiClient.convertToType(data['refillFrequencyInDays'], 'Number');
            }
            if (data.hasOwnProperty('suspendPlanOnOverage')) {
                obj['suspendPlanOnOverage'] = ApiClient.convertToType(data['suspendPlanOnOverage'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CommitmentPlanProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CommitmentPlanProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['planMeter'] && !(typeof data['planMeter'] === 'string' || data['planMeter'] instanceof String)) {
            throw new Error("Expected the field `planMeter` to be a primitive type in the JSON string but got " + data['planMeter']);
        }

        return true;
    }


}



/**
 * Indicates whether usage beyond the commitment plan's included quantities will be charged.
 * @member {Boolean} chargeForOverage
 */
CommitmentPlanProperties.prototype['chargeForOverage'] = undefined;

/**
 * Indicates whether the commitment plan will incur a charge.
 * @member {Boolean} chargeForPlan
 */
CommitmentPlanProperties.prototype['chargeForPlan'] = undefined;

/**
 * The date at which this commitment plan was created, in ISO 8601 format.
 * @member {Date} creationDate
 */
CommitmentPlanProperties.prototype['creationDate'] = undefined;

/**
 * The included resource quantities this plan gives you.
 * @member {Object.<String, module:model/PlanQuantity>} includedQuantities
 */
CommitmentPlanProperties.prototype['includedQuantities'] = undefined;

/**
 * The maximum number of commitment associations that can be children of this commitment plan.
 * @member {Number} maxAssociationLimit
 */
CommitmentPlanProperties.prototype['maxAssociationLimit'] = undefined;

/**
 * The maximum scale-out capacity for this commitment plan.
 * @member {Number} maxCapacityLimit
 */
CommitmentPlanProperties.prototype['maxCapacityLimit'] = undefined;

/**
 * The minimum scale-out capacity for this commitment plan.
 * @member {Number} minCapacityLimit
 */
CommitmentPlanProperties.prototype['minCapacityLimit'] = undefined;

/**
 * The Azure meter which will be used to charge for this commitment plan.
 * @member {String} planMeter
 */
CommitmentPlanProperties.prototype['planMeter'] = undefined;

/**
 * The frequency at which this commitment plan's included quantities are refilled.
 * @member {Number} refillFrequencyInDays
 */
CommitmentPlanProperties.prototype['refillFrequencyInDays'] = undefined;

/**
 * Indicates whether this commitment plan will be moved into a suspended state if usage goes beyond the commitment plan's included quantities.
 * @member {Boolean} suspendPlanOnOverage
 */
CommitmentPlanProperties.prototype['suspendPlanOnOverage'] = undefined;






export default CommitmentPlanProperties;

