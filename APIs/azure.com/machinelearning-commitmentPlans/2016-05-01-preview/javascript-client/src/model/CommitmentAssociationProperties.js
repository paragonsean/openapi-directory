/**
 * Azure ML Commitment Plans Management Client
 * These APIs allow end users to operate on Azure Machine Learning Commitment Plans resources and their child Commitment Association resources. They support CRUD operations for commitment plans, get and list operations for commitment associations, moving commitment associations between commitment plans, and retrieving commitment plan usage history.
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CommitmentAssociationProperties model module.
 * @module model/CommitmentAssociationProperties
 * @version 2016-05-01-preview
 */
class CommitmentAssociationProperties {
    /**
     * Constructs a new <code>CommitmentAssociationProperties</code>.
     * Properties of an Azure ML commitment association.
     * @alias module:model/CommitmentAssociationProperties
     */
    constructor() { 
        
        CommitmentAssociationProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CommitmentAssociationProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CommitmentAssociationProperties} obj Optional instance to populate.
     * @return {module:model/CommitmentAssociationProperties} The populated <code>CommitmentAssociationProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CommitmentAssociationProperties();

            if (data.hasOwnProperty('associatedResourceId')) {
                obj['associatedResourceId'] = ApiClient.convertToType(data['associatedResourceId'], 'String');
            }
            if (data.hasOwnProperty('commitmentPlanId')) {
                obj['commitmentPlanId'] = ApiClient.convertToType(data['commitmentPlanId'], 'String');
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CommitmentAssociationProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CommitmentAssociationProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['associatedResourceId'] && !(typeof data['associatedResourceId'] === 'string' || data['associatedResourceId'] instanceof String)) {
            throw new Error("Expected the field `associatedResourceId` to be a primitive type in the JSON string but got " + data['associatedResourceId']);
        }
        // ensure the json data is a string
        if (data['commitmentPlanId'] && !(typeof data['commitmentPlanId'] === 'string' || data['commitmentPlanId'] instanceof String)) {
            throw new Error("Expected the field `commitmentPlanId` to be a primitive type in the JSON string but got " + data['commitmentPlanId']);
        }

        return true;
    }


}



/**
 * The ID of the resource this association points to, such as the ARM ID of an Azure ML web service.
 * @member {String} associatedResourceId
 */
CommitmentAssociationProperties.prototype['associatedResourceId'] = undefined;

/**
 * The ARM ID of the parent Azure ML commitment plan.
 * @member {String} commitmentPlanId
 */
CommitmentAssociationProperties.prototype['commitmentPlanId'] = undefined;

/**
 * The date at which this commitment association was created, in ISO 8601 format.
 * @member {Date} creationDate
 */
CommitmentAssociationProperties.prototype['creationDate'] = undefined;






export default CommitmentAssociationProperties;

