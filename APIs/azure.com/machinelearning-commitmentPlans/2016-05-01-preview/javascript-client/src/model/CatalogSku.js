/**
 * Azure ML Commitment Plans Management Client
 * These APIs allow end users to operate on Azure Machine Learning Commitment Plans resources and their child Commitment Association resources. They support CRUD operations for commitment plans, get and list operations for commitment associations, moving commitment associations between commitment plans, and retrieving commitment plan usage history.
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SkuCapability from './SkuCapability';
import SkuCapacity from './SkuCapacity';
import SkuCost from './SkuCost';
import SkuRestrictions from './SkuRestrictions';

/**
 * The CatalogSku model module.
 * @module model/CatalogSku
 * @version 2016-05-01-preview
 */
class CatalogSku {
    /**
     * Constructs a new <code>CatalogSku</code>.
     * Details of a commitment plan SKU.
     * @alias module:model/CatalogSku
     */
    constructor() { 
        
        CatalogSku.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CatalogSku</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogSku} obj Optional instance to populate.
     * @return {module:model/CatalogSku} The populated <code>CatalogSku</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogSku();

            if (data.hasOwnProperty('capabilities')) {
                obj['capabilities'] = ApiClient.convertToType(data['capabilities'], [SkuCapability]);
            }
            if (data.hasOwnProperty('capacity')) {
                obj['capacity'] = SkuCapacity.constructFromObject(data['capacity']);
            }
            if (data.hasOwnProperty('costs')) {
                obj['costs'] = ApiClient.convertToType(data['costs'], [SkuCost]);
            }
            if (data.hasOwnProperty('locations')) {
                obj['locations'] = ApiClient.convertToType(data['locations'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('resourceType')) {
                obj['resourceType'] = ApiClient.convertToType(data['resourceType'], 'String');
            }
            if (data.hasOwnProperty('restrictions')) {
                obj['restrictions'] = ApiClient.convertToType(data['restrictions'], [SkuRestrictions]);
            }
            if (data.hasOwnProperty('tier')) {
                obj['tier'] = ApiClient.convertToType(data['tier'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogSku</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogSku</code>.
     */
    static validateJSON(data) {
        if (data['capabilities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['capabilities'])) {
                throw new Error("Expected the field `capabilities` to be an array in the JSON data but got " + data['capabilities']);
            }
            // validate the optional field `capabilities` (array)
            for (const item of data['capabilities']) {
                SkuCapability.validateJSON(item);
            };
        }
        // validate the optional field `capacity`
        if (data['capacity']) { // data not null
          SkuCapacity.validateJSON(data['capacity']);
        }
        if (data['costs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['costs'])) {
                throw new Error("Expected the field `costs` to be an array in the JSON data but got " + data['costs']);
            }
            // validate the optional field `costs` (array)
            for (const item of data['costs']) {
                SkuCost.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['locations'])) {
            throw new Error("Expected the field `locations` to be an array in the JSON data but got " + data['locations']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['resourceType'] && !(typeof data['resourceType'] === 'string' || data['resourceType'] instanceof String)) {
            throw new Error("Expected the field `resourceType` to be a primitive type in the JSON string but got " + data['resourceType']);
        }
        if (data['restrictions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['restrictions'])) {
                throw new Error("Expected the field `restrictions` to be an array in the JSON data but got " + data['restrictions']);
            }
            // validate the optional field `restrictions` (array)
            for (const item of data['restrictions']) {
                SkuRestrictions.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['tier'] && !(typeof data['tier'] === 'string' || data['tier'] instanceof String)) {
            throw new Error("Expected the field `tier` to be a primitive type in the JSON string but got " + data['tier']);
        }

        return true;
    }


}



/**
 * The capability information for the specified SKU.
 * @member {Array.<module:model/SkuCapability>} capabilities
 */
CatalogSku.prototype['capabilities'] = undefined;

/**
 * @member {module:model/SkuCapacity} capacity
 */
CatalogSku.prototype['capacity'] = undefined;

/**
 * The cost information for the specified SKU.
 * @member {Array.<module:model/SkuCost>} costs
 */
CatalogSku.prototype['costs'] = undefined;

/**
 * Regions where the SKU is available.
 * @member {Array.<String>} locations
 */
CatalogSku.prototype['locations'] = undefined;

/**
 * SKU name
 * @member {String} name
 */
CatalogSku.prototype['name'] = undefined;

/**
 * Resource type name
 * @member {String} resourceType
 */
CatalogSku.prototype['resourceType'] = undefined;

/**
 * Restrictions which would prevent a SKU from being used. This is empty if there are no restrictions.
 * @member {Array.<module:model/SkuRestrictions>} restrictions
 */
CatalogSku.prototype['restrictions'] = undefined;

/**
 * SKU tier
 * @member {String} tier
 */
CatalogSku.prototype['tier'] = undefined;






export default CatalogSku;

