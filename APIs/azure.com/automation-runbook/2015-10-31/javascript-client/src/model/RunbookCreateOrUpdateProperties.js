/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContentLink from './ContentLink';
import RunbookDraft from './RunbookDraft';

/**
 * The RunbookCreateOrUpdateProperties model module.
 * @module model/RunbookCreateOrUpdateProperties
 * @version 2015-10-31
 */
class RunbookCreateOrUpdateProperties {
    /**
     * Constructs a new <code>RunbookCreateOrUpdateProperties</code>.
     * The parameters supplied to the create or update runbook properties.
     * @alias module:model/RunbookCreateOrUpdateProperties
     * @param runbookType {module:model/RunbookCreateOrUpdateProperties.RunbookTypeEnum} Gets or sets the type of the runbook.
     */
    constructor(runbookType) { 
        
        RunbookCreateOrUpdateProperties.initialize(this, runbookType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, runbookType) { 
        obj['runbookType'] = runbookType;
    }

    /**
     * Constructs a <code>RunbookCreateOrUpdateProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RunbookCreateOrUpdateProperties} obj Optional instance to populate.
     * @return {module:model/RunbookCreateOrUpdateProperties} The populated <code>RunbookCreateOrUpdateProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RunbookCreateOrUpdateProperties();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('draft')) {
                obj['draft'] = RunbookDraft.constructFromObject(data['draft']);
            }
            if (data.hasOwnProperty('logActivityTrace')) {
                obj['logActivityTrace'] = ApiClient.convertToType(data['logActivityTrace'], 'Number');
            }
            if (data.hasOwnProperty('logProgress')) {
                obj['logProgress'] = ApiClient.convertToType(data['logProgress'], 'Boolean');
            }
            if (data.hasOwnProperty('logVerbose')) {
                obj['logVerbose'] = ApiClient.convertToType(data['logVerbose'], 'Boolean');
            }
            if (data.hasOwnProperty('publishContentLink')) {
                obj['publishContentLink'] = ContentLink.constructFromObject(data['publishContentLink']);
            }
            if (data.hasOwnProperty('runbookType')) {
                obj['runbookType'] = ApiClient.convertToType(data['runbookType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RunbookCreateOrUpdateProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RunbookCreateOrUpdateProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RunbookCreateOrUpdateProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `draft`
        if (data['draft']) { // data not null
          RunbookDraft.validateJSON(data['draft']);
        }
        // validate the optional field `publishContentLink`
        if (data['publishContentLink']) { // data not null
          ContentLink.validateJSON(data['publishContentLink']);
        }
        // ensure the json data is a string
        if (data['runbookType'] && !(typeof data['runbookType'] === 'string' || data['runbookType'] instanceof String)) {
            throw new Error("Expected the field `runbookType` to be a primitive type in the JSON string but got " + data['runbookType']);
        }

        return true;
    }


}

RunbookCreateOrUpdateProperties.RequiredProperties = ["runbookType"];

/**
 * Gets or sets the description of the runbook.
 * @member {String} description
 */
RunbookCreateOrUpdateProperties.prototype['description'] = undefined;

/**
 * @member {module:model/RunbookDraft} draft
 */
RunbookCreateOrUpdateProperties.prototype['draft'] = undefined;

/**
 * Gets or sets the activity-level tracing options of the runbook.
 * @member {Number} logActivityTrace
 */
RunbookCreateOrUpdateProperties.prototype['logActivityTrace'] = undefined;

/**
 * Gets or sets progress log option.
 * @member {Boolean} logProgress
 */
RunbookCreateOrUpdateProperties.prototype['logProgress'] = undefined;

/**
 * Gets or sets verbose log option.
 * @member {Boolean} logVerbose
 */
RunbookCreateOrUpdateProperties.prototype['logVerbose'] = undefined;

/**
 * @member {module:model/ContentLink} publishContentLink
 */
RunbookCreateOrUpdateProperties.prototype['publishContentLink'] = undefined;

/**
 * Gets or sets the type of the runbook.
 * @member {module:model/RunbookCreateOrUpdateProperties.RunbookTypeEnum} runbookType
 */
RunbookCreateOrUpdateProperties.prototype['runbookType'] = undefined;





/**
 * Allowed values for the <code>runbookType</code> property.
 * @enum {String}
 * @readonly
 */
RunbookCreateOrUpdateProperties['RunbookTypeEnum'] = {

    /**
     * value: "Script"
     * @const
     */
    "Script": "Script",

    /**
     * value: "Graph"
     * @const
     */
    "Graph": "Graph",

    /**
     * value: "PowerShellWorkflow"
     * @const
     */
    "PowerShellWorkflow": "PowerShellWorkflow",

    /**
     * value: "PowerShell"
     * @const
     */
    "PowerShell": "PowerShell",

    /**
     * value: "GraphPowerShellWorkflow"
     * @const
     */
    "GraphPowerShellWorkflow": "GraphPowerShellWorkflow",

    /**
     * value: "GraphPowerShell"
     * @const
     */
    "GraphPowerShell": "GraphPowerShell"
};



export default RunbookCreateOrUpdateProperties;

