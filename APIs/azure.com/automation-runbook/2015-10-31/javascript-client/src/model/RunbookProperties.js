/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContentLink from './ContentLink';
import RunbookDraft from './RunbookDraft';
import RunbookParameter from './RunbookParameter';

/**
 * The RunbookProperties model module.
 * @module model/RunbookProperties
 * @version 2015-10-31
 */
class RunbookProperties {
    /**
     * Constructs a new <code>RunbookProperties</code>.
     * Definition of the runbook property type.
     * @alias module:model/RunbookProperties
     */
    constructor() { 
        
        RunbookProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RunbookProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RunbookProperties} obj Optional instance to populate.
     * @return {module:model/RunbookProperties} The populated <code>RunbookProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RunbookProperties();

            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('draft')) {
                obj['draft'] = RunbookDraft.constructFromObject(data['draft']);
            }
            if (data.hasOwnProperty('jobCount')) {
                obj['jobCount'] = ApiClient.convertToType(data['jobCount'], 'Number');
            }
            if (data.hasOwnProperty('lastModifiedBy')) {
                obj['lastModifiedBy'] = ApiClient.convertToType(data['lastModifiedBy'], 'String');
            }
            if (data.hasOwnProperty('lastModifiedTime')) {
                obj['lastModifiedTime'] = ApiClient.convertToType(data['lastModifiedTime'], 'Date');
            }
            if (data.hasOwnProperty('logActivityTrace')) {
                obj['logActivityTrace'] = ApiClient.convertToType(data['logActivityTrace'], 'Number');
            }
            if (data.hasOwnProperty('logProgress')) {
                obj['logProgress'] = ApiClient.convertToType(data['logProgress'], 'Boolean');
            }
            if (data.hasOwnProperty('logVerbose')) {
                obj['logVerbose'] = ApiClient.convertToType(data['logVerbose'], 'Boolean');
            }
            if (data.hasOwnProperty('outputTypes')) {
                obj['outputTypes'] = ApiClient.convertToType(data['outputTypes'], ['String']);
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], {'String': RunbookParameter});
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('publishContentLink')) {
                obj['publishContentLink'] = ContentLink.constructFromObject(data['publishContentLink']);
            }
            if (data.hasOwnProperty('runbookType')) {
                obj['runbookType'] = ApiClient.convertToType(data['runbookType'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RunbookProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RunbookProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `draft`
        if (data['draft']) { // data not null
          RunbookDraft.validateJSON(data['draft']);
        }
        // ensure the json data is a string
        if (data['lastModifiedBy'] && !(typeof data['lastModifiedBy'] === 'string' || data['lastModifiedBy'] instanceof String)) {
            throw new Error("Expected the field `lastModifiedBy` to be a primitive type in the JSON string but got " + data['lastModifiedBy']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['outputTypes'])) {
            throw new Error("Expected the field `outputTypes` to be an array in the JSON data but got " + data['outputTypes']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // validate the optional field `publishContentLink`
        if (data['publishContentLink']) { // data not null
          ContentLink.validateJSON(data['publishContentLink']);
        }
        // ensure the json data is a string
        if (data['runbookType'] && !(typeof data['runbookType'] === 'string' || data['runbookType'] instanceof String)) {
            throw new Error("Expected the field `runbookType` to be a primitive type in the JSON string but got " + data['runbookType']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Gets or sets the creation time.
 * @member {Date} creationTime
 */
RunbookProperties.prototype['creationTime'] = undefined;

/**
 * Gets or sets the description.
 * @member {String} description
 */
RunbookProperties.prototype['description'] = undefined;

/**
 * @member {module:model/RunbookDraft} draft
 */
RunbookProperties.prototype['draft'] = undefined;

/**
 * Gets or sets the job count of the runbook.
 * @member {Number} jobCount
 */
RunbookProperties.prototype['jobCount'] = undefined;

/**
 * Gets or sets the last modified by.
 * @member {String} lastModifiedBy
 */
RunbookProperties.prototype['lastModifiedBy'] = undefined;

/**
 * Gets or sets the last modified time.
 * @member {Date} lastModifiedTime
 */
RunbookProperties.prototype['lastModifiedTime'] = undefined;

/**
 * Gets or sets the option to log activity trace of the runbook.
 * @member {Number} logActivityTrace
 */
RunbookProperties.prototype['logActivityTrace'] = undefined;

/**
 * Gets or sets progress log option.
 * @member {Boolean} logProgress
 */
RunbookProperties.prototype['logProgress'] = undefined;

/**
 * Gets or sets verbose log option.
 * @member {Boolean} logVerbose
 */
RunbookProperties.prototype['logVerbose'] = undefined;

/**
 * Gets or sets the runbook output types.
 * @member {Array.<String>} outputTypes
 */
RunbookProperties.prototype['outputTypes'] = undefined;

/**
 * Gets or sets the runbook parameters.
 * @member {Object.<String, module:model/RunbookParameter>} parameters
 */
RunbookProperties.prototype['parameters'] = undefined;

/**
 * Gets or sets the provisioning state of the runbook.
 * @member {module:model/RunbookProperties.ProvisioningStateEnum} provisioningState
 */
RunbookProperties.prototype['provisioningState'] = undefined;

/**
 * @member {module:model/ContentLink} publishContentLink
 */
RunbookProperties.prototype['publishContentLink'] = undefined;

/**
 * Gets or sets the type of the runbook.
 * @member {module:model/RunbookProperties.RunbookTypeEnum} runbookType
 */
RunbookProperties.prototype['runbookType'] = undefined;

/**
 * Gets or sets the state of the runbook.
 * @member {module:model/RunbookProperties.StateEnum} state
 */
RunbookProperties.prototype['state'] = undefined;





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
RunbookProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded"
};


/**
 * Allowed values for the <code>runbookType</code> property.
 * @enum {String}
 * @readonly
 */
RunbookProperties['RunbookTypeEnum'] = {

    /**
     * value: "Script"
     * @const
     */
    "Script": "Script",

    /**
     * value: "Graph"
     * @const
     */
    "Graph": "Graph",

    /**
     * value: "PowerShellWorkflow"
     * @const
     */
    "PowerShellWorkflow": "PowerShellWorkflow",

    /**
     * value: "PowerShell"
     * @const
     */
    "PowerShell": "PowerShell",

    /**
     * value: "GraphPowerShellWorkflow"
     * @const
     */
    "GraphPowerShellWorkflow": "GraphPowerShellWorkflow",

    /**
     * value: "GraphPowerShell"
     * @const
     */
    "GraphPowerShell": "GraphPowerShell"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
RunbookProperties['StateEnum'] = {

    /**
     * value: "New"
     * @const
     */
    "New": "New",

    /**
     * value: "Edit"
     * @const
     */
    "Edit": "Edit",

    /**
     * value: "Published"
     * @const
     */
    "Published": "Published"
};



export default RunbookProperties;

