# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.content_link import ContentLink
from openapi_server.models.runbook_draft import RunbookDraft
from openapi_server.models.runbook_parameter import RunbookParameter
from openapi_server import util


class RunbookProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_time: datetime=None, description: str=None, draft: RunbookDraft=None, job_count: int=None, last_modified_by: str=None, last_modified_time: datetime=None, log_activity_trace: int=None, log_progress: bool=None, log_verbose: bool=None, output_types: List[str]=None, parameters: Dict[str, RunbookParameter]=None, provisioning_state: str=None, publish_content_link: ContentLink=None, runbook_type: str=None, state: str=None):
        """RunbookProperties - a model defined in OpenAPI

        :param creation_time: The creation_time of this RunbookProperties.
        :param description: The description of this RunbookProperties.
        :param draft: The draft of this RunbookProperties.
        :param job_count: The job_count of this RunbookProperties.
        :param last_modified_by: The last_modified_by of this RunbookProperties.
        :param last_modified_time: The last_modified_time of this RunbookProperties.
        :param log_activity_trace: The log_activity_trace of this RunbookProperties.
        :param log_progress: The log_progress of this RunbookProperties.
        :param log_verbose: The log_verbose of this RunbookProperties.
        :param output_types: The output_types of this RunbookProperties.
        :param parameters: The parameters of this RunbookProperties.
        :param provisioning_state: The provisioning_state of this RunbookProperties.
        :param publish_content_link: The publish_content_link of this RunbookProperties.
        :param runbook_type: The runbook_type of this RunbookProperties.
        :param state: The state of this RunbookProperties.
        """
        self.openapi_types = {
            'creation_time': datetime,
            'description': str,
            'draft': RunbookDraft,
            'job_count': int,
            'last_modified_by': str,
            'last_modified_time': datetime,
            'log_activity_trace': int,
            'log_progress': bool,
            'log_verbose': bool,
            'output_types': List[str],
            'parameters': Dict[str, RunbookParameter],
            'provisioning_state': str,
            'publish_content_link': ContentLink,
            'runbook_type': str,
            'state': str
        }

        self.attribute_map = {
            'creation_time': 'creationTime',
            'description': 'description',
            'draft': 'draft',
            'job_count': 'jobCount',
            'last_modified_by': 'lastModifiedBy',
            'last_modified_time': 'lastModifiedTime',
            'log_activity_trace': 'logActivityTrace',
            'log_progress': 'logProgress',
            'log_verbose': 'logVerbose',
            'output_types': 'outputTypes',
            'parameters': 'parameters',
            'provisioning_state': 'provisioningState',
            'publish_content_link': 'publishContentLink',
            'runbook_type': 'runbookType',
            'state': 'state'
        }

        self._creation_time = creation_time
        self._description = description
        self._draft = draft
        self._job_count = job_count
        self._last_modified_by = last_modified_by
        self._last_modified_time = last_modified_time
        self._log_activity_trace = log_activity_trace
        self._log_progress = log_progress
        self._log_verbose = log_verbose
        self._output_types = output_types
        self._parameters = parameters
        self._provisioning_state = provisioning_state
        self._publish_content_link = publish_content_link
        self._runbook_type = runbook_type
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunbookProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RunbookProperties of this RunbookProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_time(self):
        """Gets the creation_time of this RunbookProperties.

        Gets or sets the creation time.

        :return: The creation_time of this RunbookProperties.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this RunbookProperties.

        Gets or sets the creation time.

        :param creation_time: The creation_time of this RunbookProperties.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def description(self):
        """Gets the description of this RunbookProperties.

        Gets or sets the description.

        :return: The description of this RunbookProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RunbookProperties.

        Gets or sets the description.

        :param description: The description of this RunbookProperties.
        :type description: str
        """

        self._description = description

    @property
    def draft(self):
        """Gets the draft of this RunbookProperties.


        :return: The draft of this RunbookProperties.
        :rtype: RunbookDraft
        """
        return self._draft

    @draft.setter
    def draft(self, draft):
        """Sets the draft of this RunbookProperties.


        :param draft: The draft of this RunbookProperties.
        :type draft: RunbookDraft
        """

        self._draft = draft

    @property
    def job_count(self):
        """Gets the job_count of this RunbookProperties.

        Gets or sets the job count of the runbook.

        :return: The job_count of this RunbookProperties.
        :rtype: int
        """
        return self._job_count

    @job_count.setter
    def job_count(self, job_count):
        """Sets the job_count of this RunbookProperties.

        Gets or sets the job count of the runbook.

        :param job_count: The job_count of this RunbookProperties.
        :type job_count: int
        """

        self._job_count = job_count

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this RunbookProperties.

        Gets or sets the last modified by.

        :return: The last_modified_by of this RunbookProperties.
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this RunbookProperties.

        Gets or sets the last modified by.

        :param last_modified_by: The last_modified_by of this RunbookProperties.
        :type last_modified_by: str
        """

        self._last_modified_by = last_modified_by

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this RunbookProperties.

        Gets or sets the last modified time.

        :return: The last_modified_time of this RunbookProperties.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this RunbookProperties.

        Gets or sets the last modified time.

        :param last_modified_time: The last_modified_time of this RunbookProperties.
        :type last_modified_time: datetime
        """

        self._last_modified_time = last_modified_time

    @property
    def log_activity_trace(self):
        """Gets the log_activity_trace of this RunbookProperties.

        Gets or sets the option to log activity trace of the runbook.

        :return: The log_activity_trace of this RunbookProperties.
        :rtype: int
        """
        return self._log_activity_trace

    @log_activity_trace.setter
    def log_activity_trace(self, log_activity_trace):
        """Sets the log_activity_trace of this RunbookProperties.

        Gets or sets the option to log activity trace of the runbook.

        :param log_activity_trace: The log_activity_trace of this RunbookProperties.
        :type log_activity_trace: int
        """

        self._log_activity_trace = log_activity_trace

    @property
    def log_progress(self):
        """Gets the log_progress of this RunbookProperties.

        Gets or sets progress log option.

        :return: The log_progress of this RunbookProperties.
        :rtype: bool
        """
        return self._log_progress

    @log_progress.setter
    def log_progress(self, log_progress):
        """Sets the log_progress of this RunbookProperties.

        Gets or sets progress log option.

        :param log_progress: The log_progress of this RunbookProperties.
        :type log_progress: bool
        """

        self._log_progress = log_progress

    @property
    def log_verbose(self):
        """Gets the log_verbose of this RunbookProperties.

        Gets or sets verbose log option.

        :return: The log_verbose of this RunbookProperties.
        :rtype: bool
        """
        return self._log_verbose

    @log_verbose.setter
    def log_verbose(self, log_verbose):
        """Sets the log_verbose of this RunbookProperties.

        Gets or sets verbose log option.

        :param log_verbose: The log_verbose of this RunbookProperties.
        :type log_verbose: bool
        """

        self._log_verbose = log_verbose

    @property
    def output_types(self):
        """Gets the output_types of this RunbookProperties.

        Gets or sets the runbook output types.

        :return: The output_types of this RunbookProperties.
        :rtype: List[str]
        """
        return self._output_types

    @output_types.setter
    def output_types(self, output_types):
        """Sets the output_types of this RunbookProperties.

        Gets or sets the runbook output types.

        :param output_types: The output_types of this RunbookProperties.
        :type output_types: List[str]
        """

        self._output_types = output_types

    @property
    def parameters(self):
        """Gets the parameters of this RunbookProperties.

        Gets or sets the runbook parameters.

        :return: The parameters of this RunbookProperties.
        :rtype: Dict[str, RunbookParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this RunbookProperties.

        Gets or sets the runbook parameters.

        :param parameters: The parameters of this RunbookProperties.
        :type parameters: Dict[str, RunbookParameter]
        """

        self._parameters = parameters

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this RunbookProperties.

        Gets or sets the provisioning state of the runbook.

        :return: The provisioning_state of this RunbookProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this RunbookProperties.

        Gets or sets the provisioning state of the runbook.

        :param provisioning_state: The provisioning_state of this RunbookProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Succeeded"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def publish_content_link(self):
        """Gets the publish_content_link of this RunbookProperties.


        :return: The publish_content_link of this RunbookProperties.
        :rtype: ContentLink
        """
        return self._publish_content_link

    @publish_content_link.setter
    def publish_content_link(self, publish_content_link):
        """Sets the publish_content_link of this RunbookProperties.


        :param publish_content_link: The publish_content_link of this RunbookProperties.
        :type publish_content_link: ContentLink
        """

        self._publish_content_link = publish_content_link

    @property
    def runbook_type(self):
        """Gets the runbook_type of this RunbookProperties.

        Gets or sets the type of the runbook.

        :return: The runbook_type of this RunbookProperties.
        :rtype: str
        """
        return self._runbook_type

    @runbook_type.setter
    def runbook_type(self, runbook_type):
        """Sets the runbook_type of this RunbookProperties.

        Gets or sets the type of the runbook.

        :param runbook_type: The runbook_type of this RunbookProperties.
        :type runbook_type: str
        """
        allowed_values = ["Script", "Graph", "PowerShellWorkflow", "PowerShell", "GraphPowerShellWorkflow", "GraphPowerShell"]  # noqa: E501
        if runbook_type not in allowed_values:
            raise ValueError(
                "Invalid value for `runbook_type` ({0}), must be one of {1}"
                .format(runbook_type, allowed_values)
            )

        self._runbook_type = runbook_type

    @property
    def state(self):
        """Gets the state of this RunbookProperties.

        Gets or sets the state of the runbook.

        :return: The state of this RunbookProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this RunbookProperties.

        Gets or sets the state of the runbook.

        :param state: The state of this RunbookProperties.
        :type state: str
        """
        allowed_values = ["New", "Edit", "Published"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
