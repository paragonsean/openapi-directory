/*
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ContentLink;
import org.openapitools.client.model.RunbookDraft;
import org.openapitools.client.model.RunbookParameter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Definition of the runbook property type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:12.388021-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RunbookProperties {
  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DRAFT = "draft";
  @SerializedName(SERIALIZED_NAME_DRAFT)
  private RunbookDraft draft;

  public static final String SERIALIZED_NAME_JOB_COUNT = "jobCount";
  @SerializedName(SERIALIZED_NAME_JOB_COUNT)
  private Integer jobCount;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_BY = "lastModifiedBy";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_BY)
  private String lastModifiedBy;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "lastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private OffsetDateTime lastModifiedTime;

  public static final String SERIALIZED_NAME_LOG_ACTIVITY_TRACE = "logActivityTrace";
  @SerializedName(SERIALIZED_NAME_LOG_ACTIVITY_TRACE)
  private Integer logActivityTrace;

  public static final String SERIALIZED_NAME_LOG_PROGRESS = "logProgress";
  @SerializedName(SERIALIZED_NAME_LOG_PROGRESS)
  private Boolean logProgress;

  public static final String SERIALIZED_NAME_LOG_VERBOSE = "logVerbose";
  @SerializedName(SERIALIZED_NAME_LOG_VERBOSE)
  private Boolean logVerbose;

  public static final String SERIALIZED_NAME_OUTPUT_TYPES = "outputTypes";
  @SerializedName(SERIALIZED_NAME_OUTPUT_TYPES)
  private List<String> outputTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map<String, RunbookParameter> parameters = new HashMap<>();

  /**
   * Gets or sets the provisioning state of the runbook.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    SUCCEEDED("Succeeded");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_PUBLISH_CONTENT_LINK = "publishContentLink";
  @SerializedName(SERIALIZED_NAME_PUBLISH_CONTENT_LINK)
  private ContentLink publishContentLink;

  /**
   * Gets or sets the type of the runbook.
   */
  @JsonAdapter(RunbookTypeEnum.Adapter.class)
  public enum RunbookTypeEnum {
    SCRIPT("Script"),
    
    GRAPH("Graph"),
    
    POWER_SHELL_WORKFLOW("PowerShellWorkflow"),
    
    POWER_SHELL("PowerShell"),
    
    GRAPH_POWER_SHELL_WORKFLOW("GraphPowerShellWorkflow"),
    
    GRAPH_POWER_SHELL("GraphPowerShell");

    private String value;

    RunbookTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RunbookTypeEnum fromValue(String value) {
      for (RunbookTypeEnum b : RunbookTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RunbookTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RunbookTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RunbookTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RunbookTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RunbookTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RUNBOOK_TYPE = "runbookType";
  @SerializedName(SERIALIZED_NAME_RUNBOOK_TYPE)
  private RunbookTypeEnum runbookType;

  /**
   * Gets or sets the state of the runbook.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    NEW("New"),
    
    EDIT("Edit"),
    
    PUBLISHED("Published");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public RunbookProperties() {
  }

  public RunbookProperties creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Gets or sets the creation time.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public RunbookProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Gets or sets the description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public RunbookProperties draft(RunbookDraft draft) {
    this.draft = draft;
    return this;
  }

  /**
   * Get draft
   * @return draft
   */
  @javax.annotation.Nullable
  public RunbookDraft getDraft() {
    return draft;
  }

  public void setDraft(RunbookDraft draft) {
    this.draft = draft;
  }


  public RunbookProperties jobCount(Integer jobCount) {
    this.jobCount = jobCount;
    return this;
  }

  /**
   * Gets or sets the job count of the runbook.
   * @return jobCount
   */
  @javax.annotation.Nullable
  public Integer getJobCount() {
    return jobCount;
  }

  public void setJobCount(Integer jobCount) {
    this.jobCount = jobCount;
  }


  public RunbookProperties lastModifiedBy(String lastModifiedBy) {
    this.lastModifiedBy = lastModifiedBy;
    return this;
  }

  /**
   * Gets or sets the last modified by.
   * @return lastModifiedBy
   */
  @javax.annotation.Nullable
  public String getLastModifiedBy() {
    return lastModifiedBy;
  }

  public void setLastModifiedBy(String lastModifiedBy) {
    this.lastModifiedBy = lastModifiedBy;
  }


  public RunbookProperties lastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
    return this;
  }

  /**
   * Gets or sets the last modified time.
   * @return lastModifiedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedTime() {
    return lastModifiedTime;
  }

  public void setLastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
  }


  public RunbookProperties logActivityTrace(Integer logActivityTrace) {
    this.logActivityTrace = logActivityTrace;
    return this;
  }

  /**
   * Gets or sets the option to log activity trace of the runbook.
   * @return logActivityTrace
   */
  @javax.annotation.Nullable
  public Integer getLogActivityTrace() {
    return logActivityTrace;
  }

  public void setLogActivityTrace(Integer logActivityTrace) {
    this.logActivityTrace = logActivityTrace;
  }


  public RunbookProperties logProgress(Boolean logProgress) {
    this.logProgress = logProgress;
    return this;
  }

  /**
   * Gets or sets progress log option.
   * @return logProgress
   */
  @javax.annotation.Nullable
  public Boolean getLogProgress() {
    return logProgress;
  }

  public void setLogProgress(Boolean logProgress) {
    this.logProgress = logProgress;
  }


  public RunbookProperties logVerbose(Boolean logVerbose) {
    this.logVerbose = logVerbose;
    return this;
  }

  /**
   * Gets or sets verbose log option.
   * @return logVerbose
   */
  @javax.annotation.Nullable
  public Boolean getLogVerbose() {
    return logVerbose;
  }

  public void setLogVerbose(Boolean logVerbose) {
    this.logVerbose = logVerbose;
  }


  public RunbookProperties outputTypes(List<String> outputTypes) {
    this.outputTypes = outputTypes;
    return this;
  }

  public RunbookProperties addOutputTypesItem(String outputTypesItem) {
    if (this.outputTypes == null) {
      this.outputTypes = new ArrayList<>();
    }
    this.outputTypes.add(outputTypesItem);
    return this;
  }

  /**
   * Gets or sets the runbook output types.
   * @return outputTypes
   */
  @javax.annotation.Nullable
  public List<String> getOutputTypes() {
    return outputTypes;
  }

  public void setOutputTypes(List<String> outputTypes) {
    this.outputTypes = outputTypes;
  }


  public RunbookProperties parameters(Map<String, RunbookParameter> parameters) {
    this.parameters = parameters;
    return this;
  }

  public RunbookProperties putParametersItem(String key, RunbookParameter parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

  /**
   * Gets or sets the runbook parameters.
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map<String, RunbookParameter> getParameters() {
    return parameters;
  }

  public void setParameters(Map<String, RunbookParameter> parameters) {
    this.parameters = parameters;
  }


  public RunbookProperties provisioningState(ProvisioningStateEnum provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Gets or sets the provisioning state of the runbook.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(ProvisioningStateEnum provisioningState) {
    this.provisioningState = provisioningState;
  }


  public RunbookProperties publishContentLink(ContentLink publishContentLink) {
    this.publishContentLink = publishContentLink;
    return this;
  }

  /**
   * Get publishContentLink
   * @return publishContentLink
   */
  @javax.annotation.Nullable
  public ContentLink getPublishContentLink() {
    return publishContentLink;
  }

  public void setPublishContentLink(ContentLink publishContentLink) {
    this.publishContentLink = publishContentLink;
  }


  public RunbookProperties runbookType(RunbookTypeEnum runbookType) {
    this.runbookType = runbookType;
    return this;
  }

  /**
   * Gets or sets the type of the runbook.
   * @return runbookType
   */
  @javax.annotation.Nullable
  public RunbookTypeEnum getRunbookType() {
    return runbookType;
  }

  public void setRunbookType(RunbookTypeEnum runbookType) {
    this.runbookType = runbookType;
  }


  public RunbookProperties state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Gets or sets the state of the runbook.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunbookProperties runbookProperties = (RunbookProperties) o;
    return Objects.equals(this.creationTime, runbookProperties.creationTime) &&
        Objects.equals(this.description, runbookProperties.description) &&
        Objects.equals(this.draft, runbookProperties.draft) &&
        Objects.equals(this.jobCount, runbookProperties.jobCount) &&
        Objects.equals(this.lastModifiedBy, runbookProperties.lastModifiedBy) &&
        Objects.equals(this.lastModifiedTime, runbookProperties.lastModifiedTime) &&
        Objects.equals(this.logActivityTrace, runbookProperties.logActivityTrace) &&
        Objects.equals(this.logProgress, runbookProperties.logProgress) &&
        Objects.equals(this.logVerbose, runbookProperties.logVerbose) &&
        Objects.equals(this.outputTypes, runbookProperties.outputTypes) &&
        Objects.equals(this.parameters, runbookProperties.parameters) &&
        Objects.equals(this.provisioningState, runbookProperties.provisioningState) &&
        Objects.equals(this.publishContentLink, runbookProperties.publishContentLink) &&
        Objects.equals(this.runbookType, runbookProperties.runbookType) &&
        Objects.equals(this.state, runbookProperties.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationTime, description, draft, jobCount, lastModifiedBy, lastModifiedTime, logActivityTrace, logProgress, logVerbose, outputTypes, parameters, provisioningState, publishContentLink, runbookType, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunbookProperties {\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    draft: ").append(toIndentedString(draft)).append("\n");
    sb.append("    jobCount: ").append(toIndentedString(jobCount)).append("\n");
    sb.append("    lastModifiedBy: ").append(toIndentedString(lastModifiedBy)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    logActivityTrace: ").append(toIndentedString(logActivityTrace)).append("\n");
    sb.append("    logProgress: ").append(toIndentedString(logProgress)).append("\n");
    sb.append("    logVerbose: ").append(toIndentedString(logVerbose)).append("\n");
    sb.append("    outputTypes: ").append(toIndentedString(outputTypes)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    publishContentLink: ").append(toIndentedString(publishContentLink)).append("\n");
    sb.append("    runbookType: ").append(toIndentedString(runbookType)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationTime");
    openapiFields.add("description");
    openapiFields.add("draft");
    openapiFields.add("jobCount");
    openapiFields.add("lastModifiedBy");
    openapiFields.add("lastModifiedTime");
    openapiFields.add("logActivityTrace");
    openapiFields.add("logProgress");
    openapiFields.add("logVerbose");
    openapiFields.add("outputTypes");
    openapiFields.add("parameters");
    openapiFields.add("provisioningState");
    openapiFields.add("publishContentLink");
    openapiFields.add("runbookType");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RunbookProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RunbookProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RunbookProperties is not found in the empty JSON string", RunbookProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RunbookProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RunbookProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `draft`
      if (jsonObj.get("draft") != null && !jsonObj.get("draft").isJsonNull()) {
        RunbookDraft.validateJsonElement(jsonObj.get("draft"));
      }
      if ((jsonObj.get("lastModifiedBy") != null && !jsonObj.get("lastModifiedBy").isJsonNull()) && !jsonObj.get("lastModifiedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastModifiedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastModifiedBy").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("outputTypes") != null && !jsonObj.get("outputTypes").isJsonNull() && !jsonObj.get("outputTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputTypes` to be an array in the JSON string but got `%s`", jsonObj.get("outputTypes").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      // validate the optional field `publishContentLink`
      if (jsonObj.get("publishContentLink") != null && !jsonObj.get("publishContentLink").isJsonNull()) {
        ContentLink.validateJsonElement(jsonObj.get("publishContentLink"));
      }
      if ((jsonObj.get("runbookType") != null && !jsonObj.get("runbookType").isJsonNull()) && !jsonObj.get("runbookType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runbookType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runbookType").toString()));
      }
      // validate the optional field `runbookType`
      if (jsonObj.get("runbookType") != null && !jsonObj.get("runbookType").isJsonNull()) {
        RunbookTypeEnum.validateJsonElement(jsonObj.get("runbookType"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RunbookProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RunbookProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RunbookProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RunbookProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<RunbookProperties>() {
           @Override
           public void write(JsonWriter out, RunbookProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RunbookProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RunbookProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RunbookProperties
   * @throws IOException if the JSON string is invalid with respect to RunbookProperties
   */
  public static RunbookProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RunbookProperties.class);
  }

  /**
   * Convert an instance of RunbookProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

