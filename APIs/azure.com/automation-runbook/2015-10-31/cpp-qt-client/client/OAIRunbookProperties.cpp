/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRunbookProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRunbookProperties::OAIRunbookProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRunbookProperties::OAIRunbookProperties() {
    this->initializeModel();
}

OAIRunbookProperties::~OAIRunbookProperties() {}

void OAIRunbookProperties::initializeModel() {

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_draft_isSet = false;
    m_draft_isValid = false;

    m_job_count_isSet = false;
    m_job_count_isValid = false;

    m_last_modified_by_isSet = false;
    m_last_modified_by_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_log_activity_trace_isSet = false;
    m_log_activity_trace_isValid = false;

    m_log_progress_isSet = false;
    m_log_progress_isValid = false;

    m_log_verbose_isSet = false;
    m_log_verbose_isValid = false;

    m_output_types_isSet = false;
    m_output_types_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_publish_content_link_isSet = false;
    m_publish_content_link_isValid = false;

    m_runbook_type_isSet = false;
    m_runbook_type_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIRunbookProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRunbookProperties::fromJsonObject(QJsonObject json) {

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_draft_isValid = ::OpenAPI::fromJsonValue(m_draft, json[QString("draft")]);
    m_draft_isSet = !json[QString("draft")].isNull() && m_draft_isValid;

    m_job_count_isValid = ::OpenAPI::fromJsonValue(m_job_count, json[QString("jobCount")]);
    m_job_count_isSet = !json[QString("jobCount")].isNull() && m_job_count_isValid;

    m_last_modified_by_isValid = ::OpenAPI::fromJsonValue(m_last_modified_by, json[QString("lastModifiedBy")]);
    m_last_modified_by_isSet = !json[QString("lastModifiedBy")].isNull() && m_last_modified_by_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("lastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("lastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_log_activity_trace_isValid = ::OpenAPI::fromJsonValue(m_log_activity_trace, json[QString("logActivityTrace")]);
    m_log_activity_trace_isSet = !json[QString("logActivityTrace")].isNull() && m_log_activity_trace_isValid;

    m_log_progress_isValid = ::OpenAPI::fromJsonValue(m_log_progress, json[QString("logProgress")]);
    m_log_progress_isSet = !json[QString("logProgress")].isNull() && m_log_progress_isValid;

    m_log_verbose_isValid = ::OpenAPI::fromJsonValue(m_log_verbose, json[QString("logVerbose")]);
    m_log_verbose_isSet = !json[QString("logVerbose")].isNull() && m_log_verbose_isValid;

    m_output_types_isValid = ::OpenAPI::fromJsonValue(m_output_types, json[QString("outputTypes")]);
    m_output_types_isSet = !json[QString("outputTypes")].isNull() && m_output_types_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_publish_content_link_isValid = ::OpenAPI::fromJsonValue(m_publish_content_link, json[QString("publishContentLink")]);
    m_publish_content_link_isSet = !json[QString("publishContentLink")].isNull() && m_publish_content_link_isValid;

    m_runbook_type_isValid = ::OpenAPI::fromJsonValue(m_runbook_type, json[QString("runbookType")]);
    m_runbook_type_isSet = !json[QString("runbookType")].isNull() && m_runbook_type_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIRunbookProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRunbookProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_draft.isSet()) {
        obj.insert(QString("draft"), ::OpenAPI::toJsonValue(m_draft));
    }
    if (m_job_count_isSet) {
        obj.insert(QString("jobCount"), ::OpenAPI::toJsonValue(m_job_count));
    }
    if (m_last_modified_by_isSet) {
        obj.insert(QString("lastModifiedBy"), ::OpenAPI::toJsonValue(m_last_modified_by));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("lastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_log_activity_trace_isSet) {
        obj.insert(QString("logActivityTrace"), ::OpenAPI::toJsonValue(m_log_activity_trace));
    }
    if (m_log_progress_isSet) {
        obj.insert(QString("logProgress"), ::OpenAPI::toJsonValue(m_log_progress));
    }
    if (m_log_verbose_isSet) {
        obj.insert(QString("logVerbose"), ::OpenAPI::toJsonValue(m_log_verbose));
    }
    if (m_output_types.size() > 0) {
        obj.insert(QString("outputTypes"), ::OpenAPI::toJsonValue(m_output_types));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_publish_content_link.isSet()) {
        obj.insert(QString("publishContentLink"), ::OpenAPI::toJsonValue(m_publish_content_link));
    }
    if (m_runbook_type_isSet) {
        obj.insert(QString("runbookType"), ::OpenAPI::toJsonValue(m_runbook_type));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QDateTime OAIRunbookProperties::getCreationTime() const {
    return m_creation_time;
}
void OAIRunbookProperties::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIRunbookProperties::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIRunbookProperties::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIRunbookProperties::getDescription() const {
    return m_description;
}
void OAIRunbookProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRunbookProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRunbookProperties::is_description_Valid() const{
    return m_description_isValid;
}

OAIRunbookDraft OAIRunbookProperties::getDraft() const {
    return m_draft;
}
void OAIRunbookProperties::setDraft(const OAIRunbookDraft &draft) {
    m_draft = draft;
    m_draft_isSet = true;
}

bool OAIRunbookProperties::is_draft_Set() const{
    return m_draft_isSet;
}

bool OAIRunbookProperties::is_draft_Valid() const{
    return m_draft_isValid;
}

qint32 OAIRunbookProperties::getJobCount() const {
    return m_job_count;
}
void OAIRunbookProperties::setJobCount(const qint32 &job_count) {
    m_job_count = job_count;
    m_job_count_isSet = true;
}

bool OAIRunbookProperties::is_job_count_Set() const{
    return m_job_count_isSet;
}

bool OAIRunbookProperties::is_job_count_Valid() const{
    return m_job_count_isValid;
}

QString OAIRunbookProperties::getLastModifiedBy() const {
    return m_last_modified_by;
}
void OAIRunbookProperties::setLastModifiedBy(const QString &last_modified_by) {
    m_last_modified_by = last_modified_by;
    m_last_modified_by_isSet = true;
}

bool OAIRunbookProperties::is_last_modified_by_Set() const{
    return m_last_modified_by_isSet;
}

bool OAIRunbookProperties::is_last_modified_by_Valid() const{
    return m_last_modified_by_isValid;
}

QDateTime OAIRunbookProperties::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIRunbookProperties::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIRunbookProperties::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIRunbookProperties::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

qint32 OAIRunbookProperties::getLogActivityTrace() const {
    return m_log_activity_trace;
}
void OAIRunbookProperties::setLogActivityTrace(const qint32 &log_activity_trace) {
    m_log_activity_trace = log_activity_trace;
    m_log_activity_trace_isSet = true;
}

bool OAIRunbookProperties::is_log_activity_trace_Set() const{
    return m_log_activity_trace_isSet;
}

bool OAIRunbookProperties::is_log_activity_trace_Valid() const{
    return m_log_activity_trace_isValid;
}

bool OAIRunbookProperties::isLogProgress() const {
    return m_log_progress;
}
void OAIRunbookProperties::setLogProgress(const bool &log_progress) {
    m_log_progress = log_progress;
    m_log_progress_isSet = true;
}

bool OAIRunbookProperties::is_log_progress_Set() const{
    return m_log_progress_isSet;
}

bool OAIRunbookProperties::is_log_progress_Valid() const{
    return m_log_progress_isValid;
}

bool OAIRunbookProperties::isLogVerbose() const {
    return m_log_verbose;
}
void OAIRunbookProperties::setLogVerbose(const bool &log_verbose) {
    m_log_verbose = log_verbose;
    m_log_verbose_isSet = true;
}

bool OAIRunbookProperties::is_log_verbose_Set() const{
    return m_log_verbose_isSet;
}

bool OAIRunbookProperties::is_log_verbose_Valid() const{
    return m_log_verbose_isValid;
}

QList<QString> OAIRunbookProperties::getOutputTypes() const {
    return m_output_types;
}
void OAIRunbookProperties::setOutputTypes(const QList<QString> &output_types) {
    m_output_types = output_types;
    m_output_types_isSet = true;
}

bool OAIRunbookProperties::is_output_types_Set() const{
    return m_output_types_isSet;
}

bool OAIRunbookProperties::is_output_types_Valid() const{
    return m_output_types_isValid;
}

QMap<QString, OAIRunbookParameter> OAIRunbookProperties::getParameters() const {
    return m_parameters;
}
void OAIRunbookProperties::setParameters(const QMap<QString, OAIRunbookParameter> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIRunbookProperties::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIRunbookProperties::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAIRunbookProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIRunbookProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIRunbookProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIRunbookProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIContentLink OAIRunbookProperties::getPublishContentLink() const {
    return m_publish_content_link;
}
void OAIRunbookProperties::setPublishContentLink(const OAIContentLink &publish_content_link) {
    m_publish_content_link = publish_content_link;
    m_publish_content_link_isSet = true;
}

bool OAIRunbookProperties::is_publish_content_link_Set() const{
    return m_publish_content_link_isSet;
}

bool OAIRunbookProperties::is_publish_content_link_Valid() const{
    return m_publish_content_link_isValid;
}

QString OAIRunbookProperties::getRunbookType() const {
    return m_runbook_type;
}
void OAIRunbookProperties::setRunbookType(const QString &runbook_type) {
    m_runbook_type = runbook_type;
    m_runbook_type_isSet = true;
}

bool OAIRunbookProperties::is_runbook_type_Set() const{
    return m_runbook_type_isSet;
}

bool OAIRunbookProperties::is_runbook_type_Valid() const{
    return m_runbook_type_isValid;
}

QString OAIRunbookProperties::getState() const {
    return m_state;
}
void OAIRunbookProperties::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIRunbookProperties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIRunbookProperties::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIRunbookProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_activity_trace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_verbose_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_content_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_runbook_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRunbookProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
