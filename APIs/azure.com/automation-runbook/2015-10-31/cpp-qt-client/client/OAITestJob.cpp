/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestJob::OAITestJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestJob::OAITestJob() {
    this->initializeModel();
}

OAITestJob::~OAITestJob() {}

void OAITestJob::initializeModel() {

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_exception_isSet = false;
    m_exception_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_last_status_modified_time_isSet = false;
    m_last_status_modified_time_isValid = false;

    m_log_activity_trace_isSet = false;
    m_log_activity_trace_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_run_on_isSet = false;
    m_run_on_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_details_isSet = false;
    m_status_details_isValid = false;
}

void OAITestJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestJob::fromJsonObject(QJsonObject json) {

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_exception_isValid = ::OpenAPI::fromJsonValue(m_exception, json[QString("exception")]);
    m_exception_isSet = !json[QString("exception")].isNull() && m_exception_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("lastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("lastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_last_status_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_status_modified_time, json[QString("lastStatusModifiedTime")]);
    m_last_status_modified_time_isSet = !json[QString("lastStatusModifiedTime")].isNull() && m_last_status_modified_time_isValid;

    m_log_activity_trace_isValid = ::OpenAPI::fromJsonValue(m_log_activity_trace, json[QString("logActivityTrace")]);
    m_log_activity_trace_isSet = !json[QString("logActivityTrace")].isNull() && m_log_activity_trace_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_run_on_isValid = ::OpenAPI::fromJsonValue(m_run_on, json[QString("runOn")]);
    m_run_on_isSet = !json[QString("runOn")].isNull() && m_run_on_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_details_isValid = ::OpenAPI::fromJsonValue(m_status_details, json[QString("statusDetails")]);
    m_status_details_isSet = !json[QString("statusDetails")].isNull() && m_status_details_isValid;
}

QString OAITestJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestJob::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_exception_isSet) {
        obj.insert(QString("exception"), ::OpenAPI::toJsonValue(m_exception));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("lastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_last_status_modified_time_isSet) {
        obj.insert(QString("lastStatusModifiedTime"), ::OpenAPI::toJsonValue(m_last_status_modified_time));
    }
    if (m_log_activity_trace_isSet) {
        obj.insert(QString("logActivityTrace"), ::OpenAPI::toJsonValue(m_log_activity_trace));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_run_on_isSet) {
        obj.insert(QString("runOn"), ::OpenAPI::toJsonValue(m_run_on));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_details_isSet) {
        obj.insert(QString("statusDetails"), ::OpenAPI::toJsonValue(m_status_details));
    }
    return obj;
}

QDateTime OAITestJob::getCreationTime() const {
    return m_creation_time;
}
void OAITestJob::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAITestJob::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAITestJob::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAITestJob::getEndTime() const {
    return m_end_time;
}
void OAITestJob::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAITestJob::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAITestJob::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAITestJob::getException() const {
    return m_exception;
}
void OAITestJob::setException(const QString &exception) {
    m_exception = exception;
    m_exception_isSet = true;
}

bool OAITestJob::is_exception_Set() const{
    return m_exception_isSet;
}

bool OAITestJob::is_exception_Valid() const{
    return m_exception_isValid;
}

QDateTime OAITestJob::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAITestJob::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAITestJob::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAITestJob::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QDateTime OAITestJob::getLastStatusModifiedTime() const {
    return m_last_status_modified_time;
}
void OAITestJob::setLastStatusModifiedTime(const QDateTime &last_status_modified_time) {
    m_last_status_modified_time = last_status_modified_time;
    m_last_status_modified_time_isSet = true;
}

bool OAITestJob::is_last_status_modified_time_Set() const{
    return m_last_status_modified_time_isSet;
}

bool OAITestJob::is_last_status_modified_time_Valid() const{
    return m_last_status_modified_time_isValid;
}

qint32 OAITestJob::getLogActivityTrace() const {
    return m_log_activity_trace;
}
void OAITestJob::setLogActivityTrace(const qint32 &log_activity_trace) {
    m_log_activity_trace = log_activity_trace;
    m_log_activity_trace_isSet = true;
}

bool OAITestJob::is_log_activity_trace_Set() const{
    return m_log_activity_trace_isSet;
}

bool OAITestJob::is_log_activity_trace_Valid() const{
    return m_log_activity_trace_isValid;
}

QMap<QString, QString> OAITestJob::getParameters() const {
    return m_parameters;
}
void OAITestJob::setParameters(const QMap<QString, QString> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAITestJob::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAITestJob::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAITestJob::getRunOn() const {
    return m_run_on;
}
void OAITestJob::setRunOn(const QString &run_on) {
    m_run_on = run_on;
    m_run_on_isSet = true;
}

bool OAITestJob::is_run_on_Set() const{
    return m_run_on_isSet;
}

bool OAITestJob::is_run_on_Valid() const{
    return m_run_on_isValid;
}

QDateTime OAITestJob::getStartTime() const {
    return m_start_time;
}
void OAITestJob::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAITestJob::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAITestJob::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAITestJob::getStatus() const {
    return m_status;
}
void OAITestJob::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITestJob::is_status_Set() const{
    return m_status_isSet;
}

bool OAITestJob::is_status_Valid() const{
    return m_status_isValid;
}

QString OAITestJob::getStatusDetails() const {
    return m_status_details;
}
void OAITestJob::setStatusDetails(const QString &status_details) {
    m_status_details = status_details;
    m_status_details_isSet = true;
}

bool OAITestJob::is_status_details_Set() const{
    return m_status_details_isSet;
}

bool OAITestJob::is_status_details_Valid() const{
    return m_status_details_isValid;
}

bool OAITestJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_status_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_activity_trace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_details_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
