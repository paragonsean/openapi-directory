/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITestJobApi_H
#define OAI_OAITestJobApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRunbook_ListByAutomationAccount_default_response.h"
#include "OAITestJob.h"
#include "OAITestJobCreateParameters.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITestJobApi : public QObject {
    Q_OBJECT

public:
    OAITestJobApi(const int timeOut = 0);
    ~OAITestJobApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  runbook_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAITestJobCreateParameters [required]
    */
    virtual void testJobCreate(const QString &subscription_id, const QString &resource_group_name, const QString &automation_account_name, const QString &runbook_name, const QString &api_version, const OAITestJobCreateParameters &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  runbook_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void testJobGet(const QString &subscription_id, const QString &resource_group_name, const QString &automation_account_name, const QString &runbook_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  runbook_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void testJobResume(const QString &subscription_id, const QString &resource_group_name, const QString &automation_account_name, const QString &runbook_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  runbook_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void testJobStop(const QString &subscription_id, const QString &resource_group_name, const QString &automation_account_name, const QString &runbook_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  runbook_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void testJobSuspend(const QString &subscription_id, const QString &resource_group_name, const QString &automation_account_name, const QString &runbook_name, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void testJobCreateCallback(OAIHttpRequestWorker *worker);
    void testJobGetCallback(OAIHttpRequestWorker *worker);
    void testJobResumeCallback(OAIHttpRequestWorker *worker);
    void testJobStopCallback(OAIHttpRequestWorker *worker);
    void testJobSuspendCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void testJobCreateSignal(OAITestJob summary);
    void testJobGetSignal(OAITestJob summary);
    void testJobResumeSignal();
    void testJobStopSignal();
    void testJobSuspendSignal();


    void testJobCreateSignalFull(OAIHttpRequestWorker *worker, OAITestJob summary);
    void testJobGetSignalFull(OAIHttpRequestWorker *worker, OAITestJob summary);
    void testJobResumeSignalFull(OAIHttpRequestWorker *worker);
    void testJobStopSignalFull(OAIHttpRequestWorker *worker);
    void testJobSuspendSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use testJobCreateSignalError() instead")
    void testJobCreateSignalE(OAITestJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testJobCreateSignalError(OAITestJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testJobGetSignalError() instead")
    void testJobGetSignalE(OAITestJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testJobGetSignalError(OAITestJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testJobResumeSignalError() instead")
    void testJobResumeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void testJobResumeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testJobStopSignalError() instead")
    void testJobStopSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void testJobStopSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testJobSuspendSignalError() instead")
    void testJobSuspendSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void testJobSuspendSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use testJobCreateSignalErrorFull() instead")
    void testJobCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testJobCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testJobGetSignalErrorFull() instead")
    void testJobGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testJobGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testJobResumeSignalErrorFull() instead")
    void testJobResumeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testJobResumeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testJobStopSignalErrorFull() instead")
    void testJobStopSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testJobStopSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testJobSuspendSignalErrorFull() instead")
    void testJobSuspendSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testJobSuspendSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
