/*
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ContentLink;
import org.openapitools.client.model.RunbookParameter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RunbookDraft
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:14.938745-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RunbookDraft {
  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_DRAFT_CONTENT_LINK = "draftContentLink";
  @SerializedName(SERIALIZED_NAME_DRAFT_CONTENT_LINK)
  private ContentLink draftContentLink;

  public static final String SERIALIZED_NAME_IN_EDIT = "inEdit";
  @SerializedName(SERIALIZED_NAME_IN_EDIT)
  private Boolean inEdit;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "lastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private OffsetDateTime lastModifiedTime;

  public static final String SERIALIZED_NAME_OUTPUT_TYPES = "outputTypes";
  @SerializedName(SERIALIZED_NAME_OUTPUT_TYPES)
  private List<String> outputTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map<String, RunbookParameter> parameters = new HashMap<>();

  public RunbookDraft() {
  }

  public RunbookDraft creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Gets or sets the creation time of the runbook draft.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public RunbookDraft draftContentLink(ContentLink draftContentLink) {
    this.draftContentLink = draftContentLink;
    return this;
  }

  /**
   * Get draftContentLink
   * @return draftContentLink
   */
  @javax.annotation.Nullable
  public ContentLink getDraftContentLink() {
    return draftContentLink;
  }

  public void setDraftContentLink(ContentLink draftContentLink) {
    this.draftContentLink = draftContentLink;
  }


  public RunbookDraft inEdit(Boolean inEdit) {
    this.inEdit = inEdit;
    return this;
  }

  /**
   * Gets or sets whether runbook is in edit mode.
   * @return inEdit
   */
  @javax.annotation.Nullable
  public Boolean getInEdit() {
    return inEdit;
  }

  public void setInEdit(Boolean inEdit) {
    this.inEdit = inEdit;
  }


  public RunbookDraft lastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
    return this;
  }

  /**
   * Gets or sets the last modified time of the runbook draft.
   * @return lastModifiedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedTime() {
    return lastModifiedTime;
  }

  public void setLastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
  }


  public RunbookDraft outputTypes(List<String> outputTypes) {
    this.outputTypes = outputTypes;
    return this;
  }

  public RunbookDraft addOutputTypesItem(String outputTypesItem) {
    if (this.outputTypes == null) {
      this.outputTypes = new ArrayList<>();
    }
    this.outputTypes.add(outputTypesItem);
    return this;
  }

  /**
   * Gets or sets the runbook output types.
   * @return outputTypes
   */
  @javax.annotation.Nullable
  public List<String> getOutputTypes() {
    return outputTypes;
  }

  public void setOutputTypes(List<String> outputTypes) {
    this.outputTypes = outputTypes;
  }


  public RunbookDraft parameters(Map<String, RunbookParameter> parameters) {
    this.parameters = parameters;
    return this;
  }

  public RunbookDraft putParametersItem(String key, RunbookParameter parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

  /**
   * Gets or sets the runbook draft parameters.
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map<String, RunbookParameter> getParameters() {
    return parameters;
  }

  public void setParameters(Map<String, RunbookParameter> parameters) {
    this.parameters = parameters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunbookDraft runbookDraft = (RunbookDraft) o;
    return Objects.equals(this.creationTime, runbookDraft.creationTime) &&
        Objects.equals(this.draftContentLink, runbookDraft.draftContentLink) &&
        Objects.equals(this.inEdit, runbookDraft.inEdit) &&
        Objects.equals(this.lastModifiedTime, runbookDraft.lastModifiedTime) &&
        Objects.equals(this.outputTypes, runbookDraft.outputTypes) &&
        Objects.equals(this.parameters, runbookDraft.parameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationTime, draftContentLink, inEdit, lastModifiedTime, outputTypes, parameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunbookDraft {\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    draftContentLink: ").append(toIndentedString(draftContentLink)).append("\n");
    sb.append("    inEdit: ").append(toIndentedString(inEdit)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    outputTypes: ").append(toIndentedString(outputTypes)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationTime");
    openapiFields.add("draftContentLink");
    openapiFields.add("inEdit");
    openapiFields.add("lastModifiedTime");
    openapiFields.add("outputTypes");
    openapiFields.add("parameters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RunbookDraft
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RunbookDraft.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RunbookDraft is not found in the empty JSON string", RunbookDraft.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RunbookDraft.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RunbookDraft` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `draftContentLink`
      if (jsonObj.get("draftContentLink") != null && !jsonObj.get("draftContentLink").isJsonNull()) {
        ContentLink.validateJsonElement(jsonObj.get("draftContentLink"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("outputTypes") != null && !jsonObj.get("outputTypes").isJsonNull() && !jsonObj.get("outputTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputTypes` to be an array in the JSON string but got `%s`", jsonObj.get("outputTypes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RunbookDraft.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RunbookDraft' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RunbookDraft> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RunbookDraft.class));

       return (TypeAdapter<T>) new TypeAdapter<RunbookDraft>() {
           @Override
           public void write(JsonWriter out, RunbookDraft value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RunbookDraft read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RunbookDraft given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RunbookDraft
   * @throws IOException if the JSON string is invalid with respect to RunbookDraft
   */
  public static RunbookDraft fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RunbookDraft.class);
  }

  /**
   * Convert an instance of RunbookDraft to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

