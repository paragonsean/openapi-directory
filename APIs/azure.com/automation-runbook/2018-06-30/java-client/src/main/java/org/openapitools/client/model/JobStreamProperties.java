/*
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Definition of the job stream.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:14.938745-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobStreamProperties {
  public static final String SERIALIZED_NAME_JOB_STREAM_ID = "jobStreamId";
  @SerializedName(SERIALIZED_NAME_JOB_STREAM_ID)
  private String jobStreamId;

  public static final String SERIALIZED_NAME_STREAM_TEXT = "streamText";
  @SerializedName(SERIALIZED_NAME_STREAM_TEXT)
  private String streamText;

  /**
   * Gets or sets the stream type.
   */
  @JsonAdapter(StreamTypeEnum.Adapter.class)
  public enum StreamTypeEnum {
    PROGRESS("Progress"),
    
    OUTPUT("Output"),
    
    WARNING("Warning"),
    
    ERROR("Error"),
    
    DEBUG("Debug"),
    
    VERBOSE("Verbose"),
    
    ANY("Any");

    private String value;

    StreamTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StreamTypeEnum fromValue(String value) {
      for (StreamTypeEnum b : StreamTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StreamTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StreamTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StreamTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StreamTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StreamTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STREAM_TYPE = "streamType";
  @SerializedName(SERIALIZED_NAME_STREAM_TYPE)
  private StreamTypeEnum streamType;

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private String summary;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private OffsetDateTime time;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Map<String, Object> value = new HashMap<>();

  public JobStreamProperties() {
  }

  public JobStreamProperties jobStreamId(String jobStreamId) {
    this.jobStreamId = jobStreamId;
    return this;
  }

  /**
   * Gets or sets the id of the job stream.
   * @return jobStreamId
   */
  @javax.annotation.Nullable
  public String getJobStreamId() {
    return jobStreamId;
  }

  public void setJobStreamId(String jobStreamId) {
    this.jobStreamId = jobStreamId;
  }


  public JobStreamProperties streamText(String streamText) {
    this.streamText = streamText;
    return this;
  }

  /**
   * Gets or sets the stream text.
   * @return streamText
   */
  @javax.annotation.Nullable
  public String getStreamText() {
    return streamText;
  }

  public void setStreamText(String streamText) {
    this.streamText = streamText;
  }


  public JobStreamProperties streamType(StreamTypeEnum streamType) {
    this.streamType = streamType;
    return this;
  }

  /**
   * Gets or sets the stream type.
   * @return streamType
   */
  @javax.annotation.Nullable
  public StreamTypeEnum getStreamType() {
    return streamType;
  }

  public void setStreamType(StreamTypeEnum streamType) {
    this.streamType = streamType;
  }


  public JobStreamProperties summary(String summary) {
    this.summary = summary;
    return this;
  }

  /**
   * Gets or sets the summary.
   * @return summary
   */
  @javax.annotation.Nullable
  public String getSummary() {
    return summary;
  }

  public void setSummary(String summary) {
    this.summary = summary;
  }


  public JobStreamProperties time(OffsetDateTime time) {
    this.time = time;
    return this;
  }

  /**
   * Gets or sets the creation time of the job.
   * @return time
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTime() {
    return time;
  }

  public void setTime(OffsetDateTime time) {
    this.time = time;
  }


  public JobStreamProperties value(Map<String, Object> value) {
    this.value = value;
    return this;
  }

  public JobStreamProperties putValueItem(String key, Object valueItem) {
    if (this.value == null) {
      this.value = new HashMap<>();
    }
    this.value.put(key, valueItem);
    return this;
  }

  /**
   * Gets or sets the values of the job stream.
   * @return value
   */
  @javax.annotation.Nullable
  public Map<String, Object> getValue() {
    return value;
  }

  public void setValue(Map<String, Object> value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobStreamProperties jobStreamProperties = (JobStreamProperties) o;
    return Objects.equals(this.jobStreamId, jobStreamProperties.jobStreamId) &&
        Objects.equals(this.streamText, jobStreamProperties.streamText) &&
        Objects.equals(this.streamType, jobStreamProperties.streamType) &&
        Objects.equals(this.summary, jobStreamProperties.summary) &&
        Objects.equals(this.time, jobStreamProperties.time) &&
        Objects.equals(this.value, jobStreamProperties.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobStreamId, streamText, streamType, summary, time, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobStreamProperties {\n");
    sb.append("    jobStreamId: ").append(toIndentedString(jobStreamId)).append("\n");
    sb.append("    streamText: ").append(toIndentedString(streamText)).append("\n");
    sb.append("    streamType: ").append(toIndentedString(streamType)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("jobStreamId");
    openapiFields.add("streamText");
    openapiFields.add("streamType");
    openapiFields.add("summary");
    openapiFields.add("time");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobStreamProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobStreamProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobStreamProperties is not found in the empty JSON string", JobStreamProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobStreamProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobStreamProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("jobStreamId") != null && !jsonObj.get("jobStreamId").isJsonNull()) && !jsonObj.get("jobStreamId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobStreamId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobStreamId").toString()));
      }
      if ((jsonObj.get("streamText") != null && !jsonObj.get("streamText").isJsonNull()) && !jsonObj.get("streamText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streamText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streamText").toString()));
      }
      if ((jsonObj.get("streamType") != null && !jsonObj.get("streamType").isJsonNull()) && !jsonObj.get("streamType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streamType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streamType").toString()));
      }
      // validate the optional field `streamType`
      if (jsonObj.get("streamType") != null && !jsonObj.get("streamType").isJsonNull()) {
        StreamTypeEnum.validateJsonElement(jsonObj.get("streamType"));
      }
      if ((jsonObj.get("summary") != null && !jsonObj.get("summary").isJsonNull()) && !jsonObj.get("summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summary").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobStreamProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobStreamProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobStreamProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobStreamProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<JobStreamProperties>() {
           @Override
           public void write(JsonWriter out, JobStreamProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobStreamProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobStreamProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobStreamProperties
   * @throws IOException if the JSON string is invalid with respect to JobStreamProperties
   */
  public static JobStreamProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobStreamProperties.class);
  }

  /**
   * Convert an instance of JobStreamProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

