# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TestJob(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_time: datetime=None, end_time: datetime=None, exception: str=None, last_modified_time: datetime=None, last_status_modified_time: datetime=None, log_activity_trace: int=None, parameters: Dict[str, str]=None, run_on: str=None, start_time: datetime=None, status: str=None, status_details: str=None):
        """TestJob - a model defined in OpenAPI

        :param creation_time: The creation_time of this TestJob.
        :param end_time: The end_time of this TestJob.
        :param exception: The exception of this TestJob.
        :param last_modified_time: The last_modified_time of this TestJob.
        :param last_status_modified_time: The last_status_modified_time of this TestJob.
        :param log_activity_trace: The log_activity_trace of this TestJob.
        :param parameters: The parameters of this TestJob.
        :param run_on: The run_on of this TestJob.
        :param start_time: The start_time of this TestJob.
        :param status: The status of this TestJob.
        :param status_details: The status_details of this TestJob.
        """
        self.openapi_types = {
            'creation_time': datetime,
            'end_time': datetime,
            'exception': str,
            'last_modified_time': datetime,
            'last_status_modified_time': datetime,
            'log_activity_trace': int,
            'parameters': Dict[str, str],
            'run_on': str,
            'start_time': datetime,
            'status': str,
            'status_details': str
        }

        self.attribute_map = {
            'creation_time': 'creationTime',
            'end_time': 'endTime',
            'exception': 'exception',
            'last_modified_time': 'lastModifiedTime',
            'last_status_modified_time': 'lastStatusModifiedTime',
            'log_activity_trace': 'logActivityTrace',
            'parameters': 'parameters',
            'run_on': 'runOn',
            'start_time': 'startTime',
            'status': 'status',
            'status_details': 'statusDetails'
        }

        self._creation_time = creation_time
        self._end_time = end_time
        self._exception = exception
        self._last_modified_time = last_modified_time
        self._last_status_modified_time = last_status_modified_time
        self._log_activity_trace = log_activity_trace
        self._parameters = parameters
        self._run_on = run_on
        self._start_time = start_time
        self._status = status
        self._status_details = status_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestJob':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestJob of this TestJob.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_time(self):
        """Gets the creation_time of this TestJob.

        Gets or sets the creation time of the test job.

        :return: The creation_time of this TestJob.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this TestJob.

        Gets or sets the creation time of the test job.

        :param creation_time: The creation_time of this TestJob.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def end_time(self):
        """Gets the end_time of this TestJob.

        Gets or sets the end time of the test job.

        :return: The end_time of this TestJob.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this TestJob.

        Gets or sets the end time of the test job.

        :param end_time: The end_time of this TestJob.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def exception(self):
        """Gets the exception of this TestJob.

        Gets or sets the exception of the test job.

        :return: The exception of this TestJob.
        :rtype: str
        """
        return self._exception

    @exception.setter
    def exception(self, exception):
        """Sets the exception of this TestJob.

        Gets or sets the exception of the test job.

        :param exception: The exception of this TestJob.
        :type exception: str
        """

        self._exception = exception

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this TestJob.

        Gets or sets the last modified time of the test job.

        :return: The last_modified_time of this TestJob.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this TestJob.

        Gets or sets the last modified time of the test job.

        :param last_modified_time: The last_modified_time of this TestJob.
        :type last_modified_time: datetime
        """

        self._last_modified_time = last_modified_time

    @property
    def last_status_modified_time(self):
        """Gets the last_status_modified_time of this TestJob.

        Gets or sets the last status modified time of the test job.

        :return: The last_status_modified_time of this TestJob.
        :rtype: datetime
        """
        return self._last_status_modified_time

    @last_status_modified_time.setter
    def last_status_modified_time(self, last_status_modified_time):
        """Sets the last_status_modified_time of this TestJob.

        Gets or sets the last status modified time of the test job.

        :param last_status_modified_time: The last_status_modified_time of this TestJob.
        :type last_status_modified_time: datetime
        """

        self._last_status_modified_time = last_status_modified_time

    @property
    def log_activity_trace(self):
        """Gets the log_activity_trace of this TestJob.

        The activity-level tracing options of the runbook.

        :return: The log_activity_trace of this TestJob.
        :rtype: int
        """
        return self._log_activity_trace

    @log_activity_trace.setter
    def log_activity_trace(self, log_activity_trace):
        """Sets the log_activity_trace of this TestJob.

        The activity-level tracing options of the runbook.

        :param log_activity_trace: The log_activity_trace of this TestJob.
        :type log_activity_trace: int
        """

        self._log_activity_trace = log_activity_trace

    @property
    def parameters(self):
        """Gets the parameters of this TestJob.

        Gets or sets the parameters of the test job.

        :return: The parameters of this TestJob.
        :rtype: Dict[str, str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this TestJob.

        Gets or sets the parameters of the test job.

        :param parameters: The parameters of this TestJob.
        :type parameters: Dict[str, str]
        """

        self._parameters = parameters

    @property
    def run_on(self):
        """Gets the run_on of this TestJob.

        Gets or sets the runOn which specifies the group name where the job is to be executed.

        :return: The run_on of this TestJob.
        :rtype: str
        """
        return self._run_on

    @run_on.setter
    def run_on(self, run_on):
        """Sets the run_on of this TestJob.

        Gets or sets the runOn which specifies the group name where the job is to be executed.

        :param run_on: The run_on of this TestJob.
        :type run_on: str
        """

        self._run_on = run_on

    @property
    def start_time(self):
        """Gets the start_time of this TestJob.

        Gets or sets the start time of the test job.

        :return: The start_time of this TestJob.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this TestJob.

        Gets or sets the start time of the test job.

        :param start_time: The start_time of this TestJob.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this TestJob.

        Gets or sets the status of the test job.

        :return: The status of this TestJob.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TestJob.

        Gets or sets the status of the test job.

        :param status: The status of this TestJob.
        :type status: str
        """

        self._status = status

    @property
    def status_details(self):
        """Gets the status_details of this TestJob.

        Gets or sets the status details of the test job.

        :return: The status_details of this TestJob.
        :rtype: str
        """
        return self._status_details

    @status_details.setter
    def status_details(self, status_details):
        """Sets the status_details of this TestJob.

        Gets or sets the status details of the test job.

        :param status_details: The status_details of this TestJob.
        :type status_details: str
        """

        self._status_details = status_details
