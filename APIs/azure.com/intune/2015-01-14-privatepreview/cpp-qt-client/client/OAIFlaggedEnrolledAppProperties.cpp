/**
 * IntuneResourceManagementClient
 * Microsoft.Intune Resource provider Api features in the swagger-2.0 specification
 *
 * The version of the OpenAPI document: 2015-01-14-privatepreview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlaggedEnrolledAppProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlaggedEnrolledAppProperties::OAIFlaggedEnrolledAppProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlaggedEnrolledAppProperties::OAIFlaggedEnrolledAppProperties() {
    this->initializeModel();
}

OAIFlaggedEnrolledAppProperties::~OAIFlaggedEnrolledAppProperties() {}

void OAIFlaggedEnrolledAppProperties::initializeModel() {

    m_device_type_isSet = false;
    m_device_type_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;
}

void OAIFlaggedEnrolledAppProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlaggedEnrolledAppProperties::fromJsonObject(QJsonObject json) {

    m_device_type_isValid = ::OpenAPI::fromJsonValue(m_device_type, json[QString("deviceType")]);
    m_device_type_isSet = !json[QString("deviceType")].isNull() && m_device_type_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("lastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("lastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;
}

QString OAIFlaggedEnrolledAppProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlaggedEnrolledAppProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_device_type_isSet) {
        obj.insert(QString("deviceType"), ::OpenAPI::toJsonValue(m_device_type));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("lastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_platform_isSet) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    return obj;
}

QString OAIFlaggedEnrolledAppProperties::getDeviceType() const {
    return m_device_type;
}
void OAIFlaggedEnrolledAppProperties::setDeviceType(const QString &device_type) {
    m_device_type = device_type;
    m_device_type_isSet = true;
}

bool OAIFlaggedEnrolledAppProperties::is_device_type_Set() const{
    return m_device_type_isSet;
}

bool OAIFlaggedEnrolledAppProperties::is_device_type_Valid() const{
    return m_device_type_isValid;
}

QList<OAIFlaggedEnrolledAppError> OAIFlaggedEnrolledAppProperties::getErrors() const {
    return m_errors;
}
void OAIFlaggedEnrolledAppProperties::setErrors(const QList<OAIFlaggedEnrolledAppError> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIFlaggedEnrolledAppProperties::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIFlaggedEnrolledAppProperties::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAIFlaggedEnrolledAppProperties::getFriendlyName() const {
    return m_friendly_name;
}
void OAIFlaggedEnrolledAppProperties::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIFlaggedEnrolledAppProperties::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIFlaggedEnrolledAppProperties::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIFlaggedEnrolledAppProperties::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIFlaggedEnrolledAppProperties::setLastModifiedTime(const QString &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIFlaggedEnrolledAppProperties::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIFlaggedEnrolledAppProperties::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QString OAIFlaggedEnrolledAppProperties::getPlatform() const {
    return m_platform;
}
void OAIFlaggedEnrolledAppProperties::setPlatform(const QString &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIFlaggedEnrolledAppProperties::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIFlaggedEnrolledAppProperties::is_platform_Valid() const{
    return m_platform_isValid;
}

bool OAIFlaggedEnrolledAppProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlaggedEnrolledAppProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
