/**
 * IntuneResourceManagementClient
 * Microsoft.Intune Resource provider Api features in the swagger-2.0 specification
 *
 * The version of the OpenAPI document: 2015-01-14-privatepreview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatusesProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatusesProperties::OAIStatusesProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatusesProperties::OAIStatusesProperties() {
    this->initializeModel();
}

OAIStatusesProperties::~OAIStatusesProperties() {}

void OAIStatusesProperties::initializeModel() {

    m_deployed_policies_isSet = false;
    m_deployed_policies_isValid = false;

    m_enrolled_users_isSet = false;
    m_enrolled_users_isValid = false;

    m_flagged_users_isSet = false;
    m_flagged_users_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_policy_applied_users_isSet = false;
    m_policy_applied_users_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_wipe_failed_apps_isSet = false;
    m_wipe_failed_apps_isValid = false;

    m_wipe_pending_apps_isSet = false;
    m_wipe_pending_apps_isValid = false;

    m_wipe_succeeded_apps_isSet = false;
    m_wipe_succeeded_apps_isValid = false;
}

void OAIStatusesProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatusesProperties::fromJsonObject(QJsonObject json) {

    m_deployed_policies_isValid = ::OpenAPI::fromJsonValue(m_deployed_policies, json[QString("deployedPolicies")]);
    m_deployed_policies_isSet = !json[QString("deployedPolicies")].isNull() && m_deployed_policies_isValid;

    m_enrolled_users_isValid = ::OpenAPI::fromJsonValue(m_enrolled_users, json[QString("enrolledUsers")]);
    m_enrolled_users_isSet = !json[QString("enrolledUsers")].isNull() && m_enrolled_users_isValid;

    m_flagged_users_isValid = ::OpenAPI::fromJsonValue(m_flagged_users, json[QString("flaggedUsers")]);
    m_flagged_users_isSet = !json[QString("flaggedUsers")].isNull() && m_flagged_users_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("lastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("lastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_policy_applied_users_isValid = ::OpenAPI::fromJsonValue(m_policy_applied_users, json[QString("policyAppliedUsers")]);
    m_policy_applied_users_isSet = !json[QString("policyAppliedUsers")].isNull() && m_policy_applied_users_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_wipe_failed_apps_isValid = ::OpenAPI::fromJsonValue(m_wipe_failed_apps, json[QString("wipeFailedApps")]);
    m_wipe_failed_apps_isSet = !json[QString("wipeFailedApps")].isNull() && m_wipe_failed_apps_isValid;

    m_wipe_pending_apps_isValid = ::OpenAPI::fromJsonValue(m_wipe_pending_apps, json[QString("wipePendingApps")]);
    m_wipe_pending_apps_isSet = !json[QString("wipePendingApps")].isNull() && m_wipe_pending_apps_isValid;

    m_wipe_succeeded_apps_isValid = ::OpenAPI::fromJsonValue(m_wipe_succeeded_apps, json[QString("wipeSucceededApps")]);
    m_wipe_succeeded_apps_isSet = !json[QString("wipeSucceededApps")].isNull() && m_wipe_succeeded_apps_isValid;
}

QString OAIStatusesProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatusesProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_deployed_policies_isSet) {
        obj.insert(QString("deployedPolicies"), ::OpenAPI::toJsonValue(m_deployed_policies));
    }
    if (m_enrolled_users_isSet) {
        obj.insert(QString("enrolledUsers"), ::OpenAPI::toJsonValue(m_enrolled_users));
    }
    if (m_flagged_users_isSet) {
        obj.insert(QString("flaggedUsers"), ::OpenAPI::toJsonValue(m_flagged_users));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("lastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_policy_applied_users_isSet) {
        obj.insert(QString("policyAppliedUsers"), ::OpenAPI::toJsonValue(m_policy_applied_users));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_wipe_failed_apps_isSet) {
        obj.insert(QString("wipeFailedApps"), ::OpenAPI::toJsonValue(m_wipe_failed_apps));
    }
    if (m_wipe_pending_apps_isSet) {
        obj.insert(QString("wipePendingApps"), ::OpenAPI::toJsonValue(m_wipe_pending_apps));
    }
    if (m_wipe_succeeded_apps_isSet) {
        obj.insert(QString("wipeSucceededApps"), ::OpenAPI::toJsonValue(m_wipe_succeeded_apps));
    }
    return obj;
}

qint32 OAIStatusesProperties::getDeployedPolicies() const {
    return m_deployed_policies;
}
void OAIStatusesProperties::setDeployedPolicies(const qint32 &deployed_policies) {
    m_deployed_policies = deployed_policies;
    m_deployed_policies_isSet = true;
}

bool OAIStatusesProperties::is_deployed_policies_Set() const{
    return m_deployed_policies_isSet;
}

bool OAIStatusesProperties::is_deployed_policies_Valid() const{
    return m_deployed_policies_isValid;
}

qint32 OAIStatusesProperties::getEnrolledUsers() const {
    return m_enrolled_users;
}
void OAIStatusesProperties::setEnrolledUsers(const qint32 &enrolled_users) {
    m_enrolled_users = enrolled_users;
    m_enrolled_users_isSet = true;
}

bool OAIStatusesProperties::is_enrolled_users_Set() const{
    return m_enrolled_users_isSet;
}

bool OAIStatusesProperties::is_enrolled_users_Valid() const{
    return m_enrolled_users_isValid;
}

qint32 OAIStatusesProperties::getFlaggedUsers() const {
    return m_flagged_users;
}
void OAIStatusesProperties::setFlaggedUsers(const qint32 &flagged_users) {
    m_flagged_users = flagged_users;
    m_flagged_users_isSet = true;
}

bool OAIStatusesProperties::is_flagged_users_Set() const{
    return m_flagged_users_isSet;
}

bool OAIStatusesProperties::is_flagged_users_Valid() const{
    return m_flagged_users_isValid;
}

QDateTime OAIStatusesProperties::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIStatusesProperties::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIStatusesProperties::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIStatusesProperties::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

qint32 OAIStatusesProperties::getPolicyAppliedUsers() const {
    return m_policy_applied_users;
}
void OAIStatusesProperties::setPolicyAppliedUsers(const qint32 &policy_applied_users) {
    m_policy_applied_users = policy_applied_users;
    m_policy_applied_users_isSet = true;
}

bool OAIStatusesProperties::is_policy_applied_users_Set() const{
    return m_policy_applied_users_isSet;
}

bool OAIStatusesProperties::is_policy_applied_users_Valid() const{
    return m_policy_applied_users_isValid;
}

QString OAIStatusesProperties::getStatus() const {
    return m_status;
}
void OAIStatusesProperties::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIStatusesProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIStatusesProperties::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIStatusesProperties::getWipeFailedApps() const {
    return m_wipe_failed_apps;
}
void OAIStatusesProperties::setWipeFailedApps(const qint32 &wipe_failed_apps) {
    m_wipe_failed_apps = wipe_failed_apps;
    m_wipe_failed_apps_isSet = true;
}

bool OAIStatusesProperties::is_wipe_failed_apps_Set() const{
    return m_wipe_failed_apps_isSet;
}

bool OAIStatusesProperties::is_wipe_failed_apps_Valid() const{
    return m_wipe_failed_apps_isValid;
}

qint32 OAIStatusesProperties::getWipePendingApps() const {
    return m_wipe_pending_apps;
}
void OAIStatusesProperties::setWipePendingApps(const qint32 &wipe_pending_apps) {
    m_wipe_pending_apps = wipe_pending_apps;
    m_wipe_pending_apps_isSet = true;
}

bool OAIStatusesProperties::is_wipe_pending_apps_Set() const{
    return m_wipe_pending_apps_isSet;
}

bool OAIStatusesProperties::is_wipe_pending_apps_Valid() const{
    return m_wipe_pending_apps_isValid;
}

qint32 OAIStatusesProperties::getWipeSucceededApps() const {
    return m_wipe_succeeded_apps;
}
void OAIStatusesProperties::setWipeSucceededApps(const qint32 &wipe_succeeded_apps) {
    m_wipe_succeeded_apps = wipe_succeeded_apps;
    m_wipe_succeeded_apps_isSet = true;
}

bool OAIStatusesProperties::is_wipe_succeeded_apps_Set() const{
    return m_wipe_succeeded_apps_isSet;
}

bool OAIStatusesProperties::is_wipe_succeeded_apps_Valid() const{
    return m_wipe_succeeded_apps_isValid;
}

bool OAIStatusesProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deployed_policies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enrolled_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flagged_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_applied_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wipe_failed_apps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wipe_pending_apps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wipe_succeeded_apps_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatusesProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
