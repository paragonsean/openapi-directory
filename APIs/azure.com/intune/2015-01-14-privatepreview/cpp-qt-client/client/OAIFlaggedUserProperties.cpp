/**
 * IntuneResourceManagementClient
 * Microsoft.Intune Resource provider Api features in the swagger-2.0 specification
 *
 * The version of the OpenAPI document: 2015-01-14-privatepreview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlaggedUserProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlaggedUserProperties::OAIFlaggedUserProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlaggedUserProperties::OAIFlaggedUserProperties() {
    this->initializeModel();
}

OAIFlaggedUserProperties::~OAIFlaggedUserProperties() {}

void OAIFlaggedUserProperties::initializeModel() {

    m_error_count_isSet = false;
    m_error_count_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;
}

void OAIFlaggedUserProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlaggedUserProperties::fromJsonObject(QJsonObject json) {

    m_error_count_isValid = ::OpenAPI::fromJsonValue(m_error_count, json[QString("errorCount")]);
    m_error_count_isSet = !json[QString("errorCount")].isNull() && m_error_count_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;
}

QString OAIFlaggedUserProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlaggedUserProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_error_count_isSet) {
        obj.insert(QString("errorCount"), ::OpenAPI::toJsonValue(m_error_count));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    return obj;
}

qint32 OAIFlaggedUserProperties::getErrorCount() const {
    return m_error_count;
}
void OAIFlaggedUserProperties::setErrorCount(const qint32 &error_count) {
    m_error_count = error_count;
    m_error_count_isSet = true;
}

bool OAIFlaggedUserProperties::is_error_count_Set() const{
    return m_error_count_isSet;
}

bool OAIFlaggedUserProperties::is_error_count_Valid() const{
    return m_error_count_isValid;
}

QString OAIFlaggedUserProperties::getFriendlyName() const {
    return m_friendly_name;
}
void OAIFlaggedUserProperties::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIFlaggedUserProperties::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIFlaggedUserProperties::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

bool OAIFlaggedUserProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlaggedUserProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
