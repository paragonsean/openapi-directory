/**
 * IntuneResourceManagementClient
 * Microsoft.Intune Resource provider Api features in the swagger-2.0 specification
 *
 * The version of the OpenAPI document: 2015-01-14-privatepreview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAndroidMAMPolicy.h"
#include "OAIAndroidMAMPolicyCollection.h"
#include "OAIApplicationCollection.h"
#include "OAIDevice.h"
#include "OAIDeviceCollection.h"
#include "OAIError.h"
#include "OAIFlaggedEnrolledAppCollection.h"
#include "OAIFlaggedUser.h"
#include "OAIFlaggedUserCollection.h"
#include "OAIGroupsCollection.h"
#include "OAIIOSMAMPolicy.h"
#include "OAIIOSMAMPolicyCollection.h"
#include "OAILocation.h"
#include "OAILocationCollection.h"
#include "OAIMAMPolicyAppIdOrGroupIdPayload.h"
#include "OAIOperationResultCollection.h"
#include "OAIStatusesDefault.h"
#include "OAIWipeDeviceOperationResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  host_name QString [required]
    * @param[in]  policy_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIMAMPolicyAppIdOrGroupIdPayload [required]
    */
    virtual void androidAddAppForMAMPolicy(const QString &host_name, const QString &policy_name, const QString &app_name, const QString &api_version, const OAIMAMPolicyAppIdOrGroupIdPayload &parameters);

    /**
    * @param[in]  host_name QString [required]
    * @param[in]  policy_name QString [required]
    * @param[in]  group_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIMAMPolicyAppIdOrGroupIdPayload [required]
    */
    virtual void androidAddGroupForMAMPolicy(const QString &host_name, const QString &policy_name, const QString &group_id, const QString &api_version, const OAIMAMPolicyAppIdOrGroupIdPayload &parameters);

    /**
    * @param[in]  host_name QString [required]
    * @param[in]  policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIAndroidMAMPolicy [required]
    */
    virtual void androidCreateOrUpdateMAMPolicy(const QString &host_name, const QString &policy_name, const QString &api_version, const OAIAndroidMAMPolicy &parameters);

    /**
    * @param[in]  host_name QString [required]
    * @param[in]  policy_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void androidDeleteAppForMAMPolicy(const QString &host_name, const QString &policy_name, const QString &app_name, const QString &api_version);

    /**
    * @param[in]  host_name QString [required]
    * @param[in]  policy_name QString [required]
    * @param[in]  group_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void androidDeleteGroupForMAMPolicy(const QString &host_name, const QString &policy_name, const QString &group_id, const QString &api_version);

    /**
    * @param[in]  host_name QString [required]
    * @param[in]  policy_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void androidDeleteMAMPolicy(const QString &host_name, const QString &policy_name, const QString &api_version);

    /**
    * @param[in]  host_name QString [required]
    * @param[in]  policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  select QString [optional]
    */
    virtual void androidGetAppForMAMPolicy(const QString &host_name, const QString &policy_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  host_name QString [required]
    * @param[in]  policy_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void androidGetGroupsForMAMPolicy(const QString &host_name, const QString &policy_name, const QString &api_version);

    /**
    * @param[in]  host_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  select QString [optional]
    */
    virtual void androidGetMAMPolicies(const QString &host_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  host_name QString [required]
    * @param[in]  policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  select QString [optional]
    */
    virtual void androidGetMAMPolicyByName(const QString &host_name, const QString &policy_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  host_name QString [required]
    * @param[in]  policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIAndroidMAMPolicy [required]
    */
    virtual void androidPatchMAMPolicy(const QString &host_name, const QString &policy_name, const QString &api_version, const OAIAndroidMAMPolicy &parameters);

    /**
    * @param[in]  host_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  select QString [optional]
    */
    virtual void getApps(const QString &host_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    */
    virtual void getLocationByHostName(const QString &api_version);

    /**
    * @param[in]  api_version QString [required]
    */
    virtual void getLocations(const QString &api_version);

    /**
    * @param[in]  host_name QString [required]
    * @param[in]  user_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  select QString [optional]
    */
    virtual void getMAMFlaggedUserByName(const QString &host_name, const QString &user_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  host_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  select QString [optional]
    */
    virtual void getMAMFlaggedUsers(const QString &host_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  host_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getMAMStatuses(const QString &host_name, const QString &api_version);

    /**
    * @param[in]  host_name QString [required]
    * @param[in]  user_name QString [required]
    * @param[in]  device_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  select QString [optional]
    */
    virtual void getMAMUserDeviceByDeviceName(const QString &host_name, const QString &user_name, const QString &device_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  host_name QString [required]
    * @param[in]  user_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  select QString [optional]
    */
    virtual void getMAMUserDevices(const QString &host_name, const QString &user_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  host_name QString [required]
    * @param[in]  user_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  select QString [optional]
    */
    virtual void getMAMUserFlaggedEnrolledApps(const QString &host_name, const QString &user_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  host_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  select QString [optional]
    */
    virtual void getOperationResults(const QString &host_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  host_name QString [required]
    * @param[in]  policy_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIMAMPolicyAppIdOrGroupIdPayload [required]
    */
    virtual void iosAddAppForMAMPolicy(const QString &host_name, const QString &policy_name, const QString &app_name, const QString &api_version, const OAIMAMPolicyAppIdOrGroupIdPayload &parameters);

    /**
    * @param[in]  host_name QString [required]
    * @param[in]  policy_name QString [required]
    * @param[in]  group_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIMAMPolicyAppIdOrGroupIdPayload [required]
    */
    virtual void iosAddGroupForMAMPolicy(const QString &host_name, const QString &policy_name, const QString &group_id, const QString &api_version, const OAIMAMPolicyAppIdOrGroupIdPayload &parameters);

    /**
    * @param[in]  host_name QString [required]
    * @param[in]  policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIIOSMAMPolicy [required]
    */
    virtual void iosCreateOrUpdateMAMPolicy(const QString &host_name, const QString &policy_name, const QString &api_version, const OAIIOSMAMPolicy &parameters);

    /**
    * @param[in]  host_name QString [required]
    * @param[in]  policy_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void iosDeleteAppForMAMPolicy(const QString &host_name, const QString &policy_name, const QString &app_name, const QString &api_version);

    /**
    * @param[in]  host_name QString [required]
    * @param[in]  policy_name QString [required]
    * @param[in]  group_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void iosDeleteGroupForMAMPolicy(const QString &host_name, const QString &policy_name, const QString &group_id, const QString &api_version);

    /**
    * @param[in]  host_name QString [required]
    * @param[in]  policy_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void iosDeleteMAMPolicy(const QString &host_name, const QString &policy_name, const QString &api_version);

    /**
    * @param[in]  host_name QString [required]
    * @param[in]  policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  select QString [optional]
    */
    virtual void iosGetAppForMAMPolicy(const QString &host_name, const QString &policy_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  host_name QString [required]
    * @param[in]  policy_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void iosGetGroupsForMAMPolicy(const QString &host_name, const QString &policy_name, const QString &api_version);

    /**
    * @param[in]  host_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  select QString [optional]
    */
    virtual void iosGetMAMPolicies(const QString &host_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  host_name QString [required]
    * @param[in]  policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  select QString [optional]
    */
    virtual void iosGetMAMPolicyByName(const QString &host_name, const QString &policy_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  host_name QString [required]
    * @param[in]  policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIIOSMAMPolicy [required]
    */
    virtual void iosPatchMAMPolicy(const QString &host_name, const QString &policy_name, const QString &api_version, const OAIIOSMAMPolicy &parameters);

    /**
    * @param[in]  host_name QString [required]
    * @param[in]  user_name QString [required]
    * @param[in]  device_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void wipeMAMUserDevice(const QString &host_name, const QString &user_name, const QString &device_name, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void androidAddAppForMAMPolicyCallback(OAIHttpRequestWorker *worker);
    void androidAddGroupForMAMPolicyCallback(OAIHttpRequestWorker *worker);
    void androidCreateOrUpdateMAMPolicyCallback(OAIHttpRequestWorker *worker);
    void androidDeleteAppForMAMPolicyCallback(OAIHttpRequestWorker *worker);
    void androidDeleteGroupForMAMPolicyCallback(OAIHttpRequestWorker *worker);
    void androidDeleteMAMPolicyCallback(OAIHttpRequestWorker *worker);
    void androidGetAppForMAMPolicyCallback(OAIHttpRequestWorker *worker);
    void androidGetGroupsForMAMPolicyCallback(OAIHttpRequestWorker *worker);
    void androidGetMAMPoliciesCallback(OAIHttpRequestWorker *worker);
    void androidGetMAMPolicyByNameCallback(OAIHttpRequestWorker *worker);
    void androidPatchMAMPolicyCallback(OAIHttpRequestWorker *worker);
    void getAppsCallback(OAIHttpRequestWorker *worker);
    void getLocationByHostNameCallback(OAIHttpRequestWorker *worker);
    void getLocationsCallback(OAIHttpRequestWorker *worker);
    void getMAMFlaggedUserByNameCallback(OAIHttpRequestWorker *worker);
    void getMAMFlaggedUsersCallback(OAIHttpRequestWorker *worker);
    void getMAMStatusesCallback(OAIHttpRequestWorker *worker);
    void getMAMUserDeviceByDeviceNameCallback(OAIHttpRequestWorker *worker);
    void getMAMUserDevicesCallback(OAIHttpRequestWorker *worker);
    void getMAMUserFlaggedEnrolledAppsCallback(OAIHttpRequestWorker *worker);
    void getOperationResultsCallback(OAIHttpRequestWorker *worker);
    void iosAddAppForMAMPolicyCallback(OAIHttpRequestWorker *worker);
    void iosAddGroupForMAMPolicyCallback(OAIHttpRequestWorker *worker);
    void iosCreateOrUpdateMAMPolicyCallback(OAIHttpRequestWorker *worker);
    void iosDeleteAppForMAMPolicyCallback(OAIHttpRequestWorker *worker);
    void iosDeleteGroupForMAMPolicyCallback(OAIHttpRequestWorker *worker);
    void iosDeleteMAMPolicyCallback(OAIHttpRequestWorker *worker);
    void iosGetAppForMAMPolicyCallback(OAIHttpRequestWorker *worker);
    void iosGetGroupsForMAMPolicyCallback(OAIHttpRequestWorker *worker);
    void iosGetMAMPoliciesCallback(OAIHttpRequestWorker *worker);
    void iosGetMAMPolicyByNameCallback(OAIHttpRequestWorker *worker);
    void iosPatchMAMPolicyCallback(OAIHttpRequestWorker *worker);
    void wipeMAMUserDeviceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void androidAddAppForMAMPolicySignal();
    void androidAddGroupForMAMPolicySignal();
    void androidCreateOrUpdateMAMPolicySignal(OAIAndroidMAMPolicy summary);
    void androidDeleteAppForMAMPolicySignal();
    void androidDeleteGroupForMAMPolicySignal();
    void androidDeleteMAMPolicySignal();
    void androidGetAppForMAMPolicySignal(OAIApplicationCollection summary);
    void androidGetGroupsForMAMPolicySignal(OAIGroupsCollection summary);
    void androidGetMAMPoliciesSignal(OAIAndroidMAMPolicyCollection summary);
    void androidGetMAMPolicyByNameSignal(OAIAndroidMAMPolicy summary);
    void androidPatchMAMPolicySignal(OAIAndroidMAMPolicy summary);
    void getAppsSignal(OAIApplicationCollection summary);
    void getLocationByHostNameSignal(OAILocation summary);
    void getLocationsSignal(OAILocationCollection summary);
    void getMAMFlaggedUserByNameSignal(OAIFlaggedUser summary);
    void getMAMFlaggedUsersSignal(OAIFlaggedUserCollection summary);
    void getMAMStatusesSignal(OAIStatusesDefault summary);
    void getMAMUserDeviceByDeviceNameSignal(OAIDevice summary);
    void getMAMUserDevicesSignal(OAIDeviceCollection summary);
    void getMAMUserFlaggedEnrolledAppsSignal(OAIFlaggedEnrolledAppCollection summary);
    void getOperationResultsSignal(OAIOperationResultCollection summary);
    void iosAddAppForMAMPolicySignal();
    void iosAddGroupForMAMPolicySignal();
    void iosCreateOrUpdateMAMPolicySignal(OAIIOSMAMPolicy summary);
    void iosDeleteAppForMAMPolicySignal();
    void iosDeleteGroupForMAMPolicySignal();
    void iosDeleteMAMPolicySignal();
    void iosGetAppForMAMPolicySignal(OAIApplicationCollection summary);
    void iosGetGroupsForMAMPolicySignal(OAIGroupsCollection summary);
    void iosGetMAMPoliciesSignal(OAIIOSMAMPolicyCollection summary);
    void iosGetMAMPolicyByNameSignal(OAIIOSMAMPolicy summary);
    void iosPatchMAMPolicySignal(OAIIOSMAMPolicy summary);
    void wipeMAMUserDeviceSignal(OAIWipeDeviceOperationResult summary);


    void androidAddAppForMAMPolicySignalFull(OAIHttpRequestWorker *worker);
    void androidAddGroupForMAMPolicySignalFull(OAIHttpRequestWorker *worker);
    void androidCreateOrUpdateMAMPolicySignalFull(OAIHttpRequestWorker *worker, OAIAndroidMAMPolicy summary);
    void androidDeleteAppForMAMPolicySignalFull(OAIHttpRequestWorker *worker);
    void androidDeleteGroupForMAMPolicySignalFull(OAIHttpRequestWorker *worker);
    void androidDeleteMAMPolicySignalFull(OAIHttpRequestWorker *worker);
    void androidGetAppForMAMPolicySignalFull(OAIHttpRequestWorker *worker, OAIApplicationCollection summary);
    void androidGetGroupsForMAMPolicySignalFull(OAIHttpRequestWorker *worker, OAIGroupsCollection summary);
    void androidGetMAMPoliciesSignalFull(OAIHttpRequestWorker *worker, OAIAndroidMAMPolicyCollection summary);
    void androidGetMAMPolicyByNameSignalFull(OAIHttpRequestWorker *worker, OAIAndroidMAMPolicy summary);
    void androidPatchMAMPolicySignalFull(OAIHttpRequestWorker *worker, OAIAndroidMAMPolicy summary);
    void getAppsSignalFull(OAIHttpRequestWorker *worker, OAIApplicationCollection summary);
    void getLocationByHostNameSignalFull(OAIHttpRequestWorker *worker, OAILocation summary);
    void getLocationsSignalFull(OAIHttpRequestWorker *worker, OAILocationCollection summary);
    void getMAMFlaggedUserByNameSignalFull(OAIHttpRequestWorker *worker, OAIFlaggedUser summary);
    void getMAMFlaggedUsersSignalFull(OAIHttpRequestWorker *worker, OAIFlaggedUserCollection summary);
    void getMAMStatusesSignalFull(OAIHttpRequestWorker *worker, OAIStatusesDefault summary);
    void getMAMUserDeviceByDeviceNameSignalFull(OAIHttpRequestWorker *worker, OAIDevice summary);
    void getMAMUserDevicesSignalFull(OAIHttpRequestWorker *worker, OAIDeviceCollection summary);
    void getMAMUserFlaggedEnrolledAppsSignalFull(OAIHttpRequestWorker *worker, OAIFlaggedEnrolledAppCollection summary);
    void getOperationResultsSignalFull(OAIHttpRequestWorker *worker, OAIOperationResultCollection summary);
    void iosAddAppForMAMPolicySignalFull(OAIHttpRequestWorker *worker);
    void iosAddGroupForMAMPolicySignalFull(OAIHttpRequestWorker *worker);
    void iosCreateOrUpdateMAMPolicySignalFull(OAIHttpRequestWorker *worker, OAIIOSMAMPolicy summary);
    void iosDeleteAppForMAMPolicySignalFull(OAIHttpRequestWorker *worker);
    void iosDeleteGroupForMAMPolicySignalFull(OAIHttpRequestWorker *worker);
    void iosDeleteMAMPolicySignalFull(OAIHttpRequestWorker *worker);
    void iosGetAppForMAMPolicySignalFull(OAIHttpRequestWorker *worker, OAIApplicationCollection summary);
    void iosGetGroupsForMAMPolicySignalFull(OAIHttpRequestWorker *worker, OAIGroupsCollection summary);
    void iosGetMAMPoliciesSignalFull(OAIHttpRequestWorker *worker, OAIIOSMAMPolicyCollection summary);
    void iosGetMAMPolicyByNameSignalFull(OAIHttpRequestWorker *worker, OAIIOSMAMPolicy summary);
    void iosPatchMAMPolicySignalFull(OAIHttpRequestWorker *worker, OAIIOSMAMPolicy summary);
    void wipeMAMUserDeviceSignalFull(OAIHttpRequestWorker *worker, OAIWipeDeviceOperationResult summary);

    Q_DECL_DEPRECATED_X("Use androidAddAppForMAMPolicySignalError() instead")
    void androidAddAppForMAMPolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void androidAddAppForMAMPolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidAddGroupForMAMPolicySignalError() instead")
    void androidAddGroupForMAMPolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void androidAddGroupForMAMPolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidCreateOrUpdateMAMPolicySignalError() instead")
    void androidCreateOrUpdateMAMPolicySignalE(OAIAndroidMAMPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidCreateOrUpdateMAMPolicySignalError(OAIAndroidMAMPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidDeleteAppForMAMPolicySignalError() instead")
    void androidDeleteAppForMAMPolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void androidDeleteAppForMAMPolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidDeleteGroupForMAMPolicySignalError() instead")
    void androidDeleteGroupForMAMPolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void androidDeleteGroupForMAMPolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidDeleteMAMPolicySignalError() instead")
    void androidDeleteMAMPolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void androidDeleteMAMPolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidGetAppForMAMPolicySignalError() instead")
    void androidGetAppForMAMPolicySignalE(OAIApplicationCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidGetAppForMAMPolicySignalError(OAIApplicationCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidGetGroupsForMAMPolicySignalError() instead")
    void androidGetGroupsForMAMPolicySignalE(OAIGroupsCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidGetGroupsForMAMPolicySignalError(OAIGroupsCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidGetMAMPoliciesSignalError() instead")
    void androidGetMAMPoliciesSignalE(OAIAndroidMAMPolicyCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidGetMAMPoliciesSignalError(OAIAndroidMAMPolicyCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidGetMAMPolicyByNameSignalError() instead")
    void androidGetMAMPolicyByNameSignalE(OAIAndroidMAMPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidGetMAMPolicyByNameSignalError(OAIAndroidMAMPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidPatchMAMPolicySignalError() instead")
    void androidPatchMAMPolicySignalE(OAIAndroidMAMPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidPatchMAMPolicySignalError(OAIAndroidMAMPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAppsSignalError() instead")
    void getAppsSignalE(OAIApplicationCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAppsSignalError(OAIApplicationCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLocationByHostNameSignalError() instead")
    void getLocationByHostNameSignalE(OAILocation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLocationByHostNameSignalError(OAILocation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLocationsSignalError() instead")
    void getLocationsSignalE(OAILocationCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLocationsSignalError(OAILocationCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMAMFlaggedUserByNameSignalError() instead")
    void getMAMFlaggedUserByNameSignalE(OAIFlaggedUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMAMFlaggedUserByNameSignalError(OAIFlaggedUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMAMFlaggedUsersSignalError() instead")
    void getMAMFlaggedUsersSignalE(OAIFlaggedUserCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMAMFlaggedUsersSignalError(OAIFlaggedUserCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMAMStatusesSignalError() instead")
    void getMAMStatusesSignalE(OAIStatusesDefault summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMAMStatusesSignalError(OAIStatusesDefault summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMAMUserDeviceByDeviceNameSignalError() instead")
    void getMAMUserDeviceByDeviceNameSignalE(OAIDevice summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMAMUserDeviceByDeviceNameSignalError(OAIDevice summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMAMUserDevicesSignalError() instead")
    void getMAMUserDevicesSignalE(OAIDeviceCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMAMUserDevicesSignalError(OAIDeviceCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMAMUserFlaggedEnrolledAppsSignalError() instead")
    void getMAMUserFlaggedEnrolledAppsSignalE(OAIFlaggedEnrolledAppCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMAMUserFlaggedEnrolledAppsSignalError(OAIFlaggedEnrolledAppCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOperationResultsSignalError() instead")
    void getOperationResultsSignalE(OAIOperationResultCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOperationResultsSignalError(OAIOperationResultCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iosAddAppForMAMPolicySignalError() instead")
    void iosAddAppForMAMPolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void iosAddAppForMAMPolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iosAddGroupForMAMPolicySignalError() instead")
    void iosAddGroupForMAMPolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void iosAddGroupForMAMPolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iosCreateOrUpdateMAMPolicySignalError() instead")
    void iosCreateOrUpdateMAMPolicySignalE(OAIIOSMAMPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iosCreateOrUpdateMAMPolicySignalError(OAIIOSMAMPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iosDeleteAppForMAMPolicySignalError() instead")
    void iosDeleteAppForMAMPolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void iosDeleteAppForMAMPolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iosDeleteGroupForMAMPolicySignalError() instead")
    void iosDeleteGroupForMAMPolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void iosDeleteGroupForMAMPolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iosDeleteMAMPolicySignalError() instead")
    void iosDeleteMAMPolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void iosDeleteMAMPolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iosGetAppForMAMPolicySignalError() instead")
    void iosGetAppForMAMPolicySignalE(OAIApplicationCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iosGetAppForMAMPolicySignalError(OAIApplicationCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iosGetGroupsForMAMPolicySignalError() instead")
    void iosGetGroupsForMAMPolicySignalE(OAIGroupsCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iosGetGroupsForMAMPolicySignalError(OAIGroupsCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iosGetMAMPoliciesSignalError() instead")
    void iosGetMAMPoliciesSignalE(OAIIOSMAMPolicyCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iosGetMAMPoliciesSignalError(OAIIOSMAMPolicyCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iosGetMAMPolicyByNameSignalError() instead")
    void iosGetMAMPolicyByNameSignalE(OAIIOSMAMPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iosGetMAMPolicyByNameSignalError(OAIIOSMAMPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iosPatchMAMPolicySignalError() instead")
    void iosPatchMAMPolicySignalE(OAIIOSMAMPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iosPatchMAMPolicySignalError(OAIIOSMAMPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wipeMAMUserDeviceSignalError() instead")
    void wipeMAMUserDeviceSignalE(OAIWipeDeviceOperationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void wipeMAMUserDeviceSignalError(OAIWipeDeviceOperationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use androidAddAppForMAMPolicySignalErrorFull() instead")
    void androidAddAppForMAMPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidAddAppForMAMPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidAddGroupForMAMPolicySignalErrorFull() instead")
    void androidAddGroupForMAMPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidAddGroupForMAMPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidCreateOrUpdateMAMPolicySignalErrorFull() instead")
    void androidCreateOrUpdateMAMPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidCreateOrUpdateMAMPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidDeleteAppForMAMPolicySignalErrorFull() instead")
    void androidDeleteAppForMAMPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidDeleteAppForMAMPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidDeleteGroupForMAMPolicySignalErrorFull() instead")
    void androidDeleteGroupForMAMPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidDeleteGroupForMAMPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidDeleteMAMPolicySignalErrorFull() instead")
    void androidDeleteMAMPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidDeleteMAMPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidGetAppForMAMPolicySignalErrorFull() instead")
    void androidGetAppForMAMPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidGetAppForMAMPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidGetGroupsForMAMPolicySignalErrorFull() instead")
    void androidGetGroupsForMAMPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidGetGroupsForMAMPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidGetMAMPoliciesSignalErrorFull() instead")
    void androidGetMAMPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidGetMAMPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidGetMAMPolicyByNameSignalErrorFull() instead")
    void androidGetMAMPolicyByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidGetMAMPolicyByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidPatchMAMPolicySignalErrorFull() instead")
    void androidPatchMAMPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidPatchMAMPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAppsSignalErrorFull() instead")
    void getAppsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAppsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLocationByHostNameSignalErrorFull() instead")
    void getLocationByHostNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLocationByHostNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLocationsSignalErrorFull() instead")
    void getLocationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLocationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMAMFlaggedUserByNameSignalErrorFull() instead")
    void getMAMFlaggedUserByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMAMFlaggedUserByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMAMFlaggedUsersSignalErrorFull() instead")
    void getMAMFlaggedUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMAMFlaggedUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMAMStatusesSignalErrorFull() instead")
    void getMAMStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMAMStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMAMUserDeviceByDeviceNameSignalErrorFull() instead")
    void getMAMUserDeviceByDeviceNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMAMUserDeviceByDeviceNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMAMUserDevicesSignalErrorFull() instead")
    void getMAMUserDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMAMUserDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMAMUserFlaggedEnrolledAppsSignalErrorFull() instead")
    void getMAMUserFlaggedEnrolledAppsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMAMUserFlaggedEnrolledAppsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOperationResultsSignalErrorFull() instead")
    void getOperationResultsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOperationResultsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iosAddAppForMAMPolicySignalErrorFull() instead")
    void iosAddAppForMAMPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iosAddAppForMAMPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iosAddGroupForMAMPolicySignalErrorFull() instead")
    void iosAddGroupForMAMPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iosAddGroupForMAMPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iosCreateOrUpdateMAMPolicySignalErrorFull() instead")
    void iosCreateOrUpdateMAMPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iosCreateOrUpdateMAMPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iosDeleteAppForMAMPolicySignalErrorFull() instead")
    void iosDeleteAppForMAMPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iosDeleteAppForMAMPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iosDeleteGroupForMAMPolicySignalErrorFull() instead")
    void iosDeleteGroupForMAMPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iosDeleteGroupForMAMPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iosDeleteMAMPolicySignalErrorFull() instead")
    void iosDeleteMAMPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iosDeleteMAMPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iosGetAppForMAMPolicySignalErrorFull() instead")
    void iosGetAppForMAMPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iosGetAppForMAMPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iosGetGroupsForMAMPolicySignalErrorFull() instead")
    void iosGetGroupsForMAMPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iosGetGroupsForMAMPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iosGetMAMPoliciesSignalErrorFull() instead")
    void iosGetMAMPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iosGetMAMPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iosGetMAMPolicyByNameSignalErrorFull() instead")
    void iosGetMAMPolicyByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iosGetMAMPolicyByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iosPatchMAMPolicySignalErrorFull() instead")
    void iosPatchMAMPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iosPatchMAMPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wipeMAMUserDeviceSignalErrorFull() instead")
    void wipeMAMUserDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wipeMAMUserDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
