/**
 * IntuneResourceManagementClient
 * Microsoft.Intune Resource provider Api features in the swagger-2.0 specification
 *
 * The version of the OpenAPI document: 2015-01-14-privatepreview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeviceProperties model module.
 * @module model/DeviceProperties
 * @version 2015-01-14-privatepreview
 */
class DeviceProperties {
    /**
     * Constructs a new <code>DeviceProperties</code>.
     * @alias module:model/DeviceProperties
     * @param deviceType {String} 
     * @param friendlyName {String} 
     * @param platform {String} 
     * @param platformVersion {String} 
     * @param userId {String} 
     */
    constructor(deviceType, friendlyName, platform, platformVersion, userId) { 
        
        DeviceProperties.initialize(this, deviceType, friendlyName, platform, platformVersion, userId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, deviceType, friendlyName, platform, platformVersion, userId) { 
        obj['deviceType'] = deviceType;
        obj['friendlyName'] = friendlyName;
        obj['platform'] = platform;
        obj['platformVersion'] = platformVersion;
        obj['userId'] = userId;
    }

    /**
     * Constructs a <code>DeviceProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceProperties} obj Optional instance to populate.
     * @return {module:model/DeviceProperties} The populated <code>DeviceProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceProperties();

            if (data.hasOwnProperty('deviceType')) {
                obj['deviceType'] = ApiClient.convertToType(data['deviceType'], 'String');
            }
            if (data.hasOwnProperty('friendlyName')) {
                obj['friendlyName'] = ApiClient.convertToType(data['friendlyName'], 'String');
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = ApiClient.convertToType(data['platform'], 'String');
            }
            if (data.hasOwnProperty('platformVersion')) {
                obj['platformVersion'] = ApiClient.convertToType(data['platformVersion'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeviceProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['deviceType'] && !(typeof data['deviceType'] === 'string' || data['deviceType'] instanceof String)) {
            throw new Error("Expected the field `deviceType` to be a primitive type in the JSON string but got " + data['deviceType']);
        }
        // ensure the json data is a string
        if (data['friendlyName'] && !(typeof data['friendlyName'] === 'string' || data['friendlyName'] instanceof String)) {
            throw new Error("Expected the field `friendlyName` to be a primitive type in the JSON string but got " + data['friendlyName']);
        }
        // ensure the json data is a string
        if (data['platform'] && !(typeof data['platform'] === 'string' || data['platform'] instanceof String)) {
            throw new Error("Expected the field `platform` to be a primitive type in the JSON string but got " + data['platform']);
        }
        // ensure the json data is a string
        if (data['platformVersion'] && !(typeof data['platformVersion'] === 'string' || data['platformVersion'] instanceof String)) {
            throw new Error("Expected the field `platformVersion` to be a primitive type in the JSON string but got " + data['platformVersion']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}

DeviceProperties.RequiredProperties = ["deviceType", "friendlyName", "platform", "platformVersion", "userId"];

/**
 * @member {String} deviceType
 */
DeviceProperties.prototype['deviceType'] = undefined;

/**
 * @member {String} friendlyName
 */
DeviceProperties.prototype['friendlyName'] = undefined;

/**
 * @member {String} platform
 */
DeviceProperties.prototype['platform'] = undefined;

/**
 * @member {String} platformVersion
 */
DeviceProperties.prototype['platformVersion'] = undefined;

/**
 * @member {String} userId
 */
DeviceProperties.prototype['userId'] = undefined;






export default DeviceProperties;

