/**
 * IntuneResourceManagementClient
 * Microsoft.Intune Resource provider Api features in the swagger-2.0 specification
 *
 * The version of the OpenAPI document: 2015-01-14-privatepreview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AndroidMAMPolicy from '../model/AndroidMAMPolicy';
import AndroidMAMPolicyCollection from '../model/AndroidMAMPolicyCollection';
import ApplicationCollection from '../model/ApplicationCollection';
import Device from '../model/Device';
import DeviceCollection from '../model/DeviceCollection';
import Error from '../model/Error';
import FlaggedEnrolledAppCollection from '../model/FlaggedEnrolledAppCollection';
import FlaggedUser from '../model/FlaggedUser';
import FlaggedUserCollection from '../model/FlaggedUserCollection';
import GroupsCollection from '../model/GroupsCollection';
import IOSMAMPolicy from '../model/IOSMAMPolicy';
import IOSMAMPolicyCollection from '../model/IOSMAMPolicyCollection';
import Location from '../model/Location';
import LocationCollection from '../model/LocationCollection';
import MAMPolicyAppIdOrGroupIdPayload from '../model/MAMPolicyAppIdOrGroupIdPayload';
import OperationResultCollection from '../model/OperationResultCollection';
import StatusesDefault from '../model/StatusesDefault';
import WipeDeviceOperationResult from '../model/WipeDeviceOperationResult';

/**
* Default service.
* @module api/DefaultApi
* @version 2015-01-14-privatepreview
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the androidAddAppForMAMPolicy operation.
     * @callback module:api/DefaultApi~androidAddAppForMAMPolicyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add app to an AndroidMAMPolicy.
     * @param {String} hostName Location hostName for the tenant
     * @param {String} policyName Unique name for the policy
     * @param {String} appName application unique Name
     * @param {String} apiVersion Service Api Version.
     * @param {module:model/MAMPolicyAppIdOrGroupIdPayload} parameters Parameters supplied to the Create or update app to an android policy operation.
     * @param {module:api/DefaultApi~androidAddAppForMAMPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    androidAddAppForMAMPolicy(hostName, policyName, appName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling androidAddAppForMAMPolicy");
      }
      // verify the required parameter 'policyName' is set
      if (policyName === undefined || policyName === null) {
        throw new Error("Missing the required parameter 'policyName' when calling androidAddAppForMAMPolicy");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling androidAddAppForMAMPolicy");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling androidAddAppForMAMPolicy");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling androidAddAppForMAMPolicy");
      }

      let pathParams = {
        'hostName': hostName,
        'policyName': policyName,
        'appName': appName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/providers/Microsoft.Intune/locations/{hostName}/androidPolicies/{policyName}/apps/{appName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidAddGroupForMAMPolicy operation.
     * @callback module:api/DefaultApi~androidAddGroupForMAMPolicyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add group to an AndroidMAMPolicy.
     * @param {String} hostName Location hostName for the tenant
     * @param {String} policyName Unique name for the policy
     * @param {String} groupId group Id
     * @param {String} apiVersion Service Api Version.
     * @param {module:model/MAMPolicyAppIdOrGroupIdPayload} parameters Parameters supplied to the Create or update app to an android policy operation.
     * @param {module:api/DefaultApi~androidAddGroupForMAMPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    androidAddGroupForMAMPolicy(hostName, policyName, groupId, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling androidAddGroupForMAMPolicy");
      }
      // verify the required parameter 'policyName' is set
      if (policyName === undefined || policyName === null) {
        throw new Error("Missing the required parameter 'policyName' when calling androidAddGroupForMAMPolicy");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling androidAddGroupForMAMPolicy");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling androidAddGroupForMAMPolicy");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling androidAddGroupForMAMPolicy");
      }

      let pathParams = {
        'hostName': hostName,
        'policyName': policyName,
        'groupId': groupId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/providers/Microsoft.Intune/locations/{hostName}/androidPolicies/{policyName}/groups/{groupId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidCreateOrUpdateMAMPolicy operation.
     * @callback module:api/DefaultApi~androidCreateOrUpdateMAMPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AndroidMAMPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates AndroidMAMPolicy.
     * @param {String} hostName Location hostName for the tenant
     * @param {String} policyName Unique name for the policy
     * @param {String} apiVersion Service Api Version.
     * @param {module:model/AndroidMAMPolicy} parameters Parameters supplied to the Create or update an android policy operation.
     * @param {module:api/DefaultApi~androidCreateOrUpdateMAMPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AndroidMAMPolicy}
     */
    androidCreateOrUpdateMAMPolicy(hostName, policyName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling androidCreateOrUpdateMAMPolicy");
      }
      // verify the required parameter 'policyName' is set
      if (policyName === undefined || policyName === null) {
        throw new Error("Missing the required parameter 'policyName' when calling androidCreateOrUpdateMAMPolicy");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling androidCreateOrUpdateMAMPolicy");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling androidCreateOrUpdateMAMPolicy");
      }

      let pathParams = {
        'hostName': hostName,
        'policyName': policyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AndroidMAMPolicy;
      return this.apiClient.callApi(
        '/providers/Microsoft.Intune/locations/{hostName}/androidPolicies/{policyName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidDeleteAppForMAMPolicy operation.
     * @callback module:api/DefaultApi~androidDeleteAppForMAMPolicyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete App for Android Policy
     * @param {String} hostName Location hostName for the tenant
     * @param {String} policyName Unique name for the policy
     * @param {String} appName application unique Name
     * @param {String} apiVersion Service Api Version.
     * @param {module:api/DefaultApi~androidDeleteAppForMAMPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    androidDeleteAppForMAMPolicy(hostName, policyName, appName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling androidDeleteAppForMAMPolicy");
      }
      // verify the required parameter 'policyName' is set
      if (policyName === undefined || policyName === null) {
        throw new Error("Missing the required parameter 'policyName' when calling androidDeleteAppForMAMPolicy");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling androidDeleteAppForMAMPolicy");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling androidDeleteAppForMAMPolicy");
      }

      let pathParams = {
        'hostName': hostName,
        'policyName': policyName,
        'appName': appName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/providers/Microsoft.Intune/locations/{hostName}/androidPolicies/{policyName}/apps/{appName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidDeleteGroupForMAMPolicy operation.
     * @callback module:api/DefaultApi~androidDeleteGroupForMAMPolicyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Group for Android Policy
     * @param {String} hostName Location hostName for the tenant
     * @param {String} policyName Unique name for the policy
     * @param {String} groupId application unique Name
     * @param {String} apiVersion Service Api Version.
     * @param {module:api/DefaultApi~androidDeleteGroupForMAMPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    androidDeleteGroupForMAMPolicy(hostName, policyName, groupId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling androidDeleteGroupForMAMPolicy");
      }
      // verify the required parameter 'policyName' is set
      if (policyName === undefined || policyName === null) {
        throw new Error("Missing the required parameter 'policyName' when calling androidDeleteGroupForMAMPolicy");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling androidDeleteGroupForMAMPolicy");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling androidDeleteGroupForMAMPolicy");
      }

      let pathParams = {
        'hostName': hostName,
        'policyName': policyName,
        'groupId': groupId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/providers/Microsoft.Intune/locations/{hostName}/androidPolicies/{policyName}/groups/{groupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidDeleteMAMPolicy operation.
     * @callback module:api/DefaultApi~androidDeleteMAMPolicyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Android Policy
     * @param {String} hostName Location hostName for the tenant
     * @param {String} policyName Unique name for the policy
     * @param {String} apiVersion Service Api Version.
     * @param {module:api/DefaultApi~androidDeleteMAMPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    androidDeleteMAMPolicy(hostName, policyName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling androidDeleteMAMPolicy");
      }
      // verify the required parameter 'policyName' is set
      if (policyName === undefined || policyName === null) {
        throw new Error("Missing the required parameter 'policyName' when calling androidDeleteMAMPolicy");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling androidDeleteMAMPolicy");
      }

      let pathParams = {
        'hostName': hostName,
        'policyName': policyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/providers/Microsoft.Intune/locations/{hostName}/androidPolicies/{policyName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidGetAppForMAMPolicy operation.
     * @callback module:api/DefaultApi~androidGetAppForMAMPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get apps for an AndroidMAMPolicy.
     * @param {String} hostName Location hostName for the tenant
     * @param {String} policyName Unique name for the policy
     * @param {String} apiVersion Service Api Version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation.
     * @param {Number} [top] 
     * @param {String} [select] select specific fields in entity.
     * @param {module:api/DefaultApi~androidGetAppForMAMPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationCollection}
     */
    androidGetAppForMAMPolicy(hostName, policyName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling androidGetAppForMAMPolicy");
      }
      // verify the required parameter 'policyName' is set
      if (policyName === undefined || policyName === null) {
        throw new Error("Missing the required parameter 'policyName' when calling androidGetAppForMAMPolicy");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling androidGetAppForMAMPolicy");
      }

      let pathParams = {
        'hostName': hostName,
        'policyName': policyName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApplicationCollection;
      return this.apiClient.callApi(
        '/providers/Microsoft.Intune/locations/{hostName}/AndroidPolicies/{policyName}/apps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidGetGroupsForMAMPolicy operation.
     * @callback module:api/DefaultApi~androidGetGroupsForMAMPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupsCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns groups for a given AndroidMAMPolicy.
     * @param {String} hostName Location hostName for the tenant
     * @param {String} policyName policy name for the tenant
     * @param {String} apiVersion Service Api Version.
     * @param {module:api/DefaultApi~androidGetGroupsForMAMPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupsCollection}
     */
    androidGetGroupsForMAMPolicy(hostName, policyName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling androidGetGroupsForMAMPolicy");
      }
      // verify the required parameter 'policyName' is set
      if (policyName === undefined || policyName === null) {
        throw new Error("Missing the required parameter 'policyName' when calling androidGetGroupsForMAMPolicy");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling androidGetGroupsForMAMPolicy");
      }

      let pathParams = {
        'hostName': hostName,
        'policyName': policyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GroupsCollection;
      return this.apiClient.callApi(
        '/providers/Microsoft.Intune/locations/{hostName}/androidPolicies/{policyName}/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidGetMAMPolicies operation.
     * @callback module:api/DefaultApi~androidGetMAMPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AndroidMAMPolicyCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns Intune Android policies.
     * @param {String} hostName Location hostName for the tenant
     * @param {String} apiVersion Service Api Version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation.
     * @param {Number} [top] 
     * @param {String} [select] select specific fields in entity.
     * @param {module:api/DefaultApi~androidGetMAMPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AndroidMAMPolicyCollection}
     */
    androidGetMAMPolicies(hostName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling androidGetMAMPolicies");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling androidGetMAMPolicies");
      }

      let pathParams = {
        'hostName': hostName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AndroidMAMPolicyCollection;
      return this.apiClient.callApi(
        '/providers/Microsoft.Intune/locations/{hostName}/androidPolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidGetMAMPolicyByName operation.
     * @callback module:api/DefaultApi~androidGetMAMPolicyByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AndroidMAMPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns AndroidMAMPolicy with given name.
     * @param {String} hostName Location hostName for the tenant
     * @param {String} policyName Unique name for the policy
     * @param {String} apiVersion Service Api Version.
     * @param {Object} opts Optional parameters
     * @param {String} [select] select specific fields in entity.
     * @param {module:api/DefaultApi~androidGetMAMPolicyByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AndroidMAMPolicy}
     */
    androidGetMAMPolicyByName(hostName, policyName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling androidGetMAMPolicyByName");
      }
      // verify the required parameter 'policyName' is set
      if (policyName === undefined || policyName === null) {
        throw new Error("Missing the required parameter 'policyName' when calling androidGetMAMPolicyByName");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling androidGetMAMPolicyByName");
      }

      let pathParams = {
        'hostName': hostName,
        'policyName': policyName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AndroidMAMPolicy;
      return this.apiClient.callApi(
        '/providers/Microsoft.Intune/locations/{hostName}/androidPolicies/{policyName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidPatchMAMPolicy operation.
     * @callback module:api/DefaultApi~androidPatchMAMPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AndroidMAMPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch AndroidMAMPolicy.
     * @param {String} hostName Location hostName for the tenant
     * @param {String} policyName Unique name for the policy
     * @param {String} apiVersion Service Api Version.
     * @param {module:model/AndroidMAMPolicy} parameters Parameters supplied to the Create or update an android policy operation.
     * @param {module:api/DefaultApi~androidPatchMAMPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AndroidMAMPolicy}
     */
    androidPatchMAMPolicy(hostName, policyName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling androidPatchMAMPolicy");
      }
      // verify the required parameter 'policyName' is set
      if (policyName === undefined || policyName === null) {
        throw new Error("Missing the required parameter 'policyName' when calling androidPatchMAMPolicy");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling androidPatchMAMPolicy");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling androidPatchMAMPolicy");
      }

      let pathParams = {
        'hostName': hostName,
        'policyName': policyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AndroidMAMPolicy;
      return this.apiClient.callApi(
        '/providers/Microsoft.Intune/locations/{hostName}/androidPolicies/{policyName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApps operation.
     * @callback module:api/DefaultApi~getAppsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns Intune Manageable apps.
     * @param {String} hostName Location hostName for the tenant
     * @param {String} apiVersion Service Api Version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation.
     * @param {Number} [top] 
     * @param {String} [select] select specific fields in entity.
     * @param {module:api/DefaultApi~getAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationCollection}
     */
    getApps(hostName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling getApps");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getApps");
      }

      let pathParams = {
        'hostName': hostName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApplicationCollection;
      return this.apiClient.callApi(
        '/providers/Microsoft.Intune/locations/{hostName}/apps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLocationByHostName operation.
     * @callback module:api/DefaultApi~getLocationByHostNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Location} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns location for given tenant.
     * @param {String} apiVersion Service Api Version.
     * @param {module:api/DefaultApi~getLocationByHostNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Location}
     */
    getLocationByHostName(apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getLocationByHostName");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Location;
      return this.apiClient.callApi(
        '/providers/Microsoft.Intune/locations/hostName', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLocations operation.
     * @callback module:api/DefaultApi~getLocationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LocationCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns location for user tenant.
     * @param {String} apiVersion Service Api Version.
     * @param {module:api/DefaultApi~getLocationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LocationCollection}
     */
    getLocations(apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getLocations");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LocationCollection;
      return this.apiClient.callApi(
        '/providers/Microsoft.Intune/locations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMAMFlaggedUserByName operation.
     * @callback module:api/DefaultApi~getMAMFlaggedUserByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FlaggedUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns Intune flagged user details
     * @param {String} hostName Location hostName for the tenant
     * @param {String} userName Flagged userName
     * @param {String} apiVersion Service Api Version.
     * @param {Object} opts Optional parameters
     * @param {String} [select] select specific fields in entity.
     * @param {module:api/DefaultApi~getMAMFlaggedUserByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlaggedUser}
     */
    getMAMFlaggedUserByName(hostName, userName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling getMAMFlaggedUserByName");
      }
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling getMAMFlaggedUserByName");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getMAMFlaggedUserByName");
      }

      let pathParams = {
        'hostName': hostName,
        'userName': userName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FlaggedUser;
      return this.apiClient.callApi(
        '/providers/Microsoft.Intune/locations/{hostName}/flaggedUsers/{userName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMAMFlaggedUsers operation.
     * @callback module:api/DefaultApi~getMAMFlaggedUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FlaggedUserCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns Intune flagged user collection
     * @param {String} hostName Location hostName for the tenant
     * @param {String} apiVersion Service Api Version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation.
     * @param {Number} [top] 
     * @param {String} [select] select specific fields in entity.
     * @param {module:api/DefaultApi~getMAMFlaggedUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlaggedUserCollection}
     */
    getMAMFlaggedUsers(hostName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling getMAMFlaggedUsers");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getMAMFlaggedUsers");
      }

      let pathParams = {
        'hostName': hostName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FlaggedUserCollection;
      return this.apiClient.callApi(
        '/providers/Microsoft.Intune/locations/{hostName}/flaggedUsers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMAMStatuses operation.
     * @callback module:api/DefaultApi~getMAMStatusesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatusesDefault} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns Intune Tenant level statuses.
     * @param {String} hostName Location hostName for the tenant
     * @param {String} apiVersion Service Api Version.
     * @param {module:api/DefaultApi~getMAMStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StatusesDefault}
     */
    getMAMStatuses(hostName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling getMAMStatuses");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getMAMStatuses");
      }

      let pathParams = {
        'hostName': hostName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StatusesDefault;
      return this.apiClient.callApi(
        '/providers/Microsoft.Intune/locations/{hostName}/statuses/default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMAMUserDeviceByDeviceName operation.
     * @callback module:api/DefaultApi~getMAMUserDeviceByDeviceNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Device} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a unique device for a user.
     * @param {String} hostName Location hostName for the tenant
     * @param {String} userName unique user name
     * @param {String} deviceName device name
     * @param {String} apiVersion Service Api Version.
     * @param {Object} opts Optional parameters
     * @param {String} [select] select specific fields in entity.
     * @param {module:api/DefaultApi~getMAMUserDeviceByDeviceNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Device}
     */
    getMAMUserDeviceByDeviceName(hostName, userName, deviceName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling getMAMUserDeviceByDeviceName");
      }
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling getMAMUserDeviceByDeviceName");
      }
      // verify the required parameter 'deviceName' is set
      if (deviceName === undefined || deviceName === null) {
        throw new Error("Missing the required parameter 'deviceName' when calling getMAMUserDeviceByDeviceName");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getMAMUserDeviceByDeviceName");
      }

      let pathParams = {
        'hostName': hostName,
        'userName': userName,
        'deviceName': deviceName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Device;
      return this.apiClient.callApi(
        '/providers/Microsoft.Intune/locations/{hostName}/users/{userName}/devices/{deviceName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMAMUserDevices operation.
     * @callback module:api/DefaultApi~getMAMUserDevicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get devices for a user.
     * @param {String} hostName Location hostName for the tenant
     * @param {String} userName user unique Name
     * @param {String} apiVersion Service Api Version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation.
     * @param {Number} [top] 
     * @param {String} [select] select specific fields in entity.
     * @param {module:api/DefaultApi~getMAMUserDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceCollection}
     */
    getMAMUserDevices(hostName, userName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling getMAMUserDevices");
      }
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling getMAMUserDevices");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getMAMUserDevices");
      }

      let pathParams = {
        'hostName': hostName,
        'userName': userName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeviceCollection;
      return this.apiClient.callApi(
        '/providers/Microsoft.Intune/locations/{hostName}/users/{userName}/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMAMUserFlaggedEnrolledApps operation.
     * @callback module:api/DefaultApi~getMAMUserFlaggedEnrolledAppsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FlaggedEnrolledAppCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns Intune flagged enrolled app collection for the User
     * @param {String} hostName Location hostName for the tenant
     * @param {String} userName User name for the tenant
     * @param {String} apiVersion Service Api Version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation.
     * @param {Number} [top] 
     * @param {String} [select] select specific fields in entity.
     * @param {module:api/DefaultApi~getMAMUserFlaggedEnrolledAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlaggedEnrolledAppCollection}
     */
    getMAMUserFlaggedEnrolledApps(hostName, userName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling getMAMUserFlaggedEnrolledApps");
      }
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling getMAMUserFlaggedEnrolledApps");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getMAMUserFlaggedEnrolledApps");
      }

      let pathParams = {
        'hostName': hostName,
        'userName': userName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FlaggedEnrolledAppCollection;
      return this.apiClient.callApi(
        '/providers/Microsoft.Intune/locations/{hostName}/flaggedUsers/{userName}/flaggedEnrolledApps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOperationResults operation.
     * @callback module:api/DefaultApi~getOperationResultsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationResultCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns operationResults.
     * @param {String} hostName Location hostName for the tenant
     * @param {String} apiVersion Service Api Version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation.
     * @param {Number} [top] 
     * @param {String} [select] select specific fields in entity.
     * @param {module:api/DefaultApi~getOperationResultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationResultCollection}
     */
    getOperationResults(hostName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling getOperationResults");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getOperationResults");
      }

      let pathParams = {
        'hostName': hostName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationResultCollection;
      return this.apiClient.callApi(
        '/providers/Microsoft.Intune/locations/{hostName}/operationResults', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iosAddAppForMAMPolicy operation.
     * @callback module:api/DefaultApi~iosAddAppForMAMPolicyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add app to an iOSMAMPolicy.
     * @param {String} hostName Location hostName for the tenant
     * @param {String} policyName Unique name for the policy
     * @param {String} appName application unique Name
     * @param {String} apiVersion Service Api Version.
     * @param {module:model/MAMPolicyAppIdOrGroupIdPayload} parameters Parameters supplied to add an app to an ios policy.
     * @param {module:api/DefaultApi~iosAddAppForMAMPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    iosAddAppForMAMPolicy(hostName, policyName, appName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling iosAddAppForMAMPolicy");
      }
      // verify the required parameter 'policyName' is set
      if (policyName === undefined || policyName === null) {
        throw new Error("Missing the required parameter 'policyName' when calling iosAddAppForMAMPolicy");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling iosAddAppForMAMPolicy");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iosAddAppForMAMPolicy");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling iosAddAppForMAMPolicy");
      }

      let pathParams = {
        'hostName': hostName,
        'policyName': policyName,
        'appName': appName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/providers/Microsoft.Intune/locations/{hostName}/iosPolicies/{policyName}/apps/{appName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iosAddGroupForMAMPolicy operation.
     * @callback module:api/DefaultApi~iosAddGroupForMAMPolicyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add group to an iOSMAMPolicy.
     * @param {String} hostName Location hostName for the tenant
     * @param {String} policyName Unique name for the policy
     * @param {String} groupId group Id
     * @param {String} apiVersion Service Api Version.
     * @param {module:model/MAMPolicyAppIdOrGroupIdPayload} parameters Parameters supplied to the Create or update app to an android policy operation.
     * @param {module:api/DefaultApi~iosAddGroupForMAMPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    iosAddGroupForMAMPolicy(hostName, policyName, groupId, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling iosAddGroupForMAMPolicy");
      }
      // verify the required parameter 'policyName' is set
      if (policyName === undefined || policyName === null) {
        throw new Error("Missing the required parameter 'policyName' when calling iosAddGroupForMAMPolicy");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling iosAddGroupForMAMPolicy");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iosAddGroupForMAMPolicy");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling iosAddGroupForMAMPolicy");
      }

      let pathParams = {
        'hostName': hostName,
        'policyName': policyName,
        'groupId': groupId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/providers/Microsoft.Intune/locations/{hostName}/iosPolicies/{policyName}/groups/{groupId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iosCreateOrUpdateMAMPolicy operation.
     * @callback module:api/DefaultApi~iosCreateOrUpdateMAMPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IOSMAMPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates iOSMAMPolicy.
     * @param {String} hostName Location hostName for the tenant
     * @param {String} policyName Unique name for the policy
     * @param {String} apiVersion Service Api Version.
     * @param {module:model/IOSMAMPolicy} parameters Parameters supplied to the Create or update an android policy operation.
     * @param {module:api/DefaultApi~iosCreateOrUpdateMAMPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IOSMAMPolicy}
     */
    iosCreateOrUpdateMAMPolicy(hostName, policyName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling iosCreateOrUpdateMAMPolicy");
      }
      // verify the required parameter 'policyName' is set
      if (policyName === undefined || policyName === null) {
        throw new Error("Missing the required parameter 'policyName' when calling iosCreateOrUpdateMAMPolicy");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iosCreateOrUpdateMAMPolicy");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling iosCreateOrUpdateMAMPolicy");
      }

      let pathParams = {
        'hostName': hostName,
        'policyName': policyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IOSMAMPolicy;
      return this.apiClient.callApi(
        '/providers/Microsoft.Intune/locations/{hostName}/iosPolicies/{policyName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iosDeleteAppForMAMPolicy operation.
     * @callback module:api/DefaultApi~iosDeleteAppForMAMPolicyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete App for Ios Policy
     * @param {String} hostName Location hostName for the tenant
     * @param {String} policyName Unique name for the policy
     * @param {String} appName application unique Name
     * @param {String} apiVersion Service Api Version.
     * @param {module:api/DefaultApi~iosDeleteAppForMAMPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    iosDeleteAppForMAMPolicy(hostName, policyName, appName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling iosDeleteAppForMAMPolicy");
      }
      // verify the required parameter 'policyName' is set
      if (policyName === undefined || policyName === null) {
        throw new Error("Missing the required parameter 'policyName' when calling iosDeleteAppForMAMPolicy");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling iosDeleteAppForMAMPolicy");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iosDeleteAppForMAMPolicy");
      }

      let pathParams = {
        'hostName': hostName,
        'policyName': policyName,
        'appName': appName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/providers/Microsoft.Intune/locations/{hostName}/iosPolicies/{policyName}/apps/{appName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iosDeleteGroupForMAMPolicy operation.
     * @callback module:api/DefaultApi~iosDeleteGroupForMAMPolicyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Group for iOS Policy
     * @param {String} hostName Location hostName for the tenant
     * @param {String} policyName Unique name for the policy
     * @param {String} groupId application unique Name
     * @param {String} apiVersion Service Api Version.
     * @param {module:api/DefaultApi~iosDeleteGroupForMAMPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    iosDeleteGroupForMAMPolicy(hostName, policyName, groupId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling iosDeleteGroupForMAMPolicy");
      }
      // verify the required parameter 'policyName' is set
      if (policyName === undefined || policyName === null) {
        throw new Error("Missing the required parameter 'policyName' when calling iosDeleteGroupForMAMPolicy");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling iosDeleteGroupForMAMPolicy");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iosDeleteGroupForMAMPolicy");
      }

      let pathParams = {
        'hostName': hostName,
        'policyName': policyName,
        'groupId': groupId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/providers/Microsoft.Intune/locations/{hostName}/iosPolicies/{policyName}/groups/{groupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iosDeleteMAMPolicy operation.
     * @callback module:api/DefaultApi~iosDeleteMAMPolicyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Ios Policy
     * @param {String} hostName Location hostName for the tenant
     * @param {String} policyName Unique name for the policy
     * @param {String} apiVersion Service Api Version.
     * @param {module:api/DefaultApi~iosDeleteMAMPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    iosDeleteMAMPolicy(hostName, policyName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling iosDeleteMAMPolicy");
      }
      // verify the required parameter 'policyName' is set
      if (policyName === undefined || policyName === null) {
        throw new Error("Missing the required parameter 'policyName' when calling iosDeleteMAMPolicy");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iosDeleteMAMPolicy");
      }

      let pathParams = {
        'hostName': hostName,
        'policyName': policyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/providers/Microsoft.Intune/locations/{hostName}/iosPolicies/{policyName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iosGetAppForMAMPolicy operation.
     * @callback module:api/DefaultApi~iosGetAppForMAMPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get apps for an iOSMAMPolicy.
     * @param {String} hostName Location hostName for the tenant
     * @param {String} policyName Unique name for the policy
     * @param {String} apiVersion Service Api Version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation.
     * @param {Number} [top] 
     * @param {String} [select] select specific fields in entity.
     * @param {module:api/DefaultApi~iosGetAppForMAMPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationCollection}
     */
    iosGetAppForMAMPolicy(hostName, policyName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling iosGetAppForMAMPolicy");
      }
      // verify the required parameter 'policyName' is set
      if (policyName === undefined || policyName === null) {
        throw new Error("Missing the required parameter 'policyName' when calling iosGetAppForMAMPolicy");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iosGetAppForMAMPolicy");
      }

      let pathParams = {
        'hostName': hostName,
        'policyName': policyName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApplicationCollection;
      return this.apiClient.callApi(
        '/providers/Microsoft.Intune/locations/{hostName}/iosPolicies/{policyName}/apps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iosGetGroupsForMAMPolicy operation.
     * @callback module:api/DefaultApi~iosGetGroupsForMAMPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupsCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns groups for a given iOSMAMPolicy.
     * @param {String} hostName Location hostName for the tenant
     * @param {String} policyName policy name for the tenant
     * @param {String} apiVersion Service Api Version.
     * @param {module:api/DefaultApi~iosGetGroupsForMAMPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupsCollection}
     */
    iosGetGroupsForMAMPolicy(hostName, policyName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling iosGetGroupsForMAMPolicy");
      }
      // verify the required parameter 'policyName' is set
      if (policyName === undefined || policyName === null) {
        throw new Error("Missing the required parameter 'policyName' when calling iosGetGroupsForMAMPolicy");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iosGetGroupsForMAMPolicy");
      }

      let pathParams = {
        'hostName': hostName,
        'policyName': policyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GroupsCollection;
      return this.apiClient.callApi(
        '/providers/Microsoft.Intune/locations/{hostName}/iosPolicies/{policyName}/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iosGetMAMPolicies operation.
     * @callback module:api/DefaultApi~iosGetMAMPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IOSMAMPolicyCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns Intune iOSPolicies.
     * @param {String} hostName Location hostName for the tenant
     * @param {String} apiVersion Service Api Version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation.
     * @param {Number} [top] 
     * @param {String} [select] select specific fields in entity.
     * @param {module:api/DefaultApi~iosGetMAMPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IOSMAMPolicyCollection}
     */
    iosGetMAMPolicies(hostName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling iosGetMAMPolicies");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iosGetMAMPolicies");
      }

      let pathParams = {
        'hostName': hostName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IOSMAMPolicyCollection;
      return this.apiClient.callApi(
        '/providers/Microsoft.Intune/locations/{hostName}/iosPolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iosGetMAMPolicyByName operation.
     * @callback module:api/DefaultApi~iosGetMAMPolicyByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IOSMAMPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns Intune iOS policies.
     * @param {String} hostName Location hostName for the tenant
     * @param {String} policyName Unique name for the policy
     * @param {String} apiVersion Service Api Version.
     * @param {Object} opts Optional parameters
     * @param {String} [select] select specific fields in entity.
     * @param {module:api/DefaultApi~iosGetMAMPolicyByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IOSMAMPolicy}
     */
    iosGetMAMPolicyByName(hostName, policyName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling iosGetMAMPolicyByName");
      }
      // verify the required parameter 'policyName' is set
      if (policyName === undefined || policyName === null) {
        throw new Error("Missing the required parameter 'policyName' when calling iosGetMAMPolicyByName");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iosGetMAMPolicyByName");
      }

      let pathParams = {
        'hostName': hostName,
        'policyName': policyName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IOSMAMPolicy;
      return this.apiClient.callApi(
        '/providers/Microsoft.Intune/locations/{hostName}/iosPolicies/{policyName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iosPatchMAMPolicy operation.
     * @callback module:api/DefaultApi~iosPatchMAMPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IOSMAMPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  patch an iOSMAMPolicy.
     * @param {String} hostName Location hostName for the tenant
     * @param {String} policyName Unique name for the policy
     * @param {String} apiVersion Service Api Version.
     * @param {module:model/IOSMAMPolicy} parameters Parameters supplied to the Create or update an android policy operation.
     * @param {module:api/DefaultApi~iosPatchMAMPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IOSMAMPolicy}
     */
    iosPatchMAMPolicy(hostName, policyName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling iosPatchMAMPolicy");
      }
      // verify the required parameter 'policyName' is set
      if (policyName === undefined || policyName === null) {
        throw new Error("Missing the required parameter 'policyName' when calling iosPatchMAMPolicy");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iosPatchMAMPolicy");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling iosPatchMAMPolicy");
      }

      let pathParams = {
        'hostName': hostName,
        'policyName': policyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IOSMAMPolicy;
      return this.apiClient.callApi(
        '/providers/Microsoft.Intune/locations/{hostName}/iosPolicies/{policyName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the wipeMAMUserDevice operation.
     * @callback module:api/DefaultApi~wipeMAMUserDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WipeDeviceOperationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Wipe a device for a user.
     * @param {String} hostName Location hostName for the tenant
     * @param {String} userName unique user name
     * @param {String} deviceName device name
     * @param {String} apiVersion Service Api Version.
     * @param {module:api/DefaultApi~wipeMAMUserDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WipeDeviceOperationResult}
     */
    wipeMAMUserDevice(hostName, userName, deviceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling wipeMAMUserDevice");
      }
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling wipeMAMUserDevice");
      }
      // verify the required parameter 'deviceName' is set
      if (deviceName === undefined || deviceName === null) {
        throw new Error("Missing the required parameter 'deviceName' when calling wipeMAMUserDevice");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling wipeMAMUserDevice");
      }

      let pathParams = {
        'hostName': hostName,
        'userName': userName,
        'deviceName': deviceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WipeDeviceOperationResult;
      return this.apiClient.callApi(
        '/providers/Microsoft.Intune/locations/{hostName}/users/{userName}/devices/{deviceName}/wipe', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
