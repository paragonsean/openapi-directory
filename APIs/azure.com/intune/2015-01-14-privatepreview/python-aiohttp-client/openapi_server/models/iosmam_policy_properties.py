# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IOSMAMPolicyProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_encryption_level: str='deviceLocked', touch_id: str='enable', access_recheck_offline_timeout: str=None, access_recheck_online_timeout: str=None, app_sharing_from_level: str='none', app_sharing_to_level: str='none', authentication: str='required', clipboard_sharing_level: str='blocked', data_backup: str='allow', description: str=None, device_compliance: str='enable', file_sharing_save_as: str='allow', friendly_name: str=None, group_status: str='notTargeted', last_modified_time: datetime=None, managed_browser: str='required', num_of_apps: int=None, offline_wipe_timeout: str=None, pin: str='required', pin_num_retry: int=None):
        """IOSMAMPolicyProperties - a model defined in OpenAPI

        :param file_encryption_level: The file_encryption_level of this IOSMAMPolicyProperties.
        :param touch_id: The touch_id of this IOSMAMPolicyProperties.
        :param access_recheck_offline_timeout: The access_recheck_offline_timeout of this IOSMAMPolicyProperties.
        :param access_recheck_online_timeout: The access_recheck_online_timeout of this IOSMAMPolicyProperties.
        :param app_sharing_from_level: The app_sharing_from_level of this IOSMAMPolicyProperties.
        :param app_sharing_to_level: The app_sharing_to_level of this IOSMAMPolicyProperties.
        :param authentication: The authentication of this IOSMAMPolicyProperties.
        :param clipboard_sharing_level: The clipboard_sharing_level of this IOSMAMPolicyProperties.
        :param data_backup: The data_backup of this IOSMAMPolicyProperties.
        :param description: The description of this IOSMAMPolicyProperties.
        :param device_compliance: The device_compliance of this IOSMAMPolicyProperties.
        :param file_sharing_save_as: The file_sharing_save_as of this IOSMAMPolicyProperties.
        :param friendly_name: The friendly_name of this IOSMAMPolicyProperties.
        :param group_status: The group_status of this IOSMAMPolicyProperties.
        :param last_modified_time: The last_modified_time of this IOSMAMPolicyProperties.
        :param managed_browser: The managed_browser of this IOSMAMPolicyProperties.
        :param num_of_apps: The num_of_apps of this IOSMAMPolicyProperties.
        :param offline_wipe_timeout: The offline_wipe_timeout of this IOSMAMPolicyProperties.
        :param pin: The pin of this IOSMAMPolicyProperties.
        :param pin_num_retry: The pin_num_retry of this IOSMAMPolicyProperties.
        """
        self.openapi_types = {
            'file_encryption_level': str,
            'touch_id': str,
            'access_recheck_offline_timeout': str,
            'access_recheck_online_timeout': str,
            'app_sharing_from_level': str,
            'app_sharing_to_level': str,
            'authentication': str,
            'clipboard_sharing_level': str,
            'data_backup': str,
            'description': str,
            'device_compliance': str,
            'file_sharing_save_as': str,
            'friendly_name': str,
            'group_status': str,
            'last_modified_time': datetime,
            'managed_browser': str,
            'num_of_apps': int,
            'offline_wipe_timeout': str,
            'pin': str,
            'pin_num_retry': int
        }

        self.attribute_map = {
            'file_encryption_level': 'fileEncryptionLevel',
            'touch_id': 'touchId',
            'access_recheck_offline_timeout': 'accessRecheckOfflineTimeout',
            'access_recheck_online_timeout': 'accessRecheckOnlineTimeout',
            'app_sharing_from_level': 'appSharingFromLevel',
            'app_sharing_to_level': 'appSharingToLevel',
            'authentication': 'authentication',
            'clipboard_sharing_level': 'clipboardSharingLevel',
            'data_backup': 'dataBackup',
            'description': 'description',
            'device_compliance': 'deviceCompliance',
            'file_sharing_save_as': 'fileSharingSaveAs',
            'friendly_name': 'friendlyName',
            'group_status': 'groupStatus',
            'last_modified_time': 'lastModifiedTime',
            'managed_browser': 'managedBrowser',
            'num_of_apps': 'numOfApps',
            'offline_wipe_timeout': 'offlineWipeTimeout',
            'pin': 'pin',
            'pin_num_retry': 'pinNumRetry'
        }

        self._file_encryption_level = file_encryption_level
        self._touch_id = touch_id
        self._access_recheck_offline_timeout = access_recheck_offline_timeout
        self._access_recheck_online_timeout = access_recheck_online_timeout
        self._app_sharing_from_level = app_sharing_from_level
        self._app_sharing_to_level = app_sharing_to_level
        self._authentication = authentication
        self._clipboard_sharing_level = clipboard_sharing_level
        self._data_backup = data_backup
        self._description = description
        self._device_compliance = device_compliance
        self._file_sharing_save_as = file_sharing_save_as
        self._friendly_name = friendly_name
        self._group_status = group_status
        self._last_modified_time = last_modified_time
        self._managed_browser = managed_browser
        self._num_of_apps = num_of_apps
        self._offline_wipe_timeout = offline_wipe_timeout
        self._pin = pin
        self._pin_num_retry = pin_num_retry

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IOSMAMPolicyProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The iOSMAMPolicyProperties of this IOSMAMPolicyProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_encryption_level(self):
        """Gets the file_encryption_level of this IOSMAMPolicyProperties.


        :return: The file_encryption_level of this IOSMAMPolicyProperties.
        :rtype: str
        """
        return self._file_encryption_level

    @file_encryption_level.setter
    def file_encryption_level(self, file_encryption_level):
        """Sets the file_encryption_level of this IOSMAMPolicyProperties.


        :param file_encryption_level: The file_encryption_level of this IOSMAMPolicyProperties.
        :type file_encryption_level: str
        """
        allowed_values = ["deviceLocked", "deviceLockedExceptFilesOpen", "afterDeviceRestart", "useDeviceSettings"]  # noqa: E501
        if file_encryption_level not in allowed_values:
            raise ValueError(
                "Invalid value for `file_encryption_level` ({0}), must be one of {1}"
                .format(file_encryption_level, allowed_values)
            )

        self._file_encryption_level = file_encryption_level

    @property
    def touch_id(self):
        """Gets the touch_id of this IOSMAMPolicyProperties.


        :return: The touch_id of this IOSMAMPolicyProperties.
        :rtype: str
        """
        return self._touch_id

    @touch_id.setter
    def touch_id(self, touch_id):
        """Sets the touch_id of this IOSMAMPolicyProperties.


        :param touch_id: The touch_id of this IOSMAMPolicyProperties.
        :type touch_id: str
        """
        allowed_values = ["enable", "disable"]  # noqa: E501
        if touch_id not in allowed_values:
            raise ValueError(
                "Invalid value for `touch_id` ({0}), must be one of {1}"
                .format(touch_id, allowed_values)
            )

        self._touch_id = touch_id

    @property
    def access_recheck_offline_timeout(self):
        """Gets the access_recheck_offline_timeout of this IOSMAMPolicyProperties.


        :return: The access_recheck_offline_timeout of this IOSMAMPolicyProperties.
        :rtype: str
        """
        return self._access_recheck_offline_timeout

    @access_recheck_offline_timeout.setter
    def access_recheck_offline_timeout(self, access_recheck_offline_timeout):
        """Sets the access_recheck_offline_timeout of this IOSMAMPolicyProperties.


        :param access_recheck_offline_timeout: The access_recheck_offline_timeout of this IOSMAMPolicyProperties.
        :type access_recheck_offline_timeout: str
        """

        self._access_recheck_offline_timeout = access_recheck_offline_timeout

    @property
    def access_recheck_online_timeout(self):
        """Gets the access_recheck_online_timeout of this IOSMAMPolicyProperties.


        :return: The access_recheck_online_timeout of this IOSMAMPolicyProperties.
        :rtype: str
        """
        return self._access_recheck_online_timeout

    @access_recheck_online_timeout.setter
    def access_recheck_online_timeout(self, access_recheck_online_timeout):
        """Sets the access_recheck_online_timeout of this IOSMAMPolicyProperties.


        :param access_recheck_online_timeout: The access_recheck_online_timeout of this IOSMAMPolicyProperties.
        :type access_recheck_online_timeout: str
        """

        self._access_recheck_online_timeout = access_recheck_online_timeout

    @property
    def app_sharing_from_level(self):
        """Gets the app_sharing_from_level of this IOSMAMPolicyProperties.


        :return: The app_sharing_from_level of this IOSMAMPolicyProperties.
        :rtype: str
        """
        return self._app_sharing_from_level

    @app_sharing_from_level.setter
    def app_sharing_from_level(self, app_sharing_from_level):
        """Sets the app_sharing_from_level of this IOSMAMPolicyProperties.


        :param app_sharing_from_level: The app_sharing_from_level of this IOSMAMPolicyProperties.
        :type app_sharing_from_level: str
        """
        allowed_values = ["none", "policyManagedApps", "allApps"]  # noqa: E501
        if app_sharing_from_level not in allowed_values:
            raise ValueError(
                "Invalid value for `app_sharing_from_level` ({0}), must be one of {1}"
                .format(app_sharing_from_level, allowed_values)
            )

        self._app_sharing_from_level = app_sharing_from_level

    @property
    def app_sharing_to_level(self):
        """Gets the app_sharing_to_level of this IOSMAMPolicyProperties.


        :return: The app_sharing_to_level of this IOSMAMPolicyProperties.
        :rtype: str
        """
        return self._app_sharing_to_level

    @app_sharing_to_level.setter
    def app_sharing_to_level(self, app_sharing_to_level):
        """Sets the app_sharing_to_level of this IOSMAMPolicyProperties.


        :param app_sharing_to_level: The app_sharing_to_level of this IOSMAMPolicyProperties.
        :type app_sharing_to_level: str
        """
        allowed_values = ["none", "policyManagedApps", "allApps"]  # noqa: E501
        if app_sharing_to_level not in allowed_values:
            raise ValueError(
                "Invalid value for `app_sharing_to_level` ({0}), must be one of {1}"
                .format(app_sharing_to_level, allowed_values)
            )

        self._app_sharing_to_level = app_sharing_to_level

    @property
    def authentication(self):
        """Gets the authentication of this IOSMAMPolicyProperties.


        :return: The authentication of this IOSMAMPolicyProperties.
        :rtype: str
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this IOSMAMPolicyProperties.


        :param authentication: The authentication of this IOSMAMPolicyProperties.
        :type authentication: str
        """
        allowed_values = ["required", "notRequired"]  # noqa: E501
        if authentication not in allowed_values:
            raise ValueError(
                "Invalid value for `authentication` ({0}), must be one of {1}"
                .format(authentication, allowed_values)
            )

        self._authentication = authentication

    @property
    def clipboard_sharing_level(self):
        """Gets the clipboard_sharing_level of this IOSMAMPolicyProperties.


        :return: The clipboard_sharing_level of this IOSMAMPolicyProperties.
        :rtype: str
        """
        return self._clipboard_sharing_level

    @clipboard_sharing_level.setter
    def clipboard_sharing_level(self, clipboard_sharing_level):
        """Sets the clipboard_sharing_level of this IOSMAMPolicyProperties.


        :param clipboard_sharing_level: The clipboard_sharing_level of this IOSMAMPolicyProperties.
        :type clipboard_sharing_level: str
        """
        allowed_values = ["blocked", "policyManagedApps", "policyManagedAppsWithPasteIn", "allApps"]  # noqa: E501
        if clipboard_sharing_level not in allowed_values:
            raise ValueError(
                "Invalid value for `clipboard_sharing_level` ({0}), must be one of {1}"
                .format(clipboard_sharing_level, allowed_values)
            )

        self._clipboard_sharing_level = clipboard_sharing_level

    @property
    def data_backup(self):
        """Gets the data_backup of this IOSMAMPolicyProperties.


        :return: The data_backup of this IOSMAMPolicyProperties.
        :rtype: str
        """
        return self._data_backup

    @data_backup.setter
    def data_backup(self, data_backup):
        """Sets the data_backup of this IOSMAMPolicyProperties.


        :param data_backup: The data_backup of this IOSMAMPolicyProperties.
        :type data_backup: str
        """
        allowed_values = ["allow", "block"]  # noqa: E501
        if data_backup not in allowed_values:
            raise ValueError(
                "Invalid value for `data_backup` ({0}), must be one of {1}"
                .format(data_backup, allowed_values)
            )

        self._data_backup = data_backup

    @property
    def description(self):
        """Gets the description of this IOSMAMPolicyProperties.


        :return: The description of this IOSMAMPolicyProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IOSMAMPolicyProperties.


        :param description: The description of this IOSMAMPolicyProperties.
        :type description: str
        """

        self._description = description

    @property
    def device_compliance(self):
        """Gets the device_compliance of this IOSMAMPolicyProperties.


        :return: The device_compliance of this IOSMAMPolicyProperties.
        :rtype: str
        """
        return self._device_compliance

    @device_compliance.setter
    def device_compliance(self, device_compliance):
        """Sets the device_compliance of this IOSMAMPolicyProperties.


        :param device_compliance: The device_compliance of this IOSMAMPolicyProperties.
        :type device_compliance: str
        """
        allowed_values = ["enable", "disable"]  # noqa: E501
        if device_compliance not in allowed_values:
            raise ValueError(
                "Invalid value for `device_compliance` ({0}), must be one of {1}"
                .format(device_compliance, allowed_values)
            )

        self._device_compliance = device_compliance

    @property
    def file_sharing_save_as(self):
        """Gets the file_sharing_save_as of this IOSMAMPolicyProperties.


        :return: The file_sharing_save_as of this IOSMAMPolicyProperties.
        :rtype: str
        """
        return self._file_sharing_save_as

    @file_sharing_save_as.setter
    def file_sharing_save_as(self, file_sharing_save_as):
        """Sets the file_sharing_save_as of this IOSMAMPolicyProperties.


        :param file_sharing_save_as: The file_sharing_save_as of this IOSMAMPolicyProperties.
        :type file_sharing_save_as: str
        """
        allowed_values = ["allow", "block"]  # noqa: E501
        if file_sharing_save_as not in allowed_values:
            raise ValueError(
                "Invalid value for `file_sharing_save_as` ({0}), must be one of {1}"
                .format(file_sharing_save_as, allowed_values)
            )

        self._file_sharing_save_as = file_sharing_save_as

    @property
    def friendly_name(self):
        """Gets the friendly_name of this IOSMAMPolicyProperties.


        :return: The friendly_name of this IOSMAMPolicyProperties.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this IOSMAMPolicyProperties.


        :param friendly_name: The friendly_name of this IOSMAMPolicyProperties.
        :type friendly_name: str
        """
        if friendly_name is None:
            raise ValueError("Invalid value for `friendly_name`, must not be `None`")

        self._friendly_name = friendly_name

    @property
    def group_status(self):
        """Gets the group_status of this IOSMAMPolicyProperties.


        :return: The group_status of this IOSMAMPolicyProperties.
        :rtype: str
        """
        return self._group_status

    @group_status.setter
    def group_status(self, group_status):
        """Sets the group_status of this IOSMAMPolicyProperties.


        :param group_status: The group_status of this IOSMAMPolicyProperties.
        :type group_status: str
        """
        allowed_values = ["notTargeted", "targeted"]  # noqa: E501
        if group_status not in allowed_values:
            raise ValueError(
                "Invalid value for `group_status` ({0}), must be one of {1}"
                .format(group_status, allowed_values)
            )

        self._group_status = group_status

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this IOSMAMPolicyProperties.


        :return: The last_modified_time of this IOSMAMPolicyProperties.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this IOSMAMPolicyProperties.


        :param last_modified_time: The last_modified_time of this IOSMAMPolicyProperties.
        :type last_modified_time: datetime
        """

        self._last_modified_time = last_modified_time

    @property
    def managed_browser(self):
        """Gets the managed_browser of this IOSMAMPolicyProperties.


        :return: The managed_browser of this IOSMAMPolicyProperties.
        :rtype: str
        """
        return self._managed_browser

    @managed_browser.setter
    def managed_browser(self, managed_browser):
        """Sets the managed_browser of this IOSMAMPolicyProperties.


        :param managed_browser: The managed_browser of this IOSMAMPolicyProperties.
        :type managed_browser: str
        """
        allowed_values = ["required", "notRequired"]  # noqa: E501
        if managed_browser not in allowed_values:
            raise ValueError(
                "Invalid value for `managed_browser` ({0}), must be one of {1}"
                .format(managed_browser, allowed_values)
            )

        self._managed_browser = managed_browser

    @property
    def num_of_apps(self):
        """Gets the num_of_apps of this IOSMAMPolicyProperties.


        :return: The num_of_apps of this IOSMAMPolicyProperties.
        :rtype: int
        """
        return self._num_of_apps

    @num_of_apps.setter
    def num_of_apps(self, num_of_apps):
        """Sets the num_of_apps of this IOSMAMPolicyProperties.


        :param num_of_apps: The num_of_apps of this IOSMAMPolicyProperties.
        :type num_of_apps: int
        """

        self._num_of_apps = num_of_apps

    @property
    def offline_wipe_timeout(self):
        """Gets the offline_wipe_timeout of this IOSMAMPolicyProperties.


        :return: The offline_wipe_timeout of this IOSMAMPolicyProperties.
        :rtype: str
        """
        return self._offline_wipe_timeout

    @offline_wipe_timeout.setter
    def offline_wipe_timeout(self, offline_wipe_timeout):
        """Sets the offline_wipe_timeout of this IOSMAMPolicyProperties.


        :param offline_wipe_timeout: The offline_wipe_timeout of this IOSMAMPolicyProperties.
        :type offline_wipe_timeout: str
        """

        self._offline_wipe_timeout = offline_wipe_timeout

    @property
    def pin(self):
        """Gets the pin of this IOSMAMPolicyProperties.


        :return: The pin of this IOSMAMPolicyProperties.
        :rtype: str
        """
        return self._pin

    @pin.setter
    def pin(self, pin):
        """Sets the pin of this IOSMAMPolicyProperties.


        :param pin: The pin of this IOSMAMPolicyProperties.
        :type pin: str
        """
        allowed_values = ["required", "notRequired"]  # noqa: E501
        if pin not in allowed_values:
            raise ValueError(
                "Invalid value for `pin` ({0}), must be one of {1}"
                .format(pin, allowed_values)
            )

        self._pin = pin

    @property
    def pin_num_retry(self):
        """Gets the pin_num_retry of this IOSMAMPolicyProperties.


        :return: The pin_num_retry of this IOSMAMPolicyProperties.
        :rtype: int
        """
        return self._pin_num_retry

    @pin_num_retry.setter
    def pin_num_retry(self, pin_num_retry):
        """Sets the pin_num_retry of this IOSMAMPolicyProperties.


        :param pin_num_retry: The pin_num_retry of this IOSMAMPolicyProperties.
        :type pin_num_retry: int
        """

        self._pin_num_retry = pin_num_retry
