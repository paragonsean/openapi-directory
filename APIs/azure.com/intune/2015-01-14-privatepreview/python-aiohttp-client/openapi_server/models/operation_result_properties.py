# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.operation_metadata_properties import OperationMetadataProperties
from openapi_server import util


class OperationResultProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, friendly_name: str=None, last_modified_time: str=None, operation_metadata: List[OperationMetadataProperties]=None, state: str=None):
        """OperationResultProperties - a model defined in OpenAPI

        :param category: The category of this OperationResultProperties.
        :param friendly_name: The friendly_name of this OperationResultProperties.
        :param last_modified_time: The last_modified_time of this OperationResultProperties.
        :param operation_metadata: The operation_metadata of this OperationResultProperties.
        :param state: The state of this OperationResultProperties.
        """
        self.openapi_types = {
            'category': str,
            'friendly_name': str,
            'last_modified_time': str,
            'operation_metadata': List[OperationMetadataProperties],
            'state': str
        }

        self.attribute_map = {
            'category': 'category',
            'friendly_name': 'friendlyName',
            'last_modified_time': 'lastModifiedTime',
            'operation_metadata': 'operationMetadata',
            'state': 'state'
        }

        self._category = category
        self._friendly_name = friendly_name
        self._last_modified_time = last_modified_time
        self._operation_metadata = operation_metadata
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OperationResultProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OperationResultProperties of this OperationResultProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this OperationResultProperties.


        :return: The category of this OperationResultProperties.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this OperationResultProperties.


        :param category: The category of this OperationResultProperties.
        :type category: str
        """

        self._category = category

    @property
    def friendly_name(self):
        """Gets the friendly_name of this OperationResultProperties.


        :return: The friendly_name of this OperationResultProperties.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this OperationResultProperties.


        :param friendly_name: The friendly_name of this OperationResultProperties.
        :type friendly_name: str
        """
        if friendly_name is None:
            raise ValueError("Invalid value for `friendly_name`, must not be `None`")

        self._friendly_name = friendly_name

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this OperationResultProperties.


        :return: The last_modified_time of this OperationResultProperties.
        :rtype: str
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this OperationResultProperties.


        :param last_modified_time: The last_modified_time of this OperationResultProperties.
        :type last_modified_time: str
        """

        self._last_modified_time = last_modified_time

    @property
    def operation_metadata(self):
        """Gets the operation_metadata of this OperationResultProperties.


        :return: The operation_metadata of this OperationResultProperties.
        :rtype: List[OperationMetadataProperties]
        """
        return self._operation_metadata

    @operation_metadata.setter
    def operation_metadata(self, operation_metadata):
        """Sets the operation_metadata of this OperationResultProperties.


        :param operation_metadata: The operation_metadata of this OperationResultProperties.
        :type operation_metadata: List[OperationMetadataProperties]
        """
        if operation_metadata is None:
            raise ValueError("Invalid value for `operation_metadata`, must not be `None`")

        self._operation_metadata = operation_metadata

    @property
    def state(self):
        """Gets the state of this OperationResultProperties.


        :return: The state of this OperationResultProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this OperationResultProperties.


        :param state: The state of this OperationResultProperties.
        :type state: str
        """

        self._state = state
