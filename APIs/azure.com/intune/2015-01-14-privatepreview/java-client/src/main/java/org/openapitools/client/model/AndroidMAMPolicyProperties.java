/*
 * IntuneResourceManagementClient
 * Microsoft.Intune Resource provider Api features in the swagger-2.0 specification
 *
 * The version of the OpenAPI document: 2015-01-14-privatepreview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Intune MAM iOS Policy Properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:17:26.953185-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AndroidMAMPolicyProperties {
  /**
   * Gets or Sets fileEncryption
   */
  @JsonAdapter(FileEncryptionEnum.Adapter.class)
  public enum FileEncryptionEnum {
    REQUIRED("required"),
    
    NOT_REQUIRED("notRequired");

    private String value;

    FileEncryptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FileEncryptionEnum fromValue(String value) {
      for (FileEncryptionEnum b : FileEncryptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FileEncryptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FileEncryptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FileEncryptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FileEncryptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FileEncryptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FILE_ENCRYPTION = "fileEncryption";
  @SerializedName(SERIALIZED_NAME_FILE_ENCRYPTION)
  private FileEncryptionEnum fileEncryption = FileEncryptionEnum.REQUIRED;

  /**
   * Gets or Sets screenCapture
   */
  @JsonAdapter(ScreenCaptureEnum.Adapter.class)
  public enum ScreenCaptureEnum {
    ALLOW("allow"),
    
    BLOCK("block");

    private String value;

    ScreenCaptureEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScreenCaptureEnum fromValue(String value) {
      for (ScreenCaptureEnum b : ScreenCaptureEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScreenCaptureEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScreenCaptureEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScreenCaptureEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScreenCaptureEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ScreenCaptureEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCREEN_CAPTURE = "screenCapture";
  @SerializedName(SERIALIZED_NAME_SCREEN_CAPTURE)
  private ScreenCaptureEnum screenCapture = ScreenCaptureEnum.ALLOW;

  public static final String SERIALIZED_NAME_ACCESS_RECHECK_OFFLINE_TIMEOUT = "accessRecheckOfflineTimeout";
  @SerializedName(SERIALIZED_NAME_ACCESS_RECHECK_OFFLINE_TIMEOUT)
  private String accessRecheckOfflineTimeout;

  public static final String SERIALIZED_NAME_ACCESS_RECHECK_ONLINE_TIMEOUT = "accessRecheckOnlineTimeout";
  @SerializedName(SERIALIZED_NAME_ACCESS_RECHECK_ONLINE_TIMEOUT)
  private String accessRecheckOnlineTimeout;

  /**
   * Gets or Sets appSharingFromLevel
   */
  @JsonAdapter(AppSharingFromLevelEnum.Adapter.class)
  public enum AppSharingFromLevelEnum {
    NONE("none"),
    
    POLICY_MANAGED_APPS("policyManagedApps"),
    
    ALL_APPS("allApps");

    private String value;

    AppSharingFromLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AppSharingFromLevelEnum fromValue(String value) {
      for (AppSharingFromLevelEnum b : AppSharingFromLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AppSharingFromLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AppSharingFromLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AppSharingFromLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AppSharingFromLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AppSharingFromLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_APP_SHARING_FROM_LEVEL = "appSharingFromLevel";
  @SerializedName(SERIALIZED_NAME_APP_SHARING_FROM_LEVEL)
  private AppSharingFromLevelEnum appSharingFromLevel = AppSharingFromLevelEnum.NONE;

  /**
   * Gets or Sets appSharingToLevel
   */
  @JsonAdapter(AppSharingToLevelEnum.Adapter.class)
  public enum AppSharingToLevelEnum {
    NONE("none"),
    
    POLICY_MANAGED_APPS("policyManagedApps"),
    
    ALL_APPS("allApps");

    private String value;

    AppSharingToLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AppSharingToLevelEnum fromValue(String value) {
      for (AppSharingToLevelEnum b : AppSharingToLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AppSharingToLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AppSharingToLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AppSharingToLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AppSharingToLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AppSharingToLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_APP_SHARING_TO_LEVEL = "appSharingToLevel";
  @SerializedName(SERIALIZED_NAME_APP_SHARING_TO_LEVEL)
  private AppSharingToLevelEnum appSharingToLevel = AppSharingToLevelEnum.NONE;

  /**
   * Gets or Sets authentication
   */
  @JsonAdapter(AuthenticationEnum.Adapter.class)
  public enum AuthenticationEnum {
    REQUIRED("required"),
    
    NOT_REQUIRED("notRequired");

    private String value;

    AuthenticationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthenticationEnum fromValue(String value) {
      for (AuthenticationEnum b : AuthenticationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthenticationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthenticationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthenticationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthenticationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthenticationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTHENTICATION = "authentication";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION)
  private AuthenticationEnum authentication = AuthenticationEnum.REQUIRED;

  /**
   * Gets or Sets clipboardSharingLevel
   */
  @JsonAdapter(ClipboardSharingLevelEnum.Adapter.class)
  public enum ClipboardSharingLevelEnum {
    BLOCKED("blocked"),
    
    POLICY_MANAGED_APPS("policyManagedApps"),
    
    POLICY_MANAGED_APPS_WITH_PASTE_IN("policyManagedAppsWithPasteIn"),
    
    ALL_APPS("allApps");

    private String value;

    ClipboardSharingLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClipboardSharingLevelEnum fromValue(String value) {
      for (ClipboardSharingLevelEnum b : ClipboardSharingLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClipboardSharingLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClipboardSharingLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClipboardSharingLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClipboardSharingLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ClipboardSharingLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CLIPBOARD_SHARING_LEVEL = "clipboardSharingLevel";
  @SerializedName(SERIALIZED_NAME_CLIPBOARD_SHARING_LEVEL)
  private ClipboardSharingLevelEnum clipboardSharingLevel = ClipboardSharingLevelEnum.BLOCKED;

  /**
   * Gets or Sets dataBackup
   */
  @JsonAdapter(DataBackupEnum.Adapter.class)
  public enum DataBackupEnum {
    ALLOW("allow"),
    
    BLOCK("block");

    private String value;

    DataBackupEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataBackupEnum fromValue(String value) {
      for (DataBackupEnum b : DataBackupEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataBackupEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataBackupEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataBackupEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataBackupEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataBackupEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_BACKUP = "dataBackup";
  @SerializedName(SERIALIZED_NAME_DATA_BACKUP)
  private DataBackupEnum dataBackup = DataBackupEnum.ALLOW;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Gets or Sets deviceCompliance
   */
  @JsonAdapter(DeviceComplianceEnum.Adapter.class)
  public enum DeviceComplianceEnum {
    ENABLE("enable"),
    
    DISABLE("disable");

    private String value;

    DeviceComplianceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeviceComplianceEnum fromValue(String value) {
      for (DeviceComplianceEnum b : DeviceComplianceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeviceComplianceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeviceComplianceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeviceComplianceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeviceComplianceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeviceComplianceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEVICE_COMPLIANCE = "deviceCompliance";
  @SerializedName(SERIALIZED_NAME_DEVICE_COMPLIANCE)
  private DeviceComplianceEnum deviceCompliance = DeviceComplianceEnum.ENABLE;

  /**
   * Gets or Sets fileSharingSaveAs
   */
  @JsonAdapter(FileSharingSaveAsEnum.Adapter.class)
  public enum FileSharingSaveAsEnum {
    ALLOW("allow"),
    
    BLOCK("block");

    private String value;

    FileSharingSaveAsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FileSharingSaveAsEnum fromValue(String value) {
      for (FileSharingSaveAsEnum b : FileSharingSaveAsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FileSharingSaveAsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FileSharingSaveAsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FileSharingSaveAsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FileSharingSaveAsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FileSharingSaveAsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FILE_SHARING_SAVE_AS = "fileSharingSaveAs";
  @SerializedName(SERIALIZED_NAME_FILE_SHARING_SAVE_AS)
  private FileSharingSaveAsEnum fileSharingSaveAs = FileSharingSaveAsEnum.ALLOW;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendlyName";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  /**
   * Gets or Sets groupStatus
   */
  @JsonAdapter(GroupStatusEnum.Adapter.class)
  public enum GroupStatusEnum {
    NOT_TARGETED("notTargeted"),
    
    TARGETED("targeted");

    private String value;

    GroupStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GroupStatusEnum fromValue(String value) {
      for (GroupStatusEnum b : GroupStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GroupStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GroupStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GroupStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GroupStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GroupStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GROUP_STATUS = "groupStatus";
  @SerializedName(SERIALIZED_NAME_GROUP_STATUS)
  private GroupStatusEnum groupStatus = GroupStatusEnum.NOT_TARGETED;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "lastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private OffsetDateTime lastModifiedTime;

  /**
   * Gets or Sets managedBrowser
   */
  @JsonAdapter(ManagedBrowserEnum.Adapter.class)
  public enum ManagedBrowserEnum {
    REQUIRED("required"),
    
    NOT_REQUIRED("notRequired");

    private String value;

    ManagedBrowserEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ManagedBrowserEnum fromValue(String value) {
      for (ManagedBrowserEnum b : ManagedBrowserEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ManagedBrowserEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ManagedBrowserEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ManagedBrowserEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ManagedBrowserEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ManagedBrowserEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MANAGED_BROWSER = "managedBrowser";
  @SerializedName(SERIALIZED_NAME_MANAGED_BROWSER)
  private ManagedBrowserEnum managedBrowser = ManagedBrowserEnum.REQUIRED;

  public static final String SERIALIZED_NAME_NUM_OF_APPS = "numOfApps";
  @SerializedName(SERIALIZED_NAME_NUM_OF_APPS)
  private Integer numOfApps;

  public static final String SERIALIZED_NAME_OFFLINE_WIPE_TIMEOUT = "offlineWipeTimeout";
  @SerializedName(SERIALIZED_NAME_OFFLINE_WIPE_TIMEOUT)
  private String offlineWipeTimeout;

  /**
   * Gets or Sets pin
   */
  @JsonAdapter(PinEnum.Adapter.class)
  public enum PinEnum {
    REQUIRED("required"),
    
    NOT_REQUIRED("notRequired");

    private String value;

    PinEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PinEnum fromValue(String value) {
      for (PinEnum b : PinEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PinEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PinEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PinEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PinEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PinEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PIN = "pin";
  @SerializedName(SERIALIZED_NAME_PIN)
  private PinEnum pin = PinEnum.REQUIRED;

  public static final String SERIALIZED_NAME_PIN_NUM_RETRY = "pinNumRetry";
  @SerializedName(SERIALIZED_NAME_PIN_NUM_RETRY)
  private Integer pinNumRetry;

  public AndroidMAMPolicyProperties() {
  }

  public AndroidMAMPolicyProperties(
     GroupStatusEnum groupStatus, 
     OffsetDateTime lastModifiedTime, 
     Integer numOfApps
  ) {
    this();
    this.groupStatus = groupStatus;
    this.lastModifiedTime = lastModifiedTime;
    this.numOfApps = numOfApps;
  }

  public AndroidMAMPolicyProperties fileEncryption(FileEncryptionEnum fileEncryption) {
    this.fileEncryption = fileEncryption;
    return this;
  }

  /**
   * Get fileEncryption
   * @return fileEncryption
   */
  @javax.annotation.Nullable
  public FileEncryptionEnum getFileEncryption() {
    return fileEncryption;
  }

  public void setFileEncryption(FileEncryptionEnum fileEncryption) {
    this.fileEncryption = fileEncryption;
  }


  public AndroidMAMPolicyProperties screenCapture(ScreenCaptureEnum screenCapture) {
    this.screenCapture = screenCapture;
    return this;
  }

  /**
   * Get screenCapture
   * @return screenCapture
   */
  @javax.annotation.Nullable
  public ScreenCaptureEnum getScreenCapture() {
    return screenCapture;
  }

  public void setScreenCapture(ScreenCaptureEnum screenCapture) {
    this.screenCapture = screenCapture;
  }


  public AndroidMAMPolicyProperties accessRecheckOfflineTimeout(String accessRecheckOfflineTimeout) {
    this.accessRecheckOfflineTimeout = accessRecheckOfflineTimeout;
    return this;
  }

  /**
   * Get accessRecheckOfflineTimeout
   * @return accessRecheckOfflineTimeout
   */
  @javax.annotation.Nullable
  public String getAccessRecheckOfflineTimeout() {
    return accessRecheckOfflineTimeout;
  }

  public void setAccessRecheckOfflineTimeout(String accessRecheckOfflineTimeout) {
    this.accessRecheckOfflineTimeout = accessRecheckOfflineTimeout;
  }


  public AndroidMAMPolicyProperties accessRecheckOnlineTimeout(String accessRecheckOnlineTimeout) {
    this.accessRecheckOnlineTimeout = accessRecheckOnlineTimeout;
    return this;
  }

  /**
   * Get accessRecheckOnlineTimeout
   * @return accessRecheckOnlineTimeout
   */
  @javax.annotation.Nullable
  public String getAccessRecheckOnlineTimeout() {
    return accessRecheckOnlineTimeout;
  }

  public void setAccessRecheckOnlineTimeout(String accessRecheckOnlineTimeout) {
    this.accessRecheckOnlineTimeout = accessRecheckOnlineTimeout;
  }


  public AndroidMAMPolicyProperties appSharingFromLevel(AppSharingFromLevelEnum appSharingFromLevel) {
    this.appSharingFromLevel = appSharingFromLevel;
    return this;
  }

  /**
   * Get appSharingFromLevel
   * @return appSharingFromLevel
   */
  @javax.annotation.Nullable
  public AppSharingFromLevelEnum getAppSharingFromLevel() {
    return appSharingFromLevel;
  }

  public void setAppSharingFromLevel(AppSharingFromLevelEnum appSharingFromLevel) {
    this.appSharingFromLevel = appSharingFromLevel;
  }


  public AndroidMAMPolicyProperties appSharingToLevel(AppSharingToLevelEnum appSharingToLevel) {
    this.appSharingToLevel = appSharingToLevel;
    return this;
  }

  /**
   * Get appSharingToLevel
   * @return appSharingToLevel
   */
  @javax.annotation.Nullable
  public AppSharingToLevelEnum getAppSharingToLevel() {
    return appSharingToLevel;
  }

  public void setAppSharingToLevel(AppSharingToLevelEnum appSharingToLevel) {
    this.appSharingToLevel = appSharingToLevel;
  }


  public AndroidMAMPolicyProperties authentication(AuthenticationEnum authentication) {
    this.authentication = authentication;
    return this;
  }

  /**
   * Get authentication
   * @return authentication
   */
  @javax.annotation.Nullable
  public AuthenticationEnum getAuthentication() {
    return authentication;
  }

  public void setAuthentication(AuthenticationEnum authentication) {
    this.authentication = authentication;
  }


  public AndroidMAMPolicyProperties clipboardSharingLevel(ClipboardSharingLevelEnum clipboardSharingLevel) {
    this.clipboardSharingLevel = clipboardSharingLevel;
    return this;
  }

  /**
   * Get clipboardSharingLevel
   * @return clipboardSharingLevel
   */
  @javax.annotation.Nullable
  public ClipboardSharingLevelEnum getClipboardSharingLevel() {
    return clipboardSharingLevel;
  }

  public void setClipboardSharingLevel(ClipboardSharingLevelEnum clipboardSharingLevel) {
    this.clipboardSharingLevel = clipboardSharingLevel;
  }


  public AndroidMAMPolicyProperties dataBackup(DataBackupEnum dataBackup) {
    this.dataBackup = dataBackup;
    return this;
  }

  /**
   * Get dataBackup
   * @return dataBackup
   */
  @javax.annotation.Nullable
  public DataBackupEnum getDataBackup() {
    return dataBackup;
  }

  public void setDataBackup(DataBackupEnum dataBackup) {
    this.dataBackup = dataBackup;
  }


  public AndroidMAMPolicyProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AndroidMAMPolicyProperties deviceCompliance(DeviceComplianceEnum deviceCompliance) {
    this.deviceCompliance = deviceCompliance;
    return this;
  }

  /**
   * Get deviceCompliance
   * @return deviceCompliance
   */
  @javax.annotation.Nullable
  public DeviceComplianceEnum getDeviceCompliance() {
    return deviceCompliance;
  }

  public void setDeviceCompliance(DeviceComplianceEnum deviceCompliance) {
    this.deviceCompliance = deviceCompliance;
  }


  public AndroidMAMPolicyProperties fileSharingSaveAs(FileSharingSaveAsEnum fileSharingSaveAs) {
    this.fileSharingSaveAs = fileSharingSaveAs;
    return this;
  }

  /**
   * Get fileSharingSaveAs
   * @return fileSharingSaveAs
   */
  @javax.annotation.Nullable
  public FileSharingSaveAsEnum getFileSharingSaveAs() {
    return fileSharingSaveAs;
  }

  public void setFileSharingSaveAs(FileSharingSaveAsEnum fileSharingSaveAs) {
    this.fileSharingSaveAs = fileSharingSaveAs;
  }


  public AndroidMAMPolicyProperties friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * Get friendlyName
   * @return friendlyName
   */
  @javax.annotation.Nonnull
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  /**
   * Get groupStatus
   * @return groupStatus
   */
  @javax.annotation.Nullable
  public GroupStatusEnum getGroupStatus() {
    return groupStatus;
  }



  /**
   * Get lastModifiedTime
   * @return lastModifiedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedTime() {
    return lastModifiedTime;
  }



  public AndroidMAMPolicyProperties managedBrowser(ManagedBrowserEnum managedBrowser) {
    this.managedBrowser = managedBrowser;
    return this;
  }

  /**
   * Get managedBrowser
   * @return managedBrowser
   */
  @javax.annotation.Nullable
  public ManagedBrowserEnum getManagedBrowser() {
    return managedBrowser;
  }

  public void setManagedBrowser(ManagedBrowserEnum managedBrowser) {
    this.managedBrowser = managedBrowser;
  }


  /**
   * Get numOfApps
   * @return numOfApps
   */
  @javax.annotation.Nullable
  public Integer getNumOfApps() {
    return numOfApps;
  }



  public AndroidMAMPolicyProperties offlineWipeTimeout(String offlineWipeTimeout) {
    this.offlineWipeTimeout = offlineWipeTimeout;
    return this;
  }

  /**
   * Get offlineWipeTimeout
   * @return offlineWipeTimeout
   */
  @javax.annotation.Nullable
  public String getOfflineWipeTimeout() {
    return offlineWipeTimeout;
  }

  public void setOfflineWipeTimeout(String offlineWipeTimeout) {
    this.offlineWipeTimeout = offlineWipeTimeout;
  }


  public AndroidMAMPolicyProperties pin(PinEnum pin) {
    this.pin = pin;
    return this;
  }

  /**
   * Get pin
   * @return pin
   */
  @javax.annotation.Nullable
  public PinEnum getPin() {
    return pin;
  }

  public void setPin(PinEnum pin) {
    this.pin = pin;
  }


  public AndroidMAMPolicyProperties pinNumRetry(Integer pinNumRetry) {
    this.pinNumRetry = pinNumRetry;
    return this;
  }

  /**
   * Get pinNumRetry
   * @return pinNumRetry
   */
  @javax.annotation.Nullable
  public Integer getPinNumRetry() {
    return pinNumRetry;
  }

  public void setPinNumRetry(Integer pinNumRetry) {
    this.pinNumRetry = pinNumRetry;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AndroidMAMPolicyProperties androidMAMPolicyProperties = (AndroidMAMPolicyProperties) o;
    return Objects.equals(this.fileEncryption, androidMAMPolicyProperties.fileEncryption) &&
        Objects.equals(this.screenCapture, androidMAMPolicyProperties.screenCapture) &&
        Objects.equals(this.accessRecheckOfflineTimeout, androidMAMPolicyProperties.accessRecheckOfflineTimeout) &&
        Objects.equals(this.accessRecheckOnlineTimeout, androidMAMPolicyProperties.accessRecheckOnlineTimeout) &&
        Objects.equals(this.appSharingFromLevel, androidMAMPolicyProperties.appSharingFromLevel) &&
        Objects.equals(this.appSharingToLevel, androidMAMPolicyProperties.appSharingToLevel) &&
        Objects.equals(this.authentication, androidMAMPolicyProperties.authentication) &&
        Objects.equals(this.clipboardSharingLevel, androidMAMPolicyProperties.clipboardSharingLevel) &&
        Objects.equals(this.dataBackup, androidMAMPolicyProperties.dataBackup) &&
        Objects.equals(this.description, androidMAMPolicyProperties.description) &&
        Objects.equals(this.deviceCompliance, androidMAMPolicyProperties.deviceCompliance) &&
        Objects.equals(this.fileSharingSaveAs, androidMAMPolicyProperties.fileSharingSaveAs) &&
        Objects.equals(this.friendlyName, androidMAMPolicyProperties.friendlyName) &&
        Objects.equals(this.groupStatus, androidMAMPolicyProperties.groupStatus) &&
        Objects.equals(this.lastModifiedTime, androidMAMPolicyProperties.lastModifiedTime) &&
        Objects.equals(this.managedBrowser, androidMAMPolicyProperties.managedBrowser) &&
        Objects.equals(this.numOfApps, androidMAMPolicyProperties.numOfApps) &&
        Objects.equals(this.offlineWipeTimeout, androidMAMPolicyProperties.offlineWipeTimeout) &&
        Objects.equals(this.pin, androidMAMPolicyProperties.pin) &&
        Objects.equals(this.pinNumRetry, androidMAMPolicyProperties.pinNumRetry);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileEncryption, screenCapture, accessRecheckOfflineTimeout, accessRecheckOnlineTimeout, appSharingFromLevel, appSharingToLevel, authentication, clipboardSharingLevel, dataBackup, description, deviceCompliance, fileSharingSaveAs, friendlyName, groupStatus, lastModifiedTime, managedBrowser, numOfApps, offlineWipeTimeout, pin, pinNumRetry);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AndroidMAMPolicyProperties {\n");
    sb.append("    fileEncryption: ").append(toIndentedString(fileEncryption)).append("\n");
    sb.append("    screenCapture: ").append(toIndentedString(screenCapture)).append("\n");
    sb.append("    accessRecheckOfflineTimeout: ").append(toIndentedString(accessRecheckOfflineTimeout)).append("\n");
    sb.append("    accessRecheckOnlineTimeout: ").append(toIndentedString(accessRecheckOnlineTimeout)).append("\n");
    sb.append("    appSharingFromLevel: ").append(toIndentedString(appSharingFromLevel)).append("\n");
    sb.append("    appSharingToLevel: ").append(toIndentedString(appSharingToLevel)).append("\n");
    sb.append("    authentication: ").append(toIndentedString(authentication)).append("\n");
    sb.append("    clipboardSharingLevel: ").append(toIndentedString(clipboardSharingLevel)).append("\n");
    sb.append("    dataBackup: ").append(toIndentedString(dataBackup)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    deviceCompliance: ").append(toIndentedString(deviceCompliance)).append("\n");
    sb.append("    fileSharingSaveAs: ").append(toIndentedString(fileSharingSaveAs)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    groupStatus: ").append(toIndentedString(groupStatus)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    managedBrowser: ").append(toIndentedString(managedBrowser)).append("\n");
    sb.append("    numOfApps: ").append(toIndentedString(numOfApps)).append("\n");
    sb.append("    offlineWipeTimeout: ").append(toIndentedString(offlineWipeTimeout)).append("\n");
    sb.append("    pin: ").append(toIndentedString(pin)).append("\n");
    sb.append("    pinNumRetry: ").append(toIndentedString(pinNumRetry)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessRecheckOfflineTimeout");
    openapiFields.add("accessRecheckOnlineTimeout");
    openapiFields.add("appSharingFromLevel");
    openapiFields.add("appSharingToLevel");
    openapiFields.add("authentication");
    openapiFields.add("clipboardSharingLevel");
    openapiFields.add("dataBackup");
    openapiFields.add("description");
    openapiFields.add("deviceCompliance");
    openapiFields.add("fileSharingSaveAs");
    openapiFields.add("friendlyName");
    openapiFields.add("groupStatus");
    openapiFields.add("lastModifiedTime");
    openapiFields.add("managedBrowser");
    openapiFields.add("numOfApps");
    openapiFields.add("offlineWipeTimeout");
    openapiFields.add("pin");
    openapiFields.add("pinNumRetry");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("friendlyName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AndroidMAMPolicyProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AndroidMAMPolicyProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AndroidMAMPolicyProperties is not found in the empty JSON string", AndroidMAMPolicyProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AndroidMAMPolicyProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AndroidMAMPolicyProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AndroidMAMPolicyProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("fileEncryption") != null && !jsonObj.get("fileEncryption").isJsonNull()) && !jsonObj.get("fileEncryption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileEncryption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileEncryption").toString()));
      }
      // validate the optional field `fileEncryption`
      if (jsonObj.get("fileEncryption") != null && !jsonObj.get("fileEncryption").isJsonNull()) {
        FileEncryptionEnum.validateJsonElement(jsonObj.get("fileEncryption"));
      }
      if ((jsonObj.get("screenCapture") != null && !jsonObj.get("screenCapture").isJsonNull()) && !jsonObj.get("screenCapture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `screenCapture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("screenCapture").toString()));
      }
      // validate the optional field `screenCapture`
      if (jsonObj.get("screenCapture") != null && !jsonObj.get("screenCapture").isJsonNull()) {
        ScreenCaptureEnum.validateJsonElement(jsonObj.get("screenCapture"));
      }
      if ((jsonObj.get("accessRecheckOfflineTimeout") != null && !jsonObj.get("accessRecheckOfflineTimeout").isJsonNull()) && !jsonObj.get("accessRecheckOfflineTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessRecheckOfflineTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessRecheckOfflineTimeout").toString()));
      }
      if ((jsonObj.get("accessRecheckOnlineTimeout") != null && !jsonObj.get("accessRecheckOnlineTimeout").isJsonNull()) && !jsonObj.get("accessRecheckOnlineTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessRecheckOnlineTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessRecheckOnlineTimeout").toString()));
      }
      if ((jsonObj.get("appSharingFromLevel") != null && !jsonObj.get("appSharingFromLevel").isJsonNull()) && !jsonObj.get("appSharingFromLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appSharingFromLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appSharingFromLevel").toString()));
      }
      // validate the optional field `appSharingFromLevel`
      if (jsonObj.get("appSharingFromLevel") != null && !jsonObj.get("appSharingFromLevel").isJsonNull()) {
        AppSharingFromLevelEnum.validateJsonElement(jsonObj.get("appSharingFromLevel"));
      }
      if ((jsonObj.get("appSharingToLevel") != null && !jsonObj.get("appSharingToLevel").isJsonNull()) && !jsonObj.get("appSharingToLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appSharingToLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appSharingToLevel").toString()));
      }
      // validate the optional field `appSharingToLevel`
      if (jsonObj.get("appSharingToLevel") != null && !jsonObj.get("appSharingToLevel").isJsonNull()) {
        AppSharingToLevelEnum.validateJsonElement(jsonObj.get("appSharingToLevel"));
      }
      if ((jsonObj.get("authentication") != null && !jsonObj.get("authentication").isJsonNull()) && !jsonObj.get("authentication").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authentication` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authentication").toString()));
      }
      // validate the optional field `authentication`
      if (jsonObj.get("authentication") != null && !jsonObj.get("authentication").isJsonNull()) {
        AuthenticationEnum.validateJsonElement(jsonObj.get("authentication"));
      }
      if ((jsonObj.get("clipboardSharingLevel") != null && !jsonObj.get("clipboardSharingLevel").isJsonNull()) && !jsonObj.get("clipboardSharingLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clipboardSharingLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clipboardSharingLevel").toString()));
      }
      // validate the optional field `clipboardSharingLevel`
      if (jsonObj.get("clipboardSharingLevel") != null && !jsonObj.get("clipboardSharingLevel").isJsonNull()) {
        ClipboardSharingLevelEnum.validateJsonElement(jsonObj.get("clipboardSharingLevel"));
      }
      if ((jsonObj.get("dataBackup") != null && !jsonObj.get("dataBackup").isJsonNull()) && !jsonObj.get("dataBackup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataBackup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataBackup").toString()));
      }
      // validate the optional field `dataBackup`
      if (jsonObj.get("dataBackup") != null && !jsonObj.get("dataBackup").isJsonNull()) {
        DataBackupEnum.validateJsonElement(jsonObj.get("dataBackup"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("deviceCompliance") != null && !jsonObj.get("deviceCompliance").isJsonNull()) && !jsonObj.get("deviceCompliance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceCompliance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceCompliance").toString()));
      }
      // validate the optional field `deviceCompliance`
      if (jsonObj.get("deviceCompliance") != null && !jsonObj.get("deviceCompliance").isJsonNull()) {
        DeviceComplianceEnum.validateJsonElement(jsonObj.get("deviceCompliance"));
      }
      if ((jsonObj.get("fileSharingSaveAs") != null && !jsonObj.get("fileSharingSaveAs").isJsonNull()) && !jsonObj.get("fileSharingSaveAs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileSharingSaveAs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileSharingSaveAs").toString()));
      }
      // validate the optional field `fileSharingSaveAs`
      if (jsonObj.get("fileSharingSaveAs") != null && !jsonObj.get("fileSharingSaveAs").isJsonNull()) {
        FileSharingSaveAsEnum.validateJsonElement(jsonObj.get("fileSharingSaveAs"));
      }
      if (!jsonObj.get("friendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendlyName").toString()));
      }
      if ((jsonObj.get("groupStatus") != null && !jsonObj.get("groupStatus").isJsonNull()) && !jsonObj.get("groupStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupStatus").toString()));
      }
      // validate the optional field `groupStatus`
      if (jsonObj.get("groupStatus") != null && !jsonObj.get("groupStatus").isJsonNull()) {
        GroupStatusEnum.validateJsonElement(jsonObj.get("groupStatus"));
      }
      if ((jsonObj.get("managedBrowser") != null && !jsonObj.get("managedBrowser").isJsonNull()) && !jsonObj.get("managedBrowser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managedBrowser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managedBrowser").toString()));
      }
      // validate the optional field `managedBrowser`
      if (jsonObj.get("managedBrowser") != null && !jsonObj.get("managedBrowser").isJsonNull()) {
        ManagedBrowserEnum.validateJsonElement(jsonObj.get("managedBrowser"));
      }
      if ((jsonObj.get("offlineWipeTimeout") != null && !jsonObj.get("offlineWipeTimeout").isJsonNull()) && !jsonObj.get("offlineWipeTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offlineWipeTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offlineWipeTimeout").toString()));
      }
      if ((jsonObj.get("pin") != null && !jsonObj.get("pin").isJsonNull()) && !jsonObj.get("pin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pin").toString()));
      }
      // validate the optional field `pin`
      if (jsonObj.get("pin") != null && !jsonObj.get("pin").isJsonNull()) {
        PinEnum.validateJsonElement(jsonObj.get("pin"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AndroidMAMPolicyProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AndroidMAMPolicyProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AndroidMAMPolicyProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AndroidMAMPolicyProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<AndroidMAMPolicyProperties>() {
           @Override
           public void write(JsonWriter out, AndroidMAMPolicyProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AndroidMAMPolicyProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AndroidMAMPolicyProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AndroidMAMPolicyProperties
   * @throws IOException if the JSON string is invalid with respect to AndroidMAMPolicyProperties
   */
  public static AndroidMAMPolicyProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AndroidMAMPolicyProperties.class);
  }

  /**
   * Convert an instance of AndroidMAMPolicyProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

