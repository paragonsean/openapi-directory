/*
 * IntuneResourceManagementClient
 * Microsoft.Intune Resource provider Api features in the swagger-2.0 specification
 *
 * The version of the OpenAPI document: 2015-01-14-privatepreview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AndroidMAMPolicy;
import org.openapitools.client.model.AndroidMAMPolicyCollection;
import org.openapitools.client.model.ApplicationCollection;
import org.openapitools.client.model.Device;
import org.openapitools.client.model.DeviceCollection;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.FlaggedEnrolledAppCollection;
import org.openapitools.client.model.FlaggedUser;
import org.openapitools.client.model.FlaggedUserCollection;
import org.openapitools.client.model.GroupsCollection;
import org.openapitools.client.model.IOSMAMPolicy;
import org.openapitools.client.model.IOSMAMPolicyCollection;
import org.openapitools.client.model.Location;
import org.openapitools.client.model.LocationCollection;
import org.openapitools.client.model.MAMPolicyAppIdOrGroupIdPayload;
import org.openapitools.client.model.OperationResultCollection;
import org.openapitools.client.model.StatusesDefault;
import org.openapitools.client.model.WipeDeviceOperationResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Add app to an AndroidMAMPolicy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidAddAppForMAMPolicyTest() throws ApiException {
        String hostName = null;
        String policyName = null;
        String appName = null;
        String apiVersion = null;
        MAMPolicyAppIdOrGroupIdPayload parameters = null;
        api.androidAddAppForMAMPolicy(hostName, policyName, appName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Add group to an AndroidMAMPolicy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidAddGroupForMAMPolicyTest() throws ApiException {
        String hostName = null;
        String policyName = null;
        String groupId = null;
        String apiVersion = null;
        MAMPolicyAppIdOrGroupIdPayload parameters = null;
        api.androidAddGroupForMAMPolicy(hostName, policyName, groupId, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Creates or updates AndroidMAMPolicy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidCreateOrUpdateMAMPolicyTest() throws ApiException {
        String hostName = null;
        String policyName = null;
        String apiVersion = null;
        AndroidMAMPolicy parameters = null;
        AndroidMAMPolicy response = api.androidCreateOrUpdateMAMPolicy(hostName, policyName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Delete App for Android Policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidDeleteAppForMAMPolicyTest() throws ApiException {
        String hostName = null;
        String policyName = null;
        String appName = null;
        String apiVersion = null;
        api.androidDeleteAppForMAMPolicy(hostName, policyName, appName, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete Group for Android Policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidDeleteGroupForMAMPolicyTest() throws ApiException {
        String hostName = null;
        String policyName = null;
        String groupId = null;
        String apiVersion = null;
        api.androidDeleteGroupForMAMPolicy(hostName, policyName, groupId, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete Android Policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidDeleteMAMPolicyTest() throws ApiException {
        String hostName = null;
        String policyName = null;
        String apiVersion = null;
        api.androidDeleteMAMPolicy(hostName, policyName, apiVersion);
        // TODO: test validations
    }

    /**
     * Get apps for an AndroidMAMPolicy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidGetAppForMAMPolicyTest() throws ApiException {
        String hostName = null;
        String policyName = null;
        String apiVersion = null;
        String $filter = null;
        Integer $top = null;
        String $select = null;
        ApplicationCollection response = api.androidGetAppForMAMPolicy(hostName, policyName, apiVersion, $filter, $top, $select);
        // TODO: test validations
    }

    /**
     * Returns groups for a given AndroidMAMPolicy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidGetGroupsForMAMPolicyTest() throws ApiException {
        String hostName = null;
        String policyName = null;
        String apiVersion = null;
        GroupsCollection response = api.androidGetGroupsForMAMPolicy(hostName, policyName, apiVersion);
        // TODO: test validations
    }

    /**
     * Returns Intune Android policies.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidGetMAMPoliciesTest() throws ApiException {
        String hostName = null;
        String apiVersion = null;
        String $filter = null;
        Integer $top = null;
        String $select = null;
        AndroidMAMPolicyCollection response = api.androidGetMAMPolicies(hostName, apiVersion, $filter, $top, $select);
        // TODO: test validations
    }

    /**
     * Returns AndroidMAMPolicy with given name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidGetMAMPolicyByNameTest() throws ApiException {
        String hostName = null;
        String policyName = null;
        String apiVersion = null;
        String $select = null;
        AndroidMAMPolicy response = api.androidGetMAMPolicyByName(hostName, policyName, apiVersion, $select);
        // TODO: test validations
    }

    /**
     * Patch AndroidMAMPolicy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidPatchMAMPolicyTest() throws ApiException {
        String hostName = null;
        String policyName = null;
        String apiVersion = null;
        AndroidMAMPolicy parameters = null;
        AndroidMAMPolicy response = api.androidPatchMAMPolicy(hostName, policyName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Returns Intune Manageable apps.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAppsTest() throws ApiException {
        String hostName = null;
        String apiVersion = null;
        String $filter = null;
        Integer $top = null;
        String $select = null;
        ApplicationCollection response = api.getApps(hostName, apiVersion, $filter, $top, $select);
        // TODO: test validations
    }

    /**
     * Returns location for given tenant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLocationByHostNameTest() throws ApiException {
        String apiVersion = null;
        Location response = api.getLocationByHostName(apiVersion);
        // TODO: test validations
    }

    /**
     * Returns location for user tenant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLocationsTest() throws ApiException {
        String apiVersion = null;
        LocationCollection response = api.getLocations(apiVersion);
        // TODO: test validations
    }

    /**
     * Returns Intune flagged user details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMAMFlaggedUserByNameTest() throws ApiException {
        String hostName = null;
        String userName = null;
        String apiVersion = null;
        String $select = null;
        FlaggedUser response = api.getMAMFlaggedUserByName(hostName, userName, apiVersion, $select);
        // TODO: test validations
    }

    /**
     * Returns Intune flagged user collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMAMFlaggedUsersTest() throws ApiException {
        String hostName = null;
        String apiVersion = null;
        String $filter = null;
        Integer $top = null;
        String $select = null;
        FlaggedUserCollection response = api.getMAMFlaggedUsers(hostName, apiVersion, $filter, $top, $select);
        // TODO: test validations
    }

    /**
     * Returns Intune Tenant level statuses.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMAMStatusesTest() throws ApiException {
        String hostName = null;
        String apiVersion = null;
        StatusesDefault response = api.getMAMStatuses(hostName, apiVersion);
        // TODO: test validations
    }

    /**
     * Get a unique device for a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMAMUserDeviceByDeviceNameTest() throws ApiException {
        String hostName = null;
        String userName = null;
        String deviceName = null;
        String apiVersion = null;
        String $select = null;
        Device response = api.getMAMUserDeviceByDeviceName(hostName, userName, deviceName, apiVersion, $select);
        // TODO: test validations
    }

    /**
     * Get devices for a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMAMUserDevicesTest() throws ApiException {
        String hostName = null;
        String userName = null;
        String apiVersion = null;
        String $filter = null;
        Integer $top = null;
        String $select = null;
        DeviceCollection response = api.getMAMUserDevices(hostName, userName, apiVersion, $filter, $top, $select);
        // TODO: test validations
    }

    /**
     * Returns Intune flagged enrolled app collection for the User
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMAMUserFlaggedEnrolledAppsTest() throws ApiException {
        String hostName = null;
        String userName = null;
        String apiVersion = null;
        String $filter = null;
        Integer $top = null;
        String $select = null;
        FlaggedEnrolledAppCollection response = api.getMAMUserFlaggedEnrolledApps(hostName, userName, apiVersion, $filter, $top, $select);
        // TODO: test validations
    }

    /**
     * Returns operationResults.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOperationResultsTest() throws ApiException {
        String hostName = null;
        String apiVersion = null;
        String $filter = null;
        Integer $top = null;
        String $select = null;
        OperationResultCollection response = api.getOperationResults(hostName, apiVersion, $filter, $top, $select);
        // TODO: test validations
    }

    /**
     * Add app to an iOSMAMPolicy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iosAddAppForMAMPolicyTest() throws ApiException {
        String hostName = null;
        String policyName = null;
        String appName = null;
        String apiVersion = null;
        MAMPolicyAppIdOrGroupIdPayload parameters = null;
        api.iosAddAppForMAMPolicy(hostName, policyName, appName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Add group to an iOSMAMPolicy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iosAddGroupForMAMPolicyTest() throws ApiException {
        String hostName = null;
        String policyName = null;
        String groupId = null;
        String apiVersion = null;
        MAMPolicyAppIdOrGroupIdPayload parameters = null;
        api.iosAddGroupForMAMPolicy(hostName, policyName, groupId, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Creates or updates iOSMAMPolicy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iosCreateOrUpdateMAMPolicyTest() throws ApiException {
        String hostName = null;
        String policyName = null;
        String apiVersion = null;
        IOSMAMPolicy parameters = null;
        IOSMAMPolicy response = api.iosCreateOrUpdateMAMPolicy(hostName, policyName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Delete App for Ios Policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iosDeleteAppForMAMPolicyTest() throws ApiException {
        String hostName = null;
        String policyName = null;
        String appName = null;
        String apiVersion = null;
        api.iosDeleteAppForMAMPolicy(hostName, policyName, appName, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete Group for iOS Policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iosDeleteGroupForMAMPolicyTest() throws ApiException {
        String hostName = null;
        String policyName = null;
        String groupId = null;
        String apiVersion = null;
        api.iosDeleteGroupForMAMPolicy(hostName, policyName, groupId, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete Ios Policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iosDeleteMAMPolicyTest() throws ApiException {
        String hostName = null;
        String policyName = null;
        String apiVersion = null;
        api.iosDeleteMAMPolicy(hostName, policyName, apiVersion);
        // TODO: test validations
    }

    /**
     * Get apps for an iOSMAMPolicy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iosGetAppForMAMPolicyTest() throws ApiException {
        String hostName = null;
        String policyName = null;
        String apiVersion = null;
        String $filter = null;
        Integer $top = null;
        String $select = null;
        ApplicationCollection response = api.iosGetAppForMAMPolicy(hostName, policyName, apiVersion, $filter, $top, $select);
        // TODO: test validations
    }

    /**
     * Returns groups for a given iOSMAMPolicy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iosGetGroupsForMAMPolicyTest() throws ApiException {
        String hostName = null;
        String policyName = null;
        String apiVersion = null;
        GroupsCollection response = api.iosGetGroupsForMAMPolicy(hostName, policyName, apiVersion);
        // TODO: test validations
    }

    /**
     * Returns Intune iOSPolicies.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iosGetMAMPoliciesTest() throws ApiException {
        String hostName = null;
        String apiVersion = null;
        String $filter = null;
        Integer $top = null;
        String $select = null;
        IOSMAMPolicyCollection response = api.iosGetMAMPolicies(hostName, apiVersion, $filter, $top, $select);
        // TODO: test validations
    }

    /**
     * Returns Intune iOS policies.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iosGetMAMPolicyByNameTest() throws ApiException {
        String hostName = null;
        String policyName = null;
        String apiVersion = null;
        String $select = null;
        IOSMAMPolicy response = api.iosGetMAMPolicyByName(hostName, policyName, apiVersion, $select);
        // TODO: test validations
    }

    /**
     *  patch an iOSMAMPolicy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iosPatchMAMPolicyTest() throws ApiException {
        String hostName = null;
        String policyName = null;
        String apiVersion = null;
        IOSMAMPolicy parameters = null;
        IOSMAMPolicy response = api.iosPatchMAMPolicy(hostName, policyName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Wipe a device for a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wipeMAMUserDeviceTest() throws ApiException {
        String hostName = null;
        String userName = null;
        String deviceName = null;
        String apiVersion = null;
        WipeDeviceOperationResult response = api.wipeMAMUserDevice(hostName, userName, deviceName, apiVersion);
        // TODO: test validations
    }

}
