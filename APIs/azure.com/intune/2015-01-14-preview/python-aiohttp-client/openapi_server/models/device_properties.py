# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_type: str=None, friendly_name: str=None, platform: str=None, platform_version: str=None, user_id: str=None):
        """DeviceProperties - a model defined in OpenAPI

        :param device_type: The device_type of this DeviceProperties.
        :param friendly_name: The friendly_name of this DeviceProperties.
        :param platform: The platform of this DeviceProperties.
        :param platform_version: The platform_version of this DeviceProperties.
        :param user_id: The user_id of this DeviceProperties.
        """
        self.openapi_types = {
            'device_type': str,
            'friendly_name': str,
            'platform': str,
            'platform_version': str,
            'user_id': str
        }

        self.attribute_map = {
            'device_type': 'deviceType',
            'friendly_name': 'friendlyName',
            'platform': 'platform',
            'platform_version': 'platformVersion',
            'user_id': 'userId'
        }

        self._device_type = device_type
        self._friendly_name = friendly_name
        self._platform = platform
        self._platform_version = platform_version
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceProperties of this DeviceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_type(self):
        """Gets the device_type of this DeviceProperties.


        :return: The device_type of this DeviceProperties.
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this DeviceProperties.


        :param device_type: The device_type of this DeviceProperties.
        :type device_type: str
        """
        if device_type is None:
            raise ValueError("Invalid value for `device_type`, must not be `None`")

        self._device_type = device_type

    @property
    def friendly_name(self):
        """Gets the friendly_name of this DeviceProperties.


        :return: The friendly_name of this DeviceProperties.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this DeviceProperties.


        :param friendly_name: The friendly_name of this DeviceProperties.
        :type friendly_name: str
        """
        if friendly_name is None:
            raise ValueError("Invalid value for `friendly_name`, must not be `None`")

        self._friendly_name = friendly_name

    @property
    def platform(self):
        """Gets the platform of this DeviceProperties.


        :return: The platform of this DeviceProperties.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this DeviceProperties.


        :param platform: The platform of this DeviceProperties.
        :type platform: str
        """
        if platform is None:
            raise ValueError("Invalid value for `platform`, must not be `None`")

        self._platform = platform

    @property
    def platform_version(self):
        """Gets the platform_version of this DeviceProperties.


        :return: The platform_version of this DeviceProperties.
        :rtype: str
        """
        return self._platform_version

    @platform_version.setter
    def platform_version(self, platform_version):
        """Sets the platform_version of this DeviceProperties.


        :param platform_version: The platform_version of this DeviceProperties.
        :type platform_version: str
        """
        if platform_version is None:
            raise ValueError("Invalid value for `platform_version`, must not be `None`")

        self._platform_version = platform_version

    @property
    def user_id(self):
        """Gets the user_id of this DeviceProperties.


        :return: The user_id of this DeviceProperties.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this DeviceProperties.


        :param user_id: The user_id of this DeviceProperties.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
