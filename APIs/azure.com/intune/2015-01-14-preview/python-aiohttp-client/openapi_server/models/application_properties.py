# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApplicationProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: str=None, friendly_name: str=None, platform: str='ios'):
        """ApplicationProperties - a model defined in OpenAPI

        :param app_id: The app_id of this ApplicationProperties.
        :param friendly_name: The friendly_name of this ApplicationProperties.
        :param platform: The platform of this ApplicationProperties.
        """
        self.openapi_types = {
            'app_id': str,
            'friendly_name': str,
            'platform': str
        }

        self.attribute_map = {
            'app_id': 'appId',
            'friendly_name': 'friendlyName',
            'platform': 'platform'
        }

        self._app_id = app_id
        self._friendly_name = friendly_name
        self._platform = platform

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationProperties of this ApplicationProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this ApplicationProperties.


        :return: The app_id of this ApplicationProperties.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this ApplicationProperties.


        :param app_id: The app_id of this ApplicationProperties.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def friendly_name(self):
        """Gets the friendly_name of this ApplicationProperties.


        :return: The friendly_name of this ApplicationProperties.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this ApplicationProperties.


        :param friendly_name: The friendly_name of this ApplicationProperties.
        :type friendly_name: str
        """
        if friendly_name is None:
            raise ValueError("Invalid value for `friendly_name`, must not be `None`")

        self._friendly_name = friendly_name

    @property
    def platform(self):
        """Gets the platform of this ApplicationProperties.


        :return: The platform of this ApplicationProperties.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this ApplicationProperties.


        :param platform: The platform of this ApplicationProperties.
        :type platform: str
        """
        allowed_values = ["ios", "android", "windows"]  # noqa: E501
        if platform not in allowed_values:
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"
                .format(platform, allowed_values)
            )

        self._platform = platform
