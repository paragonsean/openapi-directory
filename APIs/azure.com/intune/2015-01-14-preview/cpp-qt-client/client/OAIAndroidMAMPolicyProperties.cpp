/**
 * IntuneResourceManagementClient
 * Microsoft.Intune Resource provider Api features in the swagger-2.0 specification
 *
 * The version of the OpenAPI document: 2015-01-14-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAndroidMAMPolicyProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAndroidMAMPolicyProperties::OAIAndroidMAMPolicyProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAndroidMAMPolicyProperties::OAIAndroidMAMPolicyProperties() {
    this->initializeModel();
}

OAIAndroidMAMPolicyProperties::~OAIAndroidMAMPolicyProperties() {}

void OAIAndroidMAMPolicyProperties::initializeModel() {

    m_file_encryption_isSet = false;
    m_file_encryption_isValid = false;

    m_screen_capture_isSet = false;
    m_screen_capture_isValid = false;

    m_access_recheck_offline_timeout_isSet = false;
    m_access_recheck_offline_timeout_isValid = false;

    m_access_recheck_online_timeout_isSet = false;
    m_access_recheck_online_timeout_isValid = false;

    m_app_sharing_from_level_isSet = false;
    m_app_sharing_from_level_isValid = false;

    m_app_sharing_to_level_isSet = false;
    m_app_sharing_to_level_isValid = false;

    m_authentication_isSet = false;
    m_authentication_isValid = false;

    m_clipboard_sharing_level_isSet = false;
    m_clipboard_sharing_level_isValid = false;

    m_data_backup_isSet = false;
    m_data_backup_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_device_compliance_isSet = false;
    m_device_compliance_isValid = false;

    m_file_sharing_save_as_isSet = false;
    m_file_sharing_save_as_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_group_status_isSet = false;
    m_group_status_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_managed_browser_isSet = false;
    m_managed_browser_isValid = false;

    m_num_of_apps_isSet = false;
    m_num_of_apps_isValid = false;

    m_offline_wipe_timeout_isSet = false;
    m_offline_wipe_timeout_isValid = false;

    m_pin_isSet = false;
    m_pin_isValid = false;

    m_pin_num_retry_isSet = false;
    m_pin_num_retry_isValid = false;
}

void OAIAndroidMAMPolicyProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAndroidMAMPolicyProperties::fromJsonObject(QJsonObject json) {

    m_file_encryption_isValid = ::OpenAPI::fromJsonValue(m_file_encryption, json[QString("fileEncryption")]);
    m_file_encryption_isSet = !json[QString("fileEncryption")].isNull() && m_file_encryption_isValid;

    m_screen_capture_isValid = ::OpenAPI::fromJsonValue(m_screen_capture, json[QString("screenCapture")]);
    m_screen_capture_isSet = !json[QString("screenCapture")].isNull() && m_screen_capture_isValid;

    m_access_recheck_offline_timeout_isValid = ::OpenAPI::fromJsonValue(m_access_recheck_offline_timeout, json[QString("accessRecheckOfflineTimeout")]);
    m_access_recheck_offline_timeout_isSet = !json[QString("accessRecheckOfflineTimeout")].isNull() && m_access_recheck_offline_timeout_isValid;

    m_access_recheck_online_timeout_isValid = ::OpenAPI::fromJsonValue(m_access_recheck_online_timeout, json[QString("accessRecheckOnlineTimeout")]);
    m_access_recheck_online_timeout_isSet = !json[QString("accessRecheckOnlineTimeout")].isNull() && m_access_recheck_online_timeout_isValid;

    m_app_sharing_from_level_isValid = ::OpenAPI::fromJsonValue(m_app_sharing_from_level, json[QString("appSharingFromLevel")]);
    m_app_sharing_from_level_isSet = !json[QString("appSharingFromLevel")].isNull() && m_app_sharing_from_level_isValid;

    m_app_sharing_to_level_isValid = ::OpenAPI::fromJsonValue(m_app_sharing_to_level, json[QString("appSharingToLevel")]);
    m_app_sharing_to_level_isSet = !json[QString("appSharingToLevel")].isNull() && m_app_sharing_to_level_isValid;

    m_authentication_isValid = ::OpenAPI::fromJsonValue(m_authentication, json[QString("authentication")]);
    m_authentication_isSet = !json[QString("authentication")].isNull() && m_authentication_isValid;

    m_clipboard_sharing_level_isValid = ::OpenAPI::fromJsonValue(m_clipboard_sharing_level, json[QString("clipboardSharingLevel")]);
    m_clipboard_sharing_level_isSet = !json[QString("clipboardSharingLevel")].isNull() && m_clipboard_sharing_level_isValid;

    m_data_backup_isValid = ::OpenAPI::fromJsonValue(m_data_backup, json[QString("dataBackup")]);
    m_data_backup_isSet = !json[QString("dataBackup")].isNull() && m_data_backup_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_device_compliance_isValid = ::OpenAPI::fromJsonValue(m_device_compliance, json[QString("deviceCompliance")]);
    m_device_compliance_isSet = !json[QString("deviceCompliance")].isNull() && m_device_compliance_isValid;

    m_file_sharing_save_as_isValid = ::OpenAPI::fromJsonValue(m_file_sharing_save_as, json[QString("fileSharingSaveAs")]);
    m_file_sharing_save_as_isSet = !json[QString("fileSharingSaveAs")].isNull() && m_file_sharing_save_as_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_group_status_isValid = ::OpenAPI::fromJsonValue(m_group_status, json[QString("groupStatus")]);
    m_group_status_isSet = !json[QString("groupStatus")].isNull() && m_group_status_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("lastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("lastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_managed_browser_isValid = ::OpenAPI::fromJsonValue(m_managed_browser, json[QString("managedBrowser")]);
    m_managed_browser_isSet = !json[QString("managedBrowser")].isNull() && m_managed_browser_isValid;

    m_num_of_apps_isValid = ::OpenAPI::fromJsonValue(m_num_of_apps, json[QString("numOfApps")]);
    m_num_of_apps_isSet = !json[QString("numOfApps")].isNull() && m_num_of_apps_isValid;

    m_offline_wipe_timeout_isValid = ::OpenAPI::fromJsonValue(m_offline_wipe_timeout, json[QString("offlineWipeTimeout")]);
    m_offline_wipe_timeout_isSet = !json[QString("offlineWipeTimeout")].isNull() && m_offline_wipe_timeout_isValid;

    m_pin_isValid = ::OpenAPI::fromJsonValue(m_pin, json[QString("pin")]);
    m_pin_isSet = !json[QString("pin")].isNull() && m_pin_isValid;

    m_pin_num_retry_isValid = ::OpenAPI::fromJsonValue(m_pin_num_retry, json[QString("pinNumRetry")]);
    m_pin_num_retry_isSet = !json[QString("pinNumRetry")].isNull() && m_pin_num_retry_isValid;
}

QString OAIAndroidMAMPolicyProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAndroidMAMPolicyProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_file_encryption_isSet) {
        obj.insert(QString("fileEncryption"), ::OpenAPI::toJsonValue(m_file_encryption));
    }
    if (m_screen_capture_isSet) {
        obj.insert(QString("screenCapture"), ::OpenAPI::toJsonValue(m_screen_capture));
    }
    if (m_access_recheck_offline_timeout_isSet) {
        obj.insert(QString("accessRecheckOfflineTimeout"), ::OpenAPI::toJsonValue(m_access_recheck_offline_timeout));
    }
    if (m_access_recheck_online_timeout_isSet) {
        obj.insert(QString("accessRecheckOnlineTimeout"), ::OpenAPI::toJsonValue(m_access_recheck_online_timeout));
    }
    if (m_app_sharing_from_level_isSet) {
        obj.insert(QString("appSharingFromLevel"), ::OpenAPI::toJsonValue(m_app_sharing_from_level));
    }
    if (m_app_sharing_to_level_isSet) {
        obj.insert(QString("appSharingToLevel"), ::OpenAPI::toJsonValue(m_app_sharing_to_level));
    }
    if (m_authentication_isSet) {
        obj.insert(QString("authentication"), ::OpenAPI::toJsonValue(m_authentication));
    }
    if (m_clipboard_sharing_level_isSet) {
        obj.insert(QString("clipboardSharingLevel"), ::OpenAPI::toJsonValue(m_clipboard_sharing_level));
    }
    if (m_data_backup_isSet) {
        obj.insert(QString("dataBackup"), ::OpenAPI::toJsonValue(m_data_backup));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_device_compliance_isSet) {
        obj.insert(QString("deviceCompliance"), ::OpenAPI::toJsonValue(m_device_compliance));
    }
    if (m_file_sharing_save_as_isSet) {
        obj.insert(QString("fileSharingSaveAs"), ::OpenAPI::toJsonValue(m_file_sharing_save_as));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_group_status_isSet) {
        obj.insert(QString("groupStatus"), ::OpenAPI::toJsonValue(m_group_status));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("lastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_managed_browser_isSet) {
        obj.insert(QString("managedBrowser"), ::OpenAPI::toJsonValue(m_managed_browser));
    }
    if (m_num_of_apps_isSet) {
        obj.insert(QString("numOfApps"), ::OpenAPI::toJsonValue(m_num_of_apps));
    }
    if (m_offline_wipe_timeout_isSet) {
        obj.insert(QString("offlineWipeTimeout"), ::OpenAPI::toJsonValue(m_offline_wipe_timeout));
    }
    if (m_pin_isSet) {
        obj.insert(QString("pin"), ::OpenAPI::toJsonValue(m_pin));
    }
    if (m_pin_num_retry_isSet) {
        obj.insert(QString("pinNumRetry"), ::OpenAPI::toJsonValue(m_pin_num_retry));
    }
    return obj;
}

QString OAIAndroidMAMPolicyProperties::getFileEncryption() const {
    return m_file_encryption;
}
void OAIAndroidMAMPolicyProperties::setFileEncryption(const QString &file_encryption) {
    m_file_encryption = file_encryption;
    m_file_encryption_isSet = true;
}

bool OAIAndroidMAMPolicyProperties::is_file_encryption_Set() const{
    return m_file_encryption_isSet;
}

bool OAIAndroidMAMPolicyProperties::is_file_encryption_Valid() const{
    return m_file_encryption_isValid;
}

QString OAIAndroidMAMPolicyProperties::getScreenCapture() const {
    return m_screen_capture;
}
void OAIAndroidMAMPolicyProperties::setScreenCapture(const QString &screen_capture) {
    m_screen_capture = screen_capture;
    m_screen_capture_isSet = true;
}

bool OAIAndroidMAMPolicyProperties::is_screen_capture_Set() const{
    return m_screen_capture_isSet;
}

bool OAIAndroidMAMPolicyProperties::is_screen_capture_Valid() const{
    return m_screen_capture_isValid;
}

QString OAIAndroidMAMPolicyProperties::getAccessRecheckOfflineTimeout() const {
    return m_access_recheck_offline_timeout;
}
void OAIAndroidMAMPolicyProperties::setAccessRecheckOfflineTimeout(const QString &access_recheck_offline_timeout) {
    m_access_recheck_offline_timeout = access_recheck_offline_timeout;
    m_access_recheck_offline_timeout_isSet = true;
}

bool OAIAndroidMAMPolicyProperties::is_access_recheck_offline_timeout_Set() const{
    return m_access_recheck_offline_timeout_isSet;
}

bool OAIAndroidMAMPolicyProperties::is_access_recheck_offline_timeout_Valid() const{
    return m_access_recheck_offline_timeout_isValid;
}

QString OAIAndroidMAMPolicyProperties::getAccessRecheckOnlineTimeout() const {
    return m_access_recheck_online_timeout;
}
void OAIAndroidMAMPolicyProperties::setAccessRecheckOnlineTimeout(const QString &access_recheck_online_timeout) {
    m_access_recheck_online_timeout = access_recheck_online_timeout;
    m_access_recheck_online_timeout_isSet = true;
}

bool OAIAndroidMAMPolicyProperties::is_access_recheck_online_timeout_Set() const{
    return m_access_recheck_online_timeout_isSet;
}

bool OAIAndroidMAMPolicyProperties::is_access_recheck_online_timeout_Valid() const{
    return m_access_recheck_online_timeout_isValid;
}

QString OAIAndroidMAMPolicyProperties::getAppSharingFromLevel() const {
    return m_app_sharing_from_level;
}
void OAIAndroidMAMPolicyProperties::setAppSharingFromLevel(const QString &app_sharing_from_level) {
    m_app_sharing_from_level = app_sharing_from_level;
    m_app_sharing_from_level_isSet = true;
}

bool OAIAndroidMAMPolicyProperties::is_app_sharing_from_level_Set() const{
    return m_app_sharing_from_level_isSet;
}

bool OAIAndroidMAMPolicyProperties::is_app_sharing_from_level_Valid() const{
    return m_app_sharing_from_level_isValid;
}

QString OAIAndroidMAMPolicyProperties::getAppSharingToLevel() const {
    return m_app_sharing_to_level;
}
void OAIAndroidMAMPolicyProperties::setAppSharingToLevel(const QString &app_sharing_to_level) {
    m_app_sharing_to_level = app_sharing_to_level;
    m_app_sharing_to_level_isSet = true;
}

bool OAIAndroidMAMPolicyProperties::is_app_sharing_to_level_Set() const{
    return m_app_sharing_to_level_isSet;
}

bool OAIAndroidMAMPolicyProperties::is_app_sharing_to_level_Valid() const{
    return m_app_sharing_to_level_isValid;
}

QString OAIAndroidMAMPolicyProperties::getAuthentication() const {
    return m_authentication;
}
void OAIAndroidMAMPolicyProperties::setAuthentication(const QString &authentication) {
    m_authentication = authentication;
    m_authentication_isSet = true;
}

bool OAIAndroidMAMPolicyProperties::is_authentication_Set() const{
    return m_authentication_isSet;
}

bool OAIAndroidMAMPolicyProperties::is_authentication_Valid() const{
    return m_authentication_isValid;
}

QString OAIAndroidMAMPolicyProperties::getClipboardSharingLevel() const {
    return m_clipboard_sharing_level;
}
void OAIAndroidMAMPolicyProperties::setClipboardSharingLevel(const QString &clipboard_sharing_level) {
    m_clipboard_sharing_level = clipboard_sharing_level;
    m_clipboard_sharing_level_isSet = true;
}

bool OAIAndroidMAMPolicyProperties::is_clipboard_sharing_level_Set() const{
    return m_clipboard_sharing_level_isSet;
}

bool OAIAndroidMAMPolicyProperties::is_clipboard_sharing_level_Valid() const{
    return m_clipboard_sharing_level_isValid;
}

QString OAIAndroidMAMPolicyProperties::getDataBackup() const {
    return m_data_backup;
}
void OAIAndroidMAMPolicyProperties::setDataBackup(const QString &data_backup) {
    m_data_backup = data_backup;
    m_data_backup_isSet = true;
}

bool OAIAndroidMAMPolicyProperties::is_data_backup_Set() const{
    return m_data_backup_isSet;
}

bool OAIAndroidMAMPolicyProperties::is_data_backup_Valid() const{
    return m_data_backup_isValid;
}

QString OAIAndroidMAMPolicyProperties::getDescription() const {
    return m_description;
}
void OAIAndroidMAMPolicyProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAndroidMAMPolicyProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAndroidMAMPolicyProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAndroidMAMPolicyProperties::getDeviceCompliance() const {
    return m_device_compliance;
}
void OAIAndroidMAMPolicyProperties::setDeviceCompliance(const QString &device_compliance) {
    m_device_compliance = device_compliance;
    m_device_compliance_isSet = true;
}

bool OAIAndroidMAMPolicyProperties::is_device_compliance_Set() const{
    return m_device_compliance_isSet;
}

bool OAIAndroidMAMPolicyProperties::is_device_compliance_Valid() const{
    return m_device_compliance_isValid;
}

QString OAIAndroidMAMPolicyProperties::getFileSharingSaveAs() const {
    return m_file_sharing_save_as;
}
void OAIAndroidMAMPolicyProperties::setFileSharingSaveAs(const QString &file_sharing_save_as) {
    m_file_sharing_save_as = file_sharing_save_as;
    m_file_sharing_save_as_isSet = true;
}

bool OAIAndroidMAMPolicyProperties::is_file_sharing_save_as_Set() const{
    return m_file_sharing_save_as_isSet;
}

bool OAIAndroidMAMPolicyProperties::is_file_sharing_save_as_Valid() const{
    return m_file_sharing_save_as_isValid;
}

QString OAIAndroidMAMPolicyProperties::getFriendlyName() const {
    return m_friendly_name;
}
void OAIAndroidMAMPolicyProperties::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIAndroidMAMPolicyProperties::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIAndroidMAMPolicyProperties::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIAndroidMAMPolicyProperties::getGroupStatus() const {
    return m_group_status;
}
void OAIAndroidMAMPolicyProperties::setGroupStatus(const QString &group_status) {
    m_group_status = group_status;
    m_group_status_isSet = true;
}

bool OAIAndroidMAMPolicyProperties::is_group_status_Set() const{
    return m_group_status_isSet;
}

bool OAIAndroidMAMPolicyProperties::is_group_status_Valid() const{
    return m_group_status_isValid;
}

QDateTime OAIAndroidMAMPolicyProperties::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIAndroidMAMPolicyProperties::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIAndroidMAMPolicyProperties::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIAndroidMAMPolicyProperties::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QString OAIAndroidMAMPolicyProperties::getManagedBrowser() const {
    return m_managed_browser;
}
void OAIAndroidMAMPolicyProperties::setManagedBrowser(const QString &managed_browser) {
    m_managed_browser = managed_browser;
    m_managed_browser_isSet = true;
}

bool OAIAndroidMAMPolicyProperties::is_managed_browser_Set() const{
    return m_managed_browser_isSet;
}

bool OAIAndroidMAMPolicyProperties::is_managed_browser_Valid() const{
    return m_managed_browser_isValid;
}

qint32 OAIAndroidMAMPolicyProperties::getNumOfApps() const {
    return m_num_of_apps;
}
void OAIAndroidMAMPolicyProperties::setNumOfApps(const qint32 &num_of_apps) {
    m_num_of_apps = num_of_apps;
    m_num_of_apps_isSet = true;
}

bool OAIAndroidMAMPolicyProperties::is_num_of_apps_Set() const{
    return m_num_of_apps_isSet;
}

bool OAIAndroidMAMPolicyProperties::is_num_of_apps_Valid() const{
    return m_num_of_apps_isValid;
}

QString OAIAndroidMAMPolicyProperties::getOfflineWipeTimeout() const {
    return m_offline_wipe_timeout;
}
void OAIAndroidMAMPolicyProperties::setOfflineWipeTimeout(const QString &offline_wipe_timeout) {
    m_offline_wipe_timeout = offline_wipe_timeout;
    m_offline_wipe_timeout_isSet = true;
}

bool OAIAndroidMAMPolicyProperties::is_offline_wipe_timeout_Set() const{
    return m_offline_wipe_timeout_isSet;
}

bool OAIAndroidMAMPolicyProperties::is_offline_wipe_timeout_Valid() const{
    return m_offline_wipe_timeout_isValid;
}

QString OAIAndroidMAMPolicyProperties::getPin() const {
    return m_pin;
}
void OAIAndroidMAMPolicyProperties::setPin(const QString &pin) {
    m_pin = pin;
    m_pin_isSet = true;
}

bool OAIAndroidMAMPolicyProperties::is_pin_Set() const{
    return m_pin_isSet;
}

bool OAIAndroidMAMPolicyProperties::is_pin_Valid() const{
    return m_pin_isValid;
}

qint32 OAIAndroidMAMPolicyProperties::getPinNumRetry() const {
    return m_pin_num_retry;
}
void OAIAndroidMAMPolicyProperties::setPinNumRetry(const qint32 &pin_num_retry) {
    m_pin_num_retry = pin_num_retry;
    m_pin_num_retry_isSet = true;
}

bool OAIAndroidMAMPolicyProperties::is_pin_num_retry_Set() const{
    return m_pin_num_retry_isSet;
}

bool OAIAndroidMAMPolicyProperties::is_pin_num_retry_Valid() const{
    return m_pin_num_retry_isValid;
}

bool OAIAndroidMAMPolicyProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_encryption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_screen_capture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_recheck_offline_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_recheck_online_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_sharing_from_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_sharing_to_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clipboard_sharing_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_backup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_compliance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_sharing_save_as_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_browser_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_of_apps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offline_wipe_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pin_num_retry_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAndroidMAMPolicyProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_friendly_name_isValid && true;
}

} // namespace OpenAPI
