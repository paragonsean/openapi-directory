/*
 * IntuneResourceManagementClient
 * Microsoft.Intune Resource provider Api features in the swagger-2.0 specification
 *
 * The version of the OpenAPI document: 2015-01-14-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AndroidMAMPolicy;
import org.openapitools.client.model.AndroidMAMPolicyCollection;
import org.openapitools.client.model.ApplicationCollection;
import org.openapitools.client.model.Device;
import org.openapitools.client.model.DeviceCollection;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.FlaggedEnrolledAppCollection;
import org.openapitools.client.model.FlaggedUser;
import org.openapitools.client.model.FlaggedUserCollection;
import org.openapitools.client.model.GroupsCollection;
import org.openapitools.client.model.IOSMAMPolicy;
import org.openapitools.client.model.IOSMAMPolicyCollection;
import org.openapitools.client.model.Location;
import org.openapitools.client.model.LocationCollection;
import org.openapitools.client.model.MAMPolicyAppIdOrGroupIdPayload;
import org.openapitools.client.model.OperationResultCollection;
import org.openapitools.client.model.StatusesDefault;
import org.openapitools.client.model.WipeDeviceOperationResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for androidAddAppForMAMPolicy
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param appName application unique Name (required)
     * @param apiVersion Service Api Version. (required)
     * @param parameters Parameters supplied to the Create or update app to an android policy operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call androidAddAppForMAMPolicyCall(String hostName, String policyName, String appName, String apiVersion, MAMPolicyAppIdOrGroupIdPayload parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Intune/locations/{hostName}/androidPolicies/{policyName}/apps/{appName}"
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()))
            .replace("{" + "policyName" + "}", localVarApiClient.escapeString(policyName.toString()))
            .replace("{" + "appName" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call androidAddAppForMAMPolicyValidateBeforeCall(String hostName, String policyName, String appName, String apiVersion, MAMPolicyAppIdOrGroupIdPayload parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling androidAddAppForMAMPolicy(Async)");
        }

        // verify the required parameter 'policyName' is set
        if (policyName == null) {
            throw new ApiException("Missing the required parameter 'policyName' when calling androidAddAppForMAMPolicy(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling androidAddAppForMAMPolicy(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling androidAddAppForMAMPolicy(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling androidAddAppForMAMPolicy(Async)");
        }

        return androidAddAppForMAMPolicyCall(hostName, policyName, appName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Add app to an AndroidMAMPolicy.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param appName application unique Name (required)
     * @param apiVersion Service Api Version. (required)
     * @param parameters Parameters supplied to the Create or update app to an android policy operation. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void androidAddAppForMAMPolicy(String hostName, String policyName, String appName, String apiVersion, MAMPolicyAppIdOrGroupIdPayload parameters) throws ApiException {
        androidAddAppForMAMPolicyWithHttpInfo(hostName, policyName, appName, apiVersion, parameters);
    }

    /**
     * 
     * Add app to an AndroidMAMPolicy.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param appName application unique Name (required)
     * @param apiVersion Service Api Version. (required)
     * @param parameters Parameters supplied to the Create or update app to an android policy operation. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> androidAddAppForMAMPolicyWithHttpInfo(String hostName, String policyName, String appName, String apiVersion, MAMPolicyAppIdOrGroupIdPayload parameters) throws ApiException {
        okhttp3.Call localVarCall = androidAddAppForMAMPolicyValidateBeforeCall(hostName, policyName, appName, apiVersion, parameters, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Add app to an AndroidMAMPolicy.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param appName application unique Name (required)
     * @param apiVersion Service Api Version. (required)
     * @param parameters Parameters supplied to the Create or update app to an android policy operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call androidAddAppForMAMPolicyAsync(String hostName, String policyName, String appName, String apiVersion, MAMPolicyAppIdOrGroupIdPayload parameters, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = androidAddAppForMAMPolicyValidateBeforeCall(hostName, policyName, appName, apiVersion, parameters, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for androidAddGroupForMAMPolicy
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param groupId group Id (required)
     * @param apiVersion Service Api Version. (required)
     * @param parameters Parameters supplied to the Create or update app to an android policy operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call androidAddGroupForMAMPolicyCall(String hostName, String policyName, String groupId, String apiVersion, MAMPolicyAppIdOrGroupIdPayload parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Intune/locations/{hostName}/androidPolicies/{policyName}/groups/{groupId}"
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()))
            .replace("{" + "policyName" + "}", localVarApiClient.escapeString(policyName.toString()))
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call androidAddGroupForMAMPolicyValidateBeforeCall(String hostName, String policyName, String groupId, String apiVersion, MAMPolicyAppIdOrGroupIdPayload parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling androidAddGroupForMAMPolicy(Async)");
        }

        // verify the required parameter 'policyName' is set
        if (policyName == null) {
            throw new ApiException("Missing the required parameter 'policyName' when calling androidAddGroupForMAMPolicy(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling androidAddGroupForMAMPolicy(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling androidAddGroupForMAMPolicy(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling androidAddGroupForMAMPolicy(Async)");
        }

        return androidAddGroupForMAMPolicyCall(hostName, policyName, groupId, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Add group to an AndroidMAMPolicy.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param groupId group Id (required)
     * @param apiVersion Service Api Version. (required)
     * @param parameters Parameters supplied to the Create or update app to an android policy operation. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void androidAddGroupForMAMPolicy(String hostName, String policyName, String groupId, String apiVersion, MAMPolicyAppIdOrGroupIdPayload parameters) throws ApiException {
        androidAddGroupForMAMPolicyWithHttpInfo(hostName, policyName, groupId, apiVersion, parameters);
    }

    /**
     * 
     * Add group to an AndroidMAMPolicy.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param groupId group Id (required)
     * @param apiVersion Service Api Version. (required)
     * @param parameters Parameters supplied to the Create or update app to an android policy operation. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> androidAddGroupForMAMPolicyWithHttpInfo(String hostName, String policyName, String groupId, String apiVersion, MAMPolicyAppIdOrGroupIdPayload parameters) throws ApiException {
        okhttp3.Call localVarCall = androidAddGroupForMAMPolicyValidateBeforeCall(hostName, policyName, groupId, apiVersion, parameters, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Add group to an AndroidMAMPolicy.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param groupId group Id (required)
     * @param apiVersion Service Api Version. (required)
     * @param parameters Parameters supplied to the Create or update app to an android policy operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call androidAddGroupForMAMPolicyAsync(String hostName, String policyName, String groupId, String apiVersion, MAMPolicyAppIdOrGroupIdPayload parameters, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = androidAddGroupForMAMPolicyValidateBeforeCall(hostName, policyName, groupId, apiVersion, parameters, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for androidCreateOrUpdateMAMPolicy
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @param parameters Parameters supplied to the Create or update an android policy operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> android entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call androidCreateOrUpdateMAMPolicyCall(String hostName, String policyName, String apiVersion, AndroidMAMPolicy parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Intune/locations/{hostName}/androidPolicies/{policyName}"
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()))
            .replace("{" + "policyName" + "}", localVarApiClient.escapeString(policyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call androidCreateOrUpdateMAMPolicyValidateBeforeCall(String hostName, String policyName, String apiVersion, AndroidMAMPolicy parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling androidCreateOrUpdateMAMPolicy(Async)");
        }

        // verify the required parameter 'policyName' is set
        if (policyName == null) {
            throw new ApiException("Missing the required parameter 'policyName' when calling androidCreateOrUpdateMAMPolicy(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling androidCreateOrUpdateMAMPolicy(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling androidCreateOrUpdateMAMPolicy(Async)");
        }

        return androidCreateOrUpdateMAMPolicyCall(hostName, policyName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Creates or updates AndroidMAMPolicy.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @param parameters Parameters supplied to the Create or update an android policy operation. (required)
     * @return AndroidMAMPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> android entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public AndroidMAMPolicy androidCreateOrUpdateMAMPolicy(String hostName, String policyName, String apiVersion, AndroidMAMPolicy parameters) throws ApiException {
        ApiResponse<AndroidMAMPolicy> localVarResp = androidCreateOrUpdateMAMPolicyWithHttpInfo(hostName, policyName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates AndroidMAMPolicy.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @param parameters Parameters supplied to the Create or update an android policy operation. (required)
     * @return ApiResponse&lt;AndroidMAMPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> android entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AndroidMAMPolicy> androidCreateOrUpdateMAMPolicyWithHttpInfo(String hostName, String policyName, String apiVersion, AndroidMAMPolicy parameters) throws ApiException {
        okhttp3.Call localVarCall = androidCreateOrUpdateMAMPolicyValidateBeforeCall(hostName, policyName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<AndroidMAMPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates AndroidMAMPolicy.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @param parameters Parameters supplied to the Create or update an android policy operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> android entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call androidCreateOrUpdateMAMPolicyAsync(String hostName, String policyName, String apiVersion, AndroidMAMPolicy parameters, final ApiCallback<AndroidMAMPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = androidCreateOrUpdateMAMPolicyValidateBeforeCall(hostName, policyName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<AndroidMAMPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for androidDeleteAppForMAMPolicy
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param appName application unique Name (required)
     * @param apiVersion Service Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call androidDeleteAppForMAMPolicyCall(String hostName, String policyName, String appName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Intune/locations/{hostName}/androidPolicies/{policyName}/apps/{appName}"
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()))
            .replace("{" + "policyName" + "}", localVarApiClient.escapeString(policyName.toString()))
            .replace("{" + "appName" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call androidDeleteAppForMAMPolicyValidateBeforeCall(String hostName, String policyName, String appName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling androidDeleteAppForMAMPolicy(Async)");
        }

        // verify the required parameter 'policyName' is set
        if (policyName == null) {
            throw new ApiException("Missing the required parameter 'policyName' when calling androidDeleteAppForMAMPolicy(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling androidDeleteAppForMAMPolicy(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling androidDeleteAppForMAMPolicy(Async)");
        }

        return androidDeleteAppForMAMPolicyCall(hostName, policyName, appName, apiVersion, _callback);

    }

    /**
     * 
     * Delete App for Android Policy
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param appName application unique Name (required)
     * @param apiVersion Service Api Version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void androidDeleteAppForMAMPolicy(String hostName, String policyName, String appName, String apiVersion) throws ApiException {
        androidDeleteAppForMAMPolicyWithHttpInfo(hostName, policyName, appName, apiVersion);
    }

    /**
     * 
     * Delete App for Android Policy
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param appName application unique Name (required)
     * @param apiVersion Service Api Version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> androidDeleteAppForMAMPolicyWithHttpInfo(String hostName, String policyName, String appName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = androidDeleteAppForMAMPolicyValidateBeforeCall(hostName, policyName, appName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete App for Android Policy
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param appName application unique Name (required)
     * @param apiVersion Service Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call androidDeleteAppForMAMPolicyAsync(String hostName, String policyName, String appName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = androidDeleteAppForMAMPolicyValidateBeforeCall(hostName, policyName, appName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for androidDeleteGroupForMAMPolicy
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param groupId application unique Name (required)
     * @param apiVersion Service Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call androidDeleteGroupForMAMPolicyCall(String hostName, String policyName, String groupId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Intune/locations/{hostName}/androidPolicies/{policyName}/groups/{groupId}"
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()))
            .replace("{" + "policyName" + "}", localVarApiClient.escapeString(policyName.toString()))
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call androidDeleteGroupForMAMPolicyValidateBeforeCall(String hostName, String policyName, String groupId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling androidDeleteGroupForMAMPolicy(Async)");
        }

        // verify the required parameter 'policyName' is set
        if (policyName == null) {
            throw new ApiException("Missing the required parameter 'policyName' when calling androidDeleteGroupForMAMPolicy(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling androidDeleteGroupForMAMPolicy(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling androidDeleteGroupForMAMPolicy(Async)");
        }

        return androidDeleteGroupForMAMPolicyCall(hostName, policyName, groupId, apiVersion, _callback);

    }

    /**
     * 
     * Delete Group for Android Policy
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param groupId application unique Name (required)
     * @param apiVersion Service Api Version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void androidDeleteGroupForMAMPolicy(String hostName, String policyName, String groupId, String apiVersion) throws ApiException {
        androidDeleteGroupForMAMPolicyWithHttpInfo(hostName, policyName, groupId, apiVersion);
    }

    /**
     * 
     * Delete Group for Android Policy
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param groupId application unique Name (required)
     * @param apiVersion Service Api Version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> androidDeleteGroupForMAMPolicyWithHttpInfo(String hostName, String policyName, String groupId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = androidDeleteGroupForMAMPolicyValidateBeforeCall(hostName, policyName, groupId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete Group for Android Policy
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param groupId application unique Name (required)
     * @param apiVersion Service Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call androidDeleteGroupForMAMPolicyAsync(String hostName, String policyName, String groupId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = androidDeleteGroupForMAMPolicyValidateBeforeCall(hostName, policyName, groupId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for androidDeleteMAMPolicy
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call androidDeleteMAMPolicyCall(String hostName, String policyName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Intune/locations/{hostName}/androidPolicies/{policyName}"
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()))
            .replace("{" + "policyName" + "}", localVarApiClient.escapeString(policyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call androidDeleteMAMPolicyValidateBeforeCall(String hostName, String policyName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling androidDeleteMAMPolicy(Async)");
        }

        // verify the required parameter 'policyName' is set
        if (policyName == null) {
            throw new ApiException("Missing the required parameter 'policyName' when calling androidDeleteMAMPolicy(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling androidDeleteMAMPolicy(Async)");
        }

        return androidDeleteMAMPolicyCall(hostName, policyName, apiVersion, _callback);

    }

    /**
     * 
     * Delete Android Policy
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void androidDeleteMAMPolicy(String hostName, String policyName, String apiVersion) throws ApiException {
        androidDeleteMAMPolicyWithHttpInfo(hostName, policyName, apiVersion);
    }

    /**
     * 
     * Delete Android Policy
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> androidDeleteMAMPolicyWithHttpInfo(String hostName, String policyName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = androidDeleteMAMPolicyValidateBeforeCall(hostName, policyName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete Android Policy
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call androidDeleteMAMPolicyAsync(String hostName, String policyName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = androidDeleteMAMPolicyValidateBeforeCall(hostName, policyName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for androidGetAppForMAMPolicy
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $select select specific fields in entity. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> applications as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call androidGetAppForMAMPolicyCall(String hostName, String policyName, String apiVersion, String $filter, Integer $top, String $select, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Intune/locations/{hostName}/AndroidPolicies/{policyName}/apps"
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()))
            .replace("{" + "policyName" + "}", localVarApiClient.escapeString(policyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call androidGetAppForMAMPolicyValidateBeforeCall(String hostName, String policyName, String apiVersion, String $filter, Integer $top, String $select, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling androidGetAppForMAMPolicy(Async)");
        }

        // verify the required parameter 'policyName' is set
        if (policyName == null) {
            throw new ApiException("Missing the required parameter 'policyName' when calling androidGetAppForMAMPolicy(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling androidGetAppForMAMPolicy(Async)");
        }

        return androidGetAppForMAMPolicyCall(hostName, policyName, apiVersion, $filter, $top, $select, _callback);

    }

    /**
     * 
     * Get apps for an AndroidMAMPolicy.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $select select specific fields in entity. (optional)
     * @return ApplicationCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> applications as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationCollection androidGetAppForMAMPolicy(String hostName, String policyName, String apiVersion, String $filter, Integer $top, String $select) throws ApiException {
        ApiResponse<ApplicationCollection> localVarResp = androidGetAppForMAMPolicyWithHttpInfo(hostName, policyName, apiVersion, $filter, $top, $select);
        return localVarResp.getData();
    }

    /**
     * 
     * Get apps for an AndroidMAMPolicy.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $select select specific fields in entity. (optional)
     * @return ApiResponse&lt;ApplicationCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> applications as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationCollection> androidGetAppForMAMPolicyWithHttpInfo(String hostName, String policyName, String apiVersion, String $filter, Integer $top, String $select) throws ApiException {
        okhttp3.Call localVarCall = androidGetAppForMAMPolicyValidateBeforeCall(hostName, policyName, apiVersion, $filter, $top, $select, null);
        Type localVarReturnType = new TypeToken<ApplicationCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get apps for an AndroidMAMPolicy.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $select select specific fields in entity. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> applications as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call androidGetAppForMAMPolicyAsync(String hostName, String policyName, String apiVersion, String $filter, Integer $top, String $select, final ApiCallback<ApplicationCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = androidGetAppForMAMPolicyValidateBeforeCall(hostName, policyName, apiVersion, $filter, $top, $select, _callback);
        Type localVarReturnType = new TypeToken<ApplicationCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for androidGetGroupsForMAMPolicy
     * @param hostName Location hostName for the tenant (required)
     * @param policyName policy name for the tenant (required)
     * @param apiVersion Service Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> groups as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call androidGetGroupsForMAMPolicyCall(String hostName, String policyName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Intune/locations/{hostName}/androidPolicies/{policyName}/groups"
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()))
            .replace("{" + "policyName" + "}", localVarApiClient.escapeString(policyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call androidGetGroupsForMAMPolicyValidateBeforeCall(String hostName, String policyName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling androidGetGroupsForMAMPolicy(Async)");
        }

        // verify the required parameter 'policyName' is set
        if (policyName == null) {
            throw new ApiException("Missing the required parameter 'policyName' when calling androidGetGroupsForMAMPolicy(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling androidGetGroupsForMAMPolicy(Async)");
        }

        return androidGetGroupsForMAMPolicyCall(hostName, policyName, apiVersion, _callback);

    }

    /**
     * 
     * Returns groups for a given AndroidMAMPolicy.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName policy name for the tenant (required)
     * @param apiVersion Service Api Version. (required)
     * @return GroupsCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> groups as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GroupsCollection androidGetGroupsForMAMPolicy(String hostName, String policyName, String apiVersion) throws ApiException {
        ApiResponse<GroupsCollection> localVarResp = androidGetGroupsForMAMPolicyWithHttpInfo(hostName, policyName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns groups for a given AndroidMAMPolicy.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName policy name for the tenant (required)
     * @param apiVersion Service Api Version. (required)
     * @return ApiResponse&lt;GroupsCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> groups as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupsCollection> androidGetGroupsForMAMPolicyWithHttpInfo(String hostName, String policyName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = androidGetGroupsForMAMPolicyValidateBeforeCall(hostName, policyName, apiVersion, null);
        Type localVarReturnType = new TypeToken<GroupsCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns groups for a given AndroidMAMPolicy.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName policy name for the tenant (required)
     * @param apiVersion Service Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> groups as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call androidGetGroupsForMAMPolicyAsync(String hostName, String policyName, String apiVersion, final ApiCallback<GroupsCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = androidGetGroupsForMAMPolicyValidateBeforeCall(hostName, policyName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<GroupsCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for androidGetMAMPolicies
     * @param hostName Location hostName for the tenant (required)
     * @param apiVersion Service Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $select select specific fields in entity. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> android Policies response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call androidGetMAMPoliciesCall(String hostName, String apiVersion, String $filter, Integer $top, String $select, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Intune/locations/{hostName}/androidPolicies"
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call androidGetMAMPoliciesValidateBeforeCall(String hostName, String apiVersion, String $filter, Integer $top, String $select, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling androidGetMAMPolicies(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling androidGetMAMPolicies(Async)");
        }

        return androidGetMAMPoliciesCall(hostName, apiVersion, $filter, $top, $select, _callback);

    }

    /**
     * 
     * Returns Intune Android policies.
     * @param hostName Location hostName for the tenant (required)
     * @param apiVersion Service Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $select select specific fields in entity. (optional)
     * @return AndroidMAMPolicyCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> android Policies response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public AndroidMAMPolicyCollection androidGetMAMPolicies(String hostName, String apiVersion, String $filter, Integer $top, String $select) throws ApiException {
        ApiResponse<AndroidMAMPolicyCollection> localVarResp = androidGetMAMPoliciesWithHttpInfo(hostName, apiVersion, $filter, $top, $select);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns Intune Android policies.
     * @param hostName Location hostName for the tenant (required)
     * @param apiVersion Service Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $select select specific fields in entity. (optional)
     * @return ApiResponse&lt;AndroidMAMPolicyCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> android Policies response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AndroidMAMPolicyCollection> androidGetMAMPoliciesWithHttpInfo(String hostName, String apiVersion, String $filter, Integer $top, String $select) throws ApiException {
        okhttp3.Call localVarCall = androidGetMAMPoliciesValidateBeforeCall(hostName, apiVersion, $filter, $top, $select, null);
        Type localVarReturnType = new TypeToken<AndroidMAMPolicyCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns Intune Android policies.
     * @param hostName Location hostName for the tenant (required)
     * @param apiVersion Service Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $select select specific fields in entity. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> android Policies response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call androidGetMAMPoliciesAsync(String hostName, String apiVersion, String $filter, Integer $top, String $select, final ApiCallback<AndroidMAMPolicyCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = androidGetMAMPoliciesValidateBeforeCall(hostName, apiVersion, $filter, $top, $select, _callback);
        Type localVarReturnType = new TypeToken<AndroidMAMPolicyCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for androidGetMAMPolicyByName
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @param $select select specific fields in entity. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> iOSMAMPolicy entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call androidGetMAMPolicyByNameCall(String hostName, String policyName, String apiVersion, String $select, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Intune/locations/{hostName}/androidPolicies/{policyName}"
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()))
            .replace("{" + "policyName" + "}", localVarApiClient.escapeString(policyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call androidGetMAMPolicyByNameValidateBeforeCall(String hostName, String policyName, String apiVersion, String $select, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling androidGetMAMPolicyByName(Async)");
        }

        // verify the required parameter 'policyName' is set
        if (policyName == null) {
            throw new ApiException("Missing the required parameter 'policyName' when calling androidGetMAMPolicyByName(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling androidGetMAMPolicyByName(Async)");
        }

        return androidGetMAMPolicyByNameCall(hostName, policyName, apiVersion, $select, _callback);

    }

    /**
     * 
     * Returns AndroidMAMPolicy with given name.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @param $select select specific fields in entity. (optional)
     * @return AndroidMAMPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> iOSMAMPolicy entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public AndroidMAMPolicy androidGetMAMPolicyByName(String hostName, String policyName, String apiVersion, String $select) throws ApiException {
        ApiResponse<AndroidMAMPolicy> localVarResp = androidGetMAMPolicyByNameWithHttpInfo(hostName, policyName, apiVersion, $select);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns AndroidMAMPolicy with given name.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @param $select select specific fields in entity. (optional)
     * @return ApiResponse&lt;AndroidMAMPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> iOSMAMPolicy entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AndroidMAMPolicy> androidGetMAMPolicyByNameWithHttpInfo(String hostName, String policyName, String apiVersion, String $select) throws ApiException {
        okhttp3.Call localVarCall = androidGetMAMPolicyByNameValidateBeforeCall(hostName, policyName, apiVersion, $select, null);
        Type localVarReturnType = new TypeToken<AndroidMAMPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns AndroidMAMPolicy with given name.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @param $select select specific fields in entity. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> iOSMAMPolicy entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call androidGetMAMPolicyByNameAsync(String hostName, String policyName, String apiVersion, String $select, final ApiCallback<AndroidMAMPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = androidGetMAMPolicyByNameValidateBeforeCall(hostName, policyName, apiVersion, $select, _callback);
        Type localVarReturnType = new TypeToken<AndroidMAMPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for androidPatchMAMPolicy
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @param parameters Parameters supplied to the Create or update an android policy operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> android entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call androidPatchMAMPolicyCall(String hostName, String policyName, String apiVersion, AndroidMAMPolicy parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Intune/locations/{hostName}/androidPolicies/{policyName}"
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()))
            .replace("{" + "policyName" + "}", localVarApiClient.escapeString(policyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call androidPatchMAMPolicyValidateBeforeCall(String hostName, String policyName, String apiVersion, AndroidMAMPolicy parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling androidPatchMAMPolicy(Async)");
        }

        // verify the required parameter 'policyName' is set
        if (policyName == null) {
            throw new ApiException("Missing the required parameter 'policyName' when calling androidPatchMAMPolicy(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling androidPatchMAMPolicy(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling androidPatchMAMPolicy(Async)");
        }

        return androidPatchMAMPolicyCall(hostName, policyName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Patch AndroidMAMPolicy.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @param parameters Parameters supplied to the Create or update an android policy operation. (required)
     * @return AndroidMAMPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> android entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public AndroidMAMPolicy androidPatchMAMPolicy(String hostName, String policyName, String apiVersion, AndroidMAMPolicy parameters) throws ApiException {
        ApiResponse<AndroidMAMPolicy> localVarResp = androidPatchMAMPolicyWithHttpInfo(hostName, policyName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Patch AndroidMAMPolicy.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @param parameters Parameters supplied to the Create or update an android policy operation. (required)
     * @return ApiResponse&lt;AndroidMAMPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> android entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AndroidMAMPolicy> androidPatchMAMPolicyWithHttpInfo(String hostName, String policyName, String apiVersion, AndroidMAMPolicy parameters) throws ApiException {
        okhttp3.Call localVarCall = androidPatchMAMPolicyValidateBeforeCall(hostName, policyName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<AndroidMAMPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Patch AndroidMAMPolicy.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @param parameters Parameters supplied to the Create or update an android policy operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> android entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call androidPatchMAMPolicyAsync(String hostName, String policyName, String apiVersion, AndroidMAMPolicy parameters, final ApiCallback<AndroidMAMPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = androidPatchMAMPolicyValidateBeforeCall(hostName, policyName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<AndroidMAMPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApps
     * @param hostName Location hostName for the tenant (required)
     * @param apiVersion Service Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $select select specific fields in entity. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> applications as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAppsCall(String hostName, String apiVersion, String $filter, Integer $top, String $select, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Intune/locations/{hostName}/apps"
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAppsValidateBeforeCall(String hostName, String apiVersion, String $filter, Integer $top, String $select, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling getApps(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getApps(Async)");
        }

        return getAppsCall(hostName, apiVersion, $filter, $top, $select, _callback);

    }

    /**
     * 
     * Returns Intune Manageable apps.
     * @param hostName Location hostName for the tenant (required)
     * @param apiVersion Service Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $select select specific fields in entity. (optional)
     * @return ApplicationCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> applications as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationCollection getApps(String hostName, String apiVersion, String $filter, Integer $top, String $select) throws ApiException {
        ApiResponse<ApplicationCollection> localVarResp = getAppsWithHttpInfo(hostName, apiVersion, $filter, $top, $select);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns Intune Manageable apps.
     * @param hostName Location hostName for the tenant (required)
     * @param apiVersion Service Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $select select specific fields in entity. (optional)
     * @return ApiResponse&lt;ApplicationCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> applications as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationCollection> getAppsWithHttpInfo(String hostName, String apiVersion, String $filter, Integer $top, String $select) throws ApiException {
        okhttp3.Call localVarCall = getAppsValidateBeforeCall(hostName, apiVersion, $filter, $top, $select, null);
        Type localVarReturnType = new TypeToken<ApplicationCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns Intune Manageable apps.
     * @param hostName Location hostName for the tenant (required)
     * @param apiVersion Service Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $select select specific fields in entity. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> applications as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAppsAsync(String hostName, String apiVersion, String $filter, Integer $top, String $select, final ApiCallback<ApplicationCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAppsValidateBeforeCall(hostName, apiVersion, $filter, $top, $select, _callback);
        Type localVarReturnType = new TypeToken<ApplicationCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLocationByHostName
     * @param apiVersion Service Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> single location response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLocationByHostNameCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Intune/locations/hostName";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLocationByHostNameValidateBeforeCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getLocationByHostName(Async)");
        }

        return getLocationByHostNameCall(apiVersion, _callback);

    }

    /**
     * 
     * Returns location for given tenant.
     * @param apiVersion Service Api Version. (required)
     * @return Location
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> single location response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Location getLocationByHostName(String apiVersion) throws ApiException {
        ApiResponse<Location> localVarResp = getLocationByHostNameWithHttpInfo(apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns location for given tenant.
     * @param apiVersion Service Api Version. (required)
     * @return ApiResponse&lt;Location&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> single location response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Location> getLocationByHostNameWithHttpInfo(String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = getLocationByHostNameValidateBeforeCall(apiVersion, null);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns location for given tenant.
     * @param apiVersion Service Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> single location response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLocationByHostNameAsync(String apiVersion, final ApiCallback<Location> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLocationByHostNameValidateBeforeCall(apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLocations
     * @param apiVersion Service Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> location response as a collection </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLocationsCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Intune/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLocationsValidateBeforeCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getLocations(Async)");
        }

        return getLocationsCall(apiVersion, _callback);

    }

    /**
     * 
     * Returns location for user tenant.
     * @param apiVersion Service Api Version. (required)
     * @return LocationCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> location response as a collection </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public LocationCollection getLocations(String apiVersion) throws ApiException {
        ApiResponse<LocationCollection> localVarResp = getLocationsWithHttpInfo(apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns location for user tenant.
     * @param apiVersion Service Api Version. (required)
     * @return ApiResponse&lt;LocationCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> location response as a collection </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocationCollection> getLocationsWithHttpInfo(String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = getLocationsValidateBeforeCall(apiVersion, null);
        Type localVarReturnType = new TypeToken<LocationCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns location for user tenant.
     * @param apiVersion Service Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> location response as a collection </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLocationsAsync(String apiVersion, final ApiCallback<LocationCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLocationsValidateBeforeCall(apiVersion, _callback);
        Type localVarReturnType = new TypeToken<LocationCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMAMFlaggedUserByName
     * @param hostName Location hostName for the tenant (required)
     * @param userName Flagged userName (required)
     * @param apiVersion Service Api Version. (required)
     * @param $select select specific fields in entity. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flagged user details in response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMAMFlaggedUserByNameCall(String hostName, String userName, String apiVersion, String $select, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Intune/locations/{hostName}/flaggedUsers/{userName}"
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()))
            .replace("{" + "userName" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMAMFlaggedUserByNameValidateBeforeCall(String hostName, String userName, String apiVersion, String $select, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling getMAMFlaggedUserByName(Async)");
        }

        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling getMAMFlaggedUserByName(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getMAMFlaggedUserByName(Async)");
        }

        return getMAMFlaggedUserByNameCall(hostName, userName, apiVersion, $select, _callback);

    }

    /**
     * 
     * Returns Intune flagged user details
     * @param hostName Location hostName for the tenant (required)
     * @param userName Flagged userName (required)
     * @param apiVersion Service Api Version. (required)
     * @param $select select specific fields in entity. (optional)
     * @return FlaggedUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flagged user details in response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public FlaggedUser getMAMFlaggedUserByName(String hostName, String userName, String apiVersion, String $select) throws ApiException {
        ApiResponse<FlaggedUser> localVarResp = getMAMFlaggedUserByNameWithHttpInfo(hostName, userName, apiVersion, $select);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns Intune flagged user details
     * @param hostName Location hostName for the tenant (required)
     * @param userName Flagged userName (required)
     * @param apiVersion Service Api Version. (required)
     * @param $select select specific fields in entity. (optional)
     * @return ApiResponse&lt;FlaggedUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flagged user details in response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FlaggedUser> getMAMFlaggedUserByNameWithHttpInfo(String hostName, String userName, String apiVersion, String $select) throws ApiException {
        okhttp3.Call localVarCall = getMAMFlaggedUserByNameValidateBeforeCall(hostName, userName, apiVersion, $select, null);
        Type localVarReturnType = new TypeToken<FlaggedUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns Intune flagged user details
     * @param hostName Location hostName for the tenant (required)
     * @param userName Flagged userName (required)
     * @param apiVersion Service Api Version. (required)
     * @param $select select specific fields in entity. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flagged user details in response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMAMFlaggedUserByNameAsync(String hostName, String userName, String apiVersion, String $select, final ApiCallback<FlaggedUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMAMFlaggedUserByNameValidateBeforeCall(hostName, userName, apiVersion, $select, _callback);
        Type localVarReturnType = new TypeToken<FlaggedUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMAMFlaggedUsers
     * @param hostName Location hostName for the tenant (required)
     * @param apiVersion Service Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $select select specific fields in entity. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flagged users as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMAMFlaggedUsersCall(String hostName, String apiVersion, String $filter, Integer $top, String $select, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Intune/locations/{hostName}/flaggedUsers"
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMAMFlaggedUsersValidateBeforeCall(String hostName, String apiVersion, String $filter, Integer $top, String $select, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling getMAMFlaggedUsers(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getMAMFlaggedUsers(Async)");
        }

        return getMAMFlaggedUsersCall(hostName, apiVersion, $filter, $top, $select, _callback);

    }

    /**
     * 
     * Returns Intune flagged user collection
     * @param hostName Location hostName for the tenant (required)
     * @param apiVersion Service Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $select select specific fields in entity. (optional)
     * @return FlaggedUserCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flagged users as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public FlaggedUserCollection getMAMFlaggedUsers(String hostName, String apiVersion, String $filter, Integer $top, String $select) throws ApiException {
        ApiResponse<FlaggedUserCollection> localVarResp = getMAMFlaggedUsersWithHttpInfo(hostName, apiVersion, $filter, $top, $select);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns Intune flagged user collection
     * @param hostName Location hostName for the tenant (required)
     * @param apiVersion Service Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $select select specific fields in entity. (optional)
     * @return ApiResponse&lt;FlaggedUserCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flagged users as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FlaggedUserCollection> getMAMFlaggedUsersWithHttpInfo(String hostName, String apiVersion, String $filter, Integer $top, String $select) throws ApiException {
        okhttp3.Call localVarCall = getMAMFlaggedUsersValidateBeforeCall(hostName, apiVersion, $filter, $top, $select, null);
        Type localVarReturnType = new TypeToken<FlaggedUserCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns Intune flagged user collection
     * @param hostName Location hostName for the tenant (required)
     * @param apiVersion Service Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $select select specific fields in entity. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flagged users as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMAMFlaggedUsersAsync(String hostName, String apiVersion, String $filter, Integer $top, String $select, final ApiCallback<FlaggedUserCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMAMFlaggedUsersValidateBeforeCall(hostName, apiVersion, $filter, $top, $select, _callback);
        Type localVarReturnType = new TypeToken<FlaggedUserCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMAMStatuses
     * @param hostName Location hostName for the tenant (required)
     * @param apiVersion Service Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> applications as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMAMStatusesCall(String hostName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Intune/locations/{hostName}/statuses/default"
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMAMStatusesValidateBeforeCall(String hostName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling getMAMStatuses(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getMAMStatuses(Async)");
        }

        return getMAMStatusesCall(hostName, apiVersion, _callback);

    }

    /**
     * 
     * Returns Intune Tenant level statuses.
     * @param hostName Location hostName for the tenant (required)
     * @param apiVersion Service Api Version. (required)
     * @return StatusesDefault
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> applications as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public StatusesDefault getMAMStatuses(String hostName, String apiVersion) throws ApiException {
        ApiResponse<StatusesDefault> localVarResp = getMAMStatusesWithHttpInfo(hostName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns Intune Tenant level statuses.
     * @param hostName Location hostName for the tenant (required)
     * @param apiVersion Service Api Version. (required)
     * @return ApiResponse&lt;StatusesDefault&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> applications as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StatusesDefault> getMAMStatusesWithHttpInfo(String hostName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = getMAMStatusesValidateBeforeCall(hostName, apiVersion, null);
        Type localVarReturnType = new TypeToken<StatusesDefault>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns Intune Tenant level statuses.
     * @param hostName Location hostName for the tenant (required)
     * @param apiVersion Service Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> applications as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMAMStatusesAsync(String hostName, String apiVersion, final ApiCallback<StatusesDefault> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMAMStatusesValidateBeforeCall(hostName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<StatusesDefault>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMAMUserDeviceByDeviceName
     * @param hostName Location hostName for the tenant (required)
     * @param userName unique user name (required)
     * @param deviceName device name (required)
     * @param apiVersion Service Api Version. (required)
     * @param $select select specific fields in entity. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Device entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMAMUserDeviceByDeviceNameCall(String hostName, String userName, String deviceName, String apiVersion, String $select, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Intune/locations/{hostName}/users/{userName}/devices/{deviceName}"
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()))
            .replace("{" + "userName" + "}", localVarApiClient.escapeString(userName.toString()))
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMAMUserDeviceByDeviceNameValidateBeforeCall(String hostName, String userName, String deviceName, String apiVersion, String $select, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling getMAMUserDeviceByDeviceName(Async)");
        }

        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling getMAMUserDeviceByDeviceName(Async)");
        }

        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling getMAMUserDeviceByDeviceName(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getMAMUserDeviceByDeviceName(Async)");
        }

        return getMAMUserDeviceByDeviceNameCall(hostName, userName, deviceName, apiVersion, $select, _callback);

    }

    /**
     * 
     * Get a unique device for a user.
     * @param hostName Location hostName for the tenant (required)
     * @param userName unique user name (required)
     * @param deviceName device name (required)
     * @param apiVersion Service Api Version. (required)
     * @param $select select specific fields in entity. (optional)
     * @return Device
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Device entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Device getMAMUserDeviceByDeviceName(String hostName, String userName, String deviceName, String apiVersion, String $select) throws ApiException {
        ApiResponse<Device> localVarResp = getMAMUserDeviceByDeviceNameWithHttpInfo(hostName, userName, deviceName, apiVersion, $select);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a unique device for a user.
     * @param hostName Location hostName for the tenant (required)
     * @param userName unique user name (required)
     * @param deviceName device name (required)
     * @param apiVersion Service Api Version. (required)
     * @param $select select specific fields in entity. (optional)
     * @return ApiResponse&lt;Device&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Device entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Device> getMAMUserDeviceByDeviceNameWithHttpInfo(String hostName, String userName, String deviceName, String apiVersion, String $select) throws ApiException {
        okhttp3.Call localVarCall = getMAMUserDeviceByDeviceNameValidateBeforeCall(hostName, userName, deviceName, apiVersion, $select, null);
        Type localVarReturnType = new TypeToken<Device>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a unique device for a user.
     * @param hostName Location hostName for the tenant (required)
     * @param userName unique user name (required)
     * @param deviceName device name (required)
     * @param apiVersion Service Api Version. (required)
     * @param $select select specific fields in entity. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Device entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMAMUserDeviceByDeviceNameAsync(String hostName, String userName, String deviceName, String apiVersion, String $select, final ApiCallback<Device> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMAMUserDeviceByDeviceNameValidateBeforeCall(hostName, userName, deviceName, apiVersion, $select, _callback);
        Type localVarReturnType = new TypeToken<Device>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMAMUserDevices
     * @param hostName Location hostName for the tenant (required)
     * @param userName user unique Name (required)
     * @param apiVersion Service Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $select select specific fields in entity. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> devices as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMAMUserDevicesCall(String hostName, String userName, String apiVersion, String $filter, Integer $top, String $select, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Intune/locations/{hostName}/users/{userName}/devices"
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()))
            .replace("{" + "userName" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMAMUserDevicesValidateBeforeCall(String hostName, String userName, String apiVersion, String $filter, Integer $top, String $select, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling getMAMUserDevices(Async)");
        }

        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling getMAMUserDevices(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getMAMUserDevices(Async)");
        }

        return getMAMUserDevicesCall(hostName, userName, apiVersion, $filter, $top, $select, _callback);

    }

    /**
     * 
     * Get devices for a user.
     * @param hostName Location hostName for the tenant (required)
     * @param userName user unique Name (required)
     * @param apiVersion Service Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $select select specific fields in entity. (optional)
     * @return DeviceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> devices as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public DeviceCollection getMAMUserDevices(String hostName, String userName, String apiVersion, String $filter, Integer $top, String $select) throws ApiException {
        ApiResponse<DeviceCollection> localVarResp = getMAMUserDevicesWithHttpInfo(hostName, userName, apiVersion, $filter, $top, $select);
        return localVarResp.getData();
    }

    /**
     * 
     * Get devices for a user.
     * @param hostName Location hostName for the tenant (required)
     * @param userName user unique Name (required)
     * @param apiVersion Service Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $select select specific fields in entity. (optional)
     * @return ApiResponse&lt;DeviceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> devices as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceCollection> getMAMUserDevicesWithHttpInfo(String hostName, String userName, String apiVersion, String $filter, Integer $top, String $select) throws ApiException {
        okhttp3.Call localVarCall = getMAMUserDevicesValidateBeforeCall(hostName, userName, apiVersion, $filter, $top, $select, null);
        Type localVarReturnType = new TypeToken<DeviceCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get devices for a user.
     * @param hostName Location hostName for the tenant (required)
     * @param userName user unique Name (required)
     * @param apiVersion Service Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $select select specific fields in entity. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> devices as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMAMUserDevicesAsync(String hostName, String userName, String apiVersion, String $filter, Integer $top, String $select, final ApiCallback<DeviceCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMAMUserDevicesValidateBeforeCall(hostName, userName, apiVersion, $filter, $top, $select, _callback);
        Type localVarReturnType = new TypeToken<DeviceCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMAMUserFlaggedEnrolledApps
     * @param hostName Location hostName for the tenant (required)
     * @param userName User name for the tenant (required)
     * @param apiVersion Service Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $select select specific fields in entity. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flagged enrolled Apps as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMAMUserFlaggedEnrolledAppsCall(String hostName, String userName, String apiVersion, String $filter, Integer $top, String $select, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Intune/locations/{hostName}/flaggedUsers/{userName}/flaggedEnrolledApps"
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()))
            .replace("{" + "userName" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMAMUserFlaggedEnrolledAppsValidateBeforeCall(String hostName, String userName, String apiVersion, String $filter, Integer $top, String $select, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling getMAMUserFlaggedEnrolledApps(Async)");
        }

        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling getMAMUserFlaggedEnrolledApps(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getMAMUserFlaggedEnrolledApps(Async)");
        }

        return getMAMUserFlaggedEnrolledAppsCall(hostName, userName, apiVersion, $filter, $top, $select, _callback);

    }

    /**
     * 
     * Returns Intune flagged enrolled app collection for the User
     * @param hostName Location hostName for the tenant (required)
     * @param userName User name for the tenant (required)
     * @param apiVersion Service Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $select select specific fields in entity. (optional)
     * @return FlaggedEnrolledAppCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flagged enrolled Apps as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public FlaggedEnrolledAppCollection getMAMUserFlaggedEnrolledApps(String hostName, String userName, String apiVersion, String $filter, Integer $top, String $select) throws ApiException {
        ApiResponse<FlaggedEnrolledAppCollection> localVarResp = getMAMUserFlaggedEnrolledAppsWithHttpInfo(hostName, userName, apiVersion, $filter, $top, $select);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns Intune flagged enrolled app collection for the User
     * @param hostName Location hostName for the tenant (required)
     * @param userName User name for the tenant (required)
     * @param apiVersion Service Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $select select specific fields in entity. (optional)
     * @return ApiResponse&lt;FlaggedEnrolledAppCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flagged enrolled Apps as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FlaggedEnrolledAppCollection> getMAMUserFlaggedEnrolledAppsWithHttpInfo(String hostName, String userName, String apiVersion, String $filter, Integer $top, String $select) throws ApiException {
        okhttp3.Call localVarCall = getMAMUserFlaggedEnrolledAppsValidateBeforeCall(hostName, userName, apiVersion, $filter, $top, $select, null);
        Type localVarReturnType = new TypeToken<FlaggedEnrolledAppCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns Intune flagged enrolled app collection for the User
     * @param hostName Location hostName for the tenant (required)
     * @param userName User name for the tenant (required)
     * @param apiVersion Service Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $select select specific fields in entity. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flagged enrolled Apps as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMAMUserFlaggedEnrolledAppsAsync(String hostName, String userName, String apiVersion, String $filter, Integer $top, String $select, final ApiCallback<FlaggedEnrolledAppCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMAMUserFlaggedEnrolledAppsValidateBeforeCall(hostName, userName, apiVersion, $filter, $top, $select, _callback);
        Type localVarReturnType = new TypeToken<FlaggedEnrolledAppCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOperationResults
     * @param hostName Location hostName for the tenant (required)
     * @param apiVersion Service Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $select select specific fields in entity. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> applications as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOperationResultsCall(String hostName, String apiVersion, String $filter, Integer $top, String $select, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Intune/locations/{hostName}/operationResults"
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOperationResultsValidateBeforeCall(String hostName, String apiVersion, String $filter, Integer $top, String $select, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling getOperationResults(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getOperationResults(Async)");
        }

        return getOperationResultsCall(hostName, apiVersion, $filter, $top, $select, _callback);

    }

    /**
     * 
     * Returns operationResults.
     * @param hostName Location hostName for the tenant (required)
     * @param apiVersion Service Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $select select specific fields in entity. (optional)
     * @return OperationResultCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> applications as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public OperationResultCollection getOperationResults(String hostName, String apiVersion, String $filter, Integer $top, String $select) throws ApiException {
        ApiResponse<OperationResultCollection> localVarResp = getOperationResultsWithHttpInfo(hostName, apiVersion, $filter, $top, $select);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns operationResults.
     * @param hostName Location hostName for the tenant (required)
     * @param apiVersion Service Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $select select specific fields in entity. (optional)
     * @return ApiResponse&lt;OperationResultCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> applications as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationResultCollection> getOperationResultsWithHttpInfo(String hostName, String apiVersion, String $filter, Integer $top, String $select) throws ApiException {
        okhttp3.Call localVarCall = getOperationResultsValidateBeforeCall(hostName, apiVersion, $filter, $top, $select, null);
        Type localVarReturnType = new TypeToken<OperationResultCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns operationResults.
     * @param hostName Location hostName for the tenant (required)
     * @param apiVersion Service Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $select select specific fields in entity. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> applications as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOperationResultsAsync(String hostName, String apiVersion, String $filter, Integer $top, String $select, final ApiCallback<OperationResultCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOperationResultsValidateBeforeCall(hostName, apiVersion, $filter, $top, $select, _callback);
        Type localVarReturnType = new TypeToken<OperationResultCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iosAddAppForMAMPolicy
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param appName application unique Name (required)
     * @param apiVersion Service Api Version. (required)
     * @param parameters Parameters supplied to add an app to an ios policy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iosAddAppForMAMPolicyCall(String hostName, String policyName, String appName, String apiVersion, MAMPolicyAppIdOrGroupIdPayload parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Intune/locations/{hostName}/iosPolicies/{policyName}/apps/{appName}"
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()))
            .replace("{" + "policyName" + "}", localVarApiClient.escapeString(policyName.toString()))
            .replace("{" + "appName" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iosAddAppForMAMPolicyValidateBeforeCall(String hostName, String policyName, String appName, String apiVersion, MAMPolicyAppIdOrGroupIdPayload parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling iosAddAppForMAMPolicy(Async)");
        }

        // verify the required parameter 'policyName' is set
        if (policyName == null) {
            throw new ApiException("Missing the required parameter 'policyName' when calling iosAddAppForMAMPolicy(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling iosAddAppForMAMPolicy(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling iosAddAppForMAMPolicy(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling iosAddAppForMAMPolicy(Async)");
        }

        return iosAddAppForMAMPolicyCall(hostName, policyName, appName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Add app to an iOSMAMPolicy.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param appName application unique Name (required)
     * @param apiVersion Service Api Version. (required)
     * @param parameters Parameters supplied to add an app to an ios policy. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void iosAddAppForMAMPolicy(String hostName, String policyName, String appName, String apiVersion, MAMPolicyAppIdOrGroupIdPayload parameters) throws ApiException {
        iosAddAppForMAMPolicyWithHttpInfo(hostName, policyName, appName, apiVersion, parameters);
    }

    /**
     * 
     * Add app to an iOSMAMPolicy.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param appName application unique Name (required)
     * @param apiVersion Service Api Version. (required)
     * @param parameters Parameters supplied to add an app to an ios policy. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> iosAddAppForMAMPolicyWithHttpInfo(String hostName, String policyName, String appName, String apiVersion, MAMPolicyAppIdOrGroupIdPayload parameters) throws ApiException {
        okhttp3.Call localVarCall = iosAddAppForMAMPolicyValidateBeforeCall(hostName, policyName, appName, apiVersion, parameters, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Add app to an iOSMAMPolicy.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param appName application unique Name (required)
     * @param apiVersion Service Api Version. (required)
     * @param parameters Parameters supplied to add an app to an ios policy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iosAddAppForMAMPolicyAsync(String hostName, String policyName, String appName, String apiVersion, MAMPolicyAppIdOrGroupIdPayload parameters, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = iosAddAppForMAMPolicyValidateBeforeCall(hostName, policyName, appName, apiVersion, parameters, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for iosAddGroupForMAMPolicy
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param groupId group Id (required)
     * @param apiVersion Service Api Version. (required)
     * @param parameters Parameters supplied to the Create or update app to an android policy operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iosAddGroupForMAMPolicyCall(String hostName, String policyName, String groupId, String apiVersion, MAMPolicyAppIdOrGroupIdPayload parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Intune/locations/{hostName}/iosPolicies/{policyName}/groups/{groupId}"
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()))
            .replace("{" + "policyName" + "}", localVarApiClient.escapeString(policyName.toString()))
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iosAddGroupForMAMPolicyValidateBeforeCall(String hostName, String policyName, String groupId, String apiVersion, MAMPolicyAppIdOrGroupIdPayload parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling iosAddGroupForMAMPolicy(Async)");
        }

        // verify the required parameter 'policyName' is set
        if (policyName == null) {
            throw new ApiException("Missing the required parameter 'policyName' when calling iosAddGroupForMAMPolicy(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling iosAddGroupForMAMPolicy(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling iosAddGroupForMAMPolicy(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling iosAddGroupForMAMPolicy(Async)");
        }

        return iosAddGroupForMAMPolicyCall(hostName, policyName, groupId, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Add group to an iOSMAMPolicy.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param groupId group Id (required)
     * @param apiVersion Service Api Version. (required)
     * @param parameters Parameters supplied to the Create or update app to an android policy operation. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void iosAddGroupForMAMPolicy(String hostName, String policyName, String groupId, String apiVersion, MAMPolicyAppIdOrGroupIdPayload parameters) throws ApiException {
        iosAddGroupForMAMPolicyWithHttpInfo(hostName, policyName, groupId, apiVersion, parameters);
    }

    /**
     * 
     * Add group to an iOSMAMPolicy.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param groupId group Id (required)
     * @param apiVersion Service Api Version. (required)
     * @param parameters Parameters supplied to the Create or update app to an android policy operation. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> iosAddGroupForMAMPolicyWithHttpInfo(String hostName, String policyName, String groupId, String apiVersion, MAMPolicyAppIdOrGroupIdPayload parameters) throws ApiException {
        okhttp3.Call localVarCall = iosAddGroupForMAMPolicyValidateBeforeCall(hostName, policyName, groupId, apiVersion, parameters, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Add group to an iOSMAMPolicy.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param groupId group Id (required)
     * @param apiVersion Service Api Version. (required)
     * @param parameters Parameters supplied to the Create or update app to an android policy operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iosAddGroupForMAMPolicyAsync(String hostName, String policyName, String groupId, String apiVersion, MAMPolicyAppIdOrGroupIdPayload parameters, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = iosAddGroupForMAMPolicyValidateBeforeCall(hostName, policyName, groupId, apiVersion, parameters, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for iosCreateOrUpdateMAMPolicy
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @param parameters Parameters supplied to the Create or update an android policy operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> iOSMAMPolicy entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iosCreateOrUpdateMAMPolicyCall(String hostName, String policyName, String apiVersion, IOSMAMPolicy parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Intune/locations/{hostName}/iosPolicies/{policyName}"
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()))
            .replace("{" + "policyName" + "}", localVarApiClient.escapeString(policyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iosCreateOrUpdateMAMPolicyValidateBeforeCall(String hostName, String policyName, String apiVersion, IOSMAMPolicy parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling iosCreateOrUpdateMAMPolicy(Async)");
        }

        // verify the required parameter 'policyName' is set
        if (policyName == null) {
            throw new ApiException("Missing the required parameter 'policyName' when calling iosCreateOrUpdateMAMPolicy(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling iosCreateOrUpdateMAMPolicy(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling iosCreateOrUpdateMAMPolicy(Async)");
        }

        return iosCreateOrUpdateMAMPolicyCall(hostName, policyName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Creates or updates iOSMAMPolicy.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @param parameters Parameters supplied to the Create or update an android policy operation. (required)
     * @return IOSMAMPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> iOSMAMPolicy entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public IOSMAMPolicy iosCreateOrUpdateMAMPolicy(String hostName, String policyName, String apiVersion, IOSMAMPolicy parameters) throws ApiException {
        ApiResponse<IOSMAMPolicy> localVarResp = iosCreateOrUpdateMAMPolicyWithHttpInfo(hostName, policyName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates iOSMAMPolicy.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @param parameters Parameters supplied to the Create or update an android policy operation. (required)
     * @return ApiResponse&lt;IOSMAMPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> iOSMAMPolicy entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IOSMAMPolicy> iosCreateOrUpdateMAMPolicyWithHttpInfo(String hostName, String policyName, String apiVersion, IOSMAMPolicy parameters) throws ApiException {
        okhttp3.Call localVarCall = iosCreateOrUpdateMAMPolicyValidateBeforeCall(hostName, policyName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<IOSMAMPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates iOSMAMPolicy.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @param parameters Parameters supplied to the Create or update an android policy operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> iOSMAMPolicy entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iosCreateOrUpdateMAMPolicyAsync(String hostName, String policyName, String apiVersion, IOSMAMPolicy parameters, final ApiCallback<IOSMAMPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = iosCreateOrUpdateMAMPolicyValidateBeforeCall(hostName, policyName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<IOSMAMPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iosDeleteAppForMAMPolicy
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param appName application unique Name (required)
     * @param apiVersion Service Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iosDeleteAppForMAMPolicyCall(String hostName, String policyName, String appName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Intune/locations/{hostName}/iosPolicies/{policyName}/apps/{appName}"
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()))
            .replace("{" + "policyName" + "}", localVarApiClient.escapeString(policyName.toString()))
            .replace("{" + "appName" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iosDeleteAppForMAMPolicyValidateBeforeCall(String hostName, String policyName, String appName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling iosDeleteAppForMAMPolicy(Async)");
        }

        // verify the required parameter 'policyName' is set
        if (policyName == null) {
            throw new ApiException("Missing the required parameter 'policyName' when calling iosDeleteAppForMAMPolicy(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling iosDeleteAppForMAMPolicy(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling iosDeleteAppForMAMPolicy(Async)");
        }

        return iosDeleteAppForMAMPolicyCall(hostName, policyName, appName, apiVersion, _callback);

    }

    /**
     * 
     * Delete App for Ios Policy
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param appName application unique Name (required)
     * @param apiVersion Service Api Version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void iosDeleteAppForMAMPolicy(String hostName, String policyName, String appName, String apiVersion) throws ApiException {
        iosDeleteAppForMAMPolicyWithHttpInfo(hostName, policyName, appName, apiVersion);
    }

    /**
     * 
     * Delete App for Ios Policy
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param appName application unique Name (required)
     * @param apiVersion Service Api Version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> iosDeleteAppForMAMPolicyWithHttpInfo(String hostName, String policyName, String appName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = iosDeleteAppForMAMPolicyValidateBeforeCall(hostName, policyName, appName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete App for Ios Policy
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param appName application unique Name (required)
     * @param apiVersion Service Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iosDeleteAppForMAMPolicyAsync(String hostName, String policyName, String appName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = iosDeleteAppForMAMPolicyValidateBeforeCall(hostName, policyName, appName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for iosDeleteGroupForMAMPolicy
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param groupId application unique Name (required)
     * @param apiVersion Service Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iosDeleteGroupForMAMPolicyCall(String hostName, String policyName, String groupId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Intune/locations/{hostName}/iosPolicies/{policyName}/groups/{groupId}"
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()))
            .replace("{" + "policyName" + "}", localVarApiClient.escapeString(policyName.toString()))
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iosDeleteGroupForMAMPolicyValidateBeforeCall(String hostName, String policyName, String groupId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling iosDeleteGroupForMAMPolicy(Async)");
        }

        // verify the required parameter 'policyName' is set
        if (policyName == null) {
            throw new ApiException("Missing the required parameter 'policyName' when calling iosDeleteGroupForMAMPolicy(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling iosDeleteGroupForMAMPolicy(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling iosDeleteGroupForMAMPolicy(Async)");
        }

        return iosDeleteGroupForMAMPolicyCall(hostName, policyName, groupId, apiVersion, _callback);

    }

    /**
     * 
     * Delete Group for iOS Policy
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param groupId application unique Name (required)
     * @param apiVersion Service Api Version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void iosDeleteGroupForMAMPolicy(String hostName, String policyName, String groupId, String apiVersion) throws ApiException {
        iosDeleteGroupForMAMPolicyWithHttpInfo(hostName, policyName, groupId, apiVersion);
    }

    /**
     * 
     * Delete Group for iOS Policy
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param groupId application unique Name (required)
     * @param apiVersion Service Api Version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> iosDeleteGroupForMAMPolicyWithHttpInfo(String hostName, String policyName, String groupId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = iosDeleteGroupForMAMPolicyValidateBeforeCall(hostName, policyName, groupId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete Group for iOS Policy
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param groupId application unique Name (required)
     * @param apiVersion Service Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iosDeleteGroupForMAMPolicyAsync(String hostName, String policyName, String groupId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = iosDeleteGroupForMAMPolicyValidateBeforeCall(hostName, policyName, groupId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for iosDeleteMAMPolicy
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iosDeleteMAMPolicyCall(String hostName, String policyName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Intune/locations/{hostName}/iosPolicies/{policyName}"
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()))
            .replace("{" + "policyName" + "}", localVarApiClient.escapeString(policyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iosDeleteMAMPolicyValidateBeforeCall(String hostName, String policyName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling iosDeleteMAMPolicy(Async)");
        }

        // verify the required parameter 'policyName' is set
        if (policyName == null) {
            throw new ApiException("Missing the required parameter 'policyName' when calling iosDeleteMAMPolicy(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling iosDeleteMAMPolicy(Async)");
        }

        return iosDeleteMAMPolicyCall(hostName, policyName, apiVersion, _callback);

    }

    /**
     * 
     * Delete Ios Policy
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void iosDeleteMAMPolicy(String hostName, String policyName, String apiVersion) throws ApiException {
        iosDeleteMAMPolicyWithHttpInfo(hostName, policyName, apiVersion);
    }

    /**
     * 
     * Delete Ios Policy
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> iosDeleteMAMPolicyWithHttpInfo(String hostName, String policyName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = iosDeleteMAMPolicyValidateBeforeCall(hostName, policyName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete Ios Policy
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No-Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iosDeleteMAMPolicyAsync(String hostName, String policyName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = iosDeleteMAMPolicyValidateBeforeCall(hostName, policyName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for iosGetAppForMAMPolicy
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $select select specific fields in entity. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> applications as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iosGetAppForMAMPolicyCall(String hostName, String policyName, String apiVersion, String $filter, Integer $top, String $select, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Intune/locations/{hostName}/iosPolicies/{policyName}/apps"
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()))
            .replace("{" + "policyName" + "}", localVarApiClient.escapeString(policyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iosGetAppForMAMPolicyValidateBeforeCall(String hostName, String policyName, String apiVersion, String $filter, Integer $top, String $select, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling iosGetAppForMAMPolicy(Async)");
        }

        // verify the required parameter 'policyName' is set
        if (policyName == null) {
            throw new ApiException("Missing the required parameter 'policyName' when calling iosGetAppForMAMPolicy(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling iosGetAppForMAMPolicy(Async)");
        }

        return iosGetAppForMAMPolicyCall(hostName, policyName, apiVersion, $filter, $top, $select, _callback);

    }

    /**
     * 
     * Get apps for an iOSMAMPolicy.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $select select specific fields in entity. (optional)
     * @return ApplicationCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> applications as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationCollection iosGetAppForMAMPolicy(String hostName, String policyName, String apiVersion, String $filter, Integer $top, String $select) throws ApiException {
        ApiResponse<ApplicationCollection> localVarResp = iosGetAppForMAMPolicyWithHttpInfo(hostName, policyName, apiVersion, $filter, $top, $select);
        return localVarResp.getData();
    }

    /**
     * 
     * Get apps for an iOSMAMPolicy.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $select select specific fields in entity. (optional)
     * @return ApiResponse&lt;ApplicationCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> applications as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationCollection> iosGetAppForMAMPolicyWithHttpInfo(String hostName, String policyName, String apiVersion, String $filter, Integer $top, String $select) throws ApiException {
        okhttp3.Call localVarCall = iosGetAppForMAMPolicyValidateBeforeCall(hostName, policyName, apiVersion, $filter, $top, $select, null);
        Type localVarReturnType = new TypeToken<ApplicationCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get apps for an iOSMAMPolicy.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $select select specific fields in entity. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> applications as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iosGetAppForMAMPolicyAsync(String hostName, String policyName, String apiVersion, String $filter, Integer $top, String $select, final ApiCallback<ApplicationCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = iosGetAppForMAMPolicyValidateBeforeCall(hostName, policyName, apiVersion, $filter, $top, $select, _callback);
        Type localVarReturnType = new TypeToken<ApplicationCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iosGetGroupsForMAMPolicy
     * @param hostName Location hostName for the tenant (required)
     * @param policyName policy name for the tenant (required)
     * @param apiVersion Service Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> groups as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iosGetGroupsForMAMPolicyCall(String hostName, String policyName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Intune/locations/{hostName}/iosPolicies/{policyName}/groups"
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()))
            .replace("{" + "policyName" + "}", localVarApiClient.escapeString(policyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iosGetGroupsForMAMPolicyValidateBeforeCall(String hostName, String policyName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling iosGetGroupsForMAMPolicy(Async)");
        }

        // verify the required parameter 'policyName' is set
        if (policyName == null) {
            throw new ApiException("Missing the required parameter 'policyName' when calling iosGetGroupsForMAMPolicy(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling iosGetGroupsForMAMPolicy(Async)");
        }

        return iosGetGroupsForMAMPolicyCall(hostName, policyName, apiVersion, _callback);

    }

    /**
     * 
     * Returns groups for a given iOSMAMPolicy.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName policy name for the tenant (required)
     * @param apiVersion Service Api Version. (required)
     * @return GroupsCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> groups as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GroupsCollection iosGetGroupsForMAMPolicy(String hostName, String policyName, String apiVersion) throws ApiException {
        ApiResponse<GroupsCollection> localVarResp = iosGetGroupsForMAMPolicyWithHttpInfo(hostName, policyName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns groups for a given iOSMAMPolicy.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName policy name for the tenant (required)
     * @param apiVersion Service Api Version. (required)
     * @return ApiResponse&lt;GroupsCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> groups as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupsCollection> iosGetGroupsForMAMPolicyWithHttpInfo(String hostName, String policyName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = iosGetGroupsForMAMPolicyValidateBeforeCall(hostName, policyName, apiVersion, null);
        Type localVarReturnType = new TypeToken<GroupsCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns groups for a given iOSMAMPolicy.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName policy name for the tenant (required)
     * @param apiVersion Service Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> groups as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iosGetGroupsForMAMPolicyAsync(String hostName, String policyName, String apiVersion, final ApiCallback<GroupsCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = iosGetGroupsForMAMPolicyValidateBeforeCall(hostName, policyName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<GroupsCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iosGetMAMPolicies
     * @param hostName Location hostName for the tenant (required)
     * @param apiVersion Service Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $select select specific fields in entity. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> applications as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iosGetMAMPoliciesCall(String hostName, String apiVersion, String $filter, Integer $top, String $select, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Intune/locations/{hostName}/iosPolicies"
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iosGetMAMPoliciesValidateBeforeCall(String hostName, String apiVersion, String $filter, Integer $top, String $select, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling iosGetMAMPolicies(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling iosGetMAMPolicies(Async)");
        }

        return iosGetMAMPoliciesCall(hostName, apiVersion, $filter, $top, $select, _callback);

    }

    /**
     * 
     * Returns Intune iOSPolicies.
     * @param hostName Location hostName for the tenant (required)
     * @param apiVersion Service Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $select select specific fields in entity. (optional)
     * @return IOSMAMPolicyCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> applications as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public IOSMAMPolicyCollection iosGetMAMPolicies(String hostName, String apiVersion, String $filter, Integer $top, String $select) throws ApiException {
        ApiResponse<IOSMAMPolicyCollection> localVarResp = iosGetMAMPoliciesWithHttpInfo(hostName, apiVersion, $filter, $top, $select);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns Intune iOSPolicies.
     * @param hostName Location hostName for the tenant (required)
     * @param apiVersion Service Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $select select specific fields in entity. (optional)
     * @return ApiResponse&lt;IOSMAMPolicyCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> applications as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IOSMAMPolicyCollection> iosGetMAMPoliciesWithHttpInfo(String hostName, String apiVersion, String $filter, Integer $top, String $select) throws ApiException {
        okhttp3.Call localVarCall = iosGetMAMPoliciesValidateBeforeCall(hostName, apiVersion, $filter, $top, $select, null);
        Type localVarReturnType = new TypeToken<IOSMAMPolicyCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns Intune iOSPolicies.
     * @param hostName Location hostName for the tenant (required)
     * @param apiVersion Service Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $select select specific fields in entity. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> applications as collection response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iosGetMAMPoliciesAsync(String hostName, String apiVersion, String $filter, Integer $top, String $select, final ApiCallback<IOSMAMPolicyCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = iosGetMAMPoliciesValidateBeforeCall(hostName, apiVersion, $filter, $top, $select, _callback);
        Type localVarReturnType = new TypeToken<IOSMAMPolicyCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iosGetMAMPolicyByName
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @param $select select specific fields in entity. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> iOSMAMPolicy entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iosGetMAMPolicyByNameCall(String hostName, String policyName, String apiVersion, String $select, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Intune/locations/{hostName}/iosPolicies/{policyName}"
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()))
            .replace("{" + "policyName" + "}", localVarApiClient.escapeString(policyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iosGetMAMPolicyByNameValidateBeforeCall(String hostName, String policyName, String apiVersion, String $select, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling iosGetMAMPolicyByName(Async)");
        }

        // verify the required parameter 'policyName' is set
        if (policyName == null) {
            throw new ApiException("Missing the required parameter 'policyName' when calling iosGetMAMPolicyByName(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling iosGetMAMPolicyByName(Async)");
        }

        return iosGetMAMPolicyByNameCall(hostName, policyName, apiVersion, $select, _callback);

    }

    /**
     * 
     * Returns Intune iOS policies.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @param $select select specific fields in entity. (optional)
     * @return IOSMAMPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> iOSMAMPolicy entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public IOSMAMPolicy iosGetMAMPolicyByName(String hostName, String policyName, String apiVersion, String $select) throws ApiException {
        ApiResponse<IOSMAMPolicy> localVarResp = iosGetMAMPolicyByNameWithHttpInfo(hostName, policyName, apiVersion, $select);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns Intune iOS policies.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @param $select select specific fields in entity. (optional)
     * @return ApiResponse&lt;IOSMAMPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> iOSMAMPolicy entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IOSMAMPolicy> iosGetMAMPolicyByNameWithHttpInfo(String hostName, String policyName, String apiVersion, String $select) throws ApiException {
        okhttp3.Call localVarCall = iosGetMAMPolicyByNameValidateBeforeCall(hostName, policyName, apiVersion, $select, null);
        Type localVarReturnType = new TypeToken<IOSMAMPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns Intune iOS policies.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @param $select select specific fields in entity. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> iOSMAMPolicy entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iosGetMAMPolicyByNameAsync(String hostName, String policyName, String apiVersion, String $select, final ApiCallback<IOSMAMPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = iosGetMAMPolicyByNameValidateBeforeCall(hostName, policyName, apiVersion, $select, _callback);
        Type localVarReturnType = new TypeToken<IOSMAMPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iosPatchMAMPolicy
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @param parameters Parameters supplied to the Create or update an android policy operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> iOSMAMPolicy entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iosPatchMAMPolicyCall(String hostName, String policyName, String apiVersion, IOSMAMPolicy parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Intune/locations/{hostName}/iosPolicies/{policyName}"
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()))
            .replace("{" + "policyName" + "}", localVarApiClient.escapeString(policyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iosPatchMAMPolicyValidateBeforeCall(String hostName, String policyName, String apiVersion, IOSMAMPolicy parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling iosPatchMAMPolicy(Async)");
        }

        // verify the required parameter 'policyName' is set
        if (policyName == null) {
            throw new ApiException("Missing the required parameter 'policyName' when calling iosPatchMAMPolicy(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling iosPatchMAMPolicy(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling iosPatchMAMPolicy(Async)");
        }

        return iosPatchMAMPolicyCall(hostName, policyName, apiVersion, parameters, _callback);

    }

    /**
     * 
     *  patch an iOSMAMPolicy.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @param parameters Parameters supplied to the Create or update an android policy operation. (required)
     * @return IOSMAMPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> iOSMAMPolicy entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public IOSMAMPolicy iosPatchMAMPolicy(String hostName, String policyName, String apiVersion, IOSMAMPolicy parameters) throws ApiException {
        ApiResponse<IOSMAMPolicy> localVarResp = iosPatchMAMPolicyWithHttpInfo(hostName, policyName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     *  patch an iOSMAMPolicy.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @param parameters Parameters supplied to the Create or update an android policy operation. (required)
     * @return ApiResponse&lt;IOSMAMPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> iOSMAMPolicy entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IOSMAMPolicy> iosPatchMAMPolicyWithHttpInfo(String hostName, String policyName, String apiVersion, IOSMAMPolicy parameters) throws ApiException {
        okhttp3.Call localVarCall = iosPatchMAMPolicyValidateBeforeCall(hostName, policyName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<IOSMAMPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  patch an iOSMAMPolicy.
     * @param hostName Location hostName for the tenant (required)
     * @param policyName Unique name for the policy (required)
     * @param apiVersion Service Api Version. (required)
     * @param parameters Parameters supplied to the Create or update an android policy operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> iOSMAMPolicy entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iosPatchMAMPolicyAsync(String hostName, String policyName, String apiVersion, IOSMAMPolicy parameters, final ApiCallback<IOSMAMPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = iosPatchMAMPolicyValidateBeforeCall(hostName, policyName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<IOSMAMPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wipeMAMUserDevice
     * @param hostName Location hostName for the tenant (required)
     * @param userName unique user name (required)
     * @param deviceName device name (required)
     * @param apiVersion Service Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wipe operation result. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wipeMAMUserDeviceCall(String hostName, String userName, String deviceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Intune/locations/{hostName}/users/{userName}/devices/{deviceName}/wipe"
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()))
            .replace("{" + "userName" + "}", localVarApiClient.escapeString(userName.toString()))
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wipeMAMUserDeviceValidateBeforeCall(String hostName, String userName, String deviceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling wipeMAMUserDevice(Async)");
        }

        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling wipeMAMUserDevice(Async)");
        }

        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling wipeMAMUserDevice(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling wipeMAMUserDevice(Async)");
        }

        return wipeMAMUserDeviceCall(hostName, userName, deviceName, apiVersion, _callback);

    }

    /**
     * 
     * Wipe a device for a user.
     * @param hostName Location hostName for the tenant (required)
     * @param userName unique user name (required)
     * @param deviceName device name (required)
     * @param apiVersion Service Api Version. (required)
     * @return WipeDeviceOperationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wipe operation result. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public WipeDeviceOperationResult wipeMAMUserDevice(String hostName, String userName, String deviceName, String apiVersion) throws ApiException {
        ApiResponse<WipeDeviceOperationResult> localVarResp = wipeMAMUserDeviceWithHttpInfo(hostName, userName, deviceName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Wipe a device for a user.
     * @param hostName Location hostName for the tenant (required)
     * @param userName unique user name (required)
     * @param deviceName device name (required)
     * @param apiVersion Service Api Version. (required)
     * @return ApiResponse&lt;WipeDeviceOperationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wipe operation result. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WipeDeviceOperationResult> wipeMAMUserDeviceWithHttpInfo(String hostName, String userName, String deviceName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = wipeMAMUserDeviceValidateBeforeCall(hostName, userName, deviceName, apiVersion, null);
        Type localVarReturnType = new TypeToken<WipeDeviceOperationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Wipe a device for a user.
     * @param hostName Location hostName for the tenant (required)
     * @param userName unique user name (required)
     * @param deviceName device name (required)
     * @param apiVersion Service Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wipe operation result. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wipeMAMUserDeviceAsync(String hostName, String userName, String deviceName, String apiVersion, final ApiCallback<WipeDeviceOperationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = wipeMAMUserDeviceValidateBeforeCall(hostName, userName, deviceName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WipeDeviceOperationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
