/**
 * HDInsightManagementClient
 * The HDInsight Management Client.
 *
 * The version of the OpenAPI document: 2015-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusterConfigurations.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusterConfigurations::OAIClusterConfigurations(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusterConfigurations::OAIClusterConfigurations() {
    this->initializeModel();
}

OAIClusterConfigurations::~OAIClusterConfigurations() {}

void OAIClusterConfigurations::initializeModel() {

    m_configurations_isSet = false;
    m_configurations_isValid = false;
}

void OAIClusterConfigurations::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClusterConfigurations::fromJsonObject(QJsonObject json) {

    if(json["configurations"].isObject()){
        auto varmap = json["configurations"].toObject().toVariantMap();
        m_configurations_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QMap<QString, QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_configurations_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_configurations_isSet &= !jval.isNull() && m_configurations_isValid;
                m_configurations.insert(m_configurations.end(), val, item);
            }
        }
    }
}

QString OAIClusterConfigurations::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClusterConfigurations::asJsonObject() const {
    QJsonObject obj;
    if (m_configurations.size() > 0) {
        
        obj.insert(QString("configurations"), toJsonValue(m_configurations));
    }
    return obj;
}

QMap<QString, QMap> OAIClusterConfigurations::getConfigurations() const {
    return m_configurations;
}
void OAIClusterConfigurations::setConfigurations(const QMap<QString, QMap> &configurations) {
    m_configurations = configurations;
    m_configurations_isSet = true;
}

bool OAIClusterConfigurations::is_configurations_Set() const{
    return m_configurations_isSet;
}

bool OAIClusterConfigurations::is_configurations_Valid() const{
    return m_configurations_isValid;
}

bool OAIClusterConfigurations::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configurations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClusterConfigurations::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
