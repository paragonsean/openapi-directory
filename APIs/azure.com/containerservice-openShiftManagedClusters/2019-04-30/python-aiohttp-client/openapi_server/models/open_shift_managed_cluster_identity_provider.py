# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.open_shift_managed_cluster_base_identity_provider import OpenShiftManagedClusterBaseIdentityProvider
from openapi_server import util


class OpenShiftManagedClusterIdentityProvider(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, provider: OpenShiftManagedClusterBaseIdentityProvider=None):
        """OpenShiftManagedClusterIdentityProvider - a model defined in OpenAPI

        :param name: The name of this OpenShiftManagedClusterIdentityProvider.
        :param provider: The provider of this OpenShiftManagedClusterIdentityProvider.
        """
        self.openapi_types = {
            'name': str,
            'provider': OpenShiftManagedClusterBaseIdentityProvider
        }

        self.attribute_map = {
            'name': 'name',
            'provider': 'provider'
        }

        self._name = name
        self._provider = provider

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OpenShiftManagedClusterIdentityProvider':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OpenShiftManagedClusterIdentityProvider of this OpenShiftManagedClusterIdentityProvider.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this OpenShiftManagedClusterIdentityProvider.

        Name of the provider.

        :return: The name of this OpenShiftManagedClusterIdentityProvider.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OpenShiftManagedClusterIdentityProvider.

        Name of the provider.

        :param name: The name of this OpenShiftManagedClusterIdentityProvider.
        :type name: str
        """

        self._name = name

    @property
    def provider(self):
        """Gets the provider of this OpenShiftManagedClusterIdentityProvider.


        :return: The provider of this OpenShiftManagedClusterIdentityProvider.
        :rtype: OpenShiftManagedClusterBaseIdentityProvider
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this OpenShiftManagedClusterIdentityProvider.


        :param provider: The provider of this OpenShiftManagedClusterIdentityProvider.
        :type provider: OpenShiftManagedClusterBaseIdentityProvider
        """

        self._provider = provider
