/**
 * ContainerServiceClient
 * The Container Service Client.
 *
 * The version of the OpenAPI document: 2019-04-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOpenShiftManagedClusterMasterPoolProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOpenShiftManagedClusterMasterPoolProfile::OAIOpenShiftManagedClusterMasterPoolProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOpenShiftManagedClusterMasterPoolProfile::OAIOpenShiftManagedClusterMasterPoolProfile() {
    this->initializeModel();
}

OAIOpenShiftManagedClusterMasterPoolProfile::~OAIOpenShiftManagedClusterMasterPoolProfile() {}

void OAIOpenShiftManagedClusterMasterPoolProfile::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_os_type_isSet = false;
    m_os_type_isValid = false;

    m_subnet_cidr_isSet = false;
    m_subnet_cidr_isValid = false;

    m_vm_size_isSet = false;
    m_vm_size_isValid = false;
}

void OAIOpenShiftManagedClusterMasterPoolProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOpenShiftManagedClusterMasterPoolProfile::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;

    m_subnet_cidr_isValid = ::OpenAPI::fromJsonValue(m_subnet_cidr, json[QString("subnetCidr")]);
    m_subnet_cidr_isSet = !json[QString("subnetCidr")].isNull() && m_subnet_cidr_isValid;

    m_vm_size_isValid = ::OpenAPI::fromJsonValue(m_vm_size, json[QString("vmSize")]);
    m_vm_size_isSet = !json[QString("vmSize")].isNull() && m_vm_size_isValid;
}

QString OAIOpenShiftManagedClusterMasterPoolProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOpenShiftManagedClusterMasterPoolProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_os_type.isSet()) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    if (m_subnet_cidr_isSet) {
        obj.insert(QString("subnetCidr"), ::OpenAPI::toJsonValue(m_subnet_cidr));
    }
    if (m_vm_size.isSet()) {
        obj.insert(QString("vmSize"), ::OpenAPI::toJsonValue(m_vm_size));
    }
    return obj;
}

qint32 OAIOpenShiftManagedClusterMasterPoolProfile::getCount() const {
    return m_count;
}
void OAIOpenShiftManagedClusterMasterPoolProfile::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIOpenShiftManagedClusterMasterPoolProfile::is_count_Set() const{
    return m_count_isSet;
}

bool OAIOpenShiftManagedClusterMasterPoolProfile::is_count_Valid() const{
    return m_count_isValid;
}

QString OAIOpenShiftManagedClusterMasterPoolProfile::getName() const {
    return m_name;
}
void OAIOpenShiftManagedClusterMasterPoolProfile::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOpenShiftManagedClusterMasterPoolProfile::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOpenShiftManagedClusterMasterPoolProfile::is_name_Valid() const{
    return m_name_isValid;
}

OAIOSType OAIOpenShiftManagedClusterMasterPoolProfile::getOsType() const {
    return m_os_type;
}
void OAIOpenShiftManagedClusterMasterPoolProfile::setOsType(const OAIOSType &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAIOpenShiftManagedClusterMasterPoolProfile::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAIOpenShiftManagedClusterMasterPoolProfile::is_os_type_Valid() const{
    return m_os_type_isValid;
}

QString OAIOpenShiftManagedClusterMasterPoolProfile::getSubnetCidr() const {
    return m_subnet_cidr;
}
void OAIOpenShiftManagedClusterMasterPoolProfile::setSubnetCidr(const QString &subnet_cidr) {
    m_subnet_cidr = subnet_cidr;
    m_subnet_cidr_isSet = true;
}

bool OAIOpenShiftManagedClusterMasterPoolProfile::is_subnet_cidr_Set() const{
    return m_subnet_cidr_isSet;
}

bool OAIOpenShiftManagedClusterMasterPoolProfile::is_subnet_cidr_Valid() const{
    return m_subnet_cidr_isValid;
}

OAIOpenShiftContainerServiceVMSize OAIOpenShiftManagedClusterMasterPoolProfile::getVmSize() const {
    return m_vm_size;
}
void OAIOpenShiftManagedClusterMasterPoolProfile::setVmSize(const OAIOpenShiftContainerServiceVMSize &vm_size) {
    m_vm_size = vm_size;
    m_vm_size_isSet = true;
}

bool OAIOpenShiftManagedClusterMasterPoolProfile::is_vm_size_Set() const{
    return m_vm_size_isSet;
}

bool OAIOpenShiftManagedClusterMasterPoolProfile::is_vm_size_Valid() const{
    return m_vm_size_isValid;
}

bool OAIOpenShiftManagedClusterMasterPoolProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_cidr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_size.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOpenShiftManagedClusterMasterPoolProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_count_isValid && m_vm_size_isValid && true;
}

} // namespace OpenAPI
