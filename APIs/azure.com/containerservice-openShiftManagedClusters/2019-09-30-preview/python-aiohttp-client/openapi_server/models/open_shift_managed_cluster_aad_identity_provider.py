# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.open_shift_managed_cluster_base_identity_provider import OpenShiftManagedClusterBaseIdentityProvider
from openapi_server import util


class OpenShiftManagedClusterAADIdentityProvider(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kind: str=None, client_id: str=None, customer_admin_group_id: str=None, secret: str=None, tenant_id: str=None):
        """OpenShiftManagedClusterAADIdentityProvider - a model defined in OpenAPI

        :param kind: The kind of this OpenShiftManagedClusterAADIdentityProvider.
        :param client_id: The client_id of this OpenShiftManagedClusterAADIdentityProvider.
        :param customer_admin_group_id: The customer_admin_group_id of this OpenShiftManagedClusterAADIdentityProvider.
        :param secret: The secret of this OpenShiftManagedClusterAADIdentityProvider.
        :param tenant_id: The tenant_id of this OpenShiftManagedClusterAADIdentityProvider.
        """
        self.openapi_types = {
            'kind': str,
            'client_id': str,
            'customer_admin_group_id': str,
            'secret': str,
            'tenant_id': str
        }

        self.attribute_map = {
            'kind': 'kind',
            'client_id': 'clientId',
            'customer_admin_group_id': 'customerAdminGroupId',
            'secret': 'secret',
            'tenant_id': 'tenantId'
        }

        self._kind = kind
        self._client_id = client_id
        self._customer_admin_group_id = customer_admin_group_id
        self._secret = secret
        self._tenant_id = tenant_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OpenShiftManagedClusterAADIdentityProvider':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OpenShiftManagedClusterAADIdentityProvider of this OpenShiftManagedClusterAADIdentityProvider.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kind(self):
        """Gets the kind of this OpenShiftManagedClusterAADIdentityProvider.

        The kind of the provider.

        :return: The kind of this OpenShiftManagedClusterAADIdentityProvider.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this OpenShiftManagedClusterAADIdentityProvider.

        The kind of the provider.

        :param kind: The kind of this OpenShiftManagedClusterAADIdentityProvider.
        :type kind: str
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def client_id(self):
        """Gets the client_id of this OpenShiftManagedClusterAADIdentityProvider.

        The clientId password associated with the provider.

        :return: The client_id of this OpenShiftManagedClusterAADIdentityProvider.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this OpenShiftManagedClusterAADIdentityProvider.

        The clientId password associated with the provider.

        :param client_id: The client_id of this OpenShiftManagedClusterAADIdentityProvider.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def customer_admin_group_id(self):
        """Gets the customer_admin_group_id of this OpenShiftManagedClusterAADIdentityProvider.

        The groupId to be granted cluster admin role.

        :return: The customer_admin_group_id of this OpenShiftManagedClusterAADIdentityProvider.
        :rtype: str
        """
        return self._customer_admin_group_id

    @customer_admin_group_id.setter
    def customer_admin_group_id(self, customer_admin_group_id):
        """Sets the customer_admin_group_id of this OpenShiftManagedClusterAADIdentityProvider.

        The groupId to be granted cluster admin role.

        :param customer_admin_group_id: The customer_admin_group_id of this OpenShiftManagedClusterAADIdentityProvider.
        :type customer_admin_group_id: str
        """

        self._customer_admin_group_id = customer_admin_group_id

    @property
    def secret(self):
        """Gets the secret of this OpenShiftManagedClusterAADIdentityProvider.

        The secret password associated with the provider.

        :return: The secret of this OpenShiftManagedClusterAADIdentityProvider.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this OpenShiftManagedClusterAADIdentityProvider.

        The secret password associated with the provider.

        :param secret: The secret of this OpenShiftManagedClusterAADIdentityProvider.
        :type secret: str
        """

        self._secret = secret

    @property
    def tenant_id(self):
        """Gets the tenant_id of this OpenShiftManagedClusterAADIdentityProvider.

        The tenantId associated with the provider.

        :return: The tenant_id of this OpenShiftManagedClusterAADIdentityProvider.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this OpenShiftManagedClusterAADIdentityProvider.

        The tenantId associated with the provider.

        :param tenant_id: The tenant_id of this OpenShiftManagedClusterAADIdentityProvider.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id
