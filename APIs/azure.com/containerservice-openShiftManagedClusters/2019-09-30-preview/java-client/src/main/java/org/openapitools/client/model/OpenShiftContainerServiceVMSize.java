/*
 * ContainerServiceClient
 * The Container Service Client.
 *
 * The version of the OpenAPI document: 2019-09-30-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Size of OpenShift VMs.
 */
@JsonAdapter(OpenShiftContainerServiceVMSize.Adapter.class)
public enum OpenShiftContainerServiceVMSize {
  
  D2S_V3("Standard_D2s_v3"),
  
  D4S_V3("Standard_D4s_v3"),
  
  D8S_V3("Standard_D8s_v3"),
  
  D16S_V3("Standard_D16s_v3"),
  
  D32S_V3("Standard_D32s_v3"),
  
  D64S_V3("Standard_D64s_v3"),
  
  DS4_V2("Standard_DS4_v2"),
  
  DS5_V2("Standard_DS5_v2"),
  
  F8S_V2("Standard_F8s_v2"),
  
  F16S_V2("Standard_F16s_v2"),
  
  F32S_V2("Standard_F32s_v2"),
  
  F64S_V2("Standard_F64s_v2"),
  
  F72S_V2("Standard_F72s_v2"),
  
  F8S("Standard_F8s"),
  
  F16S("Standard_F16s"),
  
  E4S_V3("Standard_E4s_v3"),
  
  E8S_V3("Standard_E8s_v3"),
  
  E16S_V3("Standard_E16s_v3"),
  
  E20S_V3("Standard_E20s_v3"),
  
  E32S_V3("Standard_E32s_v3"),
  
  E64S_V3("Standard_E64s_v3"),
  
  GS2("Standard_GS2"),
  
  GS3("Standard_GS3"),
  
  GS4("Standard_GS4"),
  
  GS5("Standard_GS5"),
  
  DS12_V2("Standard_DS12_v2"),
  
  DS13_V2("Standard_DS13_v2"),
  
  DS14_V2("Standard_DS14_v2"),
  
  DS15_V2("Standard_DS15_v2"),
  
  L4S("Standard_L4s"),
  
  L8S("Standard_L8s"),
  
  L16S("Standard_L16s"),
  
  L32S("Standard_L32s");

  private String value;

  OpenShiftContainerServiceVMSize(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static OpenShiftContainerServiceVMSize fromValue(String value) {
    for (OpenShiftContainerServiceVMSize b : OpenShiftContainerServiceVMSize.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<OpenShiftContainerServiceVMSize> {
    @Override
    public void write(final JsonWriter jsonWriter, final OpenShiftContainerServiceVMSize enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public OpenShiftContainerServiceVMSize read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return OpenShiftContainerServiceVMSize.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    OpenShiftContainerServiceVMSize.fromValue(value);
  }
}

