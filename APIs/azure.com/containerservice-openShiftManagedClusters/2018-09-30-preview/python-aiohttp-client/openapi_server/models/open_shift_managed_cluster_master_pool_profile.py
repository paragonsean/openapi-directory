# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.os_type import OSType
from openapi_server.models.open_shift_container_service_vm_size import OpenShiftContainerServiceVMSize
from openapi_server import util


class OpenShiftManagedClusterMasterPoolProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, name: str=None, os_type: OSType=OSType.LINUX, subnet_cidr: str=None, vm_size: OpenShiftContainerServiceVMSize=None):
        """OpenShiftManagedClusterMasterPoolProfile - a model defined in OpenAPI

        :param count: The count of this OpenShiftManagedClusterMasterPoolProfile.
        :param name: The name of this OpenShiftManagedClusterMasterPoolProfile.
        :param os_type: The os_type of this OpenShiftManagedClusterMasterPoolProfile.
        :param subnet_cidr: The subnet_cidr of this OpenShiftManagedClusterMasterPoolProfile.
        :param vm_size: The vm_size of this OpenShiftManagedClusterMasterPoolProfile.
        """
        self.openapi_types = {
            'count': int,
            'name': str,
            'os_type': OSType,
            'subnet_cidr': str,
            'vm_size': OpenShiftContainerServiceVMSize
        }

        self.attribute_map = {
            'count': 'count',
            'name': 'name',
            'os_type': 'osType',
            'subnet_cidr': 'subnetCidr',
            'vm_size': 'vmSize'
        }

        self._count = count
        self._name = name
        self._os_type = os_type
        self._subnet_cidr = subnet_cidr
        self._vm_size = vm_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OpenShiftManagedClusterMasterPoolProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OpenShiftManagedClusterMasterPoolProfile of this OpenShiftManagedClusterMasterPoolProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this OpenShiftManagedClusterMasterPoolProfile.

        Number of masters (VMs) to host docker containers. The default value is 3.

        :return: The count of this OpenShiftManagedClusterMasterPoolProfile.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this OpenShiftManagedClusterMasterPoolProfile.

        Number of masters (VMs) to host docker containers. The default value is 3.

        :param count: The count of this OpenShiftManagedClusterMasterPoolProfile.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def name(self):
        """Gets the name of this OpenShiftManagedClusterMasterPoolProfile.

        Unique name of the master pool profile in the context of the subscription and resource group.

        :return: The name of this OpenShiftManagedClusterMasterPoolProfile.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OpenShiftManagedClusterMasterPoolProfile.

        Unique name of the master pool profile in the context of the subscription and resource group.

        :param name: The name of this OpenShiftManagedClusterMasterPoolProfile.
        :type name: str
        """

        self._name = name

    @property
    def os_type(self):
        """Gets the os_type of this OpenShiftManagedClusterMasterPoolProfile.


        :return: The os_type of this OpenShiftManagedClusterMasterPoolProfile.
        :rtype: OSType
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this OpenShiftManagedClusterMasterPoolProfile.


        :param os_type: The os_type of this OpenShiftManagedClusterMasterPoolProfile.
        :type os_type: OSType
        """

        self._os_type = os_type

    @property
    def subnet_cidr(self):
        """Gets the subnet_cidr of this OpenShiftManagedClusterMasterPoolProfile.

        Subnet CIDR for the peering.

        :return: The subnet_cidr of this OpenShiftManagedClusterMasterPoolProfile.
        :rtype: str
        """
        return self._subnet_cidr

    @subnet_cidr.setter
    def subnet_cidr(self, subnet_cidr):
        """Sets the subnet_cidr of this OpenShiftManagedClusterMasterPoolProfile.

        Subnet CIDR for the peering.

        :param subnet_cidr: The subnet_cidr of this OpenShiftManagedClusterMasterPoolProfile.
        :type subnet_cidr: str
        """

        self._subnet_cidr = subnet_cidr

    @property
    def vm_size(self):
        """Gets the vm_size of this OpenShiftManagedClusterMasterPoolProfile.


        :return: The vm_size of this OpenShiftManagedClusterMasterPoolProfile.
        :rtype: OpenShiftContainerServiceVMSize
        """
        return self._vm_size

    @vm_size.setter
    def vm_size(self, vm_size):
        """Sets the vm_size of this OpenShiftManagedClusterMasterPoolProfile.


        :param vm_size: The vm_size of this OpenShiftManagedClusterMasterPoolProfile.
        :type vm_size: OpenShiftContainerServiceVMSize
        """
        if vm_size is None:
            raise ValueError("Invalid value for `vm_size`, must not be `None`")

        self._vm_size = vm_size
