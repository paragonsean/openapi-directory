/**
 * ContainerServiceClient
 * The Container Service Client.
 *
 * The version of the OpenAPI document: 2018-09-30-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOpenShiftManagedClusterAADIdentityProvider.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOpenShiftManagedClusterAADIdentityProvider::OAIOpenShiftManagedClusterAADIdentityProvider(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOpenShiftManagedClusterAADIdentityProvider::OAIOpenShiftManagedClusterAADIdentityProvider() {
    this->initializeModel();
}

OAIOpenShiftManagedClusterAADIdentityProvider::~OAIOpenShiftManagedClusterAADIdentityProvider() {}

void OAIOpenShiftManagedClusterAADIdentityProvider::initializeModel() {

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_customer_admin_group_id_isSet = false;
    m_customer_admin_group_id_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;
}

void OAIOpenShiftManagedClusterAADIdentityProvider::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOpenShiftManagedClusterAADIdentityProvider::fromJsonObject(QJsonObject json) {

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_customer_admin_group_id_isValid = ::OpenAPI::fromJsonValue(m_customer_admin_group_id, json[QString("customerAdminGroupId")]);
    m_customer_admin_group_id_isSet = !json[QString("customerAdminGroupId")].isNull() && m_customer_admin_group_id_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;
}

QString OAIOpenShiftManagedClusterAADIdentityProvider::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOpenShiftManagedClusterAADIdentityProvider::asJsonObject() const {
    QJsonObject obj;
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_customer_admin_group_id_isSet) {
        obj.insert(QString("customerAdminGroupId"), ::OpenAPI::toJsonValue(m_customer_admin_group_id));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    return obj;
}

QString OAIOpenShiftManagedClusterAADIdentityProvider::getKind() const {
    return m_kind;
}
void OAIOpenShiftManagedClusterAADIdentityProvider::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIOpenShiftManagedClusterAADIdentityProvider::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIOpenShiftManagedClusterAADIdentityProvider::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIOpenShiftManagedClusterAADIdentityProvider::getClientId() const {
    return m_client_id;
}
void OAIOpenShiftManagedClusterAADIdentityProvider::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIOpenShiftManagedClusterAADIdentityProvider::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIOpenShiftManagedClusterAADIdentityProvider::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIOpenShiftManagedClusterAADIdentityProvider::getCustomerAdminGroupId() const {
    return m_customer_admin_group_id;
}
void OAIOpenShiftManagedClusterAADIdentityProvider::setCustomerAdminGroupId(const QString &customer_admin_group_id) {
    m_customer_admin_group_id = customer_admin_group_id;
    m_customer_admin_group_id_isSet = true;
}

bool OAIOpenShiftManagedClusterAADIdentityProvider::is_customer_admin_group_id_Set() const{
    return m_customer_admin_group_id_isSet;
}

bool OAIOpenShiftManagedClusterAADIdentityProvider::is_customer_admin_group_id_Valid() const{
    return m_customer_admin_group_id_isValid;
}

QString OAIOpenShiftManagedClusterAADIdentityProvider::getSecret() const {
    return m_secret;
}
void OAIOpenShiftManagedClusterAADIdentityProvider::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAIOpenShiftManagedClusterAADIdentityProvider::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIOpenShiftManagedClusterAADIdentityProvider::is_secret_Valid() const{
    return m_secret_isValid;
}

QString OAIOpenShiftManagedClusterAADIdentityProvider::getTenantId() const {
    return m_tenant_id;
}
void OAIOpenShiftManagedClusterAADIdentityProvider::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIOpenShiftManagedClusterAADIdentityProvider::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIOpenShiftManagedClusterAADIdentityProvider::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

bool OAIOpenShiftManagedClusterAADIdentityProvider::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_admin_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOpenShiftManagedClusterAADIdentityProvider::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_kind_isValid && true;
}

} // namespace OpenAPI
