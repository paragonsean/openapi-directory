/**
 * ContainerServiceClient
 * The Container Service Client.
 *
 * The version of the OpenAPI document: 2018-09-30-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOpenShiftContainerServiceVMSize.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOpenShiftContainerServiceVMSize::OAIOpenShiftContainerServiceVMSize(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOpenShiftContainerServiceVMSize::OAIOpenShiftContainerServiceVMSize() {
    this->initializeModel();
}

OAIOpenShiftContainerServiceVMSize::~OAIOpenShiftContainerServiceVMSize() {}

void OAIOpenShiftContainerServiceVMSize::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOpenShiftContainerServiceVMSize::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOpenShiftContainerServiceVMSize::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Standard_D2s_v3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenShiftContainerServiceVMSize::D2S_V3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Standard_D4s_v3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenShiftContainerServiceVMSize::D4S_V3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Standard_D8s_v3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenShiftContainerServiceVMSize::D8S_V3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Standard_D16s_v3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenShiftContainerServiceVMSize::D16S_V3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Standard_D32s_v3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenShiftContainerServiceVMSize::D32S_V3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Standard_D64s_v3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenShiftContainerServiceVMSize::D64S_V3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Standard_DS4_v2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenShiftContainerServiceVMSize::DS4_V2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Standard_DS5_v2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenShiftContainerServiceVMSize::DS5_V2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Standard_F8s_v2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenShiftContainerServiceVMSize::F8S_V2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Standard_F16s_v2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenShiftContainerServiceVMSize::F16S_V2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Standard_F32s_v2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenShiftContainerServiceVMSize::F32S_V2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Standard_F64s_v2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenShiftContainerServiceVMSize::F64S_V2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Standard_F72s_v2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenShiftContainerServiceVMSize::F72S_V2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Standard_F8s", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenShiftContainerServiceVMSize::F8S;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Standard_F16s", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenShiftContainerServiceVMSize::F16S;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Standard_E4s_v3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenShiftContainerServiceVMSize::E4S_V3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Standard_E8s_v3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenShiftContainerServiceVMSize::E8S_V3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Standard_E16s_v3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenShiftContainerServiceVMSize::E16S_V3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Standard_E20s_v3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenShiftContainerServiceVMSize::E20S_V3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Standard_E32s_v3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenShiftContainerServiceVMSize::E32S_V3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Standard_E64s_v3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenShiftContainerServiceVMSize::E64S_V3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Standard_GS2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenShiftContainerServiceVMSize::GS2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Standard_GS3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenShiftContainerServiceVMSize::GS3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Standard_GS4", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenShiftContainerServiceVMSize::GS4;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Standard_GS5", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenShiftContainerServiceVMSize::GS5;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Standard_DS12_v2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenShiftContainerServiceVMSize::DS12_V2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Standard_DS13_v2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenShiftContainerServiceVMSize::DS13_V2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Standard_DS14_v2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenShiftContainerServiceVMSize::DS14_V2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Standard_DS15_v2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenShiftContainerServiceVMSize::DS15_V2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Standard_L4s", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenShiftContainerServiceVMSize::L4S;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Standard_L8s", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenShiftContainerServiceVMSize::L8S;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Standard_L16s", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenShiftContainerServiceVMSize::L16S;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Standard_L32s", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenShiftContainerServiceVMSize::L32S;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOpenShiftContainerServiceVMSize::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOpenShiftContainerServiceVMSize::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOpenShiftContainerServiceVMSize::D2S_V3:
            val = "Standard_D2s_v3";
            break;
        case eOAIOpenShiftContainerServiceVMSize::D4S_V3:
            val = "Standard_D4s_v3";
            break;
        case eOAIOpenShiftContainerServiceVMSize::D8S_V3:
            val = "Standard_D8s_v3";
            break;
        case eOAIOpenShiftContainerServiceVMSize::D16S_V3:
            val = "Standard_D16s_v3";
            break;
        case eOAIOpenShiftContainerServiceVMSize::D32S_V3:
            val = "Standard_D32s_v3";
            break;
        case eOAIOpenShiftContainerServiceVMSize::D64S_V3:
            val = "Standard_D64s_v3";
            break;
        case eOAIOpenShiftContainerServiceVMSize::DS4_V2:
            val = "Standard_DS4_v2";
            break;
        case eOAIOpenShiftContainerServiceVMSize::DS5_V2:
            val = "Standard_DS5_v2";
            break;
        case eOAIOpenShiftContainerServiceVMSize::F8S_V2:
            val = "Standard_F8s_v2";
            break;
        case eOAIOpenShiftContainerServiceVMSize::F16S_V2:
            val = "Standard_F16s_v2";
            break;
        case eOAIOpenShiftContainerServiceVMSize::F32S_V2:
            val = "Standard_F32s_v2";
            break;
        case eOAIOpenShiftContainerServiceVMSize::F64S_V2:
            val = "Standard_F64s_v2";
            break;
        case eOAIOpenShiftContainerServiceVMSize::F72S_V2:
            val = "Standard_F72s_v2";
            break;
        case eOAIOpenShiftContainerServiceVMSize::F8S:
            val = "Standard_F8s";
            break;
        case eOAIOpenShiftContainerServiceVMSize::F16S:
            val = "Standard_F16s";
            break;
        case eOAIOpenShiftContainerServiceVMSize::E4S_V3:
            val = "Standard_E4s_v3";
            break;
        case eOAIOpenShiftContainerServiceVMSize::E8S_V3:
            val = "Standard_E8s_v3";
            break;
        case eOAIOpenShiftContainerServiceVMSize::E16S_V3:
            val = "Standard_E16s_v3";
            break;
        case eOAIOpenShiftContainerServiceVMSize::E20S_V3:
            val = "Standard_E20s_v3";
            break;
        case eOAIOpenShiftContainerServiceVMSize::E32S_V3:
            val = "Standard_E32s_v3";
            break;
        case eOAIOpenShiftContainerServiceVMSize::E64S_V3:
            val = "Standard_E64s_v3";
            break;
        case eOAIOpenShiftContainerServiceVMSize::GS2:
            val = "Standard_GS2";
            break;
        case eOAIOpenShiftContainerServiceVMSize::GS3:
            val = "Standard_GS3";
            break;
        case eOAIOpenShiftContainerServiceVMSize::GS4:
            val = "Standard_GS4";
            break;
        case eOAIOpenShiftContainerServiceVMSize::GS5:
            val = "Standard_GS5";
            break;
        case eOAIOpenShiftContainerServiceVMSize::DS12_V2:
            val = "Standard_DS12_v2";
            break;
        case eOAIOpenShiftContainerServiceVMSize::DS13_V2:
            val = "Standard_DS13_v2";
            break;
        case eOAIOpenShiftContainerServiceVMSize::DS14_V2:
            val = "Standard_DS14_v2";
            break;
        case eOAIOpenShiftContainerServiceVMSize::DS15_V2:
            val = "Standard_DS15_v2";
            break;
        case eOAIOpenShiftContainerServiceVMSize::L4S:
            val = "Standard_L4s";
            break;
        case eOAIOpenShiftContainerServiceVMSize::L8S:
            val = "Standard_L8s";
            break;
        case eOAIOpenShiftContainerServiceVMSize::L16S:
            val = "Standard_L16s";
            break;
        case eOAIOpenShiftContainerServiceVMSize::L32S:
            val = "Standard_L32s";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOpenShiftContainerServiceVMSize::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOpenShiftContainerServiceVMSize::eOAIOpenShiftContainerServiceVMSize OAIOpenShiftContainerServiceVMSize::getValue() const {
    return m_value;
}

void OAIOpenShiftContainerServiceVMSize::setValue(const OAIOpenShiftContainerServiceVMSize::eOAIOpenShiftContainerServiceVMSize& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOpenShiftContainerServiceVMSize::isSet() const {
    
    return m_value_isSet;
}

bool OAIOpenShiftContainerServiceVMSize::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
