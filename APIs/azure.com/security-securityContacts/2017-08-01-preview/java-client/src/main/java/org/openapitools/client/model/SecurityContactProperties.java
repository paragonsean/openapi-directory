/*
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2017-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * describes security contact properties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:26:21.016449-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SecurityContactProperties {
  /**
   * Whether to send security alerts notifications to the security contact
   */
  @JsonAdapter(AlertNotificationsEnum.Adapter.class)
  public enum AlertNotificationsEnum {
    ON("On"),
    
    OFF("Off");

    private String value;

    AlertNotificationsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AlertNotificationsEnum fromValue(String value) {
      for (AlertNotificationsEnum b : AlertNotificationsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AlertNotificationsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AlertNotificationsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AlertNotificationsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AlertNotificationsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AlertNotificationsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALERT_NOTIFICATIONS = "alertNotifications";
  @SerializedName(SERIALIZED_NAME_ALERT_NOTIFICATIONS)
  private AlertNotificationsEnum alertNotifications;

  /**
   * Whether to send security alerts notifications to subscription admins
   */
  @JsonAdapter(AlertsToAdminsEnum.Adapter.class)
  public enum AlertsToAdminsEnum {
    ON("On"),
    
    OFF("Off");

    private String value;

    AlertsToAdminsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AlertsToAdminsEnum fromValue(String value) {
      for (AlertsToAdminsEnum b : AlertsToAdminsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AlertsToAdminsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AlertsToAdminsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AlertsToAdminsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AlertsToAdminsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AlertsToAdminsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALERTS_TO_ADMINS = "alertsToAdmins";
  @SerializedName(SERIALIZED_NAME_ALERTS_TO_ADMINS)
  private AlertsToAdminsEnum alertsToAdmins;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public SecurityContactProperties() {
  }

  public SecurityContactProperties alertNotifications(AlertNotificationsEnum alertNotifications) {
    this.alertNotifications = alertNotifications;
    return this;
  }

  /**
   * Whether to send security alerts notifications to the security contact
   * @return alertNotifications
   */
  @javax.annotation.Nonnull
  public AlertNotificationsEnum getAlertNotifications() {
    return alertNotifications;
  }

  public void setAlertNotifications(AlertNotificationsEnum alertNotifications) {
    this.alertNotifications = alertNotifications;
  }


  public SecurityContactProperties alertsToAdmins(AlertsToAdminsEnum alertsToAdmins) {
    this.alertsToAdmins = alertsToAdmins;
    return this;
  }

  /**
   * Whether to send security alerts notifications to subscription admins
   * @return alertsToAdmins
   */
  @javax.annotation.Nonnull
  public AlertsToAdminsEnum getAlertsToAdmins() {
    return alertsToAdmins;
  }

  public void setAlertsToAdmins(AlertsToAdminsEnum alertsToAdmins) {
    this.alertsToAdmins = alertsToAdmins;
  }


  public SecurityContactProperties email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The email of this security contact
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public SecurityContactProperties phone(String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * The phone number of this security contact
   * @return phone
   */
  @javax.annotation.Nullable
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SecurityContactProperties securityContactProperties = (SecurityContactProperties) o;
    return Objects.equals(this.alertNotifications, securityContactProperties.alertNotifications) &&
        Objects.equals(this.alertsToAdmins, securityContactProperties.alertsToAdmins) &&
        Objects.equals(this.email, securityContactProperties.email) &&
        Objects.equals(this.phone, securityContactProperties.phone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alertNotifications, alertsToAdmins, email, phone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SecurityContactProperties {\n");
    sb.append("    alertNotifications: ").append(toIndentedString(alertNotifications)).append("\n");
    sb.append("    alertsToAdmins: ").append(toIndentedString(alertsToAdmins)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alertNotifications");
    openapiFields.add("alertsToAdmins");
    openapiFields.add("email");
    openapiFields.add("phone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("alertNotifications");
    openapiRequiredFields.add("alertsToAdmins");
    openapiRequiredFields.add("email");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SecurityContactProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SecurityContactProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SecurityContactProperties is not found in the empty JSON string", SecurityContactProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SecurityContactProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SecurityContactProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SecurityContactProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("alertNotifications").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alertNotifications` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alertNotifications").toString()));
      }
      // validate the required field `alertNotifications`
      AlertNotificationsEnum.validateJsonElement(jsonObj.get("alertNotifications"));
      if (!jsonObj.get("alertsToAdmins").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alertsToAdmins` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alertsToAdmins").toString()));
      }
      // validate the required field `alertsToAdmins`
      AlertsToAdminsEnum.validateJsonElement(jsonObj.get("alertsToAdmins"));
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SecurityContactProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SecurityContactProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SecurityContactProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SecurityContactProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<SecurityContactProperties>() {
           @Override
           public void write(JsonWriter out, SecurityContactProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SecurityContactProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SecurityContactProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SecurityContactProperties
   * @throws IOException if the JSON string is invalid with respect to SecurityContactProperties
   */
  public static SecurityContactProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SecurityContactProperties.class);
  }

  /**
   * Convert an instance of SecurityContactProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

