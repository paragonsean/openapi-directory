# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SecurityContactProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alert_notifications: str=None, alerts_to_admins: str=None, email: str=None, phone: str=None):
        """SecurityContactProperties - a model defined in OpenAPI

        :param alert_notifications: The alert_notifications of this SecurityContactProperties.
        :param alerts_to_admins: The alerts_to_admins of this SecurityContactProperties.
        :param email: The email of this SecurityContactProperties.
        :param phone: The phone of this SecurityContactProperties.
        """
        self.openapi_types = {
            'alert_notifications': str,
            'alerts_to_admins': str,
            'email': str,
            'phone': str
        }

        self.attribute_map = {
            'alert_notifications': 'alertNotifications',
            'alerts_to_admins': 'alertsToAdmins',
            'email': 'email',
            'phone': 'phone'
        }

        self._alert_notifications = alert_notifications
        self._alerts_to_admins = alerts_to_admins
        self._email = email
        self._phone = phone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SecurityContactProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SecurityContactProperties of this SecurityContactProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alert_notifications(self):
        """Gets the alert_notifications of this SecurityContactProperties.

        Whether to send security alerts notifications to the security contact

        :return: The alert_notifications of this SecurityContactProperties.
        :rtype: str
        """
        return self._alert_notifications

    @alert_notifications.setter
    def alert_notifications(self, alert_notifications):
        """Sets the alert_notifications of this SecurityContactProperties.

        Whether to send security alerts notifications to the security contact

        :param alert_notifications: The alert_notifications of this SecurityContactProperties.
        :type alert_notifications: str
        """
        allowed_values = ["On", "Off"]  # noqa: E501
        if alert_notifications not in allowed_values:
            raise ValueError(
                "Invalid value for `alert_notifications` ({0}), must be one of {1}"
                .format(alert_notifications, allowed_values)
            )

        self._alert_notifications = alert_notifications

    @property
    def alerts_to_admins(self):
        """Gets the alerts_to_admins of this SecurityContactProperties.

        Whether to send security alerts notifications to subscription admins

        :return: The alerts_to_admins of this SecurityContactProperties.
        :rtype: str
        """
        return self._alerts_to_admins

    @alerts_to_admins.setter
    def alerts_to_admins(self, alerts_to_admins):
        """Sets the alerts_to_admins of this SecurityContactProperties.

        Whether to send security alerts notifications to subscription admins

        :param alerts_to_admins: The alerts_to_admins of this SecurityContactProperties.
        :type alerts_to_admins: str
        """
        allowed_values = ["On", "Off"]  # noqa: E501
        if alerts_to_admins not in allowed_values:
            raise ValueError(
                "Invalid value for `alerts_to_admins` ({0}), must be one of {1}"
                .format(alerts_to_admins, allowed_values)
            )

        self._alerts_to_admins = alerts_to_admins

    @property
    def email(self):
        """Gets the email of this SecurityContactProperties.

        The email of this security contact

        :return: The email of this SecurityContactProperties.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SecurityContactProperties.

        The email of this security contact

        :param email: The email of this SecurityContactProperties.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def phone(self):
        """Gets the phone of this SecurityContactProperties.

        The phone number of this security contact

        :return: The phone of this SecurityContactProperties.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this SecurityContactProperties.

        The phone number of this security contact

        :param phone: The phone of this SecurityContactProperties.
        :type phone: str
        """

        self._phone = phone
