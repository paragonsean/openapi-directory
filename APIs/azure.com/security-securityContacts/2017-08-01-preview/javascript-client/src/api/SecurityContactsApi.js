/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2017-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SecurityContact from '../model/SecurityContact';
import SecurityContactList from '../model/SecurityContactList';
import SecurityContactsListDefaultResponse from '../model/SecurityContactsListDefaultResponse';

/**
* SecurityContacts service.
* @module api/SecurityContactsApi
* @version 2017-08-01-preview
*/
export default class SecurityContactsApi {

    /**
    * Constructs a new SecurityContactsApi. 
    * @alias module:api/SecurityContactsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the securityContactsCreate operation.
     * @callback module:api/SecurityContactsApi~securityContactsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecurityContact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Security contact configurations for the subscription
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} securityContactName Name of the security contact object
     * @param {module:model/SecurityContact} securityContact Security contact object
     * @param {module:api/SecurityContactsApi~securityContactsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecurityContact}
     */
    securityContactsCreate(apiVersion, subscriptionId, securityContactName, securityContact, callback) {
      let postBody = securityContact;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling securityContactsCreate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling securityContactsCreate");
      }
      // verify the required parameter 'securityContactName' is set
      if (securityContactName === undefined || securityContactName === null) {
        throw new Error("Missing the required parameter 'securityContactName' when calling securityContactsCreate");
      }
      // verify the required parameter 'securityContact' is set
      if (securityContact === undefined || securityContact === null) {
        throw new Error("Missing the required parameter 'securityContact' when calling securityContactsCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'securityContactName': securityContactName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SecurityContact;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Security/securityContacts/{securityContactName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securityContactsDelete operation.
     * @callback module:api/SecurityContactsApi~securityContactsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Security contact configurations for the subscription
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} securityContactName Name of the security contact object
     * @param {module:api/SecurityContactsApi~securityContactsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    securityContactsDelete(apiVersion, subscriptionId, securityContactName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling securityContactsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling securityContactsDelete");
      }
      // verify the required parameter 'securityContactName' is set
      if (securityContactName === undefined || securityContactName === null) {
        throw new Error("Missing the required parameter 'securityContactName' when calling securityContactsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'securityContactName': securityContactName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Security/securityContacts/{securityContactName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securityContactsGet operation.
     * @callback module:api/SecurityContactsApi~securityContactsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecurityContact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Security contact configurations for the subscription
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} securityContactName Name of the security contact object
     * @param {module:api/SecurityContactsApi~securityContactsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecurityContact}
     */
    securityContactsGet(apiVersion, subscriptionId, securityContactName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling securityContactsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling securityContactsGet");
      }
      // verify the required parameter 'securityContactName' is set
      if (securityContactName === undefined || securityContactName === null) {
        throw new Error("Missing the required parameter 'securityContactName' when calling securityContactsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'securityContactName': securityContactName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SecurityContact;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Security/securityContacts/{securityContactName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securityContactsList operation.
     * @callback module:api/SecurityContactsApi~securityContactsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecurityContactList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Security contact configurations for the subscription
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {module:api/SecurityContactsApi~securityContactsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecurityContactList}
     */
    securityContactsList(apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling securityContactsList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling securityContactsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SecurityContactList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Security/securityContacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securityContactsUpdate operation.
     * @callback module:api/SecurityContactsApi~securityContactsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecurityContact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Security contact configurations for the subscription
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} securityContactName Name of the security contact object
     * @param {module:model/SecurityContact} securityContact Security contact object
     * @param {module:api/SecurityContactsApi~securityContactsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecurityContact}
     */
    securityContactsUpdate(apiVersion, subscriptionId, securityContactName, securityContact, callback) {
      let postBody = securityContact;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling securityContactsUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling securityContactsUpdate");
      }
      // verify the required parameter 'securityContactName' is set
      if (securityContactName === undefined || securityContactName === null) {
        throw new Error("Missing the required parameter 'securityContactName' when calling securityContactsUpdate");
      }
      // verify the required parameter 'securityContact' is set
      if (securityContact === undefined || securityContact === null) {
        throw new Error("Missing the required parameter 'securityContact' when calling securityContactsUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'securityContactName': securityContactName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SecurityContact;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Security/securityContacts/{securityContactName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
