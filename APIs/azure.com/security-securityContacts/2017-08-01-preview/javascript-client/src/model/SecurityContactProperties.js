/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2017-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SecurityContactProperties model module.
 * @module model/SecurityContactProperties
 * @version 2017-08-01-preview
 */
class SecurityContactProperties {
    /**
     * Constructs a new <code>SecurityContactProperties</code>.
     * describes security contact properties
     * @alias module:model/SecurityContactProperties
     * @param alertNotifications {module:model/SecurityContactProperties.AlertNotificationsEnum} Whether to send security alerts notifications to the security contact
     * @param alertsToAdmins {module:model/SecurityContactProperties.AlertsToAdminsEnum} Whether to send security alerts notifications to subscription admins
     * @param email {String} The email of this security contact
     */
    constructor(alertNotifications, alertsToAdmins, email) { 
        
        SecurityContactProperties.initialize(this, alertNotifications, alertsToAdmins, email);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, alertNotifications, alertsToAdmins, email) { 
        obj['alertNotifications'] = alertNotifications;
        obj['alertsToAdmins'] = alertsToAdmins;
        obj['email'] = email;
    }

    /**
     * Constructs a <code>SecurityContactProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SecurityContactProperties} obj Optional instance to populate.
     * @return {module:model/SecurityContactProperties} The populated <code>SecurityContactProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SecurityContactProperties();

            if (data.hasOwnProperty('alertNotifications')) {
                obj['alertNotifications'] = ApiClient.convertToType(data['alertNotifications'], 'String');
            }
            if (data.hasOwnProperty('alertsToAdmins')) {
                obj['alertsToAdmins'] = ApiClient.convertToType(data['alertsToAdmins'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SecurityContactProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SecurityContactProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SecurityContactProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['alertNotifications'] && !(typeof data['alertNotifications'] === 'string' || data['alertNotifications'] instanceof String)) {
            throw new Error("Expected the field `alertNotifications` to be a primitive type in the JSON string but got " + data['alertNotifications']);
        }
        // ensure the json data is a string
        if (data['alertsToAdmins'] && !(typeof data['alertsToAdmins'] === 'string' || data['alertsToAdmins'] instanceof String)) {
            throw new Error("Expected the field `alertsToAdmins` to be a primitive type in the JSON string but got " + data['alertsToAdmins']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }

        return true;
    }


}

SecurityContactProperties.RequiredProperties = ["alertNotifications", "alertsToAdmins", "email"];

/**
 * Whether to send security alerts notifications to the security contact
 * @member {module:model/SecurityContactProperties.AlertNotificationsEnum} alertNotifications
 */
SecurityContactProperties.prototype['alertNotifications'] = undefined;

/**
 * Whether to send security alerts notifications to subscription admins
 * @member {module:model/SecurityContactProperties.AlertsToAdminsEnum} alertsToAdmins
 */
SecurityContactProperties.prototype['alertsToAdmins'] = undefined;

/**
 * The email of this security contact
 * @member {String} email
 */
SecurityContactProperties.prototype['email'] = undefined;

/**
 * The phone number of this security contact
 * @member {String} phone
 */
SecurityContactProperties.prototype['phone'] = undefined;





/**
 * Allowed values for the <code>alertNotifications</code> property.
 * @enum {String}
 * @readonly
 */
SecurityContactProperties['AlertNotificationsEnum'] = {

    /**
     * value: "On"
     * @const
     */
    "On": "On",

    /**
     * value: "Off"
     * @const
     */
    "Off": "Off"
};


/**
 * Allowed values for the <code>alertsToAdmins</code> property.
 * @enum {String}
 * @readonly
 */
SecurityContactProperties['AlertsToAdminsEnum'] = {

    /**
     * value: "On"
     * @const
     */
    "On": "On",

    /**
     * value: "Off"
     * @const
     */
    "Off": "Off"
};



export default SecurityContactProperties;

