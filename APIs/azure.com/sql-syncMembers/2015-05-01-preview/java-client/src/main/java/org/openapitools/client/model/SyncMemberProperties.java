/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a sync member.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:34:58.952688-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SyncMemberProperties {
  public static final String SERIALIZED_NAME_DATABASE_NAME = "databaseName";
  @SerializedName(SERIALIZED_NAME_DATABASE_NAME)
  private String databaseName;

  /**
   * Database type of the sync member.
   */
  @JsonAdapter(DatabaseTypeEnum.Adapter.class)
  public enum DatabaseTypeEnum {
    AZURE_SQL_DATABASE("AzureSqlDatabase"),
    
    SQL_SERVER_DATABASE("SqlServerDatabase");

    private String value;

    DatabaseTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DatabaseTypeEnum fromValue(String value) {
      for (DatabaseTypeEnum b : DatabaseTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DatabaseTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DatabaseTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DatabaseTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DatabaseTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DatabaseTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATABASE_TYPE = "databaseType";
  @SerializedName(SERIALIZED_NAME_DATABASE_TYPE)
  private DatabaseTypeEnum databaseType;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_SERVER_NAME = "serverName";
  @SerializedName(SERIALIZED_NAME_SERVER_NAME)
  private String serverName;

  public static final String SERIALIZED_NAME_SQL_SERVER_DATABASE_ID = "sqlServerDatabaseId";
  @SerializedName(SERIALIZED_NAME_SQL_SERVER_DATABASE_ID)
  private UUID sqlServerDatabaseId;

  public static final String SERIALIZED_NAME_SYNC_AGENT_ID = "syncAgentId";
  @SerializedName(SERIALIZED_NAME_SYNC_AGENT_ID)
  private String syncAgentId;

  /**
   * Sync direction of the sync member.
   */
  @JsonAdapter(SyncDirectionEnum.Adapter.class)
  public enum SyncDirectionEnum {
    BIDIRECTIONAL("Bidirectional"),
    
    ONE_WAY_MEMBER_TO_HUB("OneWayMemberToHub"),
    
    ONE_WAY_HUB_TO_MEMBER("OneWayHubToMember");

    private String value;

    SyncDirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SyncDirectionEnum fromValue(String value) {
      for (SyncDirectionEnum b : SyncDirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SyncDirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SyncDirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SyncDirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SyncDirectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SyncDirectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SYNC_DIRECTION = "syncDirection";
  @SerializedName(SERIALIZED_NAME_SYNC_DIRECTION)
  private SyncDirectionEnum syncDirection;

  /**
   * Sync state of the sync member.
   */
  @JsonAdapter(SyncStateEnum.Adapter.class)
  public enum SyncStateEnum {
    SYNC_IN_PROGRESS("SyncInProgress"),
    
    SYNC_SUCCEEDED("SyncSucceeded"),
    
    SYNC_FAILED("SyncFailed"),
    
    DISABLED_TOMBSTONE_CLEANUP("DisabledTombstoneCleanup"),
    
    DISABLED_BACKUP_RESTORE("DisabledBackupRestore"),
    
    SYNC_SUCCEEDED_WITH_WARNINGS("SyncSucceededWithWarnings"),
    
    SYNC_CANCELLING("SyncCancelling"),
    
    SYNC_CANCELLED("SyncCancelled"),
    
    UN_PROVISIONED("UnProvisioned"),
    
    PROVISIONING("Provisioning"),
    
    PROVISIONED("Provisioned"),
    
    PROVISION_FAILED("ProvisionFailed"),
    
    DE_PROVISIONING("DeProvisioning"),
    
    DE_PROVISIONED("DeProvisioned"),
    
    DE_PROVISION_FAILED("DeProvisionFailed"),
    
    REPROVISIONING("Reprovisioning"),
    
    REPROVISION_FAILED("ReprovisionFailed"),
    
    UN_REPROVISIONED("UnReprovisioned");

    private String value;

    SyncStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SyncStateEnum fromValue(String value) {
      for (SyncStateEnum b : SyncStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SyncStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SyncStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SyncStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SyncStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SyncStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SYNC_STATE = "syncState";
  @SerializedName(SERIALIZED_NAME_SYNC_STATE)
  private SyncStateEnum syncState;

  public static final String SERIALIZED_NAME_USER_NAME = "userName";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public SyncMemberProperties() {
  }

  public SyncMemberProperties(
     SyncStateEnum syncState
  ) {
    this();
    this.syncState = syncState;
  }

  public SyncMemberProperties databaseName(String databaseName) {
    this.databaseName = databaseName;
    return this;
  }

  /**
   * Database name of the member database in the sync member.
   * @return databaseName
   */
  @javax.annotation.Nullable
  public String getDatabaseName() {
    return databaseName;
  }

  public void setDatabaseName(String databaseName) {
    this.databaseName = databaseName;
  }


  public SyncMemberProperties databaseType(DatabaseTypeEnum databaseType) {
    this.databaseType = databaseType;
    return this;
  }

  /**
   * Database type of the sync member.
   * @return databaseType
   */
  @javax.annotation.Nullable
  public DatabaseTypeEnum getDatabaseType() {
    return databaseType;
  }

  public void setDatabaseType(DatabaseTypeEnum databaseType) {
    this.databaseType = databaseType;
  }


  public SyncMemberProperties password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Password of the member database in the sync member.
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public SyncMemberProperties serverName(String serverName) {
    this.serverName = serverName;
    return this;
  }

  /**
   * Server name of the member database in the sync member
   * @return serverName
   */
  @javax.annotation.Nullable
  public String getServerName() {
    return serverName;
  }

  public void setServerName(String serverName) {
    this.serverName = serverName;
  }


  public SyncMemberProperties sqlServerDatabaseId(UUID sqlServerDatabaseId) {
    this.sqlServerDatabaseId = sqlServerDatabaseId;
    return this;
  }

  /**
   * SQL Server database id of the sync member.
   * @return sqlServerDatabaseId
   */
  @javax.annotation.Nullable
  public UUID getSqlServerDatabaseId() {
    return sqlServerDatabaseId;
  }

  public void setSqlServerDatabaseId(UUID sqlServerDatabaseId) {
    this.sqlServerDatabaseId = sqlServerDatabaseId;
  }


  public SyncMemberProperties syncAgentId(String syncAgentId) {
    this.syncAgentId = syncAgentId;
    return this;
  }

  /**
   * ARM resource id of the sync agent in the sync member.
   * @return syncAgentId
   */
  @javax.annotation.Nullable
  public String getSyncAgentId() {
    return syncAgentId;
  }

  public void setSyncAgentId(String syncAgentId) {
    this.syncAgentId = syncAgentId;
  }


  public SyncMemberProperties syncDirection(SyncDirectionEnum syncDirection) {
    this.syncDirection = syncDirection;
    return this;
  }

  /**
   * Sync direction of the sync member.
   * @return syncDirection
   */
  @javax.annotation.Nullable
  public SyncDirectionEnum getSyncDirection() {
    return syncDirection;
  }

  public void setSyncDirection(SyncDirectionEnum syncDirection) {
    this.syncDirection = syncDirection;
  }


  /**
   * Sync state of the sync member.
   * @return syncState
   */
  @javax.annotation.Nullable
  public SyncStateEnum getSyncState() {
    return syncState;
  }



  public SyncMemberProperties userName(String userName) {
    this.userName = userName;
    return this;
  }

  /**
   * User name of the member database in the sync member.
   * @return userName
   */
  @javax.annotation.Nullable
  public String getUserName() {
    return userName;
  }

  public void setUserName(String userName) {
    this.userName = userName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SyncMemberProperties syncMemberProperties = (SyncMemberProperties) o;
    return Objects.equals(this.databaseName, syncMemberProperties.databaseName) &&
        Objects.equals(this.databaseType, syncMemberProperties.databaseType) &&
        Objects.equals(this.password, syncMemberProperties.password) &&
        Objects.equals(this.serverName, syncMemberProperties.serverName) &&
        Objects.equals(this.sqlServerDatabaseId, syncMemberProperties.sqlServerDatabaseId) &&
        Objects.equals(this.syncAgentId, syncMemberProperties.syncAgentId) &&
        Objects.equals(this.syncDirection, syncMemberProperties.syncDirection) &&
        Objects.equals(this.syncState, syncMemberProperties.syncState) &&
        Objects.equals(this.userName, syncMemberProperties.userName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(databaseName, databaseType, password, serverName, sqlServerDatabaseId, syncAgentId, syncDirection, syncState, userName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SyncMemberProperties {\n");
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("    databaseType: ").append(toIndentedString(databaseType)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    serverName: ").append(toIndentedString(serverName)).append("\n");
    sb.append("    sqlServerDatabaseId: ").append(toIndentedString(sqlServerDatabaseId)).append("\n");
    sb.append("    syncAgentId: ").append(toIndentedString(syncAgentId)).append("\n");
    sb.append("    syncDirection: ").append(toIndentedString(syncDirection)).append("\n");
    sb.append("    syncState: ").append(toIndentedString(syncState)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("databaseName");
    openapiFields.add("databaseType");
    openapiFields.add("password");
    openapiFields.add("serverName");
    openapiFields.add("sqlServerDatabaseId");
    openapiFields.add("syncAgentId");
    openapiFields.add("syncDirection");
    openapiFields.add("syncState");
    openapiFields.add("userName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SyncMemberProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SyncMemberProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SyncMemberProperties is not found in the empty JSON string", SyncMemberProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SyncMemberProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SyncMemberProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("databaseName") != null && !jsonObj.get("databaseName").isJsonNull()) && !jsonObj.get("databaseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `databaseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("databaseName").toString()));
      }
      if ((jsonObj.get("databaseType") != null && !jsonObj.get("databaseType").isJsonNull()) && !jsonObj.get("databaseType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `databaseType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("databaseType").toString()));
      }
      // validate the optional field `databaseType`
      if (jsonObj.get("databaseType") != null && !jsonObj.get("databaseType").isJsonNull()) {
        DatabaseTypeEnum.validateJsonElement(jsonObj.get("databaseType"));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("serverName") != null && !jsonObj.get("serverName").isJsonNull()) && !jsonObj.get("serverName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverName").toString()));
      }
      if ((jsonObj.get("sqlServerDatabaseId") != null && !jsonObj.get("sqlServerDatabaseId").isJsonNull()) && !jsonObj.get("sqlServerDatabaseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sqlServerDatabaseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sqlServerDatabaseId").toString()));
      }
      if ((jsonObj.get("syncAgentId") != null && !jsonObj.get("syncAgentId").isJsonNull()) && !jsonObj.get("syncAgentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `syncAgentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("syncAgentId").toString()));
      }
      if ((jsonObj.get("syncDirection") != null && !jsonObj.get("syncDirection").isJsonNull()) && !jsonObj.get("syncDirection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `syncDirection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("syncDirection").toString()));
      }
      // validate the optional field `syncDirection`
      if (jsonObj.get("syncDirection") != null && !jsonObj.get("syncDirection").isJsonNull()) {
        SyncDirectionEnum.validateJsonElement(jsonObj.get("syncDirection"));
      }
      if ((jsonObj.get("syncState") != null && !jsonObj.get("syncState").isJsonNull()) && !jsonObj.get("syncState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `syncState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("syncState").toString()));
      }
      // validate the optional field `syncState`
      if (jsonObj.get("syncState") != null && !jsonObj.get("syncState").isJsonNull()) {
        SyncStateEnum.validateJsonElement(jsonObj.get("syncState"));
      }
      if ((jsonObj.get("userName") != null && !jsonObj.get("userName").isJsonNull()) && !jsonObj.get("userName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SyncMemberProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SyncMemberProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SyncMemberProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SyncMemberProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<SyncMemberProperties>() {
           @Override
           public void write(JsonWriter out, SyncMemberProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SyncMemberProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SyncMemberProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SyncMemberProperties
   * @throws IOException if the JSON string is invalid with respect to SyncMemberProperties
   */
  public static SyncMemberProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SyncMemberProperties.class);
  }

  /**
   * Convert an instance of SyncMemberProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

