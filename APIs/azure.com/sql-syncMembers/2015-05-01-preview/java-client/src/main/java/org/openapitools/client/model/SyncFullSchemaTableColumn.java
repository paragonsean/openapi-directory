/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of the column in the table of database full schema.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:34:58.952688-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SyncFullSchemaTableColumn {
  public static final String SERIALIZED_NAME_DATA_SIZE = "dataSize";
  @SerializedName(SERIALIZED_NAME_DATA_SIZE)
  private String dataSize;

  public static final String SERIALIZED_NAME_DATA_TYPE = "dataType";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE)
  private String dataType;

  public static final String SERIALIZED_NAME_ERROR_ID = "errorId";
  @SerializedName(SERIALIZED_NAME_ERROR_ID)
  private String errorId;

  public static final String SERIALIZED_NAME_HAS_ERROR = "hasError";
  @SerializedName(SERIALIZED_NAME_HAS_ERROR)
  private Boolean hasError;

  public static final String SERIALIZED_NAME_IS_PRIMARY_KEY = "isPrimaryKey";
  @SerializedName(SERIALIZED_NAME_IS_PRIMARY_KEY)
  private Boolean isPrimaryKey;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_QUOTED_NAME = "quotedName";
  @SerializedName(SERIALIZED_NAME_QUOTED_NAME)
  private String quotedName;

  public SyncFullSchemaTableColumn() {
  }

  public SyncFullSchemaTableColumn(
     String dataSize, 
     String dataType, 
     String errorId, 
     Boolean hasError, 
     Boolean isPrimaryKey, 
     String name, 
     String quotedName
  ) {
    this();
    this.dataSize = dataSize;
    this.dataType = dataType;
    this.errorId = errorId;
    this.hasError = hasError;
    this.isPrimaryKey = isPrimaryKey;
    this.name = name;
    this.quotedName = quotedName;
  }

  /**
   * Data size of the column.
   * @return dataSize
   */
  @javax.annotation.Nullable
  public String getDataSize() {
    return dataSize;
  }



  /**
   * Data type of the column.
   * @return dataType
   */
  @javax.annotation.Nullable
  public String getDataType() {
    return dataType;
  }



  /**
   * Error id of the column.
   * @return errorId
   */
  @javax.annotation.Nullable
  public String getErrorId() {
    return errorId;
  }



  /**
   * If there is error in the table.
   * @return hasError
   */
  @javax.annotation.Nullable
  public Boolean getHasError() {
    return hasError;
  }



  /**
   * If it is the primary key of the table.
   * @return isPrimaryKey
   */
  @javax.annotation.Nullable
  public Boolean getIsPrimaryKey() {
    return isPrimaryKey;
  }



  /**
   * Name of the column.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Quoted name of the column.
   * @return quotedName
   */
  @javax.annotation.Nullable
  public String getQuotedName() {
    return quotedName;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SyncFullSchemaTableColumn syncFullSchemaTableColumn = (SyncFullSchemaTableColumn) o;
    return Objects.equals(this.dataSize, syncFullSchemaTableColumn.dataSize) &&
        Objects.equals(this.dataType, syncFullSchemaTableColumn.dataType) &&
        Objects.equals(this.errorId, syncFullSchemaTableColumn.errorId) &&
        Objects.equals(this.hasError, syncFullSchemaTableColumn.hasError) &&
        Objects.equals(this.isPrimaryKey, syncFullSchemaTableColumn.isPrimaryKey) &&
        Objects.equals(this.name, syncFullSchemaTableColumn.name) &&
        Objects.equals(this.quotedName, syncFullSchemaTableColumn.quotedName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSize, dataType, errorId, hasError, isPrimaryKey, name, quotedName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SyncFullSchemaTableColumn {\n");
    sb.append("    dataSize: ").append(toIndentedString(dataSize)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    errorId: ").append(toIndentedString(errorId)).append("\n");
    sb.append("    hasError: ").append(toIndentedString(hasError)).append("\n");
    sb.append("    isPrimaryKey: ").append(toIndentedString(isPrimaryKey)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    quotedName: ").append(toIndentedString(quotedName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataSize");
    openapiFields.add("dataType");
    openapiFields.add("errorId");
    openapiFields.add("hasError");
    openapiFields.add("isPrimaryKey");
    openapiFields.add("name");
    openapiFields.add("quotedName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SyncFullSchemaTableColumn
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SyncFullSchemaTableColumn.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SyncFullSchemaTableColumn is not found in the empty JSON string", SyncFullSchemaTableColumn.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SyncFullSchemaTableColumn.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SyncFullSchemaTableColumn` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataSize") != null && !jsonObj.get("dataSize").isJsonNull()) && !jsonObj.get("dataSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSize").toString()));
      }
      if ((jsonObj.get("dataType") != null && !jsonObj.get("dataType").isJsonNull()) && !jsonObj.get("dataType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataType").toString()));
      }
      if ((jsonObj.get("errorId") != null && !jsonObj.get("errorId").isJsonNull()) && !jsonObj.get("errorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("quotedName") != null && !jsonObj.get("quotedName").isJsonNull()) && !jsonObj.get("quotedName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quotedName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quotedName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SyncFullSchemaTableColumn.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SyncFullSchemaTableColumn' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SyncFullSchemaTableColumn> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SyncFullSchemaTableColumn.class));

       return (TypeAdapter<T>) new TypeAdapter<SyncFullSchemaTableColumn>() {
           @Override
           public void write(JsonWriter out, SyncFullSchemaTableColumn value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SyncFullSchemaTableColumn read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SyncFullSchemaTableColumn given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SyncFullSchemaTableColumn
   * @throws IOException if the JSON string is invalid with respect to SyncFullSchemaTableColumn
   */
  public static SyncFullSchemaTableColumn fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SyncFullSchemaTableColumn.class);
  }

  /**
   * Convert an instance of SyncFullSchemaTableColumn to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

