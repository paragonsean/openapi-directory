/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISyncFullSchemaTable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISyncFullSchemaTable::OAISyncFullSchemaTable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISyncFullSchemaTable::OAISyncFullSchemaTable() {
    this->initializeModel();
}

OAISyncFullSchemaTable::~OAISyncFullSchemaTable() {}

void OAISyncFullSchemaTable::initializeModel() {

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_error_id_isSet = false;
    m_error_id_isValid = false;

    m_has_error_isSet = false;
    m_has_error_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_quoted_name_isSet = false;
    m_quoted_name_isValid = false;
}

void OAISyncFullSchemaTable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISyncFullSchemaTable::fromJsonObject(QJsonObject json) {

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("columns")]);
    m_columns_isSet = !json[QString("columns")].isNull() && m_columns_isValid;

    m_error_id_isValid = ::OpenAPI::fromJsonValue(m_error_id, json[QString("errorId")]);
    m_error_id_isSet = !json[QString("errorId")].isNull() && m_error_id_isValid;

    m_has_error_isValid = ::OpenAPI::fromJsonValue(m_has_error, json[QString("hasError")]);
    m_has_error_isSet = !json[QString("hasError")].isNull() && m_has_error_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_quoted_name_isValid = ::OpenAPI::fromJsonValue(m_quoted_name, json[QString("quotedName")]);
    m_quoted_name_isSet = !json[QString("quotedName")].isNull() && m_quoted_name_isValid;
}

QString OAISyncFullSchemaTable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISyncFullSchemaTable::asJsonObject() const {
    QJsonObject obj;
    if (m_columns.size() > 0) {
        obj.insert(QString("columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    if (m_error_id_isSet) {
        obj.insert(QString("errorId"), ::OpenAPI::toJsonValue(m_error_id));
    }
    if (m_has_error_isSet) {
        obj.insert(QString("hasError"), ::OpenAPI::toJsonValue(m_has_error));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_quoted_name_isSet) {
        obj.insert(QString("quotedName"), ::OpenAPI::toJsonValue(m_quoted_name));
    }
    return obj;
}

QList<OAISyncFullSchemaTableColumn> OAISyncFullSchemaTable::getColumns() const {
    return m_columns;
}
void OAISyncFullSchemaTable::setColumns(const QList<OAISyncFullSchemaTableColumn> &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAISyncFullSchemaTable::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAISyncFullSchemaTable::is_columns_Valid() const{
    return m_columns_isValid;
}

QString OAISyncFullSchemaTable::getErrorId() const {
    return m_error_id;
}
void OAISyncFullSchemaTable::setErrorId(const QString &error_id) {
    m_error_id = error_id;
    m_error_id_isSet = true;
}

bool OAISyncFullSchemaTable::is_error_id_Set() const{
    return m_error_id_isSet;
}

bool OAISyncFullSchemaTable::is_error_id_Valid() const{
    return m_error_id_isValid;
}

bool OAISyncFullSchemaTable::isHasError() const {
    return m_has_error;
}
void OAISyncFullSchemaTable::setHasError(const bool &has_error) {
    m_has_error = has_error;
    m_has_error_isSet = true;
}

bool OAISyncFullSchemaTable::is_has_error_Set() const{
    return m_has_error_isSet;
}

bool OAISyncFullSchemaTable::is_has_error_Valid() const{
    return m_has_error_isValid;
}

QString OAISyncFullSchemaTable::getName() const {
    return m_name;
}
void OAISyncFullSchemaTable::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISyncFullSchemaTable::is_name_Set() const{
    return m_name_isSet;
}

bool OAISyncFullSchemaTable::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISyncFullSchemaTable::getQuotedName() const {
    return m_quoted_name;
}
void OAISyncFullSchemaTable::setQuotedName(const QString &quoted_name) {
    m_quoted_name = quoted_name;
    m_quoted_name_isSet = true;
}

bool OAISyncFullSchemaTable::is_quoted_name_Set() const{
    return m_quoted_name_isSet;
}

bool OAISyncFullSchemaTable::is_quoted_name_Valid() const{
    return m_quoted_name_isValid;
}

bool OAISyncFullSchemaTable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quoted_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISyncFullSchemaTable::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
