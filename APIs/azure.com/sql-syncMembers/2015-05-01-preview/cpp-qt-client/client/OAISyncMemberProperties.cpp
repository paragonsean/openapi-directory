/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISyncMemberProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISyncMemberProperties::OAISyncMemberProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISyncMemberProperties::OAISyncMemberProperties() {
    this->initializeModel();
}

OAISyncMemberProperties::~OAISyncMemberProperties() {}

void OAISyncMemberProperties::initializeModel() {

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_database_type_isSet = false;
    m_database_type_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_server_name_isSet = false;
    m_server_name_isValid = false;

    m_sql_server_database_id_isSet = false;
    m_sql_server_database_id_isValid = false;

    m_sync_agent_id_isSet = false;
    m_sync_agent_id_isValid = false;

    m_sync_direction_isSet = false;
    m_sync_direction_isValid = false;

    m_sync_state_isSet = false;
    m_sync_state_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;
}

void OAISyncMemberProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISyncMemberProperties::fromJsonObject(QJsonObject json) {

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("databaseName")]);
    m_database_name_isSet = !json[QString("databaseName")].isNull() && m_database_name_isValid;

    m_database_type_isValid = ::OpenAPI::fromJsonValue(m_database_type, json[QString("databaseType")]);
    m_database_type_isSet = !json[QString("databaseType")].isNull() && m_database_type_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_server_name_isValid = ::OpenAPI::fromJsonValue(m_server_name, json[QString("serverName")]);
    m_server_name_isSet = !json[QString("serverName")].isNull() && m_server_name_isValid;

    m_sql_server_database_id_isValid = ::OpenAPI::fromJsonValue(m_sql_server_database_id, json[QString("sqlServerDatabaseId")]);
    m_sql_server_database_id_isSet = !json[QString("sqlServerDatabaseId")].isNull() && m_sql_server_database_id_isValid;

    m_sync_agent_id_isValid = ::OpenAPI::fromJsonValue(m_sync_agent_id, json[QString("syncAgentId")]);
    m_sync_agent_id_isSet = !json[QString("syncAgentId")].isNull() && m_sync_agent_id_isValid;

    m_sync_direction_isValid = ::OpenAPI::fromJsonValue(m_sync_direction, json[QString("syncDirection")]);
    m_sync_direction_isSet = !json[QString("syncDirection")].isNull() && m_sync_direction_isValid;

    m_sync_state_isValid = ::OpenAPI::fromJsonValue(m_sync_state, json[QString("syncState")]);
    m_sync_state_isSet = !json[QString("syncState")].isNull() && m_sync_state_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("userName")]);
    m_user_name_isSet = !json[QString("userName")].isNull() && m_user_name_isValid;
}

QString OAISyncMemberProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISyncMemberProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_database_name_isSet) {
        obj.insert(QString("databaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_database_type_isSet) {
        obj.insert(QString("databaseType"), ::OpenAPI::toJsonValue(m_database_type));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_server_name_isSet) {
        obj.insert(QString("serverName"), ::OpenAPI::toJsonValue(m_server_name));
    }
    if (m_sql_server_database_id_isSet) {
        obj.insert(QString("sqlServerDatabaseId"), ::OpenAPI::toJsonValue(m_sql_server_database_id));
    }
    if (m_sync_agent_id_isSet) {
        obj.insert(QString("syncAgentId"), ::OpenAPI::toJsonValue(m_sync_agent_id));
    }
    if (m_sync_direction_isSet) {
        obj.insert(QString("syncDirection"), ::OpenAPI::toJsonValue(m_sync_direction));
    }
    if (m_sync_state_isSet) {
        obj.insert(QString("syncState"), ::OpenAPI::toJsonValue(m_sync_state));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("userName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    return obj;
}

QString OAISyncMemberProperties::getDatabaseName() const {
    return m_database_name;
}
void OAISyncMemberProperties::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAISyncMemberProperties::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAISyncMemberProperties::is_database_name_Valid() const{
    return m_database_name_isValid;
}

QString OAISyncMemberProperties::getDatabaseType() const {
    return m_database_type;
}
void OAISyncMemberProperties::setDatabaseType(const QString &database_type) {
    m_database_type = database_type;
    m_database_type_isSet = true;
}

bool OAISyncMemberProperties::is_database_type_Set() const{
    return m_database_type_isSet;
}

bool OAISyncMemberProperties::is_database_type_Valid() const{
    return m_database_type_isValid;
}

QString OAISyncMemberProperties::getPassword() const {
    return m_password;
}
void OAISyncMemberProperties::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAISyncMemberProperties::is_password_Set() const{
    return m_password_isSet;
}

bool OAISyncMemberProperties::is_password_Valid() const{
    return m_password_isValid;
}

QString OAISyncMemberProperties::getServerName() const {
    return m_server_name;
}
void OAISyncMemberProperties::setServerName(const QString &server_name) {
    m_server_name = server_name;
    m_server_name_isSet = true;
}

bool OAISyncMemberProperties::is_server_name_Set() const{
    return m_server_name_isSet;
}

bool OAISyncMemberProperties::is_server_name_Valid() const{
    return m_server_name_isValid;
}

QString OAISyncMemberProperties::getSqlServerDatabaseId() const {
    return m_sql_server_database_id;
}
void OAISyncMemberProperties::setSqlServerDatabaseId(const QString &sql_server_database_id) {
    m_sql_server_database_id = sql_server_database_id;
    m_sql_server_database_id_isSet = true;
}

bool OAISyncMemberProperties::is_sql_server_database_id_Set() const{
    return m_sql_server_database_id_isSet;
}

bool OAISyncMemberProperties::is_sql_server_database_id_Valid() const{
    return m_sql_server_database_id_isValid;
}

QString OAISyncMemberProperties::getSyncAgentId() const {
    return m_sync_agent_id;
}
void OAISyncMemberProperties::setSyncAgentId(const QString &sync_agent_id) {
    m_sync_agent_id = sync_agent_id;
    m_sync_agent_id_isSet = true;
}

bool OAISyncMemberProperties::is_sync_agent_id_Set() const{
    return m_sync_agent_id_isSet;
}

bool OAISyncMemberProperties::is_sync_agent_id_Valid() const{
    return m_sync_agent_id_isValid;
}

QString OAISyncMemberProperties::getSyncDirection() const {
    return m_sync_direction;
}
void OAISyncMemberProperties::setSyncDirection(const QString &sync_direction) {
    m_sync_direction = sync_direction;
    m_sync_direction_isSet = true;
}

bool OAISyncMemberProperties::is_sync_direction_Set() const{
    return m_sync_direction_isSet;
}

bool OAISyncMemberProperties::is_sync_direction_Valid() const{
    return m_sync_direction_isValid;
}

QString OAISyncMemberProperties::getSyncState() const {
    return m_sync_state;
}
void OAISyncMemberProperties::setSyncState(const QString &sync_state) {
    m_sync_state = sync_state;
    m_sync_state_isSet = true;
}

bool OAISyncMemberProperties::is_sync_state_Set() const{
    return m_sync_state_isSet;
}

bool OAISyncMemberProperties::is_sync_state_Valid() const{
    return m_sync_state_isValid;
}

QString OAISyncMemberProperties::getUserName() const {
    return m_user_name;
}
void OAISyncMemberProperties::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAISyncMemberProperties::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAISyncMemberProperties::is_user_name_Valid() const{
    return m_user_name_isValid;
}

bool OAISyncMemberProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_server_database_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_agent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISyncMemberProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
