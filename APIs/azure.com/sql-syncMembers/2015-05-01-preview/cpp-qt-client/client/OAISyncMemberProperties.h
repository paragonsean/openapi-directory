/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISyncMemberProperties.h
 *
 * Properties of a sync member.
 */

#ifndef OAISyncMemberProperties_H
#define OAISyncMemberProperties_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISyncMemberProperties : public OAIObject {
public:
    OAISyncMemberProperties();
    OAISyncMemberProperties(QString json);
    ~OAISyncMemberProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDatabaseName() const;
    void setDatabaseName(const QString &database_name);
    bool is_database_name_Set() const;
    bool is_database_name_Valid() const;

    QString getDatabaseType() const;
    void setDatabaseType(const QString &database_type);
    bool is_database_type_Set() const;
    bool is_database_type_Valid() const;

    QString getPassword() const;
    void setPassword(const QString &password);
    bool is_password_Set() const;
    bool is_password_Valid() const;

    QString getServerName() const;
    void setServerName(const QString &server_name);
    bool is_server_name_Set() const;
    bool is_server_name_Valid() const;

    QString getSqlServerDatabaseId() const;
    void setSqlServerDatabaseId(const QString &sql_server_database_id);
    bool is_sql_server_database_id_Set() const;
    bool is_sql_server_database_id_Valid() const;

    QString getSyncAgentId() const;
    void setSyncAgentId(const QString &sync_agent_id);
    bool is_sync_agent_id_Set() const;
    bool is_sync_agent_id_Valid() const;

    QString getSyncDirection() const;
    void setSyncDirection(const QString &sync_direction);
    bool is_sync_direction_Set() const;
    bool is_sync_direction_Valid() const;

    QString getSyncState() const;
    void setSyncState(const QString &sync_state);
    bool is_sync_state_Set() const;
    bool is_sync_state_Valid() const;

    QString getUserName() const;
    void setUserName(const QString &user_name);
    bool is_user_name_Set() const;
    bool is_user_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_database_name;
    bool m_database_name_isSet;
    bool m_database_name_isValid;

    QString m_database_type;
    bool m_database_type_isSet;
    bool m_database_type_isValid;

    QString m_password;
    bool m_password_isSet;
    bool m_password_isValid;

    QString m_server_name;
    bool m_server_name_isSet;
    bool m_server_name_isValid;

    QString m_sql_server_database_id;
    bool m_sql_server_database_id_isSet;
    bool m_sql_server_database_id_isValid;

    QString m_sync_agent_id;
    bool m_sync_agent_id_isSet;
    bool m_sync_agent_id_isValid;

    QString m_sync_direction;
    bool m_sync_direction_isSet;
    bool m_sync_direction_isValid;

    QString m_sync_state;
    bool m_sync_state_isSet;
    bool m_sync_state_isValid;

    QString m_user_name;
    bool m_user_name_isSet;
    bool m_user_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISyncMemberProperties)

#endif // OAISyncMemberProperties_H
