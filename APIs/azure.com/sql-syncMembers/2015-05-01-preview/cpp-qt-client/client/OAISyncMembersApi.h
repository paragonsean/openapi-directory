/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISyncMembersApi_H
#define OAI_OAISyncMembersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAISyncFullSchemaPropertiesListResult.h"
#include "OAISyncMember.h"
#include "OAISyncMemberListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISyncMembersApi : public QObject {
    Q_OBJECT

public:
    OAISyncMembersApi(const int timeOut = 0);
    ~OAISyncMembersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  sync_group_name QString [required]
    * @param[in]  sync_member_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAISyncMember [required]
    */
    virtual void syncMembersCreateOrUpdate(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &sync_group_name, const QString &sync_member_name, const QString &subscription_id, const QString &api_version, const OAISyncMember &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  sync_group_name QString [required]
    * @param[in]  sync_member_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void syncMembersDelete(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &sync_group_name, const QString &sync_member_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  sync_group_name QString [required]
    * @param[in]  sync_member_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void syncMembersGet(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &sync_group_name, const QString &sync_member_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  sync_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void syncMembersListBySyncGroup(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &sync_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  sync_group_name QString [required]
    * @param[in]  sync_member_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void syncMembersListMemberSchemas(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &sync_group_name, const QString &sync_member_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  sync_group_name QString [required]
    * @param[in]  sync_member_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void syncMembersRefreshMemberSchema(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &sync_group_name, const QString &sync_member_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  sync_group_name QString [required]
    * @param[in]  sync_member_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAISyncMember [required]
    */
    virtual void syncMembersUpdate(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &sync_group_name, const QString &sync_member_name, const QString &subscription_id, const QString &api_version, const OAISyncMember &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void syncMembersCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void syncMembersDeleteCallback(OAIHttpRequestWorker *worker);
    void syncMembersGetCallback(OAIHttpRequestWorker *worker);
    void syncMembersListBySyncGroupCallback(OAIHttpRequestWorker *worker);
    void syncMembersListMemberSchemasCallback(OAIHttpRequestWorker *worker);
    void syncMembersRefreshMemberSchemaCallback(OAIHttpRequestWorker *worker);
    void syncMembersUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void syncMembersCreateOrUpdateSignal(OAISyncMember summary);
    void syncMembersDeleteSignal();
    void syncMembersGetSignal(OAISyncMember summary);
    void syncMembersListBySyncGroupSignal(OAISyncMemberListResult summary);
    void syncMembersListMemberSchemasSignal(OAISyncFullSchemaPropertiesListResult summary);
    void syncMembersRefreshMemberSchemaSignal();
    void syncMembersUpdateSignal(OAISyncMember summary);


    void syncMembersCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAISyncMember summary);
    void syncMembersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void syncMembersGetSignalFull(OAIHttpRequestWorker *worker, OAISyncMember summary);
    void syncMembersListBySyncGroupSignalFull(OAIHttpRequestWorker *worker, OAISyncMemberListResult summary);
    void syncMembersListMemberSchemasSignalFull(OAIHttpRequestWorker *worker, OAISyncFullSchemaPropertiesListResult summary);
    void syncMembersRefreshMemberSchemaSignalFull(OAIHttpRequestWorker *worker);
    void syncMembersUpdateSignalFull(OAIHttpRequestWorker *worker, OAISyncMember summary);

    Q_DECL_DEPRECATED_X("Use syncMembersCreateOrUpdateSignalError() instead")
    void syncMembersCreateOrUpdateSignalE(OAISyncMember summary, QNetworkReply::NetworkError error_type, QString error_str);
    void syncMembersCreateOrUpdateSignalError(OAISyncMember summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncMembersDeleteSignalError() instead")
    void syncMembersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void syncMembersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncMembersGetSignalError() instead")
    void syncMembersGetSignalE(OAISyncMember summary, QNetworkReply::NetworkError error_type, QString error_str);
    void syncMembersGetSignalError(OAISyncMember summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncMembersListBySyncGroupSignalError() instead")
    void syncMembersListBySyncGroupSignalE(OAISyncMemberListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void syncMembersListBySyncGroupSignalError(OAISyncMemberListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncMembersListMemberSchemasSignalError() instead")
    void syncMembersListMemberSchemasSignalE(OAISyncFullSchemaPropertiesListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void syncMembersListMemberSchemasSignalError(OAISyncFullSchemaPropertiesListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncMembersRefreshMemberSchemaSignalError() instead")
    void syncMembersRefreshMemberSchemaSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void syncMembersRefreshMemberSchemaSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncMembersUpdateSignalError() instead")
    void syncMembersUpdateSignalE(OAISyncMember summary, QNetworkReply::NetworkError error_type, QString error_str);
    void syncMembersUpdateSignalError(OAISyncMember summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use syncMembersCreateOrUpdateSignalErrorFull() instead")
    void syncMembersCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncMembersCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncMembersDeleteSignalErrorFull() instead")
    void syncMembersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncMembersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncMembersGetSignalErrorFull() instead")
    void syncMembersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncMembersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncMembersListBySyncGroupSignalErrorFull() instead")
    void syncMembersListBySyncGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncMembersListBySyncGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncMembersListMemberSchemasSignalErrorFull() instead")
    void syncMembersListMemberSchemasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncMembersListMemberSchemasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncMembersRefreshMemberSchemaSignalErrorFull() instead")
    void syncMembersRefreshMemberSchemaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncMembersRefreshMemberSchemaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncMembersUpdateSignalErrorFull() instead")
    void syncMembersUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncMembersUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
