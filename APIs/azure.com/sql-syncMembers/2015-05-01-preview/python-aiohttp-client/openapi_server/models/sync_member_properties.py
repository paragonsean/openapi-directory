# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SyncMemberProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, database_name: str=None, database_type: str=None, password: str=None, server_name: str=None, sql_server_database_id: str=None, sync_agent_id: str=None, sync_direction: str=None, sync_state: str=None, user_name: str=None):
        """SyncMemberProperties - a model defined in OpenAPI

        :param database_name: The database_name of this SyncMemberProperties.
        :param database_type: The database_type of this SyncMemberProperties.
        :param password: The password of this SyncMemberProperties.
        :param server_name: The server_name of this SyncMemberProperties.
        :param sql_server_database_id: The sql_server_database_id of this SyncMemberProperties.
        :param sync_agent_id: The sync_agent_id of this SyncMemberProperties.
        :param sync_direction: The sync_direction of this SyncMemberProperties.
        :param sync_state: The sync_state of this SyncMemberProperties.
        :param user_name: The user_name of this SyncMemberProperties.
        """
        self.openapi_types = {
            'database_name': str,
            'database_type': str,
            'password': str,
            'server_name': str,
            'sql_server_database_id': str,
            'sync_agent_id': str,
            'sync_direction': str,
            'sync_state': str,
            'user_name': str
        }

        self.attribute_map = {
            'database_name': 'databaseName',
            'database_type': 'databaseType',
            'password': 'password',
            'server_name': 'serverName',
            'sql_server_database_id': 'sqlServerDatabaseId',
            'sync_agent_id': 'syncAgentId',
            'sync_direction': 'syncDirection',
            'sync_state': 'syncState',
            'user_name': 'userName'
        }

        self._database_name = database_name
        self._database_type = database_type
        self._password = password
        self._server_name = server_name
        self._sql_server_database_id = sql_server_database_id
        self._sync_agent_id = sync_agent_id
        self._sync_direction = sync_direction
        self._sync_state = sync_state
        self._user_name = user_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SyncMemberProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SyncMemberProperties of this SyncMemberProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def database_name(self):
        """Gets the database_name of this SyncMemberProperties.

        Database name of the member database in the sync member.

        :return: The database_name of this SyncMemberProperties.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this SyncMemberProperties.

        Database name of the member database in the sync member.

        :param database_name: The database_name of this SyncMemberProperties.
        :type database_name: str
        """

        self._database_name = database_name

    @property
    def database_type(self):
        """Gets the database_type of this SyncMemberProperties.

        Database type of the sync member.

        :return: The database_type of this SyncMemberProperties.
        :rtype: str
        """
        return self._database_type

    @database_type.setter
    def database_type(self, database_type):
        """Sets the database_type of this SyncMemberProperties.

        Database type of the sync member.

        :param database_type: The database_type of this SyncMemberProperties.
        :type database_type: str
        """
        allowed_values = ["AzureSqlDatabase", "SqlServerDatabase"]  # noqa: E501
        if database_type not in allowed_values:
            raise ValueError(
                "Invalid value for `database_type` ({0}), must be one of {1}"
                .format(database_type, allowed_values)
            )

        self._database_type = database_type

    @property
    def password(self):
        """Gets the password of this SyncMemberProperties.

        Password of the member database in the sync member.

        :return: The password of this SyncMemberProperties.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this SyncMemberProperties.

        Password of the member database in the sync member.

        :param password: The password of this SyncMemberProperties.
        :type password: str
        """

        self._password = password

    @property
    def server_name(self):
        """Gets the server_name of this SyncMemberProperties.

        Server name of the member database in the sync member

        :return: The server_name of this SyncMemberProperties.
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this SyncMemberProperties.

        Server name of the member database in the sync member

        :param server_name: The server_name of this SyncMemberProperties.
        :type server_name: str
        """

        self._server_name = server_name

    @property
    def sql_server_database_id(self):
        """Gets the sql_server_database_id of this SyncMemberProperties.

        SQL Server database id of the sync member.

        :return: The sql_server_database_id of this SyncMemberProperties.
        :rtype: str
        """
        return self._sql_server_database_id

    @sql_server_database_id.setter
    def sql_server_database_id(self, sql_server_database_id):
        """Sets the sql_server_database_id of this SyncMemberProperties.

        SQL Server database id of the sync member.

        :param sql_server_database_id: The sql_server_database_id of this SyncMemberProperties.
        :type sql_server_database_id: str
        """

        self._sql_server_database_id = sql_server_database_id

    @property
    def sync_agent_id(self):
        """Gets the sync_agent_id of this SyncMemberProperties.

        ARM resource id of the sync agent in the sync member.

        :return: The sync_agent_id of this SyncMemberProperties.
        :rtype: str
        """
        return self._sync_agent_id

    @sync_agent_id.setter
    def sync_agent_id(self, sync_agent_id):
        """Sets the sync_agent_id of this SyncMemberProperties.

        ARM resource id of the sync agent in the sync member.

        :param sync_agent_id: The sync_agent_id of this SyncMemberProperties.
        :type sync_agent_id: str
        """

        self._sync_agent_id = sync_agent_id

    @property
    def sync_direction(self):
        """Gets the sync_direction of this SyncMemberProperties.

        Sync direction of the sync member.

        :return: The sync_direction of this SyncMemberProperties.
        :rtype: str
        """
        return self._sync_direction

    @sync_direction.setter
    def sync_direction(self, sync_direction):
        """Sets the sync_direction of this SyncMemberProperties.

        Sync direction of the sync member.

        :param sync_direction: The sync_direction of this SyncMemberProperties.
        :type sync_direction: str
        """
        allowed_values = ["Bidirectional", "OneWayMemberToHub", "OneWayHubToMember"]  # noqa: E501
        if sync_direction not in allowed_values:
            raise ValueError(
                "Invalid value for `sync_direction` ({0}), must be one of {1}"
                .format(sync_direction, allowed_values)
            )

        self._sync_direction = sync_direction

    @property
    def sync_state(self):
        """Gets the sync_state of this SyncMemberProperties.

        Sync state of the sync member.

        :return: The sync_state of this SyncMemberProperties.
        :rtype: str
        """
        return self._sync_state

    @sync_state.setter
    def sync_state(self, sync_state):
        """Sets the sync_state of this SyncMemberProperties.

        Sync state of the sync member.

        :param sync_state: The sync_state of this SyncMemberProperties.
        :type sync_state: str
        """
        allowed_values = ["SyncInProgress", "SyncSucceeded", "SyncFailed", "DisabledTombstoneCleanup", "DisabledBackupRestore", "SyncSucceededWithWarnings", "SyncCancelling", "SyncCancelled", "UnProvisioned", "Provisioning", "Provisioned", "ProvisionFailed", "DeProvisioning", "DeProvisioned", "DeProvisionFailed", "Reprovisioning", "ReprovisionFailed", "UnReprovisioned"]  # noqa: E501
        if sync_state not in allowed_values:
            raise ValueError(
                "Invalid value for `sync_state` ({0}), must be one of {1}"
                .format(sync_state, allowed_values)
            )

        self._sync_state = sync_state

    @property
    def user_name(self):
        """Gets the user_name of this SyncMemberProperties.

        User name of the member database in the sync member.

        :return: The user_name of this SyncMemberProperties.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this SyncMemberProperties.

        User name of the member database in the sync member.

        :param user_name: The user_name of this SyncMemberProperties.
        :type user_name: str
        """

        self._user_name = user_name
