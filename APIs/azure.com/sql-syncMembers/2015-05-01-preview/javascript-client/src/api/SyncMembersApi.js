/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SyncFullSchemaPropertiesListResult from '../model/SyncFullSchemaPropertiesListResult';
import SyncMember from '../model/SyncMember';
import SyncMemberListResult from '../model/SyncMemberListResult';

/**
* SyncMembers service.
* @module api/SyncMembersApi
* @version 2015-05-01-preview
*/
export default class SyncMembersApi {

    /**
    * Constructs a new SyncMembersApi. 
    * @alias module:api/SyncMembersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the syncMembersCreateOrUpdate operation.
     * @callback module:api/SyncMembersApi~syncMembersCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SyncMember} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a sync member.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} databaseName The name of the database on which the sync group is hosted.
     * @param {String} syncGroupName The name of the sync group on which the sync member is hosted.
     * @param {String} syncMemberName The name of the sync member.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:model/SyncMember} parameters The requested sync member resource state.
     * @param {module:api/SyncMembersApi~syncMembersCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SyncMember}
     */
    syncMembersCreateOrUpdate(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, subscriptionId, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling syncMembersCreateOrUpdate");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling syncMembersCreateOrUpdate");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling syncMembersCreateOrUpdate");
      }
      // verify the required parameter 'syncGroupName' is set
      if (syncGroupName === undefined || syncGroupName === null) {
        throw new Error("Missing the required parameter 'syncGroupName' when calling syncMembersCreateOrUpdate");
      }
      // verify the required parameter 'syncMemberName' is set
      if (syncMemberName === undefined || syncMemberName === null) {
        throw new Error("Missing the required parameter 'syncMemberName' when calling syncMembersCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling syncMembersCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling syncMembersCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling syncMembersCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'databaseName': databaseName,
        'syncGroupName': syncGroupName,
        'syncMemberName': syncMemberName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SyncMember;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/syncMembers/{syncMemberName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the syncMembersDelete operation.
     * @callback module:api/SyncMembersApi~syncMembersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a sync member.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} databaseName The name of the database on which the sync group is hosted.
     * @param {String} syncGroupName The name of the sync group on which the sync member is hosted.
     * @param {String} syncMemberName The name of the sync member.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/SyncMembersApi~syncMembersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    syncMembersDelete(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling syncMembersDelete");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling syncMembersDelete");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling syncMembersDelete");
      }
      // verify the required parameter 'syncGroupName' is set
      if (syncGroupName === undefined || syncGroupName === null) {
        throw new Error("Missing the required parameter 'syncGroupName' when calling syncMembersDelete");
      }
      // verify the required parameter 'syncMemberName' is set
      if (syncMemberName === undefined || syncMemberName === null) {
        throw new Error("Missing the required parameter 'syncMemberName' when calling syncMembersDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling syncMembersDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling syncMembersDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'databaseName': databaseName,
        'syncGroupName': syncGroupName,
        'syncMemberName': syncMemberName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/syncMembers/{syncMemberName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the syncMembersGet operation.
     * @callback module:api/SyncMembersApi~syncMembersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SyncMember} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a sync member.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} databaseName The name of the database on which the sync group is hosted.
     * @param {String} syncGroupName The name of the sync group on which the sync member is hosted.
     * @param {String} syncMemberName The name of the sync member.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/SyncMembersApi~syncMembersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SyncMember}
     */
    syncMembersGet(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling syncMembersGet");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling syncMembersGet");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling syncMembersGet");
      }
      // verify the required parameter 'syncGroupName' is set
      if (syncGroupName === undefined || syncGroupName === null) {
        throw new Error("Missing the required parameter 'syncGroupName' when calling syncMembersGet");
      }
      // verify the required parameter 'syncMemberName' is set
      if (syncMemberName === undefined || syncMemberName === null) {
        throw new Error("Missing the required parameter 'syncMemberName' when calling syncMembersGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling syncMembersGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling syncMembersGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'databaseName': databaseName,
        'syncGroupName': syncGroupName,
        'syncMemberName': syncMemberName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SyncMember;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/syncMembers/{syncMemberName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the syncMembersListBySyncGroup operation.
     * @callback module:api/SyncMembersApi~syncMembersListBySyncGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SyncMemberListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists sync members in the given sync group.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} databaseName The name of the database on which the sync group is hosted.
     * @param {String} syncGroupName The name of the sync group.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/SyncMembersApi~syncMembersListBySyncGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SyncMemberListResult}
     */
    syncMembersListBySyncGroup(resourceGroupName, serverName, databaseName, syncGroupName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling syncMembersListBySyncGroup");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling syncMembersListBySyncGroup");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling syncMembersListBySyncGroup");
      }
      // verify the required parameter 'syncGroupName' is set
      if (syncGroupName === undefined || syncGroupName === null) {
        throw new Error("Missing the required parameter 'syncGroupName' when calling syncMembersListBySyncGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling syncMembersListBySyncGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling syncMembersListBySyncGroup");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'databaseName': databaseName,
        'syncGroupName': syncGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SyncMemberListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/syncMembers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the syncMembersListMemberSchemas operation.
     * @callback module:api/SyncMembersApi~syncMembersListMemberSchemasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SyncFullSchemaPropertiesListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a sync member database schema.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} databaseName The name of the database on which the sync group is hosted.
     * @param {String} syncGroupName The name of the sync group on which the sync member is hosted.
     * @param {String} syncMemberName The name of the sync member.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/SyncMembersApi~syncMembersListMemberSchemasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SyncFullSchemaPropertiesListResult}
     */
    syncMembersListMemberSchemas(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling syncMembersListMemberSchemas");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling syncMembersListMemberSchemas");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling syncMembersListMemberSchemas");
      }
      // verify the required parameter 'syncGroupName' is set
      if (syncGroupName === undefined || syncGroupName === null) {
        throw new Error("Missing the required parameter 'syncGroupName' when calling syncMembersListMemberSchemas");
      }
      // verify the required parameter 'syncMemberName' is set
      if (syncMemberName === undefined || syncMemberName === null) {
        throw new Error("Missing the required parameter 'syncMemberName' when calling syncMembersListMemberSchemas");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling syncMembersListMemberSchemas");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling syncMembersListMemberSchemas");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'databaseName': databaseName,
        'syncGroupName': syncGroupName,
        'syncMemberName': syncMemberName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SyncFullSchemaPropertiesListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/syncMembers/{syncMemberName}/schemas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the syncMembersRefreshMemberSchema operation.
     * @callback module:api/SyncMembersApi~syncMembersRefreshMemberSchemaCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refreshes a sync member database schema.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} databaseName The name of the database on which the sync group is hosted.
     * @param {String} syncGroupName The name of the sync group on which the sync member is hosted.
     * @param {String} syncMemberName The name of the sync member.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/SyncMembersApi~syncMembersRefreshMemberSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     */
    syncMembersRefreshMemberSchema(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling syncMembersRefreshMemberSchema");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling syncMembersRefreshMemberSchema");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling syncMembersRefreshMemberSchema");
      }
      // verify the required parameter 'syncGroupName' is set
      if (syncGroupName === undefined || syncGroupName === null) {
        throw new Error("Missing the required parameter 'syncGroupName' when calling syncMembersRefreshMemberSchema");
      }
      // verify the required parameter 'syncMemberName' is set
      if (syncMemberName === undefined || syncMemberName === null) {
        throw new Error("Missing the required parameter 'syncMemberName' when calling syncMembersRefreshMemberSchema");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling syncMembersRefreshMemberSchema");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling syncMembersRefreshMemberSchema");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'databaseName': databaseName,
        'syncGroupName': syncGroupName,
        'syncMemberName': syncMemberName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/syncMembers/{syncMemberName}/refreshSchema', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the syncMembersUpdate operation.
     * @callback module:api/SyncMembersApi~syncMembersUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SyncMember} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing sync member.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} databaseName The name of the database on which the sync group is hosted.
     * @param {String} syncGroupName The name of the sync group on which the sync member is hosted.
     * @param {String} syncMemberName The name of the sync member.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:model/SyncMember} parameters The requested sync member resource state.
     * @param {module:api/SyncMembersApi~syncMembersUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SyncMember}
     */
    syncMembersUpdate(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, subscriptionId, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling syncMembersUpdate");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling syncMembersUpdate");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling syncMembersUpdate");
      }
      // verify the required parameter 'syncGroupName' is set
      if (syncGroupName === undefined || syncGroupName === null) {
        throw new Error("Missing the required parameter 'syncGroupName' when calling syncMembersUpdate");
      }
      // verify the required parameter 'syncMemberName' is set
      if (syncMemberName === undefined || syncMemberName === null) {
        throw new Error("Missing the required parameter 'syncMemberName' when calling syncMembersUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling syncMembersUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling syncMembersUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling syncMembersUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'databaseName': databaseName,
        'syncGroupName': syncGroupName,
        'syncMemberName': syncMemberName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SyncMember;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/syncMembers/{syncMemberName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
