/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SecurityTask from '../model/SecurityTask';
import SecurityTaskList from '../model/SecurityTaskList';
import TasksListByHomeRegionDefaultResponse from '../model/TasksListByHomeRegionDefaultResponse';

/**
* Tasks service.
* @module api/TasksApi
* @version 2015-06-01-preview
*/
export default class TasksApi {

    /**
    * Constructs a new TasksApi. 
    * @alias module:api/TasksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the tasksGetResourceGroupLevelTask operation.
     * @callback module:api/TasksApi~tasksGetResourceGroupLevelTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecurityTask} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recommended tasks that will help improve the security of the subscription proactively
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations
     * @param {String} taskName Name of the task object, will be a GUID
     * @param {module:api/TasksApi~tasksGetResourceGroupLevelTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecurityTask}
     */
    tasksGetResourceGroupLevelTask(apiVersion, subscriptionId, resourceGroupName, ascLocation, taskName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling tasksGetResourceGroupLevelTask");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling tasksGetResourceGroupLevelTask");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling tasksGetResourceGroupLevelTask");
      }
      // verify the required parameter 'ascLocation' is set
      if (ascLocation === undefined || ascLocation === null) {
        throw new Error("Missing the required parameter 'ascLocation' when calling tasksGetResourceGroupLevelTask");
      }
      // verify the required parameter 'taskName' is set
      if (taskName === undefined || taskName === null) {
        throw new Error("Missing the required parameter 'taskName' when calling tasksGetResourceGroupLevelTask");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'ascLocation': ascLocation,
        'taskName': taskName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SecurityTask;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/tasks/{taskName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksGetSubscriptionLevelTask operation.
     * @callback module:api/TasksApi~tasksGetSubscriptionLevelTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecurityTask} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recommended tasks that will help improve the security of the subscription proactively
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations
     * @param {String} taskName Name of the task object, will be a GUID
     * @param {module:api/TasksApi~tasksGetSubscriptionLevelTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecurityTask}
     */
    tasksGetSubscriptionLevelTask(apiVersion, subscriptionId, ascLocation, taskName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling tasksGetSubscriptionLevelTask");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling tasksGetSubscriptionLevelTask");
      }
      // verify the required parameter 'ascLocation' is set
      if (ascLocation === undefined || ascLocation === null) {
        throw new Error("Missing the required parameter 'ascLocation' when calling tasksGetSubscriptionLevelTask");
      }
      // verify the required parameter 'taskName' is set
      if (taskName === undefined || taskName === null) {
        throw new Error("Missing the required parameter 'taskName' when calling tasksGetSubscriptionLevelTask");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'ascLocation': ascLocation,
        'taskName': taskName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SecurityTask;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/tasks/{taskName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksList operation.
     * @callback module:api/TasksApi~tasksListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecurityTaskList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recommended tasks that will help improve the security of the subscription proactively
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {Object} opts Optional parameters
     * @param {String} [filter] OData filter. Optional.
     * @param {module:api/TasksApi~tasksListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecurityTaskList}
     */
    tasksList(apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling tasksList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling tasksList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SecurityTaskList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Security/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksListByHomeRegion operation.
     * @callback module:api/TasksApi~tasksListByHomeRegionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecurityTaskList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recommended tasks that will help improve the security of the subscription proactively
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations
     * @param {Object} opts Optional parameters
     * @param {String} [filter] OData filter. Optional.
     * @param {module:api/TasksApi~tasksListByHomeRegionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecurityTaskList}
     */
    tasksListByHomeRegion(apiVersion, subscriptionId, ascLocation, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling tasksListByHomeRegion");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling tasksListByHomeRegion");
      }
      // verify the required parameter 'ascLocation' is set
      if (ascLocation === undefined || ascLocation === null) {
        throw new Error("Missing the required parameter 'ascLocation' when calling tasksListByHomeRegion");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'ascLocation': ascLocation
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SecurityTaskList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksListByResourceGroup operation.
     * @callback module:api/TasksApi~tasksListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecurityTaskList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recommended tasks that will help improve the security of the subscription proactively
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations
     * @param {Object} opts Optional parameters
     * @param {String} [filter] OData filter. Optional.
     * @param {module:api/TasksApi~tasksListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecurityTaskList}
     */
    tasksListByResourceGroup(apiVersion, subscriptionId, resourceGroupName, ascLocation, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling tasksListByResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling tasksListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling tasksListByResourceGroup");
      }
      // verify the required parameter 'ascLocation' is set
      if (ascLocation === undefined || ascLocation === null) {
        throw new Error("Missing the required parameter 'ascLocation' when calling tasksListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'ascLocation': ascLocation
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SecurityTaskList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksUpdateResourceGroupLevelTaskState operation.
     * @callback module:api/TasksApi~tasksUpdateResourceGroupLevelTaskStateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recommended tasks that will help improve the security of the subscription proactively
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations
     * @param {String} taskName Name of the task object, will be a GUID
     * @param {module:model/String} taskUpdateActionType Type of the action to do on the task
     * @param {module:api/TasksApi~tasksUpdateResourceGroupLevelTaskStateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tasksUpdateResourceGroupLevelTaskState(apiVersion, subscriptionId, resourceGroupName, ascLocation, taskName, taskUpdateActionType, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling tasksUpdateResourceGroupLevelTaskState");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling tasksUpdateResourceGroupLevelTaskState");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling tasksUpdateResourceGroupLevelTaskState");
      }
      // verify the required parameter 'ascLocation' is set
      if (ascLocation === undefined || ascLocation === null) {
        throw new Error("Missing the required parameter 'ascLocation' when calling tasksUpdateResourceGroupLevelTaskState");
      }
      // verify the required parameter 'taskName' is set
      if (taskName === undefined || taskName === null) {
        throw new Error("Missing the required parameter 'taskName' when calling tasksUpdateResourceGroupLevelTaskState");
      }
      // verify the required parameter 'taskUpdateActionType' is set
      if (taskUpdateActionType === undefined || taskUpdateActionType === null) {
        throw new Error("Missing the required parameter 'taskUpdateActionType' when calling tasksUpdateResourceGroupLevelTaskState");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'ascLocation': ascLocation,
        'taskName': taskName,
        'taskUpdateActionType': taskUpdateActionType
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/tasks/{taskName}/{taskUpdateActionType}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksUpdateSubscriptionLevelTaskState operation.
     * @callback module:api/TasksApi~tasksUpdateSubscriptionLevelTaskStateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recommended tasks that will help improve the security of the subscription proactively
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations
     * @param {String} taskName Name of the task object, will be a GUID
     * @param {module:model/String} taskUpdateActionType Type of the action to do on the task
     * @param {module:api/TasksApi~tasksUpdateSubscriptionLevelTaskStateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tasksUpdateSubscriptionLevelTaskState(apiVersion, subscriptionId, ascLocation, taskName, taskUpdateActionType, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling tasksUpdateSubscriptionLevelTaskState");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling tasksUpdateSubscriptionLevelTaskState");
      }
      // verify the required parameter 'ascLocation' is set
      if (ascLocation === undefined || ascLocation === null) {
        throw new Error("Missing the required parameter 'ascLocation' when calling tasksUpdateSubscriptionLevelTaskState");
      }
      // verify the required parameter 'taskName' is set
      if (taskName === undefined || taskName === null) {
        throw new Error("Missing the required parameter 'taskName' when calling tasksUpdateSubscriptionLevelTaskState");
      }
      // verify the required parameter 'taskUpdateActionType' is set
      if (taskUpdateActionType === undefined || taskUpdateActionType === null) {
        throw new Error("Missing the required parameter 'taskUpdateActionType' when calling tasksUpdateSubscriptionLevelTaskState");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'ascLocation': ascLocation,
        'taskName': taskName,
        'taskUpdateActionType': taskUpdateActionType
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/tasks/{taskName}/{taskUpdateActionType}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
