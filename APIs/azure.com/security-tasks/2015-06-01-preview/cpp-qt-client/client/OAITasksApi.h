/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITasksApi_H
#define OAI_OAITasksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAISecurityTask.h"
#include "OAISecurityTaskList.h"
#include "OAITasks_ListByHomeRegion_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITasksApi : public QObject {
    Q_OBJECT

public:
    OAITasksApi(const int timeOut = 0);
    ~OAITasksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  asc_location QString [required]
    * @param[in]  task_name QString [required]
    */
    virtual void tasksGetResourceGroupLevelTask(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &asc_location, const QString &task_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  asc_location QString [required]
    * @param[in]  task_name QString [required]
    */
    virtual void tasksGetSubscriptionLevelTask(const QString &api_version, const QString &subscription_id, const QString &asc_location, const QString &task_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void tasksList(const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  asc_location QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void tasksListByHomeRegion(const QString &api_version, const QString &subscription_id, const QString &asc_location, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  asc_location QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void tasksListByResourceGroup(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &asc_location, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  asc_location QString [required]
    * @param[in]  task_name QString [required]
    * @param[in]  task_update_action_type QString [required]
    */
    virtual void tasksUpdateResourceGroupLevelTaskState(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &asc_location, const QString &task_name, const QString &task_update_action_type);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  asc_location QString [required]
    * @param[in]  task_name QString [required]
    * @param[in]  task_update_action_type QString [required]
    */
    virtual void tasksUpdateSubscriptionLevelTaskState(const QString &api_version, const QString &subscription_id, const QString &asc_location, const QString &task_name, const QString &task_update_action_type);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void tasksGetResourceGroupLevelTaskCallback(OAIHttpRequestWorker *worker);
    void tasksGetSubscriptionLevelTaskCallback(OAIHttpRequestWorker *worker);
    void tasksListCallback(OAIHttpRequestWorker *worker);
    void tasksListByHomeRegionCallback(OAIHttpRequestWorker *worker);
    void tasksListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void tasksUpdateResourceGroupLevelTaskStateCallback(OAIHttpRequestWorker *worker);
    void tasksUpdateSubscriptionLevelTaskStateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void tasksGetResourceGroupLevelTaskSignal(OAISecurityTask summary);
    void tasksGetSubscriptionLevelTaskSignal(OAISecurityTask summary);
    void tasksListSignal(OAISecurityTaskList summary);
    void tasksListByHomeRegionSignal(OAISecurityTaskList summary);
    void tasksListByResourceGroupSignal(OAISecurityTaskList summary);
    void tasksUpdateResourceGroupLevelTaskStateSignal();
    void tasksUpdateSubscriptionLevelTaskStateSignal();


    void tasksGetResourceGroupLevelTaskSignalFull(OAIHttpRequestWorker *worker, OAISecurityTask summary);
    void tasksGetSubscriptionLevelTaskSignalFull(OAIHttpRequestWorker *worker, OAISecurityTask summary);
    void tasksListSignalFull(OAIHttpRequestWorker *worker, OAISecurityTaskList summary);
    void tasksListByHomeRegionSignalFull(OAIHttpRequestWorker *worker, OAISecurityTaskList summary);
    void tasksListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAISecurityTaskList summary);
    void tasksUpdateResourceGroupLevelTaskStateSignalFull(OAIHttpRequestWorker *worker);
    void tasksUpdateSubscriptionLevelTaskStateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use tasksGetResourceGroupLevelTaskSignalError() instead")
    void tasksGetResourceGroupLevelTaskSignalE(OAISecurityTask summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksGetResourceGroupLevelTaskSignalError(OAISecurityTask summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksGetSubscriptionLevelTaskSignalError() instead")
    void tasksGetSubscriptionLevelTaskSignalE(OAISecurityTask summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksGetSubscriptionLevelTaskSignalError(OAISecurityTask summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksListSignalError() instead")
    void tasksListSignalE(OAISecurityTaskList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksListSignalError(OAISecurityTaskList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksListByHomeRegionSignalError() instead")
    void tasksListByHomeRegionSignalE(OAISecurityTaskList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksListByHomeRegionSignalError(OAISecurityTaskList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksListByResourceGroupSignalError() instead")
    void tasksListByResourceGroupSignalE(OAISecurityTaskList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksListByResourceGroupSignalError(OAISecurityTaskList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksUpdateResourceGroupLevelTaskStateSignalError() instead")
    void tasksUpdateResourceGroupLevelTaskStateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tasksUpdateResourceGroupLevelTaskStateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksUpdateSubscriptionLevelTaskStateSignalError() instead")
    void tasksUpdateSubscriptionLevelTaskStateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tasksUpdateSubscriptionLevelTaskStateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use tasksGetResourceGroupLevelTaskSignalErrorFull() instead")
    void tasksGetResourceGroupLevelTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksGetResourceGroupLevelTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksGetSubscriptionLevelTaskSignalErrorFull() instead")
    void tasksGetSubscriptionLevelTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksGetSubscriptionLevelTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksListSignalErrorFull() instead")
    void tasksListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksListByHomeRegionSignalErrorFull() instead")
    void tasksListByHomeRegionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksListByHomeRegionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksListByResourceGroupSignalErrorFull() instead")
    void tasksListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksUpdateResourceGroupLevelTaskStateSignalErrorFull() instead")
    void tasksUpdateResourceGroupLevelTaskStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksUpdateResourceGroupLevelTaskStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksUpdateSubscriptionLevelTaskStateSignalErrorFull() instead")
    void tasksUpdateSubscriptionLevelTaskStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksUpdateSubscriptionLevelTaskStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
