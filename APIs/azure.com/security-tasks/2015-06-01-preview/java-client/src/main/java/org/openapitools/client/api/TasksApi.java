/*
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.SecurityTask;
import org.openapitools.client.model.SecurityTaskList;
import org.openapitools.client.model.TasksListByHomeRegionDefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TasksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TasksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TasksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for tasksGetResourceGroupLevelTask
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param taskName Name of the task object, will be a GUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksGetResourceGroupLevelTaskCall(String apiVersion, String subscriptionId, String resourceGroupName, String ascLocation, String taskName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/tasks/{taskName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "ascLocation" + "}", localVarApiClient.escapeString(ascLocation.toString()))
            .replace("{" + "taskName" + "}", localVarApiClient.escapeString(taskName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksGetResourceGroupLevelTaskValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String ascLocation, String taskName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tasksGetResourceGroupLevelTask(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tasksGetResourceGroupLevelTask(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling tasksGetResourceGroupLevelTask(Async)");
        }

        // verify the required parameter 'ascLocation' is set
        if (ascLocation == null) {
            throw new ApiException("Missing the required parameter 'ascLocation' when calling tasksGetResourceGroupLevelTask(Async)");
        }

        // verify the required parameter 'taskName' is set
        if (taskName == null) {
            throw new ApiException("Missing the required parameter 'taskName' when calling tasksGetResourceGroupLevelTask(Async)");
        }

        return tasksGetResourceGroupLevelTaskCall(apiVersion, subscriptionId, resourceGroupName, ascLocation, taskName, _callback);

    }

    /**
     * 
     * Recommended tasks that will help improve the security of the subscription proactively
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param taskName Name of the task object, will be a GUID (required)
     * @return SecurityTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SecurityTask tasksGetResourceGroupLevelTask(String apiVersion, String subscriptionId, String resourceGroupName, String ascLocation, String taskName) throws ApiException {
        ApiResponse<SecurityTask> localVarResp = tasksGetResourceGroupLevelTaskWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, ascLocation, taskName);
        return localVarResp.getData();
    }

    /**
     * 
     * Recommended tasks that will help improve the security of the subscription proactively
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param taskName Name of the task object, will be a GUID (required)
     * @return ApiResponse&lt;SecurityTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecurityTask> tasksGetResourceGroupLevelTaskWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String ascLocation, String taskName) throws ApiException {
        okhttp3.Call localVarCall = tasksGetResourceGroupLevelTaskValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, ascLocation, taskName, null);
        Type localVarReturnType = new TypeToken<SecurityTask>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Recommended tasks that will help improve the security of the subscription proactively
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param taskName Name of the task object, will be a GUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksGetResourceGroupLevelTaskAsync(String apiVersion, String subscriptionId, String resourceGroupName, String ascLocation, String taskName, final ApiCallback<SecurityTask> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksGetResourceGroupLevelTaskValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, ascLocation, taskName, _callback);
        Type localVarReturnType = new TypeToken<SecurityTask>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksGetSubscriptionLevelTask
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param taskName Name of the task object, will be a GUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksGetSubscriptionLevelTaskCall(String apiVersion, String subscriptionId, String ascLocation, String taskName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/tasks/{taskName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "ascLocation" + "}", localVarApiClient.escapeString(ascLocation.toString()))
            .replace("{" + "taskName" + "}", localVarApiClient.escapeString(taskName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksGetSubscriptionLevelTaskValidateBeforeCall(String apiVersion, String subscriptionId, String ascLocation, String taskName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tasksGetSubscriptionLevelTask(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tasksGetSubscriptionLevelTask(Async)");
        }

        // verify the required parameter 'ascLocation' is set
        if (ascLocation == null) {
            throw new ApiException("Missing the required parameter 'ascLocation' when calling tasksGetSubscriptionLevelTask(Async)");
        }

        // verify the required parameter 'taskName' is set
        if (taskName == null) {
            throw new ApiException("Missing the required parameter 'taskName' when calling tasksGetSubscriptionLevelTask(Async)");
        }

        return tasksGetSubscriptionLevelTaskCall(apiVersion, subscriptionId, ascLocation, taskName, _callback);

    }

    /**
     * 
     * Recommended tasks that will help improve the security of the subscription proactively
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param taskName Name of the task object, will be a GUID (required)
     * @return SecurityTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SecurityTask tasksGetSubscriptionLevelTask(String apiVersion, String subscriptionId, String ascLocation, String taskName) throws ApiException {
        ApiResponse<SecurityTask> localVarResp = tasksGetSubscriptionLevelTaskWithHttpInfo(apiVersion, subscriptionId, ascLocation, taskName);
        return localVarResp.getData();
    }

    /**
     * 
     * Recommended tasks that will help improve the security of the subscription proactively
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param taskName Name of the task object, will be a GUID (required)
     * @return ApiResponse&lt;SecurityTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecurityTask> tasksGetSubscriptionLevelTaskWithHttpInfo(String apiVersion, String subscriptionId, String ascLocation, String taskName) throws ApiException {
        okhttp3.Call localVarCall = tasksGetSubscriptionLevelTaskValidateBeforeCall(apiVersion, subscriptionId, ascLocation, taskName, null);
        Type localVarReturnType = new TypeToken<SecurityTask>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Recommended tasks that will help improve the security of the subscription proactively
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param taskName Name of the task object, will be a GUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksGetSubscriptionLevelTaskAsync(String apiVersion, String subscriptionId, String ascLocation, String taskName, final ApiCallback<SecurityTask> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksGetSubscriptionLevelTaskValidateBeforeCall(apiVersion, subscriptionId, ascLocation, taskName, _callback);
        Type localVarReturnType = new TypeToken<SecurityTask>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksList
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param $filter OData filter. Optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksListCall(String apiVersion, String subscriptionId, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Security/tasks"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksListValidateBeforeCall(String apiVersion, String subscriptionId, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tasksList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tasksList(Async)");
        }

        return tasksListCall(apiVersion, subscriptionId, $filter, _callback);

    }

    /**
     * 
     * Recommended tasks that will help improve the security of the subscription proactively
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param $filter OData filter. Optional. (optional)
     * @return SecurityTaskList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SecurityTaskList tasksList(String apiVersion, String subscriptionId, String $filter) throws ApiException {
        ApiResponse<SecurityTaskList> localVarResp = tasksListWithHttpInfo(apiVersion, subscriptionId, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Recommended tasks that will help improve the security of the subscription proactively
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param $filter OData filter. Optional. (optional)
     * @return ApiResponse&lt;SecurityTaskList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecurityTaskList> tasksListWithHttpInfo(String apiVersion, String subscriptionId, String $filter) throws ApiException {
        okhttp3.Call localVarCall = tasksListValidateBeforeCall(apiVersion, subscriptionId, $filter, null);
        Type localVarReturnType = new TypeToken<SecurityTaskList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Recommended tasks that will help improve the security of the subscription proactively
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param $filter OData filter. Optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksListAsync(String apiVersion, String subscriptionId, String $filter, final ApiCallback<SecurityTaskList> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksListValidateBeforeCall(apiVersion, subscriptionId, $filter, _callback);
        Type localVarReturnType = new TypeToken<SecurityTaskList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksListByHomeRegion
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param $filter OData filter. Optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksListByHomeRegionCall(String apiVersion, String subscriptionId, String ascLocation, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/tasks"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "ascLocation" + "}", localVarApiClient.escapeString(ascLocation.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksListByHomeRegionValidateBeforeCall(String apiVersion, String subscriptionId, String ascLocation, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tasksListByHomeRegion(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tasksListByHomeRegion(Async)");
        }

        // verify the required parameter 'ascLocation' is set
        if (ascLocation == null) {
            throw new ApiException("Missing the required parameter 'ascLocation' when calling tasksListByHomeRegion(Async)");
        }

        return tasksListByHomeRegionCall(apiVersion, subscriptionId, ascLocation, $filter, _callback);

    }

    /**
     * 
     * Recommended tasks that will help improve the security of the subscription proactively
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param $filter OData filter. Optional. (optional)
     * @return SecurityTaskList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SecurityTaskList tasksListByHomeRegion(String apiVersion, String subscriptionId, String ascLocation, String $filter) throws ApiException {
        ApiResponse<SecurityTaskList> localVarResp = tasksListByHomeRegionWithHttpInfo(apiVersion, subscriptionId, ascLocation, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Recommended tasks that will help improve the security of the subscription proactively
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param $filter OData filter. Optional. (optional)
     * @return ApiResponse&lt;SecurityTaskList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecurityTaskList> tasksListByHomeRegionWithHttpInfo(String apiVersion, String subscriptionId, String ascLocation, String $filter) throws ApiException {
        okhttp3.Call localVarCall = tasksListByHomeRegionValidateBeforeCall(apiVersion, subscriptionId, ascLocation, $filter, null);
        Type localVarReturnType = new TypeToken<SecurityTaskList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Recommended tasks that will help improve the security of the subscription proactively
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param $filter OData filter. Optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksListByHomeRegionAsync(String apiVersion, String subscriptionId, String ascLocation, String $filter, final ApiCallback<SecurityTaskList> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksListByHomeRegionValidateBeforeCall(apiVersion, subscriptionId, ascLocation, $filter, _callback);
        Type localVarReturnType = new TypeToken<SecurityTaskList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksListByResourceGroup
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param $filter OData filter. Optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksListByResourceGroupCall(String apiVersion, String subscriptionId, String resourceGroupName, String ascLocation, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/tasks"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "ascLocation" + "}", localVarApiClient.escapeString(ascLocation.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksListByResourceGroupValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String ascLocation, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tasksListByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tasksListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling tasksListByResourceGroup(Async)");
        }

        // verify the required parameter 'ascLocation' is set
        if (ascLocation == null) {
            throw new ApiException("Missing the required parameter 'ascLocation' when calling tasksListByResourceGroup(Async)");
        }

        return tasksListByResourceGroupCall(apiVersion, subscriptionId, resourceGroupName, ascLocation, $filter, _callback);

    }

    /**
     * 
     * Recommended tasks that will help improve the security of the subscription proactively
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param $filter OData filter. Optional. (optional)
     * @return SecurityTaskList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SecurityTaskList tasksListByResourceGroup(String apiVersion, String subscriptionId, String resourceGroupName, String ascLocation, String $filter) throws ApiException {
        ApiResponse<SecurityTaskList> localVarResp = tasksListByResourceGroupWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, ascLocation, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Recommended tasks that will help improve the security of the subscription proactively
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param $filter OData filter. Optional. (optional)
     * @return ApiResponse&lt;SecurityTaskList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecurityTaskList> tasksListByResourceGroupWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String ascLocation, String $filter) throws ApiException {
        okhttp3.Call localVarCall = tasksListByResourceGroupValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, ascLocation, $filter, null);
        Type localVarReturnType = new TypeToken<SecurityTaskList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Recommended tasks that will help improve the security of the subscription proactively
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param $filter OData filter. Optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksListByResourceGroupAsync(String apiVersion, String subscriptionId, String resourceGroupName, String ascLocation, String $filter, final ApiCallback<SecurityTaskList> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksListByResourceGroupValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, ascLocation, $filter, _callback);
        Type localVarReturnType = new TypeToken<SecurityTaskList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksUpdateResourceGroupLevelTaskState
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param taskName Name of the task object, will be a GUID (required)
     * @param taskUpdateActionType Type of the action to do on the task (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksUpdateResourceGroupLevelTaskStateCall(String apiVersion, String subscriptionId, String resourceGroupName, String ascLocation, String taskName, String taskUpdateActionType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/tasks/{taskName}/{taskUpdateActionType}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "ascLocation" + "}", localVarApiClient.escapeString(ascLocation.toString()))
            .replace("{" + "taskName" + "}", localVarApiClient.escapeString(taskName.toString()))
            .replace("{" + "taskUpdateActionType" + "}", localVarApiClient.escapeString(taskUpdateActionType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksUpdateResourceGroupLevelTaskStateValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String ascLocation, String taskName, String taskUpdateActionType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tasksUpdateResourceGroupLevelTaskState(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tasksUpdateResourceGroupLevelTaskState(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling tasksUpdateResourceGroupLevelTaskState(Async)");
        }

        // verify the required parameter 'ascLocation' is set
        if (ascLocation == null) {
            throw new ApiException("Missing the required parameter 'ascLocation' when calling tasksUpdateResourceGroupLevelTaskState(Async)");
        }

        // verify the required parameter 'taskName' is set
        if (taskName == null) {
            throw new ApiException("Missing the required parameter 'taskName' when calling tasksUpdateResourceGroupLevelTaskState(Async)");
        }

        // verify the required parameter 'taskUpdateActionType' is set
        if (taskUpdateActionType == null) {
            throw new ApiException("Missing the required parameter 'taskUpdateActionType' when calling tasksUpdateResourceGroupLevelTaskState(Async)");
        }

        return tasksUpdateResourceGroupLevelTaskStateCall(apiVersion, subscriptionId, resourceGroupName, ascLocation, taskName, taskUpdateActionType, _callback);

    }

    /**
     * 
     * Recommended tasks that will help improve the security of the subscription proactively
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param taskName Name of the task object, will be a GUID (required)
     * @param taskUpdateActionType Type of the action to do on the task (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void tasksUpdateResourceGroupLevelTaskState(String apiVersion, String subscriptionId, String resourceGroupName, String ascLocation, String taskName, String taskUpdateActionType) throws ApiException {
        tasksUpdateResourceGroupLevelTaskStateWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, ascLocation, taskName, taskUpdateActionType);
    }

    /**
     * 
     * Recommended tasks that will help improve the security of the subscription proactively
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param taskName Name of the task object, will be a GUID (required)
     * @param taskUpdateActionType Type of the action to do on the task (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> tasksUpdateResourceGroupLevelTaskStateWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String ascLocation, String taskName, String taskUpdateActionType) throws ApiException {
        okhttp3.Call localVarCall = tasksUpdateResourceGroupLevelTaskStateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, ascLocation, taskName, taskUpdateActionType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Recommended tasks that will help improve the security of the subscription proactively
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param taskName Name of the task object, will be a GUID (required)
     * @param taskUpdateActionType Type of the action to do on the task (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksUpdateResourceGroupLevelTaskStateAsync(String apiVersion, String subscriptionId, String resourceGroupName, String ascLocation, String taskName, String taskUpdateActionType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksUpdateResourceGroupLevelTaskStateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, ascLocation, taskName, taskUpdateActionType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksUpdateSubscriptionLevelTaskState
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param taskName Name of the task object, will be a GUID (required)
     * @param taskUpdateActionType Type of the action to do on the task (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksUpdateSubscriptionLevelTaskStateCall(String apiVersion, String subscriptionId, String ascLocation, String taskName, String taskUpdateActionType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/tasks/{taskName}/{taskUpdateActionType}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "ascLocation" + "}", localVarApiClient.escapeString(ascLocation.toString()))
            .replace("{" + "taskName" + "}", localVarApiClient.escapeString(taskName.toString()))
            .replace("{" + "taskUpdateActionType" + "}", localVarApiClient.escapeString(taskUpdateActionType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksUpdateSubscriptionLevelTaskStateValidateBeforeCall(String apiVersion, String subscriptionId, String ascLocation, String taskName, String taskUpdateActionType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tasksUpdateSubscriptionLevelTaskState(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tasksUpdateSubscriptionLevelTaskState(Async)");
        }

        // verify the required parameter 'ascLocation' is set
        if (ascLocation == null) {
            throw new ApiException("Missing the required parameter 'ascLocation' when calling tasksUpdateSubscriptionLevelTaskState(Async)");
        }

        // verify the required parameter 'taskName' is set
        if (taskName == null) {
            throw new ApiException("Missing the required parameter 'taskName' when calling tasksUpdateSubscriptionLevelTaskState(Async)");
        }

        // verify the required parameter 'taskUpdateActionType' is set
        if (taskUpdateActionType == null) {
            throw new ApiException("Missing the required parameter 'taskUpdateActionType' when calling tasksUpdateSubscriptionLevelTaskState(Async)");
        }

        return tasksUpdateSubscriptionLevelTaskStateCall(apiVersion, subscriptionId, ascLocation, taskName, taskUpdateActionType, _callback);

    }

    /**
     * 
     * Recommended tasks that will help improve the security of the subscription proactively
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param taskName Name of the task object, will be a GUID (required)
     * @param taskUpdateActionType Type of the action to do on the task (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void tasksUpdateSubscriptionLevelTaskState(String apiVersion, String subscriptionId, String ascLocation, String taskName, String taskUpdateActionType) throws ApiException {
        tasksUpdateSubscriptionLevelTaskStateWithHttpInfo(apiVersion, subscriptionId, ascLocation, taskName, taskUpdateActionType);
    }

    /**
     * 
     * Recommended tasks that will help improve the security of the subscription proactively
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param taskName Name of the task object, will be a GUID (required)
     * @param taskUpdateActionType Type of the action to do on the task (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> tasksUpdateSubscriptionLevelTaskStateWithHttpInfo(String apiVersion, String subscriptionId, String ascLocation, String taskName, String taskUpdateActionType) throws ApiException {
        okhttp3.Call localVarCall = tasksUpdateSubscriptionLevelTaskStateValidateBeforeCall(apiVersion, subscriptionId, ascLocation, taskName, taskUpdateActionType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Recommended tasks that will help improve the security of the subscription proactively
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param taskName Name of the task object, will be a GUID (required)
     * @param taskUpdateActionType Type of the action to do on the task (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksUpdateSubscriptionLevelTaskStateAsync(String apiVersion, String subscriptionId, String ascLocation, String taskName, String taskUpdateActionType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksUpdateSubscriptionLevelTaskStateValidateBeforeCall(apiVersion, subscriptionId, ascLocation, taskName, taskUpdateActionType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
