/**
 * Marketplace RP Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2020-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Plan from './Plan';

/**
 * The Offer model module.
 * @module model/Offer
 * @version 2020-01-01
 */
class Offer {
    /**
     * Constructs a new <code>Offer</code>.
     * @alias module:model/Offer
     */
    constructor() { 
        
        Offer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Offer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Offer} obj Optional instance to populate.
     * @return {module:model/Offer} The populated <code>Offer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Offer();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('eTag')) {
                obj['eTag'] = ApiClient.convertToType(data['eTag'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('longSummary')) {
                obj['longSummary'] = ApiClient.convertToType(data['longSummary'], 'String');
            }
            if (data.hasOwnProperty('plans')) {
                obj['plans'] = ApiClient.convertToType(data['plans'], [Plan]);
            }
            if (data.hasOwnProperty('publisherDisplayName')) {
                obj['publisherDisplayName'] = ApiClient.convertToType(data['publisherDisplayName'], 'String');
            }
            if (data.hasOwnProperty('summary')) {
                obj['summary'] = ApiClient.convertToType(data['summary'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Offer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Offer</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['eTag'] && !(typeof data['eTag'] === 'string' || data['eTag'] instanceof String)) {
            throw new Error("Expected the field `eTag` to be a primitive type in the JSON string but got " + data['eTag']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['longSummary'] && !(typeof data['longSummary'] === 'string' || data['longSummary'] instanceof String)) {
            throw new Error("Expected the field `longSummary` to be a primitive type in the JSON string but got " + data['longSummary']);
        }
        if (data['plans']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['plans'])) {
                throw new Error("Expected the field `plans` to be an array in the JSON data but got " + data['plans']);
            }
            // validate the optional field `plans` (array)
            for (const item of data['plans']) {
                Plan.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['publisherDisplayName'] && !(typeof data['publisherDisplayName'] === 'string' || data['publisherDisplayName'] instanceof String)) {
            throw new Error("Expected the field `publisherDisplayName` to be a primitive type in the JSON string but got " + data['publisherDisplayName']);
        }
        // ensure the json data is a string
        if (data['summary'] && !(typeof data['summary'] === 'string' || data['summary'] instanceof String)) {
            throw new Error("Expected the field `summary` to be a primitive type in the JSON string but got " + data['summary']);
        }

        return true;
    }


}



/**
 * Description of offer
 * @member {String} description
 */
Offer.prototype['description'] = undefined;

/**
 * It will be displayed prominently in the marketplace
 * @member {String} displayName
 */
Offer.prototype['displayName'] = undefined;

/**
 * Identifier for purposes of race condition
 * @member {String} eTag
 */
Offer.prototype['eTag'] = undefined;

/**
 * Offers unique id
 * @member {String} id
 */
Offer.prototype['id'] = undefined;

/**
 * Purpose or function of offer
 * @member {String} longSummary
 */
Offer.prototype['longSummary'] = undefined;

/**
 * @member {Array.<module:model/Plan>} plans
 */
Offer.prototype['plans'] = undefined;

/**
 * Publisher name that will be displayed prominently in the marketplace
 * @member {String} publisherDisplayName
 */
Offer.prototype['publisherDisplayName'] = undefined;

/**
 * Brief purpose or function of offer
 * @member {String} summary
 */
Offer.prototype['summary'] = undefined;






export default Offer;

