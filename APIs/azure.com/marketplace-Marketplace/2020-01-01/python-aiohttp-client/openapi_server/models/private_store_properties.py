# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PrivateStoreProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability: str=None, name: str=None):
        """PrivateStoreProperties - a model defined in OpenAPI

        :param availability: The availability of this PrivateStoreProperties.
        :param name: The name of this PrivateStoreProperties.
        """
        self.openapi_types = {
            'availability': str,
            'name': str
        }

        self.attribute_map = {
            'availability': 'availability',
            'name': 'name'
        }

        self._availability = availability
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrivateStoreProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrivateStoreProperties of this PrivateStoreProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability(self):
        """Gets the availability of this PrivateStoreProperties.

        Indicates private store availability

        :return: The availability of this PrivateStoreProperties.
        :rtype: str
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this PrivateStoreProperties.

        Indicates private store availability

        :param availability: The availability of this PrivateStoreProperties.
        :type availability: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if availability not in allowed_values:
            raise ValueError(
                "Invalid value for `availability` ({0}), must be one of {1}"
                .format(availability, allowed_values)
            )

        self._availability = availability

    @property
    def name(self):
        """Gets the name of this PrivateStoreProperties.

        Private Store name

        :return: The name of this PrivateStoreProperties.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PrivateStoreProperties.

        Private Store name

        :param name: The name of this PrivateStoreProperties.
        :type name: str
        """

        self._name = name
