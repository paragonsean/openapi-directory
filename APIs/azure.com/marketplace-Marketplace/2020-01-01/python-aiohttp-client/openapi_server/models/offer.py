# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.plan import Plan
from openapi_server import util


class Offer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, display_name: str=None, e_tag: str=None, id: str=None, long_summary: str=None, plans: List[Plan]=None, publisher_display_name: str=None, summary: str=None):
        """Offer - a model defined in OpenAPI

        :param description: The description of this Offer.
        :param display_name: The display_name of this Offer.
        :param e_tag: The e_tag of this Offer.
        :param id: The id of this Offer.
        :param long_summary: The long_summary of this Offer.
        :param plans: The plans of this Offer.
        :param publisher_display_name: The publisher_display_name of this Offer.
        :param summary: The summary of this Offer.
        """
        self.openapi_types = {
            'description': str,
            'display_name': str,
            'e_tag': str,
            'id': str,
            'long_summary': str,
            'plans': List[Plan],
            'publisher_display_name': str,
            'summary': str
        }

        self.attribute_map = {
            'description': 'description',
            'display_name': 'displayName',
            'e_tag': 'eTag',
            'id': 'id',
            'long_summary': 'longSummary',
            'plans': 'plans',
            'publisher_display_name': 'publisherDisplayName',
            'summary': 'summary'
        }

        self._description = description
        self._display_name = display_name
        self._e_tag = e_tag
        self._id = id
        self._long_summary = long_summary
        self._plans = plans
        self._publisher_display_name = publisher_display_name
        self._summary = summary

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Offer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Offer of this Offer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Offer.

        Description of offer

        :return: The description of this Offer.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Offer.

        Description of offer

        :param description: The description of this Offer.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this Offer.

        It will be displayed prominently in the marketplace

        :return: The display_name of this Offer.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Offer.

        It will be displayed prominently in the marketplace

        :param display_name: The display_name of this Offer.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def e_tag(self):
        """Gets the e_tag of this Offer.

        Identifier for purposes of race condition

        :return: The e_tag of this Offer.
        :rtype: str
        """
        return self._e_tag

    @e_tag.setter
    def e_tag(self, e_tag):
        """Sets the e_tag of this Offer.

        Identifier for purposes of race condition

        :param e_tag: The e_tag of this Offer.
        :type e_tag: str
        """

        self._e_tag = e_tag

    @property
    def id(self):
        """Gets the id of this Offer.

        Offers unique id

        :return: The id of this Offer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Offer.

        Offers unique id

        :param id: The id of this Offer.
        :type id: str
        """

        self._id = id

    @property
    def long_summary(self):
        """Gets the long_summary of this Offer.

        Purpose or function of offer

        :return: The long_summary of this Offer.
        :rtype: str
        """
        return self._long_summary

    @long_summary.setter
    def long_summary(self, long_summary):
        """Sets the long_summary of this Offer.

        Purpose or function of offer

        :param long_summary: The long_summary of this Offer.
        :type long_summary: str
        """

        self._long_summary = long_summary

    @property
    def plans(self):
        """Gets the plans of this Offer.


        :return: The plans of this Offer.
        :rtype: List[Plan]
        """
        return self._plans

    @plans.setter
    def plans(self, plans):
        """Sets the plans of this Offer.


        :param plans: The plans of this Offer.
        :type plans: List[Plan]
        """

        self._plans = plans

    @property
    def publisher_display_name(self):
        """Gets the publisher_display_name of this Offer.

        Publisher name that will be displayed prominently in the marketplace

        :return: The publisher_display_name of this Offer.
        :rtype: str
        """
        return self._publisher_display_name

    @publisher_display_name.setter
    def publisher_display_name(self, publisher_display_name):
        """Sets the publisher_display_name of this Offer.

        Publisher name that will be displayed prominently in the marketplace

        :param publisher_display_name: The publisher_display_name of this Offer.
        :type publisher_display_name: str
        """

        self._publisher_display_name = publisher_display_name

    @property
    def summary(self):
        """Gets the summary of this Offer.

        Brief purpose or function of offer

        :return: The summary of this Offer.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this Offer.

        Brief purpose or function of offer

        :param summary: The summary of this Offer.
        :type summary: str
        """

        self._summary = summary
