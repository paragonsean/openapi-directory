/**
 * Marketplace RP Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2020-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOffer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOffer::OAIOffer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOffer::OAIOffer() {
    this->initializeModel();
}

OAIOffer::~OAIOffer() {}

void OAIOffer::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_e_tag_isSet = false;
    m_e_tag_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_long_summary_isSet = false;
    m_long_summary_isValid = false;

    m_plans_isSet = false;
    m_plans_isValid = false;

    m_publisher_display_name_isSet = false;
    m_publisher_display_name_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;
}

void OAIOffer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOffer::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_e_tag_isValid = ::OpenAPI::fromJsonValue(m_e_tag, json[QString("eTag")]);
    m_e_tag_isSet = !json[QString("eTag")].isNull() && m_e_tag_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_long_summary_isValid = ::OpenAPI::fromJsonValue(m_long_summary, json[QString("longSummary")]);
    m_long_summary_isSet = !json[QString("longSummary")].isNull() && m_long_summary_isValid;

    m_plans_isValid = ::OpenAPI::fromJsonValue(m_plans, json[QString("plans")]);
    m_plans_isSet = !json[QString("plans")].isNull() && m_plans_isValid;

    m_publisher_display_name_isValid = ::OpenAPI::fromJsonValue(m_publisher_display_name, json[QString("publisherDisplayName")]);
    m_publisher_display_name_isSet = !json[QString("publisherDisplayName")].isNull() && m_publisher_display_name_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;
}

QString OAIOffer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOffer::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_e_tag_isSet) {
        obj.insert(QString("eTag"), ::OpenAPI::toJsonValue(m_e_tag));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_long_summary_isSet) {
        obj.insert(QString("longSummary"), ::OpenAPI::toJsonValue(m_long_summary));
    }
    if (m_plans.size() > 0) {
        obj.insert(QString("plans"), ::OpenAPI::toJsonValue(m_plans));
    }
    if (m_publisher_display_name_isSet) {
        obj.insert(QString("publisherDisplayName"), ::OpenAPI::toJsonValue(m_publisher_display_name));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    return obj;
}

QString OAIOffer::getDescription() const {
    return m_description;
}
void OAIOffer::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIOffer::is_description_Set() const{
    return m_description_isSet;
}

bool OAIOffer::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIOffer::getDisplayName() const {
    return m_display_name;
}
void OAIOffer::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIOffer::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIOffer::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIOffer::getETag() const {
    return m_e_tag;
}
void OAIOffer::setETag(const QString &e_tag) {
    m_e_tag = e_tag;
    m_e_tag_isSet = true;
}

bool OAIOffer::is_e_tag_Set() const{
    return m_e_tag_isSet;
}

bool OAIOffer::is_e_tag_Valid() const{
    return m_e_tag_isValid;
}

QString OAIOffer::getId() const {
    return m_id;
}
void OAIOffer::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOffer::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOffer::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIOffer::getLongSummary() const {
    return m_long_summary;
}
void OAIOffer::setLongSummary(const QString &long_summary) {
    m_long_summary = long_summary;
    m_long_summary_isSet = true;
}

bool OAIOffer::is_long_summary_Set() const{
    return m_long_summary_isSet;
}

bool OAIOffer::is_long_summary_Valid() const{
    return m_long_summary_isValid;
}

QList<OAIPlan> OAIOffer::getPlans() const {
    return m_plans;
}
void OAIOffer::setPlans(const QList<OAIPlan> &plans) {
    m_plans = plans;
    m_plans_isSet = true;
}

bool OAIOffer::is_plans_Set() const{
    return m_plans_isSet;
}

bool OAIOffer::is_plans_Valid() const{
    return m_plans_isValid;
}

QString OAIOffer::getPublisherDisplayName() const {
    return m_publisher_display_name;
}
void OAIOffer::setPublisherDisplayName(const QString &publisher_display_name) {
    m_publisher_display_name = publisher_display_name;
    m_publisher_display_name_isSet = true;
}

bool OAIOffer::is_publisher_display_name_Set() const{
    return m_publisher_display_name_isSet;
}

bool OAIOffer::is_publisher_display_name_Valid() const{
    return m_publisher_display_name_isValid;
}

QString OAIOffer::getSummary() const {
    return m_summary;
}
void OAIOffer::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIOffer::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIOffer::is_summary_Valid() const{
    return m_summary_isValid;
}

bool OAIOffer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plans.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOffer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
