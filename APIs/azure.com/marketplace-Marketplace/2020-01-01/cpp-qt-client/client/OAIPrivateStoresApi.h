/**
 * Marketplace RP Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2020-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPrivateStoresApi_H
#define OAI_OAIPrivateStoresApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIOffer.h"
#include "OAIOfferListResponse.h"
#include "OAIPrivateStoreList.h"
#include "OAIPrivateStoreProperties.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPrivateStoresApi : public QObject {
    Q_OBJECT

public:
    OAIPrivateStoresApi(const int timeOut = 0);
    ~OAIPrivateStoresApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  private_store_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  payload OAIPrivateStoreProperties [optional]
    */
    virtual void privateStoreCreateOrUpdate(const QString &private_store_id, const QString &api_version, const ::OpenAPI::OptionalParam<OAIPrivateStoreProperties> &payload = ::OpenAPI::OptionalParam<OAIPrivateStoreProperties>());

    /**
    * @param[in]  private_store_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void privateStoreDelete(const QString &private_store_id, const QString &api_version);

    /**
    * @param[in]  private_store_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void privateStoreGet(const QString &private_store_id, const QString &api_version);

    /**
    * @param[in]  api_version QString [required]
    */
    virtual void privateStoreList(const QString &api_version);

    /**
    * @param[in]  offer_id QString [required]
    * @param[in]  private_store_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  payload OAIOffer [optional]
    */
    virtual void privateStoreOfferCreateOrUpdate(const QString &offer_id, const QString &private_store_id, const QString &api_version, const ::OpenAPI::OptionalParam<OAIOffer> &payload = ::OpenAPI::OptionalParam<OAIOffer>());

    /**
    * @param[in]  offer_id QString [required]
    * @param[in]  private_store_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void privateStoreOfferDelete(const QString &offer_id, const QString &private_store_id, const QString &api_version);

    /**
    * @param[in]  offer_id QString [required]
    * @param[in]  private_store_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void privateStoreOfferGet(const QString &offer_id, const QString &private_store_id, const QString &api_version);

    /**
    * @param[in]  private_store_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void privateStoreOffersList(const QString &private_store_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void privateStoreCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void privateStoreDeleteCallback(OAIHttpRequestWorker *worker);
    void privateStoreGetCallback(OAIHttpRequestWorker *worker);
    void privateStoreListCallback(OAIHttpRequestWorker *worker);
    void privateStoreOfferCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void privateStoreOfferDeleteCallback(OAIHttpRequestWorker *worker);
    void privateStoreOfferGetCallback(OAIHttpRequestWorker *worker);
    void privateStoreOffersListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void privateStoreCreateOrUpdateSignal(OAIPrivateStoreProperties summary);
    void privateStoreDeleteSignal();
    void privateStoreGetSignal(OAIPrivateStoreProperties summary);
    void privateStoreListSignal(OAIPrivateStoreList summary);
    void privateStoreOfferCreateOrUpdateSignal(OAIOffer summary);
    void privateStoreOfferDeleteSignal();
    void privateStoreOfferGetSignal(OAIOffer summary);
    void privateStoreOffersListSignal(OAIOfferListResponse summary);


    void privateStoreCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPrivateStoreProperties summary);
    void privateStoreDeleteSignalFull(OAIHttpRequestWorker *worker);
    void privateStoreGetSignalFull(OAIHttpRequestWorker *worker, OAIPrivateStoreProperties summary);
    void privateStoreListSignalFull(OAIHttpRequestWorker *worker, OAIPrivateStoreList summary);
    void privateStoreOfferCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIOffer summary);
    void privateStoreOfferDeleteSignalFull(OAIHttpRequestWorker *worker);
    void privateStoreOfferGetSignalFull(OAIHttpRequestWorker *worker, OAIOffer summary);
    void privateStoreOffersListSignalFull(OAIHttpRequestWorker *worker, OAIOfferListResponse summary);

    Q_DECL_DEPRECATED_X("Use privateStoreCreateOrUpdateSignalError() instead")
    void privateStoreCreateOrUpdateSignalE(OAIPrivateStoreProperties summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateStoreCreateOrUpdateSignalError(OAIPrivateStoreProperties summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateStoreDeleteSignalError() instead")
    void privateStoreDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateStoreDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateStoreGetSignalError() instead")
    void privateStoreGetSignalE(OAIPrivateStoreProperties summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateStoreGetSignalError(OAIPrivateStoreProperties summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateStoreListSignalError() instead")
    void privateStoreListSignalE(OAIPrivateStoreList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateStoreListSignalError(OAIPrivateStoreList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateStoreOfferCreateOrUpdateSignalError() instead")
    void privateStoreOfferCreateOrUpdateSignalE(OAIOffer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateStoreOfferCreateOrUpdateSignalError(OAIOffer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateStoreOfferDeleteSignalError() instead")
    void privateStoreOfferDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateStoreOfferDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateStoreOfferGetSignalError() instead")
    void privateStoreOfferGetSignalE(OAIOffer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateStoreOfferGetSignalError(OAIOffer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateStoreOffersListSignalError() instead")
    void privateStoreOffersListSignalE(OAIOfferListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateStoreOffersListSignalError(OAIOfferListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use privateStoreCreateOrUpdateSignalErrorFull() instead")
    void privateStoreCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateStoreCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateStoreDeleteSignalErrorFull() instead")
    void privateStoreDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateStoreDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateStoreGetSignalErrorFull() instead")
    void privateStoreGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateStoreGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateStoreListSignalErrorFull() instead")
    void privateStoreListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateStoreListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateStoreOfferCreateOrUpdateSignalErrorFull() instead")
    void privateStoreOfferCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateStoreOfferCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateStoreOfferDeleteSignalErrorFull() instead")
    void privateStoreOfferDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateStoreOfferDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateStoreOfferGetSignalErrorFull() instead")
    void privateStoreOfferGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateStoreOfferGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateStoreOffersListSignalErrorFull() instead")
    void privateStoreOffersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateStoreOffersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
