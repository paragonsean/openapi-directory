/*
 * Marketplace RP Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2020-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.Offer;
import org.openapitools.client.model.OfferListResponse;
import org.openapitools.client.model.PrivateStoreList;
import org.openapitools.client.model.PrivateStoreProperties;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PrivateStoresApi
 */
@Disabled
public class PrivateStoresApiTest {

    private final PrivateStoresApi api = new PrivateStoresApi();

    /**
     * Changes private store properties
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateStoreCreateOrUpdateTest() throws ApiException {
        String privateStoreId = null;
        String apiVersion = null;
        PrivateStoreProperties payload = null;
        PrivateStoreProperties response = api.privateStoreCreateOrUpdate(privateStoreId, apiVersion, payload);
        // TODO: test validations
    }

    /**
     * Deletes the private store. All that is not saved will be lost.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateStoreDeleteTest() throws ApiException {
        String privateStoreId = null;
        String apiVersion = null;
        api.privateStoreDelete(privateStoreId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get information about the private store
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateStoreGetTest() throws ApiException {
        String privateStoreId = null;
        String apiVersion = null;
        PrivateStoreProperties response = api.privateStoreGet(privateStoreId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the list of available private stores
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateStoreListTest() throws ApiException {
        String apiVersion = null;
        PrivateStoreList response = api.privateStoreList(apiVersion);
        // TODO: test validations
    }

    /**
     * Update or add an offer to the default collection of the private store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateStoreOfferCreateOrUpdateTest() throws ApiException {
        String offerId = null;
        String privateStoreId = null;
        String apiVersion = null;
        Offer payload = null;
        Offer response = api.privateStoreOfferCreateOrUpdate(offerId, privateStoreId, apiVersion, payload);
        // TODO: test validations
    }

    /**
     * Deletes an offer from the given private store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateStoreOfferDeleteTest() throws ApiException {
        String offerId = null;
        String privateStoreId = null;
        String apiVersion = null;
        api.privateStoreOfferDelete(offerId, privateStoreId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets information about a specific offer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateStoreOfferGetTest() throws ApiException {
        String offerId = null;
        String privateStoreId = null;
        String apiVersion = null;
        Offer response = api.privateStoreOfferGet(offerId, privateStoreId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get a list of all private offers in the given private store
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateStoreOffersListTest() throws ApiException {
        String privateStoreId = null;
        String apiVersion = null;
        OfferListResponse response = api.privateStoreOffersList(privateStoreId, apiVersion);
        // TODO: test validations
    }

}
