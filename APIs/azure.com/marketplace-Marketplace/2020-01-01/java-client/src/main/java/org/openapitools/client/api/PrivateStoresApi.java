/*
 * Marketplace RP Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2020-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.Offer;
import org.openapitools.client.model.OfferListResponse;
import org.openapitools.client.model.PrivateStoreList;
import org.openapitools.client.model.PrivateStoreProperties;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PrivateStoresApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PrivateStoresApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PrivateStoresApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for privateStoreCreateOrUpdate
     * @param privateStoreId The store ID - must use the tenant ID (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param payload  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.Marketplace error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateStoreCreateOrUpdateCall(String privateStoreId, String apiVersion, PrivateStoreProperties payload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Marketplace/privateStores/{PrivateStoreId}"
            .replace("{" + "PrivateStoreId" + "}", localVarApiClient.escapeString(privateStoreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call privateStoreCreateOrUpdateValidateBeforeCall(String privateStoreId, String apiVersion, PrivateStoreProperties payload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'privateStoreId' is set
        if (privateStoreId == null) {
            throw new ApiException("Missing the required parameter 'privateStoreId' when calling privateStoreCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling privateStoreCreateOrUpdate(Async)");
        }

        return privateStoreCreateOrUpdateCall(privateStoreId, apiVersion, payload, _callback);

    }

    /**
     * 
     * Changes private store properties
     * @param privateStoreId The store ID - must use the tenant ID (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param payload  (optional)
     * @return PrivateStoreProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.Marketplace error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public PrivateStoreProperties privateStoreCreateOrUpdate(String privateStoreId, String apiVersion, PrivateStoreProperties payload) throws ApiException {
        ApiResponse<PrivateStoreProperties> localVarResp = privateStoreCreateOrUpdateWithHttpInfo(privateStoreId, apiVersion, payload);
        return localVarResp.getData();
    }

    /**
     * 
     * Changes private store properties
     * @param privateStoreId The store ID - must use the tenant ID (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param payload  (optional)
     * @return ApiResponse&lt;PrivateStoreProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.Marketplace error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrivateStoreProperties> privateStoreCreateOrUpdateWithHttpInfo(String privateStoreId, String apiVersion, PrivateStoreProperties payload) throws ApiException {
        okhttp3.Call localVarCall = privateStoreCreateOrUpdateValidateBeforeCall(privateStoreId, apiVersion, payload, null);
        Type localVarReturnType = new TypeToken<PrivateStoreProperties>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Changes private store properties
     * @param privateStoreId The store ID - must use the tenant ID (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param payload  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.Marketplace error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateStoreCreateOrUpdateAsync(String privateStoreId, String apiVersion, PrivateStoreProperties payload, final ApiCallback<PrivateStoreProperties> _callback) throws ApiException {

        okhttp3.Call localVarCall = privateStoreCreateOrUpdateValidateBeforeCall(privateStoreId, apiVersion, payload, _callback);
        Type localVarReturnType = new TypeToken<PrivateStoreProperties>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for privateStoreDelete
     * @param privateStoreId The store ID - must use the tenant ID (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Private store was deleted successfully . </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.Marketplace error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateStoreDeleteCall(String privateStoreId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Marketplace/privateStores/{PrivateStoreId}"
            .replace("{" + "PrivateStoreId" + "}", localVarApiClient.escapeString(privateStoreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call privateStoreDeleteValidateBeforeCall(String privateStoreId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'privateStoreId' is set
        if (privateStoreId == null) {
            throw new ApiException("Missing the required parameter 'privateStoreId' when calling privateStoreDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling privateStoreDelete(Async)");
        }

        return privateStoreDeleteCall(privateStoreId, apiVersion, _callback);

    }

    /**
     * 
     * Deletes the private store. All that is not saved will be lost.
     * @param privateStoreId The store ID - must use the tenant ID (required)
     * @param apiVersion The API version to use for the request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Private store was deleted successfully . </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.Marketplace error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void privateStoreDelete(String privateStoreId, String apiVersion) throws ApiException {
        privateStoreDeleteWithHttpInfo(privateStoreId, apiVersion);
    }

    /**
     * 
     * Deletes the private store. All that is not saved will be lost.
     * @param privateStoreId The store ID - must use the tenant ID (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Private store was deleted successfully . </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.Marketplace error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> privateStoreDeleteWithHttpInfo(String privateStoreId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = privateStoreDeleteValidateBeforeCall(privateStoreId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the private store. All that is not saved will be lost.
     * @param privateStoreId The store ID - must use the tenant ID (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Private store was deleted successfully . </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.Marketplace error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateStoreDeleteAsync(String privateStoreId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = privateStoreDeleteValidateBeforeCall(privateStoreId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for privateStoreGet
     * @param privateStoreId The store ID - must use the tenant ID (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.Marketplace error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateStoreGetCall(String privateStoreId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Marketplace/privateStores/{PrivateStoreId}"
            .replace("{" + "PrivateStoreId" + "}", localVarApiClient.escapeString(privateStoreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call privateStoreGetValidateBeforeCall(String privateStoreId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'privateStoreId' is set
        if (privateStoreId == null) {
            throw new ApiException("Missing the required parameter 'privateStoreId' when calling privateStoreGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling privateStoreGet(Async)");
        }

        return privateStoreGetCall(privateStoreId, apiVersion, _callback);

    }

    /**
     * 
     * Get information about the private store
     * @param privateStoreId The store ID - must use the tenant ID (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return PrivateStoreProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.Marketplace error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public PrivateStoreProperties privateStoreGet(String privateStoreId, String apiVersion) throws ApiException {
        ApiResponse<PrivateStoreProperties> localVarResp = privateStoreGetWithHttpInfo(privateStoreId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get information about the private store
     * @param privateStoreId The store ID - must use the tenant ID (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ApiResponse&lt;PrivateStoreProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.Marketplace error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrivateStoreProperties> privateStoreGetWithHttpInfo(String privateStoreId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = privateStoreGetValidateBeforeCall(privateStoreId, apiVersion, null);
        Type localVarReturnType = new TypeToken<PrivateStoreProperties>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get information about the private store
     * @param privateStoreId The store ID - must use the tenant ID (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.Marketplace error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateStoreGetAsync(String privateStoreId, String apiVersion, final ApiCallback<PrivateStoreProperties> _callback) throws ApiException {

        okhttp3.Call localVarCall = privateStoreGetValidateBeforeCall(privateStoreId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<PrivateStoreProperties>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for privateStoreList
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateStoreListCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Marketplace/privateStores";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call privateStoreListValidateBeforeCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling privateStoreList(Async)");
        }

        return privateStoreListCall(apiVersion, _callback);

    }

    /**
     * 
     * Gets the list of available private stores
     * @param apiVersion The API version to use for the request. (required)
     * @return PrivateStoreList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public PrivateStoreList privateStoreList(String apiVersion) throws ApiException {
        ApiResponse<PrivateStoreList> localVarResp = privateStoreListWithHttpInfo(apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the list of available private stores
     * @param apiVersion The API version to use for the request. (required)
     * @return ApiResponse&lt;PrivateStoreList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrivateStoreList> privateStoreListWithHttpInfo(String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = privateStoreListValidateBeforeCall(apiVersion, null);
        Type localVarReturnType = new TypeToken<PrivateStoreList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the list of available private stores
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateStoreListAsync(String apiVersion, final ApiCallback<PrivateStoreList> _callback) throws ApiException {

        okhttp3.Call localVarCall = privateStoreListValidateBeforeCall(apiVersion, _callback);
        Type localVarReturnType = new TypeToken<PrivateStoreList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for privateStoreOfferCreateOrUpdate
     * @param offerId The offer ID to update or delete (required)
     * @param privateStoreId The store ID - must use the tenant ID (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param payload  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.Marketplace error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateStoreOfferCreateOrUpdateCall(String offerId, String privateStoreId, String apiVersion, Offer payload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Marketplace/privateStores/{PrivateStoreId}/offers/{OfferId}"
            .replace("{" + "OfferId" + "}", localVarApiClient.escapeString(offerId.toString()))
            .replace("{" + "PrivateStoreId" + "}", localVarApiClient.escapeString(privateStoreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call privateStoreOfferCreateOrUpdateValidateBeforeCall(String offerId, String privateStoreId, String apiVersion, Offer payload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offerId' is set
        if (offerId == null) {
            throw new ApiException("Missing the required parameter 'offerId' when calling privateStoreOfferCreateOrUpdate(Async)");
        }

        // verify the required parameter 'privateStoreId' is set
        if (privateStoreId == null) {
            throw new ApiException("Missing the required parameter 'privateStoreId' when calling privateStoreOfferCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling privateStoreOfferCreateOrUpdate(Async)");
        }

        return privateStoreOfferCreateOrUpdateCall(offerId, privateStoreId, apiVersion, payload, _callback);

    }

    /**
     * 
     * Update or add an offer to the default collection of the private store.
     * @param offerId The offer ID to update or delete (required)
     * @param privateStoreId The store ID - must use the tenant ID (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param payload  (optional)
     * @return Offer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.Marketplace error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Offer privateStoreOfferCreateOrUpdate(String offerId, String privateStoreId, String apiVersion, Offer payload) throws ApiException {
        ApiResponse<Offer> localVarResp = privateStoreOfferCreateOrUpdateWithHttpInfo(offerId, privateStoreId, apiVersion, payload);
        return localVarResp.getData();
    }

    /**
     * 
     * Update or add an offer to the default collection of the private store.
     * @param offerId The offer ID to update or delete (required)
     * @param privateStoreId The store ID - must use the tenant ID (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param payload  (optional)
     * @return ApiResponse&lt;Offer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.Marketplace error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Offer> privateStoreOfferCreateOrUpdateWithHttpInfo(String offerId, String privateStoreId, String apiVersion, Offer payload) throws ApiException {
        okhttp3.Call localVarCall = privateStoreOfferCreateOrUpdateValidateBeforeCall(offerId, privateStoreId, apiVersion, payload, null);
        Type localVarReturnType = new TypeToken<Offer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update or add an offer to the default collection of the private store.
     * @param offerId The offer ID to update or delete (required)
     * @param privateStoreId The store ID - must use the tenant ID (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param payload  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.Marketplace error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateStoreOfferCreateOrUpdateAsync(String offerId, String privateStoreId, String apiVersion, Offer payload, final ApiCallback<Offer> _callback) throws ApiException {

        okhttp3.Call localVarCall = privateStoreOfferCreateOrUpdateValidateBeforeCall(offerId, privateStoreId, apiVersion, payload, _callback);
        Type localVarReturnType = new TypeToken<Offer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for privateStoreOfferDelete
     * @param offerId The offer ID to update or delete (required)
     * @param privateStoreId The store ID - must use the tenant ID (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer was deleted successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.Marketplace error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateStoreOfferDeleteCall(String offerId, String privateStoreId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Marketplace/privateStores/{PrivateStoreId}/offers/{OfferId}"
            .replace("{" + "OfferId" + "}", localVarApiClient.escapeString(offerId.toString()))
            .replace("{" + "PrivateStoreId" + "}", localVarApiClient.escapeString(privateStoreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call privateStoreOfferDeleteValidateBeforeCall(String offerId, String privateStoreId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offerId' is set
        if (offerId == null) {
            throw new ApiException("Missing the required parameter 'offerId' when calling privateStoreOfferDelete(Async)");
        }

        // verify the required parameter 'privateStoreId' is set
        if (privateStoreId == null) {
            throw new ApiException("Missing the required parameter 'privateStoreId' when calling privateStoreOfferDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling privateStoreOfferDelete(Async)");
        }

        return privateStoreOfferDeleteCall(offerId, privateStoreId, apiVersion, _callback);

    }

    /**
     * 
     * Deletes an offer from the given private store.
     * @param offerId The offer ID to update or delete (required)
     * @param privateStoreId The store ID - must use the tenant ID (required)
     * @param apiVersion The API version to use for the request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer was deleted successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.Marketplace error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void privateStoreOfferDelete(String offerId, String privateStoreId, String apiVersion) throws ApiException {
        privateStoreOfferDeleteWithHttpInfo(offerId, privateStoreId, apiVersion);
    }

    /**
     * 
     * Deletes an offer from the given private store.
     * @param offerId The offer ID to update or delete (required)
     * @param privateStoreId The store ID - must use the tenant ID (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer was deleted successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.Marketplace error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> privateStoreOfferDeleteWithHttpInfo(String offerId, String privateStoreId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = privateStoreOfferDeleteValidateBeforeCall(offerId, privateStoreId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an offer from the given private store.
     * @param offerId The offer ID to update or delete (required)
     * @param privateStoreId The store ID - must use the tenant ID (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer was deleted successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.Marketplace error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateStoreOfferDeleteAsync(String offerId, String privateStoreId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = privateStoreOfferDeleteValidateBeforeCall(offerId, privateStoreId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for privateStoreOfferGet
     * @param offerId The offer ID to update or delete (required)
     * @param privateStoreId The store ID - must use the tenant ID (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer information retrieved </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.Marketplace error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateStoreOfferGetCall(String offerId, String privateStoreId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Marketplace/privateStores/{PrivateStoreId}/offers/{OfferId}"
            .replace("{" + "OfferId" + "}", localVarApiClient.escapeString(offerId.toString()))
            .replace("{" + "PrivateStoreId" + "}", localVarApiClient.escapeString(privateStoreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call privateStoreOfferGetValidateBeforeCall(String offerId, String privateStoreId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offerId' is set
        if (offerId == null) {
            throw new ApiException("Missing the required parameter 'offerId' when calling privateStoreOfferGet(Async)");
        }

        // verify the required parameter 'privateStoreId' is set
        if (privateStoreId == null) {
            throw new ApiException("Missing the required parameter 'privateStoreId' when calling privateStoreOfferGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling privateStoreOfferGet(Async)");
        }

        return privateStoreOfferGetCall(offerId, privateStoreId, apiVersion, _callback);

    }

    /**
     * 
     * Gets information about a specific offer.
     * @param offerId The offer ID to update or delete (required)
     * @param privateStoreId The store ID - must use the tenant ID (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return Offer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer information retrieved </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.Marketplace error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Offer privateStoreOfferGet(String offerId, String privateStoreId, String apiVersion) throws ApiException {
        ApiResponse<Offer> localVarResp = privateStoreOfferGetWithHttpInfo(offerId, privateStoreId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about a specific offer.
     * @param offerId The offer ID to update or delete (required)
     * @param privateStoreId The store ID - must use the tenant ID (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ApiResponse&lt;Offer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer information retrieved </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.Marketplace error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Offer> privateStoreOfferGetWithHttpInfo(String offerId, String privateStoreId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = privateStoreOfferGetValidateBeforeCall(offerId, privateStoreId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Offer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about a specific offer.
     * @param offerId The offer ID to update or delete (required)
     * @param privateStoreId The store ID - must use the tenant ID (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer information retrieved </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.Marketplace error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateStoreOfferGetAsync(String offerId, String privateStoreId, String apiVersion, final ApiCallback<Offer> _callback) throws ApiException {

        okhttp3.Call localVarCall = privateStoreOfferGetValidateBeforeCall(offerId, privateStoreId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Offer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for privateStoreOffersList
     * @param privateStoreId The store ID - must use the tenant ID (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.Marketplace error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateStoreOffersListCall(String privateStoreId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Marketplace/privateStores/{PrivateStoreId}/offers"
            .replace("{" + "PrivateStoreId" + "}", localVarApiClient.escapeString(privateStoreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call privateStoreOffersListValidateBeforeCall(String privateStoreId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'privateStoreId' is set
        if (privateStoreId == null) {
            throw new ApiException("Missing the required parameter 'privateStoreId' when calling privateStoreOffersList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling privateStoreOffersList(Async)");
        }

        return privateStoreOffersListCall(privateStoreId, apiVersion, _callback);

    }

    /**
     * 
     * Get a list of all private offers in the given private store
     * @param privateStoreId The store ID - must use the tenant ID (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return OfferListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.Marketplace error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public OfferListResponse privateStoreOffersList(String privateStoreId, String apiVersion) throws ApiException {
        ApiResponse<OfferListResponse> localVarResp = privateStoreOffersListWithHttpInfo(privateStoreId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all private offers in the given private store
     * @param privateStoreId The store ID - must use the tenant ID (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ApiResponse&lt;OfferListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.Marketplace error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OfferListResponse> privateStoreOffersListWithHttpInfo(String privateStoreId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = privateStoreOffersListValidateBeforeCall(privateStoreId, apiVersion, null);
        Type localVarReturnType = new TypeToken<OfferListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all private offers in the given private store
     * @param privateStoreId The store ID - must use the tenant ID (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.Marketplace error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateStoreOffersListAsync(String privateStoreId, String apiVersion, final ApiCallback<OfferListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = privateStoreOffersListValidateBeforeCall(privateStoreId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<OfferListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
