# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NWRuleSetIpRules(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, ip_mask: str=None):
        """NWRuleSetIpRules - a model defined in OpenAPI

        :param action: The action of this NWRuleSetIpRules.
        :param ip_mask: The ip_mask of this NWRuleSetIpRules.
        """
        self.openapi_types = {
            'action': str,
            'ip_mask': str
        }

        self.attribute_map = {
            'action': 'action',
            'ip_mask': 'ipMask'
        }

        self._action = action
        self._ip_mask = ip_mask

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NWRuleSetIpRules':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NWRuleSetIpRules of this NWRuleSetIpRules.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this NWRuleSetIpRules.

        The IP Filter Action

        :return: The action of this NWRuleSetIpRules.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this NWRuleSetIpRules.

        The IP Filter Action

        :param action: The action of this NWRuleSetIpRules.
        :type action: str
        """
        allowed_values = ["Allow"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def ip_mask(self):
        """Gets the ip_mask of this NWRuleSetIpRules.

        IP Mask

        :return: The ip_mask of this NWRuleSetIpRules.
        :rtype: str
        """
        return self._ip_mask

    @ip_mask.setter
    def ip_mask(self, ip_mask):
        """Sets the ip_mask of this NWRuleSetIpRules.

        IP Mask

        :param ip_mask: The ip_mask of this NWRuleSetIpRules.
        :type ip_mask: str
        """

        self._ip_mask = ip_mask
