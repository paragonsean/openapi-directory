/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Email Templates associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2019-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEmailTemplatesApi_H
#define OAI_OAIEmailTemplatesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEmailTemplate_CreateOrUpdate_request.h"
#include "OAIEmailTemplate_Get_200_response.h"
#include "OAIEmailTemplate_ListByService_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEmailTemplatesApi : public QObject {
    Q_OBJECT

public:
    OAIEmailTemplatesApi(const int timeOut = 0);
    ~OAIEmailTemplatesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  template_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIEmailTemplate_CreateOrUpdate_request [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void emailTemplateCreateOrUpdate(const QString &resource_group_name, const QString &service_name, const QString &template_name, const QString &api_version, const QString &subscription_id, const OAIEmailTemplate_CreateOrUpdate_request &parameters, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  template_name QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void emailTemplateDelete(const QString &resource_group_name, const QString &service_name, const QString &template_name, const QString &if_match, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  template_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void emailTemplateGet(const QString &resource_group_name, const QString &service_name, const QString &template_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  template_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void emailTemplateGetEntityTag(const QString &resource_group_name, const QString &service_name, const QString &template_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  template_name QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIEmailTemplate_CreateOrUpdate_request [required]
    */
    virtual void emailTemplateUpdate(const QString &resource_group_name, const QString &service_name, const QString &template_name, const QString &if_match, const QString &api_version, const QString &subscription_id, const OAIEmailTemplate_CreateOrUpdate_request &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void emailTemplateCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void emailTemplateDeleteCallback(OAIHttpRequestWorker *worker);
    void emailTemplateGetCallback(OAIHttpRequestWorker *worker);
    void emailTemplateGetEntityTagCallback(OAIHttpRequestWorker *worker);
    void emailTemplateUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void emailTemplateCreateOrUpdateSignal(OAIEmailTemplate_Get_200_response summary);
    void emailTemplateDeleteSignal();
    void emailTemplateGetSignal(OAIEmailTemplate_Get_200_response summary);
    void emailTemplateGetEntityTagSignal();
    void emailTemplateUpdateSignal();


    void emailTemplateCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIEmailTemplate_Get_200_response summary);
    void emailTemplateDeleteSignalFull(OAIHttpRequestWorker *worker);
    void emailTemplateGetSignalFull(OAIHttpRequestWorker *worker, OAIEmailTemplate_Get_200_response summary);
    void emailTemplateGetEntityTagSignalFull(OAIHttpRequestWorker *worker);
    void emailTemplateUpdateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use emailTemplateCreateOrUpdateSignalError() instead")
    void emailTemplateCreateOrUpdateSignalE(OAIEmailTemplate_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void emailTemplateCreateOrUpdateSignalError(OAIEmailTemplate_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use emailTemplateDeleteSignalError() instead")
    void emailTemplateDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void emailTemplateDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use emailTemplateGetSignalError() instead")
    void emailTemplateGetSignalE(OAIEmailTemplate_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void emailTemplateGetSignalError(OAIEmailTemplate_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use emailTemplateGetEntityTagSignalError() instead")
    void emailTemplateGetEntityTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void emailTemplateGetEntityTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use emailTemplateUpdateSignalError() instead")
    void emailTemplateUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void emailTemplateUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use emailTemplateCreateOrUpdateSignalErrorFull() instead")
    void emailTemplateCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void emailTemplateCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use emailTemplateDeleteSignalErrorFull() instead")
    void emailTemplateDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void emailTemplateDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use emailTemplateGetSignalErrorFull() instead")
    void emailTemplateGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void emailTemplateGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use emailTemplateGetEntityTagSignalErrorFull() instead")
    void emailTemplateGetEntityTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void emailTemplateGetEntityTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use emailTemplateUpdateSignalErrorFull() instead")
    void emailTemplateUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void emailTemplateUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
