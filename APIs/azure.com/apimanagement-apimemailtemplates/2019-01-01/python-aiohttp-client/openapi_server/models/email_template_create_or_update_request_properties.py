# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.email_template_list_by_service200_response_value_inner_properties_parameters_inner import EmailTemplateListByService200ResponseValueInnerPropertiesParametersInner
from openapi_server import util


class EmailTemplateCreateOrUpdateRequestProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, description: str=None, parameters: List[EmailTemplateListByService200ResponseValueInnerPropertiesParametersInner]=None, subject: str=None, title: str=None):
        """EmailTemplateCreateOrUpdateRequestProperties - a model defined in OpenAPI

        :param body: The body of this EmailTemplateCreateOrUpdateRequestProperties.
        :param description: The description of this EmailTemplateCreateOrUpdateRequestProperties.
        :param parameters: The parameters of this EmailTemplateCreateOrUpdateRequestProperties.
        :param subject: The subject of this EmailTemplateCreateOrUpdateRequestProperties.
        :param title: The title of this EmailTemplateCreateOrUpdateRequestProperties.
        """
        self.openapi_types = {
            'body': str,
            'description': str,
            'parameters': List[EmailTemplateListByService200ResponseValueInnerPropertiesParametersInner],
            'subject': str,
            'title': str
        }

        self.attribute_map = {
            'body': 'body',
            'description': 'description',
            'parameters': 'parameters',
            'subject': 'subject',
            'title': 'title'
        }

        self._body = body
        self._description = description
        self._parameters = parameters
        self._subject = subject
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmailTemplateCreateOrUpdateRequestProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EmailTemplate_CreateOrUpdate_request_properties of this EmailTemplateCreateOrUpdateRequestProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this EmailTemplateCreateOrUpdateRequestProperties.

        Email Template Body. This should be a valid XDocument

        :return: The body of this EmailTemplateCreateOrUpdateRequestProperties.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this EmailTemplateCreateOrUpdateRequestProperties.

        Email Template Body. This should be a valid XDocument

        :param body: The body of this EmailTemplateCreateOrUpdateRequestProperties.
        :type body: str
        """
        if body is not None and len(body) < 1:
            raise ValueError("Invalid value for `body`, length must be greater than or equal to `1`")

        self._body = body

    @property
    def description(self):
        """Gets the description of this EmailTemplateCreateOrUpdateRequestProperties.

        Description of the Email Template.

        :return: The description of this EmailTemplateCreateOrUpdateRequestProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EmailTemplateCreateOrUpdateRequestProperties.

        Description of the Email Template.

        :param description: The description of this EmailTemplateCreateOrUpdateRequestProperties.
        :type description: str
        """

        self._description = description

    @property
    def parameters(self):
        """Gets the parameters of this EmailTemplateCreateOrUpdateRequestProperties.

        Email Template Parameter values.

        :return: The parameters of this EmailTemplateCreateOrUpdateRequestProperties.
        :rtype: List[EmailTemplateListByService200ResponseValueInnerPropertiesParametersInner]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this EmailTemplateCreateOrUpdateRequestProperties.

        Email Template Parameter values.

        :param parameters: The parameters of this EmailTemplateCreateOrUpdateRequestProperties.
        :type parameters: List[EmailTemplateListByService200ResponseValueInnerPropertiesParametersInner]
        """

        self._parameters = parameters

    @property
    def subject(self):
        """Gets the subject of this EmailTemplateCreateOrUpdateRequestProperties.

        Subject of the Template.

        :return: The subject of this EmailTemplateCreateOrUpdateRequestProperties.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this EmailTemplateCreateOrUpdateRequestProperties.

        Subject of the Template.

        :param subject: The subject of this EmailTemplateCreateOrUpdateRequestProperties.
        :type subject: str
        """
        if subject is not None and len(subject) > 1000:
            raise ValueError("Invalid value for `subject`, length must be less than or equal to `1000`")
        if subject is not None and len(subject) < 1:
            raise ValueError("Invalid value for `subject`, length must be greater than or equal to `1`")

        self._subject = subject

    @property
    def title(self):
        """Gets the title of this EmailTemplateCreateOrUpdateRequestProperties.

        Title of the Template.

        :return: The title of this EmailTemplateCreateOrUpdateRequestProperties.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this EmailTemplateCreateOrUpdateRequestProperties.

        Title of the Template.

        :param title: The title of this EmailTemplateCreateOrUpdateRequestProperties.
        :type title: str
        """

        self._title = title
