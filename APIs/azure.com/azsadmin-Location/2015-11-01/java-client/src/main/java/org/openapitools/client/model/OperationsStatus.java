/*
 * SubscriptionsManagementClient
 * The Admin Subscriptions Management Client.
 *
 * The version of the OpenAPI document: 2015-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ExtendedErrorInfo;
import org.openapitools.client.model.OperationsStatusIdentifier;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A long running operation status.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:17:35.433060-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OperationsStatus {
  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private ExtendedErrorInfo error;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private OperationsStatusIdentifier id;

  public static final String SERIALIZED_NAME_PERCENT_COMPLETE = "percentComplete";
  @SerializedName(SERIALIZED_NAME_PERCENT_COMPLETE)
  private BigDecimal percentComplete;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Object properties;

  public static final String SERIALIZED_NAME_RESPONSE_CONTENT = "responseContent";
  @SerializedName(SERIALIZED_NAME_RESPONSE_CONTENT)
  private Object responseContent;

  public static final String SERIALIZED_NAME_RETRY_AFTER = "retryAfter";
  @SerializedName(SERIALIZED_NAME_RETRY_AFTER)
  private String retryAfter;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TERMINAL_HTTP_STATUS_CODE = "terminalHttpStatusCode";
  @SerializedName(SERIALIZED_NAME_TERMINAL_HTTP_STATUS_CODE)
  private String terminalHttpStatusCode;

  public OperationsStatus() {
  }

  public OperationsStatus endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The end time of the operation.
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public OperationsStatus error(ExtendedErrorInfo error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public ExtendedErrorInfo getError() {
    return error;
  }

  public void setError(ExtendedErrorInfo error) {
    this.error = error;
  }


  public OperationsStatus id(OperationsStatusIdentifier id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public OperationsStatusIdentifier getId() {
    return id;
  }

  public void setId(OperationsStatusIdentifier id) {
    this.id = id;
  }


  public OperationsStatus percentComplete(BigDecimal percentComplete) {
    this.percentComplete = percentComplete;
    return this;
  }

  /**
   * The completion percentage of the operation.
   * @return percentComplete
   */
  @javax.annotation.Nullable
  public BigDecimal getPercentComplete() {
    return percentComplete;
  }

  public void setPercentComplete(BigDecimal percentComplete) {
    this.percentComplete = percentComplete;
  }


  public OperationsStatus properties(Object properties) {
    this.properties = properties;
    return this;
  }

  /**
   * The internal operation properties.
   * @return properties
   */
  @javax.annotation.Nullable
  public Object getProperties() {
    return properties;
  }

  public void setProperties(Object properties) {
    this.properties = properties;
  }


  public OperationsStatus responseContent(Object responseContent) {
    this.responseContent = responseContent;
    return this;
  }

  /**
   * The content of the response.
   * @return responseContent
   */
  @javax.annotation.Nullable
  public Object getResponseContent() {
    return responseContent;
  }

  public void setResponseContent(Object responseContent) {
    this.responseContent = responseContent;
  }


  public OperationsStatus retryAfter(String retryAfter) {
    this.retryAfter = retryAfter;
    return this;
  }

  /**
   * The amount of time clients should wait..
   * @return retryAfter
   */
  @javax.annotation.Nullable
  public String getRetryAfter() {
    return retryAfter;
  }

  public void setRetryAfter(String retryAfter) {
    this.retryAfter = retryAfter;
  }


  public OperationsStatus startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The start time of the operation.
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public OperationsStatus status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the operation.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public OperationsStatus terminalHttpStatusCode(String terminalHttpStatusCode) {
    this.terminalHttpStatusCode = terminalHttpStatusCode;
    return this;
  }

  /**
   * The terminal http status code for the operation.
   * @return terminalHttpStatusCode
   */
  @javax.annotation.Nullable
  public String getTerminalHttpStatusCode() {
    return terminalHttpStatusCode;
  }

  public void setTerminalHttpStatusCode(String terminalHttpStatusCode) {
    this.terminalHttpStatusCode = terminalHttpStatusCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OperationsStatus operationsStatus = (OperationsStatus) o;
    return Objects.equals(this.endTime, operationsStatus.endTime) &&
        Objects.equals(this.error, operationsStatus.error) &&
        Objects.equals(this.id, operationsStatus.id) &&
        Objects.equals(this.percentComplete, operationsStatus.percentComplete) &&
        Objects.equals(this.properties, operationsStatus.properties) &&
        Objects.equals(this.responseContent, operationsStatus.responseContent) &&
        Objects.equals(this.retryAfter, operationsStatus.retryAfter) &&
        Objects.equals(this.startTime, operationsStatus.startTime) &&
        Objects.equals(this.status, operationsStatus.status) &&
        Objects.equals(this.terminalHttpStatusCode, operationsStatus.terminalHttpStatusCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endTime, error, id, percentComplete, properties, responseContent, retryAfter, startTime, status, terminalHttpStatusCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OperationsStatus {\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    percentComplete: ").append(toIndentedString(percentComplete)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    responseContent: ").append(toIndentedString(responseContent)).append("\n");
    sb.append("    retryAfter: ").append(toIndentedString(retryAfter)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    terminalHttpStatusCode: ").append(toIndentedString(terminalHttpStatusCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endTime");
    openapiFields.add("error");
    openapiFields.add("id");
    openapiFields.add("percentComplete");
    openapiFields.add("properties");
    openapiFields.add("responseContent");
    openapiFields.add("retryAfter");
    openapiFields.add("startTime");
    openapiFields.add("status");
    openapiFields.add("terminalHttpStatusCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OperationsStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OperationsStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OperationsStatus is not found in the empty JSON string", OperationsStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OperationsStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OperationsStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `error`
      if (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) {
        ExtendedErrorInfo.validateJsonElement(jsonObj.get("error"));
      }
      // validate the optional field `id`
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) {
        OperationsStatusIdentifier.validateJsonElement(jsonObj.get("id"));
      }
      if ((jsonObj.get("retryAfter") != null && !jsonObj.get("retryAfter").isJsonNull()) && !jsonObj.get("retryAfter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retryAfter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retryAfter").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("terminalHttpStatusCode") != null && !jsonObj.get("terminalHttpStatusCode").isJsonNull()) && !jsonObj.get("terminalHttpStatusCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `terminalHttpStatusCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("terminalHttpStatusCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OperationsStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OperationsStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OperationsStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OperationsStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<OperationsStatus>() {
           @Override
           public void write(JsonWriter out, OperationsStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OperationsStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OperationsStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OperationsStatus
   * @throws IOException if the JSON string is invalid with respect to OperationsStatus
   */
  public static OperationsStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OperationsStatus.class);
  }

  /**
   * Convert an instance of OperationsStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

