/**
 * SubscriptionsManagementClient
 * The Admin Subscriptions Management Client.
 *
 * The version of the OpenAPI document: 2015-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperationsStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperationsStatus::OAIOperationsStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperationsStatus::OAIOperationsStatus() {
    this->initializeModel();
}

OAIOperationsStatus::~OAIOperationsStatus() {}

void OAIOperationsStatus::initializeModel() {

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_percent_complete_isSet = false;
    m_percent_complete_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_response_content_isSet = false;
    m_response_content_isValid = false;

    m_retry_after_isSet = false;
    m_retry_after_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_terminal_http_status_code_isSet = false;
    m_terminal_http_status_code_isValid = false;
}

void OAIOperationsStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOperationsStatus::fromJsonObject(QJsonObject json) {

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_percent_complete_isValid = ::OpenAPI::fromJsonValue(m_percent_complete, json[QString("percentComplete")]);
    m_percent_complete_isSet = !json[QString("percentComplete")].isNull() && m_percent_complete_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_response_content_isValid = ::OpenAPI::fromJsonValue(m_response_content, json[QString("responseContent")]);
    m_response_content_isSet = !json[QString("responseContent")].isNull() && m_response_content_isValid;

    m_retry_after_isValid = ::OpenAPI::fromJsonValue(m_retry_after, json[QString("retryAfter")]);
    m_retry_after_isSet = !json[QString("retryAfter")].isNull() && m_retry_after_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_terminal_http_status_code_isValid = ::OpenAPI::fromJsonValue(m_terminal_http_status_code, json[QString("terminalHttpStatusCode")]);
    m_terminal_http_status_code_isSet = !json[QString("terminalHttpStatusCode")].isNull() && m_terminal_http_status_code_isValid;
}

QString OAIOperationsStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOperationsStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_id.isSet()) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_percent_complete_isSet) {
        obj.insert(QString("percentComplete"), ::OpenAPI::toJsonValue(m_percent_complete));
    }
    if (m_properties_isSet) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_response_content_isSet) {
        obj.insert(QString("responseContent"), ::OpenAPI::toJsonValue(m_response_content));
    }
    if (m_retry_after_isSet) {
        obj.insert(QString("retryAfter"), ::OpenAPI::toJsonValue(m_retry_after));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_terminal_http_status_code_isSet) {
        obj.insert(QString("terminalHttpStatusCode"), ::OpenAPI::toJsonValue(m_terminal_http_status_code));
    }
    return obj;
}

QDateTime OAIOperationsStatus::getEndTime() const {
    return m_end_time;
}
void OAIOperationsStatus::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIOperationsStatus::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIOperationsStatus::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIExtendedErrorInfo OAIOperationsStatus::getError() const {
    return m_error;
}
void OAIOperationsStatus::setError(const OAIExtendedErrorInfo &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIOperationsStatus::is_error_Set() const{
    return m_error_isSet;
}

bool OAIOperationsStatus::is_error_Valid() const{
    return m_error_isValid;
}

OAIOperationsStatusIdentifier OAIOperationsStatus::getId() const {
    return m_id;
}
void OAIOperationsStatus::setId(const OAIOperationsStatusIdentifier &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOperationsStatus::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOperationsStatus::is_id_Valid() const{
    return m_id_isValid;
}

double OAIOperationsStatus::getPercentComplete() const {
    return m_percent_complete;
}
void OAIOperationsStatus::setPercentComplete(const double &percent_complete) {
    m_percent_complete = percent_complete;
    m_percent_complete_isSet = true;
}

bool OAIOperationsStatus::is_percent_complete_Set() const{
    return m_percent_complete_isSet;
}

bool OAIOperationsStatus::is_percent_complete_Valid() const{
    return m_percent_complete_isValid;
}

OAIObject OAIOperationsStatus::getProperties() const {
    return m_properties;
}
void OAIOperationsStatus::setProperties(const OAIObject &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIOperationsStatus::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIOperationsStatus::is_properties_Valid() const{
    return m_properties_isValid;
}

OAIObject OAIOperationsStatus::getResponseContent() const {
    return m_response_content;
}
void OAIOperationsStatus::setResponseContent(const OAIObject &response_content) {
    m_response_content = response_content;
    m_response_content_isSet = true;
}

bool OAIOperationsStatus::is_response_content_Set() const{
    return m_response_content_isSet;
}

bool OAIOperationsStatus::is_response_content_Valid() const{
    return m_response_content_isValid;
}

QString OAIOperationsStatus::getRetryAfter() const {
    return m_retry_after;
}
void OAIOperationsStatus::setRetryAfter(const QString &retry_after) {
    m_retry_after = retry_after;
    m_retry_after_isSet = true;
}

bool OAIOperationsStatus::is_retry_after_Set() const{
    return m_retry_after_isSet;
}

bool OAIOperationsStatus::is_retry_after_Valid() const{
    return m_retry_after_isValid;
}

QDateTime OAIOperationsStatus::getStartTime() const {
    return m_start_time;
}
void OAIOperationsStatus::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIOperationsStatus::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIOperationsStatus::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIOperationsStatus::getStatus() const {
    return m_status;
}
void OAIOperationsStatus::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIOperationsStatus::is_status_Set() const{
    return m_status_isSet;
}

bool OAIOperationsStatus::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIOperationsStatus::getTerminalHttpStatusCode() const {
    return m_terminal_http_status_code;
}
void OAIOperationsStatus::setTerminalHttpStatusCode(const QString &terminal_http_status_code) {
    m_terminal_http_status_code = terminal_http_status_code;
    m_terminal_http_status_code_isSet = true;
}

bool OAIOperationsStatus::is_terminal_http_status_code_Set() const{
    return m_terminal_http_status_code_isSet;
}

bool OAIOperationsStatus::is_terminal_http_status_code_Valid() const{
    return m_terminal_http_status_code_isValid;
}

bool OAIOperationsStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terminal_http_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOperationsStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
