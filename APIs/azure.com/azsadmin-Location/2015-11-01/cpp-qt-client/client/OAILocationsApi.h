/**
 * SubscriptionsManagementClient
 * The Admin Subscriptions Management Client.
 *
 * The version of the OpenAPI document: 2015-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILocationsApi_H
#define OAI_OAILocationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAILocation.h"
#include "OAILocationList.h"
#include "OAIOperationsStatus.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILocationsApi : public QObject {
    Q_OBJECT

public:
    OAILocationsApi(const int timeOut = 0);
    ~OAILocationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  new_location OAILocation [required]
    */
    virtual void locationsCreateOrUpdate(const QString &subscription_id, const QString &location, const QString &api_version, const OAILocation &new_location);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void locationsGet(const QString &subscription_id, const QString &location, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  location QString [required]
    * @param[in]  operations_status_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void locationsGetOperationsStatus(const QString &subscription_id, const QString &location, const QString &operations_status_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void locationsList(const QString &subscription_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void locationsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void locationsGetCallback(OAIHttpRequestWorker *worker);
    void locationsGetOperationsStatusCallback(OAIHttpRequestWorker *worker);
    void locationsListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void locationsCreateOrUpdateSignal(OAILocation summary);
    void locationsGetSignal(OAILocation summary);
    void locationsGetOperationsStatusSignal(OAIOperationsStatus summary);
    void locationsListSignal(OAILocationList summary);


    void locationsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAILocation summary);
    void locationsGetSignalFull(OAIHttpRequestWorker *worker, OAILocation summary);
    void locationsGetOperationsStatusSignalFull(OAIHttpRequestWorker *worker, OAIOperationsStatus summary);
    void locationsListSignalFull(OAIHttpRequestWorker *worker, OAILocationList summary);

    Q_DECL_DEPRECATED_X("Use locationsCreateOrUpdateSignalError() instead")
    void locationsCreateOrUpdateSignalE(OAILocation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void locationsCreateOrUpdateSignalError(OAILocation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use locationsGetSignalError() instead")
    void locationsGetSignalE(OAILocation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void locationsGetSignalError(OAILocation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use locationsGetOperationsStatusSignalError() instead")
    void locationsGetOperationsStatusSignalE(OAIOperationsStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void locationsGetOperationsStatusSignalError(OAIOperationsStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use locationsListSignalError() instead")
    void locationsListSignalE(OAILocationList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void locationsListSignalError(OAILocationList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use locationsCreateOrUpdateSignalErrorFull() instead")
    void locationsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void locationsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use locationsGetSignalErrorFull() instead")
    void locationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void locationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use locationsGetOperationsStatusSignalErrorFull() instead")
    void locationsGetOperationsStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void locationsGetOperationsStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use locationsListSignalErrorFull() instead")
    void locationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void locationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
