# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, display_name: str=None, help_url: str=None, is_enabled_by_default: bool=None, is_hidden: bool=None, is_in_preview: bool=None, name: str=None, supports_email_notifications: bool=None):
        """ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions - a model defined in OpenAPI

        :param description: The description of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.
        :param display_name: The display_name of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.
        :param help_url: The help_url of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.
        :param is_enabled_by_default: The is_enabled_by_default of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.
        :param is_hidden: The is_hidden of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.
        :param is_in_preview: The is_in_preview of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.
        :param name: The name of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.
        :param supports_email_notifications: The supports_email_notifications of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.
        """
        self.openapi_types = {
            'description': str,
            'display_name': str,
            'help_url': str,
            'is_enabled_by_default': bool,
            'is_hidden': bool,
            'is_in_preview': bool,
            'name': str,
            'supports_email_notifications': bool
        }

        self.attribute_map = {
            'description': 'Description',
            'display_name': 'DisplayName',
            'help_url': 'HelpUrl',
            'is_enabled_by_default': 'IsEnabledByDefault',
            'is_hidden': 'IsHidden',
            'is_in_preview': 'IsInPreview',
            'name': 'Name',
            'supports_email_notifications': 'SupportsEmailNotifications'
        }

        self._description = description
        self._display_name = display_name
        self._help_url = help_url
        self._is_enabled_by_default = is_enabled_by_default
        self._is_hidden = is_hidden
        self._is_in_preview = is_in_preview
        self._name = name
        self._supports_email_notifications = supports_email_notifications

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationInsightsComponentProactiveDetectionConfiguration_RuleDefinitions of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.

        The rule description

        :return: The description of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.

        The rule description

        :param description: The description of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.

        The rule name as it is displayed in UI

        :return: The display_name of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.

        The rule name as it is displayed in UI

        :param display_name: The display_name of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def help_url(self):
        """Gets the help_url of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.

        URL which displays additional info about the proactive detection rule

        :return: The help_url of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.
        :rtype: str
        """
        return self._help_url

    @help_url.setter
    def help_url(self, help_url):
        """Sets the help_url of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.

        URL which displays additional info about the proactive detection rule

        :param help_url: The help_url of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.
        :type help_url: str
        """

        self._help_url = help_url

    @property
    def is_enabled_by_default(self):
        """Gets the is_enabled_by_default of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.

        A flag indicating whether the rule is enabled by default

        :return: The is_enabled_by_default of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.
        :rtype: bool
        """
        return self._is_enabled_by_default

    @is_enabled_by_default.setter
    def is_enabled_by_default(self, is_enabled_by_default):
        """Sets the is_enabled_by_default of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.

        A flag indicating whether the rule is enabled by default

        :param is_enabled_by_default: The is_enabled_by_default of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.
        :type is_enabled_by_default: bool
        """

        self._is_enabled_by_default = is_enabled_by_default

    @property
    def is_hidden(self):
        """Gets the is_hidden of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.

        A flag indicating whether the rule is hidden (from the UI)

        :return: The is_hidden of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.
        :rtype: bool
        """
        return self._is_hidden

    @is_hidden.setter
    def is_hidden(self, is_hidden):
        """Sets the is_hidden of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.

        A flag indicating whether the rule is hidden (from the UI)

        :param is_hidden: The is_hidden of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.
        :type is_hidden: bool
        """

        self._is_hidden = is_hidden

    @property
    def is_in_preview(self):
        """Gets the is_in_preview of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.

        A flag indicating whether the rule is in preview

        :return: The is_in_preview of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.
        :rtype: bool
        """
        return self._is_in_preview

    @is_in_preview.setter
    def is_in_preview(self, is_in_preview):
        """Sets the is_in_preview of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.

        A flag indicating whether the rule is in preview

        :param is_in_preview: The is_in_preview of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.
        :type is_in_preview: bool
        """

        self._is_in_preview = is_in_preview

    @property
    def name(self):
        """Gets the name of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.

        The rule name

        :return: The name of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.

        The rule name

        :param name: The name of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.
        :type name: str
        """

        self._name = name

    @property
    def supports_email_notifications(self):
        """Gets the supports_email_notifications of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.

        A flag indicating whether email notifications are supported for detections for this rule

        :return: The supports_email_notifications of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.
        :rtype: bool
        """
        return self._supports_email_notifications

    @supports_email_notifications.setter
    def supports_email_notifications(self, supports_email_notifications):
        """Sets the supports_email_notifications of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.

        A flag indicating whether email notifications are supported for detections for this rule

        :param supports_email_notifications: The supports_email_notifications of this ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.
        :type supports_email_notifications: bool
        """

        self._supports_email_notifications = supports_email_notifications
