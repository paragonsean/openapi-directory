/**
 * ApplicationInsightsManagementClient
 * Azure Application Insights client for ProactiveDetection configurations of a component.
 *
 * The version of the OpenAPI document: 2015-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApplicationInsightsComponentProactiveDetectionConfiguration from '../model/ApplicationInsightsComponentProactiveDetectionConfiguration';

/**
* Default service.
* @module api/DefaultApi
* @version 2015-05-01
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the proactiveDetectionConfigurationsGet operation.
     * @callback module:api/DefaultApi~proactiveDetectionConfigurationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationInsightsComponentProactiveDetectionConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the ProactiveDetection configuration for this configuration id.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceName The name of the Application Insights component resource.
     * @param {String} configurationId The ProactiveDetection configuration ID. This is unique within a Application Insights component.
     * @param {module:api/DefaultApi~proactiveDetectionConfigurationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationInsightsComponentProactiveDetectionConfiguration}
     */
    proactiveDetectionConfigurationsGet(resourceGroupName, apiVersion, subscriptionId, resourceName, configurationId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling proactiveDetectionConfigurationsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling proactiveDetectionConfigurationsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling proactiveDetectionConfigurationsGet");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling proactiveDetectionConfigurationsGet");
      }
      // verify the required parameter 'configurationId' is set
      if (configurationId === undefined || configurationId === null) {
        throw new Error("Missing the required parameter 'configurationId' when calling proactiveDetectionConfigurationsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'resourceName': resourceName,
        'ConfigurationId': configurationId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApplicationInsightsComponentProactiveDetectionConfiguration;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/ProactiveDetectionConfigs/{ConfigurationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proactiveDetectionConfigurationsList operation.
     * @callback module:api/DefaultApi~proactiveDetectionConfigurationsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ApplicationInsightsComponentProactiveDetectionConfiguration>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of ProactiveDetection configurations of an Application Insights component.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceName The name of the Application Insights component resource.
     * @param {module:api/DefaultApi~proactiveDetectionConfigurationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ApplicationInsightsComponentProactiveDetectionConfiguration>}
     */
    proactiveDetectionConfigurationsList(resourceGroupName, apiVersion, subscriptionId, resourceName, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling proactiveDetectionConfigurationsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling proactiveDetectionConfigurationsList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling proactiveDetectionConfigurationsList");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling proactiveDetectionConfigurationsList");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'resourceName': resourceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ApplicationInsightsComponentProactiveDetectionConfiguration];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/ProactiveDetectionConfigs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proactiveDetectionConfigurationsUpdate operation.
     * @callback module:api/DefaultApi~proactiveDetectionConfigurationsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationInsightsComponentProactiveDetectionConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the ProactiveDetection configuration for this configuration id.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceName The name of the Application Insights component resource.
     * @param {String} configurationId The ProactiveDetection configuration ID. This is unique within a Application Insights component.
     * @param {module:model/ApplicationInsightsComponentProactiveDetectionConfiguration} proactiveDetectionProperties Properties that need to be specified to update the ProactiveDetection configuration.
     * @param {module:api/DefaultApi~proactiveDetectionConfigurationsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationInsightsComponentProactiveDetectionConfiguration}
     */
    proactiveDetectionConfigurationsUpdate(resourceGroupName, apiVersion, subscriptionId, resourceName, configurationId, proactiveDetectionProperties, callback) {
      let postBody = proactiveDetectionProperties;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling proactiveDetectionConfigurationsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling proactiveDetectionConfigurationsUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling proactiveDetectionConfigurationsUpdate");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling proactiveDetectionConfigurationsUpdate");
      }
      // verify the required parameter 'configurationId' is set
      if (configurationId === undefined || configurationId === null) {
        throw new Error("Missing the required parameter 'configurationId' when calling proactiveDetectionConfigurationsUpdate");
      }
      // verify the required parameter 'proactiveDetectionProperties' is set
      if (proactiveDetectionProperties === undefined || proactiveDetectionProperties === null) {
        throw new Error("Missing the required parameter 'proactiveDetectionProperties' when calling proactiveDetectionConfigurationsUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'resourceName': resourceName,
        'ConfigurationId': configurationId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApplicationInsightsComponentProactiveDetectionConfiguration;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/ProactiveDetectionConfigs/{ConfigurationId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
