# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.emerging_issue_impact import EmergingIssueImpact
from openapi_server import util


class StatusActiveEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cloud: str=None, description: str=None, impacts: List[EmergingIssueImpact]=None, last_modified_time: datetime=None, published: bool=None, severity: str=None, stage: str=None, start_time: datetime=None, title: str=None, tracking_id: str=None):
        """StatusActiveEvent - a model defined in OpenAPI

        :param cloud: The cloud of this StatusActiveEvent.
        :param description: The description of this StatusActiveEvent.
        :param impacts: The impacts of this StatusActiveEvent.
        :param last_modified_time: The last_modified_time of this StatusActiveEvent.
        :param published: The published of this StatusActiveEvent.
        :param severity: The severity of this StatusActiveEvent.
        :param stage: The stage of this StatusActiveEvent.
        :param start_time: The start_time of this StatusActiveEvent.
        :param title: The title of this StatusActiveEvent.
        :param tracking_id: The tracking_id of this StatusActiveEvent.
        """
        self.openapi_types = {
            'cloud': str,
            'description': str,
            'impacts': List[EmergingIssueImpact],
            'last_modified_time': datetime,
            'published': bool,
            'severity': str,
            'stage': str,
            'start_time': datetime,
            'title': str,
            'tracking_id': str
        }

        self.attribute_map = {
            'cloud': 'cloud',
            'description': 'description',
            'impacts': 'impacts',
            'last_modified_time': 'lastModifiedTime',
            'published': 'published',
            'severity': 'severity',
            'stage': 'stage',
            'start_time': 'startTime',
            'title': 'title',
            'tracking_id': 'trackingId'
        }

        self._cloud = cloud
        self._description = description
        self._impacts = impacts
        self._last_modified_time = last_modified_time
        self._published = published
        self._severity = severity
        self._stage = stage
        self._start_time = start_time
        self._title = title
        self._tracking_id = tracking_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StatusActiveEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The statusActiveEvent of this StatusActiveEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cloud(self):
        """Gets the cloud of this StatusActiveEvent.

        The cloud type of this active event.

        :return: The cloud of this StatusActiveEvent.
        :rtype: str
        """
        return self._cloud

    @cloud.setter
    def cloud(self, cloud):
        """Sets the cloud of this StatusActiveEvent.

        The cloud type of this active event.

        :param cloud: The cloud of this StatusActiveEvent.
        :type cloud: str
        """

        self._cloud = cloud

    @property
    def description(self):
        """Gets the description of this StatusActiveEvent.

        The details of active event.

        :return: The description of this StatusActiveEvent.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StatusActiveEvent.

        The details of active event.

        :param description: The description of this StatusActiveEvent.
        :type description: str
        """

        self._description = description

    @property
    def impacts(self):
        """Gets the impacts of this StatusActiveEvent.

        The list of emerging issues impacts.

        :return: The impacts of this StatusActiveEvent.
        :rtype: List[EmergingIssueImpact]
        """
        return self._impacts

    @impacts.setter
    def impacts(self, impacts):
        """Sets the impacts of this StatusActiveEvent.

        The list of emerging issues impacts.

        :param impacts: The impacts of this StatusActiveEvent.
        :type impacts: List[EmergingIssueImpact]
        """

        self._impacts = impacts

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this StatusActiveEvent.

        The last time modified on this banner.

        :return: The last_modified_time of this StatusActiveEvent.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this StatusActiveEvent.

        The last time modified on this banner.

        :param last_modified_time: The last_modified_time of this StatusActiveEvent.
        :type last_modified_time: datetime
        """

        self._last_modified_time = last_modified_time

    @property
    def published(self):
        """Gets the published of this StatusActiveEvent.

        The boolean value of this active event if published or not.

        :return: The published of this StatusActiveEvent.
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this StatusActiveEvent.

        The boolean value of this active event if published or not.

        :param published: The published of this StatusActiveEvent.
        :type published: bool
        """

        self._published = published

    @property
    def severity(self):
        """Gets the severity of this StatusActiveEvent.

        The severity level of this active event.

        :return: The severity of this StatusActiveEvent.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this StatusActiveEvent.

        The severity level of this active event.

        :param severity: The severity of this StatusActiveEvent.
        :type severity: str
        """
        allowed_values = ["Information", "Warning", "Error"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def stage(self):
        """Gets the stage of this StatusActiveEvent.

        The stage of this active event.

        :return: The stage of this StatusActiveEvent.
        :rtype: str
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """Sets the stage of this StatusActiveEvent.

        The stage of this active event.

        :param stage: The stage of this StatusActiveEvent.
        :type stage: str
        """
        allowed_values = ["Active", "Resolve", "Archived"]  # noqa: E501
        if stage not in allowed_values:
            raise ValueError(
                "Invalid value for `stage` ({0}), must be one of {1}"
                .format(stage, allowed_values)
            )

        self._stage = stage

    @property
    def start_time(self):
        """Gets the start_time of this StatusActiveEvent.

        The impact start time on this active event.

        :return: The start_time of this StatusActiveEvent.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this StatusActiveEvent.

        The impact start time on this active event.

        :param start_time: The start_time of this StatusActiveEvent.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def title(self):
        """Gets the title of this StatusActiveEvent.

        The active event title.

        :return: The title of this StatusActiveEvent.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this StatusActiveEvent.

        The active event title.

        :param title: The title of this StatusActiveEvent.
        :type title: str
        """

        self._title = title

    @property
    def tracking_id(self):
        """Gets the tracking_id of this StatusActiveEvent.

        The tracking id of this active event.

        :return: The tracking_id of this StatusActiveEvent.
        :rtype: str
        """
        return self._tracking_id

    @tracking_id.setter
    def tracking_id(self, tracking_id):
        """Sets the tracking_id of this StatusActiveEvent.

        The tracking id of this active event.

        :param tracking_id: The tracking_id of this StatusActiveEvent.
        :type tracking_id: str
        """

        self._tracking_id = tracking_id
