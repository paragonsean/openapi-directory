/**
 * Microsoft.ResourceHealth
 * The Resource Health Client.
 *
 * The version of the OpenAPI document: 2017-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EmergingIssueImpact from './EmergingIssueImpact';

/**
 * The StatusActiveEvent model module.
 * @module model/StatusActiveEvent
 * @version 2017-07-01
 */
class StatusActiveEvent {
    /**
     * Constructs a new <code>StatusActiveEvent</code>.
     * Active event type of emerging issue.
     * @alias module:model/StatusActiveEvent
     */
    constructor() { 
        
        StatusActiveEvent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StatusActiveEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StatusActiveEvent} obj Optional instance to populate.
     * @return {module:model/StatusActiveEvent} The populated <code>StatusActiveEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StatusActiveEvent();

            if (data.hasOwnProperty('cloud')) {
                obj['cloud'] = ApiClient.convertToType(data['cloud'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('impacts')) {
                obj['impacts'] = ApiClient.convertToType(data['impacts'], [EmergingIssueImpact]);
            }
            if (data.hasOwnProperty('lastModifiedTime')) {
                obj['lastModifiedTime'] = ApiClient.convertToType(data['lastModifiedTime'], 'Date');
            }
            if (data.hasOwnProperty('published')) {
                obj['published'] = ApiClient.convertToType(data['published'], 'Boolean');
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
            if (data.hasOwnProperty('stage')) {
                obj['stage'] = ApiClient.convertToType(data['stage'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('trackingId')) {
                obj['trackingId'] = ApiClient.convertToType(data['trackingId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StatusActiveEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StatusActiveEvent</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cloud'] && !(typeof data['cloud'] === 'string' || data['cloud'] instanceof String)) {
            throw new Error("Expected the field `cloud` to be a primitive type in the JSON string but got " + data['cloud']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['impacts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['impacts'])) {
                throw new Error("Expected the field `impacts` to be an array in the JSON data but got " + data['impacts']);
            }
            // validate the optional field `impacts` (array)
            for (const item of data['impacts']) {
                EmergingIssueImpact.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['severity'] && !(typeof data['severity'] === 'string' || data['severity'] instanceof String)) {
            throw new Error("Expected the field `severity` to be a primitive type in the JSON string but got " + data['severity']);
        }
        // ensure the json data is a string
        if (data['stage'] && !(typeof data['stage'] === 'string' || data['stage'] instanceof String)) {
            throw new Error("Expected the field `stage` to be a primitive type in the JSON string but got " + data['stage']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['trackingId'] && !(typeof data['trackingId'] === 'string' || data['trackingId'] instanceof String)) {
            throw new Error("Expected the field `trackingId` to be a primitive type in the JSON string but got " + data['trackingId']);
        }

        return true;
    }


}



/**
 * The cloud type of this active event.
 * @member {String} cloud
 */
StatusActiveEvent.prototype['cloud'] = undefined;

/**
 * The details of active event.
 * @member {String} description
 */
StatusActiveEvent.prototype['description'] = undefined;

/**
 * The list of emerging issues impacts.
 * @member {Array.<module:model/EmergingIssueImpact>} impacts
 */
StatusActiveEvent.prototype['impacts'] = undefined;

/**
 * The last time modified on this banner.
 * @member {Date} lastModifiedTime
 */
StatusActiveEvent.prototype['lastModifiedTime'] = undefined;

/**
 * The boolean value of this active event if published or not.
 * @member {Boolean} published
 */
StatusActiveEvent.prototype['published'] = undefined;

/**
 * The severity level of this active event.
 * @member {module:model/StatusActiveEvent.SeverityEnum} severity
 */
StatusActiveEvent.prototype['severity'] = undefined;

/**
 * The stage of this active event.
 * @member {module:model/StatusActiveEvent.StageEnum} stage
 */
StatusActiveEvent.prototype['stage'] = undefined;

/**
 * The impact start time on this active event.
 * @member {Date} startTime
 */
StatusActiveEvent.prototype['startTime'] = undefined;

/**
 * The active event title.
 * @member {String} title
 */
StatusActiveEvent.prototype['title'] = undefined;

/**
 * The tracking id of this active event.
 * @member {String} trackingId
 */
StatusActiveEvent.prototype['trackingId'] = undefined;





/**
 * Allowed values for the <code>severity</code> property.
 * @enum {String}
 * @readonly
 */
StatusActiveEvent['SeverityEnum'] = {

    /**
     * value: "Information"
     * @const
     */
    "Information": "Information",

    /**
     * value: "Warning"
     * @const
     */
    "Warning": "Warning",

    /**
     * value: "Error"
     * @const
     */
    "Error": "Error"
};


/**
 * Allowed values for the <code>stage</code> property.
 * @enum {String}
 * @readonly
 */
StatusActiveEvent['StageEnum'] = {

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "Resolve"
     * @const
     */
    "Resolve": "Resolve",

    /**
     * value: "Archived"
     * @const
     */
    "Archived": "Archived"
};



export default StatusActiveEvent;

