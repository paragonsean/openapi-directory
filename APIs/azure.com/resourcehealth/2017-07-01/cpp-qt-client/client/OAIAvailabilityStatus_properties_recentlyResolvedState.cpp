/**
 * Microsoft.ResourceHealth
 * The Resource Health Client.
 *
 * The version of the OpenAPI document: 2017-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAvailabilityStatus_properties_recentlyResolvedState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAvailabilityStatus_properties_recentlyResolvedState::OAIAvailabilityStatus_properties_recentlyResolvedState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAvailabilityStatus_properties_recentlyResolvedState::OAIAvailabilityStatus_properties_recentlyResolvedState() {
    this->initializeModel();
}

OAIAvailabilityStatus_properties_recentlyResolvedState::~OAIAvailabilityStatus_properties_recentlyResolvedState() {}

void OAIAvailabilityStatus_properties_recentlyResolvedState::initializeModel() {

    m_resolved_time_isSet = false;
    m_resolved_time_isValid = false;

    m_unavailability_summary_isSet = false;
    m_unavailability_summary_isValid = false;

    m_unavailable_occurred_time_isSet = false;
    m_unavailable_occurred_time_isValid = false;
}

void OAIAvailabilityStatus_properties_recentlyResolvedState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAvailabilityStatus_properties_recentlyResolvedState::fromJsonObject(QJsonObject json) {

    m_resolved_time_isValid = ::OpenAPI::fromJsonValue(m_resolved_time, json[QString("resolvedTime")]);
    m_resolved_time_isSet = !json[QString("resolvedTime")].isNull() && m_resolved_time_isValid;

    m_unavailability_summary_isValid = ::OpenAPI::fromJsonValue(m_unavailability_summary, json[QString("unavailabilitySummary")]);
    m_unavailability_summary_isSet = !json[QString("unavailabilitySummary")].isNull() && m_unavailability_summary_isValid;

    m_unavailable_occurred_time_isValid = ::OpenAPI::fromJsonValue(m_unavailable_occurred_time, json[QString("unavailableOccurredTime")]);
    m_unavailable_occurred_time_isSet = !json[QString("unavailableOccurredTime")].isNull() && m_unavailable_occurred_time_isValid;
}

QString OAIAvailabilityStatus_properties_recentlyResolvedState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAvailabilityStatus_properties_recentlyResolvedState::asJsonObject() const {
    QJsonObject obj;
    if (m_resolved_time_isSet) {
        obj.insert(QString("resolvedTime"), ::OpenAPI::toJsonValue(m_resolved_time));
    }
    if (m_unavailability_summary_isSet) {
        obj.insert(QString("unavailabilitySummary"), ::OpenAPI::toJsonValue(m_unavailability_summary));
    }
    if (m_unavailable_occurred_time_isSet) {
        obj.insert(QString("unavailableOccurredTime"), ::OpenAPI::toJsonValue(m_unavailable_occurred_time));
    }
    return obj;
}

QDateTime OAIAvailabilityStatus_properties_recentlyResolvedState::getResolvedTime() const {
    return m_resolved_time;
}
void OAIAvailabilityStatus_properties_recentlyResolvedState::setResolvedTime(const QDateTime &resolved_time) {
    m_resolved_time = resolved_time;
    m_resolved_time_isSet = true;
}

bool OAIAvailabilityStatus_properties_recentlyResolvedState::is_resolved_time_Set() const{
    return m_resolved_time_isSet;
}

bool OAIAvailabilityStatus_properties_recentlyResolvedState::is_resolved_time_Valid() const{
    return m_resolved_time_isValid;
}

QString OAIAvailabilityStatus_properties_recentlyResolvedState::getUnavailabilitySummary() const {
    return m_unavailability_summary;
}
void OAIAvailabilityStatus_properties_recentlyResolvedState::setUnavailabilitySummary(const QString &unavailability_summary) {
    m_unavailability_summary = unavailability_summary;
    m_unavailability_summary_isSet = true;
}

bool OAIAvailabilityStatus_properties_recentlyResolvedState::is_unavailability_summary_Set() const{
    return m_unavailability_summary_isSet;
}

bool OAIAvailabilityStatus_properties_recentlyResolvedState::is_unavailability_summary_Valid() const{
    return m_unavailability_summary_isValid;
}

QDateTime OAIAvailabilityStatus_properties_recentlyResolvedState::getUnavailableOccurredTime() const {
    return m_unavailable_occurred_time;
}
void OAIAvailabilityStatus_properties_recentlyResolvedState::setUnavailableOccurredTime(const QDateTime &unavailable_occurred_time) {
    m_unavailable_occurred_time = unavailable_occurred_time;
    m_unavailable_occurred_time_isSet = true;
}

bool OAIAvailabilityStatus_properties_recentlyResolvedState::is_unavailable_occurred_time_Set() const{
    return m_unavailable_occurred_time_isSet;
}

bool OAIAvailabilityStatus_properties_recentlyResolvedState::is_unavailable_occurred_time_Valid() const{
    return m_unavailable_occurred_time_isValid;
}

bool OAIAvailabilityStatus_properties_recentlyResolvedState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resolved_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unavailability_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unavailable_occurred_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAvailabilityStatus_properties_recentlyResolvedState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
