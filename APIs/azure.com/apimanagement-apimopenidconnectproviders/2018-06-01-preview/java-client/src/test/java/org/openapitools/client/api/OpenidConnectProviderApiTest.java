/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on OpenId Connect Provider entity associated with your Azure API Management deployment. API Management allows you to access APIs secured with token from [OpenID Connect Provider ](http://openid.net/connect/) to be accessed from the Developer Console.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.OpenIdConnectProviderGet200Response;
import org.openapitools.client.model.OpenIdConnectProviderListByService200Response;
import org.openapitools.client.model.OpenIdConnectProviderListByServiceDefaultResponse;
import org.openapitools.client.model.OpenIdConnectProviderUpdateRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OpenidConnectProviderApi
 */
@Disabled
public class OpenidConnectProviderApiTest {

    private final OpenidConnectProviderApi api = new OpenidConnectProviderApi();

    /**
     * Creates or updates the OpenID Connect Provider.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openIdConnectProviderCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String opid = null;
        String apiVersion = null;
        String subscriptionId = null;
        OpenIdConnectProviderGet200Response parameters = null;
        String ifMatch = null;
        OpenIdConnectProviderGet200Response response = api.openIdConnectProviderCreateOrUpdate(resourceGroupName, serviceName, opid, apiVersion, subscriptionId, parameters, ifMatch);
        // TODO: test validations
    }

    /**
     * Deletes specific OpenID Connect Provider of the API Management service instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openIdConnectProviderDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String opid = null;
        String ifMatch = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.openIdConnectProviderDelete(resourceGroupName, serviceName, opid, ifMatch, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets specific OpenID Connect Provider.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openIdConnectProviderGetTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String opid = null;
        String apiVersion = null;
        String subscriptionId = null;
        OpenIdConnectProviderGet200Response response = api.openIdConnectProviderGet(resourceGroupName, serviceName, opid, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the entity state (Etag) version of the openIdConnectProvider specified by its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openIdConnectProviderGetEntityTagTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String opid = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.openIdConnectProviderGetEntityTag(resourceGroupName, serviceName, opid, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists of all the OpenId Connect Providers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openIdConnectProviderListByServiceTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        OpenIdConnectProviderListByService200Response response = api.openIdConnectProviderListByService(resourceGroupName, serviceName, apiVersion, subscriptionId, $filter, $top, $skip);
        // TODO: test validations
    }

    /**
     * Updates the specific OpenID Connect Provider.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openIdConnectProviderUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String opid = null;
        String ifMatch = null;
        String apiVersion = null;
        String subscriptionId = null;
        OpenIdConnectProviderUpdateRequest parameters = null;
        api.openIdConnectProviderUpdate(resourceGroupName, serviceName, opid, ifMatch, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

}
