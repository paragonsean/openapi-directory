/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on OpenId Connect Provider entity associated with your Azure API Management deployment. API Management allows you to access APIs secured with token from [OpenID Connect Provider ](http://openid.net/connect/) to be accessed from the Developer Console.
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOpenIdConnectProvidersApi_H
#define OAI_OAIOpenIdConnectProvidersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIOpenIdConnectProviderCollection.h"
#include "OAIOpenIdConnectProvider_Get_default_response.h"
#include "OAIOpenidConnectProviderContract.h"
#include "OAIOpenidConnectProviderUpdateContract.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOpenIdConnectProvidersApi : public QObject {
    Q_OBJECT

public:
    OAIOpenIdConnectProvidersApi(const int timeOut = 0);
    ~OAIOpenIdConnectProvidersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  opid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIOpenidConnectProviderContract [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void openIdConnectProviderCreateOrUpdate(const QString &resource_group_name, const QString &service_name, const QString &opid, const QString &api_version, const QString &subscription_id, const OAIOpenidConnectProviderContract &parameters, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  opid QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void openIdConnectProviderDelete(const QString &resource_group_name, const QString &service_name, const QString &opid, const QString &if_match, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  opid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void openIdConnectProviderGet(const QString &resource_group_name, const QString &service_name, const QString &opid, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  opid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void openIdConnectProviderGetEntityTag(const QString &resource_group_name, const QString &service_name, const QString &opid, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    */
    virtual void openIdConnectProviderListByService(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  opid QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIOpenidConnectProviderUpdateContract [required]
    */
    virtual void openIdConnectProviderUpdate(const QString &resource_group_name, const QString &service_name, const QString &opid, const QString &if_match, const QString &api_version, const QString &subscription_id, const OAIOpenidConnectProviderUpdateContract &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void openIdConnectProviderCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void openIdConnectProviderDeleteCallback(OAIHttpRequestWorker *worker);
    void openIdConnectProviderGetCallback(OAIHttpRequestWorker *worker);
    void openIdConnectProviderGetEntityTagCallback(OAIHttpRequestWorker *worker);
    void openIdConnectProviderListByServiceCallback(OAIHttpRequestWorker *worker);
    void openIdConnectProviderUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void openIdConnectProviderCreateOrUpdateSignal(OAIOpenidConnectProviderContract summary);
    void openIdConnectProviderDeleteSignal();
    void openIdConnectProviderGetSignal(OAIOpenidConnectProviderContract summary);
    void openIdConnectProviderGetEntityTagSignal();
    void openIdConnectProviderListByServiceSignal(OAIOpenIdConnectProviderCollection summary);
    void openIdConnectProviderUpdateSignal();


    void openIdConnectProviderCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIOpenidConnectProviderContract summary);
    void openIdConnectProviderDeleteSignalFull(OAIHttpRequestWorker *worker);
    void openIdConnectProviderGetSignalFull(OAIHttpRequestWorker *worker, OAIOpenidConnectProviderContract summary);
    void openIdConnectProviderGetEntityTagSignalFull(OAIHttpRequestWorker *worker);
    void openIdConnectProviderListByServiceSignalFull(OAIHttpRequestWorker *worker, OAIOpenIdConnectProviderCollection summary);
    void openIdConnectProviderUpdateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use openIdConnectProviderCreateOrUpdateSignalError() instead")
    void openIdConnectProviderCreateOrUpdateSignalE(OAIOpenidConnectProviderContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void openIdConnectProviderCreateOrUpdateSignalError(OAIOpenidConnectProviderContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use openIdConnectProviderDeleteSignalError() instead")
    void openIdConnectProviderDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void openIdConnectProviderDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use openIdConnectProviderGetSignalError() instead")
    void openIdConnectProviderGetSignalE(OAIOpenidConnectProviderContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void openIdConnectProviderGetSignalError(OAIOpenidConnectProviderContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use openIdConnectProviderGetEntityTagSignalError() instead")
    void openIdConnectProviderGetEntityTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void openIdConnectProviderGetEntityTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use openIdConnectProviderListByServiceSignalError() instead")
    void openIdConnectProviderListByServiceSignalE(OAIOpenIdConnectProviderCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void openIdConnectProviderListByServiceSignalError(OAIOpenIdConnectProviderCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use openIdConnectProviderUpdateSignalError() instead")
    void openIdConnectProviderUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void openIdConnectProviderUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use openIdConnectProviderCreateOrUpdateSignalErrorFull() instead")
    void openIdConnectProviderCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void openIdConnectProviderCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use openIdConnectProviderDeleteSignalErrorFull() instead")
    void openIdConnectProviderDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void openIdConnectProviderDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use openIdConnectProviderGetSignalErrorFull() instead")
    void openIdConnectProviderGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void openIdConnectProviderGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use openIdConnectProviderGetEntityTagSignalErrorFull() instead")
    void openIdConnectProviderGetEntityTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void openIdConnectProviderGetEntityTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use openIdConnectProviderListByServiceSignalErrorFull() instead")
    void openIdConnectProviderListByServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void openIdConnectProviderListByServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use openIdConnectProviderUpdateSignalErrorFull() instead")
    void openIdConnectProviderUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void openIdConnectProviderUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
