# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OpenidConnectProviderContractProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id: str=None, client_secret: str=None, description: str=None, display_name: str=None, metadata_endpoint: str=None):
        """OpenidConnectProviderContractProperties - a model defined in OpenAPI

        :param client_id: The client_id of this OpenidConnectProviderContractProperties.
        :param client_secret: The client_secret of this OpenidConnectProviderContractProperties.
        :param description: The description of this OpenidConnectProviderContractProperties.
        :param display_name: The display_name of this OpenidConnectProviderContractProperties.
        :param metadata_endpoint: The metadata_endpoint of this OpenidConnectProviderContractProperties.
        """
        self.openapi_types = {
            'client_id': str,
            'client_secret': str,
            'description': str,
            'display_name': str,
            'metadata_endpoint': str
        }

        self.attribute_map = {
            'client_id': 'clientId',
            'client_secret': 'clientSecret',
            'description': 'description',
            'display_name': 'displayName',
            'metadata_endpoint': 'metadataEndpoint'
        }

        self._client_id = client_id
        self._client_secret = client_secret
        self._description = description
        self._display_name = display_name
        self._metadata_endpoint = metadata_endpoint

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OpenidConnectProviderContractProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OpenidConnectProviderContractProperties of this OpenidConnectProviderContractProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this OpenidConnectProviderContractProperties.

        Client ID of developer console which is the client application.

        :return: The client_id of this OpenidConnectProviderContractProperties.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this OpenidConnectProviderContractProperties.

        Client ID of developer console which is the client application.

        :param client_id: The client_id of this OpenidConnectProviderContractProperties.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this OpenidConnectProviderContractProperties.

        Client Secret of developer console which is the client application.

        :return: The client_secret of this OpenidConnectProviderContractProperties.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this OpenidConnectProviderContractProperties.

        Client Secret of developer console which is the client application.

        :param client_secret: The client_secret of this OpenidConnectProviderContractProperties.
        :type client_secret: str
        """

        self._client_secret = client_secret

    @property
    def description(self):
        """Gets the description of this OpenidConnectProviderContractProperties.

        User-friendly description of OpenID Connect Provider.

        :return: The description of this OpenidConnectProviderContractProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OpenidConnectProviderContractProperties.

        User-friendly description of OpenID Connect Provider.

        :param description: The description of this OpenidConnectProviderContractProperties.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this OpenidConnectProviderContractProperties.

        User-friendly OpenID Connect Provider name.

        :return: The display_name of this OpenidConnectProviderContractProperties.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this OpenidConnectProviderContractProperties.

        User-friendly OpenID Connect Provider name.

        :param display_name: The display_name of this OpenidConnectProviderContractProperties.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")
        if display_name is not None and len(display_name) > 50:
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `50`")

        self._display_name = display_name

    @property
    def metadata_endpoint(self):
        """Gets the metadata_endpoint of this OpenidConnectProviderContractProperties.

        Metadata endpoint URI.

        :return: The metadata_endpoint of this OpenidConnectProviderContractProperties.
        :rtype: str
        """
        return self._metadata_endpoint

    @metadata_endpoint.setter
    def metadata_endpoint(self, metadata_endpoint):
        """Sets the metadata_endpoint of this OpenidConnectProviderContractProperties.

        Metadata endpoint URI.

        :param metadata_endpoint: The metadata_endpoint of this OpenidConnectProviderContractProperties.
        :type metadata_endpoint: str
        """
        if metadata_endpoint is None:
            raise ValueError("Invalid value for `metadata_endpoint`, must not be `None`")

        self._metadata_endpoint = metadata_endpoint
