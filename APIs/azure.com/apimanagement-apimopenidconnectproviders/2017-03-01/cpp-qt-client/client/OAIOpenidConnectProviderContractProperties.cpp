/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on OpenId Connect Provider entity associated with your Azure API Management deployment. API Management allows you to access APIs secured with token from [OpenID Connect Provider ](http://openid.net/connect/) to be accessed from the Developer Console.
 *
 * The version of the OpenAPI document: 2017-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOpenidConnectProviderContractProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOpenidConnectProviderContractProperties::OAIOpenidConnectProviderContractProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOpenidConnectProviderContractProperties::OAIOpenidConnectProviderContractProperties() {
    this->initializeModel();
}

OAIOpenidConnectProviderContractProperties::~OAIOpenidConnectProviderContractProperties() {}

void OAIOpenidConnectProviderContractProperties::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_secret_isSet = false;
    m_client_secret_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_metadata_endpoint_isSet = false;
    m_metadata_endpoint_isValid = false;
}

void OAIOpenidConnectProviderContractProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOpenidConnectProviderContractProperties::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_client_secret_isValid = ::OpenAPI::fromJsonValue(m_client_secret, json[QString("clientSecret")]);
    m_client_secret_isSet = !json[QString("clientSecret")].isNull() && m_client_secret_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_metadata_endpoint_isValid = ::OpenAPI::fromJsonValue(m_metadata_endpoint, json[QString("metadataEndpoint")]);
    m_metadata_endpoint_isSet = !json[QString("metadataEndpoint")].isNull() && m_metadata_endpoint_isValid;
}

QString OAIOpenidConnectProviderContractProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOpenidConnectProviderContractProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_secret_isSet) {
        obj.insert(QString("clientSecret"), ::OpenAPI::toJsonValue(m_client_secret));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_metadata_endpoint_isSet) {
        obj.insert(QString("metadataEndpoint"), ::OpenAPI::toJsonValue(m_metadata_endpoint));
    }
    return obj;
}

QString OAIOpenidConnectProviderContractProperties::getClientId() const {
    return m_client_id;
}
void OAIOpenidConnectProviderContractProperties::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIOpenidConnectProviderContractProperties::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIOpenidConnectProviderContractProperties::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIOpenidConnectProviderContractProperties::getClientSecret() const {
    return m_client_secret;
}
void OAIOpenidConnectProviderContractProperties::setClientSecret(const QString &client_secret) {
    m_client_secret = client_secret;
    m_client_secret_isSet = true;
}

bool OAIOpenidConnectProviderContractProperties::is_client_secret_Set() const{
    return m_client_secret_isSet;
}

bool OAIOpenidConnectProviderContractProperties::is_client_secret_Valid() const{
    return m_client_secret_isValid;
}

QString OAIOpenidConnectProviderContractProperties::getDescription() const {
    return m_description;
}
void OAIOpenidConnectProviderContractProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIOpenidConnectProviderContractProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIOpenidConnectProviderContractProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIOpenidConnectProviderContractProperties::getDisplayName() const {
    return m_display_name;
}
void OAIOpenidConnectProviderContractProperties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIOpenidConnectProviderContractProperties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIOpenidConnectProviderContractProperties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIOpenidConnectProviderContractProperties::getMetadataEndpoint() const {
    return m_metadata_endpoint;
}
void OAIOpenidConnectProviderContractProperties::setMetadataEndpoint(const QString &metadata_endpoint) {
    m_metadata_endpoint = metadata_endpoint;
    m_metadata_endpoint_isSet = true;
}

bool OAIOpenidConnectProviderContractProperties::is_metadata_endpoint_Set() const{
    return m_metadata_endpoint_isSet;
}

bool OAIOpenidConnectProviderContractProperties::is_metadata_endpoint_Valid() const{
    return m_metadata_endpoint_isValid;
}

bool OAIOpenidConnectProviderContractProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOpenidConnectProviderContractProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_client_id_isValid && m_display_name_isValid && m_metadata_endpoint_isValid && true;
}

} // namespace OpenAPI
