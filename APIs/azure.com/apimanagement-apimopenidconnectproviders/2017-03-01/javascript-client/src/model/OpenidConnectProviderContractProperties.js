/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on OpenId Connect Provider entity associated with your Azure API Management deployment. API Management allows you to access APIs secured with token from [OpenID Connect Provider ](http://openid.net/connect/) to be accessed from the Developer Console.
 *
 * The version of the OpenAPI document: 2017-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OpenidConnectProviderContractProperties model module.
 * @module model/OpenidConnectProviderContractProperties
 * @version 2017-03-01
 */
class OpenidConnectProviderContractProperties {
    /**
     * Constructs a new <code>OpenidConnectProviderContractProperties</code>.
     * OpenID Connect Providers Contract.
     * @alias module:model/OpenidConnectProviderContractProperties
     * @param clientId {String} Client ID of developer console which is the client application.
     * @param displayName {String} User-friendly OpenID Connect Provider name.
     * @param metadataEndpoint {String} Metadata endpoint URI.
     */
    constructor(clientId, displayName, metadataEndpoint) { 
        
        OpenidConnectProviderContractProperties.initialize(this, clientId, displayName, metadataEndpoint);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, clientId, displayName, metadataEndpoint) { 
        obj['clientId'] = clientId;
        obj['displayName'] = displayName;
        obj['metadataEndpoint'] = metadataEndpoint;
    }

    /**
     * Constructs a <code>OpenidConnectProviderContractProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OpenidConnectProviderContractProperties} obj Optional instance to populate.
     * @return {module:model/OpenidConnectProviderContractProperties} The populated <code>OpenidConnectProviderContractProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OpenidConnectProviderContractProperties();

            if (data.hasOwnProperty('clientId')) {
                obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
            }
            if (data.hasOwnProperty('clientSecret')) {
                obj['clientSecret'] = ApiClient.convertToType(data['clientSecret'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('metadataEndpoint')) {
                obj['metadataEndpoint'] = ApiClient.convertToType(data['metadataEndpoint'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OpenidConnectProviderContractProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OpenidConnectProviderContractProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OpenidConnectProviderContractProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['clientId'] && !(typeof data['clientId'] === 'string' || data['clientId'] instanceof String)) {
            throw new Error("Expected the field `clientId` to be a primitive type in the JSON string but got " + data['clientId']);
        }
        // ensure the json data is a string
        if (data['clientSecret'] && !(typeof data['clientSecret'] === 'string' || data['clientSecret'] instanceof String)) {
            throw new Error("Expected the field `clientSecret` to be a primitive type in the JSON string but got " + data['clientSecret']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['metadataEndpoint'] && !(typeof data['metadataEndpoint'] === 'string' || data['metadataEndpoint'] instanceof String)) {
            throw new Error("Expected the field `metadataEndpoint` to be a primitive type in the JSON string but got " + data['metadataEndpoint']);
        }

        return true;
    }


}

OpenidConnectProviderContractProperties.RequiredProperties = ["clientId", "displayName", "metadataEndpoint"];

/**
 * Client ID of developer console which is the client application.
 * @member {String} clientId
 */
OpenidConnectProviderContractProperties.prototype['clientId'] = undefined;

/**
 * Client Secret of developer console which is the client application.
 * @member {String} clientSecret
 */
OpenidConnectProviderContractProperties.prototype['clientSecret'] = undefined;

/**
 * User-friendly description of OpenID Connect Provider.
 * @member {String} description
 */
OpenidConnectProviderContractProperties.prototype['description'] = undefined;

/**
 * User-friendly OpenID Connect Provider name.
 * @member {String} displayName
 */
OpenidConnectProviderContractProperties.prototype['displayName'] = undefined;

/**
 * Metadata endpoint URI.
 * @member {String} metadataEndpoint
 */
OpenidConnectProviderContractProperties.prototype['metadataEndpoint'] = undefined;






export default OpenidConnectProviderContractProperties;

