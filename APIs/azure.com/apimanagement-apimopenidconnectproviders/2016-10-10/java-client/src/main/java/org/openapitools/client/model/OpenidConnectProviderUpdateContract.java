/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on OpenId Connect Provider entity associated with your Azure API Management deployment. API Management allows you to access APIs secured with token from [OpenID Connect Provider ](http://openid.net/connect/) to be accessed from the Developer Console.
 *
 * The version of the OpenAPI document: 2016-10-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Parameters supplied to the Update OpenID Connect Provider operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:23:53.701238-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OpenidConnectProviderUpdateContract {
  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CLIENT_SECRET = "clientSecret";
  @SerializedName(SERIALIZED_NAME_CLIENT_SECRET)
  private String clientSecret;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_METADATA_ENDPOINT = "metadataEndpoint";
  @SerializedName(SERIALIZED_NAME_METADATA_ENDPOINT)
  private String metadataEndpoint;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public OpenidConnectProviderUpdateContract() {
  }

  public OpenidConnectProviderUpdateContract clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Client ID of developer console which is the client application.
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public OpenidConnectProviderUpdateContract clientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
    return this;
  }

  /**
   * Client Secret of developer console which is the client application.
   * @return clientSecret
   */
  @javax.annotation.Nullable
  public String getClientSecret() {
    return clientSecret;
  }

  public void setClientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
  }


  public OpenidConnectProviderUpdateContract description(String description) {
    this.description = description;
    return this;
  }

  /**
   * User-friendly description of OpenID Connect Provider.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public OpenidConnectProviderUpdateContract metadataEndpoint(String metadataEndpoint) {
    this.metadataEndpoint = metadataEndpoint;
    return this;
  }

  /**
   * Metadata endpoint URI.
   * @return metadataEndpoint
   */
  @javax.annotation.Nullable
  public String getMetadataEndpoint() {
    return metadataEndpoint;
  }

  public void setMetadataEndpoint(String metadataEndpoint) {
    this.metadataEndpoint = metadataEndpoint;
  }


  public OpenidConnectProviderUpdateContract name(String name) {
    this.name = name;
    return this;
  }

  /**
   * User-friendly OpenID Connect Provider name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OpenidConnectProviderUpdateContract openidConnectProviderUpdateContract = (OpenidConnectProviderUpdateContract) o;
    return Objects.equals(this.clientId, openidConnectProviderUpdateContract.clientId) &&
        Objects.equals(this.clientSecret, openidConnectProviderUpdateContract.clientSecret) &&
        Objects.equals(this.description, openidConnectProviderUpdateContract.description) &&
        Objects.equals(this.metadataEndpoint, openidConnectProviderUpdateContract.metadataEndpoint) &&
        Objects.equals(this.name, openidConnectProviderUpdateContract.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientId, clientSecret, description, metadataEndpoint, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OpenidConnectProviderUpdateContract {\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    metadataEndpoint: ").append(toIndentedString(metadataEndpoint)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientId");
    openapiFields.add("clientSecret");
    openapiFields.add("description");
    openapiFields.add("metadataEndpoint");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OpenidConnectProviderUpdateContract
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OpenidConnectProviderUpdateContract.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OpenidConnectProviderUpdateContract is not found in the empty JSON string", OpenidConnectProviderUpdateContract.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OpenidConnectProviderUpdateContract.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OpenidConnectProviderUpdateContract` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clientId") != null && !jsonObj.get("clientId").isJsonNull()) && !jsonObj.get("clientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientId").toString()));
      }
      if ((jsonObj.get("clientSecret") != null && !jsonObj.get("clientSecret").isJsonNull()) && !jsonObj.get("clientSecret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientSecret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientSecret").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("metadataEndpoint") != null && !jsonObj.get("metadataEndpoint").isJsonNull()) && !jsonObj.get("metadataEndpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadataEndpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadataEndpoint").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OpenidConnectProviderUpdateContract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OpenidConnectProviderUpdateContract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OpenidConnectProviderUpdateContract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OpenidConnectProviderUpdateContract.class));

       return (TypeAdapter<T>) new TypeAdapter<OpenidConnectProviderUpdateContract>() {
           @Override
           public void write(JsonWriter out, OpenidConnectProviderUpdateContract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OpenidConnectProviderUpdateContract read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OpenidConnectProviderUpdateContract given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OpenidConnectProviderUpdateContract
   * @throws IOException if the JSON string is invalid with respect to OpenidConnectProviderUpdateContract
   */
  public static OpenidConnectProviderUpdateContract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OpenidConnectProviderUpdateContract.class);
  }

  /**
   * Convert an instance of OpenidConnectProviderUpdateContract to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

