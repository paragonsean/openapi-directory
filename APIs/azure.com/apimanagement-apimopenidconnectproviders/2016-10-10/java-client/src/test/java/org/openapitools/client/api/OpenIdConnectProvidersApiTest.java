/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on OpenId Connect Provider entity associated with your Azure API Management deployment. API Management allows you to access APIs secured with token from [OpenID Connect Provider ](http://openid.net/connect/) to be accessed from the Developer Console.
 *
 * The version of the OpenAPI document: 2016-10-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.OpenIdConnectProviderCollection;
import org.openapitools.client.model.OpenIdConnectProvidersGetDefaultResponse;
import org.openapitools.client.model.OpenidConnectProviderContract;
import org.openapitools.client.model.OpenidConnectProviderCreateContract;
import org.openapitools.client.model.OpenidConnectProviderUpdateContract;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OpenIdConnectProvidersApi
 */
@Disabled
public class OpenIdConnectProvidersApiTest {

    private final OpenIdConnectProvidersApi api = new OpenIdConnectProvidersApi();

    /**
     * Creates or updates the OpenID Connect Provider.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openIdConnectProvidersCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String opid = null;
        String apiVersion = null;
        String subscriptionId = null;
        OpenidConnectProviderCreateContract parameters = null;
        api.openIdConnectProvidersCreateOrUpdate(resourceGroupName, serviceName, opid, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Deletes specific OpenID Connect Provider of the API Management service instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openIdConnectProvidersDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String opid = null;
        String ifMatch = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.openIdConnectProvidersDelete(resourceGroupName, serviceName, opid, ifMatch, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets specific OpenID Connect Provider.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openIdConnectProvidersGetTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String opid = null;
        String apiVersion = null;
        String subscriptionId = null;
        OpenidConnectProviderContract response = api.openIdConnectProvidersGet(resourceGroupName, serviceName, opid, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists all OpenID Connect Providers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openIdConnectProvidersListByServiceTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        OpenIdConnectProviderCollection response = api.openIdConnectProvidersListByService(resourceGroupName, serviceName, apiVersion, subscriptionId, $filter, $top, $skip);
        // TODO: test validations
    }

    /**
     * Updates the specific OpenID Connect Provider.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openIdConnectProvidersUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String opid = null;
        String ifMatch = null;
        String apiVersion = null;
        String subscriptionId = null;
        OpenidConnectProviderUpdateContract parameters = null;
        api.openIdConnectProvidersUpdate(resourceGroupName, serviceName, opid, ifMatch, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

}
