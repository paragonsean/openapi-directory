/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ExpressRouteCircuit;
import org.openapitools.client.model.ExpressRouteCircuitListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExpressRouteCircuitsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExpressRouteCircuitsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExpressRouteCircuitsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for expressRouteCircuitsCreateOrUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the circuit. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the create or update express route circuit operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ExpressRouteCircuit resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting ExpressRouteCircuit resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteCircuitsCreateOrUpdateCall(String resourceGroupName, String circuitName, String apiVersion, String subscriptionId, ExpressRouteCircuit parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "circuitName" + "}", localVarApiClient.escapeString(circuitName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expressRouteCircuitsCreateOrUpdateValidateBeforeCall(String resourceGroupName, String circuitName, String apiVersion, String subscriptionId, ExpressRouteCircuit parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling expressRouteCircuitsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'circuitName' is set
        if (circuitName == null) {
            throw new ApiException("Missing the required parameter 'circuitName' when calling expressRouteCircuitsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling expressRouteCircuitsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling expressRouteCircuitsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling expressRouteCircuitsCreateOrUpdate(Async)");
        }

        return expressRouteCircuitsCreateOrUpdateCall(resourceGroupName, circuitName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates or updates an express route circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the circuit. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the create or update express route circuit operation. (required)
     * @return ExpressRouteCircuit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ExpressRouteCircuit resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting ExpressRouteCircuit resource. </td><td>  -  </td></tr>
     </table>
     */
    public ExpressRouteCircuit expressRouteCircuitsCreateOrUpdate(String resourceGroupName, String circuitName, String apiVersion, String subscriptionId, ExpressRouteCircuit parameters) throws ApiException {
        ApiResponse<ExpressRouteCircuit> localVarResp = expressRouteCircuitsCreateOrUpdateWithHttpInfo(resourceGroupName, circuitName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates an express route circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the circuit. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the create or update express route circuit operation. (required)
     * @return ApiResponse&lt;ExpressRouteCircuit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ExpressRouteCircuit resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting ExpressRouteCircuit resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpressRouteCircuit> expressRouteCircuitsCreateOrUpdateWithHttpInfo(String resourceGroupName, String circuitName, String apiVersion, String subscriptionId, ExpressRouteCircuit parameters) throws ApiException {
        okhttp3.Call localVarCall = expressRouteCircuitsCreateOrUpdateValidateBeforeCall(resourceGroupName, circuitName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<ExpressRouteCircuit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates an express route circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the circuit. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the create or update express route circuit operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ExpressRouteCircuit resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting ExpressRouteCircuit resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteCircuitsCreateOrUpdateAsync(String resourceGroupName, String circuitName, String apiVersion, String subscriptionId, ExpressRouteCircuit parameters, final ApiCallback<ExpressRouteCircuit> _callback) throws ApiException {

        okhttp3.Call localVarCall = expressRouteCircuitsCreateOrUpdateValidateBeforeCall(resourceGroupName, circuitName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<ExpressRouteCircuit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expressRouteCircuitsDelete
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the express route circuit. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. Sets &#39;Disabling&#39; provisioningState until the operation completes. Returns an operation URI that can be queried to find the current state of the operation. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteCircuitsDeleteCall(String resourceGroupName, String circuitName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "circuitName" + "}", localVarApiClient.escapeString(circuitName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expressRouteCircuitsDeleteValidateBeforeCall(String resourceGroupName, String circuitName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling expressRouteCircuitsDelete(Async)");
        }

        // verify the required parameter 'circuitName' is set
        if (circuitName == null) {
            throw new ApiException("Missing the required parameter 'circuitName' when calling expressRouteCircuitsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling expressRouteCircuitsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling expressRouteCircuitsDelete(Async)");
        }

        return expressRouteCircuitsDeleteCall(resourceGroupName, circuitName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes the specified express route circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the express route circuit. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. Sets &#39;Disabling&#39; provisioningState until the operation completes. Returns an operation URI that can be queried to find the current state of the operation. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
     </table>
     */
    public void expressRouteCircuitsDelete(String resourceGroupName, String circuitName, String apiVersion, String subscriptionId) throws ApiException {
        expressRouteCircuitsDeleteWithHttpInfo(resourceGroupName, circuitName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes the specified express route circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the express route circuit. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. Sets &#39;Disabling&#39; provisioningState until the operation completes. Returns an operation URI that can be queried to find the current state of the operation. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> expressRouteCircuitsDeleteWithHttpInfo(String resourceGroupName, String circuitName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = expressRouteCircuitsDeleteValidateBeforeCall(resourceGroupName, circuitName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified express route circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the express route circuit. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. Sets &#39;Disabling&#39; provisioningState until the operation completes. Returns an operation URI that can be queried to find the current state of the operation. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteCircuitsDeleteAsync(String resourceGroupName, String circuitName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = expressRouteCircuitsDeleteValidateBeforeCall(resourceGroupName, circuitName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for expressRouteCircuitsGet
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of express route circuit. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting ExpressRouteCircuit resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteCircuitsGetCall(String resourceGroupName, String circuitName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "circuitName" + "}", localVarApiClient.escapeString(circuitName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expressRouteCircuitsGetValidateBeforeCall(String resourceGroupName, String circuitName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling expressRouteCircuitsGet(Async)");
        }

        // verify the required parameter 'circuitName' is set
        if (circuitName == null) {
            throw new ApiException("Missing the required parameter 'circuitName' when calling expressRouteCircuitsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling expressRouteCircuitsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling expressRouteCircuitsGet(Async)");
        }

        return expressRouteCircuitsGetCall(resourceGroupName, circuitName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets information about the specified express route circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of express route circuit. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ExpressRouteCircuit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting ExpressRouteCircuit resource. </td><td>  -  </td></tr>
     </table>
     */
    public ExpressRouteCircuit expressRouteCircuitsGet(String resourceGroupName, String circuitName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ExpressRouteCircuit> localVarResp = expressRouteCircuitsGetWithHttpInfo(resourceGroupName, circuitName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about the specified express route circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of express route circuit. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;ExpressRouteCircuit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting ExpressRouteCircuit resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpressRouteCircuit> expressRouteCircuitsGetWithHttpInfo(String resourceGroupName, String circuitName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = expressRouteCircuitsGetValidateBeforeCall(resourceGroupName, circuitName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ExpressRouteCircuit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about the specified express route circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of express route circuit. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting ExpressRouteCircuit resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteCircuitsGetAsync(String resourceGroupName, String circuitName, String apiVersion, String subscriptionId, final ApiCallback<ExpressRouteCircuit> _callback) throws ApiException {

        okhttp3.Call localVarCall = expressRouteCircuitsGetValidateBeforeCall(resourceGroupName, circuitName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ExpressRouteCircuit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expressRouteCircuitsList
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting ExpressRouteCircuitAuthorization resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteCircuitsListCall(String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expressRouteCircuitsListValidateBeforeCall(String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling expressRouteCircuitsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling expressRouteCircuitsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling expressRouteCircuitsList(Async)");
        }

        return expressRouteCircuitsListCall(resourceGroupName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets all the express route circuits in a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ExpressRouteCircuitListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting ExpressRouteCircuitAuthorization resource. </td><td>  -  </td></tr>
     </table>
     */
    public ExpressRouteCircuitListResult expressRouteCircuitsList(String resourceGroupName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ExpressRouteCircuitListResult> localVarResp = expressRouteCircuitsListWithHttpInfo(resourceGroupName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all the express route circuits in a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;ExpressRouteCircuitListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting ExpressRouteCircuitAuthorization resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpressRouteCircuitListResult> expressRouteCircuitsListWithHttpInfo(String resourceGroupName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = expressRouteCircuitsListValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ExpressRouteCircuitListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all the express route circuits in a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting ExpressRouteCircuitAuthorization resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteCircuitsListAsync(String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback<ExpressRouteCircuitListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = expressRouteCircuitsListValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ExpressRouteCircuitListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expressRouteCircuitsListAll
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ExpressRouteCircuit resources. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteCircuitsListAllCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Network/expressRouteCircuits"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expressRouteCircuitsListAllValidateBeforeCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling expressRouteCircuitsListAll(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling expressRouteCircuitsListAll(Async)");
        }

        return expressRouteCircuitsListAllCall(apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets all the express route circuits in a subscription.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ExpressRouteCircuitListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ExpressRouteCircuit resources. </td><td>  -  </td></tr>
     </table>
     */
    public ExpressRouteCircuitListResult expressRouteCircuitsListAll(String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ExpressRouteCircuitListResult> localVarResp = expressRouteCircuitsListAllWithHttpInfo(apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all the express route circuits in a subscription.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;ExpressRouteCircuitListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ExpressRouteCircuit resources. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpressRouteCircuitListResult> expressRouteCircuitsListAllWithHttpInfo(String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = expressRouteCircuitsListAllValidateBeforeCall(apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ExpressRouteCircuitListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all the express route circuits in a subscription.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ExpressRouteCircuit resources. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteCircuitsListAllAsync(String apiVersion, String subscriptionId, final ApiCallback<ExpressRouteCircuitListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = expressRouteCircuitsListAllValidateBeforeCall(apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ExpressRouteCircuitListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
