/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AuthorizationListResult;
import org.openapitools.client.model.ExpressRouteCircuitAuthorization;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExpressRouteCircuitAuthorizationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExpressRouteCircuitAuthorizationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExpressRouteCircuitAuthorizationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for expressRouteCircuitAuthorizationsCreateOrUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the express route circuit. (required)
     * @param authorizationName The name of the authorization. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param authorizationParameters Parameters supplied to the create or update express route circuit authorization operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ExpressRouteCircuitAuthorization resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting ExpressRouteCircuitAuthorization resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteCircuitAuthorizationsCreateOrUpdateCall(String resourceGroupName, String circuitName, String authorizationName, String apiVersion, String subscriptionId, ExpressRouteCircuitAuthorization authorizationParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authorizationParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/authorizations/{authorizationName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "circuitName" + "}", localVarApiClient.escapeString(circuitName.toString()))
            .replace("{" + "authorizationName" + "}", localVarApiClient.escapeString(authorizationName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expressRouteCircuitAuthorizationsCreateOrUpdateValidateBeforeCall(String resourceGroupName, String circuitName, String authorizationName, String apiVersion, String subscriptionId, ExpressRouteCircuitAuthorization authorizationParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling expressRouteCircuitAuthorizationsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'circuitName' is set
        if (circuitName == null) {
            throw new ApiException("Missing the required parameter 'circuitName' when calling expressRouteCircuitAuthorizationsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'authorizationName' is set
        if (authorizationName == null) {
            throw new ApiException("Missing the required parameter 'authorizationName' when calling expressRouteCircuitAuthorizationsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling expressRouteCircuitAuthorizationsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling expressRouteCircuitAuthorizationsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'authorizationParameters' is set
        if (authorizationParameters == null) {
            throw new ApiException("Missing the required parameter 'authorizationParameters' when calling expressRouteCircuitAuthorizationsCreateOrUpdate(Async)");
        }

        return expressRouteCircuitAuthorizationsCreateOrUpdateCall(resourceGroupName, circuitName, authorizationName, apiVersion, subscriptionId, authorizationParameters, _callback);

    }

    /**
     * 
     * Creates or updates an authorization in the specified express route circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the express route circuit. (required)
     * @param authorizationName The name of the authorization. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param authorizationParameters Parameters supplied to the create or update express route circuit authorization operation. (required)
     * @return ExpressRouteCircuitAuthorization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ExpressRouteCircuitAuthorization resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting ExpressRouteCircuitAuthorization resource. </td><td>  -  </td></tr>
     </table>
     */
    public ExpressRouteCircuitAuthorization expressRouteCircuitAuthorizationsCreateOrUpdate(String resourceGroupName, String circuitName, String authorizationName, String apiVersion, String subscriptionId, ExpressRouteCircuitAuthorization authorizationParameters) throws ApiException {
        ApiResponse<ExpressRouteCircuitAuthorization> localVarResp = expressRouteCircuitAuthorizationsCreateOrUpdateWithHttpInfo(resourceGroupName, circuitName, authorizationName, apiVersion, subscriptionId, authorizationParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates an authorization in the specified express route circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the express route circuit. (required)
     * @param authorizationName The name of the authorization. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param authorizationParameters Parameters supplied to the create or update express route circuit authorization operation. (required)
     * @return ApiResponse&lt;ExpressRouteCircuitAuthorization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ExpressRouteCircuitAuthorization resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting ExpressRouteCircuitAuthorization resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpressRouteCircuitAuthorization> expressRouteCircuitAuthorizationsCreateOrUpdateWithHttpInfo(String resourceGroupName, String circuitName, String authorizationName, String apiVersion, String subscriptionId, ExpressRouteCircuitAuthorization authorizationParameters) throws ApiException {
        okhttp3.Call localVarCall = expressRouteCircuitAuthorizationsCreateOrUpdateValidateBeforeCall(resourceGroupName, circuitName, authorizationName, apiVersion, subscriptionId, authorizationParameters, null);
        Type localVarReturnType = new TypeToken<ExpressRouteCircuitAuthorization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates an authorization in the specified express route circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the express route circuit. (required)
     * @param authorizationName The name of the authorization. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param authorizationParameters Parameters supplied to the create or update express route circuit authorization operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ExpressRouteCircuitAuthorization resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting ExpressRouteCircuitAuthorization resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteCircuitAuthorizationsCreateOrUpdateAsync(String resourceGroupName, String circuitName, String authorizationName, String apiVersion, String subscriptionId, ExpressRouteCircuitAuthorization authorizationParameters, final ApiCallback<ExpressRouteCircuitAuthorization> _callback) throws ApiException {

        okhttp3.Call localVarCall = expressRouteCircuitAuthorizationsCreateOrUpdateValidateBeforeCall(resourceGroupName, circuitName, authorizationName, apiVersion, subscriptionId, authorizationParameters, _callback);
        Type localVarReturnType = new TypeToken<ExpressRouteCircuitAuthorization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expressRouteCircuitAuthorizationsDelete
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the express route circuit. (required)
     * @param authorizationName The name of the authorization. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteCircuitAuthorizationsDeleteCall(String resourceGroupName, String circuitName, String authorizationName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/authorizations/{authorizationName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "circuitName" + "}", localVarApiClient.escapeString(circuitName.toString()))
            .replace("{" + "authorizationName" + "}", localVarApiClient.escapeString(authorizationName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expressRouteCircuitAuthorizationsDeleteValidateBeforeCall(String resourceGroupName, String circuitName, String authorizationName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling expressRouteCircuitAuthorizationsDelete(Async)");
        }

        // verify the required parameter 'circuitName' is set
        if (circuitName == null) {
            throw new ApiException("Missing the required parameter 'circuitName' when calling expressRouteCircuitAuthorizationsDelete(Async)");
        }

        // verify the required parameter 'authorizationName' is set
        if (authorizationName == null) {
            throw new ApiException("Missing the required parameter 'authorizationName' when calling expressRouteCircuitAuthorizationsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling expressRouteCircuitAuthorizationsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling expressRouteCircuitAuthorizationsDelete(Async)");
        }

        return expressRouteCircuitAuthorizationsDeleteCall(resourceGroupName, circuitName, authorizationName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes the specified authorization from the specified express route circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the express route circuit. (required)
     * @param authorizationName The name of the authorization. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
     </table>
     */
    public void expressRouteCircuitAuthorizationsDelete(String resourceGroupName, String circuitName, String authorizationName, String apiVersion, String subscriptionId) throws ApiException {
        expressRouteCircuitAuthorizationsDeleteWithHttpInfo(resourceGroupName, circuitName, authorizationName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes the specified authorization from the specified express route circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the express route circuit. (required)
     * @param authorizationName The name of the authorization. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> expressRouteCircuitAuthorizationsDeleteWithHttpInfo(String resourceGroupName, String circuitName, String authorizationName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = expressRouteCircuitAuthorizationsDeleteValidateBeforeCall(resourceGroupName, circuitName, authorizationName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified authorization from the specified express route circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the express route circuit. (required)
     * @param authorizationName The name of the authorization. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteCircuitAuthorizationsDeleteAsync(String resourceGroupName, String circuitName, String authorizationName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = expressRouteCircuitAuthorizationsDeleteValidateBeforeCall(resourceGroupName, circuitName, authorizationName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for expressRouteCircuitAuthorizationsGet
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the express route circuit. (required)
     * @param authorizationName The name of the authorization. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the ExpressRouteCircuitAuthorization resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteCircuitAuthorizationsGetCall(String resourceGroupName, String circuitName, String authorizationName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/authorizations/{authorizationName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "circuitName" + "}", localVarApiClient.escapeString(circuitName.toString()))
            .replace("{" + "authorizationName" + "}", localVarApiClient.escapeString(authorizationName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expressRouteCircuitAuthorizationsGetValidateBeforeCall(String resourceGroupName, String circuitName, String authorizationName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling expressRouteCircuitAuthorizationsGet(Async)");
        }

        // verify the required parameter 'circuitName' is set
        if (circuitName == null) {
            throw new ApiException("Missing the required parameter 'circuitName' when calling expressRouteCircuitAuthorizationsGet(Async)");
        }

        // verify the required parameter 'authorizationName' is set
        if (authorizationName == null) {
            throw new ApiException("Missing the required parameter 'authorizationName' when calling expressRouteCircuitAuthorizationsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling expressRouteCircuitAuthorizationsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling expressRouteCircuitAuthorizationsGet(Async)");
        }

        return expressRouteCircuitAuthorizationsGetCall(resourceGroupName, circuitName, authorizationName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets the specified authorization from the specified express route circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the express route circuit. (required)
     * @param authorizationName The name of the authorization. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ExpressRouteCircuitAuthorization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the ExpressRouteCircuitAuthorization resource. </td><td>  -  </td></tr>
     </table>
     */
    public ExpressRouteCircuitAuthorization expressRouteCircuitAuthorizationsGet(String resourceGroupName, String circuitName, String authorizationName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ExpressRouteCircuitAuthorization> localVarResp = expressRouteCircuitAuthorizationsGetWithHttpInfo(resourceGroupName, circuitName, authorizationName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the specified authorization from the specified express route circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the express route circuit. (required)
     * @param authorizationName The name of the authorization. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;ExpressRouteCircuitAuthorization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the ExpressRouteCircuitAuthorization resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpressRouteCircuitAuthorization> expressRouteCircuitAuthorizationsGetWithHttpInfo(String resourceGroupName, String circuitName, String authorizationName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = expressRouteCircuitAuthorizationsGetValidateBeforeCall(resourceGroupName, circuitName, authorizationName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ExpressRouteCircuitAuthorization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the specified authorization from the specified express route circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the express route circuit. (required)
     * @param authorizationName The name of the authorization. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the ExpressRouteCircuitAuthorization resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteCircuitAuthorizationsGetAsync(String resourceGroupName, String circuitName, String authorizationName, String apiVersion, String subscriptionId, final ApiCallback<ExpressRouteCircuitAuthorization> _callback) throws ApiException {

        okhttp3.Call localVarCall = expressRouteCircuitAuthorizationsGetValidateBeforeCall(resourceGroupName, circuitName, authorizationName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ExpressRouteCircuitAuthorization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expressRouteCircuitAuthorizationsList
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the circuit. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ExpressRouteCircuitAuthorization resources. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteCircuitAuthorizationsListCall(String resourceGroupName, String circuitName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/authorizations"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "circuitName" + "}", localVarApiClient.escapeString(circuitName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expressRouteCircuitAuthorizationsListValidateBeforeCall(String resourceGroupName, String circuitName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling expressRouteCircuitAuthorizationsList(Async)");
        }

        // verify the required parameter 'circuitName' is set
        if (circuitName == null) {
            throw new ApiException("Missing the required parameter 'circuitName' when calling expressRouteCircuitAuthorizationsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling expressRouteCircuitAuthorizationsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling expressRouteCircuitAuthorizationsList(Async)");
        }

        return expressRouteCircuitAuthorizationsListCall(resourceGroupName, circuitName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets all authorizations in an express route circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the circuit. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return AuthorizationListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ExpressRouteCircuitAuthorization resources. </td><td>  -  </td></tr>
     </table>
     */
    public AuthorizationListResult expressRouteCircuitAuthorizationsList(String resourceGroupName, String circuitName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<AuthorizationListResult> localVarResp = expressRouteCircuitAuthorizationsListWithHttpInfo(resourceGroupName, circuitName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all authorizations in an express route circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the circuit. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;AuthorizationListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ExpressRouteCircuitAuthorization resources. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthorizationListResult> expressRouteCircuitAuthorizationsListWithHttpInfo(String resourceGroupName, String circuitName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = expressRouteCircuitAuthorizationsListValidateBeforeCall(resourceGroupName, circuitName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<AuthorizationListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all authorizations in an express route circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the circuit. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ExpressRouteCircuitAuthorization resources. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteCircuitAuthorizationsListAsync(String resourceGroupName, String circuitName, String apiVersion, String subscriptionId, final ApiCallback<AuthorizationListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = expressRouteCircuitAuthorizationsListValidateBeforeCall(resourceGroupName, circuitName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<AuthorizationListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
