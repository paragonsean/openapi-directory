/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIExpressRouteCircuitsApi_H
#define OAI_OAIExpressRouteCircuitsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIExpressRouteCircuit.h"
#include "OAIExpressRouteCircuitListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIExpressRouteCircuitsApi : public QObject {
    Q_OBJECT

public:
    OAIExpressRouteCircuitsApi(const int timeOut = 0);
    ~OAIExpressRouteCircuitsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  circuit_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIExpressRouteCircuit [required]
    */
    virtual void expressRouteCircuitsCreateOrUpdate(const QString &resource_group_name, const QString &circuit_name, const QString &api_version, const QString &subscription_id, const OAIExpressRouteCircuit &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  circuit_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void expressRouteCircuitsDelete(const QString &resource_group_name, const QString &circuit_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  circuit_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void expressRouteCircuitsGet(const QString &resource_group_name, const QString &circuit_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void expressRouteCircuitsList(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void expressRouteCircuitsListAll(const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void expressRouteCircuitsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void expressRouteCircuitsDeleteCallback(OAIHttpRequestWorker *worker);
    void expressRouteCircuitsGetCallback(OAIHttpRequestWorker *worker);
    void expressRouteCircuitsListCallback(OAIHttpRequestWorker *worker);
    void expressRouteCircuitsListAllCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void expressRouteCircuitsCreateOrUpdateSignal(OAIExpressRouteCircuit summary);
    void expressRouteCircuitsDeleteSignal();
    void expressRouteCircuitsGetSignal(OAIExpressRouteCircuit summary);
    void expressRouteCircuitsListSignal(OAIExpressRouteCircuitListResult summary);
    void expressRouteCircuitsListAllSignal(OAIExpressRouteCircuitListResult summary);


    void expressRouteCircuitsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIExpressRouteCircuit summary);
    void expressRouteCircuitsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void expressRouteCircuitsGetSignalFull(OAIHttpRequestWorker *worker, OAIExpressRouteCircuit summary);
    void expressRouteCircuitsListSignalFull(OAIHttpRequestWorker *worker, OAIExpressRouteCircuitListResult summary);
    void expressRouteCircuitsListAllSignalFull(OAIHttpRequestWorker *worker, OAIExpressRouteCircuitListResult summary);

    Q_DECL_DEPRECATED_X("Use expressRouteCircuitsCreateOrUpdateSignalError() instead")
    void expressRouteCircuitsCreateOrUpdateSignalE(OAIExpressRouteCircuit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCircuitsCreateOrUpdateSignalError(OAIExpressRouteCircuit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteCircuitsDeleteSignalError() instead")
    void expressRouteCircuitsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCircuitsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteCircuitsGetSignalError() instead")
    void expressRouteCircuitsGetSignalE(OAIExpressRouteCircuit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCircuitsGetSignalError(OAIExpressRouteCircuit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteCircuitsListSignalError() instead")
    void expressRouteCircuitsListSignalE(OAIExpressRouteCircuitListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCircuitsListSignalError(OAIExpressRouteCircuitListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteCircuitsListAllSignalError() instead")
    void expressRouteCircuitsListAllSignalE(OAIExpressRouteCircuitListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCircuitsListAllSignalError(OAIExpressRouteCircuitListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use expressRouteCircuitsCreateOrUpdateSignalErrorFull() instead")
    void expressRouteCircuitsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCircuitsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteCircuitsDeleteSignalErrorFull() instead")
    void expressRouteCircuitsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCircuitsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteCircuitsGetSignalErrorFull() instead")
    void expressRouteCircuitsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCircuitsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteCircuitsListSignalErrorFull() instead")
    void expressRouteCircuitsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCircuitsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteCircuitsListAllSignalErrorFull() instead")
    void expressRouteCircuitsListAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCircuitsListAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
