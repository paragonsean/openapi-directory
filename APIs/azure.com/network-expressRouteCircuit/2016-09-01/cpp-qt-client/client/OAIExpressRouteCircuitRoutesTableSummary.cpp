/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpressRouteCircuitRoutesTableSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpressRouteCircuitRoutesTableSummary::OAIExpressRouteCircuitRoutesTableSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpressRouteCircuitRoutesTableSummary::OAIExpressRouteCircuitRoutesTableSummary() {
    this->initializeModel();
}

OAIExpressRouteCircuitRoutesTableSummary::~OAIExpressRouteCircuitRoutesTableSummary() {}

void OAIExpressRouteCircuitRoutesTableSummary::initializeModel() {

    m_as_isSet = false;
    m_as_isValid = false;

    m_neighbor_isSet = false;
    m_neighbor_isValid = false;

    m_state_pfx_rcd_isSet = false;
    m_state_pfx_rcd_isValid = false;

    m_up_down_isSet = false;
    m_up_down_isValid = false;

    m_v_isSet = false;
    m_v_isValid = false;
}

void OAIExpressRouteCircuitRoutesTableSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpressRouteCircuitRoutesTableSummary::fromJsonObject(QJsonObject json) {

    m_as_isValid = ::OpenAPI::fromJsonValue(m_as, json[QString("as")]);
    m_as_isSet = !json[QString("as")].isNull() && m_as_isValid;

    m_neighbor_isValid = ::OpenAPI::fromJsonValue(m_neighbor, json[QString("neighbor")]);
    m_neighbor_isSet = !json[QString("neighbor")].isNull() && m_neighbor_isValid;

    m_state_pfx_rcd_isValid = ::OpenAPI::fromJsonValue(m_state_pfx_rcd, json[QString("statePfxRcd")]);
    m_state_pfx_rcd_isSet = !json[QString("statePfxRcd")].isNull() && m_state_pfx_rcd_isValid;

    m_up_down_isValid = ::OpenAPI::fromJsonValue(m_up_down, json[QString("upDown")]);
    m_up_down_isSet = !json[QString("upDown")].isNull() && m_up_down_isValid;

    m_v_isValid = ::OpenAPI::fromJsonValue(m_v, json[QString("v")]);
    m_v_isSet = !json[QString("v")].isNull() && m_v_isValid;
}

QString OAIExpressRouteCircuitRoutesTableSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpressRouteCircuitRoutesTableSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_as_isSet) {
        obj.insert(QString("as"), ::OpenAPI::toJsonValue(m_as));
    }
    if (m_neighbor_isSet) {
        obj.insert(QString("neighbor"), ::OpenAPI::toJsonValue(m_neighbor));
    }
    if (m_state_pfx_rcd_isSet) {
        obj.insert(QString("statePfxRcd"), ::OpenAPI::toJsonValue(m_state_pfx_rcd));
    }
    if (m_up_down_isSet) {
        obj.insert(QString("upDown"), ::OpenAPI::toJsonValue(m_up_down));
    }
    if (m_v_isSet) {
        obj.insert(QString("v"), ::OpenAPI::toJsonValue(m_v));
    }
    return obj;
}

qint32 OAIExpressRouteCircuitRoutesTableSummary::getAs() const {
    return m_as;
}
void OAIExpressRouteCircuitRoutesTableSummary::setAs(const qint32 &as) {
    m_as = as;
    m_as_isSet = true;
}

bool OAIExpressRouteCircuitRoutesTableSummary::is_as_Set() const{
    return m_as_isSet;
}

bool OAIExpressRouteCircuitRoutesTableSummary::is_as_Valid() const{
    return m_as_isValid;
}

QString OAIExpressRouteCircuitRoutesTableSummary::getNeighbor() const {
    return m_neighbor;
}
void OAIExpressRouteCircuitRoutesTableSummary::setNeighbor(const QString &neighbor) {
    m_neighbor = neighbor;
    m_neighbor_isSet = true;
}

bool OAIExpressRouteCircuitRoutesTableSummary::is_neighbor_Set() const{
    return m_neighbor_isSet;
}

bool OAIExpressRouteCircuitRoutesTableSummary::is_neighbor_Valid() const{
    return m_neighbor_isValid;
}

QString OAIExpressRouteCircuitRoutesTableSummary::getStatePfxRcd() const {
    return m_state_pfx_rcd;
}
void OAIExpressRouteCircuitRoutesTableSummary::setStatePfxRcd(const QString &state_pfx_rcd) {
    m_state_pfx_rcd = state_pfx_rcd;
    m_state_pfx_rcd_isSet = true;
}

bool OAIExpressRouteCircuitRoutesTableSummary::is_state_pfx_rcd_Set() const{
    return m_state_pfx_rcd_isSet;
}

bool OAIExpressRouteCircuitRoutesTableSummary::is_state_pfx_rcd_Valid() const{
    return m_state_pfx_rcd_isValid;
}

QString OAIExpressRouteCircuitRoutesTableSummary::getUpDown() const {
    return m_up_down;
}
void OAIExpressRouteCircuitRoutesTableSummary::setUpDown(const QString &up_down) {
    m_up_down = up_down;
    m_up_down_isSet = true;
}

bool OAIExpressRouteCircuitRoutesTableSummary::is_up_down_Set() const{
    return m_up_down_isSet;
}

bool OAIExpressRouteCircuitRoutesTableSummary::is_up_down_Valid() const{
    return m_up_down_isValid;
}

qint32 OAIExpressRouteCircuitRoutesTableSummary::getV() const {
    return m_v;
}
void OAIExpressRouteCircuitRoutesTableSummary::setV(const qint32 &v) {
    m_v = v;
    m_v_isSet = true;
}

bool OAIExpressRouteCircuitRoutesTableSummary::is_v_Set() const{
    return m_v_isSet;
}

bool OAIExpressRouteCircuitRoutesTableSummary::is_v_Valid() const{
    return m_v_isValid;
}

bool OAIExpressRouteCircuitRoutesTableSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_as_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_neighbor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_pfx_rcd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_up_down_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpressRouteCircuitRoutesTableSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
