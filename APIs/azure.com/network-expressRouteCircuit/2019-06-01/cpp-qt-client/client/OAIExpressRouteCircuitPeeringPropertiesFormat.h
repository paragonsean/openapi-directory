/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIExpressRouteCircuitPeeringPropertiesFormat.h
 *
 * Properties of the express route circuit peering.
 */

#ifndef OAIExpressRouteCircuitPeeringPropertiesFormat_H
#define OAIExpressRouteCircuitPeeringPropertiesFormat_H

#include <QJsonObject>

#include "OAIExpressRouteCircuitConnection.h"
#include "OAIExpressRouteCircuitConnectionPropertiesFormat_expressRouteCircuitPeering.h"
#include "OAIExpressRouteCircuitPeeringConfig.h"
#include "OAIExpressRouteCircuitPeeringPropertiesFormat_expressRouteConnection.h"
#include "OAIExpressRouteCircuitStats.h"
#include "OAIExpressRoutePeeringState.h"
#include "OAIExpressRoutePeeringType.h"
#include "OAIIpv6ExpressRouteCircuitPeeringConfig.h"
#include "OAIPeerExpressRouteCircuitConnection.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIExpressRouteCircuitConnection;
class OAIExpressRouteCircuitPeeringPropertiesFormat_expressRouteConnection;
class OAIIpv6ExpressRouteCircuitPeeringConfig;
class OAIExpressRouteCircuitPeeringConfig;
class OAIPeerExpressRouteCircuitConnection;
class OAIExpressRouteCircuitConnectionPropertiesFormat_expressRouteCircuitPeering;
class OAIExpressRouteCircuitStats;

class OAIExpressRouteCircuitPeeringPropertiesFormat : public OAIObject {
public:
    OAIExpressRouteCircuitPeeringPropertiesFormat();
    OAIExpressRouteCircuitPeeringPropertiesFormat(QString json);
    ~OAIExpressRouteCircuitPeeringPropertiesFormat() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAzureAsn() const;
    void setAzureAsn(const qint32 &azure_asn);
    bool is_azure_asn_Set() const;
    bool is_azure_asn_Valid() const;

    QList<OAIExpressRouteCircuitConnection> getConnections() const;
    void setConnections(const QList<OAIExpressRouteCircuitConnection> &connections);
    bool is_connections_Set() const;
    bool is_connections_Valid() const;

    OAIExpressRouteCircuitPeeringPropertiesFormat_expressRouteConnection getExpressRouteConnection() const;
    void setExpressRouteConnection(const OAIExpressRouteCircuitPeeringPropertiesFormat_expressRouteConnection &express_route_connection);
    bool is_express_route_connection_Set() const;
    bool is_express_route_connection_Valid() const;

    QString getGatewayManagerEtag() const;
    void setGatewayManagerEtag(const QString &gateway_manager_etag);
    bool is_gateway_manager_etag_Set() const;
    bool is_gateway_manager_etag_Valid() const;

    OAIIpv6ExpressRouteCircuitPeeringConfig getIpv6PeeringConfig() const;
    void setIpv6PeeringConfig(const OAIIpv6ExpressRouteCircuitPeeringConfig &ipv6_peering_config);
    bool is_ipv6_peering_config_Set() const;
    bool is_ipv6_peering_config_Valid() const;

    QString getLastModifiedBy() const;
    void setLastModifiedBy(const QString &last_modified_by);
    bool is_last_modified_by_Set() const;
    bool is_last_modified_by_Valid() const;

    OAIExpressRouteCircuitPeeringConfig getMicrosoftPeeringConfig() const;
    void setMicrosoftPeeringConfig(const OAIExpressRouteCircuitPeeringConfig &microsoft_peering_config);
    bool is_microsoft_peering_config_Set() const;
    bool is_microsoft_peering_config_Valid() const;

    qint64 getPeerAsn() const;
    void setPeerAsn(const qint64 &peer_asn);
    bool is_peer_asn_Set() const;
    bool is_peer_asn_Valid() const;

    QList<OAIPeerExpressRouteCircuitConnection> getPeeredConnections() const;
    void setPeeredConnections(const QList<OAIPeerExpressRouteCircuitConnection> &peered_connections);
    bool is_peered_connections_Set() const;
    bool is_peered_connections_Valid() const;

    OAIExpressRoutePeeringType getPeeringType() const;
    void setPeeringType(const OAIExpressRoutePeeringType &peering_type);
    bool is_peering_type_Set() const;
    bool is_peering_type_Valid() const;

    QString getPrimaryAzurePort() const;
    void setPrimaryAzurePort(const QString &primary_azure_port);
    bool is_primary_azure_port_Set() const;
    bool is_primary_azure_port_Valid() const;

    QString getPrimaryPeerAddressPrefix() const;
    void setPrimaryPeerAddressPrefix(const QString &primary_peer_address_prefix);
    bool is_primary_peer_address_prefix_Set() const;
    bool is_primary_peer_address_prefix_Valid() const;

    QString getProvisioningState() const;
    void setProvisioningState(const QString &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    OAIExpressRouteCircuitConnectionPropertiesFormat_expressRouteCircuitPeering getRouteFilter() const;
    void setRouteFilter(const OAIExpressRouteCircuitConnectionPropertiesFormat_expressRouteCircuitPeering &route_filter);
    bool is_route_filter_Set() const;
    bool is_route_filter_Valid() const;

    QString getSecondaryAzurePort() const;
    void setSecondaryAzurePort(const QString &secondary_azure_port);
    bool is_secondary_azure_port_Set() const;
    bool is_secondary_azure_port_Valid() const;

    QString getSecondaryPeerAddressPrefix() const;
    void setSecondaryPeerAddressPrefix(const QString &secondary_peer_address_prefix);
    bool is_secondary_peer_address_prefix_Set() const;
    bool is_secondary_peer_address_prefix_Valid() const;

    QString getSharedKey() const;
    void setSharedKey(const QString &shared_key);
    bool is_shared_key_Set() const;
    bool is_shared_key_Valid() const;

    OAIExpressRoutePeeringState getState() const;
    void setState(const OAIExpressRoutePeeringState &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    OAIExpressRouteCircuitStats getStats() const;
    void setStats(const OAIExpressRouteCircuitStats &stats);
    bool is_stats_Set() const;
    bool is_stats_Valid() const;

    qint32 getVlanId() const;
    void setVlanId(const qint32 &vlan_id);
    bool is_vlan_id_Set() const;
    bool is_vlan_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_azure_asn;
    bool m_azure_asn_isSet;
    bool m_azure_asn_isValid;

    QList<OAIExpressRouteCircuitConnection> m_connections;
    bool m_connections_isSet;
    bool m_connections_isValid;

    OAIExpressRouteCircuitPeeringPropertiesFormat_expressRouteConnection m_express_route_connection;
    bool m_express_route_connection_isSet;
    bool m_express_route_connection_isValid;

    QString m_gateway_manager_etag;
    bool m_gateway_manager_etag_isSet;
    bool m_gateway_manager_etag_isValid;

    OAIIpv6ExpressRouteCircuitPeeringConfig m_ipv6_peering_config;
    bool m_ipv6_peering_config_isSet;
    bool m_ipv6_peering_config_isValid;

    QString m_last_modified_by;
    bool m_last_modified_by_isSet;
    bool m_last_modified_by_isValid;

    OAIExpressRouteCircuitPeeringConfig m_microsoft_peering_config;
    bool m_microsoft_peering_config_isSet;
    bool m_microsoft_peering_config_isValid;

    qint64 m_peer_asn;
    bool m_peer_asn_isSet;
    bool m_peer_asn_isValid;

    QList<OAIPeerExpressRouteCircuitConnection> m_peered_connections;
    bool m_peered_connections_isSet;
    bool m_peered_connections_isValid;

    OAIExpressRoutePeeringType m_peering_type;
    bool m_peering_type_isSet;
    bool m_peering_type_isValid;

    QString m_primary_azure_port;
    bool m_primary_azure_port_isSet;
    bool m_primary_azure_port_isValid;

    QString m_primary_peer_address_prefix;
    bool m_primary_peer_address_prefix_isSet;
    bool m_primary_peer_address_prefix_isValid;

    QString m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;

    OAIExpressRouteCircuitConnectionPropertiesFormat_expressRouteCircuitPeering m_route_filter;
    bool m_route_filter_isSet;
    bool m_route_filter_isValid;

    QString m_secondary_azure_port;
    bool m_secondary_azure_port_isSet;
    bool m_secondary_azure_port_isValid;

    QString m_secondary_peer_address_prefix;
    bool m_secondary_peer_address_prefix_isSet;
    bool m_secondary_peer_address_prefix_isValid;

    QString m_shared_key;
    bool m_shared_key_isSet;
    bool m_shared_key_isValid;

    OAIExpressRoutePeeringState m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    OAIExpressRouteCircuitStats m_stats;
    bool m_stats_isSet;
    bool m_stats_isValid;

    qint32 m_vlan_id;
    bool m_vlan_id_isSet;
    bool m_vlan_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIExpressRouteCircuitPeeringPropertiesFormat)

#endif // OAIExpressRouteCircuitPeeringPropertiesFormat_H
