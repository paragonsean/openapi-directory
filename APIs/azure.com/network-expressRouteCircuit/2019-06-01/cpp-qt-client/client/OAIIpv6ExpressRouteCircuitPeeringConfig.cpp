/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIpv6ExpressRouteCircuitPeeringConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIpv6ExpressRouteCircuitPeeringConfig::OAIIpv6ExpressRouteCircuitPeeringConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIpv6ExpressRouteCircuitPeeringConfig::OAIIpv6ExpressRouteCircuitPeeringConfig() {
    this->initializeModel();
}

OAIIpv6ExpressRouteCircuitPeeringConfig::~OAIIpv6ExpressRouteCircuitPeeringConfig() {}

void OAIIpv6ExpressRouteCircuitPeeringConfig::initializeModel() {

    m_microsoft_peering_config_isSet = false;
    m_microsoft_peering_config_isValid = false;

    m_primary_peer_address_prefix_isSet = false;
    m_primary_peer_address_prefix_isValid = false;

    m_route_filter_isSet = false;
    m_route_filter_isValid = false;

    m_secondary_peer_address_prefix_isSet = false;
    m_secondary_peer_address_prefix_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIIpv6ExpressRouteCircuitPeeringConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIpv6ExpressRouteCircuitPeeringConfig::fromJsonObject(QJsonObject json) {

    m_microsoft_peering_config_isValid = ::OpenAPI::fromJsonValue(m_microsoft_peering_config, json[QString("microsoftPeeringConfig")]);
    m_microsoft_peering_config_isSet = !json[QString("microsoftPeeringConfig")].isNull() && m_microsoft_peering_config_isValid;

    m_primary_peer_address_prefix_isValid = ::OpenAPI::fromJsonValue(m_primary_peer_address_prefix, json[QString("primaryPeerAddressPrefix")]);
    m_primary_peer_address_prefix_isSet = !json[QString("primaryPeerAddressPrefix")].isNull() && m_primary_peer_address_prefix_isValid;

    m_route_filter_isValid = ::OpenAPI::fromJsonValue(m_route_filter, json[QString("routeFilter")]);
    m_route_filter_isSet = !json[QString("routeFilter")].isNull() && m_route_filter_isValid;

    m_secondary_peer_address_prefix_isValid = ::OpenAPI::fromJsonValue(m_secondary_peer_address_prefix, json[QString("secondaryPeerAddressPrefix")]);
    m_secondary_peer_address_prefix_isSet = !json[QString("secondaryPeerAddressPrefix")].isNull() && m_secondary_peer_address_prefix_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIIpv6ExpressRouteCircuitPeeringConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIpv6ExpressRouteCircuitPeeringConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_microsoft_peering_config.isSet()) {
        obj.insert(QString("microsoftPeeringConfig"), ::OpenAPI::toJsonValue(m_microsoft_peering_config));
    }
    if (m_primary_peer_address_prefix_isSet) {
        obj.insert(QString("primaryPeerAddressPrefix"), ::OpenAPI::toJsonValue(m_primary_peer_address_prefix));
    }
    if (m_route_filter.isSet()) {
        obj.insert(QString("routeFilter"), ::OpenAPI::toJsonValue(m_route_filter));
    }
    if (m_secondary_peer_address_prefix_isSet) {
        obj.insert(QString("secondaryPeerAddressPrefix"), ::OpenAPI::toJsonValue(m_secondary_peer_address_prefix));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

OAIExpressRouteCircuitPeeringConfig OAIIpv6ExpressRouteCircuitPeeringConfig::getMicrosoftPeeringConfig() const {
    return m_microsoft_peering_config;
}
void OAIIpv6ExpressRouteCircuitPeeringConfig::setMicrosoftPeeringConfig(const OAIExpressRouteCircuitPeeringConfig &microsoft_peering_config) {
    m_microsoft_peering_config = microsoft_peering_config;
    m_microsoft_peering_config_isSet = true;
}

bool OAIIpv6ExpressRouteCircuitPeeringConfig::is_microsoft_peering_config_Set() const{
    return m_microsoft_peering_config_isSet;
}

bool OAIIpv6ExpressRouteCircuitPeeringConfig::is_microsoft_peering_config_Valid() const{
    return m_microsoft_peering_config_isValid;
}

QString OAIIpv6ExpressRouteCircuitPeeringConfig::getPrimaryPeerAddressPrefix() const {
    return m_primary_peer_address_prefix;
}
void OAIIpv6ExpressRouteCircuitPeeringConfig::setPrimaryPeerAddressPrefix(const QString &primary_peer_address_prefix) {
    m_primary_peer_address_prefix = primary_peer_address_prefix;
    m_primary_peer_address_prefix_isSet = true;
}

bool OAIIpv6ExpressRouteCircuitPeeringConfig::is_primary_peer_address_prefix_Set() const{
    return m_primary_peer_address_prefix_isSet;
}

bool OAIIpv6ExpressRouteCircuitPeeringConfig::is_primary_peer_address_prefix_Valid() const{
    return m_primary_peer_address_prefix_isValid;
}

OAIExpressRouteCircuitConnectionPropertiesFormat_expressRouteCircuitPeering OAIIpv6ExpressRouteCircuitPeeringConfig::getRouteFilter() const {
    return m_route_filter;
}
void OAIIpv6ExpressRouteCircuitPeeringConfig::setRouteFilter(const OAIExpressRouteCircuitConnectionPropertiesFormat_expressRouteCircuitPeering &route_filter) {
    m_route_filter = route_filter;
    m_route_filter_isSet = true;
}

bool OAIIpv6ExpressRouteCircuitPeeringConfig::is_route_filter_Set() const{
    return m_route_filter_isSet;
}

bool OAIIpv6ExpressRouteCircuitPeeringConfig::is_route_filter_Valid() const{
    return m_route_filter_isValid;
}

QString OAIIpv6ExpressRouteCircuitPeeringConfig::getSecondaryPeerAddressPrefix() const {
    return m_secondary_peer_address_prefix;
}
void OAIIpv6ExpressRouteCircuitPeeringConfig::setSecondaryPeerAddressPrefix(const QString &secondary_peer_address_prefix) {
    m_secondary_peer_address_prefix = secondary_peer_address_prefix;
    m_secondary_peer_address_prefix_isSet = true;
}

bool OAIIpv6ExpressRouteCircuitPeeringConfig::is_secondary_peer_address_prefix_Set() const{
    return m_secondary_peer_address_prefix_isSet;
}

bool OAIIpv6ExpressRouteCircuitPeeringConfig::is_secondary_peer_address_prefix_Valid() const{
    return m_secondary_peer_address_prefix_isValid;
}

QString OAIIpv6ExpressRouteCircuitPeeringConfig::getState() const {
    return m_state;
}
void OAIIpv6ExpressRouteCircuitPeeringConfig::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIIpv6ExpressRouteCircuitPeeringConfig::is_state_Set() const{
    return m_state_isSet;
}

bool OAIIpv6ExpressRouteCircuitPeeringConfig::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIIpv6ExpressRouteCircuitPeeringConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_microsoft_peering_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_peer_address_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_peer_address_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIpv6ExpressRouteCircuitPeeringConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
