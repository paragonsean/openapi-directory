/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ExpressRouteCircuitAuthorization;
import org.openapitools.client.model.ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering;
import org.openapitools.client.model.ExpressRouteCircuitPeering;
import org.openapitools.client.model.ExpressRouteCircuitServiceProviderProperties;
import org.openapitools.client.model.ServiceProviderProvisioningState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of ExpressRouteCircuit.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:28:56.841859-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExpressRouteCircuitPropertiesFormat {
  public static final String SERIALIZED_NAME_ALLOW_CLASSIC_OPERATIONS = "allowClassicOperations";
  @SerializedName(SERIALIZED_NAME_ALLOW_CLASSIC_OPERATIONS)
  private Boolean allowClassicOperations;

  public static final String SERIALIZED_NAME_AUTHORIZATIONS = "authorizations";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATIONS)
  private List<ExpressRouteCircuitAuthorization> authorizations = new ArrayList<>();

  public static final String SERIALIZED_NAME_BANDWIDTH_IN_GBPS = "bandwidthInGbps";
  @SerializedName(SERIALIZED_NAME_BANDWIDTH_IN_GBPS)
  private BigDecimal bandwidthInGbps;

  public static final String SERIALIZED_NAME_CIRCUIT_PROVISIONING_STATE = "circuitProvisioningState";
  @SerializedName(SERIALIZED_NAME_CIRCUIT_PROVISIONING_STATE)
  private String circuitProvisioningState;

  public static final String SERIALIZED_NAME_EXPRESS_ROUTE_PORT = "expressRoutePort";
  @SerializedName(SERIALIZED_NAME_EXPRESS_ROUTE_PORT)
  private ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering expressRoutePort;

  public static final String SERIALIZED_NAME_GATEWAY_MANAGER_ETAG = "gatewayManagerEtag";
  @SerializedName(SERIALIZED_NAME_GATEWAY_MANAGER_ETAG)
  private String gatewayManagerEtag;

  public static final String SERIALIZED_NAME_GLOBAL_REACH_ENABLED = "globalReachEnabled";
  @SerializedName(SERIALIZED_NAME_GLOBAL_REACH_ENABLED)
  private Boolean globalReachEnabled;

  public static final String SERIALIZED_NAME_PEERINGS = "peerings";
  @SerializedName(SERIALIZED_NAME_PEERINGS)
  private List<ExpressRouteCircuitPeering> peerings = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_SERVICE_KEY = "serviceKey";
  @SerializedName(SERIALIZED_NAME_SERVICE_KEY)
  private String serviceKey;

  public static final String SERIALIZED_NAME_SERVICE_PROVIDER_NOTES = "serviceProviderNotes";
  @SerializedName(SERIALIZED_NAME_SERVICE_PROVIDER_NOTES)
  private String serviceProviderNotes;

  public static final String SERIALIZED_NAME_SERVICE_PROVIDER_PROPERTIES = "serviceProviderProperties";
  @SerializedName(SERIALIZED_NAME_SERVICE_PROVIDER_PROPERTIES)
  private ExpressRouteCircuitServiceProviderProperties serviceProviderProperties;

  public static final String SERIALIZED_NAME_SERVICE_PROVIDER_PROVISIONING_STATE = "serviceProviderProvisioningState";
  @SerializedName(SERIALIZED_NAME_SERVICE_PROVIDER_PROVISIONING_STATE)
  private ServiceProviderProvisioningState serviceProviderProvisioningState;

  public static final String SERIALIZED_NAME_STAG = "stag";
  @SerializedName(SERIALIZED_NAME_STAG)
  private Integer stag;

  public ExpressRouteCircuitPropertiesFormat() {
  }

  public ExpressRouteCircuitPropertiesFormat(
     Integer stag
  ) {
    this();
    this.stag = stag;
  }

  public ExpressRouteCircuitPropertiesFormat allowClassicOperations(Boolean allowClassicOperations) {
    this.allowClassicOperations = allowClassicOperations;
    return this;
  }

  /**
   * Allow classic operations.
   * @return allowClassicOperations
   */
  @javax.annotation.Nullable
  public Boolean getAllowClassicOperations() {
    return allowClassicOperations;
  }

  public void setAllowClassicOperations(Boolean allowClassicOperations) {
    this.allowClassicOperations = allowClassicOperations;
  }


  public ExpressRouteCircuitPropertiesFormat authorizations(List<ExpressRouteCircuitAuthorization> authorizations) {
    this.authorizations = authorizations;
    return this;
  }

  public ExpressRouteCircuitPropertiesFormat addAuthorizationsItem(ExpressRouteCircuitAuthorization authorizationsItem) {
    if (this.authorizations == null) {
      this.authorizations = new ArrayList<>();
    }
    this.authorizations.add(authorizationsItem);
    return this;
  }

  /**
   * The list of authorizations.
   * @return authorizations
   */
  @javax.annotation.Nullable
  public List<ExpressRouteCircuitAuthorization> getAuthorizations() {
    return authorizations;
  }

  public void setAuthorizations(List<ExpressRouteCircuitAuthorization> authorizations) {
    this.authorizations = authorizations;
  }


  public ExpressRouteCircuitPropertiesFormat bandwidthInGbps(BigDecimal bandwidthInGbps) {
    this.bandwidthInGbps = bandwidthInGbps;
    return this;
  }

  /**
   * The bandwidth of the circuit when the circuit is provisioned on an ExpressRoutePort resource.
   * @return bandwidthInGbps
   */
  @javax.annotation.Nullable
  public BigDecimal getBandwidthInGbps() {
    return bandwidthInGbps;
  }

  public void setBandwidthInGbps(BigDecimal bandwidthInGbps) {
    this.bandwidthInGbps = bandwidthInGbps;
  }


  public ExpressRouteCircuitPropertiesFormat circuitProvisioningState(String circuitProvisioningState) {
    this.circuitProvisioningState = circuitProvisioningState;
    return this;
  }

  /**
   * The CircuitProvisioningState state of the resource.
   * @return circuitProvisioningState
   */
  @javax.annotation.Nullable
  public String getCircuitProvisioningState() {
    return circuitProvisioningState;
  }

  public void setCircuitProvisioningState(String circuitProvisioningState) {
    this.circuitProvisioningState = circuitProvisioningState;
  }


  public ExpressRouteCircuitPropertiesFormat expressRoutePort(ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering expressRoutePort) {
    this.expressRoutePort = expressRoutePort;
    return this;
  }

  /**
   * Get expressRoutePort
   * @return expressRoutePort
   */
  @javax.annotation.Nullable
  public ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering getExpressRoutePort() {
    return expressRoutePort;
  }

  public void setExpressRoutePort(ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering expressRoutePort) {
    this.expressRoutePort = expressRoutePort;
  }


  public ExpressRouteCircuitPropertiesFormat gatewayManagerEtag(String gatewayManagerEtag) {
    this.gatewayManagerEtag = gatewayManagerEtag;
    return this;
  }

  /**
   * The GatewayManager Etag.
   * @return gatewayManagerEtag
   */
  @javax.annotation.Nullable
  public String getGatewayManagerEtag() {
    return gatewayManagerEtag;
  }

  public void setGatewayManagerEtag(String gatewayManagerEtag) {
    this.gatewayManagerEtag = gatewayManagerEtag;
  }


  public ExpressRouteCircuitPropertiesFormat globalReachEnabled(Boolean globalReachEnabled) {
    this.globalReachEnabled = globalReachEnabled;
    return this;
  }

  /**
   * Flag denoting Global reach status.
   * @return globalReachEnabled
   */
  @javax.annotation.Nullable
  public Boolean getGlobalReachEnabled() {
    return globalReachEnabled;
  }

  public void setGlobalReachEnabled(Boolean globalReachEnabled) {
    this.globalReachEnabled = globalReachEnabled;
  }


  public ExpressRouteCircuitPropertiesFormat peerings(List<ExpressRouteCircuitPeering> peerings) {
    this.peerings = peerings;
    return this;
  }

  public ExpressRouteCircuitPropertiesFormat addPeeringsItem(ExpressRouteCircuitPeering peeringsItem) {
    if (this.peerings == null) {
      this.peerings = new ArrayList<>();
    }
    this.peerings.add(peeringsItem);
    return this;
  }

  /**
   * The list of peerings.
   * @return peerings
   */
  @javax.annotation.Nullable
  public List<ExpressRouteCircuitPeering> getPeerings() {
    return peerings;
  }

  public void setPeerings(List<ExpressRouteCircuitPeering> peerings) {
    this.peerings = peerings;
  }


  public ExpressRouteCircuitPropertiesFormat provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Gets the provisioning state of the public IP resource. Possible values are: &#39;Updating&#39;, &#39;Deleting&#39;, and &#39;Failed&#39;.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  public ExpressRouteCircuitPropertiesFormat serviceKey(String serviceKey) {
    this.serviceKey = serviceKey;
    return this;
  }

  /**
   * The ServiceKey.
   * @return serviceKey
   */
  @javax.annotation.Nullable
  public String getServiceKey() {
    return serviceKey;
  }

  public void setServiceKey(String serviceKey) {
    this.serviceKey = serviceKey;
  }


  public ExpressRouteCircuitPropertiesFormat serviceProviderNotes(String serviceProviderNotes) {
    this.serviceProviderNotes = serviceProviderNotes;
    return this;
  }

  /**
   * The ServiceProviderNotes.
   * @return serviceProviderNotes
   */
  @javax.annotation.Nullable
  public String getServiceProviderNotes() {
    return serviceProviderNotes;
  }

  public void setServiceProviderNotes(String serviceProviderNotes) {
    this.serviceProviderNotes = serviceProviderNotes;
  }


  public ExpressRouteCircuitPropertiesFormat serviceProviderProperties(ExpressRouteCircuitServiceProviderProperties serviceProviderProperties) {
    this.serviceProviderProperties = serviceProviderProperties;
    return this;
  }

  /**
   * Get serviceProviderProperties
   * @return serviceProviderProperties
   */
  @javax.annotation.Nullable
  public ExpressRouteCircuitServiceProviderProperties getServiceProviderProperties() {
    return serviceProviderProperties;
  }

  public void setServiceProviderProperties(ExpressRouteCircuitServiceProviderProperties serviceProviderProperties) {
    this.serviceProviderProperties = serviceProviderProperties;
  }


  public ExpressRouteCircuitPropertiesFormat serviceProviderProvisioningState(ServiceProviderProvisioningState serviceProviderProvisioningState) {
    this.serviceProviderProvisioningState = serviceProviderProvisioningState;
    return this;
  }

  /**
   * Get serviceProviderProvisioningState
   * @return serviceProviderProvisioningState
   */
  @javax.annotation.Nullable
  public ServiceProviderProvisioningState getServiceProviderProvisioningState() {
    return serviceProviderProvisioningState;
  }

  public void setServiceProviderProvisioningState(ServiceProviderProvisioningState serviceProviderProvisioningState) {
    this.serviceProviderProvisioningState = serviceProviderProvisioningState;
  }


  /**
   * The identifier of the circuit traffic. Outer tag for QinQ encapsulation.
   * @return stag
   */
  @javax.annotation.Nullable
  public Integer getStag() {
    return stag;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExpressRouteCircuitPropertiesFormat expressRouteCircuitPropertiesFormat = (ExpressRouteCircuitPropertiesFormat) o;
    return Objects.equals(this.allowClassicOperations, expressRouteCircuitPropertiesFormat.allowClassicOperations) &&
        Objects.equals(this.authorizations, expressRouteCircuitPropertiesFormat.authorizations) &&
        Objects.equals(this.bandwidthInGbps, expressRouteCircuitPropertiesFormat.bandwidthInGbps) &&
        Objects.equals(this.circuitProvisioningState, expressRouteCircuitPropertiesFormat.circuitProvisioningState) &&
        Objects.equals(this.expressRoutePort, expressRouteCircuitPropertiesFormat.expressRoutePort) &&
        Objects.equals(this.gatewayManagerEtag, expressRouteCircuitPropertiesFormat.gatewayManagerEtag) &&
        Objects.equals(this.globalReachEnabled, expressRouteCircuitPropertiesFormat.globalReachEnabled) &&
        Objects.equals(this.peerings, expressRouteCircuitPropertiesFormat.peerings) &&
        Objects.equals(this.provisioningState, expressRouteCircuitPropertiesFormat.provisioningState) &&
        Objects.equals(this.serviceKey, expressRouteCircuitPropertiesFormat.serviceKey) &&
        Objects.equals(this.serviceProviderNotes, expressRouteCircuitPropertiesFormat.serviceProviderNotes) &&
        Objects.equals(this.serviceProviderProperties, expressRouteCircuitPropertiesFormat.serviceProviderProperties) &&
        Objects.equals(this.serviceProviderProvisioningState, expressRouteCircuitPropertiesFormat.serviceProviderProvisioningState) &&
        Objects.equals(this.stag, expressRouteCircuitPropertiesFormat.stag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowClassicOperations, authorizations, bandwidthInGbps, circuitProvisioningState, expressRoutePort, gatewayManagerEtag, globalReachEnabled, peerings, provisioningState, serviceKey, serviceProviderNotes, serviceProviderProperties, serviceProviderProvisioningState, stag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExpressRouteCircuitPropertiesFormat {\n");
    sb.append("    allowClassicOperations: ").append(toIndentedString(allowClassicOperations)).append("\n");
    sb.append("    authorizations: ").append(toIndentedString(authorizations)).append("\n");
    sb.append("    bandwidthInGbps: ").append(toIndentedString(bandwidthInGbps)).append("\n");
    sb.append("    circuitProvisioningState: ").append(toIndentedString(circuitProvisioningState)).append("\n");
    sb.append("    expressRoutePort: ").append(toIndentedString(expressRoutePort)).append("\n");
    sb.append("    gatewayManagerEtag: ").append(toIndentedString(gatewayManagerEtag)).append("\n");
    sb.append("    globalReachEnabled: ").append(toIndentedString(globalReachEnabled)).append("\n");
    sb.append("    peerings: ").append(toIndentedString(peerings)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    serviceKey: ").append(toIndentedString(serviceKey)).append("\n");
    sb.append("    serviceProviderNotes: ").append(toIndentedString(serviceProviderNotes)).append("\n");
    sb.append("    serviceProviderProperties: ").append(toIndentedString(serviceProviderProperties)).append("\n");
    sb.append("    serviceProviderProvisioningState: ").append(toIndentedString(serviceProviderProvisioningState)).append("\n");
    sb.append("    stag: ").append(toIndentedString(stag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowClassicOperations");
    openapiFields.add("authorizations");
    openapiFields.add("bandwidthInGbps");
    openapiFields.add("circuitProvisioningState");
    openapiFields.add("expressRoutePort");
    openapiFields.add("gatewayManagerEtag");
    openapiFields.add("globalReachEnabled");
    openapiFields.add("peerings");
    openapiFields.add("provisioningState");
    openapiFields.add("serviceKey");
    openapiFields.add("serviceProviderNotes");
    openapiFields.add("serviceProviderProperties");
    openapiFields.add("serviceProviderProvisioningState");
    openapiFields.add("stag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExpressRouteCircuitPropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExpressRouteCircuitPropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExpressRouteCircuitPropertiesFormat is not found in the empty JSON string", ExpressRouteCircuitPropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExpressRouteCircuitPropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExpressRouteCircuitPropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("authorizations") != null && !jsonObj.get("authorizations").isJsonNull()) {
        JsonArray jsonArrayauthorizations = jsonObj.getAsJsonArray("authorizations");
        if (jsonArrayauthorizations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("authorizations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `authorizations` to be an array in the JSON string but got `%s`", jsonObj.get("authorizations").toString()));
          }

          // validate the optional field `authorizations` (array)
          for (int i = 0; i < jsonArrayauthorizations.size(); i++) {
            ExpressRouteCircuitAuthorization.validateJsonElement(jsonArrayauthorizations.get(i));
          };
        }
      }
      if ((jsonObj.get("circuitProvisioningState") != null && !jsonObj.get("circuitProvisioningState").isJsonNull()) && !jsonObj.get("circuitProvisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `circuitProvisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("circuitProvisioningState").toString()));
      }
      // validate the optional field `expressRoutePort`
      if (jsonObj.get("expressRoutePort") != null && !jsonObj.get("expressRoutePort").isJsonNull()) {
        ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering.validateJsonElement(jsonObj.get("expressRoutePort"));
      }
      if ((jsonObj.get("gatewayManagerEtag") != null && !jsonObj.get("gatewayManagerEtag").isJsonNull()) && !jsonObj.get("gatewayManagerEtag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gatewayManagerEtag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gatewayManagerEtag").toString()));
      }
      if (jsonObj.get("peerings") != null && !jsonObj.get("peerings").isJsonNull()) {
        JsonArray jsonArraypeerings = jsonObj.getAsJsonArray("peerings");
        if (jsonArraypeerings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("peerings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `peerings` to be an array in the JSON string but got `%s`", jsonObj.get("peerings").toString()));
          }

          // validate the optional field `peerings` (array)
          for (int i = 0; i < jsonArraypeerings.size(); i++) {
            ExpressRouteCircuitPeering.validateJsonElement(jsonArraypeerings.get(i));
          };
        }
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if ((jsonObj.get("serviceKey") != null && !jsonObj.get("serviceKey").isJsonNull()) && !jsonObj.get("serviceKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceKey").toString()));
      }
      if ((jsonObj.get("serviceProviderNotes") != null && !jsonObj.get("serviceProviderNotes").isJsonNull()) && !jsonObj.get("serviceProviderNotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceProviderNotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceProviderNotes").toString()));
      }
      // validate the optional field `serviceProviderProperties`
      if (jsonObj.get("serviceProviderProperties") != null && !jsonObj.get("serviceProviderProperties").isJsonNull()) {
        ExpressRouteCircuitServiceProviderProperties.validateJsonElement(jsonObj.get("serviceProviderProperties"));
      }
      // validate the optional field `serviceProviderProvisioningState`
      if (jsonObj.get("serviceProviderProvisioningState") != null && !jsonObj.get("serviceProviderProvisioningState").isJsonNull()) {
        ServiceProviderProvisioningState.validateJsonElement(jsonObj.get("serviceProviderProvisioningState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExpressRouteCircuitPropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExpressRouteCircuitPropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExpressRouteCircuitPropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExpressRouteCircuitPropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<ExpressRouteCircuitPropertiesFormat>() {
           @Override
           public void write(JsonWriter out, ExpressRouteCircuitPropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExpressRouteCircuitPropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExpressRouteCircuitPropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExpressRouteCircuitPropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to ExpressRouteCircuitPropertiesFormat
   */
  public static ExpressRouteCircuitPropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExpressRouteCircuitPropertiesFormat.class);
  }

  /**
   * Convert an instance of ExpressRouteCircuitPropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

