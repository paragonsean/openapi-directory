# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExpressRouteCircuitRoutesTableSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _as: int=None, neighbor: str=None, state_pfx_rcd: str=None, up_down: str=None, v: int=None):
        """ExpressRouteCircuitRoutesTableSummary - a model defined in OpenAPI

        :param _as: The _as of this ExpressRouteCircuitRoutesTableSummary.
        :param neighbor: The neighbor of this ExpressRouteCircuitRoutesTableSummary.
        :param state_pfx_rcd: The state_pfx_rcd of this ExpressRouteCircuitRoutesTableSummary.
        :param up_down: The up_down of this ExpressRouteCircuitRoutesTableSummary.
        :param v: The v of this ExpressRouteCircuitRoutesTableSummary.
        """
        self.openapi_types = {
            '_as': int,
            'neighbor': str,
            'state_pfx_rcd': str,
            'up_down': str,
            'v': int
        }

        self.attribute_map = {
            '_as': 'as',
            'neighbor': 'neighbor',
            'state_pfx_rcd': 'statePfxRcd',
            'up_down': 'upDown',
            'v': 'v'
        }

        self.__as = _as
        self._neighbor = neighbor
        self._state_pfx_rcd = state_pfx_rcd
        self._up_down = up_down
        self._v = v

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExpressRouteCircuitRoutesTableSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExpressRouteCircuitRoutesTableSummary of this ExpressRouteCircuitRoutesTableSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _as(self):
        """Gets the _as of this ExpressRouteCircuitRoutesTableSummary.

        Autonomous system number.

        :return: The _as of this ExpressRouteCircuitRoutesTableSummary.
        :rtype: int
        """
        return self.__as

    @_as.setter
    def _as(self, _as):
        """Sets the _as of this ExpressRouteCircuitRoutesTableSummary.

        Autonomous system number.

        :param _as: The _as of this ExpressRouteCircuitRoutesTableSummary.
        :type _as: int
        """

        self.__as = _as

    @property
    def neighbor(self):
        """Gets the neighbor of this ExpressRouteCircuitRoutesTableSummary.

        IP address of the neighbor.

        :return: The neighbor of this ExpressRouteCircuitRoutesTableSummary.
        :rtype: str
        """
        return self._neighbor

    @neighbor.setter
    def neighbor(self, neighbor):
        """Sets the neighbor of this ExpressRouteCircuitRoutesTableSummary.

        IP address of the neighbor.

        :param neighbor: The neighbor of this ExpressRouteCircuitRoutesTableSummary.
        :type neighbor: str
        """

        self._neighbor = neighbor

    @property
    def state_pfx_rcd(self):
        """Gets the state_pfx_rcd of this ExpressRouteCircuitRoutesTableSummary.

        Current state of the BGP session, and the number of prefixes that have been received from a neighbor or peer group.

        :return: The state_pfx_rcd of this ExpressRouteCircuitRoutesTableSummary.
        :rtype: str
        """
        return self._state_pfx_rcd

    @state_pfx_rcd.setter
    def state_pfx_rcd(self, state_pfx_rcd):
        """Sets the state_pfx_rcd of this ExpressRouteCircuitRoutesTableSummary.

        Current state of the BGP session, and the number of prefixes that have been received from a neighbor or peer group.

        :param state_pfx_rcd: The state_pfx_rcd of this ExpressRouteCircuitRoutesTableSummary.
        :type state_pfx_rcd: str
        """

        self._state_pfx_rcd = state_pfx_rcd

    @property
    def up_down(self):
        """Gets the up_down of this ExpressRouteCircuitRoutesTableSummary.

        The length of time that the BGP session has been in the Established state, or the current status if not in the Established state.

        :return: The up_down of this ExpressRouteCircuitRoutesTableSummary.
        :rtype: str
        """
        return self._up_down

    @up_down.setter
    def up_down(self, up_down):
        """Sets the up_down of this ExpressRouteCircuitRoutesTableSummary.

        The length of time that the BGP session has been in the Established state, or the current status if not in the Established state.

        :param up_down: The up_down of this ExpressRouteCircuitRoutesTableSummary.
        :type up_down: str
        """

        self._up_down = up_down

    @property
    def v(self):
        """Gets the v of this ExpressRouteCircuitRoutesTableSummary.

        BGP version number spoken to the neighbor.

        :return: The v of this ExpressRouteCircuitRoutesTableSummary.
        :rtype: int
        """
        return self._v

    @v.setter
    def v(self, v):
        """Sets the v of this ExpressRouteCircuitRoutesTableSummary.

        BGP version number spoken to the neighbor.

        :param v: The v of this ExpressRouteCircuitRoutesTableSummary.
        :type v: int
        """

        self._v = v
