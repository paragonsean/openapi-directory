# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExpressRouteCircuitPeeringConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advertised_communities: List[str]=None, advertised_public_prefixes: List[str]=None, advertised_public_prefixes_state: str=None, customer_asn: int=None, legacy_mode: int=None, routing_registry_name: str=None):
        """ExpressRouteCircuitPeeringConfig - a model defined in OpenAPI

        :param advertised_communities: The advertised_communities of this ExpressRouteCircuitPeeringConfig.
        :param advertised_public_prefixes: The advertised_public_prefixes of this ExpressRouteCircuitPeeringConfig.
        :param advertised_public_prefixes_state: The advertised_public_prefixes_state of this ExpressRouteCircuitPeeringConfig.
        :param customer_asn: The customer_asn of this ExpressRouteCircuitPeeringConfig.
        :param legacy_mode: The legacy_mode of this ExpressRouteCircuitPeeringConfig.
        :param routing_registry_name: The routing_registry_name of this ExpressRouteCircuitPeeringConfig.
        """
        self.openapi_types = {
            'advertised_communities': List[str],
            'advertised_public_prefixes': List[str],
            'advertised_public_prefixes_state': str,
            'customer_asn': int,
            'legacy_mode': int,
            'routing_registry_name': str
        }

        self.attribute_map = {
            'advertised_communities': 'advertisedCommunities',
            'advertised_public_prefixes': 'advertisedPublicPrefixes',
            'advertised_public_prefixes_state': 'advertisedPublicPrefixesState',
            'customer_asn': 'customerASN',
            'legacy_mode': 'legacyMode',
            'routing_registry_name': 'routingRegistryName'
        }

        self._advertised_communities = advertised_communities
        self._advertised_public_prefixes = advertised_public_prefixes
        self._advertised_public_prefixes_state = advertised_public_prefixes_state
        self._customer_asn = customer_asn
        self._legacy_mode = legacy_mode
        self._routing_registry_name = routing_registry_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExpressRouteCircuitPeeringConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExpressRouteCircuitPeeringConfig of this ExpressRouteCircuitPeeringConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advertised_communities(self):
        """Gets the advertised_communities of this ExpressRouteCircuitPeeringConfig.

        The communities of bgp peering. Specified for microsoft peering.

        :return: The advertised_communities of this ExpressRouteCircuitPeeringConfig.
        :rtype: List[str]
        """
        return self._advertised_communities

    @advertised_communities.setter
    def advertised_communities(self, advertised_communities):
        """Sets the advertised_communities of this ExpressRouteCircuitPeeringConfig.

        The communities of bgp peering. Specified for microsoft peering.

        :param advertised_communities: The advertised_communities of this ExpressRouteCircuitPeeringConfig.
        :type advertised_communities: List[str]
        """

        self._advertised_communities = advertised_communities

    @property
    def advertised_public_prefixes(self):
        """Gets the advertised_public_prefixes of this ExpressRouteCircuitPeeringConfig.

        The reference of AdvertisedPublicPrefixes.

        :return: The advertised_public_prefixes of this ExpressRouteCircuitPeeringConfig.
        :rtype: List[str]
        """
        return self._advertised_public_prefixes

    @advertised_public_prefixes.setter
    def advertised_public_prefixes(self, advertised_public_prefixes):
        """Sets the advertised_public_prefixes of this ExpressRouteCircuitPeeringConfig.

        The reference of AdvertisedPublicPrefixes.

        :param advertised_public_prefixes: The advertised_public_prefixes of this ExpressRouteCircuitPeeringConfig.
        :type advertised_public_prefixes: List[str]
        """

        self._advertised_public_prefixes = advertised_public_prefixes

    @property
    def advertised_public_prefixes_state(self):
        """Gets the advertised_public_prefixes_state of this ExpressRouteCircuitPeeringConfig.

        The advertised public prefix state of the Peering resource.

        :return: The advertised_public_prefixes_state of this ExpressRouteCircuitPeeringConfig.
        :rtype: str
        """
        return self._advertised_public_prefixes_state

    @advertised_public_prefixes_state.setter
    def advertised_public_prefixes_state(self, advertised_public_prefixes_state):
        """Sets the advertised_public_prefixes_state of this ExpressRouteCircuitPeeringConfig.

        The advertised public prefix state of the Peering resource.

        :param advertised_public_prefixes_state: The advertised_public_prefixes_state of this ExpressRouteCircuitPeeringConfig.
        :type advertised_public_prefixes_state: str
        """
        allowed_values = ["NotConfigured", "Configuring", "Configured", "ValidationNeeded"]  # noqa: E501
        if advertised_public_prefixes_state not in allowed_values:
            raise ValueError(
                "Invalid value for `advertised_public_prefixes_state` ({0}), must be one of {1}"
                .format(advertised_public_prefixes_state, allowed_values)
            )

        self._advertised_public_prefixes_state = advertised_public_prefixes_state

    @property
    def customer_asn(self):
        """Gets the customer_asn of this ExpressRouteCircuitPeeringConfig.

        The CustomerASN of the peering.

        :return: The customer_asn of this ExpressRouteCircuitPeeringConfig.
        :rtype: int
        """
        return self._customer_asn

    @customer_asn.setter
    def customer_asn(self, customer_asn):
        """Sets the customer_asn of this ExpressRouteCircuitPeeringConfig.

        The CustomerASN of the peering.

        :param customer_asn: The customer_asn of this ExpressRouteCircuitPeeringConfig.
        :type customer_asn: int
        """

        self._customer_asn = customer_asn

    @property
    def legacy_mode(self):
        """Gets the legacy_mode of this ExpressRouteCircuitPeeringConfig.

        The legacy mode of the peering.

        :return: The legacy_mode of this ExpressRouteCircuitPeeringConfig.
        :rtype: int
        """
        return self._legacy_mode

    @legacy_mode.setter
    def legacy_mode(self, legacy_mode):
        """Sets the legacy_mode of this ExpressRouteCircuitPeeringConfig.

        The legacy mode of the peering.

        :param legacy_mode: The legacy_mode of this ExpressRouteCircuitPeeringConfig.
        :type legacy_mode: int
        """

        self._legacy_mode = legacy_mode

    @property
    def routing_registry_name(self):
        """Gets the routing_registry_name of this ExpressRouteCircuitPeeringConfig.

        The RoutingRegistryName of the configuration.

        :return: The routing_registry_name of this ExpressRouteCircuitPeeringConfig.
        :rtype: str
        """
        return self._routing_registry_name

    @routing_registry_name.setter
    def routing_registry_name(self, routing_registry_name):
        """Sets the routing_registry_name of this ExpressRouteCircuitPeeringConfig.

        The RoutingRegistryName of the configuration.

        :param routing_registry_name: The routing_registry_name of this ExpressRouteCircuitPeeringConfig.
        :type routing_registry_name: str
        """

        self._routing_registry_name = routing_registry_name
