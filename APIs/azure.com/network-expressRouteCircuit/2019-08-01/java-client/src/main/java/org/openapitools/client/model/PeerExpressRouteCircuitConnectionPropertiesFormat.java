/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CircuitConnectionStatus;
import org.openapitools.client.model.ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of the peer express route circuit connection.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:29:01.756090-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PeerExpressRouteCircuitConnectionPropertiesFormat {
  public static final String SERIALIZED_NAME_ADDRESS_PREFIX = "addressPrefix";
  @SerializedName(SERIALIZED_NAME_ADDRESS_PREFIX)
  private String addressPrefix;

  public static final String SERIALIZED_NAME_AUTH_RESOURCE_GUID = "authResourceGuid";
  @SerializedName(SERIALIZED_NAME_AUTH_RESOURCE_GUID)
  private String authResourceGuid;

  public static final String SERIALIZED_NAME_CIRCUIT_CONNECTION_STATUS = "circuitConnectionStatus";
  @SerializedName(SERIALIZED_NAME_CIRCUIT_CONNECTION_STATUS)
  private CircuitConnectionStatus circuitConnectionStatus;

  public static final String SERIALIZED_NAME_CONNECTION_NAME = "connectionName";
  @SerializedName(SERIALIZED_NAME_CONNECTION_NAME)
  private String connectionName;

  public static final String SERIALIZED_NAME_EXPRESS_ROUTE_CIRCUIT_PEERING = "expressRouteCircuitPeering";
  @SerializedName(SERIALIZED_NAME_EXPRESS_ROUTE_CIRCUIT_PEERING)
  private ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering expressRouteCircuitPeering;

  public static final String SERIALIZED_NAME_PEER_EXPRESS_ROUTE_CIRCUIT_PEERING = "peerExpressRouteCircuitPeering";
  @SerializedName(SERIALIZED_NAME_PEER_EXPRESS_ROUTE_CIRCUIT_PEERING)
  private ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering peerExpressRouteCircuitPeering;

  /**
   * The current provisioning state.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    SUCCEEDED("Succeeded"),
    
    UPDATING("Updating"),
    
    DELETING("Deleting"),
    
    FAILED("Failed");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public PeerExpressRouteCircuitConnectionPropertiesFormat() {
  }

  public PeerExpressRouteCircuitConnectionPropertiesFormat(
     ProvisioningStateEnum provisioningState
  ) {
    this();
    this.provisioningState = provisioningState;
  }

  public PeerExpressRouteCircuitConnectionPropertiesFormat addressPrefix(String addressPrefix) {
    this.addressPrefix = addressPrefix;
    return this;
  }

  /**
   * /29 IP address space to carve out Customer addresses for tunnels.
   * @return addressPrefix
   */
  @javax.annotation.Nullable
  public String getAddressPrefix() {
    return addressPrefix;
  }

  public void setAddressPrefix(String addressPrefix) {
    this.addressPrefix = addressPrefix;
  }


  public PeerExpressRouteCircuitConnectionPropertiesFormat authResourceGuid(String authResourceGuid) {
    this.authResourceGuid = authResourceGuid;
    return this;
  }

  /**
   * The resource guid of the authorization used for the express route circuit connection.
   * @return authResourceGuid
   */
  @javax.annotation.Nullable
  public String getAuthResourceGuid() {
    return authResourceGuid;
  }

  public void setAuthResourceGuid(String authResourceGuid) {
    this.authResourceGuid = authResourceGuid;
  }


  public PeerExpressRouteCircuitConnectionPropertiesFormat circuitConnectionStatus(CircuitConnectionStatus circuitConnectionStatus) {
    this.circuitConnectionStatus = circuitConnectionStatus;
    return this;
  }

  /**
   * Get circuitConnectionStatus
   * @return circuitConnectionStatus
   */
  @javax.annotation.Nullable
  public CircuitConnectionStatus getCircuitConnectionStatus() {
    return circuitConnectionStatus;
  }

  public void setCircuitConnectionStatus(CircuitConnectionStatus circuitConnectionStatus) {
    this.circuitConnectionStatus = circuitConnectionStatus;
  }


  public PeerExpressRouteCircuitConnectionPropertiesFormat connectionName(String connectionName) {
    this.connectionName = connectionName;
    return this;
  }

  /**
   * The name of the express route circuit connection resource.
   * @return connectionName
   */
  @javax.annotation.Nullable
  public String getConnectionName() {
    return connectionName;
  }

  public void setConnectionName(String connectionName) {
    this.connectionName = connectionName;
  }


  public PeerExpressRouteCircuitConnectionPropertiesFormat expressRouteCircuitPeering(ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering expressRouteCircuitPeering) {
    this.expressRouteCircuitPeering = expressRouteCircuitPeering;
    return this;
  }

  /**
   * Get expressRouteCircuitPeering
   * @return expressRouteCircuitPeering
   */
  @javax.annotation.Nullable
  public ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering getExpressRouteCircuitPeering() {
    return expressRouteCircuitPeering;
  }

  public void setExpressRouteCircuitPeering(ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering expressRouteCircuitPeering) {
    this.expressRouteCircuitPeering = expressRouteCircuitPeering;
  }


  public PeerExpressRouteCircuitConnectionPropertiesFormat peerExpressRouteCircuitPeering(ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering peerExpressRouteCircuitPeering) {
    this.peerExpressRouteCircuitPeering = peerExpressRouteCircuitPeering;
    return this;
  }

  /**
   * Get peerExpressRouteCircuitPeering
   * @return peerExpressRouteCircuitPeering
   */
  @javax.annotation.Nullable
  public ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering getPeerExpressRouteCircuitPeering() {
    return peerExpressRouteCircuitPeering;
  }

  public void setPeerExpressRouteCircuitPeering(ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering peerExpressRouteCircuitPeering) {
    this.peerExpressRouteCircuitPeering = peerExpressRouteCircuitPeering;
  }


  /**
   * The current provisioning state.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PeerExpressRouteCircuitConnectionPropertiesFormat peerExpressRouteCircuitConnectionPropertiesFormat = (PeerExpressRouteCircuitConnectionPropertiesFormat) o;
    return Objects.equals(this.addressPrefix, peerExpressRouteCircuitConnectionPropertiesFormat.addressPrefix) &&
        Objects.equals(this.authResourceGuid, peerExpressRouteCircuitConnectionPropertiesFormat.authResourceGuid) &&
        Objects.equals(this.circuitConnectionStatus, peerExpressRouteCircuitConnectionPropertiesFormat.circuitConnectionStatus) &&
        Objects.equals(this.connectionName, peerExpressRouteCircuitConnectionPropertiesFormat.connectionName) &&
        Objects.equals(this.expressRouteCircuitPeering, peerExpressRouteCircuitConnectionPropertiesFormat.expressRouteCircuitPeering) &&
        Objects.equals(this.peerExpressRouteCircuitPeering, peerExpressRouteCircuitConnectionPropertiesFormat.peerExpressRouteCircuitPeering) &&
        Objects.equals(this.provisioningState, peerExpressRouteCircuitConnectionPropertiesFormat.provisioningState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressPrefix, authResourceGuid, circuitConnectionStatus, connectionName, expressRouteCircuitPeering, peerExpressRouteCircuitPeering, provisioningState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PeerExpressRouteCircuitConnectionPropertiesFormat {\n");
    sb.append("    addressPrefix: ").append(toIndentedString(addressPrefix)).append("\n");
    sb.append("    authResourceGuid: ").append(toIndentedString(authResourceGuid)).append("\n");
    sb.append("    circuitConnectionStatus: ").append(toIndentedString(circuitConnectionStatus)).append("\n");
    sb.append("    connectionName: ").append(toIndentedString(connectionName)).append("\n");
    sb.append("    expressRouteCircuitPeering: ").append(toIndentedString(expressRouteCircuitPeering)).append("\n");
    sb.append("    peerExpressRouteCircuitPeering: ").append(toIndentedString(peerExpressRouteCircuitPeering)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addressPrefix");
    openapiFields.add("authResourceGuid");
    openapiFields.add("circuitConnectionStatus");
    openapiFields.add("connectionName");
    openapiFields.add("expressRouteCircuitPeering");
    openapiFields.add("peerExpressRouteCircuitPeering");
    openapiFields.add("provisioningState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PeerExpressRouteCircuitConnectionPropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PeerExpressRouteCircuitConnectionPropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PeerExpressRouteCircuitConnectionPropertiesFormat is not found in the empty JSON string", PeerExpressRouteCircuitConnectionPropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PeerExpressRouteCircuitConnectionPropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PeerExpressRouteCircuitConnectionPropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("addressPrefix") != null && !jsonObj.get("addressPrefix").isJsonNull()) && !jsonObj.get("addressPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressPrefix").toString()));
      }
      if ((jsonObj.get("authResourceGuid") != null && !jsonObj.get("authResourceGuid").isJsonNull()) && !jsonObj.get("authResourceGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authResourceGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authResourceGuid").toString()));
      }
      // validate the optional field `circuitConnectionStatus`
      if (jsonObj.get("circuitConnectionStatus") != null && !jsonObj.get("circuitConnectionStatus").isJsonNull()) {
        CircuitConnectionStatus.validateJsonElement(jsonObj.get("circuitConnectionStatus"));
      }
      if ((jsonObj.get("connectionName") != null && !jsonObj.get("connectionName").isJsonNull()) && !jsonObj.get("connectionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionName").toString()));
      }
      // validate the optional field `expressRouteCircuitPeering`
      if (jsonObj.get("expressRouteCircuitPeering") != null && !jsonObj.get("expressRouteCircuitPeering").isJsonNull()) {
        ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering.validateJsonElement(jsonObj.get("expressRouteCircuitPeering"));
      }
      // validate the optional field `peerExpressRouteCircuitPeering`
      if (jsonObj.get("peerExpressRouteCircuitPeering") != null && !jsonObj.get("peerExpressRouteCircuitPeering").isJsonNull()) {
        ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering.validateJsonElement(jsonObj.get("peerExpressRouteCircuitPeering"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PeerExpressRouteCircuitConnectionPropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PeerExpressRouteCircuitConnectionPropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PeerExpressRouteCircuitConnectionPropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PeerExpressRouteCircuitConnectionPropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<PeerExpressRouteCircuitConnectionPropertiesFormat>() {
           @Override
           public void write(JsonWriter out, PeerExpressRouteCircuitConnectionPropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PeerExpressRouteCircuitConnectionPropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PeerExpressRouteCircuitConnectionPropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PeerExpressRouteCircuitConnectionPropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to PeerExpressRouteCircuitConnectionPropertiesFormat
   */
  public static PeerExpressRouteCircuitConnectionPropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PeerExpressRouteCircuitConnectionPropertiesFormat.class);
  }

  /**
   * Convert an instance of PeerExpressRouteCircuitConnectionPropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

