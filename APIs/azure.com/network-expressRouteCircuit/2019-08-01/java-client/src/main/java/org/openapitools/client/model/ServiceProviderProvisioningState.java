/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The ServiceProviderProvisioningState state of the resource.
 */
@JsonAdapter(ServiceProviderProvisioningState.Adapter.class)
public enum ServiceProviderProvisioningState {
  
  NOT_PROVISIONED("NotProvisioned"),
  
  PROVISIONING("Provisioning"),
  
  PROVISIONED("Provisioned"),
  
  DEPROVISIONING("Deprovisioning");

  private String value;

  ServiceProviderProvisioningState(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ServiceProviderProvisioningState fromValue(String value) {
    for (ServiceProviderProvisioningState b : ServiceProviderProvisioningState.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ServiceProviderProvisioningState> {
    @Override
    public void write(final JsonWriter jsonWriter, final ServiceProviderProvisioningState enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ServiceProviderProvisioningState read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ServiceProviderProvisioningState.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    ServiceProviderProvisioningState.fromValue(value);
  }
}

