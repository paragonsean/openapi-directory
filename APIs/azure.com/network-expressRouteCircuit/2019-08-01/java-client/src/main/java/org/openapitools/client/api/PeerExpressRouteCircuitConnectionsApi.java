/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.PeerExpressRouteCircuitConnection;
import org.openapitools.client.model.PeerExpressRouteCircuitConnectionListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PeerExpressRouteCircuitConnectionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PeerExpressRouteCircuitConnectionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PeerExpressRouteCircuitConnectionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for peerExpressRouteCircuitConnectionsGet
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the express route circuit. (required)
     * @param peeringName The name of the peering. (required)
     * @param connectionName The name of the peer express route circuit connection. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting Peer Express Route Circuit Connection resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call peerExpressRouteCircuitConnectionsGetCall(String resourceGroupName, String circuitName, String peeringName, String connectionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}/peerConnections/{connectionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "circuitName" + "}", localVarApiClient.escapeString(circuitName.toString()))
            .replace("{" + "peeringName" + "}", localVarApiClient.escapeString(peeringName.toString()))
            .replace("{" + "connectionName" + "}", localVarApiClient.escapeString(connectionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call peerExpressRouteCircuitConnectionsGetValidateBeforeCall(String resourceGroupName, String circuitName, String peeringName, String connectionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling peerExpressRouteCircuitConnectionsGet(Async)");
        }

        // verify the required parameter 'circuitName' is set
        if (circuitName == null) {
            throw new ApiException("Missing the required parameter 'circuitName' when calling peerExpressRouteCircuitConnectionsGet(Async)");
        }

        // verify the required parameter 'peeringName' is set
        if (peeringName == null) {
            throw new ApiException("Missing the required parameter 'peeringName' when calling peerExpressRouteCircuitConnectionsGet(Async)");
        }

        // verify the required parameter 'connectionName' is set
        if (connectionName == null) {
            throw new ApiException("Missing the required parameter 'connectionName' when calling peerExpressRouteCircuitConnectionsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling peerExpressRouteCircuitConnectionsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling peerExpressRouteCircuitConnectionsGet(Async)");
        }

        return peerExpressRouteCircuitConnectionsGetCall(resourceGroupName, circuitName, peeringName, connectionName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets the specified Peer Express Route Circuit Connection from the specified express route circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the express route circuit. (required)
     * @param peeringName The name of the peering. (required)
     * @param connectionName The name of the peer express route circuit connection. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return PeerExpressRouteCircuitConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting Peer Express Route Circuit Connection resource. </td><td>  -  </td></tr>
     </table>
     */
    public PeerExpressRouteCircuitConnection peerExpressRouteCircuitConnectionsGet(String resourceGroupName, String circuitName, String peeringName, String connectionName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<PeerExpressRouteCircuitConnection> localVarResp = peerExpressRouteCircuitConnectionsGetWithHttpInfo(resourceGroupName, circuitName, peeringName, connectionName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the specified Peer Express Route Circuit Connection from the specified express route circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the express route circuit. (required)
     * @param peeringName The name of the peering. (required)
     * @param connectionName The name of the peer express route circuit connection. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;PeerExpressRouteCircuitConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting Peer Express Route Circuit Connection resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PeerExpressRouteCircuitConnection> peerExpressRouteCircuitConnectionsGetWithHttpInfo(String resourceGroupName, String circuitName, String peeringName, String connectionName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = peerExpressRouteCircuitConnectionsGetValidateBeforeCall(resourceGroupName, circuitName, peeringName, connectionName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<PeerExpressRouteCircuitConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the specified Peer Express Route Circuit Connection from the specified express route circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the express route circuit. (required)
     * @param peeringName The name of the peering. (required)
     * @param connectionName The name of the peer express route circuit connection. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting Peer Express Route Circuit Connection resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call peerExpressRouteCircuitConnectionsGetAsync(String resourceGroupName, String circuitName, String peeringName, String connectionName, String apiVersion, String subscriptionId, final ApiCallback<PeerExpressRouteCircuitConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = peerExpressRouteCircuitConnectionsGetValidateBeforeCall(resourceGroupName, circuitName, peeringName, connectionName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<PeerExpressRouteCircuitConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for peerExpressRouteCircuitConnectionsList
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the circuit. (required)
     * @param peeringName The name of the peering. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of PeerExpressRouteCircuitConnections resources. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call peerExpressRouteCircuitConnectionsListCall(String resourceGroupName, String circuitName, String peeringName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}/peerConnections"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "circuitName" + "}", localVarApiClient.escapeString(circuitName.toString()))
            .replace("{" + "peeringName" + "}", localVarApiClient.escapeString(peeringName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call peerExpressRouteCircuitConnectionsListValidateBeforeCall(String resourceGroupName, String circuitName, String peeringName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling peerExpressRouteCircuitConnectionsList(Async)");
        }

        // verify the required parameter 'circuitName' is set
        if (circuitName == null) {
            throw new ApiException("Missing the required parameter 'circuitName' when calling peerExpressRouteCircuitConnectionsList(Async)");
        }

        // verify the required parameter 'peeringName' is set
        if (peeringName == null) {
            throw new ApiException("Missing the required parameter 'peeringName' when calling peerExpressRouteCircuitConnectionsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling peerExpressRouteCircuitConnectionsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling peerExpressRouteCircuitConnectionsList(Async)");
        }

        return peerExpressRouteCircuitConnectionsListCall(resourceGroupName, circuitName, peeringName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets all global reach peer connections associated with a private peering in an express route circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the circuit. (required)
     * @param peeringName The name of the peering. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return PeerExpressRouteCircuitConnectionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of PeerExpressRouteCircuitConnections resources. </td><td>  -  </td></tr>
     </table>
     */
    public PeerExpressRouteCircuitConnectionListResult peerExpressRouteCircuitConnectionsList(String resourceGroupName, String circuitName, String peeringName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<PeerExpressRouteCircuitConnectionListResult> localVarResp = peerExpressRouteCircuitConnectionsListWithHttpInfo(resourceGroupName, circuitName, peeringName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all global reach peer connections associated with a private peering in an express route circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the circuit. (required)
     * @param peeringName The name of the peering. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;PeerExpressRouteCircuitConnectionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of PeerExpressRouteCircuitConnections resources. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PeerExpressRouteCircuitConnectionListResult> peerExpressRouteCircuitConnectionsListWithHttpInfo(String resourceGroupName, String circuitName, String peeringName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = peerExpressRouteCircuitConnectionsListValidateBeforeCall(resourceGroupName, circuitName, peeringName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<PeerExpressRouteCircuitConnectionListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all global reach peer connections associated with a private peering in an express route circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the circuit. (required)
     * @param peeringName The name of the peering. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of PeerExpressRouteCircuitConnections resources. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call peerExpressRouteCircuitConnectionsListAsync(String resourceGroupName, String circuitName, String peeringName, String apiVersion, String subscriptionId, final ApiCallback<PeerExpressRouteCircuitConnectionListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = peerExpressRouteCircuitConnectionsListValidateBeforeCall(resourceGroupName, circuitName, peeringName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<PeerExpressRouteCircuitConnectionListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
