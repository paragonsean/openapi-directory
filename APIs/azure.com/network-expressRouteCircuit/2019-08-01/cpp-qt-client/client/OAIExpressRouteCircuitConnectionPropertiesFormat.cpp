/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpressRouteCircuitConnectionPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpressRouteCircuitConnectionPropertiesFormat::OAIExpressRouteCircuitConnectionPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpressRouteCircuitConnectionPropertiesFormat::OAIExpressRouteCircuitConnectionPropertiesFormat() {
    this->initializeModel();
}

OAIExpressRouteCircuitConnectionPropertiesFormat::~OAIExpressRouteCircuitConnectionPropertiesFormat() {}

void OAIExpressRouteCircuitConnectionPropertiesFormat::initializeModel() {

    m_address_prefix_isSet = false;
    m_address_prefix_isValid = false;

    m_authorization_key_isSet = false;
    m_authorization_key_isValid = false;

    m_circuit_connection_status_isSet = false;
    m_circuit_connection_status_isValid = false;

    m_express_route_circuit_peering_isSet = false;
    m_express_route_circuit_peering_isValid = false;

    m_peer_express_route_circuit_peering_isSet = false;
    m_peer_express_route_circuit_peering_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIExpressRouteCircuitConnectionPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpressRouteCircuitConnectionPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_address_prefix_isValid = ::OpenAPI::fromJsonValue(m_address_prefix, json[QString("addressPrefix")]);
    m_address_prefix_isSet = !json[QString("addressPrefix")].isNull() && m_address_prefix_isValid;

    m_authorization_key_isValid = ::OpenAPI::fromJsonValue(m_authorization_key, json[QString("authorizationKey")]);
    m_authorization_key_isSet = !json[QString("authorizationKey")].isNull() && m_authorization_key_isValid;

    m_circuit_connection_status_isValid = ::OpenAPI::fromJsonValue(m_circuit_connection_status, json[QString("circuitConnectionStatus")]);
    m_circuit_connection_status_isSet = !json[QString("circuitConnectionStatus")].isNull() && m_circuit_connection_status_isValid;

    m_express_route_circuit_peering_isValid = ::OpenAPI::fromJsonValue(m_express_route_circuit_peering, json[QString("expressRouteCircuitPeering")]);
    m_express_route_circuit_peering_isSet = !json[QString("expressRouteCircuitPeering")].isNull() && m_express_route_circuit_peering_isValid;

    m_peer_express_route_circuit_peering_isValid = ::OpenAPI::fromJsonValue(m_peer_express_route_circuit_peering, json[QString("peerExpressRouteCircuitPeering")]);
    m_peer_express_route_circuit_peering_isSet = !json[QString("peerExpressRouteCircuitPeering")].isNull() && m_peer_express_route_circuit_peering_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIExpressRouteCircuitConnectionPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpressRouteCircuitConnectionPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_address_prefix_isSet) {
        obj.insert(QString("addressPrefix"), ::OpenAPI::toJsonValue(m_address_prefix));
    }
    if (m_authorization_key_isSet) {
        obj.insert(QString("authorizationKey"), ::OpenAPI::toJsonValue(m_authorization_key));
    }
    if (m_circuit_connection_status.isSet()) {
        obj.insert(QString("circuitConnectionStatus"), ::OpenAPI::toJsonValue(m_circuit_connection_status));
    }
    if (m_express_route_circuit_peering.isSet()) {
        obj.insert(QString("expressRouteCircuitPeering"), ::OpenAPI::toJsonValue(m_express_route_circuit_peering));
    }
    if (m_peer_express_route_circuit_peering.isSet()) {
        obj.insert(QString("peerExpressRouteCircuitPeering"), ::OpenAPI::toJsonValue(m_peer_express_route_circuit_peering));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

QString OAIExpressRouteCircuitConnectionPropertiesFormat::getAddressPrefix() const {
    return m_address_prefix;
}
void OAIExpressRouteCircuitConnectionPropertiesFormat::setAddressPrefix(const QString &address_prefix) {
    m_address_prefix = address_prefix;
    m_address_prefix_isSet = true;
}

bool OAIExpressRouteCircuitConnectionPropertiesFormat::is_address_prefix_Set() const{
    return m_address_prefix_isSet;
}

bool OAIExpressRouteCircuitConnectionPropertiesFormat::is_address_prefix_Valid() const{
    return m_address_prefix_isValid;
}

QString OAIExpressRouteCircuitConnectionPropertiesFormat::getAuthorizationKey() const {
    return m_authorization_key;
}
void OAIExpressRouteCircuitConnectionPropertiesFormat::setAuthorizationKey(const QString &authorization_key) {
    m_authorization_key = authorization_key;
    m_authorization_key_isSet = true;
}

bool OAIExpressRouteCircuitConnectionPropertiesFormat::is_authorization_key_Set() const{
    return m_authorization_key_isSet;
}

bool OAIExpressRouteCircuitConnectionPropertiesFormat::is_authorization_key_Valid() const{
    return m_authorization_key_isValid;
}

OAICircuitConnectionStatus OAIExpressRouteCircuitConnectionPropertiesFormat::getCircuitConnectionStatus() const {
    return m_circuit_connection_status;
}
void OAIExpressRouteCircuitConnectionPropertiesFormat::setCircuitConnectionStatus(const OAICircuitConnectionStatus &circuit_connection_status) {
    m_circuit_connection_status = circuit_connection_status;
    m_circuit_connection_status_isSet = true;
}

bool OAIExpressRouteCircuitConnectionPropertiesFormat::is_circuit_connection_status_Set() const{
    return m_circuit_connection_status_isSet;
}

bool OAIExpressRouteCircuitConnectionPropertiesFormat::is_circuit_connection_status_Valid() const{
    return m_circuit_connection_status_isValid;
}

OAIExpressRouteCircuitConnectionPropertiesFormat_expressRouteCircuitPeering OAIExpressRouteCircuitConnectionPropertiesFormat::getExpressRouteCircuitPeering() const {
    return m_express_route_circuit_peering;
}
void OAIExpressRouteCircuitConnectionPropertiesFormat::setExpressRouteCircuitPeering(const OAIExpressRouteCircuitConnectionPropertiesFormat_expressRouteCircuitPeering &express_route_circuit_peering) {
    m_express_route_circuit_peering = express_route_circuit_peering;
    m_express_route_circuit_peering_isSet = true;
}

bool OAIExpressRouteCircuitConnectionPropertiesFormat::is_express_route_circuit_peering_Set() const{
    return m_express_route_circuit_peering_isSet;
}

bool OAIExpressRouteCircuitConnectionPropertiesFormat::is_express_route_circuit_peering_Valid() const{
    return m_express_route_circuit_peering_isValid;
}

OAIExpressRouteCircuitConnectionPropertiesFormat_expressRouteCircuitPeering OAIExpressRouteCircuitConnectionPropertiesFormat::getPeerExpressRouteCircuitPeering() const {
    return m_peer_express_route_circuit_peering;
}
void OAIExpressRouteCircuitConnectionPropertiesFormat::setPeerExpressRouteCircuitPeering(const OAIExpressRouteCircuitConnectionPropertiesFormat_expressRouteCircuitPeering &peer_express_route_circuit_peering) {
    m_peer_express_route_circuit_peering = peer_express_route_circuit_peering;
    m_peer_express_route_circuit_peering_isSet = true;
}

bool OAIExpressRouteCircuitConnectionPropertiesFormat::is_peer_express_route_circuit_peering_Set() const{
    return m_peer_express_route_circuit_peering_isSet;
}

bool OAIExpressRouteCircuitConnectionPropertiesFormat::is_peer_express_route_circuit_peering_Valid() const{
    return m_peer_express_route_circuit_peering_isValid;
}

QString OAIExpressRouteCircuitConnectionPropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIExpressRouteCircuitConnectionPropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIExpressRouteCircuitConnectionPropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIExpressRouteCircuitConnectionPropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIExpressRouteCircuitConnectionPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_circuit_connection_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_express_route_circuit_peering.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_peer_express_route_circuit_peering.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpressRouteCircuitConnectionPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
