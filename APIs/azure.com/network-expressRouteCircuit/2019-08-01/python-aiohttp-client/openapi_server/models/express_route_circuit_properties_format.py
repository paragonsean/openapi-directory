# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.express_route_circuit_authorization import ExpressRouteCircuitAuthorization
from openapi_server.models.express_route_circuit_connection_properties_format_express_route_circuit_peering import ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering
from openapi_server.models.express_route_circuit_peering import ExpressRouteCircuitPeering
from openapi_server.models.express_route_circuit_service_provider_properties import ExpressRouteCircuitServiceProviderProperties
from openapi_server.models.service_provider_provisioning_state import ServiceProviderProvisioningState
from openapi_server import util


class ExpressRouteCircuitPropertiesFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_classic_operations: bool=None, authorizations: List[ExpressRouteCircuitAuthorization]=None, bandwidth_in_gbps: float=None, circuit_provisioning_state: str=None, express_route_port: ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering=None, gateway_manager_etag: str=None, global_reach_enabled: bool=None, peerings: List[ExpressRouteCircuitPeering]=None, provisioning_state: str=None, service_key: str=None, service_provider_notes: str=None, service_provider_properties: ExpressRouteCircuitServiceProviderProperties=None, service_provider_provisioning_state: ServiceProviderProvisioningState=None, stag: int=None):
        """ExpressRouteCircuitPropertiesFormat - a model defined in OpenAPI

        :param allow_classic_operations: The allow_classic_operations of this ExpressRouteCircuitPropertiesFormat.
        :param authorizations: The authorizations of this ExpressRouteCircuitPropertiesFormat.
        :param bandwidth_in_gbps: The bandwidth_in_gbps of this ExpressRouteCircuitPropertiesFormat.
        :param circuit_provisioning_state: The circuit_provisioning_state of this ExpressRouteCircuitPropertiesFormat.
        :param express_route_port: The express_route_port of this ExpressRouteCircuitPropertiesFormat.
        :param gateway_manager_etag: The gateway_manager_etag of this ExpressRouteCircuitPropertiesFormat.
        :param global_reach_enabled: The global_reach_enabled of this ExpressRouteCircuitPropertiesFormat.
        :param peerings: The peerings of this ExpressRouteCircuitPropertiesFormat.
        :param provisioning_state: The provisioning_state of this ExpressRouteCircuitPropertiesFormat.
        :param service_key: The service_key of this ExpressRouteCircuitPropertiesFormat.
        :param service_provider_notes: The service_provider_notes of this ExpressRouteCircuitPropertiesFormat.
        :param service_provider_properties: The service_provider_properties of this ExpressRouteCircuitPropertiesFormat.
        :param service_provider_provisioning_state: The service_provider_provisioning_state of this ExpressRouteCircuitPropertiesFormat.
        :param stag: The stag of this ExpressRouteCircuitPropertiesFormat.
        """
        self.openapi_types = {
            'allow_classic_operations': bool,
            'authorizations': List[ExpressRouteCircuitAuthorization],
            'bandwidth_in_gbps': float,
            'circuit_provisioning_state': str,
            'express_route_port': ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering,
            'gateway_manager_etag': str,
            'global_reach_enabled': bool,
            'peerings': List[ExpressRouteCircuitPeering],
            'provisioning_state': str,
            'service_key': str,
            'service_provider_notes': str,
            'service_provider_properties': ExpressRouteCircuitServiceProviderProperties,
            'service_provider_provisioning_state': ServiceProviderProvisioningState,
            'stag': int
        }

        self.attribute_map = {
            'allow_classic_operations': 'allowClassicOperations',
            'authorizations': 'authorizations',
            'bandwidth_in_gbps': 'bandwidthInGbps',
            'circuit_provisioning_state': 'circuitProvisioningState',
            'express_route_port': 'expressRoutePort',
            'gateway_manager_etag': 'gatewayManagerEtag',
            'global_reach_enabled': 'globalReachEnabled',
            'peerings': 'peerings',
            'provisioning_state': 'provisioningState',
            'service_key': 'serviceKey',
            'service_provider_notes': 'serviceProviderNotes',
            'service_provider_properties': 'serviceProviderProperties',
            'service_provider_provisioning_state': 'serviceProviderProvisioningState',
            'stag': 'stag'
        }

        self._allow_classic_operations = allow_classic_operations
        self._authorizations = authorizations
        self._bandwidth_in_gbps = bandwidth_in_gbps
        self._circuit_provisioning_state = circuit_provisioning_state
        self._express_route_port = express_route_port
        self._gateway_manager_etag = gateway_manager_etag
        self._global_reach_enabled = global_reach_enabled
        self._peerings = peerings
        self._provisioning_state = provisioning_state
        self._service_key = service_key
        self._service_provider_notes = service_provider_notes
        self._service_provider_properties = service_provider_properties
        self._service_provider_provisioning_state = service_provider_provisioning_state
        self._stag = stag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExpressRouteCircuitPropertiesFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExpressRouteCircuitPropertiesFormat of this ExpressRouteCircuitPropertiesFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_classic_operations(self):
        """Gets the allow_classic_operations of this ExpressRouteCircuitPropertiesFormat.

        Allow classic operations.

        :return: The allow_classic_operations of this ExpressRouteCircuitPropertiesFormat.
        :rtype: bool
        """
        return self._allow_classic_operations

    @allow_classic_operations.setter
    def allow_classic_operations(self, allow_classic_operations):
        """Sets the allow_classic_operations of this ExpressRouteCircuitPropertiesFormat.

        Allow classic operations.

        :param allow_classic_operations: The allow_classic_operations of this ExpressRouteCircuitPropertiesFormat.
        :type allow_classic_operations: bool
        """

        self._allow_classic_operations = allow_classic_operations

    @property
    def authorizations(self):
        """Gets the authorizations of this ExpressRouteCircuitPropertiesFormat.

        The list of authorizations.

        :return: The authorizations of this ExpressRouteCircuitPropertiesFormat.
        :rtype: List[ExpressRouteCircuitAuthorization]
        """
        return self._authorizations

    @authorizations.setter
    def authorizations(self, authorizations):
        """Sets the authorizations of this ExpressRouteCircuitPropertiesFormat.

        The list of authorizations.

        :param authorizations: The authorizations of this ExpressRouteCircuitPropertiesFormat.
        :type authorizations: List[ExpressRouteCircuitAuthorization]
        """

        self._authorizations = authorizations

    @property
    def bandwidth_in_gbps(self):
        """Gets the bandwidth_in_gbps of this ExpressRouteCircuitPropertiesFormat.

        The bandwidth of the circuit when the circuit is provisioned on an ExpressRoutePort resource.

        :return: The bandwidth_in_gbps of this ExpressRouteCircuitPropertiesFormat.
        :rtype: float
        """
        return self._bandwidth_in_gbps

    @bandwidth_in_gbps.setter
    def bandwidth_in_gbps(self, bandwidth_in_gbps):
        """Sets the bandwidth_in_gbps of this ExpressRouteCircuitPropertiesFormat.

        The bandwidth of the circuit when the circuit is provisioned on an ExpressRoutePort resource.

        :param bandwidth_in_gbps: The bandwidth_in_gbps of this ExpressRouteCircuitPropertiesFormat.
        :type bandwidth_in_gbps: float
        """

        self._bandwidth_in_gbps = bandwidth_in_gbps

    @property
    def circuit_provisioning_state(self):
        """Gets the circuit_provisioning_state of this ExpressRouteCircuitPropertiesFormat.

        The CircuitProvisioningState state of the resource.

        :return: The circuit_provisioning_state of this ExpressRouteCircuitPropertiesFormat.
        :rtype: str
        """
        return self._circuit_provisioning_state

    @circuit_provisioning_state.setter
    def circuit_provisioning_state(self, circuit_provisioning_state):
        """Sets the circuit_provisioning_state of this ExpressRouteCircuitPropertiesFormat.

        The CircuitProvisioningState state of the resource.

        :param circuit_provisioning_state: The circuit_provisioning_state of this ExpressRouteCircuitPropertiesFormat.
        :type circuit_provisioning_state: str
        """

        self._circuit_provisioning_state = circuit_provisioning_state

    @property
    def express_route_port(self):
        """Gets the express_route_port of this ExpressRouteCircuitPropertiesFormat.


        :return: The express_route_port of this ExpressRouteCircuitPropertiesFormat.
        :rtype: ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering
        """
        return self._express_route_port

    @express_route_port.setter
    def express_route_port(self, express_route_port):
        """Sets the express_route_port of this ExpressRouteCircuitPropertiesFormat.


        :param express_route_port: The express_route_port of this ExpressRouteCircuitPropertiesFormat.
        :type express_route_port: ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering
        """

        self._express_route_port = express_route_port

    @property
    def gateway_manager_etag(self):
        """Gets the gateway_manager_etag of this ExpressRouteCircuitPropertiesFormat.

        The GatewayManager Etag.

        :return: The gateway_manager_etag of this ExpressRouteCircuitPropertiesFormat.
        :rtype: str
        """
        return self._gateway_manager_etag

    @gateway_manager_etag.setter
    def gateway_manager_etag(self, gateway_manager_etag):
        """Sets the gateway_manager_etag of this ExpressRouteCircuitPropertiesFormat.

        The GatewayManager Etag.

        :param gateway_manager_etag: The gateway_manager_etag of this ExpressRouteCircuitPropertiesFormat.
        :type gateway_manager_etag: str
        """

        self._gateway_manager_etag = gateway_manager_etag

    @property
    def global_reach_enabled(self):
        """Gets the global_reach_enabled of this ExpressRouteCircuitPropertiesFormat.

        Flag denoting Global reach status.

        :return: The global_reach_enabled of this ExpressRouteCircuitPropertiesFormat.
        :rtype: bool
        """
        return self._global_reach_enabled

    @global_reach_enabled.setter
    def global_reach_enabled(self, global_reach_enabled):
        """Sets the global_reach_enabled of this ExpressRouteCircuitPropertiesFormat.

        Flag denoting Global reach status.

        :param global_reach_enabled: The global_reach_enabled of this ExpressRouteCircuitPropertiesFormat.
        :type global_reach_enabled: bool
        """

        self._global_reach_enabled = global_reach_enabled

    @property
    def peerings(self):
        """Gets the peerings of this ExpressRouteCircuitPropertiesFormat.

        The list of peerings.

        :return: The peerings of this ExpressRouteCircuitPropertiesFormat.
        :rtype: List[ExpressRouteCircuitPeering]
        """
        return self._peerings

    @peerings.setter
    def peerings(self, peerings):
        """Sets the peerings of this ExpressRouteCircuitPropertiesFormat.

        The list of peerings.

        :param peerings: The peerings of this ExpressRouteCircuitPropertiesFormat.
        :type peerings: List[ExpressRouteCircuitPeering]
        """

        self._peerings = peerings

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ExpressRouteCircuitPropertiesFormat.

        The current provisioning state.

        :return: The provisioning_state of this ExpressRouteCircuitPropertiesFormat.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ExpressRouteCircuitPropertiesFormat.

        The current provisioning state.

        :param provisioning_state: The provisioning_state of this ExpressRouteCircuitPropertiesFormat.
        :type provisioning_state: str
        """
        allowed_values = ["Succeeded", "Updating", "Deleting", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def service_key(self):
        """Gets the service_key of this ExpressRouteCircuitPropertiesFormat.

        The ServiceKey.

        :return: The service_key of this ExpressRouteCircuitPropertiesFormat.
        :rtype: str
        """
        return self._service_key

    @service_key.setter
    def service_key(self, service_key):
        """Sets the service_key of this ExpressRouteCircuitPropertiesFormat.

        The ServiceKey.

        :param service_key: The service_key of this ExpressRouteCircuitPropertiesFormat.
        :type service_key: str
        """

        self._service_key = service_key

    @property
    def service_provider_notes(self):
        """Gets the service_provider_notes of this ExpressRouteCircuitPropertiesFormat.

        The ServiceProviderNotes.

        :return: The service_provider_notes of this ExpressRouteCircuitPropertiesFormat.
        :rtype: str
        """
        return self._service_provider_notes

    @service_provider_notes.setter
    def service_provider_notes(self, service_provider_notes):
        """Sets the service_provider_notes of this ExpressRouteCircuitPropertiesFormat.

        The ServiceProviderNotes.

        :param service_provider_notes: The service_provider_notes of this ExpressRouteCircuitPropertiesFormat.
        :type service_provider_notes: str
        """

        self._service_provider_notes = service_provider_notes

    @property
    def service_provider_properties(self):
        """Gets the service_provider_properties of this ExpressRouteCircuitPropertiesFormat.


        :return: The service_provider_properties of this ExpressRouteCircuitPropertiesFormat.
        :rtype: ExpressRouteCircuitServiceProviderProperties
        """
        return self._service_provider_properties

    @service_provider_properties.setter
    def service_provider_properties(self, service_provider_properties):
        """Sets the service_provider_properties of this ExpressRouteCircuitPropertiesFormat.


        :param service_provider_properties: The service_provider_properties of this ExpressRouteCircuitPropertiesFormat.
        :type service_provider_properties: ExpressRouteCircuitServiceProviderProperties
        """

        self._service_provider_properties = service_provider_properties

    @property
    def service_provider_provisioning_state(self):
        """Gets the service_provider_provisioning_state of this ExpressRouteCircuitPropertiesFormat.


        :return: The service_provider_provisioning_state of this ExpressRouteCircuitPropertiesFormat.
        :rtype: ServiceProviderProvisioningState
        """
        return self._service_provider_provisioning_state

    @service_provider_provisioning_state.setter
    def service_provider_provisioning_state(self, service_provider_provisioning_state):
        """Sets the service_provider_provisioning_state of this ExpressRouteCircuitPropertiesFormat.


        :param service_provider_provisioning_state: The service_provider_provisioning_state of this ExpressRouteCircuitPropertiesFormat.
        :type service_provider_provisioning_state: ServiceProviderProvisioningState
        """

        self._service_provider_provisioning_state = service_provider_provisioning_state

    @property
    def stag(self):
        """Gets the stag of this ExpressRouteCircuitPropertiesFormat.

        The identifier of the circuit traffic. Outer tag for QinQ encapsulation.

        :return: The stag of this ExpressRouteCircuitPropertiesFormat.
        :rtype: int
        """
        return self._stag

    @stag.setter
    def stag(self, stag):
        """Sets the stag of this ExpressRouteCircuitPropertiesFormat.

        The identifier of the circuit traffic. Outer tag for QinQ encapsulation.

        :param stag: The stag of this ExpressRouteCircuitPropertiesFormat.
        :type stag: int
        """

        self._stag = stag
