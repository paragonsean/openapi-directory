# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuthorizationPropertiesFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorization_key: str=None, authorization_use_status: str=None, provisioning_state: str=None):
        """AuthorizationPropertiesFormat - a model defined in OpenAPI

        :param authorization_key: The authorization_key of this AuthorizationPropertiesFormat.
        :param authorization_use_status: The authorization_use_status of this AuthorizationPropertiesFormat.
        :param provisioning_state: The provisioning_state of this AuthorizationPropertiesFormat.
        """
        self.openapi_types = {
            'authorization_key': str,
            'authorization_use_status': str,
            'provisioning_state': str
        }

        self.attribute_map = {
            'authorization_key': 'authorizationKey',
            'authorization_use_status': 'authorizationUseStatus',
            'provisioning_state': 'provisioningState'
        }

        self._authorization_key = authorization_key
        self._authorization_use_status = authorization_use_status
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthorizationPropertiesFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthorizationPropertiesFormat of this AuthorizationPropertiesFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorization_key(self):
        """Gets the authorization_key of this AuthorizationPropertiesFormat.

        The authorization key.

        :return: The authorization_key of this AuthorizationPropertiesFormat.
        :rtype: str
        """
        return self._authorization_key

    @authorization_key.setter
    def authorization_key(self, authorization_key):
        """Sets the authorization_key of this AuthorizationPropertiesFormat.

        The authorization key.

        :param authorization_key: The authorization_key of this AuthorizationPropertiesFormat.
        :type authorization_key: str
        """

        self._authorization_key = authorization_key

    @property
    def authorization_use_status(self):
        """Gets the authorization_use_status of this AuthorizationPropertiesFormat.

        The authorization use status.

        :return: The authorization_use_status of this AuthorizationPropertiesFormat.
        :rtype: str
        """
        return self._authorization_use_status

    @authorization_use_status.setter
    def authorization_use_status(self, authorization_use_status):
        """Sets the authorization_use_status of this AuthorizationPropertiesFormat.

        The authorization use status.

        :param authorization_use_status: The authorization_use_status of this AuthorizationPropertiesFormat.
        :type authorization_use_status: str
        """
        allowed_values = ["Available", "InUse"]  # noqa: E501
        if authorization_use_status not in allowed_values:
            raise ValueError(
                "Invalid value for `authorization_use_status` ({0}), must be one of {1}"
                .format(authorization_use_status, allowed_values)
            )

        self._authorization_use_status = authorization_use_status

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this AuthorizationPropertiesFormat.

        The current provisioning state.

        :return: The provisioning_state of this AuthorizationPropertiesFormat.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this AuthorizationPropertiesFormat.

        The current provisioning state.

        :param provisioning_state: The provisioning_state of this AuthorizationPropertiesFormat.
        :type provisioning_state: str
        """
        allowed_values = ["Succeeded", "Updating", "Deleting", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state
