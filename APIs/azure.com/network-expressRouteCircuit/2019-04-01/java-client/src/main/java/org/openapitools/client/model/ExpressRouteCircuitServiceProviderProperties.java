/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains ServiceProviderProperties in an ExpressRouteCircuit.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:28:44.508231-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExpressRouteCircuitServiceProviderProperties {
  public static final String SERIALIZED_NAME_BANDWIDTH_IN_MBPS = "bandwidthInMbps";
  @SerializedName(SERIALIZED_NAME_BANDWIDTH_IN_MBPS)
  private Integer bandwidthInMbps;

  public static final String SERIALIZED_NAME_PEERING_LOCATION = "peeringLocation";
  @SerializedName(SERIALIZED_NAME_PEERING_LOCATION)
  private String peeringLocation;

  public static final String SERIALIZED_NAME_SERVICE_PROVIDER_NAME = "serviceProviderName";
  @SerializedName(SERIALIZED_NAME_SERVICE_PROVIDER_NAME)
  private String serviceProviderName;

  public ExpressRouteCircuitServiceProviderProperties() {
  }

  public ExpressRouteCircuitServiceProviderProperties bandwidthInMbps(Integer bandwidthInMbps) {
    this.bandwidthInMbps = bandwidthInMbps;
    return this;
  }

  /**
   * The BandwidthInMbps.
   * @return bandwidthInMbps
   */
  @javax.annotation.Nullable
  public Integer getBandwidthInMbps() {
    return bandwidthInMbps;
  }

  public void setBandwidthInMbps(Integer bandwidthInMbps) {
    this.bandwidthInMbps = bandwidthInMbps;
  }


  public ExpressRouteCircuitServiceProviderProperties peeringLocation(String peeringLocation) {
    this.peeringLocation = peeringLocation;
    return this;
  }

  /**
   * The peering location.
   * @return peeringLocation
   */
  @javax.annotation.Nullable
  public String getPeeringLocation() {
    return peeringLocation;
  }

  public void setPeeringLocation(String peeringLocation) {
    this.peeringLocation = peeringLocation;
  }


  public ExpressRouteCircuitServiceProviderProperties serviceProviderName(String serviceProviderName) {
    this.serviceProviderName = serviceProviderName;
    return this;
  }

  /**
   * The serviceProviderName.
   * @return serviceProviderName
   */
  @javax.annotation.Nullable
  public String getServiceProviderName() {
    return serviceProviderName;
  }

  public void setServiceProviderName(String serviceProviderName) {
    this.serviceProviderName = serviceProviderName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExpressRouteCircuitServiceProviderProperties expressRouteCircuitServiceProviderProperties = (ExpressRouteCircuitServiceProviderProperties) o;
    return Objects.equals(this.bandwidthInMbps, expressRouteCircuitServiceProviderProperties.bandwidthInMbps) &&
        Objects.equals(this.peeringLocation, expressRouteCircuitServiceProviderProperties.peeringLocation) &&
        Objects.equals(this.serviceProviderName, expressRouteCircuitServiceProviderProperties.serviceProviderName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bandwidthInMbps, peeringLocation, serviceProviderName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExpressRouteCircuitServiceProviderProperties {\n");
    sb.append("    bandwidthInMbps: ").append(toIndentedString(bandwidthInMbps)).append("\n");
    sb.append("    peeringLocation: ").append(toIndentedString(peeringLocation)).append("\n");
    sb.append("    serviceProviderName: ").append(toIndentedString(serviceProviderName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bandwidthInMbps");
    openapiFields.add("peeringLocation");
    openapiFields.add("serviceProviderName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExpressRouteCircuitServiceProviderProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExpressRouteCircuitServiceProviderProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExpressRouteCircuitServiceProviderProperties is not found in the empty JSON string", ExpressRouteCircuitServiceProviderProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExpressRouteCircuitServiceProviderProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExpressRouteCircuitServiceProviderProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("peeringLocation") != null && !jsonObj.get("peeringLocation").isJsonNull()) && !jsonObj.get("peeringLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `peeringLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("peeringLocation").toString()));
      }
      if ((jsonObj.get("serviceProviderName") != null && !jsonObj.get("serviceProviderName").isJsonNull()) && !jsonObj.get("serviceProviderName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceProviderName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceProviderName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExpressRouteCircuitServiceProviderProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExpressRouteCircuitServiceProviderProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExpressRouteCircuitServiceProviderProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExpressRouteCircuitServiceProviderProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ExpressRouteCircuitServiceProviderProperties>() {
           @Override
           public void write(JsonWriter out, ExpressRouteCircuitServiceProviderProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExpressRouteCircuitServiceProviderProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExpressRouteCircuitServiceProviderProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExpressRouteCircuitServiceProviderProperties
   * @throws IOException if the JSON string is invalid with respect to ExpressRouteCircuitServiceProviderProperties
   */
  public static ExpressRouteCircuitServiceProviderProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExpressRouteCircuitServiceProviderProperties.class);
  }

  /**
   * Convert an instance of ExpressRouteCircuitServiceProviderProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

