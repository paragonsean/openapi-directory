/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpressRouteCircuitPeeringConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpressRouteCircuitPeeringConfig::OAIExpressRouteCircuitPeeringConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpressRouteCircuitPeeringConfig::OAIExpressRouteCircuitPeeringConfig() {
    this->initializeModel();
}

OAIExpressRouteCircuitPeeringConfig::~OAIExpressRouteCircuitPeeringConfig() {}

void OAIExpressRouteCircuitPeeringConfig::initializeModel() {

    m_advertised_communities_isSet = false;
    m_advertised_communities_isValid = false;

    m_advertised_public_prefixes_isSet = false;
    m_advertised_public_prefixes_isValid = false;

    m_advertised_public_prefixes_state_isSet = false;
    m_advertised_public_prefixes_state_isValid = false;

    m_customer_asn_isSet = false;
    m_customer_asn_isValid = false;

    m_legacy_mode_isSet = false;
    m_legacy_mode_isValid = false;

    m_routing_registry_name_isSet = false;
    m_routing_registry_name_isValid = false;
}

void OAIExpressRouteCircuitPeeringConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpressRouteCircuitPeeringConfig::fromJsonObject(QJsonObject json) {

    m_advertised_communities_isValid = ::OpenAPI::fromJsonValue(m_advertised_communities, json[QString("advertisedCommunities")]);
    m_advertised_communities_isSet = !json[QString("advertisedCommunities")].isNull() && m_advertised_communities_isValid;

    m_advertised_public_prefixes_isValid = ::OpenAPI::fromJsonValue(m_advertised_public_prefixes, json[QString("advertisedPublicPrefixes")]);
    m_advertised_public_prefixes_isSet = !json[QString("advertisedPublicPrefixes")].isNull() && m_advertised_public_prefixes_isValid;

    m_advertised_public_prefixes_state_isValid = ::OpenAPI::fromJsonValue(m_advertised_public_prefixes_state, json[QString("advertisedPublicPrefixesState")]);
    m_advertised_public_prefixes_state_isSet = !json[QString("advertisedPublicPrefixesState")].isNull() && m_advertised_public_prefixes_state_isValid;

    m_customer_asn_isValid = ::OpenAPI::fromJsonValue(m_customer_asn, json[QString("customerASN")]);
    m_customer_asn_isSet = !json[QString("customerASN")].isNull() && m_customer_asn_isValid;

    m_legacy_mode_isValid = ::OpenAPI::fromJsonValue(m_legacy_mode, json[QString("legacyMode")]);
    m_legacy_mode_isSet = !json[QString("legacyMode")].isNull() && m_legacy_mode_isValid;

    m_routing_registry_name_isValid = ::OpenAPI::fromJsonValue(m_routing_registry_name, json[QString("routingRegistryName")]);
    m_routing_registry_name_isSet = !json[QString("routingRegistryName")].isNull() && m_routing_registry_name_isValid;
}

QString OAIExpressRouteCircuitPeeringConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpressRouteCircuitPeeringConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_advertised_communities.size() > 0) {
        obj.insert(QString("advertisedCommunities"), ::OpenAPI::toJsonValue(m_advertised_communities));
    }
    if (m_advertised_public_prefixes.size() > 0) {
        obj.insert(QString("advertisedPublicPrefixes"), ::OpenAPI::toJsonValue(m_advertised_public_prefixes));
    }
    if (m_advertised_public_prefixes_state_isSet) {
        obj.insert(QString("advertisedPublicPrefixesState"), ::OpenAPI::toJsonValue(m_advertised_public_prefixes_state));
    }
    if (m_customer_asn_isSet) {
        obj.insert(QString("customerASN"), ::OpenAPI::toJsonValue(m_customer_asn));
    }
    if (m_legacy_mode_isSet) {
        obj.insert(QString("legacyMode"), ::OpenAPI::toJsonValue(m_legacy_mode));
    }
    if (m_routing_registry_name_isSet) {
        obj.insert(QString("routingRegistryName"), ::OpenAPI::toJsonValue(m_routing_registry_name));
    }
    return obj;
}

QList<QString> OAIExpressRouteCircuitPeeringConfig::getAdvertisedCommunities() const {
    return m_advertised_communities;
}
void OAIExpressRouteCircuitPeeringConfig::setAdvertisedCommunities(const QList<QString> &advertised_communities) {
    m_advertised_communities = advertised_communities;
    m_advertised_communities_isSet = true;
}

bool OAIExpressRouteCircuitPeeringConfig::is_advertised_communities_Set() const{
    return m_advertised_communities_isSet;
}

bool OAIExpressRouteCircuitPeeringConfig::is_advertised_communities_Valid() const{
    return m_advertised_communities_isValid;
}

QList<QString> OAIExpressRouteCircuitPeeringConfig::getAdvertisedPublicPrefixes() const {
    return m_advertised_public_prefixes;
}
void OAIExpressRouteCircuitPeeringConfig::setAdvertisedPublicPrefixes(const QList<QString> &advertised_public_prefixes) {
    m_advertised_public_prefixes = advertised_public_prefixes;
    m_advertised_public_prefixes_isSet = true;
}

bool OAIExpressRouteCircuitPeeringConfig::is_advertised_public_prefixes_Set() const{
    return m_advertised_public_prefixes_isSet;
}

bool OAIExpressRouteCircuitPeeringConfig::is_advertised_public_prefixes_Valid() const{
    return m_advertised_public_prefixes_isValid;
}

QString OAIExpressRouteCircuitPeeringConfig::getAdvertisedPublicPrefixesState() const {
    return m_advertised_public_prefixes_state;
}
void OAIExpressRouteCircuitPeeringConfig::setAdvertisedPublicPrefixesState(const QString &advertised_public_prefixes_state) {
    m_advertised_public_prefixes_state = advertised_public_prefixes_state;
    m_advertised_public_prefixes_state_isSet = true;
}

bool OAIExpressRouteCircuitPeeringConfig::is_advertised_public_prefixes_state_Set() const{
    return m_advertised_public_prefixes_state_isSet;
}

bool OAIExpressRouteCircuitPeeringConfig::is_advertised_public_prefixes_state_Valid() const{
    return m_advertised_public_prefixes_state_isValid;
}

qint32 OAIExpressRouteCircuitPeeringConfig::getCustomerAsn() const {
    return m_customer_asn;
}
void OAIExpressRouteCircuitPeeringConfig::setCustomerAsn(const qint32 &customer_asn) {
    m_customer_asn = customer_asn;
    m_customer_asn_isSet = true;
}

bool OAIExpressRouteCircuitPeeringConfig::is_customer_asn_Set() const{
    return m_customer_asn_isSet;
}

bool OAIExpressRouteCircuitPeeringConfig::is_customer_asn_Valid() const{
    return m_customer_asn_isValid;
}

qint32 OAIExpressRouteCircuitPeeringConfig::getLegacyMode() const {
    return m_legacy_mode;
}
void OAIExpressRouteCircuitPeeringConfig::setLegacyMode(const qint32 &legacy_mode) {
    m_legacy_mode = legacy_mode;
    m_legacy_mode_isSet = true;
}

bool OAIExpressRouteCircuitPeeringConfig::is_legacy_mode_Set() const{
    return m_legacy_mode_isSet;
}

bool OAIExpressRouteCircuitPeeringConfig::is_legacy_mode_Valid() const{
    return m_legacy_mode_isValid;
}

QString OAIExpressRouteCircuitPeeringConfig::getRoutingRegistryName() const {
    return m_routing_registry_name;
}
void OAIExpressRouteCircuitPeeringConfig::setRoutingRegistryName(const QString &routing_registry_name) {
    m_routing_registry_name = routing_registry_name;
    m_routing_registry_name_isSet = true;
}

bool OAIExpressRouteCircuitPeeringConfig::is_routing_registry_name_Set() const{
    return m_routing_registry_name_isSet;
}

bool OAIExpressRouteCircuitPeeringConfig::is_routing_registry_name_Valid() const{
    return m_routing_registry_name_isValid;
}

bool OAIExpressRouteCircuitPeeringConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advertised_communities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_advertised_public_prefixes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_advertised_public_prefixes_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_asn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legacy_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing_registry_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpressRouteCircuitPeeringConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
