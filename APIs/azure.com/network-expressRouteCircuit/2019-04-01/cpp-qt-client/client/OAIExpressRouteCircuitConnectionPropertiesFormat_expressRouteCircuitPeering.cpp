/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpressRouteCircuitConnectionPropertiesFormat_expressRouteCircuitPeering.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpressRouteCircuitConnectionPropertiesFormat_expressRouteCircuitPeering::OAIExpressRouteCircuitConnectionPropertiesFormat_expressRouteCircuitPeering(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpressRouteCircuitConnectionPropertiesFormat_expressRouteCircuitPeering::OAIExpressRouteCircuitConnectionPropertiesFormat_expressRouteCircuitPeering() {
    this->initializeModel();
}

OAIExpressRouteCircuitConnectionPropertiesFormat_expressRouteCircuitPeering::~OAIExpressRouteCircuitConnectionPropertiesFormat_expressRouteCircuitPeering() {}

void OAIExpressRouteCircuitConnectionPropertiesFormat_expressRouteCircuitPeering::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAIExpressRouteCircuitConnectionPropertiesFormat_expressRouteCircuitPeering::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpressRouteCircuitConnectionPropertiesFormat_expressRouteCircuitPeering::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAIExpressRouteCircuitConnectionPropertiesFormat_expressRouteCircuitPeering::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpressRouteCircuitConnectionPropertiesFormat_expressRouteCircuitPeering::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

QString OAIExpressRouteCircuitConnectionPropertiesFormat_expressRouteCircuitPeering::getId() const {
    return m_id;
}
void OAIExpressRouteCircuitConnectionPropertiesFormat_expressRouteCircuitPeering::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIExpressRouteCircuitConnectionPropertiesFormat_expressRouteCircuitPeering::is_id_Set() const{
    return m_id_isSet;
}

bool OAIExpressRouteCircuitConnectionPropertiesFormat_expressRouteCircuitPeering::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIExpressRouteCircuitConnectionPropertiesFormat_expressRouteCircuitPeering::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpressRouteCircuitConnectionPropertiesFormat_expressRouteCircuitPeering::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
