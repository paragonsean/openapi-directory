/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPeerExpressRouteCircuitConnectionsApi_H
#define OAI_OAIPeerExpressRouteCircuitConnectionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPeerExpressRouteCircuitConnection.h"
#include "OAIPeerExpressRouteCircuitConnectionListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPeerExpressRouteCircuitConnectionsApi : public QObject {
    Q_OBJECT

public:
    OAIPeerExpressRouteCircuitConnectionsApi(const int timeOut = 0);
    ~OAIPeerExpressRouteCircuitConnectionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  circuit_name QString [required]
    * @param[in]  peering_name QString [required]
    * @param[in]  connection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void peerExpressRouteCircuitConnectionsGet(const QString &resource_group_name, const QString &circuit_name, const QString &peering_name, const QString &connection_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  circuit_name QString [required]
    * @param[in]  peering_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void peerExpressRouteCircuitConnectionsList(const QString &resource_group_name, const QString &circuit_name, const QString &peering_name, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void peerExpressRouteCircuitConnectionsGetCallback(OAIHttpRequestWorker *worker);
    void peerExpressRouteCircuitConnectionsListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void peerExpressRouteCircuitConnectionsGetSignal(OAIPeerExpressRouteCircuitConnection summary);
    void peerExpressRouteCircuitConnectionsListSignal(OAIPeerExpressRouteCircuitConnectionListResult summary);


    void peerExpressRouteCircuitConnectionsGetSignalFull(OAIHttpRequestWorker *worker, OAIPeerExpressRouteCircuitConnection summary);
    void peerExpressRouteCircuitConnectionsListSignalFull(OAIHttpRequestWorker *worker, OAIPeerExpressRouteCircuitConnectionListResult summary);

    Q_DECL_DEPRECATED_X("Use peerExpressRouteCircuitConnectionsGetSignalError() instead")
    void peerExpressRouteCircuitConnectionsGetSignalE(OAIPeerExpressRouteCircuitConnection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void peerExpressRouteCircuitConnectionsGetSignalError(OAIPeerExpressRouteCircuitConnection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use peerExpressRouteCircuitConnectionsListSignalError() instead")
    void peerExpressRouteCircuitConnectionsListSignalE(OAIPeerExpressRouteCircuitConnectionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void peerExpressRouteCircuitConnectionsListSignalError(OAIPeerExpressRouteCircuitConnectionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use peerExpressRouteCircuitConnectionsGetSignalErrorFull() instead")
    void peerExpressRouteCircuitConnectionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void peerExpressRouteCircuitConnectionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use peerExpressRouteCircuitConnectionsListSignalErrorFull() instead")
    void peerExpressRouteCircuitConnectionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void peerExpressRouteCircuitConnectionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
