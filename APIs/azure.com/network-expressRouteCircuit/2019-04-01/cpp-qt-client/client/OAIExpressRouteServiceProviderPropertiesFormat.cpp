/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpressRouteServiceProviderPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpressRouteServiceProviderPropertiesFormat::OAIExpressRouteServiceProviderPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpressRouteServiceProviderPropertiesFormat::OAIExpressRouteServiceProviderPropertiesFormat() {
    this->initializeModel();
}

OAIExpressRouteServiceProviderPropertiesFormat::~OAIExpressRouteServiceProviderPropertiesFormat() {}

void OAIExpressRouteServiceProviderPropertiesFormat::initializeModel() {

    m_bandwidths_offered_isSet = false;
    m_bandwidths_offered_isValid = false;

    m_peering_locations_isSet = false;
    m_peering_locations_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIExpressRouteServiceProviderPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpressRouteServiceProviderPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_bandwidths_offered_isValid = ::OpenAPI::fromJsonValue(m_bandwidths_offered, json[QString("bandwidthsOffered")]);
    m_bandwidths_offered_isSet = !json[QString("bandwidthsOffered")].isNull() && m_bandwidths_offered_isValid;

    m_peering_locations_isValid = ::OpenAPI::fromJsonValue(m_peering_locations, json[QString("peeringLocations")]);
    m_peering_locations_isSet = !json[QString("peeringLocations")].isNull() && m_peering_locations_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIExpressRouteServiceProviderPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpressRouteServiceProviderPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_bandwidths_offered.size() > 0) {
        obj.insert(QString("bandwidthsOffered"), ::OpenAPI::toJsonValue(m_bandwidths_offered));
    }
    if (m_peering_locations.size() > 0) {
        obj.insert(QString("peeringLocations"), ::OpenAPI::toJsonValue(m_peering_locations));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

QList<OAIExpressRouteServiceProviderBandwidthsOffered> OAIExpressRouteServiceProviderPropertiesFormat::getBandwidthsOffered() const {
    return m_bandwidths_offered;
}
void OAIExpressRouteServiceProviderPropertiesFormat::setBandwidthsOffered(const QList<OAIExpressRouteServiceProviderBandwidthsOffered> &bandwidths_offered) {
    m_bandwidths_offered = bandwidths_offered;
    m_bandwidths_offered_isSet = true;
}

bool OAIExpressRouteServiceProviderPropertiesFormat::is_bandwidths_offered_Set() const{
    return m_bandwidths_offered_isSet;
}

bool OAIExpressRouteServiceProviderPropertiesFormat::is_bandwidths_offered_Valid() const{
    return m_bandwidths_offered_isValid;
}

QList<QString> OAIExpressRouteServiceProviderPropertiesFormat::getPeeringLocations() const {
    return m_peering_locations;
}
void OAIExpressRouteServiceProviderPropertiesFormat::setPeeringLocations(const QList<QString> &peering_locations) {
    m_peering_locations = peering_locations;
    m_peering_locations_isSet = true;
}

bool OAIExpressRouteServiceProviderPropertiesFormat::is_peering_locations_Set() const{
    return m_peering_locations_isSet;
}

bool OAIExpressRouteServiceProviderPropertiesFormat::is_peering_locations_Valid() const{
    return m_peering_locations_isValid;
}

QString OAIExpressRouteServiceProviderPropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIExpressRouteServiceProviderPropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIExpressRouteServiceProviderPropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIExpressRouteServiceProviderPropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIExpressRouteServiceProviderPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bandwidths_offered.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_peering_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpressRouteServiceProviderPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
