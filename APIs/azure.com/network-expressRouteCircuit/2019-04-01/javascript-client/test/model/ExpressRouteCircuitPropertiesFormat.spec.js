/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NetworkManagementClient);
  }
}(this, function(expect, NetworkManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NetworkManagementClient.ExpressRouteCircuitPropertiesFormat();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ExpressRouteCircuitPropertiesFormat', function() {
    it('should create an instance of ExpressRouteCircuitPropertiesFormat', function() {
      // uncomment below and update the code to test ExpressRouteCircuitPropertiesFormat
      //var instance = new NetworkManagementClient.ExpressRouteCircuitPropertiesFormat();
      //expect(instance).to.be.a(NetworkManagementClient.ExpressRouteCircuitPropertiesFormat);
    });

    it('should have the property allowClassicOperations (base name: "allowClassicOperations")', function() {
      // uncomment below and update the code to test the property allowClassicOperations
      //var instance = new NetworkManagementClient.ExpressRouteCircuitPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property authorizations (base name: "authorizations")', function() {
      // uncomment below and update the code to test the property authorizations
      //var instance = new NetworkManagementClient.ExpressRouteCircuitPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property bandwidthInGbps (base name: "bandwidthInGbps")', function() {
      // uncomment below and update the code to test the property bandwidthInGbps
      //var instance = new NetworkManagementClient.ExpressRouteCircuitPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property circuitProvisioningState (base name: "circuitProvisioningState")', function() {
      // uncomment below and update the code to test the property circuitProvisioningState
      //var instance = new NetworkManagementClient.ExpressRouteCircuitPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property expressRoutePort (base name: "expressRoutePort")', function() {
      // uncomment below and update the code to test the property expressRoutePort
      //var instance = new NetworkManagementClient.ExpressRouteCircuitPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property gatewayManagerEtag (base name: "gatewayManagerEtag")', function() {
      // uncomment below and update the code to test the property gatewayManagerEtag
      //var instance = new NetworkManagementClient.ExpressRouteCircuitPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property globalReachEnabled (base name: "globalReachEnabled")', function() {
      // uncomment below and update the code to test the property globalReachEnabled
      //var instance = new NetworkManagementClient.ExpressRouteCircuitPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property peerings (base name: "peerings")', function() {
      // uncomment below and update the code to test the property peerings
      //var instance = new NetworkManagementClient.ExpressRouteCircuitPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property provisioningState (base name: "provisioningState")', function() {
      // uncomment below and update the code to test the property provisioningState
      //var instance = new NetworkManagementClient.ExpressRouteCircuitPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property serviceKey (base name: "serviceKey")', function() {
      // uncomment below and update the code to test the property serviceKey
      //var instance = new NetworkManagementClient.ExpressRouteCircuitPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property serviceProviderNotes (base name: "serviceProviderNotes")', function() {
      // uncomment below and update the code to test the property serviceProviderNotes
      //var instance = new NetworkManagementClient.ExpressRouteCircuitPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property serviceProviderProperties (base name: "serviceProviderProperties")', function() {
      // uncomment below and update the code to test the property serviceProviderProperties
      //var instance = new NetworkManagementClient.ExpressRouteCircuitPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property serviceProviderProvisioningState (base name: "serviceProviderProvisioningState")', function() {
      // uncomment below and update the code to test the property serviceProviderProvisioningState
      //var instance = new NetworkManagementClient.ExpressRouteCircuitPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property stag (base name: "stag")', function() {
      // uncomment below and update the code to test the property stag
      //var instance = new NetworkManagementClient.ExpressRouteCircuitPropertiesFormat();
      //expect(instance).to.be();
    });

  });

}));
