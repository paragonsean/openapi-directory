/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExpressRouteCircuitConnection from './ExpressRouteCircuitConnection';
import ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering from './ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering';
import ExpressRouteCircuitPeeringConfig from './ExpressRouteCircuitPeeringConfig';
import ExpressRouteCircuitPeeringPropertiesFormatExpressRouteConnection from './ExpressRouteCircuitPeeringPropertiesFormatExpressRouteConnection';
import ExpressRouteCircuitStats from './ExpressRouteCircuitStats';
import ExpressRoutePeeringState from './ExpressRoutePeeringState';
import ExpressRoutePeeringType from './ExpressRoutePeeringType';
import Ipv6ExpressRouteCircuitPeeringConfig from './Ipv6ExpressRouteCircuitPeeringConfig';
import PeerExpressRouteCircuitConnection from './PeerExpressRouteCircuitConnection';

/**
 * The ExpressRouteCircuitPeeringPropertiesFormat model module.
 * @module model/ExpressRouteCircuitPeeringPropertiesFormat
 * @version 2019-07-01
 */
class ExpressRouteCircuitPeeringPropertiesFormat {
    /**
     * Constructs a new <code>ExpressRouteCircuitPeeringPropertiesFormat</code>.
     * Properties of the express route circuit peering.
     * @alias module:model/ExpressRouteCircuitPeeringPropertiesFormat
     */
    constructor() { 
        
        ExpressRouteCircuitPeeringPropertiesFormat.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExpressRouteCircuitPeeringPropertiesFormat</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExpressRouteCircuitPeeringPropertiesFormat} obj Optional instance to populate.
     * @return {module:model/ExpressRouteCircuitPeeringPropertiesFormat} The populated <code>ExpressRouteCircuitPeeringPropertiesFormat</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExpressRouteCircuitPeeringPropertiesFormat();

            if (data.hasOwnProperty('azureASN')) {
                obj['azureASN'] = ApiClient.convertToType(data['azureASN'], 'Number');
            }
            if (data.hasOwnProperty('connections')) {
                obj['connections'] = ApiClient.convertToType(data['connections'], [ExpressRouteCircuitConnection]);
            }
            if (data.hasOwnProperty('expressRouteConnection')) {
                obj['expressRouteConnection'] = ExpressRouteCircuitPeeringPropertiesFormatExpressRouteConnection.constructFromObject(data['expressRouteConnection']);
            }
            if (data.hasOwnProperty('gatewayManagerEtag')) {
                obj['gatewayManagerEtag'] = ApiClient.convertToType(data['gatewayManagerEtag'], 'String');
            }
            if (data.hasOwnProperty('ipv6PeeringConfig')) {
                obj['ipv6PeeringConfig'] = Ipv6ExpressRouteCircuitPeeringConfig.constructFromObject(data['ipv6PeeringConfig']);
            }
            if (data.hasOwnProperty('lastModifiedBy')) {
                obj['lastModifiedBy'] = ApiClient.convertToType(data['lastModifiedBy'], 'String');
            }
            if (data.hasOwnProperty('microsoftPeeringConfig')) {
                obj['microsoftPeeringConfig'] = ExpressRouteCircuitPeeringConfig.constructFromObject(data['microsoftPeeringConfig']);
            }
            if (data.hasOwnProperty('peerASN')) {
                obj['peerASN'] = ApiClient.convertToType(data['peerASN'], 'Number');
            }
            if (data.hasOwnProperty('peeredConnections')) {
                obj['peeredConnections'] = ApiClient.convertToType(data['peeredConnections'], [PeerExpressRouteCircuitConnection]);
            }
            if (data.hasOwnProperty('peeringType')) {
                obj['peeringType'] = ExpressRoutePeeringType.constructFromObject(data['peeringType']);
            }
            if (data.hasOwnProperty('primaryAzurePort')) {
                obj['primaryAzurePort'] = ApiClient.convertToType(data['primaryAzurePort'], 'String');
            }
            if (data.hasOwnProperty('primaryPeerAddressPrefix')) {
                obj['primaryPeerAddressPrefix'] = ApiClient.convertToType(data['primaryPeerAddressPrefix'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('routeFilter')) {
                obj['routeFilter'] = ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering.constructFromObject(data['routeFilter']);
            }
            if (data.hasOwnProperty('secondaryAzurePort')) {
                obj['secondaryAzurePort'] = ApiClient.convertToType(data['secondaryAzurePort'], 'String');
            }
            if (data.hasOwnProperty('secondaryPeerAddressPrefix')) {
                obj['secondaryPeerAddressPrefix'] = ApiClient.convertToType(data['secondaryPeerAddressPrefix'], 'String');
            }
            if (data.hasOwnProperty('sharedKey')) {
                obj['sharedKey'] = ApiClient.convertToType(data['sharedKey'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ExpressRoutePeeringState.constructFromObject(data['state']);
            }
            if (data.hasOwnProperty('stats')) {
                obj['stats'] = ExpressRouteCircuitStats.constructFromObject(data['stats']);
            }
            if (data.hasOwnProperty('vlanId')) {
                obj['vlanId'] = ApiClient.convertToType(data['vlanId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExpressRouteCircuitPeeringPropertiesFormat</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExpressRouteCircuitPeeringPropertiesFormat</code>.
     */
    static validateJSON(data) {
        if (data['connections']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['connections'])) {
                throw new Error("Expected the field `connections` to be an array in the JSON data but got " + data['connections']);
            }
            // validate the optional field `connections` (array)
            for (const item of data['connections']) {
                ExpressRouteCircuitConnection.validateJSON(item);
            };
        }
        // validate the optional field `expressRouteConnection`
        if (data['expressRouteConnection']) { // data not null
          ExpressRouteCircuitPeeringPropertiesFormatExpressRouteConnection.validateJSON(data['expressRouteConnection']);
        }
        // ensure the json data is a string
        if (data['gatewayManagerEtag'] && !(typeof data['gatewayManagerEtag'] === 'string' || data['gatewayManagerEtag'] instanceof String)) {
            throw new Error("Expected the field `gatewayManagerEtag` to be a primitive type in the JSON string but got " + data['gatewayManagerEtag']);
        }
        // validate the optional field `ipv6PeeringConfig`
        if (data['ipv6PeeringConfig']) { // data not null
          Ipv6ExpressRouteCircuitPeeringConfig.validateJSON(data['ipv6PeeringConfig']);
        }
        // ensure the json data is a string
        if (data['lastModifiedBy'] && !(typeof data['lastModifiedBy'] === 'string' || data['lastModifiedBy'] instanceof String)) {
            throw new Error("Expected the field `lastModifiedBy` to be a primitive type in the JSON string but got " + data['lastModifiedBy']);
        }
        // validate the optional field `microsoftPeeringConfig`
        if (data['microsoftPeeringConfig']) { // data not null
          ExpressRouteCircuitPeeringConfig.validateJSON(data['microsoftPeeringConfig']);
        }
        if (data['peeredConnections']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['peeredConnections'])) {
                throw new Error("Expected the field `peeredConnections` to be an array in the JSON data but got " + data['peeredConnections']);
            }
            // validate the optional field `peeredConnections` (array)
            for (const item of data['peeredConnections']) {
                PeerExpressRouteCircuitConnection.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['primaryAzurePort'] && !(typeof data['primaryAzurePort'] === 'string' || data['primaryAzurePort'] instanceof String)) {
            throw new Error("Expected the field `primaryAzurePort` to be a primitive type in the JSON string but got " + data['primaryAzurePort']);
        }
        // ensure the json data is a string
        if (data['primaryPeerAddressPrefix'] && !(typeof data['primaryPeerAddressPrefix'] === 'string' || data['primaryPeerAddressPrefix'] instanceof String)) {
            throw new Error("Expected the field `primaryPeerAddressPrefix` to be a primitive type in the JSON string but got " + data['primaryPeerAddressPrefix']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // validate the optional field `routeFilter`
        if (data['routeFilter']) { // data not null
          ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering.validateJSON(data['routeFilter']);
        }
        // ensure the json data is a string
        if (data['secondaryAzurePort'] && !(typeof data['secondaryAzurePort'] === 'string' || data['secondaryAzurePort'] instanceof String)) {
            throw new Error("Expected the field `secondaryAzurePort` to be a primitive type in the JSON string but got " + data['secondaryAzurePort']);
        }
        // ensure the json data is a string
        if (data['secondaryPeerAddressPrefix'] && !(typeof data['secondaryPeerAddressPrefix'] === 'string' || data['secondaryPeerAddressPrefix'] instanceof String)) {
            throw new Error("Expected the field `secondaryPeerAddressPrefix` to be a primitive type in the JSON string but got " + data['secondaryPeerAddressPrefix']);
        }
        // ensure the json data is a string
        if (data['sharedKey'] && !(typeof data['sharedKey'] === 'string' || data['sharedKey'] instanceof String)) {
            throw new Error("Expected the field `sharedKey` to be a primitive type in the JSON string but got " + data['sharedKey']);
        }
        // validate the optional field `stats`
        if (data['stats']) { // data not null
          ExpressRouteCircuitStats.validateJSON(data['stats']);
        }

        return true;
    }


}



/**
 * The Azure ASN.
 * @member {Number} azureASN
 */
ExpressRouteCircuitPeeringPropertiesFormat.prototype['azureASN'] = undefined;

/**
 * The list of circuit connections associated with Azure Private Peering for this circuit.
 * @member {Array.<module:model/ExpressRouteCircuitConnection>} connections
 */
ExpressRouteCircuitPeeringPropertiesFormat.prototype['connections'] = undefined;

/**
 * @member {module:model/ExpressRouteCircuitPeeringPropertiesFormatExpressRouteConnection} expressRouteConnection
 */
ExpressRouteCircuitPeeringPropertiesFormat.prototype['expressRouteConnection'] = undefined;

/**
 * The GatewayManager Etag.
 * @member {String} gatewayManagerEtag
 */
ExpressRouteCircuitPeeringPropertiesFormat.prototype['gatewayManagerEtag'] = undefined;

/**
 * @member {module:model/Ipv6ExpressRouteCircuitPeeringConfig} ipv6PeeringConfig
 */
ExpressRouteCircuitPeeringPropertiesFormat.prototype['ipv6PeeringConfig'] = undefined;

/**
 * Who was the last to modify the peering.
 * @member {String} lastModifiedBy
 */
ExpressRouteCircuitPeeringPropertiesFormat.prototype['lastModifiedBy'] = undefined;

/**
 * @member {module:model/ExpressRouteCircuitPeeringConfig} microsoftPeeringConfig
 */
ExpressRouteCircuitPeeringPropertiesFormat.prototype['microsoftPeeringConfig'] = undefined;

/**
 * The peer ASN.
 * @member {Number} peerASN
 */
ExpressRouteCircuitPeeringPropertiesFormat.prototype['peerASN'] = undefined;

/**
 * The list of peered circuit connections associated with Azure Private Peering for this circuit.
 * @member {Array.<module:model/PeerExpressRouteCircuitConnection>} peeredConnections
 */
ExpressRouteCircuitPeeringPropertiesFormat.prototype['peeredConnections'] = undefined;

/**
 * @member {module:model/ExpressRoutePeeringType} peeringType
 */
ExpressRouteCircuitPeeringPropertiesFormat.prototype['peeringType'] = undefined;

/**
 * The primary port.
 * @member {String} primaryAzurePort
 */
ExpressRouteCircuitPeeringPropertiesFormat.prototype['primaryAzurePort'] = undefined;

/**
 * The primary address prefix.
 * @member {String} primaryPeerAddressPrefix
 */
ExpressRouteCircuitPeeringPropertiesFormat.prototype['primaryPeerAddressPrefix'] = undefined;

/**
 * The current provisioning state.
 * @member {module:model/ExpressRouteCircuitPeeringPropertiesFormat.ProvisioningStateEnum} provisioningState
 */
ExpressRouteCircuitPeeringPropertiesFormat.prototype['provisioningState'] = undefined;

/**
 * @member {module:model/ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering} routeFilter
 */
ExpressRouteCircuitPeeringPropertiesFormat.prototype['routeFilter'] = undefined;

/**
 * The secondary port.
 * @member {String} secondaryAzurePort
 */
ExpressRouteCircuitPeeringPropertiesFormat.prototype['secondaryAzurePort'] = undefined;

/**
 * The secondary address prefix.
 * @member {String} secondaryPeerAddressPrefix
 */
ExpressRouteCircuitPeeringPropertiesFormat.prototype['secondaryPeerAddressPrefix'] = undefined;

/**
 * The shared key.
 * @member {String} sharedKey
 */
ExpressRouteCircuitPeeringPropertiesFormat.prototype['sharedKey'] = undefined;

/**
 * @member {module:model/ExpressRoutePeeringState} state
 */
ExpressRouteCircuitPeeringPropertiesFormat.prototype['state'] = undefined;

/**
 * @member {module:model/ExpressRouteCircuitStats} stats
 */
ExpressRouteCircuitPeeringPropertiesFormat.prototype['stats'] = undefined;

/**
 * The VLAN ID.
 * @member {Number} vlanId
 */
ExpressRouteCircuitPeeringPropertiesFormat.prototype['vlanId'] = undefined;





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
ExpressRouteCircuitPeeringPropertiesFormat['ProvisioningStateEnum'] = {

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed"
};



export default ExpressRouteCircuitPeeringPropertiesFormat;

