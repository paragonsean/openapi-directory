/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ExpressRouteCircuitPeering;
import org.openapitools.client.model.ExpressRouteCircuitPeeringListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExpressRouteCircuitPeeringsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExpressRouteCircuitPeeringsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExpressRouteCircuitPeeringsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for expressRouteCircuitPeeringsCreateOrUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the express route circuit. (required)
     * @param peeringName The name of the peering. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param peeringParameters Parameters supplied to the create or update express route circuit peering operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ExpressRouteCircuitPeering resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting ExpressRouteCircuitPeering resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteCircuitPeeringsCreateOrUpdateCall(String resourceGroupName, String circuitName, String peeringName, String apiVersion, String subscriptionId, ExpressRouteCircuitPeering peeringParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = peeringParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "circuitName" + "}", localVarApiClient.escapeString(circuitName.toString()))
            .replace("{" + "peeringName" + "}", localVarApiClient.escapeString(peeringName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expressRouteCircuitPeeringsCreateOrUpdateValidateBeforeCall(String resourceGroupName, String circuitName, String peeringName, String apiVersion, String subscriptionId, ExpressRouteCircuitPeering peeringParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling expressRouteCircuitPeeringsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'circuitName' is set
        if (circuitName == null) {
            throw new ApiException("Missing the required parameter 'circuitName' when calling expressRouteCircuitPeeringsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'peeringName' is set
        if (peeringName == null) {
            throw new ApiException("Missing the required parameter 'peeringName' when calling expressRouteCircuitPeeringsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling expressRouteCircuitPeeringsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling expressRouteCircuitPeeringsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'peeringParameters' is set
        if (peeringParameters == null) {
            throw new ApiException("Missing the required parameter 'peeringParameters' when calling expressRouteCircuitPeeringsCreateOrUpdate(Async)");
        }

        return expressRouteCircuitPeeringsCreateOrUpdateCall(resourceGroupName, circuitName, peeringName, apiVersion, subscriptionId, peeringParameters, _callback);

    }

    /**
     * 
     * Creates or updates a peering in the specified express route circuits.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the express route circuit. (required)
     * @param peeringName The name of the peering. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param peeringParameters Parameters supplied to the create or update express route circuit peering operation. (required)
     * @return ExpressRouteCircuitPeering
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ExpressRouteCircuitPeering resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting ExpressRouteCircuitPeering resource. </td><td>  -  </td></tr>
     </table>
     */
    public ExpressRouteCircuitPeering expressRouteCircuitPeeringsCreateOrUpdate(String resourceGroupName, String circuitName, String peeringName, String apiVersion, String subscriptionId, ExpressRouteCircuitPeering peeringParameters) throws ApiException {
        ApiResponse<ExpressRouteCircuitPeering> localVarResp = expressRouteCircuitPeeringsCreateOrUpdateWithHttpInfo(resourceGroupName, circuitName, peeringName, apiVersion, subscriptionId, peeringParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a peering in the specified express route circuits.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the express route circuit. (required)
     * @param peeringName The name of the peering. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param peeringParameters Parameters supplied to the create or update express route circuit peering operation. (required)
     * @return ApiResponse&lt;ExpressRouteCircuitPeering&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ExpressRouteCircuitPeering resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting ExpressRouteCircuitPeering resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpressRouteCircuitPeering> expressRouteCircuitPeeringsCreateOrUpdateWithHttpInfo(String resourceGroupName, String circuitName, String peeringName, String apiVersion, String subscriptionId, ExpressRouteCircuitPeering peeringParameters) throws ApiException {
        okhttp3.Call localVarCall = expressRouteCircuitPeeringsCreateOrUpdateValidateBeforeCall(resourceGroupName, circuitName, peeringName, apiVersion, subscriptionId, peeringParameters, null);
        Type localVarReturnType = new TypeToken<ExpressRouteCircuitPeering>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a peering in the specified express route circuits.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the express route circuit. (required)
     * @param peeringName The name of the peering. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param peeringParameters Parameters supplied to the create or update express route circuit peering operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ExpressRouteCircuitPeering resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting ExpressRouteCircuitPeering resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteCircuitPeeringsCreateOrUpdateAsync(String resourceGroupName, String circuitName, String peeringName, String apiVersion, String subscriptionId, ExpressRouteCircuitPeering peeringParameters, final ApiCallback<ExpressRouteCircuitPeering> _callback) throws ApiException {

        okhttp3.Call localVarCall = expressRouteCircuitPeeringsCreateOrUpdateValidateBeforeCall(resourceGroupName, circuitName, peeringName, apiVersion, subscriptionId, peeringParameters, _callback);
        Type localVarReturnType = new TypeToken<ExpressRouteCircuitPeering>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expressRouteCircuitPeeringsDelete
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the express route circuit. (required)
     * @param peeringName The name of the peering. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteCircuitPeeringsDeleteCall(String resourceGroupName, String circuitName, String peeringName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "circuitName" + "}", localVarApiClient.escapeString(circuitName.toString()))
            .replace("{" + "peeringName" + "}", localVarApiClient.escapeString(peeringName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expressRouteCircuitPeeringsDeleteValidateBeforeCall(String resourceGroupName, String circuitName, String peeringName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling expressRouteCircuitPeeringsDelete(Async)");
        }

        // verify the required parameter 'circuitName' is set
        if (circuitName == null) {
            throw new ApiException("Missing the required parameter 'circuitName' when calling expressRouteCircuitPeeringsDelete(Async)");
        }

        // verify the required parameter 'peeringName' is set
        if (peeringName == null) {
            throw new ApiException("Missing the required parameter 'peeringName' when calling expressRouteCircuitPeeringsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling expressRouteCircuitPeeringsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling expressRouteCircuitPeeringsDelete(Async)");
        }

        return expressRouteCircuitPeeringsDeleteCall(resourceGroupName, circuitName, peeringName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes the specified peering from the specified express route circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the express route circuit. (required)
     * @param peeringName The name of the peering. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
     </table>
     */
    public void expressRouteCircuitPeeringsDelete(String resourceGroupName, String circuitName, String peeringName, String apiVersion, String subscriptionId) throws ApiException {
        expressRouteCircuitPeeringsDeleteWithHttpInfo(resourceGroupName, circuitName, peeringName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes the specified peering from the specified express route circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the express route circuit. (required)
     * @param peeringName The name of the peering. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> expressRouteCircuitPeeringsDeleteWithHttpInfo(String resourceGroupName, String circuitName, String peeringName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = expressRouteCircuitPeeringsDeleteValidateBeforeCall(resourceGroupName, circuitName, peeringName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified peering from the specified express route circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the express route circuit. (required)
     * @param peeringName The name of the peering. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteCircuitPeeringsDeleteAsync(String resourceGroupName, String circuitName, String peeringName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = expressRouteCircuitPeeringsDeleteValidateBeforeCall(resourceGroupName, circuitName, peeringName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for expressRouteCircuitPeeringsGet
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the express route circuit. (required)
     * @param peeringName The name of the peering. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting ExpressRouteCircuitPeering resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteCircuitPeeringsGetCall(String resourceGroupName, String circuitName, String peeringName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "circuitName" + "}", localVarApiClient.escapeString(circuitName.toString()))
            .replace("{" + "peeringName" + "}", localVarApiClient.escapeString(peeringName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expressRouteCircuitPeeringsGetValidateBeforeCall(String resourceGroupName, String circuitName, String peeringName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling expressRouteCircuitPeeringsGet(Async)");
        }

        // verify the required parameter 'circuitName' is set
        if (circuitName == null) {
            throw new ApiException("Missing the required parameter 'circuitName' when calling expressRouteCircuitPeeringsGet(Async)");
        }

        // verify the required parameter 'peeringName' is set
        if (peeringName == null) {
            throw new ApiException("Missing the required parameter 'peeringName' when calling expressRouteCircuitPeeringsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling expressRouteCircuitPeeringsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling expressRouteCircuitPeeringsGet(Async)");
        }

        return expressRouteCircuitPeeringsGetCall(resourceGroupName, circuitName, peeringName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets the specified peering for the express route circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the express route circuit. (required)
     * @param peeringName The name of the peering. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ExpressRouteCircuitPeering
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting ExpressRouteCircuitPeering resource. </td><td>  -  </td></tr>
     </table>
     */
    public ExpressRouteCircuitPeering expressRouteCircuitPeeringsGet(String resourceGroupName, String circuitName, String peeringName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ExpressRouteCircuitPeering> localVarResp = expressRouteCircuitPeeringsGetWithHttpInfo(resourceGroupName, circuitName, peeringName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the specified peering for the express route circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the express route circuit. (required)
     * @param peeringName The name of the peering. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;ExpressRouteCircuitPeering&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting ExpressRouteCircuitPeering resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpressRouteCircuitPeering> expressRouteCircuitPeeringsGetWithHttpInfo(String resourceGroupName, String circuitName, String peeringName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = expressRouteCircuitPeeringsGetValidateBeforeCall(resourceGroupName, circuitName, peeringName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ExpressRouteCircuitPeering>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the specified peering for the express route circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the express route circuit. (required)
     * @param peeringName The name of the peering. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting ExpressRouteCircuitPeering resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteCircuitPeeringsGetAsync(String resourceGroupName, String circuitName, String peeringName, String apiVersion, String subscriptionId, final ApiCallback<ExpressRouteCircuitPeering> _callback) throws ApiException {

        okhttp3.Call localVarCall = expressRouteCircuitPeeringsGetValidateBeforeCall(resourceGroupName, circuitName, peeringName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ExpressRouteCircuitPeering>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expressRouteCircuitPeeringsList
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the express route circuit. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ExpressRouteCircuitPeering resources. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteCircuitPeeringsListCall(String resourceGroupName, String circuitName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "circuitName" + "}", localVarApiClient.escapeString(circuitName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expressRouteCircuitPeeringsListValidateBeforeCall(String resourceGroupName, String circuitName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling expressRouteCircuitPeeringsList(Async)");
        }

        // verify the required parameter 'circuitName' is set
        if (circuitName == null) {
            throw new ApiException("Missing the required parameter 'circuitName' when calling expressRouteCircuitPeeringsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling expressRouteCircuitPeeringsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling expressRouteCircuitPeeringsList(Async)");
        }

        return expressRouteCircuitPeeringsListCall(resourceGroupName, circuitName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets all peerings in a specified express route circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the express route circuit. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ExpressRouteCircuitPeeringListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ExpressRouteCircuitPeering resources. </td><td>  -  </td></tr>
     </table>
     */
    public ExpressRouteCircuitPeeringListResult expressRouteCircuitPeeringsList(String resourceGroupName, String circuitName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ExpressRouteCircuitPeeringListResult> localVarResp = expressRouteCircuitPeeringsListWithHttpInfo(resourceGroupName, circuitName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all peerings in a specified express route circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the express route circuit. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;ExpressRouteCircuitPeeringListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ExpressRouteCircuitPeering resources. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpressRouteCircuitPeeringListResult> expressRouteCircuitPeeringsListWithHttpInfo(String resourceGroupName, String circuitName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = expressRouteCircuitPeeringsListValidateBeforeCall(resourceGroupName, circuitName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ExpressRouteCircuitPeeringListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all peerings in a specified express route circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param circuitName The name of the express route circuit. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ExpressRouteCircuitPeering resources. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteCircuitPeeringsListAsync(String resourceGroupName, String circuitName, String apiVersion, String subscriptionId, final ApiCallback<ExpressRouteCircuitPeeringListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = expressRouteCircuitPeeringsListValidateBeforeCall(resourceGroupName, circuitName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ExpressRouteCircuitPeeringListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
