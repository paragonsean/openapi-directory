/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of ExpressRouteCircuitAuthorization.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:28:52.639097-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AuthorizationPropertiesFormat {
  public static final String SERIALIZED_NAME_AUTHORIZATION_KEY = "authorizationKey";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_KEY)
  private String authorizationKey;

  /**
   * The authorization use status.
   */
  @JsonAdapter(AuthorizationUseStatusEnum.Adapter.class)
  public enum AuthorizationUseStatusEnum {
    AVAILABLE("Available"),
    
    IN_USE("InUse");

    private String value;

    AuthorizationUseStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthorizationUseStatusEnum fromValue(String value) {
      for (AuthorizationUseStatusEnum b : AuthorizationUseStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthorizationUseStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthorizationUseStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthorizationUseStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthorizationUseStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthorizationUseStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTHORIZATION_USE_STATUS = "authorizationUseStatus";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_USE_STATUS)
  private AuthorizationUseStatusEnum authorizationUseStatus;

  /**
   * The current provisioning state.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    SUCCEEDED("Succeeded"),
    
    UPDATING("Updating"),
    
    DELETING("Deleting"),
    
    FAILED("Failed");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public AuthorizationPropertiesFormat() {
  }

  public AuthorizationPropertiesFormat(
     ProvisioningStateEnum provisioningState
  ) {
    this();
    this.provisioningState = provisioningState;
  }

  public AuthorizationPropertiesFormat authorizationKey(String authorizationKey) {
    this.authorizationKey = authorizationKey;
    return this;
  }

  /**
   * The authorization key.
   * @return authorizationKey
   */
  @javax.annotation.Nullable
  public String getAuthorizationKey() {
    return authorizationKey;
  }

  public void setAuthorizationKey(String authorizationKey) {
    this.authorizationKey = authorizationKey;
  }


  public AuthorizationPropertiesFormat authorizationUseStatus(AuthorizationUseStatusEnum authorizationUseStatus) {
    this.authorizationUseStatus = authorizationUseStatus;
    return this;
  }

  /**
   * The authorization use status.
   * @return authorizationUseStatus
   */
  @javax.annotation.Nullable
  public AuthorizationUseStatusEnum getAuthorizationUseStatus() {
    return authorizationUseStatus;
  }

  public void setAuthorizationUseStatus(AuthorizationUseStatusEnum authorizationUseStatus) {
    this.authorizationUseStatus = authorizationUseStatus;
  }


  /**
   * The current provisioning state.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthorizationPropertiesFormat authorizationPropertiesFormat = (AuthorizationPropertiesFormat) o;
    return Objects.equals(this.authorizationKey, authorizationPropertiesFormat.authorizationKey) &&
        Objects.equals(this.authorizationUseStatus, authorizationPropertiesFormat.authorizationUseStatus) &&
        Objects.equals(this.provisioningState, authorizationPropertiesFormat.provisioningState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizationKey, authorizationUseStatus, provisioningState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthorizationPropertiesFormat {\n");
    sb.append("    authorizationKey: ").append(toIndentedString(authorizationKey)).append("\n");
    sb.append("    authorizationUseStatus: ").append(toIndentedString(authorizationUseStatus)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorizationKey");
    openapiFields.add("authorizationUseStatus");
    openapiFields.add("provisioningState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuthorizationPropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuthorizationPropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthorizationPropertiesFormat is not found in the empty JSON string", AuthorizationPropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuthorizationPropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuthorizationPropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authorizationKey") != null && !jsonObj.get("authorizationKey").isJsonNull()) && !jsonObj.get("authorizationKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizationKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizationKey").toString()));
      }
      if ((jsonObj.get("authorizationUseStatus") != null && !jsonObj.get("authorizationUseStatus").isJsonNull()) && !jsonObj.get("authorizationUseStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizationUseStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizationUseStatus").toString()));
      }
      // validate the optional field `authorizationUseStatus`
      if (jsonObj.get("authorizationUseStatus") != null && !jsonObj.get("authorizationUseStatus").isJsonNull()) {
        AuthorizationUseStatusEnum.validateJsonElement(jsonObj.get("authorizationUseStatus"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthorizationPropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthorizationPropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthorizationPropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthorizationPropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthorizationPropertiesFormat>() {
           @Override
           public void write(JsonWriter out, AuthorizationPropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthorizationPropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuthorizationPropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuthorizationPropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to AuthorizationPropertiesFormat
   */
  public static AuthorizationPropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthorizationPropertiesFormat.class);
  }

  /**
   * Convert an instance of AuthorizationPropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

