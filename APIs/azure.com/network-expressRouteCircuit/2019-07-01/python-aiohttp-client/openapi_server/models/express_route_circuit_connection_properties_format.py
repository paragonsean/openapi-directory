# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.circuit_connection_status import CircuitConnectionStatus
from openapi_server.models.express_route_circuit_connection_properties_format_express_route_circuit_peering import ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering
from openapi_server import util


class ExpressRouteCircuitConnectionPropertiesFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_prefix: str=None, authorization_key: str=None, circuit_connection_status: CircuitConnectionStatus=None, express_route_circuit_peering: ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering=None, peer_express_route_circuit_peering: ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering=None, provisioning_state: str=None):
        """ExpressRouteCircuitConnectionPropertiesFormat - a model defined in OpenAPI

        :param address_prefix: The address_prefix of this ExpressRouteCircuitConnectionPropertiesFormat.
        :param authorization_key: The authorization_key of this ExpressRouteCircuitConnectionPropertiesFormat.
        :param circuit_connection_status: The circuit_connection_status of this ExpressRouteCircuitConnectionPropertiesFormat.
        :param express_route_circuit_peering: The express_route_circuit_peering of this ExpressRouteCircuitConnectionPropertiesFormat.
        :param peer_express_route_circuit_peering: The peer_express_route_circuit_peering of this ExpressRouteCircuitConnectionPropertiesFormat.
        :param provisioning_state: The provisioning_state of this ExpressRouteCircuitConnectionPropertiesFormat.
        """
        self.openapi_types = {
            'address_prefix': str,
            'authorization_key': str,
            'circuit_connection_status': CircuitConnectionStatus,
            'express_route_circuit_peering': ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering,
            'peer_express_route_circuit_peering': ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering,
            'provisioning_state': str
        }

        self.attribute_map = {
            'address_prefix': 'addressPrefix',
            'authorization_key': 'authorizationKey',
            'circuit_connection_status': 'circuitConnectionStatus',
            'express_route_circuit_peering': 'expressRouteCircuitPeering',
            'peer_express_route_circuit_peering': 'peerExpressRouteCircuitPeering',
            'provisioning_state': 'provisioningState'
        }

        self._address_prefix = address_prefix
        self._authorization_key = authorization_key
        self._circuit_connection_status = circuit_connection_status
        self._express_route_circuit_peering = express_route_circuit_peering
        self._peer_express_route_circuit_peering = peer_express_route_circuit_peering
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExpressRouteCircuitConnectionPropertiesFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExpressRouteCircuitConnectionPropertiesFormat of this ExpressRouteCircuitConnectionPropertiesFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_prefix(self):
        """Gets the address_prefix of this ExpressRouteCircuitConnectionPropertiesFormat.

        /29 IP address space to carve out Customer addresses for tunnels.

        :return: The address_prefix of this ExpressRouteCircuitConnectionPropertiesFormat.
        :rtype: str
        """
        return self._address_prefix

    @address_prefix.setter
    def address_prefix(self, address_prefix):
        """Sets the address_prefix of this ExpressRouteCircuitConnectionPropertiesFormat.

        /29 IP address space to carve out Customer addresses for tunnels.

        :param address_prefix: The address_prefix of this ExpressRouteCircuitConnectionPropertiesFormat.
        :type address_prefix: str
        """

        self._address_prefix = address_prefix

    @property
    def authorization_key(self):
        """Gets the authorization_key of this ExpressRouteCircuitConnectionPropertiesFormat.

        The authorization key.

        :return: The authorization_key of this ExpressRouteCircuitConnectionPropertiesFormat.
        :rtype: str
        """
        return self._authorization_key

    @authorization_key.setter
    def authorization_key(self, authorization_key):
        """Sets the authorization_key of this ExpressRouteCircuitConnectionPropertiesFormat.

        The authorization key.

        :param authorization_key: The authorization_key of this ExpressRouteCircuitConnectionPropertiesFormat.
        :type authorization_key: str
        """

        self._authorization_key = authorization_key

    @property
    def circuit_connection_status(self):
        """Gets the circuit_connection_status of this ExpressRouteCircuitConnectionPropertiesFormat.


        :return: The circuit_connection_status of this ExpressRouteCircuitConnectionPropertiesFormat.
        :rtype: CircuitConnectionStatus
        """
        return self._circuit_connection_status

    @circuit_connection_status.setter
    def circuit_connection_status(self, circuit_connection_status):
        """Sets the circuit_connection_status of this ExpressRouteCircuitConnectionPropertiesFormat.


        :param circuit_connection_status: The circuit_connection_status of this ExpressRouteCircuitConnectionPropertiesFormat.
        :type circuit_connection_status: CircuitConnectionStatus
        """

        self._circuit_connection_status = circuit_connection_status

    @property
    def express_route_circuit_peering(self):
        """Gets the express_route_circuit_peering of this ExpressRouteCircuitConnectionPropertiesFormat.


        :return: The express_route_circuit_peering of this ExpressRouteCircuitConnectionPropertiesFormat.
        :rtype: ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering
        """
        return self._express_route_circuit_peering

    @express_route_circuit_peering.setter
    def express_route_circuit_peering(self, express_route_circuit_peering):
        """Sets the express_route_circuit_peering of this ExpressRouteCircuitConnectionPropertiesFormat.


        :param express_route_circuit_peering: The express_route_circuit_peering of this ExpressRouteCircuitConnectionPropertiesFormat.
        :type express_route_circuit_peering: ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering
        """

        self._express_route_circuit_peering = express_route_circuit_peering

    @property
    def peer_express_route_circuit_peering(self):
        """Gets the peer_express_route_circuit_peering of this ExpressRouteCircuitConnectionPropertiesFormat.


        :return: The peer_express_route_circuit_peering of this ExpressRouteCircuitConnectionPropertiesFormat.
        :rtype: ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering
        """
        return self._peer_express_route_circuit_peering

    @peer_express_route_circuit_peering.setter
    def peer_express_route_circuit_peering(self, peer_express_route_circuit_peering):
        """Sets the peer_express_route_circuit_peering of this ExpressRouteCircuitConnectionPropertiesFormat.


        :param peer_express_route_circuit_peering: The peer_express_route_circuit_peering of this ExpressRouteCircuitConnectionPropertiesFormat.
        :type peer_express_route_circuit_peering: ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering
        """

        self._peer_express_route_circuit_peering = peer_express_route_circuit_peering

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ExpressRouteCircuitConnectionPropertiesFormat.

        The current provisioning state.

        :return: The provisioning_state of this ExpressRouteCircuitConnectionPropertiesFormat.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ExpressRouteCircuitConnectionPropertiesFormat.

        The current provisioning state.

        :param provisioning_state: The provisioning_state of this ExpressRouteCircuitConnectionPropertiesFormat.
        :type provisioning_state: str
        """
        allowed_values = ["Succeeded", "Updating", "Deleting", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state
