/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPeerExpressRouteCircuitConnectionPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPeerExpressRouteCircuitConnectionPropertiesFormat::OAIPeerExpressRouteCircuitConnectionPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPeerExpressRouteCircuitConnectionPropertiesFormat::OAIPeerExpressRouteCircuitConnectionPropertiesFormat() {
    this->initializeModel();
}

OAIPeerExpressRouteCircuitConnectionPropertiesFormat::~OAIPeerExpressRouteCircuitConnectionPropertiesFormat() {}

void OAIPeerExpressRouteCircuitConnectionPropertiesFormat::initializeModel() {

    m_address_prefix_isSet = false;
    m_address_prefix_isValid = false;

    m_auth_resource_guid_isSet = false;
    m_auth_resource_guid_isValid = false;

    m_circuit_connection_status_isSet = false;
    m_circuit_connection_status_isValid = false;

    m_connection_name_isSet = false;
    m_connection_name_isValid = false;

    m_express_route_circuit_peering_isSet = false;
    m_express_route_circuit_peering_isValid = false;

    m_peer_express_route_circuit_peering_isSet = false;
    m_peer_express_route_circuit_peering_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIPeerExpressRouteCircuitConnectionPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPeerExpressRouteCircuitConnectionPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_address_prefix_isValid = ::OpenAPI::fromJsonValue(m_address_prefix, json[QString("addressPrefix")]);
    m_address_prefix_isSet = !json[QString("addressPrefix")].isNull() && m_address_prefix_isValid;

    m_auth_resource_guid_isValid = ::OpenAPI::fromJsonValue(m_auth_resource_guid, json[QString("authResourceGuid")]);
    m_auth_resource_guid_isSet = !json[QString("authResourceGuid")].isNull() && m_auth_resource_guid_isValid;

    m_circuit_connection_status_isValid = ::OpenAPI::fromJsonValue(m_circuit_connection_status, json[QString("circuitConnectionStatus")]);
    m_circuit_connection_status_isSet = !json[QString("circuitConnectionStatus")].isNull() && m_circuit_connection_status_isValid;

    m_connection_name_isValid = ::OpenAPI::fromJsonValue(m_connection_name, json[QString("connectionName")]);
    m_connection_name_isSet = !json[QString("connectionName")].isNull() && m_connection_name_isValid;

    m_express_route_circuit_peering_isValid = ::OpenAPI::fromJsonValue(m_express_route_circuit_peering, json[QString("expressRouteCircuitPeering")]);
    m_express_route_circuit_peering_isSet = !json[QString("expressRouteCircuitPeering")].isNull() && m_express_route_circuit_peering_isValid;

    m_peer_express_route_circuit_peering_isValid = ::OpenAPI::fromJsonValue(m_peer_express_route_circuit_peering, json[QString("peerExpressRouteCircuitPeering")]);
    m_peer_express_route_circuit_peering_isSet = !json[QString("peerExpressRouteCircuitPeering")].isNull() && m_peer_express_route_circuit_peering_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIPeerExpressRouteCircuitConnectionPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPeerExpressRouteCircuitConnectionPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_address_prefix_isSet) {
        obj.insert(QString("addressPrefix"), ::OpenAPI::toJsonValue(m_address_prefix));
    }
    if (m_auth_resource_guid_isSet) {
        obj.insert(QString("authResourceGuid"), ::OpenAPI::toJsonValue(m_auth_resource_guid));
    }
    if (m_circuit_connection_status.isSet()) {
        obj.insert(QString("circuitConnectionStatus"), ::OpenAPI::toJsonValue(m_circuit_connection_status));
    }
    if (m_connection_name_isSet) {
        obj.insert(QString("connectionName"), ::OpenAPI::toJsonValue(m_connection_name));
    }
    if (m_express_route_circuit_peering.isSet()) {
        obj.insert(QString("expressRouteCircuitPeering"), ::OpenAPI::toJsonValue(m_express_route_circuit_peering));
    }
    if (m_peer_express_route_circuit_peering.isSet()) {
        obj.insert(QString("peerExpressRouteCircuitPeering"), ::OpenAPI::toJsonValue(m_peer_express_route_circuit_peering));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

QString OAIPeerExpressRouteCircuitConnectionPropertiesFormat::getAddressPrefix() const {
    return m_address_prefix;
}
void OAIPeerExpressRouteCircuitConnectionPropertiesFormat::setAddressPrefix(const QString &address_prefix) {
    m_address_prefix = address_prefix;
    m_address_prefix_isSet = true;
}

bool OAIPeerExpressRouteCircuitConnectionPropertiesFormat::is_address_prefix_Set() const{
    return m_address_prefix_isSet;
}

bool OAIPeerExpressRouteCircuitConnectionPropertiesFormat::is_address_prefix_Valid() const{
    return m_address_prefix_isValid;
}

QString OAIPeerExpressRouteCircuitConnectionPropertiesFormat::getAuthResourceGuid() const {
    return m_auth_resource_guid;
}
void OAIPeerExpressRouteCircuitConnectionPropertiesFormat::setAuthResourceGuid(const QString &auth_resource_guid) {
    m_auth_resource_guid = auth_resource_guid;
    m_auth_resource_guid_isSet = true;
}

bool OAIPeerExpressRouteCircuitConnectionPropertiesFormat::is_auth_resource_guid_Set() const{
    return m_auth_resource_guid_isSet;
}

bool OAIPeerExpressRouteCircuitConnectionPropertiesFormat::is_auth_resource_guid_Valid() const{
    return m_auth_resource_guid_isValid;
}

OAICircuitConnectionStatus OAIPeerExpressRouteCircuitConnectionPropertiesFormat::getCircuitConnectionStatus() const {
    return m_circuit_connection_status;
}
void OAIPeerExpressRouteCircuitConnectionPropertiesFormat::setCircuitConnectionStatus(const OAICircuitConnectionStatus &circuit_connection_status) {
    m_circuit_connection_status = circuit_connection_status;
    m_circuit_connection_status_isSet = true;
}

bool OAIPeerExpressRouteCircuitConnectionPropertiesFormat::is_circuit_connection_status_Set() const{
    return m_circuit_connection_status_isSet;
}

bool OAIPeerExpressRouteCircuitConnectionPropertiesFormat::is_circuit_connection_status_Valid() const{
    return m_circuit_connection_status_isValid;
}

QString OAIPeerExpressRouteCircuitConnectionPropertiesFormat::getConnectionName() const {
    return m_connection_name;
}
void OAIPeerExpressRouteCircuitConnectionPropertiesFormat::setConnectionName(const QString &connection_name) {
    m_connection_name = connection_name;
    m_connection_name_isSet = true;
}

bool OAIPeerExpressRouteCircuitConnectionPropertiesFormat::is_connection_name_Set() const{
    return m_connection_name_isSet;
}

bool OAIPeerExpressRouteCircuitConnectionPropertiesFormat::is_connection_name_Valid() const{
    return m_connection_name_isValid;
}

OAIExpressRouteCircuitConnectionPropertiesFormat_expressRouteCircuitPeering OAIPeerExpressRouteCircuitConnectionPropertiesFormat::getExpressRouteCircuitPeering() const {
    return m_express_route_circuit_peering;
}
void OAIPeerExpressRouteCircuitConnectionPropertiesFormat::setExpressRouteCircuitPeering(const OAIExpressRouteCircuitConnectionPropertiesFormat_expressRouteCircuitPeering &express_route_circuit_peering) {
    m_express_route_circuit_peering = express_route_circuit_peering;
    m_express_route_circuit_peering_isSet = true;
}

bool OAIPeerExpressRouteCircuitConnectionPropertiesFormat::is_express_route_circuit_peering_Set() const{
    return m_express_route_circuit_peering_isSet;
}

bool OAIPeerExpressRouteCircuitConnectionPropertiesFormat::is_express_route_circuit_peering_Valid() const{
    return m_express_route_circuit_peering_isValid;
}

OAIExpressRouteCircuitConnectionPropertiesFormat_expressRouteCircuitPeering OAIPeerExpressRouteCircuitConnectionPropertiesFormat::getPeerExpressRouteCircuitPeering() const {
    return m_peer_express_route_circuit_peering;
}
void OAIPeerExpressRouteCircuitConnectionPropertiesFormat::setPeerExpressRouteCircuitPeering(const OAIExpressRouteCircuitConnectionPropertiesFormat_expressRouteCircuitPeering &peer_express_route_circuit_peering) {
    m_peer_express_route_circuit_peering = peer_express_route_circuit_peering;
    m_peer_express_route_circuit_peering_isSet = true;
}

bool OAIPeerExpressRouteCircuitConnectionPropertiesFormat::is_peer_express_route_circuit_peering_Set() const{
    return m_peer_express_route_circuit_peering_isSet;
}

bool OAIPeerExpressRouteCircuitConnectionPropertiesFormat::is_peer_express_route_circuit_peering_Valid() const{
    return m_peer_express_route_circuit_peering_isValid;
}

QString OAIPeerExpressRouteCircuitConnectionPropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIPeerExpressRouteCircuitConnectionPropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIPeerExpressRouteCircuitConnectionPropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIPeerExpressRouteCircuitConnectionPropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIPeerExpressRouteCircuitConnectionPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_resource_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_circuit_connection_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_express_route_circuit_peering.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_peer_express_route_circuit_peering.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPeerExpressRouteCircuitConnectionPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
