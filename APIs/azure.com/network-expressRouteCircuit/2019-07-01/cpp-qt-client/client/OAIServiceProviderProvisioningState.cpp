/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceProviderProvisioningState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceProviderProvisioningState::OAIServiceProviderProvisioningState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceProviderProvisioningState::OAIServiceProviderProvisioningState() {
    this->initializeModel();
}

OAIServiceProviderProvisioningState::~OAIServiceProviderProvisioningState() {}

void OAIServiceProviderProvisioningState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIServiceProviderProvisioningState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIServiceProviderProvisioningState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("NotProvisioned", Qt::CaseInsensitive) == 0) {
        m_value = eOAIServiceProviderProvisioningState::NOTPROVISIONED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Provisioning", Qt::CaseInsensitive) == 0) {
        m_value = eOAIServiceProviderProvisioningState::PROVISIONING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Provisioned", Qt::CaseInsensitive) == 0) {
        m_value = eOAIServiceProviderProvisioningState::PROVISIONED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Deprovisioning", Qt::CaseInsensitive) == 0) {
        m_value = eOAIServiceProviderProvisioningState::DEPROVISIONING;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIServiceProviderProvisioningState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIServiceProviderProvisioningState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIServiceProviderProvisioningState::NOTPROVISIONED:
            val = "NotProvisioned";
            break;
        case eOAIServiceProviderProvisioningState::PROVISIONING:
            val = "Provisioning";
            break;
        case eOAIServiceProviderProvisioningState::PROVISIONED:
            val = "Provisioned";
            break;
        case eOAIServiceProviderProvisioningState::DEPROVISIONING:
            val = "Deprovisioning";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIServiceProviderProvisioningState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIServiceProviderProvisioningState::eOAIServiceProviderProvisioningState OAIServiceProviderProvisioningState::getValue() const {
    return m_value;
}

void OAIServiceProviderProvisioningState::setValue(const OAIServiceProviderProvisioningState::eOAIServiceProviderProvisioningState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIServiceProviderProvisioningState::isSet() const {
    
    return m_value_isSet;
}

bool OAIServiceProviderProvisioningState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
