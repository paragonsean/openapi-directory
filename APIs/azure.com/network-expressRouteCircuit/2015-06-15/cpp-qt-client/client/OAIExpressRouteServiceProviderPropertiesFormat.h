/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2015-06-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIExpressRouteServiceProviderPropertiesFormat.h
 *
 * Properties of ExpressRouteServiceProvider.
 */

#ifndef OAIExpressRouteServiceProviderPropertiesFormat_H
#define OAIExpressRouteServiceProviderPropertiesFormat_H

#include <QJsonObject>

#include "OAIExpressRouteServiceProviderBandwidthsOffered.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIExpressRouteServiceProviderBandwidthsOffered;

class OAIExpressRouteServiceProviderPropertiesFormat : public OAIObject {
public:
    OAIExpressRouteServiceProviderPropertiesFormat();
    OAIExpressRouteServiceProviderPropertiesFormat(QString json);
    ~OAIExpressRouteServiceProviderPropertiesFormat() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIExpressRouteServiceProviderBandwidthsOffered> getBandwidthsOffered() const;
    void setBandwidthsOffered(const QList<OAIExpressRouteServiceProviderBandwidthsOffered> &bandwidths_offered);
    bool is_bandwidths_offered_Set() const;
    bool is_bandwidths_offered_Valid() const;

    QList<QString> getPeeringLocations() const;
    void setPeeringLocations(const QList<QString> &peering_locations);
    bool is_peering_locations_Set() const;
    bool is_peering_locations_Valid() const;

    QString getProvisioningState() const;
    void setProvisioningState(const QString &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIExpressRouteServiceProviderBandwidthsOffered> m_bandwidths_offered;
    bool m_bandwidths_offered_isSet;
    bool m_bandwidths_offered_isValid;

    QList<QString> m_peering_locations;
    bool m_peering_locations_isSet;
    bool m_peering_locations_isValid;

    QString m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIExpressRouteServiceProviderPropertiesFormat)

#endif // OAIExpressRouteServiceProviderPropertiesFormat_H
