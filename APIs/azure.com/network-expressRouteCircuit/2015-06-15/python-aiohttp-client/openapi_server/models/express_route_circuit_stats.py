# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExpressRouteCircuitStats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bytes_in: int=None, bytes_out: int=None):
        """ExpressRouteCircuitStats - a model defined in OpenAPI

        :param bytes_in: The bytes_in of this ExpressRouteCircuitStats.
        :param bytes_out: The bytes_out of this ExpressRouteCircuitStats.
        """
        self.openapi_types = {
            'bytes_in': int,
            'bytes_out': int
        }

        self.attribute_map = {
            'bytes_in': 'bytesIn',
            'bytes_out': 'bytesOut'
        }

        self._bytes_in = bytes_in
        self._bytes_out = bytes_out

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExpressRouteCircuitStats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExpressRouteCircuitStats of this ExpressRouteCircuitStats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bytes_in(self):
        """Gets the bytes_in of this ExpressRouteCircuitStats.

        Gets BytesIn of the peering.

        :return: The bytes_in of this ExpressRouteCircuitStats.
        :rtype: int
        """
        return self._bytes_in

    @bytes_in.setter
    def bytes_in(self, bytes_in):
        """Sets the bytes_in of this ExpressRouteCircuitStats.

        Gets BytesIn of the peering.

        :param bytes_in: The bytes_in of this ExpressRouteCircuitStats.
        :type bytes_in: int
        """

        self._bytes_in = bytes_in

    @property
    def bytes_out(self):
        """Gets the bytes_out of this ExpressRouteCircuitStats.

        Gets BytesOut of the peering.

        :return: The bytes_out of this ExpressRouteCircuitStats.
        :rtype: int
        """
        return self._bytes_out

    @bytes_out.setter
    def bytes_out(self, bytes_out):
        """Sets the bytes_out of this ExpressRouteCircuitStats.

        Gets BytesOut of the peering.

        :param bytes_out: The bytes_out of this ExpressRouteCircuitStats.
        :type bytes_out: int
        """

        self._bytes_out = bytes_out
