# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExpressRouteCircuitRoutesTable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_prefix: str=None, as_path: str=None, next_hop_ip: str=None, next_hop_type: str=None):
        """ExpressRouteCircuitRoutesTable - a model defined in OpenAPI

        :param address_prefix: The address_prefix of this ExpressRouteCircuitRoutesTable.
        :param as_path: The as_path of this ExpressRouteCircuitRoutesTable.
        :param next_hop_ip: The next_hop_ip of this ExpressRouteCircuitRoutesTable.
        :param next_hop_type: The next_hop_type of this ExpressRouteCircuitRoutesTable.
        """
        self.openapi_types = {
            'address_prefix': str,
            'as_path': str,
            'next_hop_ip': str,
            'next_hop_type': str
        }

        self.attribute_map = {
            'address_prefix': 'addressPrefix',
            'as_path': 'asPath',
            'next_hop_ip': 'nextHopIP',
            'next_hop_type': 'nextHopType'
        }

        self._address_prefix = address_prefix
        self._as_path = as_path
        self._next_hop_ip = next_hop_ip
        self._next_hop_type = next_hop_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExpressRouteCircuitRoutesTable':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExpressRouteCircuitRoutesTable of this ExpressRouteCircuitRoutesTable.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_prefix(self):
        """Gets the address_prefix of this ExpressRouteCircuitRoutesTable.

        Gets AddressPrefix.

        :return: The address_prefix of this ExpressRouteCircuitRoutesTable.
        :rtype: str
        """
        return self._address_prefix

    @address_prefix.setter
    def address_prefix(self, address_prefix):
        """Sets the address_prefix of this ExpressRouteCircuitRoutesTable.

        Gets AddressPrefix.

        :param address_prefix: The address_prefix of this ExpressRouteCircuitRoutesTable.
        :type address_prefix: str
        """

        self._address_prefix = address_prefix

    @property
    def as_path(self):
        """Gets the as_path of this ExpressRouteCircuitRoutesTable.

        Gets AsPath.

        :return: The as_path of this ExpressRouteCircuitRoutesTable.
        :rtype: str
        """
        return self._as_path

    @as_path.setter
    def as_path(self, as_path):
        """Sets the as_path of this ExpressRouteCircuitRoutesTable.

        Gets AsPath.

        :param as_path: The as_path of this ExpressRouteCircuitRoutesTable.
        :type as_path: str
        """

        self._as_path = as_path

    @property
    def next_hop_ip(self):
        """Gets the next_hop_ip of this ExpressRouteCircuitRoutesTable.

        Gets NextHopIP.

        :return: The next_hop_ip of this ExpressRouteCircuitRoutesTable.
        :rtype: str
        """
        return self._next_hop_ip

    @next_hop_ip.setter
    def next_hop_ip(self, next_hop_ip):
        """Sets the next_hop_ip of this ExpressRouteCircuitRoutesTable.

        Gets NextHopIP.

        :param next_hop_ip: The next_hop_ip of this ExpressRouteCircuitRoutesTable.
        :type next_hop_ip: str
        """

        self._next_hop_ip = next_hop_ip

    @property
    def next_hop_type(self):
        """Gets the next_hop_type of this ExpressRouteCircuitRoutesTable.

        Gets NextHopType.

        :return: The next_hop_type of this ExpressRouteCircuitRoutesTable.
        :rtype: str
        """
        return self._next_hop_type

    @next_hop_type.setter
    def next_hop_type(self, next_hop_type):
        """Sets the next_hop_type of this ExpressRouteCircuitRoutesTable.

        Gets NextHopType.

        :param next_hop_type: The next_hop_type of this ExpressRouteCircuitRoutesTable.
        :type next_hop_type: str
        """
        allowed_values = ["VirtualNetworkGateway", "VnetLocal", "Internet", "VirtualAppliance", "None"]  # noqa: E501
        if next_hop_type not in allowed_values:
            raise ValueError(
                "Invalid value for `next_hop_type` ({0}), must be one of {1}"
                .format(next_hop_type, allowed_values)
            )

        self._next_hop_type = next_hop_type
