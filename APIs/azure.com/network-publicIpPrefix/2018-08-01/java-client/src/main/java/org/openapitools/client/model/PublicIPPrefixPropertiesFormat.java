/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IpTag;
import org.openapitools.client.model.PublicIPPrefixPropertiesFormatLoadBalancerFrontendIpConfiguration;
import org.openapitools.client.model.ReferencedPublicIpAddress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Public IP prefix properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:06:00.466002-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PublicIPPrefixPropertiesFormat {
  public static final String SERIALIZED_NAME_IP_PREFIX = "ipPrefix";
  @SerializedName(SERIALIZED_NAME_IP_PREFIX)
  private String ipPrefix;

  public static final String SERIALIZED_NAME_IP_TAGS = "ipTags";
  @SerializedName(SERIALIZED_NAME_IP_TAGS)
  private List<IpTag> ipTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOAD_BALANCER_FRONTEND_IP_CONFIGURATION = "loadBalancerFrontendIpConfiguration";
  @SerializedName(SERIALIZED_NAME_LOAD_BALANCER_FRONTEND_IP_CONFIGURATION)
  private PublicIPPrefixPropertiesFormatLoadBalancerFrontendIpConfiguration loadBalancerFrontendIpConfiguration;

  public static final String SERIALIZED_NAME_PREFIX_LENGTH = "prefixLength";
  @SerializedName(SERIALIZED_NAME_PREFIX_LENGTH)
  private Integer prefixLength;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  /**
   * The public IP address version. Possible values are: &#39;IPv4&#39; and &#39;IPv6&#39;.
   */
  @JsonAdapter(PublicIPAddressVersionEnum.Adapter.class)
  public enum PublicIPAddressVersionEnum {
    IPV4("IPv4"),
    
    IPV6("IPv6");

    private String value;

    PublicIPAddressVersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PublicIPAddressVersionEnum fromValue(String value) {
      for (PublicIPAddressVersionEnum b : PublicIPAddressVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PublicIPAddressVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PublicIPAddressVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PublicIPAddressVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PublicIPAddressVersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PublicIPAddressVersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PUBLIC_I_P_ADDRESS_VERSION = "publicIPAddressVersion";
  @SerializedName(SERIALIZED_NAME_PUBLIC_I_P_ADDRESS_VERSION)
  private PublicIPAddressVersionEnum publicIPAddressVersion;

  public static final String SERIALIZED_NAME_PUBLIC_I_P_ADDRESSES = "publicIPAddresses";
  @SerializedName(SERIALIZED_NAME_PUBLIC_I_P_ADDRESSES)
  private List<ReferencedPublicIpAddress> publicIPAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESOURCE_GUID = "resourceGuid";
  @SerializedName(SERIALIZED_NAME_RESOURCE_GUID)
  private String resourceGuid;

  public PublicIPPrefixPropertiesFormat() {
  }

  public PublicIPPrefixPropertiesFormat ipPrefix(String ipPrefix) {
    this.ipPrefix = ipPrefix;
    return this;
  }

  /**
   * The allocated Prefix
   * @return ipPrefix
   */
  @javax.annotation.Nullable
  public String getIpPrefix() {
    return ipPrefix;
  }

  public void setIpPrefix(String ipPrefix) {
    this.ipPrefix = ipPrefix;
  }


  public PublicIPPrefixPropertiesFormat ipTags(List<IpTag> ipTags) {
    this.ipTags = ipTags;
    return this;
  }

  public PublicIPPrefixPropertiesFormat addIpTagsItem(IpTag ipTagsItem) {
    if (this.ipTags == null) {
      this.ipTags = new ArrayList<>();
    }
    this.ipTags.add(ipTagsItem);
    return this;
  }

  /**
   * The list of tags associated with the public IP prefix.
   * @return ipTags
   */
  @javax.annotation.Nullable
  public List<IpTag> getIpTags() {
    return ipTags;
  }

  public void setIpTags(List<IpTag> ipTags) {
    this.ipTags = ipTags;
  }


  public PublicIPPrefixPropertiesFormat loadBalancerFrontendIpConfiguration(PublicIPPrefixPropertiesFormatLoadBalancerFrontendIpConfiguration loadBalancerFrontendIpConfiguration) {
    this.loadBalancerFrontendIpConfiguration = loadBalancerFrontendIpConfiguration;
    return this;
  }

  /**
   * Get loadBalancerFrontendIpConfiguration
   * @return loadBalancerFrontendIpConfiguration
   */
  @javax.annotation.Nullable
  public PublicIPPrefixPropertiesFormatLoadBalancerFrontendIpConfiguration getLoadBalancerFrontendIpConfiguration() {
    return loadBalancerFrontendIpConfiguration;
  }

  public void setLoadBalancerFrontendIpConfiguration(PublicIPPrefixPropertiesFormatLoadBalancerFrontendIpConfiguration loadBalancerFrontendIpConfiguration) {
    this.loadBalancerFrontendIpConfiguration = loadBalancerFrontendIpConfiguration;
  }


  public PublicIPPrefixPropertiesFormat prefixLength(Integer prefixLength) {
    this.prefixLength = prefixLength;
    return this;
  }

  /**
   * The Length of the Public IP Prefix.
   * @return prefixLength
   */
  @javax.annotation.Nullable
  public Integer getPrefixLength() {
    return prefixLength;
  }

  public void setPrefixLength(Integer prefixLength) {
    this.prefixLength = prefixLength;
  }


  public PublicIPPrefixPropertiesFormat provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * The provisioning state of the Public IP prefix resource. Possible values are: &#39;Updating&#39;, &#39;Deleting&#39;, and &#39;Failed&#39;.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  public PublicIPPrefixPropertiesFormat publicIPAddressVersion(PublicIPAddressVersionEnum publicIPAddressVersion) {
    this.publicIPAddressVersion = publicIPAddressVersion;
    return this;
  }

  /**
   * The public IP address version. Possible values are: &#39;IPv4&#39; and &#39;IPv6&#39;.
   * @return publicIPAddressVersion
   */
  @javax.annotation.Nullable
  public PublicIPAddressVersionEnum getPublicIPAddressVersion() {
    return publicIPAddressVersion;
  }

  public void setPublicIPAddressVersion(PublicIPAddressVersionEnum publicIPAddressVersion) {
    this.publicIPAddressVersion = publicIPAddressVersion;
  }


  public PublicIPPrefixPropertiesFormat publicIPAddresses(List<ReferencedPublicIpAddress> publicIPAddresses) {
    this.publicIPAddresses = publicIPAddresses;
    return this;
  }

  public PublicIPPrefixPropertiesFormat addPublicIPAddressesItem(ReferencedPublicIpAddress publicIPAddressesItem) {
    if (this.publicIPAddresses == null) {
      this.publicIPAddresses = new ArrayList<>();
    }
    this.publicIPAddresses.add(publicIPAddressesItem);
    return this;
  }

  /**
   * The list of all referenced PublicIPAddresses
   * @return publicIPAddresses
   */
  @javax.annotation.Nullable
  public List<ReferencedPublicIpAddress> getPublicIPAddresses() {
    return publicIPAddresses;
  }

  public void setPublicIPAddresses(List<ReferencedPublicIpAddress> publicIPAddresses) {
    this.publicIPAddresses = publicIPAddresses;
  }


  public PublicIPPrefixPropertiesFormat resourceGuid(String resourceGuid) {
    this.resourceGuid = resourceGuid;
    return this;
  }

  /**
   * The resource GUID property of the public IP prefix resource.
   * @return resourceGuid
   */
  @javax.annotation.Nullable
  public String getResourceGuid() {
    return resourceGuid;
  }

  public void setResourceGuid(String resourceGuid) {
    this.resourceGuid = resourceGuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublicIPPrefixPropertiesFormat publicIPPrefixPropertiesFormat = (PublicIPPrefixPropertiesFormat) o;
    return Objects.equals(this.ipPrefix, publicIPPrefixPropertiesFormat.ipPrefix) &&
        Objects.equals(this.ipTags, publicIPPrefixPropertiesFormat.ipTags) &&
        Objects.equals(this.loadBalancerFrontendIpConfiguration, publicIPPrefixPropertiesFormat.loadBalancerFrontendIpConfiguration) &&
        Objects.equals(this.prefixLength, publicIPPrefixPropertiesFormat.prefixLength) &&
        Objects.equals(this.provisioningState, publicIPPrefixPropertiesFormat.provisioningState) &&
        Objects.equals(this.publicIPAddressVersion, publicIPPrefixPropertiesFormat.publicIPAddressVersion) &&
        Objects.equals(this.publicIPAddresses, publicIPPrefixPropertiesFormat.publicIPAddresses) &&
        Objects.equals(this.resourceGuid, publicIPPrefixPropertiesFormat.resourceGuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ipPrefix, ipTags, loadBalancerFrontendIpConfiguration, prefixLength, provisioningState, publicIPAddressVersion, publicIPAddresses, resourceGuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublicIPPrefixPropertiesFormat {\n");
    sb.append("    ipPrefix: ").append(toIndentedString(ipPrefix)).append("\n");
    sb.append("    ipTags: ").append(toIndentedString(ipTags)).append("\n");
    sb.append("    loadBalancerFrontendIpConfiguration: ").append(toIndentedString(loadBalancerFrontendIpConfiguration)).append("\n");
    sb.append("    prefixLength: ").append(toIndentedString(prefixLength)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    publicIPAddressVersion: ").append(toIndentedString(publicIPAddressVersion)).append("\n");
    sb.append("    publicIPAddresses: ").append(toIndentedString(publicIPAddresses)).append("\n");
    sb.append("    resourceGuid: ").append(toIndentedString(resourceGuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ipPrefix");
    openapiFields.add("ipTags");
    openapiFields.add("loadBalancerFrontendIpConfiguration");
    openapiFields.add("prefixLength");
    openapiFields.add("provisioningState");
    openapiFields.add("publicIPAddressVersion");
    openapiFields.add("publicIPAddresses");
    openapiFields.add("resourceGuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PublicIPPrefixPropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PublicIPPrefixPropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PublicIPPrefixPropertiesFormat is not found in the empty JSON string", PublicIPPrefixPropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PublicIPPrefixPropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PublicIPPrefixPropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ipPrefix") != null && !jsonObj.get("ipPrefix").isJsonNull()) && !jsonObj.get("ipPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipPrefix").toString()));
      }
      if (jsonObj.get("ipTags") != null && !jsonObj.get("ipTags").isJsonNull()) {
        JsonArray jsonArrayipTags = jsonObj.getAsJsonArray("ipTags");
        if (jsonArrayipTags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ipTags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ipTags` to be an array in the JSON string but got `%s`", jsonObj.get("ipTags").toString()));
          }

          // validate the optional field `ipTags` (array)
          for (int i = 0; i < jsonArrayipTags.size(); i++) {
            IpTag.validateJsonElement(jsonArrayipTags.get(i));
          };
        }
      }
      // validate the optional field `loadBalancerFrontendIpConfiguration`
      if (jsonObj.get("loadBalancerFrontendIpConfiguration") != null && !jsonObj.get("loadBalancerFrontendIpConfiguration").isJsonNull()) {
        PublicIPPrefixPropertiesFormatLoadBalancerFrontendIpConfiguration.validateJsonElement(jsonObj.get("loadBalancerFrontendIpConfiguration"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if ((jsonObj.get("publicIPAddressVersion") != null && !jsonObj.get("publicIPAddressVersion").isJsonNull()) && !jsonObj.get("publicIPAddressVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicIPAddressVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicIPAddressVersion").toString()));
      }
      // validate the optional field `publicIPAddressVersion`
      if (jsonObj.get("publicIPAddressVersion") != null && !jsonObj.get("publicIPAddressVersion").isJsonNull()) {
        PublicIPAddressVersionEnum.validateJsonElement(jsonObj.get("publicIPAddressVersion"));
      }
      if (jsonObj.get("publicIPAddresses") != null && !jsonObj.get("publicIPAddresses").isJsonNull()) {
        JsonArray jsonArraypublicIPAddresses = jsonObj.getAsJsonArray("publicIPAddresses");
        if (jsonArraypublicIPAddresses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("publicIPAddresses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `publicIPAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("publicIPAddresses").toString()));
          }

          // validate the optional field `publicIPAddresses` (array)
          for (int i = 0; i < jsonArraypublicIPAddresses.size(); i++) {
            ReferencedPublicIpAddress.validateJsonElement(jsonArraypublicIPAddresses.get(i));
          };
        }
      }
      if ((jsonObj.get("resourceGuid") != null && !jsonObj.get("resourceGuid").isJsonNull()) && !jsonObj.get("resourceGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceGuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PublicIPPrefixPropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PublicIPPrefixPropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PublicIPPrefixPropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PublicIPPrefixPropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<PublicIPPrefixPropertiesFormat>() {
           @Override
           public void write(JsonWriter out, PublicIPPrefixPropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PublicIPPrefixPropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PublicIPPrefixPropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PublicIPPrefixPropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to PublicIPPrefixPropertiesFormat
   */
  public static PublicIPPrefixPropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PublicIPPrefixPropertiesFormat.class);
  }

  /**
   * Convert an instance of PublicIPPrefixPropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

