/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPublicIPPrefixesApi_H
#define OAI_OAIPublicIPPrefixesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPublicIPPrefix.h"
#include "OAIPublicIPPrefixListResult.h"
#include "OAIPublicIPPrefixes_UpdateTags_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPublicIPPrefixesApi : public QObject {
    Q_OBJECT

public:
    OAIPublicIPPrefixesApi(const int timeOut = 0);
    ~OAIPublicIPPrefixesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  public_ip_prefix_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIPublicIPPrefix [required]
    */
    virtual void publicIPPrefixesCreateOrUpdate(const QString &resource_group_name, const QString &public_ip_prefix_name, const QString &api_version, const QString &subscription_id, const OAIPublicIPPrefix &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  public_ip_prefix_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void publicIPPrefixesDelete(const QString &resource_group_name, const QString &public_ip_prefix_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  public_ip_prefix_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void publicIPPrefixesGet(const QString &resource_group_name, const QString &public_ip_prefix_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void publicIPPrefixesList(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void publicIPPrefixesListAll(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  public_ip_prefix_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIPublicIPPrefixes_UpdateTags_request [required]
    */
    virtual void publicIPPrefixesUpdateTags(const QString &resource_group_name, const QString &public_ip_prefix_name, const QString &api_version, const QString &subscription_id, const OAIPublicIPPrefixes_UpdateTags_request &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void publicIPPrefixesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void publicIPPrefixesDeleteCallback(OAIHttpRequestWorker *worker);
    void publicIPPrefixesGetCallback(OAIHttpRequestWorker *worker);
    void publicIPPrefixesListCallback(OAIHttpRequestWorker *worker);
    void publicIPPrefixesListAllCallback(OAIHttpRequestWorker *worker);
    void publicIPPrefixesUpdateTagsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void publicIPPrefixesCreateOrUpdateSignal(OAIPublicIPPrefix summary);
    void publicIPPrefixesDeleteSignal();
    void publicIPPrefixesGetSignal(OAIPublicIPPrefix summary);
    void publicIPPrefixesListSignal(OAIPublicIPPrefixListResult summary);
    void publicIPPrefixesListAllSignal(OAIPublicIPPrefixListResult summary);
    void publicIPPrefixesUpdateTagsSignal(OAIPublicIPPrefix summary);


    void publicIPPrefixesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPublicIPPrefix summary);
    void publicIPPrefixesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void publicIPPrefixesGetSignalFull(OAIHttpRequestWorker *worker, OAIPublicIPPrefix summary);
    void publicIPPrefixesListSignalFull(OAIHttpRequestWorker *worker, OAIPublicIPPrefixListResult summary);
    void publicIPPrefixesListAllSignalFull(OAIHttpRequestWorker *worker, OAIPublicIPPrefixListResult summary);
    void publicIPPrefixesUpdateTagsSignalFull(OAIHttpRequestWorker *worker, OAIPublicIPPrefix summary);

    Q_DECL_DEPRECATED_X("Use publicIPPrefixesCreateOrUpdateSignalError() instead")
    void publicIPPrefixesCreateOrUpdateSignalE(OAIPublicIPPrefix summary, QNetworkReply::NetworkError error_type, QString error_str);
    void publicIPPrefixesCreateOrUpdateSignalError(OAIPublicIPPrefix summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publicIPPrefixesDeleteSignalError() instead")
    void publicIPPrefixesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void publicIPPrefixesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publicIPPrefixesGetSignalError() instead")
    void publicIPPrefixesGetSignalE(OAIPublicIPPrefix summary, QNetworkReply::NetworkError error_type, QString error_str);
    void publicIPPrefixesGetSignalError(OAIPublicIPPrefix summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publicIPPrefixesListSignalError() instead")
    void publicIPPrefixesListSignalE(OAIPublicIPPrefixListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void publicIPPrefixesListSignalError(OAIPublicIPPrefixListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publicIPPrefixesListAllSignalError() instead")
    void publicIPPrefixesListAllSignalE(OAIPublicIPPrefixListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void publicIPPrefixesListAllSignalError(OAIPublicIPPrefixListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publicIPPrefixesUpdateTagsSignalError() instead")
    void publicIPPrefixesUpdateTagsSignalE(OAIPublicIPPrefix summary, QNetworkReply::NetworkError error_type, QString error_str);
    void publicIPPrefixesUpdateTagsSignalError(OAIPublicIPPrefix summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use publicIPPrefixesCreateOrUpdateSignalErrorFull() instead")
    void publicIPPrefixesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publicIPPrefixesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publicIPPrefixesDeleteSignalErrorFull() instead")
    void publicIPPrefixesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publicIPPrefixesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publicIPPrefixesGetSignalErrorFull() instead")
    void publicIPPrefixesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publicIPPrefixesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publicIPPrefixesListSignalErrorFull() instead")
    void publicIPPrefixesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publicIPPrefixesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publicIPPrefixesListAllSignalErrorFull() instead")
    void publicIPPrefixesListAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publicIPPrefixesListAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publicIPPrefixesUpdateTagsSignalErrorFull() instead")
    void publicIPPrefixesUpdateTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publicIPPrefixesUpdateTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
