/**
 * Azure SQL Database
 * Provides create, read, update and delete functionality for Azure SQL Database resources including recommendations and operations.
 *
 * The version of the OpenAPI document: 2014-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendedElasticPoolMetric.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendedElasticPoolMetric::OAIRecommendedElasticPoolMetric(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendedElasticPoolMetric::OAIRecommendedElasticPoolMetric() {
    this->initializeModel();
}

OAIRecommendedElasticPoolMetric::~OAIRecommendedElasticPoolMetric() {}

void OAIRecommendedElasticPoolMetric::initializeModel() {

    m_date_time_isSet = false;
    m_date_time_isValid = false;

    m_dtu_isSet = false;
    m_dtu_isValid = false;

    m_size_gb_isSet = false;
    m_size_gb_isValid = false;
}

void OAIRecommendedElasticPoolMetric::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecommendedElasticPoolMetric::fromJsonObject(QJsonObject json) {

    m_date_time_isValid = ::OpenAPI::fromJsonValue(m_date_time, json[QString("dateTime")]);
    m_date_time_isSet = !json[QString("dateTime")].isNull() && m_date_time_isValid;

    m_dtu_isValid = ::OpenAPI::fromJsonValue(m_dtu, json[QString("dtu")]);
    m_dtu_isSet = !json[QString("dtu")].isNull() && m_dtu_isValid;

    m_size_gb_isValid = ::OpenAPI::fromJsonValue(m_size_gb, json[QString("sizeGB")]);
    m_size_gb_isSet = !json[QString("sizeGB")].isNull() && m_size_gb_isValid;
}

QString OAIRecommendedElasticPoolMetric::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecommendedElasticPoolMetric::asJsonObject() const {
    QJsonObject obj;
    if (m_date_time_isSet) {
        obj.insert(QString("dateTime"), ::OpenAPI::toJsonValue(m_date_time));
    }
    if (m_dtu_isSet) {
        obj.insert(QString("dtu"), ::OpenAPI::toJsonValue(m_dtu));
    }
    if (m_size_gb_isSet) {
        obj.insert(QString("sizeGB"), ::OpenAPI::toJsonValue(m_size_gb));
    }
    return obj;
}

QDateTime OAIRecommendedElasticPoolMetric::getDateTime() const {
    return m_date_time;
}
void OAIRecommendedElasticPoolMetric::setDateTime(const QDateTime &date_time) {
    m_date_time = date_time;
    m_date_time_isSet = true;
}

bool OAIRecommendedElasticPoolMetric::is_date_time_Set() const{
    return m_date_time_isSet;
}

bool OAIRecommendedElasticPoolMetric::is_date_time_Valid() const{
    return m_date_time_isValid;
}

double OAIRecommendedElasticPoolMetric::getDtu() const {
    return m_dtu;
}
void OAIRecommendedElasticPoolMetric::setDtu(const double &dtu) {
    m_dtu = dtu;
    m_dtu_isSet = true;
}

bool OAIRecommendedElasticPoolMetric::is_dtu_Set() const{
    return m_dtu_isSet;
}

bool OAIRecommendedElasticPoolMetric::is_dtu_Valid() const{
    return m_dtu_isValid;
}

double OAIRecommendedElasticPoolMetric::getSizeGb() const {
    return m_size_gb;
}
void OAIRecommendedElasticPoolMetric::setSizeGb(const double &size_gb) {
    m_size_gb = size_gb;
    m_size_gb_isSet = true;
}

bool OAIRecommendedElasticPoolMetric::is_size_gb_Set() const{
    return m_size_gb_isSet;
}

bool OAIRecommendedElasticPoolMetric::is_size_gb_Valid() const{
    return m_size_gb_isValid;
}

bool OAIRecommendedElasticPoolMetric::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dtu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_gb_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecommendedElasticPoolMetric::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
