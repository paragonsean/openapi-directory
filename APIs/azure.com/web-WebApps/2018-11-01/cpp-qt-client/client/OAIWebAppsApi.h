/**
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWebAppsApi_H
#define OAI_OAIWebAppsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAzureStoragePropertyDictionaryResource.h"
#include "OAIBackupItem.h"
#include "OAIBackupItemCollection.h"
#include "OAIBackupRequest.h"
#include "OAIConnectionStringDictionary.h"
#include "OAIContinuousWebJob.h"
#include "OAIContinuousWebJobCollection.h"
#include "OAICsmPublishingProfileOptions.h"
#include "OAICsmSlotEntity.h"
#include "OAICustomHostnameAnalysisResult.h"
#include "OAIDeletedAppRestoreRequest.h"
#include "OAIDeployment.h"
#include "OAIDeploymentCollection.h"
#include "OAIFunctionEnvelope.h"
#include "OAIFunctionEnvelopeCollection.h"
#include "OAIFunctionSecrets.h"
#include "OAIHostNameBinding.h"
#include "OAIHostNameBindingCollection.h"
#include "OAIHttpFileElement.h"
#include "OAIMSDeploy.h"
#include "OAIMSDeployLog.h"
#include "OAIMSDeployStatus.h"
#include "OAIMigrateMySqlRequest.h"
#include "OAIMigrateMySqlStatus.h"
#include "OAINetworkFeatures.h"
#include "OAINetworkTrace.h"
#include "OAIPerfMonCounterCollection.h"
#include "OAIPremierAddOn.h"
#include "OAIPremierAddOnPatchResource.h"
#include "OAIPrivateAccess.h"
#include "OAIProcessInfo.h"
#include "OAIProcessInfoCollection.h"
#include "OAIProcessModuleInfo.h"
#include "OAIProcessModuleInfoCollection.h"
#include "OAIProcessThreadInfo.h"
#include "OAIProcessThreadInfoCollection.h"
#include "OAIPublicCertificate.h"
#include "OAIPublicCertificateCollection.h"
#include "OAIRelayServiceConnectionEntity.h"
#include "OAIRestoreRequest.h"
#include "OAISiteAuthSettings.h"
#include "OAISiteCloneability.h"
#include "OAISiteConfigResource.h"
#include "OAISiteConfigResourceCollection.h"
#include "OAISiteConfigurationSnapshotInfoCollection.h"
#include "OAISiteExtensionInfo.h"
#include "OAISiteExtensionInfoCollection.h"
#include "OAISiteLogsConfig.h"
#include "OAISitePatchResource.h"
#include "OAISitePhpErrorLogFlag.h"
#include "OAISiteSourceControl.h"
#include "OAISlotConfigNamesResource.h"
#include "OAISlotDifferenceCollection.h"
#include "OAISnapshotCollection.h"
#include "OAISnapshotRestoreRequest.h"
#include "OAIStorageMigrationOptions.h"
#include "OAIStorageMigrationResponse.h"
#include "OAIStringDictionary.h"
#include "OAISwiftVirtualNetwork.h"
#include "OAITriggeredJobHistory.h"
#include "OAITriggeredJobHistoryCollection.h"
#include "OAITriggeredWebJob.h"
#include "OAITriggeredWebJobCollection.h"
#include "OAIWebAppInstanceCollection.h"
#include "OAIWebApps_GetDomainOwnershipIdentifier_200_response.h"
#include "OAIWebApps_GetHybridConnection_200_response.h"
#include "OAIWebApps_GetVnetConnectionGatewaySlot_200_response.h"
#include "OAIWebApps_GetVnetConnectionSlot_200_response.h"
#include "OAIWebApps_Get_200_response.h"
#include "OAIWebApps_ListDomainOwnershipIdentifiers_200_response.h"
#include "OAIWebApps_ListHybridConnectionKeys_200_response.h"
#include "OAIWebApps_ListMetricDefinitions_200_response.h"
#include "OAIWebApps_ListMetrics_200_response.h"
#include "OAIWebApps_ListPublishingCredentials_200_response.h"
#include "OAIWebApps_ListUsagesSlot_200_response.h"
#include "OAIWebApps_ListVnetConnectionsSlot_200_response_inner.h"
#include "OAIWebApps_List_200_response.h"
#include "OAIWebApps_List_default_response.h"
#include "OAIWebApps_MigrateMySql_200_response.h"
#include "OAIWebApps_UpdateSitePushSettings_request.h"
#include "OAIWebJob.h"
#include "OAIWebJobCollection.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWebAppsApi : public QObject {
    Q_OBJECT

public:
    OAIWebAppsApi(const int timeOut = 0);
    ~OAIWebAppsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  premier_add_on_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  premier_add_on OAIPremierAddOn [required]
    */
    virtual void webAppsAddPremierAddOn(const QString &resource_group_name, const QString &name, const QString &premier_add_on_name, const QString &subscription_id, const QString &api_version, const OAIPremierAddOn &premier_add_on);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  premier_add_on_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  premier_add_on OAIPremierAddOn [required]
    */
    virtual void webAppsAddPremierAddOnSlot(const QString &resource_group_name, const QString &name, const QString &premier_add_on_name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIPremierAddOn &premier_add_on);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  host_name QString [optional]
    */
    virtual void webAppsAnalyzeCustomHostname(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &host_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  host_name QString [optional]
    */
    virtual void webAppsAnalyzeCustomHostnameSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &host_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  slot_swap_entity OAICsmSlotEntity [required]
    */
    virtual void webAppsApplySlotConfigToProduction(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAICsmSlotEntity &slot_swap_entity);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  slot_swap_entity OAICsmSlotEntity [required]
    */
    virtual void webAppsApplySlotConfigurationSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAICsmSlotEntity &slot_swap_entity);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  request OAIBackupRequest [required]
    */
    virtual void webAppsBackup(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIBackupRequest &request);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  request OAIBackupRequest [required]
    */
    virtual void webAppsBackupSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIBackupRequest &request);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  deployment OAIDeployment [required]
    */
    virtual void webAppsCreateDeployment(const QString &resource_group_name, const QString &name, const QString &id, const QString &subscription_id, const QString &api_version, const OAIDeployment &deployment);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  deployment OAIDeployment [required]
    */
    virtual void webAppsCreateDeploymentSlot(const QString &resource_group_name, const QString &name, const QString &id, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIDeployment &deployment);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  function_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  function_envelope OAIFunctionEnvelope [required]
    */
    virtual void webAppsCreateFunction(const QString &resource_group_name, const QString &name, const QString &function_name, const QString &subscription_id, const QString &api_version, const OAIFunctionEnvelope &function_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  function_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  function_envelope OAIFunctionEnvelope [required]
    */
    virtual void webAppsCreateInstanceFunctionSlot(const QString &resource_group_name, const QString &name, const QString &function_name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIFunctionEnvelope &function_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  ms_deploy OAIMSDeploy [required]
    */
    virtual void webAppsCreateInstanceMSDeployOperation(const QString &resource_group_name, const QString &name, const QString &instance_id, const QString &subscription_id, const QString &api_version, const OAIMSDeploy &ms_deploy);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  ms_deploy OAIMSDeploy [required]
    */
    virtual void webAppsCreateInstanceMSDeployOperationSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &instance_id, const QString &subscription_id, const QString &api_version, const OAIMSDeploy &ms_deploy);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  ms_deploy OAIMSDeploy [required]
    */
    virtual void webAppsCreateMSDeployOperation(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIMSDeploy &ms_deploy);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  ms_deploy OAIMSDeploy [required]
    */
    virtual void webAppsCreateMSDeployOperationSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIMSDeploy &ms_deploy);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  site_envelope OAIWebApps_Get_200_response [required]
    */
    virtual void webAppsCreateOrUpdate(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIWebApps_Get_200_response &site_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  site_config OAISiteConfigResource [required]
    */
    virtual void webAppsCreateOrUpdateConfiguration(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAISiteConfigResource &site_config);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  site_config OAISiteConfigResource [required]
    */
    virtual void webAppsCreateOrUpdateConfigurationSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAISiteConfigResource &site_config);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  domain_ownership_identifier_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  domain_ownership_identifier OAIWebApps_GetDomainOwnershipIdentifier_200_response [required]
    */
    virtual void webAppsCreateOrUpdateDomainOwnershipIdentifier(const QString &resource_group_name, const QString &name, const QString &domain_ownership_identifier_name, const QString &subscription_id, const QString &api_version, const OAIWebApps_GetDomainOwnershipIdentifier_200_response &domain_ownership_identifier);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  domain_ownership_identifier_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  domain_ownership_identifier OAIWebApps_GetDomainOwnershipIdentifier_200_response [required]
    */
    virtual void webAppsCreateOrUpdateDomainOwnershipIdentifierSlot(const QString &resource_group_name, const QString &name, const QString &domain_ownership_identifier_name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIWebApps_GetDomainOwnershipIdentifier_200_response &domain_ownership_identifier);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  host_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  host_name_binding OAIHostNameBinding [required]
    */
    virtual void webAppsCreateOrUpdateHostNameBinding(const QString &resource_group_name, const QString &name, const QString &host_name, const QString &subscription_id, const QString &api_version, const OAIHostNameBinding &host_name_binding);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  host_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  host_name_binding OAIHostNameBinding [required]
    */
    virtual void webAppsCreateOrUpdateHostNameBindingSlot(const QString &resource_group_name, const QString &name, const QString &host_name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIHostNameBinding &host_name_binding);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  relay_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_envelope OAIWebApps_GetHybridConnection_200_response [required]
    */
    virtual void webAppsCreateOrUpdateHybridConnection(const QString &resource_group_name, const QString &name, const QString &namespace_name, const QString &relay_name, const QString &subscription_id, const QString &api_version, const OAIWebApps_GetHybridConnection_200_response &connection_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  relay_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_envelope OAIWebApps_GetHybridConnection_200_response [required]
    */
    virtual void webAppsCreateOrUpdateHybridConnectionSlot(const QString &resource_group_name, const QString &name, const QString &namespace_name, const QString &relay_name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIWebApps_GetHybridConnection_200_response &connection_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  public_certificate_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  public_certificate OAIPublicCertificate [required]
    */
    virtual void webAppsCreateOrUpdatePublicCertificate(const QString &resource_group_name, const QString &name, const QString &public_certificate_name, const QString &subscription_id, const QString &api_version, const OAIPublicCertificate &public_certificate);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  public_certificate_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  public_certificate OAIPublicCertificate [required]
    */
    virtual void webAppsCreateOrUpdatePublicCertificateSlot(const QString &resource_group_name, const QString &name, const QString &public_certificate_name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIPublicCertificate &public_certificate);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  entity_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_envelope OAIRelayServiceConnectionEntity [required]
    */
    virtual void webAppsCreateOrUpdateRelayServiceConnection(const QString &resource_group_name, const QString &name, const QString &entity_name, const QString &subscription_id, const QString &api_version, const OAIRelayServiceConnectionEntity &connection_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  entity_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_envelope OAIRelayServiceConnectionEntity [required]
    */
    virtual void webAppsCreateOrUpdateRelayServiceConnectionSlot(const QString &resource_group_name, const QString &name, const QString &entity_name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIRelayServiceConnectionEntity &connection_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  site_envelope OAIWebApps_Get_200_response [required]
    */
    virtual void webAppsCreateOrUpdateSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIWebApps_Get_200_response &site_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  site_source_control OAISiteSourceControl [required]
    */
    virtual void webAppsCreateOrUpdateSourceControl(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAISiteSourceControl &site_source_control);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  site_source_control OAISiteSourceControl [required]
    */
    virtual void webAppsCreateOrUpdateSourceControlSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAISiteSourceControl &site_source_control);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_envelope OAISwiftVirtualNetwork [required]
    */
    virtual void webAppsCreateOrUpdateSwiftVirtualNetworkConnection(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAISwiftVirtualNetwork &connection_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_envelope OAISwiftVirtualNetwork [required]
    */
    virtual void webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAISwiftVirtualNetwork &connection_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_envelope OAIWebApps_GetVnetConnectionSlot_200_response [required]
    */
    virtual void webAppsCreateOrUpdateVnetConnection(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &subscription_id, const QString &api_version, const OAIWebApps_GetVnetConnectionSlot_200_response &connection_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  gateway_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_envelope OAIWebApps_GetVnetConnectionGatewaySlot_200_response [required]
    */
    virtual void webAppsCreateOrUpdateVnetConnectionGateway(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &gateway_name, const QString &subscription_id, const QString &api_version, const OAIWebApps_GetVnetConnectionGatewaySlot_200_response &connection_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  gateway_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_envelope OAIWebApps_GetVnetConnectionGatewaySlot_200_response [required]
    */
    virtual void webAppsCreateOrUpdateVnetConnectionGatewaySlot(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &gateway_name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIWebApps_GetVnetConnectionGatewaySlot_200_response &connection_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_envelope OAIWebApps_GetVnetConnectionSlot_200_response [required]
    */
    virtual void webAppsCreateOrUpdateVnetConnectionSlot(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIWebApps_GetVnetConnectionSlot_200_response &connection_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  delete_metrics bool [optional]
    * @param[in]  delete_empty_server_farm bool [optional]
    */
    virtual void webAppsDelete(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &delete_metrics = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &delete_empty_server_farm = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  backup_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsDeleteBackup(const QString &resource_group_name, const QString &name, const QString &backup_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsDeleteBackupConfiguration(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsDeleteBackupConfigurationSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  backup_id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsDeleteBackupSlot(const QString &resource_group_name, const QString &name, const QString &backup_id, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  web_job_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsDeleteContinuousWebJob(const QString &resource_group_name, const QString &name, const QString &web_job_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  web_job_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsDeleteContinuousWebJobSlot(const QString &resource_group_name, const QString &name, const QString &web_job_name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsDeleteDeployment(const QString &resource_group_name, const QString &name, const QString &id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsDeleteDeploymentSlot(const QString &resource_group_name, const QString &name, const QString &id, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  domain_ownership_identifier_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsDeleteDomainOwnershipIdentifier(const QString &resource_group_name, const QString &name, const QString &domain_ownership_identifier_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  domain_ownership_identifier_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsDeleteDomainOwnershipIdentifierSlot(const QString &resource_group_name, const QString &name, const QString &domain_ownership_identifier_name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  function_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsDeleteFunction(const QString &resource_group_name, const QString &name, const QString &function_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  host_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsDeleteHostNameBinding(const QString &resource_group_name, const QString &name, const QString &host_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  host_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsDeleteHostNameBindingSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &host_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  relay_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsDeleteHybridConnection(const QString &resource_group_name, const QString &name, const QString &namespace_name, const QString &relay_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  relay_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsDeleteHybridConnectionSlot(const QString &resource_group_name, const QString &name, const QString &namespace_name, const QString &relay_name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  function_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsDeleteInstanceFunctionSlot(const QString &resource_group_name, const QString &name, const QString &function_name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  process_id QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsDeleteInstanceProcess(const QString &resource_group_name, const QString &name, const QString &process_id, const QString &instance_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  process_id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsDeleteInstanceProcessSlot(const QString &resource_group_name, const QString &name, const QString &process_id, const QString &slot, const QString &instance_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  premier_add_on_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsDeletePremierAddOn(const QString &resource_group_name, const QString &name, const QString &premier_add_on_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  premier_add_on_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsDeletePremierAddOnSlot(const QString &resource_group_name, const QString &name, const QString &premier_add_on_name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  process_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsDeleteProcess(const QString &resource_group_name, const QString &name, const QString &process_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  process_id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsDeleteProcessSlot(const QString &resource_group_name, const QString &name, const QString &process_id, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  public_certificate_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsDeletePublicCertificate(const QString &resource_group_name, const QString &name, const QString &public_certificate_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  public_certificate_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsDeletePublicCertificateSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &public_certificate_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  entity_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsDeleteRelayServiceConnection(const QString &resource_group_name, const QString &name, const QString &entity_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  entity_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsDeleteRelayServiceConnectionSlot(const QString &resource_group_name, const QString &name, const QString &entity_name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  site_extension_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsDeleteSiteExtension(const QString &resource_group_name, const QString &name, const QString &site_extension_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  site_extension_id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsDeleteSiteExtensionSlot(const QString &resource_group_name, const QString &name, const QString &site_extension_id, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  delete_metrics bool [optional]
    * @param[in]  delete_empty_server_farm bool [optional]
    */
    virtual void webAppsDeleteSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &delete_metrics = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &delete_empty_server_farm = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsDeleteSourceControl(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsDeleteSourceControlSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsDeleteSwiftVirtualNetwork(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsDeleteSwiftVirtualNetworkSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  web_job_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsDeleteTriggeredWebJob(const QString &resource_group_name, const QString &name, const QString &web_job_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  web_job_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsDeleteTriggeredWebJobSlot(const QString &resource_group_name, const QString &name, const QString &web_job_name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsDeleteVnetConnection(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsDeleteVnetConnectionSlot(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  request OAIRestoreRequest [required]
    */
    virtual void webAppsDiscoverBackup(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIRestoreRequest &request);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  request OAIRestoreRequest [required]
    */
    virtual void webAppsDiscoverBackupSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIRestoreRequest &request);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGenerateNewSitePublishingPassword(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGenerateNewSitePublishingPasswordSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGet(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetAuthSettings(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetAuthSettingsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetBackupConfiguration(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetBackupConfigurationSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  backup_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetBackupStatus(const QString &resource_group_name, const QString &name, const QString &backup_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  backup_id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetBackupStatusSlot(const QString &resource_group_name, const QString &name, const QString &backup_id, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetConfiguration(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetConfigurationSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  snapshot_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetConfigurationSnapshot(const QString &resource_group_name, const QString &name, const QString &snapshot_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  snapshot_id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetConfigurationSnapshotSlot(const QString &resource_group_name, const QString &name, const QString &snapshot_id, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetContainerLogsZip(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetContainerLogsZipSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  web_job_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetContinuousWebJob(const QString &resource_group_name, const QString &name, const QString &web_job_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  web_job_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetContinuousWebJobSlot(const QString &resource_group_name, const QString &name, const QString &web_job_name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetDeployment(const QString &resource_group_name, const QString &name, const QString &id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetDeploymentSlot(const QString &resource_group_name, const QString &name, const QString &id, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetDiagnosticLogsConfiguration(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetDiagnosticLogsConfigurationSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  domain_ownership_identifier_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetDomainOwnershipIdentifier(const QString &resource_group_name, const QString &name, const QString &domain_ownership_identifier_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  domain_ownership_identifier_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetDomainOwnershipIdentifierSlot(const QString &resource_group_name, const QString &name, const QString &domain_ownership_identifier_name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  function_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetFunction(const QString &resource_group_name, const QString &name, const QString &function_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetFunctionsAdminToken(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetFunctionsAdminTokenSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  host_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetHostNameBinding(const QString &resource_group_name, const QString &name, const QString &host_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  host_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetHostNameBindingSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &host_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  relay_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetHybridConnection(const QString &resource_group_name, const QString &name, const QString &namespace_name, const QString &relay_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  relay_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetHybridConnectionSlot(const QString &resource_group_name, const QString &name, const QString &namespace_name, const QString &relay_name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  function_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetInstanceFunctionSlot(const QString &resource_group_name, const QString &name, const QString &function_name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetInstanceMSDeployLog(const QString &resource_group_name, const QString &name, const QString &instance_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetInstanceMSDeployLogSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &instance_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetInstanceMsDeployStatus(const QString &resource_group_name, const QString &name, const QString &instance_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetInstanceMsDeployStatusSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &instance_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  process_id QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetInstanceProcess(const QString &resource_group_name, const QString &name, const QString &process_id, const QString &instance_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  process_id QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetInstanceProcessDump(const QString &resource_group_name, const QString &name, const QString &process_id, const QString &instance_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  process_id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetInstanceProcessDumpSlot(const QString &resource_group_name, const QString &name, const QString &process_id, const QString &slot, const QString &instance_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  process_id QString [required]
    * @param[in]  base_address QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetInstanceProcessModule(const QString &resource_group_name, const QString &name, const QString &process_id, const QString &base_address, const QString &instance_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  process_id QString [required]
    * @param[in]  base_address QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetInstanceProcessModuleSlot(const QString &resource_group_name, const QString &name, const QString &process_id, const QString &base_address, const QString &slot, const QString &instance_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  process_id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetInstanceProcessSlot(const QString &resource_group_name, const QString &name, const QString &process_id, const QString &slot, const QString &instance_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  process_id QString [required]
    * @param[in]  thread_id QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetInstanceProcessThread(const QString &resource_group_name, const QString &name, const QString &process_id, const QString &thread_id, const QString &instance_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  process_id QString [required]
    * @param[in]  thread_id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetInstanceProcessThreadSlot(const QString &resource_group_name, const QString &name, const QString &process_id, const QString &thread_id, const QString &slot, const QString &instance_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetMSDeployLog(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetMSDeployLogSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetMSDeployStatus(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetMSDeployStatusSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetMigrateMySqlStatus(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetMigrateMySqlStatusSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetNetworkTraceOperation(const QString &resource_group_name, const QString &name, const QString &operation_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetNetworkTraceOperationSlot(const QString &resource_group_name, const QString &name, const QString &operation_id, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetNetworkTraceOperationSlotV2(const QString &resource_group_name, const QString &name, const QString &operation_id, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetNetworkTraceOperationV2(const QString &resource_group_name, const QString &name, const QString &operation_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetNetworkTraces(const QString &resource_group_name, const QString &name, const QString &operation_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetNetworkTracesSlot(const QString &resource_group_name, const QString &name, const QString &operation_id, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetNetworkTracesSlotV2(const QString &resource_group_name, const QString &name, const QString &operation_id, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetNetworkTracesV2(const QString &resource_group_name, const QString &name, const QString &operation_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  premier_add_on_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetPremierAddOn(const QString &resource_group_name, const QString &name, const QString &premier_add_on_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  premier_add_on_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetPremierAddOnSlot(const QString &resource_group_name, const QString &name, const QString &premier_add_on_name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetPrivateAccess(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetPrivateAccessSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  process_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetProcess(const QString &resource_group_name, const QString &name, const QString &process_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  process_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetProcessDump(const QString &resource_group_name, const QString &name, const QString &process_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  process_id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetProcessDumpSlot(const QString &resource_group_name, const QString &name, const QString &process_id, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  process_id QString [required]
    * @param[in]  base_address QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetProcessModule(const QString &resource_group_name, const QString &name, const QString &process_id, const QString &base_address, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  process_id QString [required]
    * @param[in]  base_address QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetProcessModuleSlot(const QString &resource_group_name, const QString &name, const QString &process_id, const QString &base_address, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  process_id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetProcessSlot(const QString &resource_group_name, const QString &name, const QString &process_id, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  process_id QString [required]
    * @param[in]  thread_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetProcessThread(const QString &resource_group_name, const QString &name, const QString &process_id, const QString &thread_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  process_id QString [required]
    * @param[in]  thread_id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetProcessThreadSlot(const QString &resource_group_name, const QString &name, const QString &process_id, const QString &thread_id, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  public_certificate_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetPublicCertificate(const QString &resource_group_name, const QString &name, const QString &public_certificate_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  public_certificate_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetPublicCertificateSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &public_certificate_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  entity_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetRelayServiceConnection(const QString &resource_group_name, const QString &name, const QString &entity_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  entity_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetRelayServiceConnectionSlot(const QString &resource_group_name, const QString &name, const QString &entity_name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  site_extension_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetSiteExtension(const QString &resource_group_name, const QString &name, const QString &site_extension_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  site_extension_id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetSiteExtensionSlot(const QString &resource_group_name, const QString &name, const QString &site_extension_id, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetSitePhpErrorLogFlag(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetSitePhpErrorLogFlagSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetSourceControl(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetSourceControlSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetSwiftVirtualNetworkConnection(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetSwiftVirtualNetworkConnectionSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  web_job_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetTriggeredWebJob(const QString &resource_group_name, const QString &name, const QString &web_job_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  web_job_name QString [required]
    * @param[in]  id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetTriggeredWebJobHistory(const QString &resource_group_name, const QString &name, const QString &web_job_name, const QString &id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  web_job_name QString [required]
    * @param[in]  id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetTriggeredWebJobHistorySlot(const QString &resource_group_name, const QString &name, const QString &web_job_name, const QString &id, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  web_job_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetTriggeredWebJobSlot(const QString &resource_group_name, const QString &name, const QString &web_job_name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetVnetConnection(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  gateway_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetVnetConnectionGateway(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &gateway_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  gateway_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetVnetConnectionGatewaySlot(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &gateway_name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetVnetConnectionSlot(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  web_job_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetWebJob(const QString &resource_group_name, const QString &name, const QString &web_job_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  web_job_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetWebJobSlot(const QString &resource_group_name, const QString &name, const QString &web_job_name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetWebSiteContainerLogs(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsGetWebSiteContainerLogsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  site_extension_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsInstallSiteExtension(const QString &resource_group_name, const QString &name, const QString &site_extension_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  site_extension_id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsInstallSiteExtensionSlot(const QString &resource_group_name, const QString &name, const QString &site_extension_id, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsIsCloneable(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsIsCloneableSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsList(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListApplicationSettings(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListApplicationSettingsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListAzureStorageAccounts(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListAzureStorageAccountsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  backup_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  request OAIBackupRequest [required]
    */
    virtual void webAppsListBackupStatusSecrets(const QString &resource_group_name, const QString &name, const QString &backup_id, const QString &subscription_id, const QString &api_version, const OAIBackupRequest &request);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  backup_id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  request OAIBackupRequest [required]
    */
    virtual void webAppsListBackupStatusSecretsSlot(const QString &resource_group_name, const QString &name, const QString &backup_id, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIBackupRequest &request);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListBackups(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListBackupsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  include_slots bool [optional]
    */
    virtual void webAppsListByResourceGroup(const QString &resource_group_name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &include_slots = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListConfigurationSnapshotInfo(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListConfigurationSnapshotInfoSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListConfigurations(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListConfigurationsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListConnectionStrings(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListConnectionStringsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListContinuousWebJobs(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListContinuousWebJobsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListDeploymentLog(const QString &resource_group_name, const QString &name, const QString &id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListDeploymentLogSlot(const QString &resource_group_name, const QString &name, const QString &id, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListDeployments(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListDeploymentsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListDomainOwnershipIdentifiers(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListDomainOwnershipIdentifiersSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  function_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListFunctionSecrets(const QString &resource_group_name, const QString &name, const QString &function_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  function_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListFunctionSecretsSlot(const QString &resource_group_name, const QString &name, const QString &function_name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListFunctions(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListHostNameBindings(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListHostNameBindingsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  relay_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListHybridConnectionKeys(const QString &resource_group_name, const QString &name, const QString &namespace_name, const QString &relay_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  relay_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListHybridConnectionKeysSlot(const QString &resource_group_name, const QString &name, const QString &namespace_name, const QString &relay_name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListHybridConnections(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListHybridConnectionsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListInstanceFunctionsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListInstanceIdentifiers(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListInstanceIdentifiersSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  process_id QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListInstanceProcessModules(const QString &resource_group_name, const QString &name, const QString &process_id, const QString &instance_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  process_id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListInstanceProcessModulesSlot(const QString &resource_group_name, const QString &name, const QString &process_id, const QString &slot, const QString &instance_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  process_id QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListInstanceProcessThreads(const QString &resource_group_name, const QString &name, const QString &process_id, const QString &instance_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  process_id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListInstanceProcessThreadsSlot(const QString &resource_group_name, const QString &name, const QString &process_id, const QString &slot, const QString &instance_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListInstanceProcesses(const QString &resource_group_name, const QString &name, const QString &instance_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListInstanceProcessesSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &instance_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListMetadata(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListMetadataSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListMetricDefinitions(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListMetricDefinitionsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  details bool [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void webAppsListMetrics(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &details = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  details bool [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void webAppsListMetricsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &details = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  view QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListNetworkFeatures(const QString &resource_group_name, const QString &name, const QString &view, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  view QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListNetworkFeaturesSlot(const QString &resource_group_name, const QString &name, const QString &view, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void webAppsListPerfMonCounters(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void webAppsListPerfMonCountersSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListPremierAddOns(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListPremierAddOnsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  process_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListProcessModules(const QString &resource_group_name, const QString &name, const QString &process_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  process_id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListProcessModulesSlot(const QString &resource_group_name, const QString &name, const QString &process_id, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  process_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListProcessThreads(const QString &resource_group_name, const QString &name, const QString &process_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  process_id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListProcessThreadsSlot(const QString &resource_group_name, const QString &name, const QString &process_id, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListProcesses(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListProcessesSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListPublicCertificates(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListPublicCertificatesSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListPublishingCredentials(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListPublishingCredentialsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  publishing_profile_options OAICsmPublishingProfileOptions [required]
    */
    virtual void webAppsListPublishingProfileXmlWithSecrets(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAICsmPublishingProfileOptions &publishing_profile_options);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  publishing_profile_options OAICsmPublishingProfileOptions [required]
    */
    virtual void webAppsListPublishingProfileXmlWithSecretsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAICsmPublishingProfileOptions &publishing_profile_options);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListRelayServiceConnections(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListRelayServiceConnectionsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListSiteExtensions(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListSiteExtensionsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListSitePushSettings(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListSitePushSettingsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListSlotConfigurationNames(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  slot_swap_entity OAICsmSlotEntity [required]
    */
    virtual void webAppsListSlotDifferencesFromProduction(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAICsmSlotEntity &slot_swap_entity);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  slot_swap_entity OAICsmSlotEntity [required]
    */
    virtual void webAppsListSlotDifferencesSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAICsmSlotEntity &slot_swap_entity);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListSlots(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListSnapshots(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListSnapshotsFromDRSecondary(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListSnapshotsFromDRSecondarySlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListSnapshotsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListSyncFunctionTriggers(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListSyncFunctionTriggersSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  web_job_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListTriggeredWebJobHistory(const QString &resource_group_name, const QString &name, const QString &web_job_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  web_job_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListTriggeredWebJobHistorySlot(const QString &resource_group_name, const QString &name, const QString &web_job_name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListTriggeredWebJobs(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListTriggeredWebJobsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void webAppsListUsages(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void webAppsListUsagesSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListVnetConnections(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListVnetConnectionsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListWebJobs(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsListWebJobsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  migration_request_envelope OAIMigrateMySqlRequest [required]
    */
    virtual void webAppsMigrateMySql(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIMigrateMySqlRequest &migration_request_envelope);

    /**
    * @param[in]  subscription_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  migration_options OAIStorageMigrationOptions [required]
    */
    virtual void webAppsMigrateStorage(const QString &subscription_name, const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIStorageMigrationOptions &migration_options);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  access OAIPrivateAccess [required]
    */
    virtual void webAppsPutPrivateAccessVnet(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIPrivateAccess &access);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  access OAIPrivateAccess [required]
    */
    virtual void webAppsPutPrivateAccessVnetSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIPrivateAccess &access);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  snapshot_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsRecoverSiteConfigurationSnapshot(const QString &resource_group_name, const QString &name, const QString &snapshot_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  snapshot_id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsRecoverSiteConfigurationSnapshotSlot(const QString &resource_group_name, const QString &name, const QString &snapshot_id, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsResetProductionSlotConfig(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsResetSlotConfigurationSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  soft_restart bool [optional]
    * @param[in]  synchronous bool [optional]
    */
    virtual void webAppsRestart(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &soft_restart = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &synchronous = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  soft_restart bool [optional]
    * @param[in]  synchronous bool [optional]
    */
    virtual void webAppsRestartSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &soft_restart = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &synchronous = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  backup_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  request OAIRestoreRequest [required]
    */
    virtual void webAppsRestore(const QString &resource_group_name, const QString &name, const QString &backup_id, const QString &subscription_id, const QString &api_version, const OAIRestoreRequest &request);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  request OAIRestoreRequest [required]
    */
    virtual void webAppsRestoreFromBackupBlob(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIRestoreRequest &request);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  request OAIRestoreRequest [required]
    */
    virtual void webAppsRestoreFromBackupBlobSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIRestoreRequest &request);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  restore_request OAIDeletedAppRestoreRequest [required]
    */
    virtual void webAppsRestoreFromDeletedApp(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIDeletedAppRestoreRequest &restore_request);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  restore_request OAIDeletedAppRestoreRequest [required]
    */
    virtual void webAppsRestoreFromDeletedAppSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIDeletedAppRestoreRequest &restore_request);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  backup_id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  request OAIRestoreRequest [required]
    */
    virtual void webAppsRestoreSlot(const QString &resource_group_name, const QString &name, const QString &backup_id, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIRestoreRequest &request);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  restore_request OAISnapshotRestoreRequest [required]
    */
    virtual void webAppsRestoreSnapshot(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAISnapshotRestoreRequest &restore_request);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  restore_request OAISnapshotRestoreRequest [required]
    */
    virtual void webAppsRestoreSnapshotSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAISnapshotRestoreRequest &restore_request);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  web_job_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsRunTriggeredWebJob(const QString &resource_group_name, const QString &name, const QString &web_job_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  web_job_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsRunTriggeredWebJobSlot(const QString &resource_group_name, const QString &name, const QString &web_job_name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsStart(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  web_job_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsStartContinuousWebJob(const QString &resource_group_name, const QString &name, const QString &web_job_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  web_job_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsStartContinuousWebJobSlot(const QString &resource_group_name, const QString &name, const QString &web_job_name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  duration_in_seconds qint32 [optional]
    * @param[in]  max_frame_length qint32 [optional]
    * @param[in]  sas_url QString [optional]
    */
    virtual void webAppsStartNetworkTrace(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &duration_in_seconds = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_frame_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sas_url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  duration_in_seconds qint32 [optional]
    * @param[in]  max_frame_length qint32 [optional]
    * @param[in]  sas_url QString [optional]
    */
    virtual void webAppsStartNetworkTraceSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &duration_in_seconds = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_frame_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sas_url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsStartSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  duration_in_seconds qint32 [optional]
    * @param[in]  max_frame_length qint32 [optional]
    * @param[in]  sas_url QString [optional]
    */
    virtual void webAppsStartWebSiteNetworkTrace(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &duration_in_seconds = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_frame_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sas_url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  duration_in_seconds qint32 [optional]
    * @param[in]  max_frame_length qint32 [optional]
    * @param[in]  sas_url QString [optional]
    */
    virtual void webAppsStartWebSiteNetworkTraceOperation(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &duration_in_seconds = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_frame_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sas_url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  duration_in_seconds qint32 [optional]
    * @param[in]  max_frame_length qint32 [optional]
    * @param[in]  sas_url QString [optional]
    */
    virtual void webAppsStartWebSiteNetworkTraceOperationSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &duration_in_seconds = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_frame_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sas_url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  duration_in_seconds qint32 [optional]
    * @param[in]  max_frame_length qint32 [optional]
    * @param[in]  sas_url QString [optional]
    */
    virtual void webAppsStartWebSiteNetworkTraceSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &duration_in_seconds = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_frame_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sas_url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsStop(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  web_job_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsStopContinuousWebJob(const QString &resource_group_name, const QString &name, const QString &web_job_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  web_job_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsStopContinuousWebJobSlot(const QString &resource_group_name, const QString &name, const QString &web_job_name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsStopNetworkTrace(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsStopNetworkTraceSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsStopSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsStopWebSiteNetworkTrace(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsStopWebSiteNetworkTraceSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  slot_swap_entity OAICsmSlotEntity [required]
    */
    virtual void webAppsSwapSlotSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAICsmSlotEntity &slot_swap_entity);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  slot_swap_entity OAICsmSlotEntity [required]
    */
    virtual void webAppsSwapSlotWithProduction(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAICsmSlotEntity &slot_swap_entity);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsSyncFunctionTriggers(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsSyncFunctionTriggersSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsSyncRepository(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webAppsSyncRepositorySlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  site_envelope OAISitePatchResource [required]
    */
    virtual void webAppsUpdate(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAISitePatchResource &site_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  app_settings OAIStringDictionary [required]
    */
    virtual void webAppsUpdateApplicationSettings(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIStringDictionary &app_settings);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  app_settings OAIStringDictionary [required]
    */
    virtual void webAppsUpdateApplicationSettingsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIStringDictionary &app_settings);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  site_auth_settings OAISiteAuthSettings [required]
    */
    virtual void webAppsUpdateAuthSettings(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAISiteAuthSettings &site_auth_settings);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  site_auth_settings OAISiteAuthSettings [required]
    */
    virtual void webAppsUpdateAuthSettingsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAISiteAuthSettings &site_auth_settings);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  azure_storage_accounts OAIAzureStoragePropertyDictionaryResource [required]
    */
    virtual void webAppsUpdateAzureStorageAccounts(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIAzureStoragePropertyDictionaryResource &azure_storage_accounts);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  azure_storage_accounts OAIAzureStoragePropertyDictionaryResource [required]
    */
    virtual void webAppsUpdateAzureStorageAccountsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIAzureStoragePropertyDictionaryResource &azure_storage_accounts);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  request OAIBackupRequest [required]
    */
    virtual void webAppsUpdateBackupConfiguration(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIBackupRequest &request);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  request OAIBackupRequest [required]
    */
    virtual void webAppsUpdateBackupConfigurationSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIBackupRequest &request);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  site_config OAISiteConfigResource [required]
    */
    virtual void webAppsUpdateConfiguration(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAISiteConfigResource &site_config);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  site_config OAISiteConfigResource [required]
    */
    virtual void webAppsUpdateConfigurationSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAISiteConfigResource &site_config);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_strings OAIConnectionStringDictionary [required]
    */
    virtual void webAppsUpdateConnectionStrings(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIConnectionStringDictionary &connection_strings);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_strings OAIConnectionStringDictionary [required]
    */
    virtual void webAppsUpdateConnectionStringsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIConnectionStringDictionary &connection_strings);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  site_logs_config OAISiteLogsConfig [required]
    */
    virtual void webAppsUpdateDiagnosticLogsConfig(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAISiteLogsConfig &site_logs_config);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  site_logs_config OAISiteLogsConfig [required]
    */
    virtual void webAppsUpdateDiagnosticLogsConfigSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAISiteLogsConfig &site_logs_config);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  domain_ownership_identifier_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  domain_ownership_identifier OAIWebApps_GetDomainOwnershipIdentifier_200_response [required]
    */
    virtual void webAppsUpdateDomainOwnershipIdentifier(const QString &resource_group_name, const QString &name, const QString &domain_ownership_identifier_name, const QString &subscription_id, const QString &api_version, const OAIWebApps_GetDomainOwnershipIdentifier_200_response &domain_ownership_identifier);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  domain_ownership_identifier_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  domain_ownership_identifier OAIWebApps_GetDomainOwnershipIdentifier_200_response [required]
    */
    virtual void webAppsUpdateDomainOwnershipIdentifierSlot(const QString &resource_group_name, const QString &name, const QString &domain_ownership_identifier_name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIWebApps_GetDomainOwnershipIdentifier_200_response &domain_ownership_identifier);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  relay_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_envelope OAIWebApps_GetHybridConnection_200_response [required]
    */
    virtual void webAppsUpdateHybridConnection(const QString &resource_group_name, const QString &name, const QString &namespace_name, const QString &relay_name, const QString &subscription_id, const QString &api_version, const OAIWebApps_GetHybridConnection_200_response &connection_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  relay_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_envelope OAIWebApps_GetHybridConnection_200_response [required]
    */
    virtual void webAppsUpdateHybridConnectionSlot(const QString &resource_group_name, const QString &name, const QString &namespace_name, const QString &relay_name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIWebApps_GetHybridConnection_200_response &connection_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  metadata OAIStringDictionary [required]
    */
    virtual void webAppsUpdateMetadata(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIStringDictionary &metadata);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  metadata OAIStringDictionary [required]
    */
    virtual void webAppsUpdateMetadataSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIStringDictionary &metadata);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  premier_add_on_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  premier_add_on OAIPremierAddOnPatchResource [required]
    */
    virtual void webAppsUpdatePremierAddOn(const QString &resource_group_name, const QString &name, const QString &premier_add_on_name, const QString &subscription_id, const QString &api_version, const OAIPremierAddOnPatchResource &premier_add_on);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  premier_add_on_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  premier_add_on OAIPremierAddOnPatchResource [required]
    */
    virtual void webAppsUpdatePremierAddOnSlot(const QString &resource_group_name, const QString &name, const QString &premier_add_on_name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIPremierAddOnPatchResource &premier_add_on);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  entity_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_envelope OAIRelayServiceConnectionEntity [required]
    */
    virtual void webAppsUpdateRelayServiceConnection(const QString &resource_group_name, const QString &name, const QString &entity_name, const QString &subscription_id, const QString &api_version, const OAIRelayServiceConnectionEntity &connection_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  entity_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_envelope OAIRelayServiceConnectionEntity [required]
    */
    virtual void webAppsUpdateRelayServiceConnectionSlot(const QString &resource_group_name, const QString &name, const QString &entity_name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIRelayServiceConnectionEntity &connection_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  push_settings OAIWebApps_UpdateSitePushSettings_request [required]
    */
    virtual void webAppsUpdateSitePushSettings(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIWebApps_UpdateSitePushSettings_request &push_settings);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  push_settings OAIWebApps_UpdateSitePushSettings_request [required]
    */
    virtual void webAppsUpdateSitePushSettingsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIWebApps_UpdateSitePushSettings_request &push_settings);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  site_envelope OAISitePatchResource [required]
    */
    virtual void webAppsUpdateSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAISitePatchResource &site_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  slot_config_names OAISlotConfigNamesResource [required]
    */
    virtual void webAppsUpdateSlotConfigurationNames(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAISlotConfigNamesResource &slot_config_names);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  site_source_control OAISiteSourceControl [required]
    */
    virtual void webAppsUpdateSourceControl(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAISiteSourceControl &site_source_control);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  site_source_control OAISiteSourceControl [required]
    */
    virtual void webAppsUpdateSourceControlSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAISiteSourceControl &site_source_control);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_envelope OAISwiftVirtualNetwork [required]
    */
    virtual void webAppsUpdateSwiftVirtualNetworkConnection(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAISwiftVirtualNetwork &connection_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_envelope OAISwiftVirtualNetwork [required]
    */
    virtual void webAppsUpdateSwiftVirtualNetworkConnectionSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAISwiftVirtualNetwork &connection_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_envelope OAIWebApps_GetVnetConnectionSlot_200_response [required]
    */
    virtual void webAppsUpdateVnetConnection(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &subscription_id, const QString &api_version, const OAIWebApps_GetVnetConnectionSlot_200_response &connection_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  gateway_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_envelope OAIWebApps_GetVnetConnectionGatewaySlot_200_response [required]
    */
    virtual void webAppsUpdateVnetConnectionGateway(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &gateway_name, const QString &subscription_id, const QString &api_version, const OAIWebApps_GetVnetConnectionGatewaySlot_200_response &connection_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  gateway_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_envelope OAIWebApps_GetVnetConnectionGatewaySlot_200_response [required]
    */
    virtual void webAppsUpdateVnetConnectionGatewaySlot(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &gateway_name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIWebApps_GetVnetConnectionGatewaySlot_200_response &connection_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_envelope OAIWebApps_GetVnetConnectionSlot_200_response [required]
    */
    virtual void webAppsUpdateVnetConnectionSlot(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIWebApps_GetVnetConnectionSlot_200_response &connection_envelope);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void webAppsAddPremierAddOnCallback(OAIHttpRequestWorker *worker);
    void webAppsAddPremierAddOnSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsAnalyzeCustomHostnameCallback(OAIHttpRequestWorker *worker);
    void webAppsAnalyzeCustomHostnameSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsApplySlotConfigToProductionCallback(OAIHttpRequestWorker *worker);
    void webAppsApplySlotConfigurationSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsBackupCallback(OAIHttpRequestWorker *worker);
    void webAppsBackupSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsCreateDeploymentCallback(OAIHttpRequestWorker *worker);
    void webAppsCreateDeploymentSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsCreateFunctionCallback(OAIHttpRequestWorker *worker);
    void webAppsCreateInstanceFunctionSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsCreateInstanceMSDeployOperationCallback(OAIHttpRequestWorker *worker);
    void webAppsCreateInstanceMSDeployOperationSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsCreateMSDeployOperationCallback(OAIHttpRequestWorker *worker);
    void webAppsCreateMSDeployOperationSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void webAppsCreateOrUpdateConfigurationCallback(OAIHttpRequestWorker *worker);
    void webAppsCreateOrUpdateConfigurationSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsCreateOrUpdateDomainOwnershipIdentifierCallback(OAIHttpRequestWorker *worker);
    void webAppsCreateOrUpdateDomainOwnershipIdentifierSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsCreateOrUpdateHostNameBindingCallback(OAIHttpRequestWorker *worker);
    void webAppsCreateOrUpdateHostNameBindingSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsCreateOrUpdateHybridConnectionCallback(OAIHttpRequestWorker *worker);
    void webAppsCreateOrUpdateHybridConnectionSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsCreateOrUpdatePublicCertificateCallback(OAIHttpRequestWorker *worker);
    void webAppsCreateOrUpdatePublicCertificateSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsCreateOrUpdateRelayServiceConnectionCallback(OAIHttpRequestWorker *worker);
    void webAppsCreateOrUpdateRelayServiceConnectionSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsCreateOrUpdateSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsCreateOrUpdateSourceControlCallback(OAIHttpRequestWorker *worker);
    void webAppsCreateOrUpdateSourceControlSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsCreateOrUpdateSwiftVirtualNetworkConnectionCallback(OAIHttpRequestWorker *worker);
    void webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsCreateOrUpdateVnetConnectionCallback(OAIHttpRequestWorker *worker);
    void webAppsCreateOrUpdateVnetConnectionGatewayCallback(OAIHttpRequestWorker *worker);
    void webAppsCreateOrUpdateVnetConnectionGatewaySlotCallback(OAIHttpRequestWorker *worker);
    void webAppsCreateOrUpdateVnetConnectionSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsDeleteCallback(OAIHttpRequestWorker *worker);
    void webAppsDeleteBackupCallback(OAIHttpRequestWorker *worker);
    void webAppsDeleteBackupConfigurationCallback(OAIHttpRequestWorker *worker);
    void webAppsDeleteBackupConfigurationSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsDeleteBackupSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsDeleteContinuousWebJobCallback(OAIHttpRequestWorker *worker);
    void webAppsDeleteContinuousWebJobSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsDeleteDeploymentCallback(OAIHttpRequestWorker *worker);
    void webAppsDeleteDeploymentSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsDeleteDomainOwnershipIdentifierCallback(OAIHttpRequestWorker *worker);
    void webAppsDeleteDomainOwnershipIdentifierSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsDeleteFunctionCallback(OAIHttpRequestWorker *worker);
    void webAppsDeleteHostNameBindingCallback(OAIHttpRequestWorker *worker);
    void webAppsDeleteHostNameBindingSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsDeleteHybridConnectionCallback(OAIHttpRequestWorker *worker);
    void webAppsDeleteHybridConnectionSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsDeleteInstanceFunctionSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsDeleteInstanceProcessCallback(OAIHttpRequestWorker *worker);
    void webAppsDeleteInstanceProcessSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsDeletePremierAddOnCallback(OAIHttpRequestWorker *worker);
    void webAppsDeletePremierAddOnSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsDeleteProcessCallback(OAIHttpRequestWorker *worker);
    void webAppsDeleteProcessSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsDeletePublicCertificateCallback(OAIHttpRequestWorker *worker);
    void webAppsDeletePublicCertificateSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsDeleteRelayServiceConnectionCallback(OAIHttpRequestWorker *worker);
    void webAppsDeleteRelayServiceConnectionSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsDeleteSiteExtensionCallback(OAIHttpRequestWorker *worker);
    void webAppsDeleteSiteExtensionSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsDeleteSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsDeleteSourceControlCallback(OAIHttpRequestWorker *worker);
    void webAppsDeleteSourceControlSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsDeleteSwiftVirtualNetworkCallback(OAIHttpRequestWorker *worker);
    void webAppsDeleteSwiftVirtualNetworkSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsDeleteTriggeredWebJobCallback(OAIHttpRequestWorker *worker);
    void webAppsDeleteTriggeredWebJobSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsDeleteVnetConnectionCallback(OAIHttpRequestWorker *worker);
    void webAppsDeleteVnetConnectionSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsDiscoverBackupCallback(OAIHttpRequestWorker *worker);
    void webAppsDiscoverBackupSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGenerateNewSitePublishingPasswordCallback(OAIHttpRequestWorker *worker);
    void webAppsGenerateNewSitePublishingPasswordSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetCallback(OAIHttpRequestWorker *worker);
    void webAppsGetAuthSettingsCallback(OAIHttpRequestWorker *worker);
    void webAppsGetAuthSettingsSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetBackupConfigurationCallback(OAIHttpRequestWorker *worker);
    void webAppsGetBackupConfigurationSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetBackupStatusCallback(OAIHttpRequestWorker *worker);
    void webAppsGetBackupStatusSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetConfigurationCallback(OAIHttpRequestWorker *worker);
    void webAppsGetConfigurationSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetConfigurationSnapshotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetConfigurationSnapshotSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetContainerLogsZipCallback(OAIHttpRequestWorker *worker);
    void webAppsGetContainerLogsZipSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetContinuousWebJobCallback(OAIHttpRequestWorker *worker);
    void webAppsGetContinuousWebJobSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetDeploymentCallback(OAIHttpRequestWorker *worker);
    void webAppsGetDeploymentSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetDiagnosticLogsConfigurationCallback(OAIHttpRequestWorker *worker);
    void webAppsGetDiagnosticLogsConfigurationSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetDomainOwnershipIdentifierCallback(OAIHttpRequestWorker *worker);
    void webAppsGetDomainOwnershipIdentifierSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetFunctionCallback(OAIHttpRequestWorker *worker);
    void webAppsGetFunctionsAdminTokenCallback(OAIHttpRequestWorker *worker);
    void webAppsGetFunctionsAdminTokenSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetHostNameBindingCallback(OAIHttpRequestWorker *worker);
    void webAppsGetHostNameBindingSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetHybridConnectionCallback(OAIHttpRequestWorker *worker);
    void webAppsGetHybridConnectionSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetInstanceFunctionSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetInstanceMSDeployLogCallback(OAIHttpRequestWorker *worker);
    void webAppsGetInstanceMSDeployLogSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetInstanceMsDeployStatusCallback(OAIHttpRequestWorker *worker);
    void webAppsGetInstanceMsDeployStatusSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetInstanceProcessCallback(OAIHttpRequestWorker *worker);
    void webAppsGetInstanceProcessDumpCallback(OAIHttpRequestWorker *worker);
    void webAppsGetInstanceProcessDumpSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetInstanceProcessModuleCallback(OAIHttpRequestWorker *worker);
    void webAppsGetInstanceProcessModuleSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetInstanceProcessSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetInstanceProcessThreadCallback(OAIHttpRequestWorker *worker);
    void webAppsGetInstanceProcessThreadSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetMSDeployLogCallback(OAIHttpRequestWorker *worker);
    void webAppsGetMSDeployLogSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetMSDeployStatusCallback(OAIHttpRequestWorker *worker);
    void webAppsGetMSDeployStatusSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetMigrateMySqlStatusCallback(OAIHttpRequestWorker *worker);
    void webAppsGetMigrateMySqlStatusSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetNetworkTraceOperationCallback(OAIHttpRequestWorker *worker);
    void webAppsGetNetworkTraceOperationSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetNetworkTraceOperationSlotV2Callback(OAIHttpRequestWorker *worker);
    void webAppsGetNetworkTraceOperationV2Callback(OAIHttpRequestWorker *worker);
    void webAppsGetNetworkTracesCallback(OAIHttpRequestWorker *worker);
    void webAppsGetNetworkTracesSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetNetworkTracesSlotV2Callback(OAIHttpRequestWorker *worker);
    void webAppsGetNetworkTracesV2Callback(OAIHttpRequestWorker *worker);
    void webAppsGetPremierAddOnCallback(OAIHttpRequestWorker *worker);
    void webAppsGetPremierAddOnSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetPrivateAccessCallback(OAIHttpRequestWorker *worker);
    void webAppsGetPrivateAccessSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetProcessCallback(OAIHttpRequestWorker *worker);
    void webAppsGetProcessDumpCallback(OAIHttpRequestWorker *worker);
    void webAppsGetProcessDumpSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetProcessModuleCallback(OAIHttpRequestWorker *worker);
    void webAppsGetProcessModuleSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetProcessSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetProcessThreadCallback(OAIHttpRequestWorker *worker);
    void webAppsGetProcessThreadSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetPublicCertificateCallback(OAIHttpRequestWorker *worker);
    void webAppsGetPublicCertificateSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetRelayServiceConnectionCallback(OAIHttpRequestWorker *worker);
    void webAppsGetRelayServiceConnectionSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetSiteExtensionCallback(OAIHttpRequestWorker *worker);
    void webAppsGetSiteExtensionSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetSitePhpErrorLogFlagCallback(OAIHttpRequestWorker *worker);
    void webAppsGetSitePhpErrorLogFlagSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetSourceControlCallback(OAIHttpRequestWorker *worker);
    void webAppsGetSourceControlSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetSwiftVirtualNetworkConnectionCallback(OAIHttpRequestWorker *worker);
    void webAppsGetSwiftVirtualNetworkConnectionSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetTriggeredWebJobCallback(OAIHttpRequestWorker *worker);
    void webAppsGetTriggeredWebJobHistoryCallback(OAIHttpRequestWorker *worker);
    void webAppsGetTriggeredWebJobHistorySlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetTriggeredWebJobSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetVnetConnectionCallback(OAIHttpRequestWorker *worker);
    void webAppsGetVnetConnectionGatewayCallback(OAIHttpRequestWorker *worker);
    void webAppsGetVnetConnectionGatewaySlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetVnetConnectionSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetWebJobCallback(OAIHttpRequestWorker *worker);
    void webAppsGetWebJobSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsGetWebSiteContainerLogsCallback(OAIHttpRequestWorker *worker);
    void webAppsGetWebSiteContainerLogsSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsInstallSiteExtensionCallback(OAIHttpRequestWorker *worker);
    void webAppsInstallSiteExtensionSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsIsCloneableCallback(OAIHttpRequestWorker *worker);
    void webAppsIsCloneableSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListCallback(OAIHttpRequestWorker *worker);
    void webAppsListApplicationSettingsCallback(OAIHttpRequestWorker *worker);
    void webAppsListApplicationSettingsSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListAzureStorageAccountsCallback(OAIHttpRequestWorker *worker);
    void webAppsListAzureStorageAccountsSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListBackupStatusSecretsCallback(OAIHttpRequestWorker *worker);
    void webAppsListBackupStatusSecretsSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListBackupsCallback(OAIHttpRequestWorker *worker);
    void webAppsListBackupsSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void webAppsListConfigurationSnapshotInfoCallback(OAIHttpRequestWorker *worker);
    void webAppsListConfigurationSnapshotInfoSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListConfigurationsCallback(OAIHttpRequestWorker *worker);
    void webAppsListConfigurationsSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListConnectionStringsCallback(OAIHttpRequestWorker *worker);
    void webAppsListConnectionStringsSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListContinuousWebJobsCallback(OAIHttpRequestWorker *worker);
    void webAppsListContinuousWebJobsSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListDeploymentLogCallback(OAIHttpRequestWorker *worker);
    void webAppsListDeploymentLogSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListDeploymentsCallback(OAIHttpRequestWorker *worker);
    void webAppsListDeploymentsSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListDomainOwnershipIdentifiersCallback(OAIHttpRequestWorker *worker);
    void webAppsListDomainOwnershipIdentifiersSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListFunctionSecretsCallback(OAIHttpRequestWorker *worker);
    void webAppsListFunctionSecretsSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListFunctionsCallback(OAIHttpRequestWorker *worker);
    void webAppsListHostNameBindingsCallback(OAIHttpRequestWorker *worker);
    void webAppsListHostNameBindingsSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListHybridConnectionKeysCallback(OAIHttpRequestWorker *worker);
    void webAppsListHybridConnectionKeysSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListHybridConnectionsCallback(OAIHttpRequestWorker *worker);
    void webAppsListHybridConnectionsSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListInstanceFunctionsSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListInstanceIdentifiersCallback(OAIHttpRequestWorker *worker);
    void webAppsListInstanceIdentifiersSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListInstanceProcessModulesCallback(OAIHttpRequestWorker *worker);
    void webAppsListInstanceProcessModulesSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListInstanceProcessThreadsCallback(OAIHttpRequestWorker *worker);
    void webAppsListInstanceProcessThreadsSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListInstanceProcessesCallback(OAIHttpRequestWorker *worker);
    void webAppsListInstanceProcessesSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListMetadataCallback(OAIHttpRequestWorker *worker);
    void webAppsListMetadataSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListMetricDefinitionsCallback(OAIHttpRequestWorker *worker);
    void webAppsListMetricDefinitionsSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListMetricsCallback(OAIHttpRequestWorker *worker);
    void webAppsListMetricsSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListNetworkFeaturesCallback(OAIHttpRequestWorker *worker);
    void webAppsListNetworkFeaturesSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListPerfMonCountersCallback(OAIHttpRequestWorker *worker);
    void webAppsListPerfMonCountersSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListPremierAddOnsCallback(OAIHttpRequestWorker *worker);
    void webAppsListPremierAddOnsSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListProcessModulesCallback(OAIHttpRequestWorker *worker);
    void webAppsListProcessModulesSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListProcessThreadsCallback(OAIHttpRequestWorker *worker);
    void webAppsListProcessThreadsSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListProcessesCallback(OAIHttpRequestWorker *worker);
    void webAppsListProcessesSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListPublicCertificatesCallback(OAIHttpRequestWorker *worker);
    void webAppsListPublicCertificatesSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListPublishingCredentialsCallback(OAIHttpRequestWorker *worker);
    void webAppsListPublishingCredentialsSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListPublishingProfileXmlWithSecretsCallback(OAIHttpRequestWorker *worker);
    void webAppsListPublishingProfileXmlWithSecretsSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListRelayServiceConnectionsCallback(OAIHttpRequestWorker *worker);
    void webAppsListRelayServiceConnectionsSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListSiteExtensionsCallback(OAIHttpRequestWorker *worker);
    void webAppsListSiteExtensionsSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListSitePushSettingsCallback(OAIHttpRequestWorker *worker);
    void webAppsListSitePushSettingsSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListSlotConfigurationNamesCallback(OAIHttpRequestWorker *worker);
    void webAppsListSlotDifferencesFromProductionCallback(OAIHttpRequestWorker *worker);
    void webAppsListSlotDifferencesSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListSlotsCallback(OAIHttpRequestWorker *worker);
    void webAppsListSnapshotsCallback(OAIHttpRequestWorker *worker);
    void webAppsListSnapshotsFromDRSecondaryCallback(OAIHttpRequestWorker *worker);
    void webAppsListSnapshotsFromDRSecondarySlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListSnapshotsSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListSyncFunctionTriggersCallback(OAIHttpRequestWorker *worker);
    void webAppsListSyncFunctionTriggersSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListTriggeredWebJobHistoryCallback(OAIHttpRequestWorker *worker);
    void webAppsListTriggeredWebJobHistorySlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListTriggeredWebJobsCallback(OAIHttpRequestWorker *worker);
    void webAppsListTriggeredWebJobsSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListUsagesCallback(OAIHttpRequestWorker *worker);
    void webAppsListUsagesSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListVnetConnectionsCallback(OAIHttpRequestWorker *worker);
    void webAppsListVnetConnectionsSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsListWebJobsCallback(OAIHttpRequestWorker *worker);
    void webAppsListWebJobsSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsMigrateMySqlCallback(OAIHttpRequestWorker *worker);
    void webAppsMigrateStorageCallback(OAIHttpRequestWorker *worker);
    void webAppsPutPrivateAccessVnetCallback(OAIHttpRequestWorker *worker);
    void webAppsPutPrivateAccessVnetSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsRecoverSiteConfigurationSnapshotCallback(OAIHttpRequestWorker *worker);
    void webAppsRecoverSiteConfigurationSnapshotSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsResetProductionSlotConfigCallback(OAIHttpRequestWorker *worker);
    void webAppsResetSlotConfigurationSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsRestartCallback(OAIHttpRequestWorker *worker);
    void webAppsRestartSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsRestoreCallback(OAIHttpRequestWorker *worker);
    void webAppsRestoreFromBackupBlobCallback(OAIHttpRequestWorker *worker);
    void webAppsRestoreFromBackupBlobSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsRestoreFromDeletedAppCallback(OAIHttpRequestWorker *worker);
    void webAppsRestoreFromDeletedAppSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsRestoreSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsRestoreSnapshotCallback(OAIHttpRequestWorker *worker);
    void webAppsRestoreSnapshotSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsRunTriggeredWebJobCallback(OAIHttpRequestWorker *worker);
    void webAppsRunTriggeredWebJobSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsStartCallback(OAIHttpRequestWorker *worker);
    void webAppsStartContinuousWebJobCallback(OAIHttpRequestWorker *worker);
    void webAppsStartContinuousWebJobSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsStartNetworkTraceCallback(OAIHttpRequestWorker *worker);
    void webAppsStartNetworkTraceSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsStartSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsStartWebSiteNetworkTraceCallback(OAIHttpRequestWorker *worker);
    void webAppsStartWebSiteNetworkTraceOperationCallback(OAIHttpRequestWorker *worker);
    void webAppsStartWebSiteNetworkTraceOperationSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsStartWebSiteNetworkTraceSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsStopCallback(OAIHttpRequestWorker *worker);
    void webAppsStopContinuousWebJobCallback(OAIHttpRequestWorker *worker);
    void webAppsStopContinuousWebJobSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsStopNetworkTraceCallback(OAIHttpRequestWorker *worker);
    void webAppsStopNetworkTraceSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsStopSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsStopWebSiteNetworkTraceCallback(OAIHttpRequestWorker *worker);
    void webAppsStopWebSiteNetworkTraceSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsSwapSlotSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsSwapSlotWithProductionCallback(OAIHttpRequestWorker *worker);
    void webAppsSyncFunctionTriggersCallback(OAIHttpRequestWorker *worker);
    void webAppsSyncFunctionTriggersSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsSyncRepositoryCallback(OAIHttpRequestWorker *worker);
    void webAppsSyncRepositorySlotCallback(OAIHttpRequestWorker *worker);
    void webAppsUpdateCallback(OAIHttpRequestWorker *worker);
    void webAppsUpdateApplicationSettingsCallback(OAIHttpRequestWorker *worker);
    void webAppsUpdateApplicationSettingsSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsUpdateAuthSettingsCallback(OAIHttpRequestWorker *worker);
    void webAppsUpdateAuthSettingsSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsUpdateAzureStorageAccountsCallback(OAIHttpRequestWorker *worker);
    void webAppsUpdateAzureStorageAccountsSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsUpdateBackupConfigurationCallback(OAIHttpRequestWorker *worker);
    void webAppsUpdateBackupConfigurationSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsUpdateConfigurationCallback(OAIHttpRequestWorker *worker);
    void webAppsUpdateConfigurationSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsUpdateConnectionStringsCallback(OAIHttpRequestWorker *worker);
    void webAppsUpdateConnectionStringsSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsUpdateDiagnosticLogsConfigCallback(OAIHttpRequestWorker *worker);
    void webAppsUpdateDiagnosticLogsConfigSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsUpdateDomainOwnershipIdentifierCallback(OAIHttpRequestWorker *worker);
    void webAppsUpdateDomainOwnershipIdentifierSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsUpdateHybridConnectionCallback(OAIHttpRequestWorker *worker);
    void webAppsUpdateHybridConnectionSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsUpdateMetadataCallback(OAIHttpRequestWorker *worker);
    void webAppsUpdateMetadataSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsUpdatePremierAddOnCallback(OAIHttpRequestWorker *worker);
    void webAppsUpdatePremierAddOnSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsUpdateRelayServiceConnectionCallback(OAIHttpRequestWorker *worker);
    void webAppsUpdateRelayServiceConnectionSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsUpdateSitePushSettingsCallback(OAIHttpRequestWorker *worker);
    void webAppsUpdateSitePushSettingsSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsUpdateSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsUpdateSlotConfigurationNamesCallback(OAIHttpRequestWorker *worker);
    void webAppsUpdateSourceControlCallback(OAIHttpRequestWorker *worker);
    void webAppsUpdateSourceControlSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsUpdateSwiftVirtualNetworkConnectionCallback(OAIHttpRequestWorker *worker);
    void webAppsUpdateSwiftVirtualNetworkConnectionSlotCallback(OAIHttpRequestWorker *worker);
    void webAppsUpdateVnetConnectionCallback(OAIHttpRequestWorker *worker);
    void webAppsUpdateVnetConnectionGatewayCallback(OAIHttpRequestWorker *worker);
    void webAppsUpdateVnetConnectionGatewaySlotCallback(OAIHttpRequestWorker *worker);
    void webAppsUpdateVnetConnectionSlotCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void webAppsAddPremierAddOnSignal(OAIPremierAddOn summary);
    void webAppsAddPremierAddOnSlotSignal(OAIPremierAddOn summary);
    void webAppsAnalyzeCustomHostnameSignal(OAICustomHostnameAnalysisResult summary);
    void webAppsAnalyzeCustomHostnameSlotSignal(OAICustomHostnameAnalysisResult summary);
    void webAppsApplySlotConfigToProductionSignal();
    void webAppsApplySlotConfigurationSlotSignal();
    void webAppsBackupSignal(OAIBackupItem summary);
    void webAppsBackupSlotSignal(OAIBackupItem summary);
    void webAppsCreateDeploymentSignal(OAIDeployment summary);
    void webAppsCreateDeploymentSlotSignal(OAIDeployment summary);
    void webAppsCreateFunctionSignal(OAIFunctionEnvelope summary);
    void webAppsCreateInstanceFunctionSlotSignal(OAIFunctionEnvelope summary);
    void webAppsCreateInstanceMSDeployOperationSignal(OAIMSDeployStatus summary);
    void webAppsCreateInstanceMSDeployOperationSlotSignal(OAIMSDeployStatus summary);
    void webAppsCreateMSDeployOperationSignal(OAIMSDeployStatus summary);
    void webAppsCreateMSDeployOperationSlotSignal(OAIMSDeployStatus summary);
    void webAppsCreateOrUpdateSignal(OAIWebApps_Get_200_response summary);
    void webAppsCreateOrUpdateConfigurationSignal(OAISiteConfigResource summary);
    void webAppsCreateOrUpdateConfigurationSlotSignal(OAISiteConfigResource summary);
    void webAppsCreateOrUpdateDomainOwnershipIdentifierSignal(OAIWebApps_GetDomainOwnershipIdentifier_200_response summary);
    void webAppsCreateOrUpdateDomainOwnershipIdentifierSlotSignal(OAIWebApps_GetDomainOwnershipIdentifier_200_response summary);
    void webAppsCreateOrUpdateHostNameBindingSignal(OAIHostNameBinding summary);
    void webAppsCreateOrUpdateHostNameBindingSlotSignal(OAIHostNameBinding summary);
    void webAppsCreateOrUpdateHybridConnectionSignal(OAIWebApps_GetHybridConnection_200_response summary);
    void webAppsCreateOrUpdateHybridConnectionSlotSignal(OAIWebApps_GetHybridConnection_200_response summary);
    void webAppsCreateOrUpdatePublicCertificateSignal(OAIPublicCertificate summary);
    void webAppsCreateOrUpdatePublicCertificateSlotSignal(OAIPublicCertificate summary);
    void webAppsCreateOrUpdateRelayServiceConnectionSignal(OAIRelayServiceConnectionEntity summary);
    void webAppsCreateOrUpdateRelayServiceConnectionSlotSignal(OAIRelayServiceConnectionEntity summary);
    void webAppsCreateOrUpdateSlotSignal(OAIWebApps_Get_200_response summary);
    void webAppsCreateOrUpdateSourceControlSignal(OAISiteSourceControl summary);
    void webAppsCreateOrUpdateSourceControlSlotSignal(OAISiteSourceControl summary);
    void webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSignal(OAISwiftVirtualNetwork summary);
    void webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlotSignal(OAISwiftVirtualNetwork summary);
    void webAppsCreateOrUpdateVnetConnectionSignal(OAIWebApps_GetVnetConnectionSlot_200_response summary);
    void webAppsCreateOrUpdateVnetConnectionGatewaySignal(OAIWebApps_GetVnetConnectionGatewaySlot_200_response summary);
    void webAppsCreateOrUpdateVnetConnectionGatewaySlotSignal(OAIWebApps_GetVnetConnectionGatewaySlot_200_response summary);
    void webAppsCreateOrUpdateVnetConnectionSlotSignal(OAIWebApps_GetVnetConnectionSlot_200_response summary);
    void webAppsDeleteSignal();
    void webAppsDeleteBackupSignal();
    void webAppsDeleteBackupConfigurationSignal();
    void webAppsDeleteBackupConfigurationSlotSignal();
    void webAppsDeleteBackupSlotSignal();
    void webAppsDeleteContinuousWebJobSignal();
    void webAppsDeleteContinuousWebJobSlotSignal();
    void webAppsDeleteDeploymentSignal();
    void webAppsDeleteDeploymentSlotSignal();
    void webAppsDeleteDomainOwnershipIdentifierSignal();
    void webAppsDeleteDomainOwnershipIdentifierSlotSignal();
    void webAppsDeleteFunctionSignal();
    void webAppsDeleteHostNameBindingSignal();
    void webAppsDeleteHostNameBindingSlotSignal();
    void webAppsDeleteHybridConnectionSignal();
    void webAppsDeleteHybridConnectionSlotSignal();
    void webAppsDeleteInstanceFunctionSlotSignal();
    void webAppsDeleteInstanceProcessSignal();
    void webAppsDeleteInstanceProcessSlotSignal();
    void webAppsDeletePremierAddOnSignal();
    void webAppsDeletePremierAddOnSlotSignal();
    void webAppsDeleteProcessSignal();
    void webAppsDeleteProcessSlotSignal();
    void webAppsDeletePublicCertificateSignal();
    void webAppsDeletePublicCertificateSlotSignal();
    void webAppsDeleteRelayServiceConnectionSignal();
    void webAppsDeleteRelayServiceConnectionSlotSignal();
    void webAppsDeleteSiteExtensionSignal();
    void webAppsDeleteSiteExtensionSlotSignal();
    void webAppsDeleteSlotSignal();
    void webAppsDeleteSourceControlSignal();
    void webAppsDeleteSourceControlSlotSignal();
    void webAppsDeleteSwiftVirtualNetworkSignal();
    void webAppsDeleteSwiftVirtualNetworkSlotSignal();
    void webAppsDeleteTriggeredWebJobSignal();
    void webAppsDeleteTriggeredWebJobSlotSignal();
    void webAppsDeleteVnetConnectionSignal();
    void webAppsDeleteVnetConnectionSlotSignal();
    void webAppsDiscoverBackupSignal(OAIRestoreRequest summary);
    void webAppsDiscoverBackupSlotSignal(OAIRestoreRequest summary);
    void webAppsGenerateNewSitePublishingPasswordSignal();
    void webAppsGenerateNewSitePublishingPasswordSlotSignal();
    void webAppsGetSignal(OAIWebApps_Get_200_response summary);
    void webAppsGetAuthSettingsSignal(OAISiteAuthSettings summary);
    void webAppsGetAuthSettingsSlotSignal(OAISiteAuthSettings summary);
    void webAppsGetBackupConfigurationSignal(OAIBackupRequest summary);
    void webAppsGetBackupConfigurationSlotSignal(OAIBackupRequest summary);
    void webAppsGetBackupStatusSignal(OAIBackupItem summary);
    void webAppsGetBackupStatusSlotSignal(OAIBackupItem summary);
    void webAppsGetConfigurationSignal(OAISiteConfigResource summary);
    void webAppsGetConfigurationSlotSignal(OAISiteConfigResource summary);
    void webAppsGetConfigurationSnapshotSignal(OAISiteConfigResource summary);
    void webAppsGetConfigurationSnapshotSlotSignal(OAISiteConfigResource summary);
    void webAppsGetContainerLogsZipSignal(OAIHttpFileElement summary);
    void webAppsGetContainerLogsZipSlotSignal(OAIHttpFileElement summary);
    void webAppsGetContinuousWebJobSignal(OAIContinuousWebJob summary);
    void webAppsGetContinuousWebJobSlotSignal(OAIContinuousWebJob summary);
    void webAppsGetDeploymentSignal(OAIDeployment summary);
    void webAppsGetDeploymentSlotSignal(OAIDeployment summary);
    void webAppsGetDiagnosticLogsConfigurationSignal(OAISiteLogsConfig summary);
    void webAppsGetDiagnosticLogsConfigurationSlotSignal(OAISiteLogsConfig summary);
    void webAppsGetDomainOwnershipIdentifierSignal(OAIWebApps_GetDomainOwnershipIdentifier_200_response summary);
    void webAppsGetDomainOwnershipIdentifierSlotSignal(OAIWebApps_GetDomainOwnershipIdentifier_200_response summary);
    void webAppsGetFunctionSignal(OAIFunctionEnvelope summary);
    void webAppsGetFunctionsAdminTokenSignal(QString summary);
    void webAppsGetFunctionsAdminTokenSlotSignal(QString summary);
    void webAppsGetHostNameBindingSignal(OAIHostNameBinding summary);
    void webAppsGetHostNameBindingSlotSignal(OAIHostNameBinding summary);
    void webAppsGetHybridConnectionSignal(OAIWebApps_GetHybridConnection_200_response summary);
    void webAppsGetHybridConnectionSlotSignal(OAIWebApps_GetHybridConnection_200_response summary);
    void webAppsGetInstanceFunctionSlotSignal(OAIFunctionEnvelope summary);
    void webAppsGetInstanceMSDeployLogSignal(OAIMSDeployLog summary);
    void webAppsGetInstanceMSDeployLogSlotSignal(OAIMSDeployLog summary);
    void webAppsGetInstanceMsDeployStatusSignal(OAIMSDeployStatus summary);
    void webAppsGetInstanceMsDeployStatusSlotSignal(OAIMSDeployStatus summary);
    void webAppsGetInstanceProcessSignal(OAIProcessInfo summary);
    void webAppsGetInstanceProcessDumpSignal(OAIHttpFileElement summary);
    void webAppsGetInstanceProcessDumpSlotSignal(OAIHttpFileElement summary);
    void webAppsGetInstanceProcessModuleSignal(OAIProcessModuleInfo summary);
    void webAppsGetInstanceProcessModuleSlotSignal(OAIProcessModuleInfo summary);
    void webAppsGetInstanceProcessSlotSignal(OAIProcessInfo summary);
    void webAppsGetInstanceProcessThreadSignal(OAIProcessThreadInfo summary);
    void webAppsGetInstanceProcessThreadSlotSignal(OAIProcessThreadInfo summary);
    void webAppsGetMSDeployLogSignal(OAIMSDeployLog summary);
    void webAppsGetMSDeployLogSlotSignal(OAIMSDeployLog summary);
    void webAppsGetMSDeployStatusSignal(OAIMSDeployStatus summary);
    void webAppsGetMSDeployStatusSlotSignal(OAIMSDeployStatus summary);
    void webAppsGetMigrateMySqlStatusSignal(OAIMigrateMySqlStatus summary);
    void webAppsGetMigrateMySqlStatusSlotSignal(OAIMigrateMySqlStatus summary);
    void webAppsGetNetworkTraceOperationSignal(QList<OAINetworkTrace> summary);
    void webAppsGetNetworkTraceOperationSlotSignal(QList<OAINetworkTrace> summary);
    void webAppsGetNetworkTraceOperationSlotV2Signal(QList<OAINetworkTrace> summary);
    void webAppsGetNetworkTraceOperationV2Signal(QList<OAINetworkTrace> summary);
    void webAppsGetNetworkTracesSignal(QList<OAINetworkTrace> summary);
    void webAppsGetNetworkTracesSlotSignal(QList<OAINetworkTrace> summary);
    void webAppsGetNetworkTracesSlotV2Signal(QList<OAINetworkTrace> summary);
    void webAppsGetNetworkTracesV2Signal(QList<OAINetworkTrace> summary);
    void webAppsGetPremierAddOnSignal(OAIPremierAddOn summary);
    void webAppsGetPremierAddOnSlotSignal(OAIPremierAddOn summary);
    void webAppsGetPrivateAccessSignal(OAIPrivateAccess summary);
    void webAppsGetPrivateAccessSlotSignal(OAIPrivateAccess summary);
    void webAppsGetProcessSignal(OAIProcessInfo summary);
    void webAppsGetProcessDumpSignal(OAIHttpFileElement summary);
    void webAppsGetProcessDumpSlotSignal(OAIHttpFileElement summary);
    void webAppsGetProcessModuleSignal(OAIProcessModuleInfo summary);
    void webAppsGetProcessModuleSlotSignal(OAIProcessModuleInfo summary);
    void webAppsGetProcessSlotSignal(OAIProcessInfo summary);
    void webAppsGetProcessThreadSignal(OAIProcessThreadInfo summary);
    void webAppsGetProcessThreadSlotSignal(OAIProcessThreadInfo summary);
    void webAppsGetPublicCertificateSignal(OAIPublicCertificate summary);
    void webAppsGetPublicCertificateSlotSignal(OAIPublicCertificate summary);
    void webAppsGetRelayServiceConnectionSignal(OAIRelayServiceConnectionEntity summary);
    void webAppsGetRelayServiceConnectionSlotSignal(OAIRelayServiceConnectionEntity summary);
    void webAppsGetSiteExtensionSignal(OAISiteExtensionInfo summary);
    void webAppsGetSiteExtensionSlotSignal(OAISiteExtensionInfo summary);
    void webAppsGetSitePhpErrorLogFlagSignal(OAISitePhpErrorLogFlag summary);
    void webAppsGetSitePhpErrorLogFlagSlotSignal(OAISitePhpErrorLogFlag summary);
    void webAppsGetSlotSignal(OAIWebApps_Get_200_response summary);
    void webAppsGetSourceControlSignal(OAISiteSourceControl summary);
    void webAppsGetSourceControlSlotSignal(OAISiteSourceControl summary);
    void webAppsGetSwiftVirtualNetworkConnectionSignal(OAISwiftVirtualNetwork summary);
    void webAppsGetSwiftVirtualNetworkConnectionSlotSignal(OAISwiftVirtualNetwork summary);
    void webAppsGetTriggeredWebJobSignal(OAITriggeredWebJob summary);
    void webAppsGetTriggeredWebJobHistorySignal(OAITriggeredJobHistory summary);
    void webAppsGetTriggeredWebJobHistorySlotSignal(OAITriggeredJobHistory summary);
    void webAppsGetTriggeredWebJobSlotSignal(OAITriggeredWebJob summary);
    void webAppsGetVnetConnectionSignal(OAIWebApps_GetVnetConnectionSlot_200_response summary);
    void webAppsGetVnetConnectionGatewaySignal(OAIWebApps_GetVnetConnectionGatewaySlot_200_response summary);
    void webAppsGetVnetConnectionGatewaySlotSignal(OAIWebApps_GetVnetConnectionGatewaySlot_200_response summary);
    void webAppsGetVnetConnectionSlotSignal(OAIWebApps_GetVnetConnectionSlot_200_response summary);
    void webAppsGetWebJobSignal(OAIWebJob summary);
    void webAppsGetWebJobSlotSignal(OAIWebJob summary);
    void webAppsGetWebSiteContainerLogsSignal(OAIHttpFileElement summary);
    void webAppsGetWebSiteContainerLogsSlotSignal(OAIHttpFileElement summary);
    void webAppsInstallSiteExtensionSignal(OAISiteExtensionInfo summary);
    void webAppsInstallSiteExtensionSlotSignal(OAISiteExtensionInfo summary);
    void webAppsIsCloneableSignal(OAISiteCloneability summary);
    void webAppsIsCloneableSlotSignal(OAISiteCloneability summary);
    void webAppsListSignal(OAIWebApps_List_200_response summary);
    void webAppsListApplicationSettingsSignal(OAIStringDictionary summary);
    void webAppsListApplicationSettingsSlotSignal(OAIStringDictionary summary);
    void webAppsListAzureStorageAccountsSignal(OAIAzureStoragePropertyDictionaryResource summary);
    void webAppsListAzureStorageAccountsSlotSignal(OAIAzureStoragePropertyDictionaryResource summary);
    void webAppsListBackupStatusSecretsSignal(OAIBackupItem summary);
    void webAppsListBackupStatusSecretsSlotSignal(OAIBackupItem summary);
    void webAppsListBackupsSignal(OAIBackupItemCollection summary);
    void webAppsListBackupsSlotSignal(OAIBackupItemCollection summary);
    void webAppsListByResourceGroupSignal(OAIWebApps_List_200_response summary);
    void webAppsListConfigurationSnapshotInfoSignal(OAISiteConfigurationSnapshotInfoCollection summary);
    void webAppsListConfigurationSnapshotInfoSlotSignal(OAISiteConfigurationSnapshotInfoCollection summary);
    void webAppsListConfigurationsSignal(OAISiteConfigResourceCollection summary);
    void webAppsListConfigurationsSlotSignal(OAISiteConfigResourceCollection summary);
    void webAppsListConnectionStringsSignal(OAIConnectionStringDictionary summary);
    void webAppsListConnectionStringsSlotSignal(OAIConnectionStringDictionary summary);
    void webAppsListContinuousWebJobsSignal(OAIContinuousWebJobCollection summary);
    void webAppsListContinuousWebJobsSlotSignal(OAIContinuousWebJobCollection summary);
    void webAppsListDeploymentLogSignal(OAIDeployment summary);
    void webAppsListDeploymentLogSlotSignal(OAIDeployment summary);
    void webAppsListDeploymentsSignal(OAIDeploymentCollection summary);
    void webAppsListDeploymentsSlotSignal(OAIDeploymentCollection summary);
    void webAppsListDomainOwnershipIdentifiersSignal(OAIWebApps_ListDomainOwnershipIdentifiers_200_response summary);
    void webAppsListDomainOwnershipIdentifiersSlotSignal(OAIWebApps_ListDomainOwnershipIdentifiers_200_response summary);
    void webAppsListFunctionSecretsSignal(OAIFunctionSecrets summary);
    void webAppsListFunctionSecretsSlotSignal(OAIFunctionSecrets summary);
    void webAppsListFunctionsSignal(OAIFunctionEnvelopeCollection summary);
    void webAppsListHostNameBindingsSignal(OAIHostNameBindingCollection summary);
    void webAppsListHostNameBindingsSlotSignal(OAIHostNameBindingCollection summary);
    void webAppsListHybridConnectionKeysSignal(OAIWebApps_ListHybridConnectionKeys_200_response summary);
    void webAppsListHybridConnectionKeysSlotSignal(OAIWebApps_ListHybridConnectionKeys_200_response summary);
    void webAppsListHybridConnectionsSignal(OAIWebApps_GetHybridConnection_200_response summary);
    void webAppsListHybridConnectionsSlotSignal(OAIWebApps_GetHybridConnection_200_response summary);
    void webAppsListInstanceFunctionsSlotSignal(OAIFunctionEnvelopeCollection summary);
    void webAppsListInstanceIdentifiersSignal(OAIWebAppInstanceCollection summary);
    void webAppsListInstanceIdentifiersSlotSignal(OAIWebAppInstanceCollection summary);
    void webAppsListInstanceProcessModulesSignal(OAIProcessModuleInfoCollection summary);
    void webAppsListInstanceProcessModulesSlotSignal(OAIProcessModuleInfoCollection summary);
    void webAppsListInstanceProcessThreadsSignal(OAIProcessThreadInfoCollection summary);
    void webAppsListInstanceProcessThreadsSlotSignal(OAIProcessThreadInfoCollection summary);
    void webAppsListInstanceProcessesSignal(OAIProcessInfoCollection summary);
    void webAppsListInstanceProcessesSlotSignal(OAIProcessInfoCollection summary);
    void webAppsListMetadataSignal(OAIStringDictionary summary);
    void webAppsListMetadataSlotSignal(OAIStringDictionary summary);
    void webAppsListMetricDefinitionsSignal(OAIWebApps_ListMetricDefinitions_200_response summary);
    void webAppsListMetricDefinitionsSlotSignal(OAIWebApps_ListMetricDefinitions_200_response summary);
    void webAppsListMetricsSignal(OAIWebApps_ListMetrics_200_response summary);
    void webAppsListMetricsSlotSignal(OAIWebApps_ListMetrics_200_response summary);
    void webAppsListNetworkFeaturesSignal(OAINetworkFeatures summary);
    void webAppsListNetworkFeaturesSlotSignal(OAINetworkFeatures summary);
    void webAppsListPerfMonCountersSignal(OAIPerfMonCounterCollection summary);
    void webAppsListPerfMonCountersSlotSignal(OAIPerfMonCounterCollection summary);
    void webAppsListPremierAddOnsSignal(OAIPremierAddOn summary);
    void webAppsListPremierAddOnsSlotSignal(OAIPremierAddOn summary);
    void webAppsListProcessModulesSignal(OAIProcessModuleInfoCollection summary);
    void webAppsListProcessModulesSlotSignal(OAIProcessModuleInfoCollection summary);
    void webAppsListProcessThreadsSignal(OAIProcessThreadInfoCollection summary);
    void webAppsListProcessThreadsSlotSignal(OAIProcessThreadInfoCollection summary);
    void webAppsListProcessesSignal(OAIProcessInfoCollection summary);
    void webAppsListProcessesSlotSignal(OAIProcessInfoCollection summary);
    void webAppsListPublicCertificatesSignal(OAIPublicCertificateCollection summary);
    void webAppsListPublicCertificatesSlotSignal(OAIPublicCertificateCollection summary);
    void webAppsListPublishingCredentialsSignal(OAIWebApps_ListPublishingCredentials_200_response summary);
    void webAppsListPublishingCredentialsSlotSignal(OAIWebApps_ListPublishingCredentials_200_response summary);
    void webAppsListPublishingProfileXmlWithSecretsSignal(OAIHttpFileElement summary);
    void webAppsListPublishingProfileXmlWithSecretsSlotSignal(OAIHttpFileElement summary);
    void webAppsListRelayServiceConnectionsSignal(OAIRelayServiceConnectionEntity summary);
    void webAppsListRelayServiceConnectionsSlotSignal(OAIRelayServiceConnectionEntity summary);
    void webAppsListSiteExtensionsSignal(OAISiteExtensionInfoCollection summary);
    void webAppsListSiteExtensionsSlotSignal(OAISiteExtensionInfoCollection summary);
    void webAppsListSitePushSettingsSignal(OAIWebApps_UpdateSitePushSettings_request summary);
    void webAppsListSitePushSettingsSlotSignal(OAIWebApps_UpdateSitePushSettings_request summary);
    void webAppsListSlotConfigurationNamesSignal(OAISlotConfigNamesResource summary);
    void webAppsListSlotDifferencesFromProductionSignal(OAISlotDifferenceCollection summary);
    void webAppsListSlotDifferencesSlotSignal(OAISlotDifferenceCollection summary);
    void webAppsListSlotsSignal(OAIWebApps_List_200_response summary);
    void webAppsListSnapshotsSignal(OAISnapshotCollection summary);
    void webAppsListSnapshotsFromDRSecondarySignal(OAISnapshotCollection summary);
    void webAppsListSnapshotsFromDRSecondarySlotSignal(OAISnapshotCollection summary);
    void webAppsListSnapshotsSlotSignal(OAISnapshotCollection summary);
    void webAppsListSyncFunctionTriggersSignal(OAIFunctionSecrets summary);
    void webAppsListSyncFunctionTriggersSlotSignal(OAIFunctionSecrets summary);
    void webAppsListTriggeredWebJobHistorySignal(OAITriggeredJobHistoryCollection summary);
    void webAppsListTriggeredWebJobHistorySlotSignal(OAITriggeredJobHistoryCollection summary);
    void webAppsListTriggeredWebJobsSignal(OAITriggeredWebJobCollection summary);
    void webAppsListTriggeredWebJobsSlotSignal(OAITriggeredWebJobCollection summary);
    void webAppsListUsagesSignal(OAIWebApps_ListUsagesSlot_200_response summary);
    void webAppsListUsagesSlotSignal(OAIWebApps_ListUsagesSlot_200_response summary);
    void webAppsListVnetConnectionsSignal(QList<OAIWebApps_ListVnetConnectionsSlot_200_response_inner> summary);
    void webAppsListVnetConnectionsSlotSignal(QList<OAIWebApps_ListVnetConnectionsSlot_200_response_inner> summary);
    void webAppsListWebJobsSignal(OAIWebJobCollection summary);
    void webAppsListWebJobsSlotSignal(OAIWebJobCollection summary);
    void webAppsMigrateMySqlSignal(OAIWebApps_MigrateMySql_200_response summary);
    void webAppsMigrateStorageSignal(OAIStorageMigrationResponse summary);
    void webAppsPutPrivateAccessVnetSignal(OAIPrivateAccess summary);
    void webAppsPutPrivateAccessVnetSlotSignal(OAIPrivateAccess summary);
    void webAppsRecoverSiteConfigurationSnapshotSignal();
    void webAppsRecoverSiteConfigurationSnapshotSlotSignal();
    void webAppsResetProductionSlotConfigSignal();
    void webAppsResetSlotConfigurationSlotSignal();
    void webAppsRestartSignal();
    void webAppsRestartSlotSignal();
    void webAppsRestoreSignal();
    void webAppsRestoreFromBackupBlobSignal();
    void webAppsRestoreFromBackupBlobSlotSignal();
    void webAppsRestoreFromDeletedAppSignal();
    void webAppsRestoreFromDeletedAppSlotSignal();
    void webAppsRestoreSlotSignal();
    void webAppsRestoreSnapshotSignal();
    void webAppsRestoreSnapshotSlotSignal();
    void webAppsRunTriggeredWebJobSignal();
    void webAppsRunTriggeredWebJobSlotSignal();
    void webAppsStartSignal();
    void webAppsStartContinuousWebJobSignal();
    void webAppsStartContinuousWebJobSlotSignal();
    void webAppsStartNetworkTraceSignal(QList<OAINetworkTrace> summary);
    void webAppsStartNetworkTraceSlotSignal(QList<OAINetworkTrace> summary);
    void webAppsStartSlotSignal();
    void webAppsStartWebSiteNetworkTraceSignal(QString summary);
    void webAppsStartWebSiteNetworkTraceOperationSignal(QList<OAINetworkTrace> summary);
    void webAppsStartWebSiteNetworkTraceOperationSlotSignal(QList<OAINetworkTrace> summary);
    void webAppsStartWebSiteNetworkTraceSlotSignal(QString summary);
    void webAppsStopSignal();
    void webAppsStopContinuousWebJobSignal();
    void webAppsStopContinuousWebJobSlotSignal();
    void webAppsStopNetworkTraceSignal();
    void webAppsStopNetworkTraceSlotSignal();
    void webAppsStopSlotSignal();
    void webAppsStopWebSiteNetworkTraceSignal();
    void webAppsStopWebSiteNetworkTraceSlotSignal();
    void webAppsSwapSlotSlotSignal();
    void webAppsSwapSlotWithProductionSignal();
    void webAppsSyncFunctionTriggersSignal();
    void webAppsSyncFunctionTriggersSlotSignal();
    void webAppsSyncRepositorySignal();
    void webAppsSyncRepositorySlotSignal();
    void webAppsUpdateSignal(OAIWebApps_Get_200_response summary);
    void webAppsUpdateApplicationSettingsSignal(OAIStringDictionary summary);
    void webAppsUpdateApplicationSettingsSlotSignal(OAIStringDictionary summary);
    void webAppsUpdateAuthSettingsSignal(OAISiteAuthSettings summary);
    void webAppsUpdateAuthSettingsSlotSignal(OAISiteAuthSettings summary);
    void webAppsUpdateAzureStorageAccountsSignal(OAIAzureStoragePropertyDictionaryResource summary);
    void webAppsUpdateAzureStorageAccountsSlotSignal(OAIAzureStoragePropertyDictionaryResource summary);
    void webAppsUpdateBackupConfigurationSignal(OAIBackupRequest summary);
    void webAppsUpdateBackupConfigurationSlotSignal(OAIBackupRequest summary);
    void webAppsUpdateConfigurationSignal(OAISiteConfigResource summary);
    void webAppsUpdateConfigurationSlotSignal(OAISiteConfigResource summary);
    void webAppsUpdateConnectionStringsSignal(OAIConnectionStringDictionary summary);
    void webAppsUpdateConnectionStringsSlotSignal(OAIConnectionStringDictionary summary);
    void webAppsUpdateDiagnosticLogsConfigSignal(OAISiteLogsConfig summary);
    void webAppsUpdateDiagnosticLogsConfigSlotSignal(OAISiteLogsConfig summary);
    void webAppsUpdateDomainOwnershipIdentifierSignal(OAIWebApps_GetDomainOwnershipIdentifier_200_response summary);
    void webAppsUpdateDomainOwnershipIdentifierSlotSignal(OAIWebApps_GetDomainOwnershipIdentifier_200_response summary);
    void webAppsUpdateHybridConnectionSignal(OAIWebApps_GetHybridConnection_200_response summary);
    void webAppsUpdateHybridConnectionSlotSignal(OAIWebApps_GetHybridConnection_200_response summary);
    void webAppsUpdateMetadataSignal(OAIStringDictionary summary);
    void webAppsUpdateMetadataSlotSignal(OAIStringDictionary summary);
    void webAppsUpdatePremierAddOnSignal(OAIPremierAddOn summary);
    void webAppsUpdatePremierAddOnSlotSignal(OAIPremierAddOn summary);
    void webAppsUpdateRelayServiceConnectionSignal(OAIRelayServiceConnectionEntity summary);
    void webAppsUpdateRelayServiceConnectionSlotSignal(OAIRelayServiceConnectionEntity summary);
    void webAppsUpdateSitePushSettingsSignal(OAIWebApps_UpdateSitePushSettings_request summary);
    void webAppsUpdateSitePushSettingsSlotSignal(OAIWebApps_UpdateSitePushSettings_request summary);
    void webAppsUpdateSlotSignal(OAIWebApps_Get_200_response summary);
    void webAppsUpdateSlotConfigurationNamesSignal(OAISlotConfigNamesResource summary);
    void webAppsUpdateSourceControlSignal(OAISiteSourceControl summary);
    void webAppsUpdateSourceControlSlotSignal(OAISiteSourceControl summary);
    void webAppsUpdateSwiftVirtualNetworkConnectionSignal(OAISwiftVirtualNetwork summary);
    void webAppsUpdateSwiftVirtualNetworkConnectionSlotSignal(OAISwiftVirtualNetwork summary);
    void webAppsUpdateVnetConnectionSignal(OAIWebApps_GetVnetConnectionSlot_200_response summary);
    void webAppsUpdateVnetConnectionGatewaySignal(OAIWebApps_GetVnetConnectionGatewaySlot_200_response summary);
    void webAppsUpdateVnetConnectionGatewaySlotSignal(OAIWebApps_GetVnetConnectionGatewaySlot_200_response summary);
    void webAppsUpdateVnetConnectionSlotSignal(OAIWebApps_GetVnetConnectionSlot_200_response summary);


    void webAppsAddPremierAddOnSignalFull(OAIHttpRequestWorker *worker, OAIPremierAddOn summary);
    void webAppsAddPremierAddOnSlotSignalFull(OAIHttpRequestWorker *worker, OAIPremierAddOn summary);
    void webAppsAnalyzeCustomHostnameSignalFull(OAIHttpRequestWorker *worker, OAICustomHostnameAnalysisResult summary);
    void webAppsAnalyzeCustomHostnameSlotSignalFull(OAIHttpRequestWorker *worker, OAICustomHostnameAnalysisResult summary);
    void webAppsApplySlotConfigToProductionSignalFull(OAIHttpRequestWorker *worker);
    void webAppsApplySlotConfigurationSlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsBackupSignalFull(OAIHttpRequestWorker *worker, OAIBackupItem summary);
    void webAppsBackupSlotSignalFull(OAIHttpRequestWorker *worker, OAIBackupItem summary);
    void webAppsCreateDeploymentSignalFull(OAIHttpRequestWorker *worker, OAIDeployment summary);
    void webAppsCreateDeploymentSlotSignalFull(OAIHttpRequestWorker *worker, OAIDeployment summary);
    void webAppsCreateFunctionSignalFull(OAIHttpRequestWorker *worker, OAIFunctionEnvelope summary);
    void webAppsCreateInstanceFunctionSlotSignalFull(OAIHttpRequestWorker *worker, OAIFunctionEnvelope summary);
    void webAppsCreateInstanceMSDeployOperationSignalFull(OAIHttpRequestWorker *worker, OAIMSDeployStatus summary);
    void webAppsCreateInstanceMSDeployOperationSlotSignalFull(OAIHttpRequestWorker *worker, OAIMSDeployStatus summary);
    void webAppsCreateMSDeployOperationSignalFull(OAIHttpRequestWorker *worker, OAIMSDeployStatus summary);
    void webAppsCreateMSDeployOperationSlotSignalFull(OAIHttpRequestWorker *worker, OAIMSDeployStatus summary);
    void webAppsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_Get_200_response summary);
    void webAppsCreateOrUpdateConfigurationSignalFull(OAIHttpRequestWorker *worker, OAISiteConfigResource summary);
    void webAppsCreateOrUpdateConfigurationSlotSignalFull(OAIHttpRequestWorker *worker, OAISiteConfigResource summary);
    void webAppsCreateOrUpdateDomainOwnershipIdentifierSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_GetDomainOwnershipIdentifier_200_response summary);
    void webAppsCreateOrUpdateDomainOwnershipIdentifierSlotSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_GetDomainOwnershipIdentifier_200_response summary);
    void webAppsCreateOrUpdateHostNameBindingSignalFull(OAIHttpRequestWorker *worker, OAIHostNameBinding summary);
    void webAppsCreateOrUpdateHostNameBindingSlotSignalFull(OAIHttpRequestWorker *worker, OAIHostNameBinding summary);
    void webAppsCreateOrUpdateHybridConnectionSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_GetHybridConnection_200_response summary);
    void webAppsCreateOrUpdateHybridConnectionSlotSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_GetHybridConnection_200_response summary);
    void webAppsCreateOrUpdatePublicCertificateSignalFull(OAIHttpRequestWorker *worker, OAIPublicCertificate summary);
    void webAppsCreateOrUpdatePublicCertificateSlotSignalFull(OAIHttpRequestWorker *worker, OAIPublicCertificate summary);
    void webAppsCreateOrUpdateRelayServiceConnectionSignalFull(OAIHttpRequestWorker *worker, OAIRelayServiceConnectionEntity summary);
    void webAppsCreateOrUpdateRelayServiceConnectionSlotSignalFull(OAIHttpRequestWorker *worker, OAIRelayServiceConnectionEntity summary);
    void webAppsCreateOrUpdateSlotSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_Get_200_response summary);
    void webAppsCreateOrUpdateSourceControlSignalFull(OAIHttpRequestWorker *worker, OAISiteSourceControl summary);
    void webAppsCreateOrUpdateSourceControlSlotSignalFull(OAIHttpRequestWorker *worker, OAISiteSourceControl summary);
    void webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSignalFull(OAIHttpRequestWorker *worker, OAISwiftVirtualNetwork summary);
    void webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlotSignalFull(OAIHttpRequestWorker *worker, OAISwiftVirtualNetwork summary);
    void webAppsCreateOrUpdateVnetConnectionSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_GetVnetConnectionSlot_200_response summary);
    void webAppsCreateOrUpdateVnetConnectionGatewaySignalFull(OAIHttpRequestWorker *worker, OAIWebApps_GetVnetConnectionGatewaySlot_200_response summary);
    void webAppsCreateOrUpdateVnetConnectionGatewaySlotSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_GetVnetConnectionGatewaySlot_200_response summary);
    void webAppsCreateOrUpdateVnetConnectionSlotSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_GetVnetConnectionSlot_200_response summary);
    void webAppsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDeleteBackupSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDeleteBackupConfigurationSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDeleteBackupConfigurationSlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDeleteBackupSlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDeleteContinuousWebJobSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDeleteContinuousWebJobSlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDeleteDeploymentSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDeleteDeploymentSlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDeleteDomainOwnershipIdentifierSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDeleteDomainOwnershipIdentifierSlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDeleteFunctionSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDeleteHostNameBindingSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDeleteHostNameBindingSlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDeleteHybridConnectionSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDeleteHybridConnectionSlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDeleteInstanceFunctionSlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDeleteInstanceProcessSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDeleteInstanceProcessSlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDeletePremierAddOnSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDeletePremierAddOnSlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDeleteProcessSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDeleteProcessSlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDeletePublicCertificateSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDeletePublicCertificateSlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDeleteRelayServiceConnectionSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDeleteRelayServiceConnectionSlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDeleteSiteExtensionSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDeleteSiteExtensionSlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDeleteSlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDeleteSourceControlSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDeleteSourceControlSlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDeleteSwiftVirtualNetworkSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDeleteSwiftVirtualNetworkSlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDeleteTriggeredWebJobSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDeleteTriggeredWebJobSlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDeleteVnetConnectionSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDeleteVnetConnectionSlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsDiscoverBackupSignalFull(OAIHttpRequestWorker *worker, OAIRestoreRequest summary);
    void webAppsDiscoverBackupSlotSignalFull(OAIHttpRequestWorker *worker, OAIRestoreRequest summary);
    void webAppsGenerateNewSitePublishingPasswordSignalFull(OAIHttpRequestWorker *worker);
    void webAppsGenerateNewSitePublishingPasswordSlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsGetSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_Get_200_response summary);
    void webAppsGetAuthSettingsSignalFull(OAIHttpRequestWorker *worker, OAISiteAuthSettings summary);
    void webAppsGetAuthSettingsSlotSignalFull(OAIHttpRequestWorker *worker, OAISiteAuthSettings summary);
    void webAppsGetBackupConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIBackupRequest summary);
    void webAppsGetBackupConfigurationSlotSignalFull(OAIHttpRequestWorker *worker, OAIBackupRequest summary);
    void webAppsGetBackupStatusSignalFull(OAIHttpRequestWorker *worker, OAIBackupItem summary);
    void webAppsGetBackupStatusSlotSignalFull(OAIHttpRequestWorker *worker, OAIBackupItem summary);
    void webAppsGetConfigurationSignalFull(OAIHttpRequestWorker *worker, OAISiteConfigResource summary);
    void webAppsGetConfigurationSlotSignalFull(OAIHttpRequestWorker *worker, OAISiteConfigResource summary);
    void webAppsGetConfigurationSnapshotSignalFull(OAIHttpRequestWorker *worker, OAISiteConfigResource summary);
    void webAppsGetConfigurationSnapshotSlotSignalFull(OAIHttpRequestWorker *worker, OAISiteConfigResource summary);
    void webAppsGetContainerLogsZipSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void webAppsGetContainerLogsZipSlotSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void webAppsGetContinuousWebJobSignalFull(OAIHttpRequestWorker *worker, OAIContinuousWebJob summary);
    void webAppsGetContinuousWebJobSlotSignalFull(OAIHttpRequestWorker *worker, OAIContinuousWebJob summary);
    void webAppsGetDeploymentSignalFull(OAIHttpRequestWorker *worker, OAIDeployment summary);
    void webAppsGetDeploymentSlotSignalFull(OAIHttpRequestWorker *worker, OAIDeployment summary);
    void webAppsGetDiagnosticLogsConfigurationSignalFull(OAIHttpRequestWorker *worker, OAISiteLogsConfig summary);
    void webAppsGetDiagnosticLogsConfigurationSlotSignalFull(OAIHttpRequestWorker *worker, OAISiteLogsConfig summary);
    void webAppsGetDomainOwnershipIdentifierSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_GetDomainOwnershipIdentifier_200_response summary);
    void webAppsGetDomainOwnershipIdentifierSlotSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_GetDomainOwnershipIdentifier_200_response summary);
    void webAppsGetFunctionSignalFull(OAIHttpRequestWorker *worker, OAIFunctionEnvelope summary);
    void webAppsGetFunctionsAdminTokenSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void webAppsGetFunctionsAdminTokenSlotSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void webAppsGetHostNameBindingSignalFull(OAIHttpRequestWorker *worker, OAIHostNameBinding summary);
    void webAppsGetHostNameBindingSlotSignalFull(OAIHttpRequestWorker *worker, OAIHostNameBinding summary);
    void webAppsGetHybridConnectionSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_GetHybridConnection_200_response summary);
    void webAppsGetHybridConnectionSlotSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_GetHybridConnection_200_response summary);
    void webAppsGetInstanceFunctionSlotSignalFull(OAIHttpRequestWorker *worker, OAIFunctionEnvelope summary);
    void webAppsGetInstanceMSDeployLogSignalFull(OAIHttpRequestWorker *worker, OAIMSDeployLog summary);
    void webAppsGetInstanceMSDeployLogSlotSignalFull(OAIHttpRequestWorker *worker, OAIMSDeployLog summary);
    void webAppsGetInstanceMsDeployStatusSignalFull(OAIHttpRequestWorker *worker, OAIMSDeployStatus summary);
    void webAppsGetInstanceMsDeployStatusSlotSignalFull(OAIHttpRequestWorker *worker, OAIMSDeployStatus summary);
    void webAppsGetInstanceProcessSignalFull(OAIHttpRequestWorker *worker, OAIProcessInfo summary);
    void webAppsGetInstanceProcessDumpSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void webAppsGetInstanceProcessDumpSlotSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void webAppsGetInstanceProcessModuleSignalFull(OAIHttpRequestWorker *worker, OAIProcessModuleInfo summary);
    void webAppsGetInstanceProcessModuleSlotSignalFull(OAIHttpRequestWorker *worker, OAIProcessModuleInfo summary);
    void webAppsGetInstanceProcessSlotSignalFull(OAIHttpRequestWorker *worker, OAIProcessInfo summary);
    void webAppsGetInstanceProcessThreadSignalFull(OAIHttpRequestWorker *worker, OAIProcessThreadInfo summary);
    void webAppsGetInstanceProcessThreadSlotSignalFull(OAIHttpRequestWorker *worker, OAIProcessThreadInfo summary);
    void webAppsGetMSDeployLogSignalFull(OAIHttpRequestWorker *worker, OAIMSDeployLog summary);
    void webAppsGetMSDeployLogSlotSignalFull(OAIHttpRequestWorker *worker, OAIMSDeployLog summary);
    void webAppsGetMSDeployStatusSignalFull(OAIHttpRequestWorker *worker, OAIMSDeployStatus summary);
    void webAppsGetMSDeployStatusSlotSignalFull(OAIHttpRequestWorker *worker, OAIMSDeployStatus summary);
    void webAppsGetMigrateMySqlStatusSignalFull(OAIHttpRequestWorker *worker, OAIMigrateMySqlStatus summary);
    void webAppsGetMigrateMySqlStatusSlotSignalFull(OAIHttpRequestWorker *worker, OAIMigrateMySqlStatus summary);
    void webAppsGetNetworkTraceOperationSignalFull(OAIHttpRequestWorker *worker, QList<OAINetworkTrace> summary);
    void webAppsGetNetworkTraceOperationSlotSignalFull(OAIHttpRequestWorker *worker, QList<OAINetworkTrace> summary);
    void webAppsGetNetworkTraceOperationSlotV2SignalFull(OAIHttpRequestWorker *worker, QList<OAINetworkTrace> summary);
    void webAppsGetNetworkTraceOperationV2SignalFull(OAIHttpRequestWorker *worker, QList<OAINetworkTrace> summary);
    void webAppsGetNetworkTracesSignalFull(OAIHttpRequestWorker *worker, QList<OAINetworkTrace> summary);
    void webAppsGetNetworkTracesSlotSignalFull(OAIHttpRequestWorker *worker, QList<OAINetworkTrace> summary);
    void webAppsGetNetworkTracesSlotV2SignalFull(OAIHttpRequestWorker *worker, QList<OAINetworkTrace> summary);
    void webAppsGetNetworkTracesV2SignalFull(OAIHttpRequestWorker *worker, QList<OAINetworkTrace> summary);
    void webAppsGetPremierAddOnSignalFull(OAIHttpRequestWorker *worker, OAIPremierAddOn summary);
    void webAppsGetPremierAddOnSlotSignalFull(OAIHttpRequestWorker *worker, OAIPremierAddOn summary);
    void webAppsGetPrivateAccessSignalFull(OAIHttpRequestWorker *worker, OAIPrivateAccess summary);
    void webAppsGetPrivateAccessSlotSignalFull(OAIHttpRequestWorker *worker, OAIPrivateAccess summary);
    void webAppsGetProcessSignalFull(OAIHttpRequestWorker *worker, OAIProcessInfo summary);
    void webAppsGetProcessDumpSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void webAppsGetProcessDumpSlotSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void webAppsGetProcessModuleSignalFull(OAIHttpRequestWorker *worker, OAIProcessModuleInfo summary);
    void webAppsGetProcessModuleSlotSignalFull(OAIHttpRequestWorker *worker, OAIProcessModuleInfo summary);
    void webAppsGetProcessSlotSignalFull(OAIHttpRequestWorker *worker, OAIProcessInfo summary);
    void webAppsGetProcessThreadSignalFull(OAIHttpRequestWorker *worker, OAIProcessThreadInfo summary);
    void webAppsGetProcessThreadSlotSignalFull(OAIHttpRequestWorker *worker, OAIProcessThreadInfo summary);
    void webAppsGetPublicCertificateSignalFull(OAIHttpRequestWorker *worker, OAIPublicCertificate summary);
    void webAppsGetPublicCertificateSlotSignalFull(OAIHttpRequestWorker *worker, OAIPublicCertificate summary);
    void webAppsGetRelayServiceConnectionSignalFull(OAIHttpRequestWorker *worker, OAIRelayServiceConnectionEntity summary);
    void webAppsGetRelayServiceConnectionSlotSignalFull(OAIHttpRequestWorker *worker, OAIRelayServiceConnectionEntity summary);
    void webAppsGetSiteExtensionSignalFull(OAIHttpRequestWorker *worker, OAISiteExtensionInfo summary);
    void webAppsGetSiteExtensionSlotSignalFull(OAIHttpRequestWorker *worker, OAISiteExtensionInfo summary);
    void webAppsGetSitePhpErrorLogFlagSignalFull(OAIHttpRequestWorker *worker, OAISitePhpErrorLogFlag summary);
    void webAppsGetSitePhpErrorLogFlagSlotSignalFull(OAIHttpRequestWorker *worker, OAISitePhpErrorLogFlag summary);
    void webAppsGetSlotSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_Get_200_response summary);
    void webAppsGetSourceControlSignalFull(OAIHttpRequestWorker *worker, OAISiteSourceControl summary);
    void webAppsGetSourceControlSlotSignalFull(OAIHttpRequestWorker *worker, OAISiteSourceControl summary);
    void webAppsGetSwiftVirtualNetworkConnectionSignalFull(OAIHttpRequestWorker *worker, OAISwiftVirtualNetwork summary);
    void webAppsGetSwiftVirtualNetworkConnectionSlotSignalFull(OAIHttpRequestWorker *worker, OAISwiftVirtualNetwork summary);
    void webAppsGetTriggeredWebJobSignalFull(OAIHttpRequestWorker *worker, OAITriggeredWebJob summary);
    void webAppsGetTriggeredWebJobHistorySignalFull(OAIHttpRequestWorker *worker, OAITriggeredJobHistory summary);
    void webAppsGetTriggeredWebJobHistorySlotSignalFull(OAIHttpRequestWorker *worker, OAITriggeredJobHistory summary);
    void webAppsGetTriggeredWebJobSlotSignalFull(OAIHttpRequestWorker *worker, OAITriggeredWebJob summary);
    void webAppsGetVnetConnectionSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_GetVnetConnectionSlot_200_response summary);
    void webAppsGetVnetConnectionGatewaySignalFull(OAIHttpRequestWorker *worker, OAIWebApps_GetVnetConnectionGatewaySlot_200_response summary);
    void webAppsGetVnetConnectionGatewaySlotSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_GetVnetConnectionGatewaySlot_200_response summary);
    void webAppsGetVnetConnectionSlotSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_GetVnetConnectionSlot_200_response summary);
    void webAppsGetWebJobSignalFull(OAIHttpRequestWorker *worker, OAIWebJob summary);
    void webAppsGetWebJobSlotSignalFull(OAIHttpRequestWorker *worker, OAIWebJob summary);
    void webAppsGetWebSiteContainerLogsSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void webAppsGetWebSiteContainerLogsSlotSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void webAppsInstallSiteExtensionSignalFull(OAIHttpRequestWorker *worker, OAISiteExtensionInfo summary);
    void webAppsInstallSiteExtensionSlotSignalFull(OAIHttpRequestWorker *worker, OAISiteExtensionInfo summary);
    void webAppsIsCloneableSignalFull(OAIHttpRequestWorker *worker, OAISiteCloneability summary);
    void webAppsIsCloneableSlotSignalFull(OAIHttpRequestWorker *worker, OAISiteCloneability summary);
    void webAppsListSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_List_200_response summary);
    void webAppsListApplicationSettingsSignalFull(OAIHttpRequestWorker *worker, OAIStringDictionary summary);
    void webAppsListApplicationSettingsSlotSignalFull(OAIHttpRequestWorker *worker, OAIStringDictionary summary);
    void webAppsListAzureStorageAccountsSignalFull(OAIHttpRequestWorker *worker, OAIAzureStoragePropertyDictionaryResource summary);
    void webAppsListAzureStorageAccountsSlotSignalFull(OAIHttpRequestWorker *worker, OAIAzureStoragePropertyDictionaryResource summary);
    void webAppsListBackupStatusSecretsSignalFull(OAIHttpRequestWorker *worker, OAIBackupItem summary);
    void webAppsListBackupStatusSecretsSlotSignalFull(OAIHttpRequestWorker *worker, OAIBackupItem summary);
    void webAppsListBackupsSignalFull(OAIHttpRequestWorker *worker, OAIBackupItemCollection summary);
    void webAppsListBackupsSlotSignalFull(OAIHttpRequestWorker *worker, OAIBackupItemCollection summary);
    void webAppsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_List_200_response summary);
    void webAppsListConfigurationSnapshotInfoSignalFull(OAIHttpRequestWorker *worker, OAISiteConfigurationSnapshotInfoCollection summary);
    void webAppsListConfigurationSnapshotInfoSlotSignalFull(OAIHttpRequestWorker *worker, OAISiteConfigurationSnapshotInfoCollection summary);
    void webAppsListConfigurationsSignalFull(OAIHttpRequestWorker *worker, OAISiteConfigResourceCollection summary);
    void webAppsListConfigurationsSlotSignalFull(OAIHttpRequestWorker *worker, OAISiteConfigResourceCollection summary);
    void webAppsListConnectionStringsSignalFull(OAIHttpRequestWorker *worker, OAIConnectionStringDictionary summary);
    void webAppsListConnectionStringsSlotSignalFull(OAIHttpRequestWorker *worker, OAIConnectionStringDictionary summary);
    void webAppsListContinuousWebJobsSignalFull(OAIHttpRequestWorker *worker, OAIContinuousWebJobCollection summary);
    void webAppsListContinuousWebJobsSlotSignalFull(OAIHttpRequestWorker *worker, OAIContinuousWebJobCollection summary);
    void webAppsListDeploymentLogSignalFull(OAIHttpRequestWorker *worker, OAIDeployment summary);
    void webAppsListDeploymentLogSlotSignalFull(OAIHttpRequestWorker *worker, OAIDeployment summary);
    void webAppsListDeploymentsSignalFull(OAIHttpRequestWorker *worker, OAIDeploymentCollection summary);
    void webAppsListDeploymentsSlotSignalFull(OAIHttpRequestWorker *worker, OAIDeploymentCollection summary);
    void webAppsListDomainOwnershipIdentifiersSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_ListDomainOwnershipIdentifiers_200_response summary);
    void webAppsListDomainOwnershipIdentifiersSlotSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_ListDomainOwnershipIdentifiers_200_response summary);
    void webAppsListFunctionSecretsSignalFull(OAIHttpRequestWorker *worker, OAIFunctionSecrets summary);
    void webAppsListFunctionSecretsSlotSignalFull(OAIHttpRequestWorker *worker, OAIFunctionSecrets summary);
    void webAppsListFunctionsSignalFull(OAIHttpRequestWorker *worker, OAIFunctionEnvelopeCollection summary);
    void webAppsListHostNameBindingsSignalFull(OAIHttpRequestWorker *worker, OAIHostNameBindingCollection summary);
    void webAppsListHostNameBindingsSlotSignalFull(OAIHttpRequestWorker *worker, OAIHostNameBindingCollection summary);
    void webAppsListHybridConnectionKeysSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_ListHybridConnectionKeys_200_response summary);
    void webAppsListHybridConnectionKeysSlotSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_ListHybridConnectionKeys_200_response summary);
    void webAppsListHybridConnectionsSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_GetHybridConnection_200_response summary);
    void webAppsListHybridConnectionsSlotSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_GetHybridConnection_200_response summary);
    void webAppsListInstanceFunctionsSlotSignalFull(OAIHttpRequestWorker *worker, OAIFunctionEnvelopeCollection summary);
    void webAppsListInstanceIdentifiersSignalFull(OAIHttpRequestWorker *worker, OAIWebAppInstanceCollection summary);
    void webAppsListInstanceIdentifiersSlotSignalFull(OAIHttpRequestWorker *worker, OAIWebAppInstanceCollection summary);
    void webAppsListInstanceProcessModulesSignalFull(OAIHttpRequestWorker *worker, OAIProcessModuleInfoCollection summary);
    void webAppsListInstanceProcessModulesSlotSignalFull(OAIHttpRequestWorker *worker, OAIProcessModuleInfoCollection summary);
    void webAppsListInstanceProcessThreadsSignalFull(OAIHttpRequestWorker *worker, OAIProcessThreadInfoCollection summary);
    void webAppsListInstanceProcessThreadsSlotSignalFull(OAIHttpRequestWorker *worker, OAIProcessThreadInfoCollection summary);
    void webAppsListInstanceProcessesSignalFull(OAIHttpRequestWorker *worker, OAIProcessInfoCollection summary);
    void webAppsListInstanceProcessesSlotSignalFull(OAIHttpRequestWorker *worker, OAIProcessInfoCollection summary);
    void webAppsListMetadataSignalFull(OAIHttpRequestWorker *worker, OAIStringDictionary summary);
    void webAppsListMetadataSlotSignalFull(OAIHttpRequestWorker *worker, OAIStringDictionary summary);
    void webAppsListMetricDefinitionsSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_ListMetricDefinitions_200_response summary);
    void webAppsListMetricDefinitionsSlotSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_ListMetricDefinitions_200_response summary);
    void webAppsListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_ListMetrics_200_response summary);
    void webAppsListMetricsSlotSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_ListMetrics_200_response summary);
    void webAppsListNetworkFeaturesSignalFull(OAIHttpRequestWorker *worker, OAINetworkFeatures summary);
    void webAppsListNetworkFeaturesSlotSignalFull(OAIHttpRequestWorker *worker, OAINetworkFeatures summary);
    void webAppsListPerfMonCountersSignalFull(OAIHttpRequestWorker *worker, OAIPerfMonCounterCollection summary);
    void webAppsListPerfMonCountersSlotSignalFull(OAIHttpRequestWorker *worker, OAIPerfMonCounterCollection summary);
    void webAppsListPremierAddOnsSignalFull(OAIHttpRequestWorker *worker, OAIPremierAddOn summary);
    void webAppsListPremierAddOnsSlotSignalFull(OAIHttpRequestWorker *worker, OAIPremierAddOn summary);
    void webAppsListProcessModulesSignalFull(OAIHttpRequestWorker *worker, OAIProcessModuleInfoCollection summary);
    void webAppsListProcessModulesSlotSignalFull(OAIHttpRequestWorker *worker, OAIProcessModuleInfoCollection summary);
    void webAppsListProcessThreadsSignalFull(OAIHttpRequestWorker *worker, OAIProcessThreadInfoCollection summary);
    void webAppsListProcessThreadsSlotSignalFull(OAIHttpRequestWorker *worker, OAIProcessThreadInfoCollection summary);
    void webAppsListProcessesSignalFull(OAIHttpRequestWorker *worker, OAIProcessInfoCollection summary);
    void webAppsListProcessesSlotSignalFull(OAIHttpRequestWorker *worker, OAIProcessInfoCollection summary);
    void webAppsListPublicCertificatesSignalFull(OAIHttpRequestWorker *worker, OAIPublicCertificateCollection summary);
    void webAppsListPublicCertificatesSlotSignalFull(OAIHttpRequestWorker *worker, OAIPublicCertificateCollection summary);
    void webAppsListPublishingCredentialsSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_ListPublishingCredentials_200_response summary);
    void webAppsListPublishingCredentialsSlotSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_ListPublishingCredentials_200_response summary);
    void webAppsListPublishingProfileXmlWithSecretsSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void webAppsListPublishingProfileXmlWithSecretsSlotSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void webAppsListRelayServiceConnectionsSignalFull(OAIHttpRequestWorker *worker, OAIRelayServiceConnectionEntity summary);
    void webAppsListRelayServiceConnectionsSlotSignalFull(OAIHttpRequestWorker *worker, OAIRelayServiceConnectionEntity summary);
    void webAppsListSiteExtensionsSignalFull(OAIHttpRequestWorker *worker, OAISiteExtensionInfoCollection summary);
    void webAppsListSiteExtensionsSlotSignalFull(OAIHttpRequestWorker *worker, OAISiteExtensionInfoCollection summary);
    void webAppsListSitePushSettingsSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_UpdateSitePushSettings_request summary);
    void webAppsListSitePushSettingsSlotSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_UpdateSitePushSettings_request summary);
    void webAppsListSlotConfigurationNamesSignalFull(OAIHttpRequestWorker *worker, OAISlotConfigNamesResource summary);
    void webAppsListSlotDifferencesFromProductionSignalFull(OAIHttpRequestWorker *worker, OAISlotDifferenceCollection summary);
    void webAppsListSlotDifferencesSlotSignalFull(OAIHttpRequestWorker *worker, OAISlotDifferenceCollection summary);
    void webAppsListSlotsSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_List_200_response summary);
    void webAppsListSnapshotsSignalFull(OAIHttpRequestWorker *worker, OAISnapshotCollection summary);
    void webAppsListSnapshotsFromDRSecondarySignalFull(OAIHttpRequestWorker *worker, OAISnapshotCollection summary);
    void webAppsListSnapshotsFromDRSecondarySlotSignalFull(OAIHttpRequestWorker *worker, OAISnapshotCollection summary);
    void webAppsListSnapshotsSlotSignalFull(OAIHttpRequestWorker *worker, OAISnapshotCollection summary);
    void webAppsListSyncFunctionTriggersSignalFull(OAIHttpRequestWorker *worker, OAIFunctionSecrets summary);
    void webAppsListSyncFunctionTriggersSlotSignalFull(OAIHttpRequestWorker *worker, OAIFunctionSecrets summary);
    void webAppsListTriggeredWebJobHistorySignalFull(OAIHttpRequestWorker *worker, OAITriggeredJobHistoryCollection summary);
    void webAppsListTriggeredWebJobHistorySlotSignalFull(OAIHttpRequestWorker *worker, OAITriggeredJobHistoryCollection summary);
    void webAppsListTriggeredWebJobsSignalFull(OAIHttpRequestWorker *worker, OAITriggeredWebJobCollection summary);
    void webAppsListTriggeredWebJobsSlotSignalFull(OAIHttpRequestWorker *worker, OAITriggeredWebJobCollection summary);
    void webAppsListUsagesSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_ListUsagesSlot_200_response summary);
    void webAppsListUsagesSlotSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_ListUsagesSlot_200_response summary);
    void webAppsListVnetConnectionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIWebApps_ListVnetConnectionsSlot_200_response_inner> summary);
    void webAppsListVnetConnectionsSlotSignalFull(OAIHttpRequestWorker *worker, QList<OAIWebApps_ListVnetConnectionsSlot_200_response_inner> summary);
    void webAppsListWebJobsSignalFull(OAIHttpRequestWorker *worker, OAIWebJobCollection summary);
    void webAppsListWebJobsSlotSignalFull(OAIHttpRequestWorker *worker, OAIWebJobCollection summary);
    void webAppsMigrateMySqlSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_MigrateMySql_200_response summary);
    void webAppsMigrateStorageSignalFull(OAIHttpRequestWorker *worker, OAIStorageMigrationResponse summary);
    void webAppsPutPrivateAccessVnetSignalFull(OAIHttpRequestWorker *worker, OAIPrivateAccess summary);
    void webAppsPutPrivateAccessVnetSlotSignalFull(OAIHttpRequestWorker *worker, OAIPrivateAccess summary);
    void webAppsRecoverSiteConfigurationSnapshotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsRecoverSiteConfigurationSnapshotSlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsResetProductionSlotConfigSignalFull(OAIHttpRequestWorker *worker);
    void webAppsResetSlotConfigurationSlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsRestartSignalFull(OAIHttpRequestWorker *worker);
    void webAppsRestartSlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsRestoreSignalFull(OAIHttpRequestWorker *worker);
    void webAppsRestoreFromBackupBlobSignalFull(OAIHttpRequestWorker *worker);
    void webAppsRestoreFromBackupBlobSlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsRestoreFromDeletedAppSignalFull(OAIHttpRequestWorker *worker);
    void webAppsRestoreFromDeletedAppSlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsRestoreSlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsRestoreSnapshotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsRestoreSnapshotSlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsRunTriggeredWebJobSignalFull(OAIHttpRequestWorker *worker);
    void webAppsRunTriggeredWebJobSlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsStartSignalFull(OAIHttpRequestWorker *worker);
    void webAppsStartContinuousWebJobSignalFull(OAIHttpRequestWorker *worker);
    void webAppsStartContinuousWebJobSlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsStartNetworkTraceSignalFull(OAIHttpRequestWorker *worker, QList<OAINetworkTrace> summary);
    void webAppsStartNetworkTraceSlotSignalFull(OAIHttpRequestWorker *worker, QList<OAINetworkTrace> summary);
    void webAppsStartSlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsStartWebSiteNetworkTraceSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void webAppsStartWebSiteNetworkTraceOperationSignalFull(OAIHttpRequestWorker *worker, QList<OAINetworkTrace> summary);
    void webAppsStartWebSiteNetworkTraceOperationSlotSignalFull(OAIHttpRequestWorker *worker, QList<OAINetworkTrace> summary);
    void webAppsStartWebSiteNetworkTraceSlotSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void webAppsStopSignalFull(OAIHttpRequestWorker *worker);
    void webAppsStopContinuousWebJobSignalFull(OAIHttpRequestWorker *worker);
    void webAppsStopContinuousWebJobSlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsStopNetworkTraceSignalFull(OAIHttpRequestWorker *worker);
    void webAppsStopNetworkTraceSlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsStopSlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsStopWebSiteNetworkTraceSignalFull(OAIHttpRequestWorker *worker);
    void webAppsStopWebSiteNetworkTraceSlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsSwapSlotSlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsSwapSlotWithProductionSignalFull(OAIHttpRequestWorker *worker);
    void webAppsSyncFunctionTriggersSignalFull(OAIHttpRequestWorker *worker);
    void webAppsSyncFunctionTriggersSlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsSyncRepositorySignalFull(OAIHttpRequestWorker *worker);
    void webAppsSyncRepositorySlotSignalFull(OAIHttpRequestWorker *worker);
    void webAppsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_Get_200_response summary);
    void webAppsUpdateApplicationSettingsSignalFull(OAIHttpRequestWorker *worker, OAIStringDictionary summary);
    void webAppsUpdateApplicationSettingsSlotSignalFull(OAIHttpRequestWorker *worker, OAIStringDictionary summary);
    void webAppsUpdateAuthSettingsSignalFull(OAIHttpRequestWorker *worker, OAISiteAuthSettings summary);
    void webAppsUpdateAuthSettingsSlotSignalFull(OAIHttpRequestWorker *worker, OAISiteAuthSettings summary);
    void webAppsUpdateAzureStorageAccountsSignalFull(OAIHttpRequestWorker *worker, OAIAzureStoragePropertyDictionaryResource summary);
    void webAppsUpdateAzureStorageAccountsSlotSignalFull(OAIHttpRequestWorker *worker, OAIAzureStoragePropertyDictionaryResource summary);
    void webAppsUpdateBackupConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIBackupRequest summary);
    void webAppsUpdateBackupConfigurationSlotSignalFull(OAIHttpRequestWorker *worker, OAIBackupRequest summary);
    void webAppsUpdateConfigurationSignalFull(OAIHttpRequestWorker *worker, OAISiteConfigResource summary);
    void webAppsUpdateConfigurationSlotSignalFull(OAIHttpRequestWorker *worker, OAISiteConfigResource summary);
    void webAppsUpdateConnectionStringsSignalFull(OAIHttpRequestWorker *worker, OAIConnectionStringDictionary summary);
    void webAppsUpdateConnectionStringsSlotSignalFull(OAIHttpRequestWorker *worker, OAIConnectionStringDictionary summary);
    void webAppsUpdateDiagnosticLogsConfigSignalFull(OAIHttpRequestWorker *worker, OAISiteLogsConfig summary);
    void webAppsUpdateDiagnosticLogsConfigSlotSignalFull(OAIHttpRequestWorker *worker, OAISiteLogsConfig summary);
    void webAppsUpdateDomainOwnershipIdentifierSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_GetDomainOwnershipIdentifier_200_response summary);
    void webAppsUpdateDomainOwnershipIdentifierSlotSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_GetDomainOwnershipIdentifier_200_response summary);
    void webAppsUpdateHybridConnectionSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_GetHybridConnection_200_response summary);
    void webAppsUpdateHybridConnectionSlotSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_GetHybridConnection_200_response summary);
    void webAppsUpdateMetadataSignalFull(OAIHttpRequestWorker *worker, OAIStringDictionary summary);
    void webAppsUpdateMetadataSlotSignalFull(OAIHttpRequestWorker *worker, OAIStringDictionary summary);
    void webAppsUpdatePremierAddOnSignalFull(OAIHttpRequestWorker *worker, OAIPremierAddOn summary);
    void webAppsUpdatePremierAddOnSlotSignalFull(OAIHttpRequestWorker *worker, OAIPremierAddOn summary);
    void webAppsUpdateRelayServiceConnectionSignalFull(OAIHttpRequestWorker *worker, OAIRelayServiceConnectionEntity summary);
    void webAppsUpdateRelayServiceConnectionSlotSignalFull(OAIHttpRequestWorker *worker, OAIRelayServiceConnectionEntity summary);
    void webAppsUpdateSitePushSettingsSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_UpdateSitePushSettings_request summary);
    void webAppsUpdateSitePushSettingsSlotSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_UpdateSitePushSettings_request summary);
    void webAppsUpdateSlotSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_Get_200_response summary);
    void webAppsUpdateSlotConfigurationNamesSignalFull(OAIHttpRequestWorker *worker, OAISlotConfigNamesResource summary);
    void webAppsUpdateSourceControlSignalFull(OAIHttpRequestWorker *worker, OAISiteSourceControl summary);
    void webAppsUpdateSourceControlSlotSignalFull(OAIHttpRequestWorker *worker, OAISiteSourceControl summary);
    void webAppsUpdateSwiftVirtualNetworkConnectionSignalFull(OAIHttpRequestWorker *worker, OAISwiftVirtualNetwork summary);
    void webAppsUpdateSwiftVirtualNetworkConnectionSlotSignalFull(OAIHttpRequestWorker *worker, OAISwiftVirtualNetwork summary);
    void webAppsUpdateVnetConnectionSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_GetVnetConnectionSlot_200_response summary);
    void webAppsUpdateVnetConnectionGatewaySignalFull(OAIHttpRequestWorker *worker, OAIWebApps_GetVnetConnectionGatewaySlot_200_response summary);
    void webAppsUpdateVnetConnectionGatewaySlotSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_GetVnetConnectionGatewaySlot_200_response summary);
    void webAppsUpdateVnetConnectionSlotSignalFull(OAIHttpRequestWorker *worker, OAIWebApps_GetVnetConnectionSlot_200_response summary);

    Q_DECL_DEPRECATED_X("Use webAppsAddPremierAddOnSignalError() instead")
    void webAppsAddPremierAddOnSignalE(OAIPremierAddOn summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsAddPremierAddOnSignalError(OAIPremierAddOn summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsAddPremierAddOnSlotSignalError() instead")
    void webAppsAddPremierAddOnSlotSignalE(OAIPremierAddOn summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsAddPremierAddOnSlotSignalError(OAIPremierAddOn summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsAnalyzeCustomHostnameSignalError() instead")
    void webAppsAnalyzeCustomHostnameSignalE(OAICustomHostnameAnalysisResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsAnalyzeCustomHostnameSignalError(OAICustomHostnameAnalysisResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsAnalyzeCustomHostnameSlotSignalError() instead")
    void webAppsAnalyzeCustomHostnameSlotSignalE(OAICustomHostnameAnalysisResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsAnalyzeCustomHostnameSlotSignalError(OAICustomHostnameAnalysisResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsApplySlotConfigToProductionSignalError() instead")
    void webAppsApplySlotConfigToProductionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsApplySlotConfigToProductionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsApplySlotConfigurationSlotSignalError() instead")
    void webAppsApplySlotConfigurationSlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsApplySlotConfigurationSlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsBackupSignalError() instead")
    void webAppsBackupSignalE(OAIBackupItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsBackupSignalError(OAIBackupItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsBackupSlotSignalError() instead")
    void webAppsBackupSlotSignalE(OAIBackupItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsBackupSlotSignalError(OAIBackupItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateDeploymentSignalError() instead")
    void webAppsCreateDeploymentSignalE(OAIDeployment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateDeploymentSignalError(OAIDeployment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateDeploymentSlotSignalError() instead")
    void webAppsCreateDeploymentSlotSignalE(OAIDeployment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateDeploymentSlotSignalError(OAIDeployment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateFunctionSignalError() instead")
    void webAppsCreateFunctionSignalE(OAIFunctionEnvelope summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateFunctionSignalError(OAIFunctionEnvelope summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateInstanceFunctionSlotSignalError() instead")
    void webAppsCreateInstanceFunctionSlotSignalE(OAIFunctionEnvelope summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateInstanceFunctionSlotSignalError(OAIFunctionEnvelope summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateInstanceMSDeployOperationSignalError() instead")
    void webAppsCreateInstanceMSDeployOperationSignalE(OAIMSDeployStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateInstanceMSDeployOperationSignalError(OAIMSDeployStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateInstanceMSDeployOperationSlotSignalError() instead")
    void webAppsCreateInstanceMSDeployOperationSlotSignalE(OAIMSDeployStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateInstanceMSDeployOperationSlotSignalError(OAIMSDeployStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateMSDeployOperationSignalError() instead")
    void webAppsCreateMSDeployOperationSignalE(OAIMSDeployStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateMSDeployOperationSignalError(OAIMSDeployStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateMSDeployOperationSlotSignalError() instead")
    void webAppsCreateMSDeployOperationSlotSignalE(OAIMSDeployStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateMSDeployOperationSlotSignalError(OAIMSDeployStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateSignalError() instead")
    void webAppsCreateOrUpdateSignalE(OAIWebApps_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateSignalError(OAIWebApps_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateConfigurationSignalError() instead")
    void webAppsCreateOrUpdateConfigurationSignalE(OAISiteConfigResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateConfigurationSignalError(OAISiteConfigResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateConfigurationSlotSignalError() instead")
    void webAppsCreateOrUpdateConfigurationSlotSignalE(OAISiteConfigResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateConfigurationSlotSignalError(OAISiteConfigResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateDomainOwnershipIdentifierSignalError() instead")
    void webAppsCreateOrUpdateDomainOwnershipIdentifierSignalE(OAIWebApps_GetDomainOwnershipIdentifier_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateDomainOwnershipIdentifierSignalError(OAIWebApps_GetDomainOwnershipIdentifier_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateDomainOwnershipIdentifierSlotSignalError() instead")
    void webAppsCreateOrUpdateDomainOwnershipIdentifierSlotSignalE(OAIWebApps_GetDomainOwnershipIdentifier_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateDomainOwnershipIdentifierSlotSignalError(OAIWebApps_GetDomainOwnershipIdentifier_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateHostNameBindingSignalError() instead")
    void webAppsCreateOrUpdateHostNameBindingSignalE(OAIHostNameBinding summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateHostNameBindingSignalError(OAIHostNameBinding summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateHostNameBindingSlotSignalError() instead")
    void webAppsCreateOrUpdateHostNameBindingSlotSignalE(OAIHostNameBinding summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateHostNameBindingSlotSignalError(OAIHostNameBinding summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateHybridConnectionSignalError() instead")
    void webAppsCreateOrUpdateHybridConnectionSignalE(OAIWebApps_GetHybridConnection_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateHybridConnectionSignalError(OAIWebApps_GetHybridConnection_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateHybridConnectionSlotSignalError() instead")
    void webAppsCreateOrUpdateHybridConnectionSlotSignalE(OAIWebApps_GetHybridConnection_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateHybridConnectionSlotSignalError(OAIWebApps_GetHybridConnection_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdatePublicCertificateSignalError() instead")
    void webAppsCreateOrUpdatePublicCertificateSignalE(OAIPublicCertificate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdatePublicCertificateSignalError(OAIPublicCertificate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdatePublicCertificateSlotSignalError() instead")
    void webAppsCreateOrUpdatePublicCertificateSlotSignalE(OAIPublicCertificate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdatePublicCertificateSlotSignalError(OAIPublicCertificate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateRelayServiceConnectionSignalError() instead")
    void webAppsCreateOrUpdateRelayServiceConnectionSignalE(OAIRelayServiceConnectionEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateRelayServiceConnectionSignalError(OAIRelayServiceConnectionEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateRelayServiceConnectionSlotSignalError() instead")
    void webAppsCreateOrUpdateRelayServiceConnectionSlotSignalE(OAIRelayServiceConnectionEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateRelayServiceConnectionSlotSignalError(OAIRelayServiceConnectionEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateSlotSignalError() instead")
    void webAppsCreateOrUpdateSlotSignalE(OAIWebApps_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateSlotSignalError(OAIWebApps_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateSourceControlSignalError() instead")
    void webAppsCreateOrUpdateSourceControlSignalE(OAISiteSourceControl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateSourceControlSignalError(OAISiteSourceControl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateSourceControlSlotSignalError() instead")
    void webAppsCreateOrUpdateSourceControlSlotSignalE(OAISiteSourceControl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateSourceControlSlotSignalError(OAISiteSourceControl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSignalError() instead")
    void webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSignalE(OAISwiftVirtualNetwork summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSignalError(OAISwiftVirtualNetwork summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlotSignalError() instead")
    void webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlotSignalE(OAISwiftVirtualNetwork summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlotSignalError(OAISwiftVirtualNetwork summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateVnetConnectionSignalError() instead")
    void webAppsCreateOrUpdateVnetConnectionSignalE(OAIWebApps_GetVnetConnectionSlot_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateVnetConnectionSignalError(OAIWebApps_GetVnetConnectionSlot_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateVnetConnectionGatewaySignalError() instead")
    void webAppsCreateOrUpdateVnetConnectionGatewaySignalE(OAIWebApps_GetVnetConnectionGatewaySlot_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateVnetConnectionGatewaySignalError(OAIWebApps_GetVnetConnectionGatewaySlot_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateVnetConnectionGatewaySlotSignalError() instead")
    void webAppsCreateOrUpdateVnetConnectionGatewaySlotSignalE(OAIWebApps_GetVnetConnectionGatewaySlot_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateVnetConnectionGatewaySlotSignalError(OAIWebApps_GetVnetConnectionGatewaySlot_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateVnetConnectionSlotSignalError() instead")
    void webAppsCreateOrUpdateVnetConnectionSlotSignalE(OAIWebApps_GetVnetConnectionSlot_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateVnetConnectionSlotSignalError(OAIWebApps_GetVnetConnectionSlot_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteSignalError() instead")
    void webAppsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteBackupSignalError() instead")
    void webAppsDeleteBackupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteBackupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteBackupConfigurationSignalError() instead")
    void webAppsDeleteBackupConfigurationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteBackupConfigurationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteBackupConfigurationSlotSignalError() instead")
    void webAppsDeleteBackupConfigurationSlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteBackupConfigurationSlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteBackupSlotSignalError() instead")
    void webAppsDeleteBackupSlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteBackupSlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteContinuousWebJobSignalError() instead")
    void webAppsDeleteContinuousWebJobSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteContinuousWebJobSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteContinuousWebJobSlotSignalError() instead")
    void webAppsDeleteContinuousWebJobSlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteContinuousWebJobSlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteDeploymentSignalError() instead")
    void webAppsDeleteDeploymentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteDeploymentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteDeploymentSlotSignalError() instead")
    void webAppsDeleteDeploymentSlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteDeploymentSlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteDomainOwnershipIdentifierSignalError() instead")
    void webAppsDeleteDomainOwnershipIdentifierSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteDomainOwnershipIdentifierSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteDomainOwnershipIdentifierSlotSignalError() instead")
    void webAppsDeleteDomainOwnershipIdentifierSlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteDomainOwnershipIdentifierSlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteFunctionSignalError() instead")
    void webAppsDeleteFunctionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteFunctionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteHostNameBindingSignalError() instead")
    void webAppsDeleteHostNameBindingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteHostNameBindingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteHostNameBindingSlotSignalError() instead")
    void webAppsDeleteHostNameBindingSlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteHostNameBindingSlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteHybridConnectionSignalError() instead")
    void webAppsDeleteHybridConnectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteHybridConnectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteHybridConnectionSlotSignalError() instead")
    void webAppsDeleteHybridConnectionSlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteHybridConnectionSlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteInstanceFunctionSlotSignalError() instead")
    void webAppsDeleteInstanceFunctionSlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteInstanceFunctionSlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteInstanceProcessSignalError() instead")
    void webAppsDeleteInstanceProcessSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteInstanceProcessSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteInstanceProcessSlotSignalError() instead")
    void webAppsDeleteInstanceProcessSlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteInstanceProcessSlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeletePremierAddOnSignalError() instead")
    void webAppsDeletePremierAddOnSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeletePremierAddOnSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeletePremierAddOnSlotSignalError() instead")
    void webAppsDeletePremierAddOnSlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeletePremierAddOnSlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteProcessSignalError() instead")
    void webAppsDeleteProcessSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteProcessSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteProcessSlotSignalError() instead")
    void webAppsDeleteProcessSlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteProcessSlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeletePublicCertificateSignalError() instead")
    void webAppsDeletePublicCertificateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeletePublicCertificateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeletePublicCertificateSlotSignalError() instead")
    void webAppsDeletePublicCertificateSlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeletePublicCertificateSlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteRelayServiceConnectionSignalError() instead")
    void webAppsDeleteRelayServiceConnectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteRelayServiceConnectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteRelayServiceConnectionSlotSignalError() instead")
    void webAppsDeleteRelayServiceConnectionSlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteRelayServiceConnectionSlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteSiteExtensionSignalError() instead")
    void webAppsDeleteSiteExtensionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteSiteExtensionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteSiteExtensionSlotSignalError() instead")
    void webAppsDeleteSiteExtensionSlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteSiteExtensionSlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteSlotSignalError() instead")
    void webAppsDeleteSlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteSlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteSourceControlSignalError() instead")
    void webAppsDeleteSourceControlSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteSourceControlSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteSourceControlSlotSignalError() instead")
    void webAppsDeleteSourceControlSlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteSourceControlSlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteSwiftVirtualNetworkSignalError() instead")
    void webAppsDeleteSwiftVirtualNetworkSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteSwiftVirtualNetworkSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteSwiftVirtualNetworkSlotSignalError() instead")
    void webAppsDeleteSwiftVirtualNetworkSlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteSwiftVirtualNetworkSlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteTriggeredWebJobSignalError() instead")
    void webAppsDeleteTriggeredWebJobSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteTriggeredWebJobSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteTriggeredWebJobSlotSignalError() instead")
    void webAppsDeleteTriggeredWebJobSlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteTriggeredWebJobSlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteVnetConnectionSignalError() instead")
    void webAppsDeleteVnetConnectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteVnetConnectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteVnetConnectionSlotSignalError() instead")
    void webAppsDeleteVnetConnectionSlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteVnetConnectionSlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDiscoverBackupSignalError() instead")
    void webAppsDiscoverBackupSignalE(OAIRestoreRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDiscoverBackupSignalError(OAIRestoreRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDiscoverBackupSlotSignalError() instead")
    void webAppsDiscoverBackupSlotSignalE(OAIRestoreRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDiscoverBackupSlotSignalError(OAIRestoreRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGenerateNewSitePublishingPasswordSignalError() instead")
    void webAppsGenerateNewSitePublishingPasswordSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGenerateNewSitePublishingPasswordSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGenerateNewSitePublishingPasswordSlotSignalError() instead")
    void webAppsGenerateNewSitePublishingPasswordSlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGenerateNewSitePublishingPasswordSlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetSignalError() instead")
    void webAppsGetSignalE(OAIWebApps_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetSignalError(OAIWebApps_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetAuthSettingsSignalError() instead")
    void webAppsGetAuthSettingsSignalE(OAISiteAuthSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetAuthSettingsSignalError(OAISiteAuthSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetAuthSettingsSlotSignalError() instead")
    void webAppsGetAuthSettingsSlotSignalE(OAISiteAuthSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetAuthSettingsSlotSignalError(OAISiteAuthSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetBackupConfigurationSignalError() instead")
    void webAppsGetBackupConfigurationSignalE(OAIBackupRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetBackupConfigurationSignalError(OAIBackupRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetBackupConfigurationSlotSignalError() instead")
    void webAppsGetBackupConfigurationSlotSignalE(OAIBackupRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetBackupConfigurationSlotSignalError(OAIBackupRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetBackupStatusSignalError() instead")
    void webAppsGetBackupStatusSignalE(OAIBackupItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetBackupStatusSignalError(OAIBackupItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetBackupStatusSlotSignalError() instead")
    void webAppsGetBackupStatusSlotSignalE(OAIBackupItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetBackupStatusSlotSignalError(OAIBackupItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetConfigurationSignalError() instead")
    void webAppsGetConfigurationSignalE(OAISiteConfigResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetConfigurationSignalError(OAISiteConfigResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetConfigurationSlotSignalError() instead")
    void webAppsGetConfigurationSlotSignalE(OAISiteConfigResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetConfigurationSlotSignalError(OAISiteConfigResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetConfigurationSnapshotSignalError() instead")
    void webAppsGetConfigurationSnapshotSignalE(OAISiteConfigResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetConfigurationSnapshotSignalError(OAISiteConfigResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetConfigurationSnapshotSlotSignalError() instead")
    void webAppsGetConfigurationSnapshotSlotSignalE(OAISiteConfigResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetConfigurationSnapshotSlotSignalError(OAISiteConfigResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetContainerLogsZipSignalError() instead")
    void webAppsGetContainerLogsZipSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetContainerLogsZipSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetContainerLogsZipSlotSignalError() instead")
    void webAppsGetContainerLogsZipSlotSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetContainerLogsZipSlotSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetContinuousWebJobSignalError() instead")
    void webAppsGetContinuousWebJobSignalE(OAIContinuousWebJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetContinuousWebJobSignalError(OAIContinuousWebJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetContinuousWebJobSlotSignalError() instead")
    void webAppsGetContinuousWebJobSlotSignalE(OAIContinuousWebJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetContinuousWebJobSlotSignalError(OAIContinuousWebJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetDeploymentSignalError() instead")
    void webAppsGetDeploymentSignalE(OAIDeployment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetDeploymentSignalError(OAIDeployment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetDeploymentSlotSignalError() instead")
    void webAppsGetDeploymentSlotSignalE(OAIDeployment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetDeploymentSlotSignalError(OAIDeployment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetDiagnosticLogsConfigurationSignalError() instead")
    void webAppsGetDiagnosticLogsConfigurationSignalE(OAISiteLogsConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetDiagnosticLogsConfigurationSignalError(OAISiteLogsConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetDiagnosticLogsConfigurationSlotSignalError() instead")
    void webAppsGetDiagnosticLogsConfigurationSlotSignalE(OAISiteLogsConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetDiagnosticLogsConfigurationSlotSignalError(OAISiteLogsConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetDomainOwnershipIdentifierSignalError() instead")
    void webAppsGetDomainOwnershipIdentifierSignalE(OAIWebApps_GetDomainOwnershipIdentifier_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetDomainOwnershipIdentifierSignalError(OAIWebApps_GetDomainOwnershipIdentifier_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetDomainOwnershipIdentifierSlotSignalError() instead")
    void webAppsGetDomainOwnershipIdentifierSlotSignalE(OAIWebApps_GetDomainOwnershipIdentifier_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetDomainOwnershipIdentifierSlotSignalError(OAIWebApps_GetDomainOwnershipIdentifier_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetFunctionSignalError() instead")
    void webAppsGetFunctionSignalE(OAIFunctionEnvelope summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetFunctionSignalError(OAIFunctionEnvelope summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetFunctionsAdminTokenSignalError() instead")
    void webAppsGetFunctionsAdminTokenSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetFunctionsAdminTokenSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetFunctionsAdminTokenSlotSignalError() instead")
    void webAppsGetFunctionsAdminTokenSlotSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetFunctionsAdminTokenSlotSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetHostNameBindingSignalError() instead")
    void webAppsGetHostNameBindingSignalE(OAIHostNameBinding summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetHostNameBindingSignalError(OAIHostNameBinding summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetHostNameBindingSlotSignalError() instead")
    void webAppsGetHostNameBindingSlotSignalE(OAIHostNameBinding summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetHostNameBindingSlotSignalError(OAIHostNameBinding summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetHybridConnectionSignalError() instead")
    void webAppsGetHybridConnectionSignalE(OAIWebApps_GetHybridConnection_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetHybridConnectionSignalError(OAIWebApps_GetHybridConnection_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetHybridConnectionSlotSignalError() instead")
    void webAppsGetHybridConnectionSlotSignalE(OAIWebApps_GetHybridConnection_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetHybridConnectionSlotSignalError(OAIWebApps_GetHybridConnection_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetInstanceFunctionSlotSignalError() instead")
    void webAppsGetInstanceFunctionSlotSignalE(OAIFunctionEnvelope summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetInstanceFunctionSlotSignalError(OAIFunctionEnvelope summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetInstanceMSDeployLogSignalError() instead")
    void webAppsGetInstanceMSDeployLogSignalE(OAIMSDeployLog summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetInstanceMSDeployLogSignalError(OAIMSDeployLog summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetInstanceMSDeployLogSlotSignalError() instead")
    void webAppsGetInstanceMSDeployLogSlotSignalE(OAIMSDeployLog summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetInstanceMSDeployLogSlotSignalError(OAIMSDeployLog summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetInstanceMsDeployStatusSignalError() instead")
    void webAppsGetInstanceMsDeployStatusSignalE(OAIMSDeployStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetInstanceMsDeployStatusSignalError(OAIMSDeployStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetInstanceMsDeployStatusSlotSignalError() instead")
    void webAppsGetInstanceMsDeployStatusSlotSignalE(OAIMSDeployStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetInstanceMsDeployStatusSlotSignalError(OAIMSDeployStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetInstanceProcessSignalError() instead")
    void webAppsGetInstanceProcessSignalE(OAIProcessInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetInstanceProcessSignalError(OAIProcessInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetInstanceProcessDumpSignalError() instead")
    void webAppsGetInstanceProcessDumpSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetInstanceProcessDumpSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetInstanceProcessDumpSlotSignalError() instead")
    void webAppsGetInstanceProcessDumpSlotSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetInstanceProcessDumpSlotSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetInstanceProcessModuleSignalError() instead")
    void webAppsGetInstanceProcessModuleSignalE(OAIProcessModuleInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetInstanceProcessModuleSignalError(OAIProcessModuleInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetInstanceProcessModuleSlotSignalError() instead")
    void webAppsGetInstanceProcessModuleSlotSignalE(OAIProcessModuleInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetInstanceProcessModuleSlotSignalError(OAIProcessModuleInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetInstanceProcessSlotSignalError() instead")
    void webAppsGetInstanceProcessSlotSignalE(OAIProcessInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetInstanceProcessSlotSignalError(OAIProcessInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetInstanceProcessThreadSignalError() instead")
    void webAppsGetInstanceProcessThreadSignalE(OAIProcessThreadInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetInstanceProcessThreadSignalError(OAIProcessThreadInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetInstanceProcessThreadSlotSignalError() instead")
    void webAppsGetInstanceProcessThreadSlotSignalE(OAIProcessThreadInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetInstanceProcessThreadSlotSignalError(OAIProcessThreadInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetMSDeployLogSignalError() instead")
    void webAppsGetMSDeployLogSignalE(OAIMSDeployLog summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetMSDeployLogSignalError(OAIMSDeployLog summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetMSDeployLogSlotSignalError() instead")
    void webAppsGetMSDeployLogSlotSignalE(OAIMSDeployLog summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetMSDeployLogSlotSignalError(OAIMSDeployLog summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetMSDeployStatusSignalError() instead")
    void webAppsGetMSDeployStatusSignalE(OAIMSDeployStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetMSDeployStatusSignalError(OAIMSDeployStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetMSDeployStatusSlotSignalError() instead")
    void webAppsGetMSDeployStatusSlotSignalE(OAIMSDeployStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetMSDeployStatusSlotSignalError(OAIMSDeployStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetMigrateMySqlStatusSignalError() instead")
    void webAppsGetMigrateMySqlStatusSignalE(OAIMigrateMySqlStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetMigrateMySqlStatusSignalError(OAIMigrateMySqlStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetMigrateMySqlStatusSlotSignalError() instead")
    void webAppsGetMigrateMySqlStatusSlotSignalE(OAIMigrateMySqlStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetMigrateMySqlStatusSlotSignalError(OAIMigrateMySqlStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetNetworkTraceOperationSignalError() instead")
    void webAppsGetNetworkTraceOperationSignalE(QList<OAINetworkTrace> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetNetworkTraceOperationSignalError(QList<OAINetworkTrace> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetNetworkTraceOperationSlotSignalError() instead")
    void webAppsGetNetworkTraceOperationSlotSignalE(QList<OAINetworkTrace> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetNetworkTraceOperationSlotSignalError(QList<OAINetworkTrace> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetNetworkTraceOperationSlotV2SignalError() instead")
    void webAppsGetNetworkTraceOperationSlotV2SignalE(QList<OAINetworkTrace> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetNetworkTraceOperationSlotV2SignalError(QList<OAINetworkTrace> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetNetworkTraceOperationV2SignalError() instead")
    void webAppsGetNetworkTraceOperationV2SignalE(QList<OAINetworkTrace> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetNetworkTraceOperationV2SignalError(QList<OAINetworkTrace> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetNetworkTracesSignalError() instead")
    void webAppsGetNetworkTracesSignalE(QList<OAINetworkTrace> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetNetworkTracesSignalError(QList<OAINetworkTrace> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetNetworkTracesSlotSignalError() instead")
    void webAppsGetNetworkTracesSlotSignalE(QList<OAINetworkTrace> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetNetworkTracesSlotSignalError(QList<OAINetworkTrace> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetNetworkTracesSlotV2SignalError() instead")
    void webAppsGetNetworkTracesSlotV2SignalE(QList<OAINetworkTrace> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetNetworkTracesSlotV2SignalError(QList<OAINetworkTrace> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetNetworkTracesV2SignalError() instead")
    void webAppsGetNetworkTracesV2SignalE(QList<OAINetworkTrace> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetNetworkTracesV2SignalError(QList<OAINetworkTrace> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetPremierAddOnSignalError() instead")
    void webAppsGetPremierAddOnSignalE(OAIPremierAddOn summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetPremierAddOnSignalError(OAIPremierAddOn summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetPremierAddOnSlotSignalError() instead")
    void webAppsGetPremierAddOnSlotSignalE(OAIPremierAddOn summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetPremierAddOnSlotSignalError(OAIPremierAddOn summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetPrivateAccessSignalError() instead")
    void webAppsGetPrivateAccessSignalE(OAIPrivateAccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetPrivateAccessSignalError(OAIPrivateAccess summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetPrivateAccessSlotSignalError() instead")
    void webAppsGetPrivateAccessSlotSignalE(OAIPrivateAccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetPrivateAccessSlotSignalError(OAIPrivateAccess summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetProcessSignalError() instead")
    void webAppsGetProcessSignalE(OAIProcessInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetProcessSignalError(OAIProcessInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetProcessDumpSignalError() instead")
    void webAppsGetProcessDumpSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetProcessDumpSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetProcessDumpSlotSignalError() instead")
    void webAppsGetProcessDumpSlotSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetProcessDumpSlotSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetProcessModuleSignalError() instead")
    void webAppsGetProcessModuleSignalE(OAIProcessModuleInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetProcessModuleSignalError(OAIProcessModuleInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetProcessModuleSlotSignalError() instead")
    void webAppsGetProcessModuleSlotSignalE(OAIProcessModuleInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetProcessModuleSlotSignalError(OAIProcessModuleInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetProcessSlotSignalError() instead")
    void webAppsGetProcessSlotSignalE(OAIProcessInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetProcessSlotSignalError(OAIProcessInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetProcessThreadSignalError() instead")
    void webAppsGetProcessThreadSignalE(OAIProcessThreadInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetProcessThreadSignalError(OAIProcessThreadInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetProcessThreadSlotSignalError() instead")
    void webAppsGetProcessThreadSlotSignalE(OAIProcessThreadInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetProcessThreadSlotSignalError(OAIProcessThreadInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetPublicCertificateSignalError() instead")
    void webAppsGetPublicCertificateSignalE(OAIPublicCertificate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetPublicCertificateSignalError(OAIPublicCertificate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetPublicCertificateSlotSignalError() instead")
    void webAppsGetPublicCertificateSlotSignalE(OAIPublicCertificate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetPublicCertificateSlotSignalError(OAIPublicCertificate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetRelayServiceConnectionSignalError() instead")
    void webAppsGetRelayServiceConnectionSignalE(OAIRelayServiceConnectionEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetRelayServiceConnectionSignalError(OAIRelayServiceConnectionEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetRelayServiceConnectionSlotSignalError() instead")
    void webAppsGetRelayServiceConnectionSlotSignalE(OAIRelayServiceConnectionEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetRelayServiceConnectionSlotSignalError(OAIRelayServiceConnectionEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetSiteExtensionSignalError() instead")
    void webAppsGetSiteExtensionSignalE(OAISiteExtensionInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetSiteExtensionSignalError(OAISiteExtensionInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetSiteExtensionSlotSignalError() instead")
    void webAppsGetSiteExtensionSlotSignalE(OAISiteExtensionInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetSiteExtensionSlotSignalError(OAISiteExtensionInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetSitePhpErrorLogFlagSignalError() instead")
    void webAppsGetSitePhpErrorLogFlagSignalE(OAISitePhpErrorLogFlag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetSitePhpErrorLogFlagSignalError(OAISitePhpErrorLogFlag summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetSitePhpErrorLogFlagSlotSignalError() instead")
    void webAppsGetSitePhpErrorLogFlagSlotSignalE(OAISitePhpErrorLogFlag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetSitePhpErrorLogFlagSlotSignalError(OAISitePhpErrorLogFlag summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetSlotSignalError() instead")
    void webAppsGetSlotSignalE(OAIWebApps_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetSlotSignalError(OAIWebApps_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetSourceControlSignalError() instead")
    void webAppsGetSourceControlSignalE(OAISiteSourceControl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetSourceControlSignalError(OAISiteSourceControl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetSourceControlSlotSignalError() instead")
    void webAppsGetSourceControlSlotSignalE(OAISiteSourceControl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetSourceControlSlotSignalError(OAISiteSourceControl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetSwiftVirtualNetworkConnectionSignalError() instead")
    void webAppsGetSwiftVirtualNetworkConnectionSignalE(OAISwiftVirtualNetwork summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetSwiftVirtualNetworkConnectionSignalError(OAISwiftVirtualNetwork summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetSwiftVirtualNetworkConnectionSlotSignalError() instead")
    void webAppsGetSwiftVirtualNetworkConnectionSlotSignalE(OAISwiftVirtualNetwork summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetSwiftVirtualNetworkConnectionSlotSignalError(OAISwiftVirtualNetwork summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetTriggeredWebJobSignalError() instead")
    void webAppsGetTriggeredWebJobSignalE(OAITriggeredWebJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetTriggeredWebJobSignalError(OAITriggeredWebJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetTriggeredWebJobHistorySignalError() instead")
    void webAppsGetTriggeredWebJobHistorySignalE(OAITriggeredJobHistory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetTriggeredWebJobHistorySignalError(OAITriggeredJobHistory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetTriggeredWebJobHistorySlotSignalError() instead")
    void webAppsGetTriggeredWebJobHistorySlotSignalE(OAITriggeredJobHistory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetTriggeredWebJobHistorySlotSignalError(OAITriggeredJobHistory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetTriggeredWebJobSlotSignalError() instead")
    void webAppsGetTriggeredWebJobSlotSignalE(OAITriggeredWebJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetTriggeredWebJobSlotSignalError(OAITriggeredWebJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetVnetConnectionSignalError() instead")
    void webAppsGetVnetConnectionSignalE(OAIWebApps_GetVnetConnectionSlot_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetVnetConnectionSignalError(OAIWebApps_GetVnetConnectionSlot_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetVnetConnectionGatewaySignalError() instead")
    void webAppsGetVnetConnectionGatewaySignalE(OAIWebApps_GetVnetConnectionGatewaySlot_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetVnetConnectionGatewaySignalError(OAIWebApps_GetVnetConnectionGatewaySlot_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetVnetConnectionGatewaySlotSignalError() instead")
    void webAppsGetVnetConnectionGatewaySlotSignalE(OAIWebApps_GetVnetConnectionGatewaySlot_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetVnetConnectionGatewaySlotSignalError(OAIWebApps_GetVnetConnectionGatewaySlot_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetVnetConnectionSlotSignalError() instead")
    void webAppsGetVnetConnectionSlotSignalE(OAIWebApps_GetVnetConnectionSlot_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetVnetConnectionSlotSignalError(OAIWebApps_GetVnetConnectionSlot_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetWebJobSignalError() instead")
    void webAppsGetWebJobSignalE(OAIWebJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetWebJobSignalError(OAIWebJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetWebJobSlotSignalError() instead")
    void webAppsGetWebJobSlotSignalE(OAIWebJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetWebJobSlotSignalError(OAIWebJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetWebSiteContainerLogsSignalError() instead")
    void webAppsGetWebSiteContainerLogsSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetWebSiteContainerLogsSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetWebSiteContainerLogsSlotSignalError() instead")
    void webAppsGetWebSiteContainerLogsSlotSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetWebSiteContainerLogsSlotSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsInstallSiteExtensionSignalError() instead")
    void webAppsInstallSiteExtensionSignalE(OAISiteExtensionInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsInstallSiteExtensionSignalError(OAISiteExtensionInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsInstallSiteExtensionSlotSignalError() instead")
    void webAppsInstallSiteExtensionSlotSignalE(OAISiteExtensionInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsInstallSiteExtensionSlotSignalError(OAISiteExtensionInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsIsCloneableSignalError() instead")
    void webAppsIsCloneableSignalE(OAISiteCloneability summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsIsCloneableSignalError(OAISiteCloneability summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsIsCloneableSlotSignalError() instead")
    void webAppsIsCloneableSlotSignalE(OAISiteCloneability summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsIsCloneableSlotSignalError(OAISiteCloneability summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListSignalError() instead")
    void webAppsListSignalE(OAIWebApps_List_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListSignalError(OAIWebApps_List_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListApplicationSettingsSignalError() instead")
    void webAppsListApplicationSettingsSignalE(OAIStringDictionary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListApplicationSettingsSignalError(OAIStringDictionary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListApplicationSettingsSlotSignalError() instead")
    void webAppsListApplicationSettingsSlotSignalE(OAIStringDictionary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListApplicationSettingsSlotSignalError(OAIStringDictionary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListAzureStorageAccountsSignalError() instead")
    void webAppsListAzureStorageAccountsSignalE(OAIAzureStoragePropertyDictionaryResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListAzureStorageAccountsSignalError(OAIAzureStoragePropertyDictionaryResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListAzureStorageAccountsSlotSignalError() instead")
    void webAppsListAzureStorageAccountsSlotSignalE(OAIAzureStoragePropertyDictionaryResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListAzureStorageAccountsSlotSignalError(OAIAzureStoragePropertyDictionaryResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListBackupStatusSecretsSignalError() instead")
    void webAppsListBackupStatusSecretsSignalE(OAIBackupItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListBackupStatusSecretsSignalError(OAIBackupItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListBackupStatusSecretsSlotSignalError() instead")
    void webAppsListBackupStatusSecretsSlotSignalE(OAIBackupItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListBackupStatusSecretsSlotSignalError(OAIBackupItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListBackupsSignalError() instead")
    void webAppsListBackupsSignalE(OAIBackupItemCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListBackupsSignalError(OAIBackupItemCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListBackupsSlotSignalError() instead")
    void webAppsListBackupsSlotSignalE(OAIBackupItemCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListBackupsSlotSignalError(OAIBackupItemCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListByResourceGroupSignalError() instead")
    void webAppsListByResourceGroupSignalE(OAIWebApps_List_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListByResourceGroupSignalError(OAIWebApps_List_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListConfigurationSnapshotInfoSignalError() instead")
    void webAppsListConfigurationSnapshotInfoSignalE(OAISiteConfigurationSnapshotInfoCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListConfigurationSnapshotInfoSignalError(OAISiteConfigurationSnapshotInfoCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListConfigurationSnapshotInfoSlotSignalError() instead")
    void webAppsListConfigurationSnapshotInfoSlotSignalE(OAISiteConfigurationSnapshotInfoCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListConfigurationSnapshotInfoSlotSignalError(OAISiteConfigurationSnapshotInfoCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListConfigurationsSignalError() instead")
    void webAppsListConfigurationsSignalE(OAISiteConfigResourceCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListConfigurationsSignalError(OAISiteConfigResourceCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListConfigurationsSlotSignalError() instead")
    void webAppsListConfigurationsSlotSignalE(OAISiteConfigResourceCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListConfigurationsSlotSignalError(OAISiteConfigResourceCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListConnectionStringsSignalError() instead")
    void webAppsListConnectionStringsSignalE(OAIConnectionStringDictionary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListConnectionStringsSignalError(OAIConnectionStringDictionary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListConnectionStringsSlotSignalError() instead")
    void webAppsListConnectionStringsSlotSignalE(OAIConnectionStringDictionary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListConnectionStringsSlotSignalError(OAIConnectionStringDictionary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListContinuousWebJobsSignalError() instead")
    void webAppsListContinuousWebJobsSignalE(OAIContinuousWebJobCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListContinuousWebJobsSignalError(OAIContinuousWebJobCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListContinuousWebJobsSlotSignalError() instead")
    void webAppsListContinuousWebJobsSlotSignalE(OAIContinuousWebJobCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListContinuousWebJobsSlotSignalError(OAIContinuousWebJobCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListDeploymentLogSignalError() instead")
    void webAppsListDeploymentLogSignalE(OAIDeployment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListDeploymentLogSignalError(OAIDeployment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListDeploymentLogSlotSignalError() instead")
    void webAppsListDeploymentLogSlotSignalE(OAIDeployment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListDeploymentLogSlotSignalError(OAIDeployment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListDeploymentsSignalError() instead")
    void webAppsListDeploymentsSignalE(OAIDeploymentCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListDeploymentsSignalError(OAIDeploymentCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListDeploymentsSlotSignalError() instead")
    void webAppsListDeploymentsSlotSignalE(OAIDeploymentCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListDeploymentsSlotSignalError(OAIDeploymentCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListDomainOwnershipIdentifiersSignalError() instead")
    void webAppsListDomainOwnershipIdentifiersSignalE(OAIWebApps_ListDomainOwnershipIdentifiers_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListDomainOwnershipIdentifiersSignalError(OAIWebApps_ListDomainOwnershipIdentifiers_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListDomainOwnershipIdentifiersSlotSignalError() instead")
    void webAppsListDomainOwnershipIdentifiersSlotSignalE(OAIWebApps_ListDomainOwnershipIdentifiers_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListDomainOwnershipIdentifiersSlotSignalError(OAIWebApps_ListDomainOwnershipIdentifiers_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListFunctionSecretsSignalError() instead")
    void webAppsListFunctionSecretsSignalE(OAIFunctionSecrets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListFunctionSecretsSignalError(OAIFunctionSecrets summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListFunctionSecretsSlotSignalError() instead")
    void webAppsListFunctionSecretsSlotSignalE(OAIFunctionSecrets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListFunctionSecretsSlotSignalError(OAIFunctionSecrets summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListFunctionsSignalError() instead")
    void webAppsListFunctionsSignalE(OAIFunctionEnvelopeCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListFunctionsSignalError(OAIFunctionEnvelopeCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListHostNameBindingsSignalError() instead")
    void webAppsListHostNameBindingsSignalE(OAIHostNameBindingCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListHostNameBindingsSignalError(OAIHostNameBindingCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListHostNameBindingsSlotSignalError() instead")
    void webAppsListHostNameBindingsSlotSignalE(OAIHostNameBindingCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListHostNameBindingsSlotSignalError(OAIHostNameBindingCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListHybridConnectionKeysSignalError() instead")
    void webAppsListHybridConnectionKeysSignalE(OAIWebApps_ListHybridConnectionKeys_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListHybridConnectionKeysSignalError(OAIWebApps_ListHybridConnectionKeys_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListHybridConnectionKeysSlotSignalError() instead")
    void webAppsListHybridConnectionKeysSlotSignalE(OAIWebApps_ListHybridConnectionKeys_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListHybridConnectionKeysSlotSignalError(OAIWebApps_ListHybridConnectionKeys_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListHybridConnectionsSignalError() instead")
    void webAppsListHybridConnectionsSignalE(OAIWebApps_GetHybridConnection_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListHybridConnectionsSignalError(OAIWebApps_GetHybridConnection_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListHybridConnectionsSlotSignalError() instead")
    void webAppsListHybridConnectionsSlotSignalE(OAIWebApps_GetHybridConnection_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListHybridConnectionsSlotSignalError(OAIWebApps_GetHybridConnection_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListInstanceFunctionsSlotSignalError() instead")
    void webAppsListInstanceFunctionsSlotSignalE(OAIFunctionEnvelopeCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListInstanceFunctionsSlotSignalError(OAIFunctionEnvelopeCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListInstanceIdentifiersSignalError() instead")
    void webAppsListInstanceIdentifiersSignalE(OAIWebAppInstanceCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListInstanceIdentifiersSignalError(OAIWebAppInstanceCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListInstanceIdentifiersSlotSignalError() instead")
    void webAppsListInstanceIdentifiersSlotSignalE(OAIWebAppInstanceCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListInstanceIdentifiersSlotSignalError(OAIWebAppInstanceCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListInstanceProcessModulesSignalError() instead")
    void webAppsListInstanceProcessModulesSignalE(OAIProcessModuleInfoCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListInstanceProcessModulesSignalError(OAIProcessModuleInfoCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListInstanceProcessModulesSlotSignalError() instead")
    void webAppsListInstanceProcessModulesSlotSignalE(OAIProcessModuleInfoCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListInstanceProcessModulesSlotSignalError(OAIProcessModuleInfoCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListInstanceProcessThreadsSignalError() instead")
    void webAppsListInstanceProcessThreadsSignalE(OAIProcessThreadInfoCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListInstanceProcessThreadsSignalError(OAIProcessThreadInfoCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListInstanceProcessThreadsSlotSignalError() instead")
    void webAppsListInstanceProcessThreadsSlotSignalE(OAIProcessThreadInfoCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListInstanceProcessThreadsSlotSignalError(OAIProcessThreadInfoCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListInstanceProcessesSignalError() instead")
    void webAppsListInstanceProcessesSignalE(OAIProcessInfoCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListInstanceProcessesSignalError(OAIProcessInfoCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListInstanceProcessesSlotSignalError() instead")
    void webAppsListInstanceProcessesSlotSignalE(OAIProcessInfoCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListInstanceProcessesSlotSignalError(OAIProcessInfoCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListMetadataSignalError() instead")
    void webAppsListMetadataSignalE(OAIStringDictionary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListMetadataSignalError(OAIStringDictionary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListMetadataSlotSignalError() instead")
    void webAppsListMetadataSlotSignalE(OAIStringDictionary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListMetadataSlotSignalError(OAIStringDictionary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListMetricDefinitionsSignalError() instead")
    void webAppsListMetricDefinitionsSignalE(OAIWebApps_ListMetricDefinitions_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListMetricDefinitionsSignalError(OAIWebApps_ListMetricDefinitions_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListMetricDefinitionsSlotSignalError() instead")
    void webAppsListMetricDefinitionsSlotSignalE(OAIWebApps_ListMetricDefinitions_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListMetricDefinitionsSlotSignalError(OAIWebApps_ListMetricDefinitions_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListMetricsSignalError() instead")
    void webAppsListMetricsSignalE(OAIWebApps_ListMetrics_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListMetricsSignalError(OAIWebApps_ListMetrics_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListMetricsSlotSignalError() instead")
    void webAppsListMetricsSlotSignalE(OAIWebApps_ListMetrics_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListMetricsSlotSignalError(OAIWebApps_ListMetrics_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListNetworkFeaturesSignalError() instead")
    void webAppsListNetworkFeaturesSignalE(OAINetworkFeatures summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListNetworkFeaturesSignalError(OAINetworkFeatures summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListNetworkFeaturesSlotSignalError() instead")
    void webAppsListNetworkFeaturesSlotSignalE(OAINetworkFeatures summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListNetworkFeaturesSlotSignalError(OAINetworkFeatures summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListPerfMonCountersSignalError() instead")
    void webAppsListPerfMonCountersSignalE(OAIPerfMonCounterCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListPerfMonCountersSignalError(OAIPerfMonCounterCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListPerfMonCountersSlotSignalError() instead")
    void webAppsListPerfMonCountersSlotSignalE(OAIPerfMonCounterCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListPerfMonCountersSlotSignalError(OAIPerfMonCounterCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListPremierAddOnsSignalError() instead")
    void webAppsListPremierAddOnsSignalE(OAIPremierAddOn summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListPremierAddOnsSignalError(OAIPremierAddOn summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListPremierAddOnsSlotSignalError() instead")
    void webAppsListPremierAddOnsSlotSignalE(OAIPremierAddOn summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListPremierAddOnsSlotSignalError(OAIPremierAddOn summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListProcessModulesSignalError() instead")
    void webAppsListProcessModulesSignalE(OAIProcessModuleInfoCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListProcessModulesSignalError(OAIProcessModuleInfoCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListProcessModulesSlotSignalError() instead")
    void webAppsListProcessModulesSlotSignalE(OAIProcessModuleInfoCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListProcessModulesSlotSignalError(OAIProcessModuleInfoCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListProcessThreadsSignalError() instead")
    void webAppsListProcessThreadsSignalE(OAIProcessThreadInfoCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListProcessThreadsSignalError(OAIProcessThreadInfoCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListProcessThreadsSlotSignalError() instead")
    void webAppsListProcessThreadsSlotSignalE(OAIProcessThreadInfoCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListProcessThreadsSlotSignalError(OAIProcessThreadInfoCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListProcessesSignalError() instead")
    void webAppsListProcessesSignalE(OAIProcessInfoCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListProcessesSignalError(OAIProcessInfoCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListProcessesSlotSignalError() instead")
    void webAppsListProcessesSlotSignalE(OAIProcessInfoCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListProcessesSlotSignalError(OAIProcessInfoCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListPublicCertificatesSignalError() instead")
    void webAppsListPublicCertificatesSignalE(OAIPublicCertificateCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListPublicCertificatesSignalError(OAIPublicCertificateCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListPublicCertificatesSlotSignalError() instead")
    void webAppsListPublicCertificatesSlotSignalE(OAIPublicCertificateCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListPublicCertificatesSlotSignalError(OAIPublicCertificateCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListPublishingCredentialsSignalError() instead")
    void webAppsListPublishingCredentialsSignalE(OAIWebApps_ListPublishingCredentials_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListPublishingCredentialsSignalError(OAIWebApps_ListPublishingCredentials_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListPublishingCredentialsSlotSignalError() instead")
    void webAppsListPublishingCredentialsSlotSignalE(OAIWebApps_ListPublishingCredentials_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListPublishingCredentialsSlotSignalError(OAIWebApps_ListPublishingCredentials_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListPublishingProfileXmlWithSecretsSignalError() instead")
    void webAppsListPublishingProfileXmlWithSecretsSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListPublishingProfileXmlWithSecretsSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListPublishingProfileXmlWithSecretsSlotSignalError() instead")
    void webAppsListPublishingProfileXmlWithSecretsSlotSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListPublishingProfileXmlWithSecretsSlotSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListRelayServiceConnectionsSignalError() instead")
    void webAppsListRelayServiceConnectionsSignalE(OAIRelayServiceConnectionEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListRelayServiceConnectionsSignalError(OAIRelayServiceConnectionEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListRelayServiceConnectionsSlotSignalError() instead")
    void webAppsListRelayServiceConnectionsSlotSignalE(OAIRelayServiceConnectionEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListRelayServiceConnectionsSlotSignalError(OAIRelayServiceConnectionEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListSiteExtensionsSignalError() instead")
    void webAppsListSiteExtensionsSignalE(OAISiteExtensionInfoCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListSiteExtensionsSignalError(OAISiteExtensionInfoCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListSiteExtensionsSlotSignalError() instead")
    void webAppsListSiteExtensionsSlotSignalE(OAISiteExtensionInfoCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListSiteExtensionsSlotSignalError(OAISiteExtensionInfoCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListSitePushSettingsSignalError() instead")
    void webAppsListSitePushSettingsSignalE(OAIWebApps_UpdateSitePushSettings_request summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListSitePushSettingsSignalError(OAIWebApps_UpdateSitePushSettings_request summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListSitePushSettingsSlotSignalError() instead")
    void webAppsListSitePushSettingsSlotSignalE(OAIWebApps_UpdateSitePushSettings_request summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListSitePushSettingsSlotSignalError(OAIWebApps_UpdateSitePushSettings_request summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListSlotConfigurationNamesSignalError() instead")
    void webAppsListSlotConfigurationNamesSignalE(OAISlotConfigNamesResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListSlotConfigurationNamesSignalError(OAISlotConfigNamesResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListSlotDifferencesFromProductionSignalError() instead")
    void webAppsListSlotDifferencesFromProductionSignalE(OAISlotDifferenceCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListSlotDifferencesFromProductionSignalError(OAISlotDifferenceCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListSlotDifferencesSlotSignalError() instead")
    void webAppsListSlotDifferencesSlotSignalE(OAISlotDifferenceCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListSlotDifferencesSlotSignalError(OAISlotDifferenceCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListSlotsSignalError() instead")
    void webAppsListSlotsSignalE(OAIWebApps_List_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListSlotsSignalError(OAIWebApps_List_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListSnapshotsSignalError() instead")
    void webAppsListSnapshotsSignalE(OAISnapshotCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListSnapshotsSignalError(OAISnapshotCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListSnapshotsFromDRSecondarySignalError() instead")
    void webAppsListSnapshotsFromDRSecondarySignalE(OAISnapshotCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListSnapshotsFromDRSecondarySignalError(OAISnapshotCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListSnapshotsFromDRSecondarySlotSignalError() instead")
    void webAppsListSnapshotsFromDRSecondarySlotSignalE(OAISnapshotCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListSnapshotsFromDRSecondarySlotSignalError(OAISnapshotCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListSnapshotsSlotSignalError() instead")
    void webAppsListSnapshotsSlotSignalE(OAISnapshotCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListSnapshotsSlotSignalError(OAISnapshotCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListSyncFunctionTriggersSignalError() instead")
    void webAppsListSyncFunctionTriggersSignalE(OAIFunctionSecrets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListSyncFunctionTriggersSignalError(OAIFunctionSecrets summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListSyncFunctionTriggersSlotSignalError() instead")
    void webAppsListSyncFunctionTriggersSlotSignalE(OAIFunctionSecrets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListSyncFunctionTriggersSlotSignalError(OAIFunctionSecrets summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListTriggeredWebJobHistorySignalError() instead")
    void webAppsListTriggeredWebJobHistorySignalE(OAITriggeredJobHistoryCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListTriggeredWebJobHistorySignalError(OAITriggeredJobHistoryCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListTriggeredWebJobHistorySlotSignalError() instead")
    void webAppsListTriggeredWebJobHistorySlotSignalE(OAITriggeredJobHistoryCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListTriggeredWebJobHistorySlotSignalError(OAITriggeredJobHistoryCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListTriggeredWebJobsSignalError() instead")
    void webAppsListTriggeredWebJobsSignalE(OAITriggeredWebJobCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListTriggeredWebJobsSignalError(OAITriggeredWebJobCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListTriggeredWebJobsSlotSignalError() instead")
    void webAppsListTriggeredWebJobsSlotSignalE(OAITriggeredWebJobCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListTriggeredWebJobsSlotSignalError(OAITriggeredWebJobCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListUsagesSignalError() instead")
    void webAppsListUsagesSignalE(OAIWebApps_ListUsagesSlot_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListUsagesSignalError(OAIWebApps_ListUsagesSlot_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListUsagesSlotSignalError() instead")
    void webAppsListUsagesSlotSignalE(OAIWebApps_ListUsagesSlot_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListUsagesSlotSignalError(OAIWebApps_ListUsagesSlot_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListVnetConnectionsSignalError() instead")
    void webAppsListVnetConnectionsSignalE(QList<OAIWebApps_ListVnetConnectionsSlot_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListVnetConnectionsSignalError(QList<OAIWebApps_ListVnetConnectionsSlot_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListVnetConnectionsSlotSignalError() instead")
    void webAppsListVnetConnectionsSlotSignalE(QList<OAIWebApps_ListVnetConnectionsSlot_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListVnetConnectionsSlotSignalError(QList<OAIWebApps_ListVnetConnectionsSlot_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListWebJobsSignalError() instead")
    void webAppsListWebJobsSignalE(OAIWebJobCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListWebJobsSignalError(OAIWebJobCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListWebJobsSlotSignalError() instead")
    void webAppsListWebJobsSlotSignalE(OAIWebJobCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListWebJobsSlotSignalError(OAIWebJobCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsMigrateMySqlSignalError() instead")
    void webAppsMigrateMySqlSignalE(OAIWebApps_MigrateMySql_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsMigrateMySqlSignalError(OAIWebApps_MigrateMySql_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsMigrateStorageSignalError() instead")
    void webAppsMigrateStorageSignalE(OAIStorageMigrationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsMigrateStorageSignalError(OAIStorageMigrationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsPutPrivateAccessVnetSignalError() instead")
    void webAppsPutPrivateAccessVnetSignalE(OAIPrivateAccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsPutPrivateAccessVnetSignalError(OAIPrivateAccess summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsPutPrivateAccessVnetSlotSignalError() instead")
    void webAppsPutPrivateAccessVnetSlotSignalE(OAIPrivateAccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsPutPrivateAccessVnetSlotSignalError(OAIPrivateAccess summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsRecoverSiteConfigurationSnapshotSignalError() instead")
    void webAppsRecoverSiteConfigurationSnapshotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsRecoverSiteConfigurationSnapshotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsRecoverSiteConfigurationSnapshotSlotSignalError() instead")
    void webAppsRecoverSiteConfigurationSnapshotSlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsRecoverSiteConfigurationSnapshotSlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsResetProductionSlotConfigSignalError() instead")
    void webAppsResetProductionSlotConfigSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsResetProductionSlotConfigSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsResetSlotConfigurationSlotSignalError() instead")
    void webAppsResetSlotConfigurationSlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsResetSlotConfigurationSlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsRestartSignalError() instead")
    void webAppsRestartSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsRestartSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsRestartSlotSignalError() instead")
    void webAppsRestartSlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsRestartSlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsRestoreSignalError() instead")
    void webAppsRestoreSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsRestoreSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsRestoreFromBackupBlobSignalError() instead")
    void webAppsRestoreFromBackupBlobSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsRestoreFromBackupBlobSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsRestoreFromBackupBlobSlotSignalError() instead")
    void webAppsRestoreFromBackupBlobSlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsRestoreFromBackupBlobSlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsRestoreFromDeletedAppSignalError() instead")
    void webAppsRestoreFromDeletedAppSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsRestoreFromDeletedAppSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsRestoreFromDeletedAppSlotSignalError() instead")
    void webAppsRestoreFromDeletedAppSlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsRestoreFromDeletedAppSlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsRestoreSlotSignalError() instead")
    void webAppsRestoreSlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsRestoreSlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsRestoreSnapshotSignalError() instead")
    void webAppsRestoreSnapshotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsRestoreSnapshotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsRestoreSnapshotSlotSignalError() instead")
    void webAppsRestoreSnapshotSlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsRestoreSnapshotSlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsRunTriggeredWebJobSignalError() instead")
    void webAppsRunTriggeredWebJobSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsRunTriggeredWebJobSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsRunTriggeredWebJobSlotSignalError() instead")
    void webAppsRunTriggeredWebJobSlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsRunTriggeredWebJobSlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsStartSignalError() instead")
    void webAppsStartSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsStartSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsStartContinuousWebJobSignalError() instead")
    void webAppsStartContinuousWebJobSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsStartContinuousWebJobSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsStartContinuousWebJobSlotSignalError() instead")
    void webAppsStartContinuousWebJobSlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsStartContinuousWebJobSlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsStartNetworkTraceSignalError() instead")
    void webAppsStartNetworkTraceSignalE(QList<OAINetworkTrace> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsStartNetworkTraceSignalError(QList<OAINetworkTrace> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsStartNetworkTraceSlotSignalError() instead")
    void webAppsStartNetworkTraceSlotSignalE(QList<OAINetworkTrace> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsStartNetworkTraceSlotSignalError(QList<OAINetworkTrace> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsStartSlotSignalError() instead")
    void webAppsStartSlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsStartSlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsStartWebSiteNetworkTraceSignalError() instead")
    void webAppsStartWebSiteNetworkTraceSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsStartWebSiteNetworkTraceSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsStartWebSiteNetworkTraceOperationSignalError() instead")
    void webAppsStartWebSiteNetworkTraceOperationSignalE(QList<OAINetworkTrace> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsStartWebSiteNetworkTraceOperationSignalError(QList<OAINetworkTrace> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsStartWebSiteNetworkTraceOperationSlotSignalError() instead")
    void webAppsStartWebSiteNetworkTraceOperationSlotSignalE(QList<OAINetworkTrace> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsStartWebSiteNetworkTraceOperationSlotSignalError(QList<OAINetworkTrace> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsStartWebSiteNetworkTraceSlotSignalError() instead")
    void webAppsStartWebSiteNetworkTraceSlotSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsStartWebSiteNetworkTraceSlotSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsStopSignalError() instead")
    void webAppsStopSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsStopSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsStopContinuousWebJobSignalError() instead")
    void webAppsStopContinuousWebJobSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsStopContinuousWebJobSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsStopContinuousWebJobSlotSignalError() instead")
    void webAppsStopContinuousWebJobSlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsStopContinuousWebJobSlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsStopNetworkTraceSignalError() instead")
    void webAppsStopNetworkTraceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsStopNetworkTraceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsStopNetworkTraceSlotSignalError() instead")
    void webAppsStopNetworkTraceSlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsStopNetworkTraceSlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsStopSlotSignalError() instead")
    void webAppsStopSlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsStopSlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsStopWebSiteNetworkTraceSignalError() instead")
    void webAppsStopWebSiteNetworkTraceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsStopWebSiteNetworkTraceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsStopWebSiteNetworkTraceSlotSignalError() instead")
    void webAppsStopWebSiteNetworkTraceSlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsStopWebSiteNetworkTraceSlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsSwapSlotSlotSignalError() instead")
    void webAppsSwapSlotSlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsSwapSlotSlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsSwapSlotWithProductionSignalError() instead")
    void webAppsSwapSlotWithProductionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsSwapSlotWithProductionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsSyncFunctionTriggersSignalError() instead")
    void webAppsSyncFunctionTriggersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsSyncFunctionTriggersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsSyncFunctionTriggersSlotSignalError() instead")
    void webAppsSyncFunctionTriggersSlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsSyncFunctionTriggersSlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsSyncRepositorySignalError() instead")
    void webAppsSyncRepositorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsSyncRepositorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsSyncRepositorySlotSignalError() instead")
    void webAppsSyncRepositorySlotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsSyncRepositorySlotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateSignalError() instead")
    void webAppsUpdateSignalE(OAIWebApps_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateSignalError(OAIWebApps_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateApplicationSettingsSignalError() instead")
    void webAppsUpdateApplicationSettingsSignalE(OAIStringDictionary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateApplicationSettingsSignalError(OAIStringDictionary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateApplicationSettingsSlotSignalError() instead")
    void webAppsUpdateApplicationSettingsSlotSignalE(OAIStringDictionary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateApplicationSettingsSlotSignalError(OAIStringDictionary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateAuthSettingsSignalError() instead")
    void webAppsUpdateAuthSettingsSignalE(OAISiteAuthSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateAuthSettingsSignalError(OAISiteAuthSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateAuthSettingsSlotSignalError() instead")
    void webAppsUpdateAuthSettingsSlotSignalE(OAISiteAuthSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateAuthSettingsSlotSignalError(OAISiteAuthSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateAzureStorageAccountsSignalError() instead")
    void webAppsUpdateAzureStorageAccountsSignalE(OAIAzureStoragePropertyDictionaryResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateAzureStorageAccountsSignalError(OAIAzureStoragePropertyDictionaryResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateAzureStorageAccountsSlotSignalError() instead")
    void webAppsUpdateAzureStorageAccountsSlotSignalE(OAIAzureStoragePropertyDictionaryResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateAzureStorageAccountsSlotSignalError(OAIAzureStoragePropertyDictionaryResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateBackupConfigurationSignalError() instead")
    void webAppsUpdateBackupConfigurationSignalE(OAIBackupRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateBackupConfigurationSignalError(OAIBackupRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateBackupConfigurationSlotSignalError() instead")
    void webAppsUpdateBackupConfigurationSlotSignalE(OAIBackupRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateBackupConfigurationSlotSignalError(OAIBackupRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateConfigurationSignalError() instead")
    void webAppsUpdateConfigurationSignalE(OAISiteConfigResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateConfigurationSignalError(OAISiteConfigResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateConfigurationSlotSignalError() instead")
    void webAppsUpdateConfigurationSlotSignalE(OAISiteConfigResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateConfigurationSlotSignalError(OAISiteConfigResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateConnectionStringsSignalError() instead")
    void webAppsUpdateConnectionStringsSignalE(OAIConnectionStringDictionary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateConnectionStringsSignalError(OAIConnectionStringDictionary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateConnectionStringsSlotSignalError() instead")
    void webAppsUpdateConnectionStringsSlotSignalE(OAIConnectionStringDictionary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateConnectionStringsSlotSignalError(OAIConnectionStringDictionary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateDiagnosticLogsConfigSignalError() instead")
    void webAppsUpdateDiagnosticLogsConfigSignalE(OAISiteLogsConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateDiagnosticLogsConfigSignalError(OAISiteLogsConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateDiagnosticLogsConfigSlotSignalError() instead")
    void webAppsUpdateDiagnosticLogsConfigSlotSignalE(OAISiteLogsConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateDiagnosticLogsConfigSlotSignalError(OAISiteLogsConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateDomainOwnershipIdentifierSignalError() instead")
    void webAppsUpdateDomainOwnershipIdentifierSignalE(OAIWebApps_GetDomainOwnershipIdentifier_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateDomainOwnershipIdentifierSignalError(OAIWebApps_GetDomainOwnershipIdentifier_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateDomainOwnershipIdentifierSlotSignalError() instead")
    void webAppsUpdateDomainOwnershipIdentifierSlotSignalE(OAIWebApps_GetDomainOwnershipIdentifier_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateDomainOwnershipIdentifierSlotSignalError(OAIWebApps_GetDomainOwnershipIdentifier_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateHybridConnectionSignalError() instead")
    void webAppsUpdateHybridConnectionSignalE(OAIWebApps_GetHybridConnection_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateHybridConnectionSignalError(OAIWebApps_GetHybridConnection_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateHybridConnectionSlotSignalError() instead")
    void webAppsUpdateHybridConnectionSlotSignalE(OAIWebApps_GetHybridConnection_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateHybridConnectionSlotSignalError(OAIWebApps_GetHybridConnection_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateMetadataSignalError() instead")
    void webAppsUpdateMetadataSignalE(OAIStringDictionary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateMetadataSignalError(OAIStringDictionary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateMetadataSlotSignalError() instead")
    void webAppsUpdateMetadataSlotSignalE(OAIStringDictionary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateMetadataSlotSignalError(OAIStringDictionary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdatePremierAddOnSignalError() instead")
    void webAppsUpdatePremierAddOnSignalE(OAIPremierAddOn summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdatePremierAddOnSignalError(OAIPremierAddOn summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdatePremierAddOnSlotSignalError() instead")
    void webAppsUpdatePremierAddOnSlotSignalE(OAIPremierAddOn summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdatePremierAddOnSlotSignalError(OAIPremierAddOn summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateRelayServiceConnectionSignalError() instead")
    void webAppsUpdateRelayServiceConnectionSignalE(OAIRelayServiceConnectionEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateRelayServiceConnectionSignalError(OAIRelayServiceConnectionEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateRelayServiceConnectionSlotSignalError() instead")
    void webAppsUpdateRelayServiceConnectionSlotSignalE(OAIRelayServiceConnectionEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateRelayServiceConnectionSlotSignalError(OAIRelayServiceConnectionEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateSitePushSettingsSignalError() instead")
    void webAppsUpdateSitePushSettingsSignalE(OAIWebApps_UpdateSitePushSettings_request summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateSitePushSettingsSignalError(OAIWebApps_UpdateSitePushSettings_request summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateSitePushSettingsSlotSignalError() instead")
    void webAppsUpdateSitePushSettingsSlotSignalE(OAIWebApps_UpdateSitePushSettings_request summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateSitePushSettingsSlotSignalError(OAIWebApps_UpdateSitePushSettings_request summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateSlotSignalError() instead")
    void webAppsUpdateSlotSignalE(OAIWebApps_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateSlotSignalError(OAIWebApps_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateSlotConfigurationNamesSignalError() instead")
    void webAppsUpdateSlotConfigurationNamesSignalE(OAISlotConfigNamesResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateSlotConfigurationNamesSignalError(OAISlotConfigNamesResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateSourceControlSignalError() instead")
    void webAppsUpdateSourceControlSignalE(OAISiteSourceControl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateSourceControlSignalError(OAISiteSourceControl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateSourceControlSlotSignalError() instead")
    void webAppsUpdateSourceControlSlotSignalE(OAISiteSourceControl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateSourceControlSlotSignalError(OAISiteSourceControl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateSwiftVirtualNetworkConnectionSignalError() instead")
    void webAppsUpdateSwiftVirtualNetworkConnectionSignalE(OAISwiftVirtualNetwork summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateSwiftVirtualNetworkConnectionSignalError(OAISwiftVirtualNetwork summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateSwiftVirtualNetworkConnectionSlotSignalError() instead")
    void webAppsUpdateSwiftVirtualNetworkConnectionSlotSignalE(OAISwiftVirtualNetwork summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateSwiftVirtualNetworkConnectionSlotSignalError(OAISwiftVirtualNetwork summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateVnetConnectionSignalError() instead")
    void webAppsUpdateVnetConnectionSignalE(OAIWebApps_GetVnetConnectionSlot_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateVnetConnectionSignalError(OAIWebApps_GetVnetConnectionSlot_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateVnetConnectionGatewaySignalError() instead")
    void webAppsUpdateVnetConnectionGatewaySignalE(OAIWebApps_GetVnetConnectionGatewaySlot_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateVnetConnectionGatewaySignalError(OAIWebApps_GetVnetConnectionGatewaySlot_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateVnetConnectionGatewaySlotSignalError() instead")
    void webAppsUpdateVnetConnectionGatewaySlotSignalE(OAIWebApps_GetVnetConnectionGatewaySlot_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateVnetConnectionGatewaySlotSignalError(OAIWebApps_GetVnetConnectionGatewaySlot_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateVnetConnectionSlotSignalError() instead")
    void webAppsUpdateVnetConnectionSlotSignalE(OAIWebApps_GetVnetConnectionSlot_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateVnetConnectionSlotSignalError(OAIWebApps_GetVnetConnectionSlot_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use webAppsAddPremierAddOnSignalErrorFull() instead")
    void webAppsAddPremierAddOnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsAddPremierAddOnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsAddPremierAddOnSlotSignalErrorFull() instead")
    void webAppsAddPremierAddOnSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsAddPremierAddOnSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsAnalyzeCustomHostnameSignalErrorFull() instead")
    void webAppsAnalyzeCustomHostnameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsAnalyzeCustomHostnameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsAnalyzeCustomHostnameSlotSignalErrorFull() instead")
    void webAppsAnalyzeCustomHostnameSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsAnalyzeCustomHostnameSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsApplySlotConfigToProductionSignalErrorFull() instead")
    void webAppsApplySlotConfigToProductionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsApplySlotConfigToProductionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsApplySlotConfigurationSlotSignalErrorFull() instead")
    void webAppsApplySlotConfigurationSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsApplySlotConfigurationSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsBackupSignalErrorFull() instead")
    void webAppsBackupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsBackupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsBackupSlotSignalErrorFull() instead")
    void webAppsBackupSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsBackupSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateDeploymentSignalErrorFull() instead")
    void webAppsCreateDeploymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateDeploymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateDeploymentSlotSignalErrorFull() instead")
    void webAppsCreateDeploymentSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateDeploymentSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateFunctionSignalErrorFull() instead")
    void webAppsCreateFunctionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateFunctionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateInstanceFunctionSlotSignalErrorFull() instead")
    void webAppsCreateInstanceFunctionSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateInstanceFunctionSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateInstanceMSDeployOperationSignalErrorFull() instead")
    void webAppsCreateInstanceMSDeployOperationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateInstanceMSDeployOperationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateInstanceMSDeployOperationSlotSignalErrorFull() instead")
    void webAppsCreateInstanceMSDeployOperationSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateInstanceMSDeployOperationSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateMSDeployOperationSignalErrorFull() instead")
    void webAppsCreateMSDeployOperationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateMSDeployOperationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateMSDeployOperationSlotSignalErrorFull() instead")
    void webAppsCreateMSDeployOperationSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateMSDeployOperationSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateSignalErrorFull() instead")
    void webAppsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateConfigurationSignalErrorFull() instead")
    void webAppsCreateOrUpdateConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateConfigurationSlotSignalErrorFull() instead")
    void webAppsCreateOrUpdateConfigurationSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateConfigurationSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateDomainOwnershipIdentifierSignalErrorFull() instead")
    void webAppsCreateOrUpdateDomainOwnershipIdentifierSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateDomainOwnershipIdentifierSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateDomainOwnershipIdentifierSlotSignalErrorFull() instead")
    void webAppsCreateOrUpdateDomainOwnershipIdentifierSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateDomainOwnershipIdentifierSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateHostNameBindingSignalErrorFull() instead")
    void webAppsCreateOrUpdateHostNameBindingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateHostNameBindingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateHostNameBindingSlotSignalErrorFull() instead")
    void webAppsCreateOrUpdateHostNameBindingSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateHostNameBindingSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateHybridConnectionSignalErrorFull() instead")
    void webAppsCreateOrUpdateHybridConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateHybridConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateHybridConnectionSlotSignalErrorFull() instead")
    void webAppsCreateOrUpdateHybridConnectionSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateHybridConnectionSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdatePublicCertificateSignalErrorFull() instead")
    void webAppsCreateOrUpdatePublicCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdatePublicCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdatePublicCertificateSlotSignalErrorFull() instead")
    void webAppsCreateOrUpdatePublicCertificateSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdatePublicCertificateSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateRelayServiceConnectionSignalErrorFull() instead")
    void webAppsCreateOrUpdateRelayServiceConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateRelayServiceConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateRelayServiceConnectionSlotSignalErrorFull() instead")
    void webAppsCreateOrUpdateRelayServiceConnectionSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateRelayServiceConnectionSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateSlotSignalErrorFull() instead")
    void webAppsCreateOrUpdateSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateSourceControlSignalErrorFull() instead")
    void webAppsCreateOrUpdateSourceControlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateSourceControlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateSourceControlSlotSignalErrorFull() instead")
    void webAppsCreateOrUpdateSourceControlSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateSourceControlSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSignalErrorFull() instead")
    void webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlotSignalErrorFull() instead")
    void webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateVnetConnectionSignalErrorFull() instead")
    void webAppsCreateOrUpdateVnetConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateVnetConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateVnetConnectionGatewaySignalErrorFull() instead")
    void webAppsCreateOrUpdateVnetConnectionGatewaySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateVnetConnectionGatewaySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateVnetConnectionGatewaySlotSignalErrorFull() instead")
    void webAppsCreateOrUpdateVnetConnectionGatewaySlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateVnetConnectionGatewaySlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsCreateOrUpdateVnetConnectionSlotSignalErrorFull() instead")
    void webAppsCreateOrUpdateVnetConnectionSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsCreateOrUpdateVnetConnectionSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteSignalErrorFull() instead")
    void webAppsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteBackupSignalErrorFull() instead")
    void webAppsDeleteBackupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteBackupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteBackupConfigurationSignalErrorFull() instead")
    void webAppsDeleteBackupConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteBackupConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteBackupConfigurationSlotSignalErrorFull() instead")
    void webAppsDeleteBackupConfigurationSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteBackupConfigurationSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteBackupSlotSignalErrorFull() instead")
    void webAppsDeleteBackupSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteBackupSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteContinuousWebJobSignalErrorFull() instead")
    void webAppsDeleteContinuousWebJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteContinuousWebJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteContinuousWebJobSlotSignalErrorFull() instead")
    void webAppsDeleteContinuousWebJobSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteContinuousWebJobSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteDeploymentSignalErrorFull() instead")
    void webAppsDeleteDeploymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteDeploymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteDeploymentSlotSignalErrorFull() instead")
    void webAppsDeleteDeploymentSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteDeploymentSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteDomainOwnershipIdentifierSignalErrorFull() instead")
    void webAppsDeleteDomainOwnershipIdentifierSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteDomainOwnershipIdentifierSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteDomainOwnershipIdentifierSlotSignalErrorFull() instead")
    void webAppsDeleteDomainOwnershipIdentifierSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteDomainOwnershipIdentifierSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteFunctionSignalErrorFull() instead")
    void webAppsDeleteFunctionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteFunctionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteHostNameBindingSignalErrorFull() instead")
    void webAppsDeleteHostNameBindingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteHostNameBindingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteHostNameBindingSlotSignalErrorFull() instead")
    void webAppsDeleteHostNameBindingSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteHostNameBindingSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteHybridConnectionSignalErrorFull() instead")
    void webAppsDeleteHybridConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteHybridConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteHybridConnectionSlotSignalErrorFull() instead")
    void webAppsDeleteHybridConnectionSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteHybridConnectionSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteInstanceFunctionSlotSignalErrorFull() instead")
    void webAppsDeleteInstanceFunctionSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteInstanceFunctionSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteInstanceProcessSignalErrorFull() instead")
    void webAppsDeleteInstanceProcessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteInstanceProcessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteInstanceProcessSlotSignalErrorFull() instead")
    void webAppsDeleteInstanceProcessSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteInstanceProcessSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeletePremierAddOnSignalErrorFull() instead")
    void webAppsDeletePremierAddOnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeletePremierAddOnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeletePremierAddOnSlotSignalErrorFull() instead")
    void webAppsDeletePremierAddOnSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeletePremierAddOnSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteProcessSignalErrorFull() instead")
    void webAppsDeleteProcessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteProcessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteProcessSlotSignalErrorFull() instead")
    void webAppsDeleteProcessSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteProcessSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeletePublicCertificateSignalErrorFull() instead")
    void webAppsDeletePublicCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeletePublicCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeletePublicCertificateSlotSignalErrorFull() instead")
    void webAppsDeletePublicCertificateSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeletePublicCertificateSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteRelayServiceConnectionSignalErrorFull() instead")
    void webAppsDeleteRelayServiceConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteRelayServiceConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteRelayServiceConnectionSlotSignalErrorFull() instead")
    void webAppsDeleteRelayServiceConnectionSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteRelayServiceConnectionSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteSiteExtensionSignalErrorFull() instead")
    void webAppsDeleteSiteExtensionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteSiteExtensionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteSiteExtensionSlotSignalErrorFull() instead")
    void webAppsDeleteSiteExtensionSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteSiteExtensionSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteSlotSignalErrorFull() instead")
    void webAppsDeleteSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteSourceControlSignalErrorFull() instead")
    void webAppsDeleteSourceControlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteSourceControlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteSourceControlSlotSignalErrorFull() instead")
    void webAppsDeleteSourceControlSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteSourceControlSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteSwiftVirtualNetworkSignalErrorFull() instead")
    void webAppsDeleteSwiftVirtualNetworkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteSwiftVirtualNetworkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteSwiftVirtualNetworkSlotSignalErrorFull() instead")
    void webAppsDeleteSwiftVirtualNetworkSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteSwiftVirtualNetworkSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteTriggeredWebJobSignalErrorFull() instead")
    void webAppsDeleteTriggeredWebJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteTriggeredWebJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteTriggeredWebJobSlotSignalErrorFull() instead")
    void webAppsDeleteTriggeredWebJobSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteTriggeredWebJobSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteVnetConnectionSignalErrorFull() instead")
    void webAppsDeleteVnetConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteVnetConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDeleteVnetConnectionSlotSignalErrorFull() instead")
    void webAppsDeleteVnetConnectionSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDeleteVnetConnectionSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDiscoverBackupSignalErrorFull() instead")
    void webAppsDiscoverBackupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDiscoverBackupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsDiscoverBackupSlotSignalErrorFull() instead")
    void webAppsDiscoverBackupSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsDiscoverBackupSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGenerateNewSitePublishingPasswordSignalErrorFull() instead")
    void webAppsGenerateNewSitePublishingPasswordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGenerateNewSitePublishingPasswordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGenerateNewSitePublishingPasswordSlotSignalErrorFull() instead")
    void webAppsGenerateNewSitePublishingPasswordSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGenerateNewSitePublishingPasswordSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetSignalErrorFull() instead")
    void webAppsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetAuthSettingsSignalErrorFull() instead")
    void webAppsGetAuthSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetAuthSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetAuthSettingsSlotSignalErrorFull() instead")
    void webAppsGetAuthSettingsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetAuthSettingsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetBackupConfigurationSignalErrorFull() instead")
    void webAppsGetBackupConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetBackupConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetBackupConfigurationSlotSignalErrorFull() instead")
    void webAppsGetBackupConfigurationSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetBackupConfigurationSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetBackupStatusSignalErrorFull() instead")
    void webAppsGetBackupStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetBackupStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetBackupStatusSlotSignalErrorFull() instead")
    void webAppsGetBackupStatusSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetBackupStatusSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetConfigurationSignalErrorFull() instead")
    void webAppsGetConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetConfigurationSlotSignalErrorFull() instead")
    void webAppsGetConfigurationSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetConfigurationSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetConfigurationSnapshotSignalErrorFull() instead")
    void webAppsGetConfigurationSnapshotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetConfigurationSnapshotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetConfigurationSnapshotSlotSignalErrorFull() instead")
    void webAppsGetConfigurationSnapshotSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetConfigurationSnapshotSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetContainerLogsZipSignalErrorFull() instead")
    void webAppsGetContainerLogsZipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetContainerLogsZipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetContainerLogsZipSlotSignalErrorFull() instead")
    void webAppsGetContainerLogsZipSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetContainerLogsZipSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetContinuousWebJobSignalErrorFull() instead")
    void webAppsGetContinuousWebJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetContinuousWebJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetContinuousWebJobSlotSignalErrorFull() instead")
    void webAppsGetContinuousWebJobSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetContinuousWebJobSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetDeploymentSignalErrorFull() instead")
    void webAppsGetDeploymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetDeploymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetDeploymentSlotSignalErrorFull() instead")
    void webAppsGetDeploymentSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetDeploymentSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetDiagnosticLogsConfigurationSignalErrorFull() instead")
    void webAppsGetDiagnosticLogsConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetDiagnosticLogsConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetDiagnosticLogsConfigurationSlotSignalErrorFull() instead")
    void webAppsGetDiagnosticLogsConfigurationSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetDiagnosticLogsConfigurationSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetDomainOwnershipIdentifierSignalErrorFull() instead")
    void webAppsGetDomainOwnershipIdentifierSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetDomainOwnershipIdentifierSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetDomainOwnershipIdentifierSlotSignalErrorFull() instead")
    void webAppsGetDomainOwnershipIdentifierSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetDomainOwnershipIdentifierSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetFunctionSignalErrorFull() instead")
    void webAppsGetFunctionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetFunctionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetFunctionsAdminTokenSignalErrorFull() instead")
    void webAppsGetFunctionsAdminTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetFunctionsAdminTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetFunctionsAdminTokenSlotSignalErrorFull() instead")
    void webAppsGetFunctionsAdminTokenSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetFunctionsAdminTokenSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetHostNameBindingSignalErrorFull() instead")
    void webAppsGetHostNameBindingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetHostNameBindingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetHostNameBindingSlotSignalErrorFull() instead")
    void webAppsGetHostNameBindingSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetHostNameBindingSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetHybridConnectionSignalErrorFull() instead")
    void webAppsGetHybridConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetHybridConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetHybridConnectionSlotSignalErrorFull() instead")
    void webAppsGetHybridConnectionSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetHybridConnectionSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetInstanceFunctionSlotSignalErrorFull() instead")
    void webAppsGetInstanceFunctionSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetInstanceFunctionSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetInstanceMSDeployLogSignalErrorFull() instead")
    void webAppsGetInstanceMSDeployLogSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetInstanceMSDeployLogSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetInstanceMSDeployLogSlotSignalErrorFull() instead")
    void webAppsGetInstanceMSDeployLogSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetInstanceMSDeployLogSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetInstanceMsDeployStatusSignalErrorFull() instead")
    void webAppsGetInstanceMsDeployStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetInstanceMsDeployStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetInstanceMsDeployStatusSlotSignalErrorFull() instead")
    void webAppsGetInstanceMsDeployStatusSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetInstanceMsDeployStatusSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetInstanceProcessSignalErrorFull() instead")
    void webAppsGetInstanceProcessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetInstanceProcessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetInstanceProcessDumpSignalErrorFull() instead")
    void webAppsGetInstanceProcessDumpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetInstanceProcessDumpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetInstanceProcessDumpSlotSignalErrorFull() instead")
    void webAppsGetInstanceProcessDumpSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetInstanceProcessDumpSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetInstanceProcessModuleSignalErrorFull() instead")
    void webAppsGetInstanceProcessModuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetInstanceProcessModuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetInstanceProcessModuleSlotSignalErrorFull() instead")
    void webAppsGetInstanceProcessModuleSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetInstanceProcessModuleSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetInstanceProcessSlotSignalErrorFull() instead")
    void webAppsGetInstanceProcessSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetInstanceProcessSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetInstanceProcessThreadSignalErrorFull() instead")
    void webAppsGetInstanceProcessThreadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetInstanceProcessThreadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetInstanceProcessThreadSlotSignalErrorFull() instead")
    void webAppsGetInstanceProcessThreadSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetInstanceProcessThreadSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetMSDeployLogSignalErrorFull() instead")
    void webAppsGetMSDeployLogSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetMSDeployLogSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetMSDeployLogSlotSignalErrorFull() instead")
    void webAppsGetMSDeployLogSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetMSDeployLogSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetMSDeployStatusSignalErrorFull() instead")
    void webAppsGetMSDeployStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetMSDeployStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetMSDeployStatusSlotSignalErrorFull() instead")
    void webAppsGetMSDeployStatusSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetMSDeployStatusSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetMigrateMySqlStatusSignalErrorFull() instead")
    void webAppsGetMigrateMySqlStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetMigrateMySqlStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetMigrateMySqlStatusSlotSignalErrorFull() instead")
    void webAppsGetMigrateMySqlStatusSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetMigrateMySqlStatusSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetNetworkTraceOperationSignalErrorFull() instead")
    void webAppsGetNetworkTraceOperationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetNetworkTraceOperationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetNetworkTraceOperationSlotSignalErrorFull() instead")
    void webAppsGetNetworkTraceOperationSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetNetworkTraceOperationSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetNetworkTraceOperationSlotV2SignalErrorFull() instead")
    void webAppsGetNetworkTraceOperationSlotV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetNetworkTraceOperationSlotV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetNetworkTraceOperationV2SignalErrorFull() instead")
    void webAppsGetNetworkTraceOperationV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetNetworkTraceOperationV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetNetworkTracesSignalErrorFull() instead")
    void webAppsGetNetworkTracesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetNetworkTracesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetNetworkTracesSlotSignalErrorFull() instead")
    void webAppsGetNetworkTracesSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetNetworkTracesSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetNetworkTracesSlotV2SignalErrorFull() instead")
    void webAppsGetNetworkTracesSlotV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetNetworkTracesSlotV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetNetworkTracesV2SignalErrorFull() instead")
    void webAppsGetNetworkTracesV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetNetworkTracesV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetPremierAddOnSignalErrorFull() instead")
    void webAppsGetPremierAddOnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetPremierAddOnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetPremierAddOnSlotSignalErrorFull() instead")
    void webAppsGetPremierAddOnSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetPremierAddOnSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetPrivateAccessSignalErrorFull() instead")
    void webAppsGetPrivateAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetPrivateAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetPrivateAccessSlotSignalErrorFull() instead")
    void webAppsGetPrivateAccessSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetPrivateAccessSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetProcessSignalErrorFull() instead")
    void webAppsGetProcessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetProcessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetProcessDumpSignalErrorFull() instead")
    void webAppsGetProcessDumpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetProcessDumpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetProcessDumpSlotSignalErrorFull() instead")
    void webAppsGetProcessDumpSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetProcessDumpSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetProcessModuleSignalErrorFull() instead")
    void webAppsGetProcessModuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetProcessModuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetProcessModuleSlotSignalErrorFull() instead")
    void webAppsGetProcessModuleSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetProcessModuleSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetProcessSlotSignalErrorFull() instead")
    void webAppsGetProcessSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetProcessSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetProcessThreadSignalErrorFull() instead")
    void webAppsGetProcessThreadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetProcessThreadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetProcessThreadSlotSignalErrorFull() instead")
    void webAppsGetProcessThreadSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetProcessThreadSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetPublicCertificateSignalErrorFull() instead")
    void webAppsGetPublicCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetPublicCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetPublicCertificateSlotSignalErrorFull() instead")
    void webAppsGetPublicCertificateSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetPublicCertificateSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetRelayServiceConnectionSignalErrorFull() instead")
    void webAppsGetRelayServiceConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetRelayServiceConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetRelayServiceConnectionSlotSignalErrorFull() instead")
    void webAppsGetRelayServiceConnectionSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetRelayServiceConnectionSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetSiteExtensionSignalErrorFull() instead")
    void webAppsGetSiteExtensionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetSiteExtensionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetSiteExtensionSlotSignalErrorFull() instead")
    void webAppsGetSiteExtensionSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetSiteExtensionSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetSitePhpErrorLogFlagSignalErrorFull() instead")
    void webAppsGetSitePhpErrorLogFlagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetSitePhpErrorLogFlagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetSitePhpErrorLogFlagSlotSignalErrorFull() instead")
    void webAppsGetSitePhpErrorLogFlagSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetSitePhpErrorLogFlagSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetSlotSignalErrorFull() instead")
    void webAppsGetSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetSourceControlSignalErrorFull() instead")
    void webAppsGetSourceControlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetSourceControlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetSourceControlSlotSignalErrorFull() instead")
    void webAppsGetSourceControlSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetSourceControlSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetSwiftVirtualNetworkConnectionSignalErrorFull() instead")
    void webAppsGetSwiftVirtualNetworkConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetSwiftVirtualNetworkConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetSwiftVirtualNetworkConnectionSlotSignalErrorFull() instead")
    void webAppsGetSwiftVirtualNetworkConnectionSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetSwiftVirtualNetworkConnectionSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetTriggeredWebJobSignalErrorFull() instead")
    void webAppsGetTriggeredWebJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetTriggeredWebJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetTriggeredWebJobHistorySignalErrorFull() instead")
    void webAppsGetTriggeredWebJobHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetTriggeredWebJobHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetTriggeredWebJobHistorySlotSignalErrorFull() instead")
    void webAppsGetTriggeredWebJobHistorySlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetTriggeredWebJobHistorySlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetTriggeredWebJobSlotSignalErrorFull() instead")
    void webAppsGetTriggeredWebJobSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetTriggeredWebJobSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetVnetConnectionSignalErrorFull() instead")
    void webAppsGetVnetConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetVnetConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetVnetConnectionGatewaySignalErrorFull() instead")
    void webAppsGetVnetConnectionGatewaySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetVnetConnectionGatewaySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetVnetConnectionGatewaySlotSignalErrorFull() instead")
    void webAppsGetVnetConnectionGatewaySlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetVnetConnectionGatewaySlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetVnetConnectionSlotSignalErrorFull() instead")
    void webAppsGetVnetConnectionSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetVnetConnectionSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetWebJobSignalErrorFull() instead")
    void webAppsGetWebJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetWebJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetWebJobSlotSignalErrorFull() instead")
    void webAppsGetWebJobSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetWebJobSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetWebSiteContainerLogsSignalErrorFull() instead")
    void webAppsGetWebSiteContainerLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetWebSiteContainerLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsGetWebSiteContainerLogsSlotSignalErrorFull() instead")
    void webAppsGetWebSiteContainerLogsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsGetWebSiteContainerLogsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsInstallSiteExtensionSignalErrorFull() instead")
    void webAppsInstallSiteExtensionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsInstallSiteExtensionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsInstallSiteExtensionSlotSignalErrorFull() instead")
    void webAppsInstallSiteExtensionSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsInstallSiteExtensionSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsIsCloneableSignalErrorFull() instead")
    void webAppsIsCloneableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsIsCloneableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsIsCloneableSlotSignalErrorFull() instead")
    void webAppsIsCloneableSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsIsCloneableSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListSignalErrorFull() instead")
    void webAppsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListApplicationSettingsSignalErrorFull() instead")
    void webAppsListApplicationSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListApplicationSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListApplicationSettingsSlotSignalErrorFull() instead")
    void webAppsListApplicationSettingsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListApplicationSettingsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListAzureStorageAccountsSignalErrorFull() instead")
    void webAppsListAzureStorageAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListAzureStorageAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListAzureStorageAccountsSlotSignalErrorFull() instead")
    void webAppsListAzureStorageAccountsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListAzureStorageAccountsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListBackupStatusSecretsSignalErrorFull() instead")
    void webAppsListBackupStatusSecretsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListBackupStatusSecretsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListBackupStatusSecretsSlotSignalErrorFull() instead")
    void webAppsListBackupStatusSecretsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListBackupStatusSecretsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListBackupsSignalErrorFull() instead")
    void webAppsListBackupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListBackupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListBackupsSlotSignalErrorFull() instead")
    void webAppsListBackupsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListBackupsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListByResourceGroupSignalErrorFull() instead")
    void webAppsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListConfigurationSnapshotInfoSignalErrorFull() instead")
    void webAppsListConfigurationSnapshotInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListConfigurationSnapshotInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListConfigurationSnapshotInfoSlotSignalErrorFull() instead")
    void webAppsListConfigurationSnapshotInfoSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListConfigurationSnapshotInfoSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListConfigurationsSignalErrorFull() instead")
    void webAppsListConfigurationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListConfigurationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListConfigurationsSlotSignalErrorFull() instead")
    void webAppsListConfigurationsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListConfigurationsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListConnectionStringsSignalErrorFull() instead")
    void webAppsListConnectionStringsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListConnectionStringsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListConnectionStringsSlotSignalErrorFull() instead")
    void webAppsListConnectionStringsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListConnectionStringsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListContinuousWebJobsSignalErrorFull() instead")
    void webAppsListContinuousWebJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListContinuousWebJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListContinuousWebJobsSlotSignalErrorFull() instead")
    void webAppsListContinuousWebJobsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListContinuousWebJobsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListDeploymentLogSignalErrorFull() instead")
    void webAppsListDeploymentLogSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListDeploymentLogSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListDeploymentLogSlotSignalErrorFull() instead")
    void webAppsListDeploymentLogSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListDeploymentLogSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListDeploymentsSignalErrorFull() instead")
    void webAppsListDeploymentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListDeploymentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListDeploymentsSlotSignalErrorFull() instead")
    void webAppsListDeploymentsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListDeploymentsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListDomainOwnershipIdentifiersSignalErrorFull() instead")
    void webAppsListDomainOwnershipIdentifiersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListDomainOwnershipIdentifiersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListDomainOwnershipIdentifiersSlotSignalErrorFull() instead")
    void webAppsListDomainOwnershipIdentifiersSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListDomainOwnershipIdentifiersSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListFunctionSecretsSignalErrorFull() instead")
    void webAppsListFunctionSecretsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListFunctionSecretsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListFunctionSecretsSlotSignalErrorFull() instead")
    void webAppsListFunctionSecretsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListFunctionSecretsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListFunctionsSignalErrorFull() instead")
    void webAppsListFunctionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListFunctionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListHostNameBindingsSignalErrorFull() instead")
    void webAppsListHostNameBindingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListHostNameBindingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListHostNameBindingsSlotSignalErrorFull() instead")
    void webAppsListHostNameBindingsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListHostNameBindingsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListHybridConnectionKeysSignalErrorFull() instead")
    void webAppsListHybridConnectionKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListHybridConnectionKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListHybridConnectionKeysSlotSignalErrorFull() instead")
    void webAppsListHybridConnectionKeysSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListHybridConnectionKeysSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListHybridConnectionsSignalErrorFull() instead")
    void webAppsListHybridConnectionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListHybridConnectionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListHybridConnectionsSlotSignalErrorFull() instead")
    void webAppsListHybridConnectionsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListHybridConnectionsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListInstanceFunctionsSlotSignalErrorFull() instead")
    void webAppsListInstanceFunctionsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListInstanceFunctionsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListInstanceIdentifiersSignalErrorFull() instead")
    void webAppsListInstanceIdentifiersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListInstanceIdentifiersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListInstanceIdentifiersSlotSignalErrorFull() instead")
    void webAppsListInstanceIdentifiersSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListInstanceIdentifiersSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListInstanceProcessModulesSignalErrorFull() instead")
    void webAppsListInstanceProcessModulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListInstanceProcessModulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListInstanceProcessModulesSlotSignalErrorFull() instead")
    void webAppsListInstanceProcessModulesSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListInstanceProcessModulesSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListInstanceProcessThreadsSignalErrorFull() instead")
    void webAppsListInstanceProcessThreadsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListInstanceProcessThreadsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListInstanceProcessThreadsSlotSignalErrorFull() instead")
    void webAppsListInstanceProcessThreadsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListInstanceProcessThreadsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListInstanceProcessesSignalErrorFull() instead")
    void webAppsListInstanceProcessesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListInstanceProcessesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListInstanceProcessesSlotSignalErrorFull() instead")
    void webAppsListInstanceProcessesSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListInstanceProcessesSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListMetadataSignalErrorFull() instead")
    void webAppsListMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListMetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListMetadataSlotSignalErrorFull() instead")
    void webAppsListMetadataSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListMetadataSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListMetricDefinitionsSignalErrorFull() instead")
    void webAppsListMetricDefinitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListMetricDefinitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListMetricDefinitionsSlotSignalErrorFull() instead")
    void webAppsListMetricDefinitionsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListMetricDefinitionsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListMetricsSignalErrorFull() instead")
    void webAppsListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListMetricsSlotSignalErrorFull() instead")
    void webAppsListMetricsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListMetricsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListNetworkFeaturesSignalErrorFull() instead")
    void webAppsListNetworkFeaturesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListNetworkFeaturesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListNetworkFeaturesSlotSignalErrorFull() instead")
    void webAppsListNetworkFeaturesSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListNetworkFeaturesSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListPerfMonCountersSignalErrorFull() instead")
    void webAppsListPerfMonCountersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListPerfMonCountersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListPerfMonCountersSlotSignalErrorFull() instead")
    void webAppsListPerfMonCountersSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListPerfMonCountersSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListPremierAddOnsSignalErrorFull() instead")
    void webAppsListPremierAddOnsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListPremierAddOnsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListPremierAddOnsSlotSignalErrorFull() instead")
    void webAppsListPremierAddOnsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListPremierAddOnsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListProcessModulesSignalErrorFull() instead")
    void webAppsListProcessModulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListProcessModulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListProcessModulesSlotSignalErrorFull() instead")
    void webAppsListProcessModulesSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListProcessModulesSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListProcessThreadsSignalErrorFull() instead")
    void webAppsListProcessThreadsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListProcessThreadsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListProcessThreadsSlotSignalErrorFull() instead")
    void webAppsListProcessThreadsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListProcessThreadsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListProcessesSignalErrorFull() instead")
    void webAppsListProcessesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListProcessesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListProcessesSlotSignalErrorFull() instead")
    void webAppsListProcessesSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListProcessesSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListPublicCertificatesSignalErrorFull() instead")
    void webAppsListPublicCertificatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListPublicCertificatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListPublicCertificatesSlotSignalErrorFull() instead")
    void webAppsListPublicCertificatesSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListPublicCertificatesSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListPublishingCredentialsSignalErrorFull() instead")
    void webAppsListPublishingCredentialsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListPublishingCredentialsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListPublishingCredentialsSlotSignalErrorFull() instead")
    void webAppsListPublishingCredentialsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListPublishingCredentialsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListPublishingProfileXmlWithSecretsSignalErrorFull() instead")
    void webAppsListPublishingProfileXmlWithSecretsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListPublishingProfileXmlWithSecretsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListPublishingProfileXmlWithSecretsSlotSignalErrorFull() instead")
    void webAppsListPublishingProfileXmlWithSecretsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListPublishingProfileXmlWithSecretsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListRelayServiceConnectionsSignalErrorFull() instead")
    void webAppsListRelayServiceConnectionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListRelayServiceConnectionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListRelayServiceConnectionsSlotSignalErrorFull() instead")
    void webAppsListRelayServiceConnectionsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListRelayServiceConnectionsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListSiteExtensionsSignalErrorFull() instead")
    void webAppsListSiteExtensionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListSiteExtensionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListSiteExtensionsSlotSignalErrorFull() instead")
    void webAppsListSiteExtensionsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListSiteExtensionsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListSitePushSettingsSignalErrorFull() instead")
    void webAppsListSitePushSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListSitePushSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListSitePushSettingsSlotSignalErrorFull() instead")
    void webAppsListSitePushSettingsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListSitePushSettingsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListSlotConfigurationNamesSignalErrorFull() instead")
    void webAppsListSlotConfigurationNamesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListSlotConfigurationNamesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListSlotDifferencesFromProductionSignalErrorFull() instead")
    void webAppsListSlotDifferencesFromProductionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListSlotDifferencesFromProductionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListSlotDifferencesSlotSignalErrorFull() instead")
    void webAppsListSlotDifferencesSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListSlotDifferencesSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListSlotsSignalErrorFull() instead")
    void webAppsListSlotsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListSlotsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListSnapshotsSignalErrorFull() instead")
    void webAppsListSnapshotsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListSnapshotsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListSnapshotsFromDRSecondarySignalErrorFull() instead")
    void webAppsListSnapshotsFromDRSecondarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListSnapshotsFromDRSecondarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListSnapshotsFromDRSecondarySlotSignalErrorFull() instead")
    void webAppsListSnapshotsFromDRSecondarySlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListSnapshotsFromDRSecondarySlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListSnapshotsSlotSignalErrorFull() instead")
    void webAppsListSnapshotsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListSnapshotsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListSyncFunctionTriggersSignalErrorFull() instead")
    void webAppsListSyncFunctionTriggersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListSyncFunctionTriggersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListSyncFunctionTriggersSlotSignalErrorFull() instead")
    void webAppsListSyncFunctionTriggersSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListSyncFunctionTriggersSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListTriggeredWebJobHistorySignalErrorFull() instead")
    void webAppsListTriggeredWebJobHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListTriggeredWebJobHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListTriggeredWebJobHistorySlotSignalErrorFull() instead")
    void webAppsListTriggeredWebJobHistorySlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListTriggeredWebJobHistorySlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListTriggeredWebJobsSignalErrorFull() instead")
    void webAppsListTriggeredWebJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListTriggeredWebJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListTriggeredWebJobsSlotSignalErrorFull() instead")
    void webAppsListTriggeredWebJobsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListTriggeredWebJobsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListUsagesSignalErrorFull() instead")
    void webAppsListUsagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListUsagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListUsagesSlotSignalErrorFull() instead")
    void webAppsListUsagesSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListUsagesSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListVnetConnectionsSignalErrorFull() instead")
    void webAppsListVnetConnectionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListVnetConnectionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListVnetConnectionsSlotSignalErrorFull() instead")
    void webAppsListVnetConnectionsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListVnetConnectionsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListWebJobsSignalErrorFull() instead")
    void webAppsListWebJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListWebJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsListWebJobsSlotSignalErrorFull() instead")
    void webAppsListWebJobsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsListWebJobsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsMigrateMySqlSignalErrorFull() instead")
    void webAppsMigrateMySqlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsMigrateMySqlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsMigrateStorageSignalErrorFull() instead")
    void webAppsMigrateStorageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsMigrateStorageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsPutPrivateAccessVnetSignalErrorFull() instead")
    void webAppsPutPrivateAccessVnetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsPutPrivateAccessVnetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsPutPrivateAccessVnetSlotSignalErrorFull() instead")
    void webAppsPutPrivateAccessVnetSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsPutPrivateAccessVnetSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsRecoverSiteConfigurationSnapshotSignalErrorFull() instead")
    void webAppsRecoverSiteConfigurationSnapshotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsRecoverSiteConfigurationSnapshotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsRecoverSiteConfigurationSnapshotSlotSignalErrorFull() instead")
    void webAppsRecoverSiteConfigurationSnapshotSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsRecoverSiteConfigurationSnapshotSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsResetProductionSlotConfigSignalErrorFull() instead")
    void webAppsResetProductionSlotConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsResetProductionSlotConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsResetSlotConfigurationSlotSignalErrorFull() instead")
    void webAppsResetSlotConfigurationSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsResetSlotConfigurationSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsRestartSignalErrorFull() instead")
    void webAppsRestartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsRestartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsRestartSlotSignalErrorFull() instead")
    void webAppsRestartSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsRestartSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsRestoreSignalErrorFull() instead")
    void webAppsRestoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsRestoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsRestoreFromBackupBlobSignalErrorFull() instead")
    void webAppsRestoreFromBackupBlobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsRestoreFromBackupBlobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsRestoreFromBackupBlobSlotSignalErrorFull() instead")
    void webAppsRestoreFromBackupBlobSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsRestoreFromBackupBlobSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsRestoreFromDeletedAppSignalErrorFull() instead")
    void webAppsRestoreFromDeletedAppSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsRestoreFromDeletedAppSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsRestoreFromDeletedAppSlotSignalErrorFull() instead")
    void webAppsRestoreFromDeletedAppSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsRestoreFromDeletedAppSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsRestoreSlotSignalErrorFull() instead")
    void webAppsRestoreSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsRestoreSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsRestoreSnapshotSignalErrorFull() instead")
    void webAppsRestoreSnapshotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsRestoreSnapshotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsRestoreSnapshotSlotSignalErrorFull() instead")
    void webAppsRestoreSnapshotSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsRestoreSnapshotSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsRunTriggeredWebJobSignalErrorFull() instead")
    void webAppsRunTriggeredWebJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsRunTriggeredWebJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsRunTriggeredWebJobSlotSignalErrorFull() instead")
    void webAppsRunTriggeredWebJobSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsRunTriggeredWebJobSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsStartSignalErrorFull() instead")
    void webAppsStartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsStartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsStartContinuousWebJobSignalErrorFull() instead")
    void webAppsStartContinuousWebJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsStartContinuousWebJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsStartContinuousWebJobSlotSignalErrorFull() instead")
    void webAppsStartContinuousWebJobSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsStartContinuousWebJobSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsStartNetworkTraceSignalErrorFull() instead")
    void webAppsStartNetworkTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsStartNetworkTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsStartNetworkTraceSlotSignalErrorFull() instead")
    void webAppsStartNetworkTraceSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsStartNetworkTraceSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsStartSlotSignalErrorFull() instead")
    void webAppsStartSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsStartSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsStartWebSiteNetworkTraceSignalErrorFull() instead")
    void webAppsStartWebSiteNetworkTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsStartWebSiteNetworkTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsStartWebSiteNetworkTraceOperationSignalErrorFull() instead")
    void webAppsStartWebSiteNetworkTraceOperationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsStartWebSiteNetworkTraceOperationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsStartWebSiteNetworkTraceOperationSlotSignalErrorFull() instead")
    void webAppsStartWebSiteNetworkTraceOperationSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsStartWebSiteNetworkTraceOperationSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsStartWebSiteNetworkTraceSlotSignalErrorFull() instead")
    void webAppsStartWebSiteNetworkTraceSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsStartWebSiteNetworkTraceSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsStopSignalErrorFull() instead")
    void webAppsStopSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsStopSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsStopContinuousWebJobSignalErrorFull() instead")
    void webAppsStopContinuousWebJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsStopContinuousWebJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsStopContinuousWebJobSlotSignalErrorFull() instead")
    void webAppsStopContinuousWebJobSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsStopContinuousWebJobSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsStopNetworkTraceSignalErrorFull() instead")
    void webAppsStopNetworkTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsStopNetworkTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsStopNetworkTraceSlotSignalErrorFull() instead")
    void webAppsStopNetworkTraceSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsStopNetworkTraceSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsStopSlotSignalErrorFull() instead")
    void webAppsStopSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsStopSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsStopWebSiteNetworkTraceSignalErrorFull() instead")
    void webAppsStopWebSiteNetworkTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsStopWebSiteNetworkTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsStopWebSiteNetworkTraceSlotSignalErrorFull() instead")
    void webAppsStopWebSiteNetworkTraceSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsStopWebSiteNetworkTraceSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsSwapSlotSlotSignalErrorFull() instead")
    void webAppsSwapSlotSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsSwapSlotSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsSwapSlotWithProductionSignalErrorFull() instead")
    void webAppsSwapSlotWithProductionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsSwapSlotWithProductionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsSyncFunctionTriggersSignalErrorFull() instead")
    void webAppsSyncFunctionTriggersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsSyncFunctionTriggersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsSyncFunctionTriggersSlotSignalErrorFull() instead")
    void webAppsSyncFunctionTriggersSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsSyncFunctionTriggersSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsSyncRepositorySignalErrorFull() instead")
    void webAppsSyncRepositorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsSyncRepositorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsSyncRepositorySlotSignalErrorFull() instead")
    void webAppsSyncRepositorySlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsSyncRepositorySlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateSignalErrorFull() instead")
    void webAppsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateApplicationSettingsSignalErrorFull() instead")
    void webAppsUpdateApplicationSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateApplicationSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateApplicationSettingsSlotSignalErrorFull() instead")
    void webAppsUpdateApplicationSettingsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateApplicationSettingsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateAuthSettingsSignalErrorFull() instead")
    void webAppsUpdateAuthSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateAuthSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateAuthSettingsSlotSignalErrorFull() instead")
    void webAppsUpdateAuthSettingsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateAuthSettingsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateAzureStorageAccountsSignalErrorFull() instead")
    void webAppsUpdateAzureStorageAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateAzureStorageAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateAzureStorageAccountsSlotSignalErrorFull() instead")
    void webAppsUpdateAzureStorageAccountsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateAzureStorageAccountsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateBackupConfigurationSignalErrorFull() instead")
    void webAppsUpdateBackupConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateBackupConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateBackupConfigurationSlotSignalErrorFull() instead")
    void webAppsUpdateBackupConfigurationSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateBackupConfigurationSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateConfigurationSignalErrorFull() instead")
    void webAppsUpdateConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateConfigurationSlotSignalErrorFull() instead")
    void webAppsUpdateConfigurationSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateConfigurationSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateConnectionStringsSignalErrorFull() instead")
    void webAppsUpdateConnectionStringsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateConnectionStringsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateConnectionStringsSlotSignalErrorFull() instead")
    void webAppsUpdateConnectionStringsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateConnectionStringsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateDiagnosticLogsConfigSignalErrorFull() instead")
    void webAppsUpdateDiagnosticLogsConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateDiagnosticLogsConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateDiagnosticLogsConfigSlotSignalErrorFull() instead")
    void webAppsUpdateDiagnosticLogsConfigSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateDiagnosticLogsConfigSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateDomainOwnershipIdentifierSignalErrorFull() instead")
    void webAppsUpdateDomainOwnershipIdentifierSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateDomainOwnershipIdentifierSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateDomainOwnershipIdentifierSlotSignalErrorFull() instead")
    void webAppsUpdateDomainOwnershipIdentifierSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateDomainOwnershipIdentifierSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateHybridConnectionSignalErrorFull() instead")
    void webAppsUpdateHybridConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateHybridConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateHybridConnectionSlotSignalErrorFull() instead")
    void webAppsUpdateHybridConnectionSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateHybridConnectionSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateMetadataSignalErrorFull() instead")
    void webAppsUpdateMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateMetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateMetadataSlotSignalErrorFull() instead")
    void webAppsUpdateMetadataSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateMetadataSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdatePremierAddOnSignalErrorFull() instead")
    void webAppsUpdatePremierAddOnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdatePremierAddOnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdatePremierAddOnSlotSignalErrorFull() instead")
    void webAppsUpdatePremierAddOnSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdatePremierAddOnSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateRelayServiceConnectionSignalErrorFull() instead")
    void webAppsUpdateRelayServiceConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateRelayServiceConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateRelayServiceConnectionSlotSignalErrorFull() instead")
    void webAppsUpdateRelayServiceConnectionSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateRelayServiceConnectionSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateSitePushSettingsSignalErrorFull() instead")
    void webAppsUpdateSitePushSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateSitePushSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateSitePushSettingsSlotSignalErrorFull() instead")
    void webAppsUpdateSitePushSettingsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateSitePushSettingsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateSlotSignalErrorFull() instead")
    void webAppsUpdateSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateSlotConfigurationNamesSignalErrorFull() instead")
    void webAppsUpdateSlotConfigurationNamesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateSlotConfigurationNamesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateSourceControlSignalErrorFull() instead")
    void webAppsUpdateSourceControlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateSourceControlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateSourceControlSlotSignalErrorFull() instead")
    void webAppsUpdateSourceControlSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateSourceControlSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateSwiftVirtualNetworkConnectionSignalErrorFull() instead")
    void webAppsUpdateSwiftVirtualNetworkConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateSwiftVirtualNetworkConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateSwiftVirtualNetworkConnectionSlotSignalErrorFull() instead")
    void webAppsUpdateSwiftVirtualNetworkConnectionSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateSwiftVirtualNetworkConnectionSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateVnetConnectionSignalErrorFull() instead")
    void webAppsUpdateVnetConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateVnetConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateVnetConnectionGatewaySignalErrorFull() instead")
    void webAppsUpdateVnetConnectionGatewaySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateVnetConnectionGatewaySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateVnetConnectionGatewaySlotSignalErrorFull() instead")
    void webAppsUpdateVnetConnectionGatewaySlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateVnetConnectionGatewaySlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webAppsUpdateVnetConnectionSlotSignalErrorFull() instead")
    void webAppsUpdateVnetConnectionSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webAppsUpdateVnetConnectionSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
