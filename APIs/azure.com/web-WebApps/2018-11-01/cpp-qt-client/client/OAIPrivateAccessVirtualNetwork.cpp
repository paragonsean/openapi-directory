/**
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrivateAccessVirtualNetwork.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrivateAccessVirtualNetwork::OAIPrivateAccessVirtualNetwork(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrivateAccessVirtualNetwork::OAIPrivateAccessVirtualNetwork() {
    this->initializeModel();
}

OAIPrivateAccessVirtualNetwork::~OAIPrivateAccessVirtualNetwork() {}

void OAIPrivateAccessVirtualNetwork::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_subnets_isSet = false;
    m_subnets_isValid = false;
}

void OAIPrivateAccessVirtualNetwork::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrivateAccessVirtualNetwork::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_subnets_isValid = ::OpenAPI::fromJsonValue(m_subnets, json[QString("subnets")]);
    m_subnets_isSet = !json[QString("subnets")].isNull() && m_subnets_isValid;
}

QString OAIPrivateAccessVirtualNetwork::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrivateAccessVirtualNetwork::asJsonObject() const {
    QJsonObject obj;
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_subnets.size() > 0) {
        obj.insert(QString("subnets"), ::OpenAPI::toJsonValue(m_subnets));
    }
    return obj;
}

qint32 OAIPrivateAccessVirtualNetwork::getKey() const {
    return m_key;
}
void OAIPrivateAccessVirtualNetwork::setKey(const qint32 &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIPrivateAccessVirtualNetwork::is_key_Set() const{
    return m_key_isSet;
}

bool OAIPrivateAccessVirtualNetwork::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIPrivateAccessVirtualNetwork::getName() const {
    return m_name;
}
void OAIPrivateAccessVirtualNetwork::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPrivateAccessVirtualNetwork::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPrivateAccessVirtualNetwork::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPrivateAccessVirtualNetwork::getResourceId() const {
    return m_resource_id;
}
void OAIPrivateAccessVirtualNetwork::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIPrivateAccessVirtualNetwork::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIPrivateAccessVirtualNetwork::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QList<OAIPrivateAccessSubnet> OAIPrivateAccessVirtualNetwork::getSubnets() const {
    return m_subnets;
}
void OAIPrivateAccessVirtualNetwork::setSubnets(const QList<OAIPrivateAccessSubnet> &subnets) {
    m_subnets = subnets;
    m_subnets_isSet = true;
}

bool OAIPrivateAccessVirtualNetwork::is_subnets_Set() const{
    return m_subnets_isSet;
}

bool OAIPrivateAccessVirtualNetwork::is_subnets_Valid() const{
    return m_subnets_isValid;
}

bool OAIPrivateAccessVirtualNetwork::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnets.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrivateAccessVirtualNetwork::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
