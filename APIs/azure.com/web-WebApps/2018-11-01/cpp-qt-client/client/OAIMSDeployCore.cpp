/**
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMSDeployCore.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMSDeployCore::OAIMSDeployCore(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMSDeployCore::OAIMSDeployCore() {
    this->initializeModel();
}

OAIMSDeployCore::~OAIMSDeployCore() {}

void OAIMSDeployCore::initializeModel() {

    m_app_offline_isSet = false;
    m_app_offline_isValid = false;

    m_connection_string_isSet = false;
    m_connection_string_isValid = false;

    m_db_type_isSet = false;
    m_db_type_isValid = false;

    m_package_uri_isSet = false;
    m_package_uri_isValid = false;

    m_set_parameters_isSet = false;
    m_set_parameters_isValid = false;

    m_set_parameters_xml_file_uri_isSet = false;
    m_set_parameters_xml_file_uri_isValid = false;

    m_skip_app_data_isSet = false;
    m_skip_app_data_isValid = false;
}

void OAIMSDeployCore::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMSDeployCore::fromJsonObject(QJsonObject json) {

    m_app_offline_isValid = ::OpenAPI::fromJsonValue(m_app_offline, json[QString("appOffline")]);
    m_app_offline_isSet = !json[QString("appOffline")].isNull() && m_app_offline_isValid;

    m_connection_string_isValid = ::OpenAPI::fromJsonValue(m_connection_string, json[QString("connectionString")]);
    m_connection_string_isSet = !json[QString("connectionString")].isNull() && m_connection_string_isValid;

    m_db_type_isValid = ::OpenAPI::fromJsonValue(m_db_type, json[QString("dbType")]);
    m_db_type_isSet = !json[QString("dbType")].isNull() && m_db_type_isValid;

    m_package_uri_isValid = ::OpenAPI::fromJsonValue(m_package_uri, json[QString("packageUri")]);
    m_package_uri_isSet = !json[QString("packageUri")].isNull() && m_package_uri_isValid;

    m_set_parameters_isValid = ::OpenAPI::fromJsonValue(m_set_parameters, json[QString("setParameters")]);
    m_set_parameters_isSet = !json[QString("setParameters")].isNull() && m_set_parameters_isValid;

    m_set_parameters_xml_file_uri_isValid = ::OpenAPI::fromJsonValue(m_set_parameters_xml_file_uri, json[QString("setParametersXmlFileUri")]);
    m_set_parameters_xml_file_uri_isSet = !json[QString("setParametersXmlFileUri")].isNull() && m_set_parameters_xml_file_uri_isValid;

    m_skip_app_data_isValid = ::OpenAPI::fromJsonValue(m_skip_app_data, json[QString("skipAppData")]);
    m_skip_app_data_isSet = !json[QString("skipAppData")].isNull() && m_skip_app_data_isValid;
}

QString OAIMSDeployCore::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMSDeployCore::asJsonObject() const {
    QJsonObject obj;
    if (m_app_offline_isSet) {
        obj.insert(QString("appOffline"), ::OpenAPI::toJsonValue(m_app_offline));
    }
    if (m_connection_string_isSet) {
        obj.insert(QString("connectionString"), ::OpenAPI::toJsonValue(m_connection_string));
    }
    if (m_db_type_isSet) {
        obj.insert(QString("dbType"), ::OpenAPI::toJsonValue(m_db_type));
    }
    if (m_package_uri_isSet) {
        obj.insert(QString("packageUri"), ::OpenAPI::toJsonValue(m_package_uri));
    }
    if (m_set_parameters.size() > 0) {
        obj.insert(QString("setParameters"), ::OpenAPI::toJsonValue(m_set_parameters));
    }
    if (m_set_parameters_xml_file_uri_isSet) {
        obj.insert(QString("setParametersXmlFileUri"), ::OpenAPI::toJsonValue(m_set_parameters_xml_file_uri));
    }
    if (m_skip_app_data_isSet) {
        obj.insert(QString("skipAppData"), ::OpenAPI::toJsonValue(m_skip_app_data));
    }
    return obj;
}

bool OAIMSDeployCore::isAppOffline() const {
    return m_app_offline;
}
void OAIMSDeployCore::setAppOffline(const bool &app_offline) {
    m_app_offline = app_offline;
    m_app_offline_isSet = true;
}

bool OAIMSDeployCore::is_app_offline_Set() const{
    return m_app_offline_isSet;
}

bool OAIMSDeployCore::is_app_offline_Valid() const{
    return m_app_offline_isValid;
}

QString OAIMSDeployCore::getConnectionString() const {
    return m_connection_string;
}
void OAIMSDeployCore::setConnectionString(const QString &connection_string) {
    m_connection_string = connection_string;
    m_connection_string_isSet = true;
}

bool OAIMSDeployCore::is_connection_string_Set() const{
    return m_connection_string_isSet;
}

bool OAIMSDeployCore::is_connection_string_Valid() const{
    return m_connection_string_isValid;
}

QString OAIMSDeployCore::getDbType() const {
    return m_db_type;
}
void OAIMSDeployCore::setDbType(const QString &db_type) {
    m_db_type = db_type;
    m_db_type_isSet = true;
}

bool OAIMSDeployCore::is_db_type_Set() const{
    return m_db_type_isSet;
}

bool OAIMSDeployCore::is_db_type_Valid() const{
    return m_db_type_isValid;
}

QString OAIMSDeployCore::getPackageUri() const {
    return m_package_uri;
}
void OAIMSDeployCore::setPackageUri(const QString &package_uri) {
    m_package_uri = package_uri;
    m_package_uri_isSet = true;
}

bool OAIMSDeployCore::is_package_uri_Set() const{
    return m_package_uri_isSet;
}

bool OAIMSDeployCore::is_package_uri_Valid() const{
    return m_package_uri_isValid;
}

QMap<QString, QString> OAIMSDeployCore::getSetParameters() const {
    return m_set_parameters;
}
void OAIMSDeployCore::setSetParameters(const QMap<QString, QString> &set_parameters) {
    m_set_parameters = set_parameters;
    m_set_parameters_isSet = true;
}

bool OAIMSDeployCore::is_set_parameters_Set() const{
    return m_set_parameters_isSet;
}

bool OAIMSDeployCore::is_set_parameters_Valid() const{
    return m_set_parameters_isValid;
}

QString OAIMSDeployCore::getSetParametersXmlFileUri() const {
    return m_set_parameters_xml_file_uri;
}
void OAIMSDeployCore::setSetParametersXmlFileUri(const QString &set_parameters_xml_file_uri) {
    m_set_parameters_xml_file_uri = set_parameters_xml_file_uri;
    m_set_parameters_xml_file_uri_isSet = true;
}

bool OAIMSDeployCore::is_set_parameters_xml_file_uri_Set() const{
    return m_set_parameters_xml_file_uri_isSet;
}

bool OAIMSDeployCore::is_set_parameters_xml_file_uri_Valid() const{
    return m_set_parameters_xml_file_uri_isValid;
}

bool OAIMSDeployCore::isSkipAppData() const {
    return m_skip_app_data;
}
void OAIMSDeployCore::setSkipAppData(const bool &skip_app_data) {
    m_skip_app_data = skip_app_data;
    m_skip_app_data_isSet = true;
}

bool OAIMSDeployCore::is_skip_app_data_Set() const{
    return m_skip_app_data_isSet;
}

bool OAIMSDeployCore::is_skip_app_data_Valid() const{
    return m_skip_app_data_isValid;
}

bool OAIMSDeployCore::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_offline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_set_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_set_parameters_xml_file_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_app_data_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMSDeployCore::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
