/*
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.WebAppsList200ResponseValueInnerPropertiesSiteConfigApiDefinition;
import org.openapitools.client.model.WebAppsList200ResponseValueInnerPropertiesSiteConfigAppSettingsInner;
import org.openapitools.client.model.WebAppsList200ResponseValueInnerPropertiesSiteConfigAutoHealRules;
import org.openapitools.client.model.WebAppsList200ResponseValueInnerPropertiesSiteConfigAzureStorageAccountsValue;
import org.openapitools.client.model.WebAppsList200ResponseValueInnerPropertiesSiteConfigConnectionStringsInner;
import org.openapitools.client.model.WebAppsList200ResponseValueInnerPropertiesSiteConfigCors;
import org.openapitools.client.model.WebAppsList200ResponseValueInnerPropertiesSiteConfigExperiments;
import org.openapitools.client.model.WebAppsList200ResponseValueInnerPropertiesSiteConfigHandlerMappingsInner;
import org.openapitools.client.model.WebAppsList200ResponseValueInnerPropertiesSiteConfigIpSecurityRestrictionsInner;
import org.openapitools.client.model.WebAppsList200ResponseValueInnerPropertiesSiteConfigLimits;
import org.openapitools.client.model.WebAppsList200ResponseValueInnerPropertiesSiteConfigMachineKey;
import org.openapitools.client.model.WebAppsList200ResponseValueInnerPropertiesSiteConfigPush;
import org.openapitools.client.model.WebAppsList200ResponseValueInnerPropertiesSiteConfigVirtualApplicationsInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for WebAppsList200ResponseValueInnerPropertiesSiteConfig
 */
public class WebAppsList200ResponseValueInnerPropertiesSiteConfigTest {
    private final WebAppsList200ResponseValueInnerPropertiesSiteConfig model = new WebAppsList200ResponseValueInnerPropertiesSiteConfig();

    /**
     * Model tests for WebAppsList200ResponseValueInnerPropertiesSiteConfig
     */
    @Test
    public void testWebAppsList200ResponseValueInnerPropertiesSiteConfig() {
        // TODO: test WebAppsList200ResponseValueInnerPropertiesSiteConfig
    }

    /**
     * Test the property 'alwaysOn'
     */
    @Test
    public void alwaysOnTest() {
        // TODO: test alwaysOn
    }

    /**
     * Test the property 'apiDefinition'
     */
    @Test
    public void apiDefinitionTest() {
        // TODO: test apiDefinition
    }

    /**
     * Test the property 'appCommandLine'
     */
    @Test
    public void appCommandLineTest() {
        // TODO: test appCommandLine
    }

    /**
     * Test the property 'appSettings'
     */
    @Test
    public void appSettingsTest() {
        // TODO: test appSettings
    }

    /**
     * Test the property 'autoHealEnabled'
     */
    @Test
    public void autoHealEnabledTest() {
        // TODO: test autoHealEnabled
    }

    /**
     * Test the property 'autoHealRules'
     */
    @Test
    public void autoHealRulesTest() {
        // TODO: test autoHealRules
    }

    /**
     * Test the property 'autoSwapSlotName'
     */
    @Test
    public void autoSwapSlotNameTest() {
        // TODO: test autoSwapSlotName
    }

    /**
     * Test the property 'azureStorageAccounts'
     */
    @Test
    public void azureStorageAccountsTest() {
        // TODO: test azureStorageAccounts
    }

    /**
     * Test the property 'connectionStrings'
     */
    @Test
    public void connectionStringsTest() {
        // TODO: test connectionStrings
    }

    /**
     * Test the property 'cors'
     */
    @Test
    public void corsTest() {
        // TODO: test cors
    }

    /**
     * Test the property 'defaultDocuments'
     */
    @Test
    public void defaultDocumentsTest() {
        // TODO: test defaultDocuments
    }

    /**
     * Test the property 'detailedErrorLoggingEnabled'
     */
    @Test
    public void detailedErrorLoggingEnabledTest() {
        // TODO: test detailedErrorLoggingEnabled
    }

    /**
     * Test the property 'documentRoot'
     */
    @Test
    public void documentRootTest() {
        // TODO: test documentRoot
    }

    /**
     * Test the property 'experiments'
     */
    @Test
    public void experimentsTest() {
        // TODO: test experiments
    }

    /**
     * Test the property 'ftpsState'
     */
    @Test
    public void ftpsStateTest() {
        // TODO: test ftpsState
    }

    /**
     * Test the property 'handlerMappings'
     */
    @Test
    public void handlerMappingsTest() {
        // TODO: test handlerMappings
    }

    /**
     * Test the property 'http20Enabled'
     */
    @Test
    public void http20EnabledTest() {
        // TODO: test http20Enabled
    }

    /**
     * Test the property 'httpLoggingEnabled'
     */
    @Test
    public void httpLoggingEnabledTest() {
        // TODO: test httpLoggingEnabled
    }

    /**
     * Test the property 'ipSecurityRestrictions'
     */
    @Test
    public void ipSecurityRestrictionsTest() {
        // TODO: test ipSecurityRestrictions
    }

    /**
     * Test the property 'javaContainer'
     */
    @Test
    public void javaContainerTest() {
        // TODO: test javaContainer
    }

    /**
     * Test the property 'javaContainerVersion'
     */
    @Test
    public void javaContainerVersionTest() {
        // TODO: test javaContainerVersion
    }

    /**
     * Test the property 'javaVersion'
     */
    @Test
    public void javaVersionTest() {
        // TODO: test javaVersion
    }

    /**
     * Test the property 'limits'
     */
    @Test
    public void limitsTest() {
        // TODO: test limits
    }

    /**
     * Test the property 'linuxFxVersion'
     */
    @Test
    public void linuxFxVersionTest() {
        // TODO: test linuxFxVersion
    }

    /**
     * Test the property 'loadBalancing'
     */
    @Test
    public void loadBalancingTest() {
        // TODO: test loadBalancing
    }

    /**
     * Test the property 'localMySqlEnabled'
     */
    @Test
    public void localMySqlEnabledTest() {
        // TODO: test localMySqlEnabled
    }

    /**
     * Test the property 'logsDirectorySizeLimit'
     */
    @Test
    public void logsDirectorySizeLimitTest() {
        // TODO: test logsDirectorySizeLimit
    }

    /**
     * Test the property 'machineKey'
     */
    @Test
    public void machineKeyTest() {
        // TODO: test machineKey
    }

    /**
     * Test the property 'managedPipelineMode'
     */
    @Test
    public void managedPipelineModeTest() {
        // TODO: test managedPipelineMode
    }

    /**
     * Test the property 'managedServiceIdentityId'
     */
    @Test
    public void managedServiceIdentityIdTest() {
        // TODO: test managedServiceIdentityId
    }

    /**
     * Test the property 'minTlsVersion'
     */
    @Test
    public void minTlsVersionTest() {
        // TODO: test minTlsVersion
    }

    /**
     * Test the property 'netFrameworkVersion'
     */
    @Test
    public void netFrameworkVersionTest() {
        // TODO: test netFrameworkVersion
    }

    /**
     * Test the property 'nodeVersion'
     */
    @Test
    public void nodeVersionTest() {
        // TODO: test nodeVersion
    }

    /**
     * Test the property 'numberOfWorkers'
     */
    @Test
    public void numberOfWorkersTest() {
        // TODO: test numberOfWorkers
    }

    /**
     * Test the property 'phpVersion'
     */
    @Test
    public void phpVersionTest() {
        // TODO: test phpVersion
    }

    /**
     * Test the property 'publishingUsername'
     */
    @Test
    public void publishingUsernameTest() {
        // TODO: test publishingUsername
    }

    /**
     * Test the property 'push'
     */
    @Test
    public void pushTest() {
        // TODO: test push
    }

    /**
     * Test the property 'pythonVersion'
     */
    @Test
    public void pythonVersionTest() {
        // TODO: test pythonVersion
    }

    /**
     * Test the property 'remoteDebuggingEnabled'
     */
    @Test
    public void remoteDebuggingEnabledTest() {
        // TODO: test remoteDebuggingEnabled
    }

    /**
     * Test the property 'remoteDebuggingVersion'
     */
    @Test
    public void remoteDebuggingVersionTest() {
        // TODO: test remoteDebuggingVersion
    }

    /**
     * Test the property 'requestTracingEnabled'
     */
    @Test
    public void requestTracingEnabledTest() {
        // TODO: test requestTracingEnabled
    }

    /**
     * Test the property 'requestTracingExpirationTime'
     */
    @Test
    public void requestTracingExpirationTimeTest() {
        // TODO: test requestTracingExpirationTime
    }

    /**
     * Test the property 'reservedInstanceCount'
     */
    @Test
    public void reservedInstanceCountTest() {
        // TODO: test reservedInstanceCount
    }

    /**
     * Test the property 'scmIpSecurityRestrictions'
     */
    @Test
    public void scmIpSecurityRestrictionsTest() {
        // TODO: test scmIpSecurityRestrictions
    }

    /**
     * Test the property 'scmIpSecurityRestrictionsUseMain'
     */
    @Test
    public void scmIpSecurityRestrictionsUseMainTest() {
        // TODO: test scmIpSecurityRestrictionsUseMain
    }

    /**
     * Test the property 'scmType'
     */
    @Test
    public void scmTypeTest() {
        // TODO: test scmType
    }

    /**
     * Test the property 'tracingOptions'
     */
    @Test
    public void tracingOptionsTest() {
        // TODO: test tracingOptions
    }

    /**
     * Test the property 'use32BitWorkerProcess'
     */
    @Test
    public void use32BitWorkerProcessTest() {
        // TODO: test use32BitWorkerProcess
    }

    /**
     * Test the property 'virtualApplications'
     */
    @Test
    public void virtualApplicationsTest() {
        // TODO: test virtualApplications
    }

    /**
     * Test the property 'vnetName'
     */
    @Test
    public void vnetNameTest() {
        // TODO: test vnetName
    }

    /**
     * Test the property 'webSocketsEnabled'
     */
    @Test
    public void webSocketsEnabledTest() {
        // TODO: test webSocketsEnabled
    }

    /**
     * Test the property 'windowsFxVersion'
     */
    @Test
    public void windowsFxVersionTest() {
        // TODO: test windowsFxVersion
    }

    /**
     * Test the property 'xManagedServiceIdentityId'
     */
    @Test
    public void xManagedServiceIdentityIdTest() {
        // TODO: test xManagedServiceIdentityId
    }

}
